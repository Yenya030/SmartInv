1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/sale/Sale.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"../token/Asset.sol\";\nimport \"../lib/Operatorable.sol\";\nimport \"../lib/Signer.sol\";\nimport \"../Error.sol\";\n\ncontract Sale is Operatorable, Signer {\n  using Address for address;\n\n  enum Step {\n    NONE,\n    PRESALE,\n    SALE\n  }\n\n  Step public step;\n\n  // Gaming asset contract\n  Asset public immutable asset;\n\n  // Token price in Wei\n  uint256 public price;\n\n  // Minting cap in pre-sale and public sale\n  uint256 public immutable mintingCap;\n\n  // Maximum mint amount in pre-sale and public sale\n  uint256 public maxMintable;\n\n  // Totally minted amount in pre-sale and public sale\n  uint256 public totalMinted;\n\n  // Maximum mint amount per one transaction\n  uint256 public maxMintPerTx = 3;\n\n  // Maximum mint amount per one wallet\n  uint256 public maxMintPerAddress = 3;\n\n  // wallet address => minted amount\n  mapping(address => uint256) public minted;\n\n  // whitelist wallet address => minted amount (pre-sale)\n  mapping(address => uint256) public mintedPresale;\n\n  event LogMaxMintPerTxSet(uint256 maxMintPerTx);\n\n  event LogMaxMintPerAddressSet(uint256 maxMintPerAddress);\n\n  event LogSaleStarted(address indexed operator);\n\n  event LogPresaleStarted(address indexed operator);\n\n  event LogSaleEnded(address indexed operator);\n\n  event LogAssetSet(Asset indexed asset);\n\n  event LogMintingCapSet(uint256 mintingCap);\n\n  event LogEthSent(\n    address indexed account, \n    uint256 amount\n  );\n\n  event LogPurchased(\n    address indexed account, \n    uint256 amount\n  );\n\n  event LogPriceSet(uint256 price);\n\n  event LogMaxMintableSet(uint256 maxMintable);\n\n  event LogUnsoldTokensMinted(\n    address indexed account,\n    uint256 amount\n  );\n\n  /**\n   * @param _signer signer wallet\n   * @param _asset Asset contract address; must be contract address\n   * @param _mintingCap minting cap; must not be zero\n   */\n  constructor(\n    address _signer,\n    Asset _asset,\n    uint256 _mintingCap\n  ) Signer(_signer) { \n    if (!address(_asset).isContract()) revert NotContract();\n    if (_mintingCap == 0) revert InvalidMintingCap();\n\n    asset = _asset;\n    mintingCap = _mintingCap;\n    emit LogAssetSet(_asset);\n    emit LogMintingCapSet(_mintingCap);\n  }\n\n  /**\n   * @dev Disable Eth receive with no data\n   */\n  receive() external payable {\n    revert EthReceived();\n  }\n\n  /**\n   * @dev Start presale step\n   *\n   * Requirements:\n   * - Only operator can call\n   */\n  function startPresale() external onlyOperator {\n    if (step == Step.PRESALE) revert NoChangeToTheState();\n\n    step = Step.PRESALE;\n    emit LogPresaleStarted(msg.sender);\n  }\n\n  /**\n   * @dev End presale/sale\n   *\n   * Requirements:\n   * - Only operator can call\n   */\n  function endSale() external onlyOperator {\n    if (step == Step.NONE) revert NoChangeToTheState();\n\n    step = Step.NONE;\n    emit LogSaleEnded(msg.sender);\n  }\n\n  /**\n   * @dev Start public sale step\n   *\n   * Requirements:\n   * - Only operator can call\n   */\n  function startSale() external onlyOperator {\n    if (step == Step.SALE) revert NoChangeToTheState();\n\n    step = Step.SALE;\n    emit LogSaleStarted(msg.sender);\n  }\n\n  /**\n   * @dev Set NFT price\n   *\n   * Requirements:\n   * - Only operator can call\n   * @param _price NFT price; zero possible; must not be same as before\n   */\n  function setPrice(uint256 _price) external onlyOperator {\n    if (_price == price) revert NoChangeToTheState();\n    \n    price = _price;\n    emit LogPriceSet(_price);\n  }\n\n  /**\n   * @dev Set max mint per tx\n   *\n   * Requirements:\n   * - Only operator can call\n   * @param _maxMintPerTx max mint limit per tx; must not be zero; must not be same as before\n   */\n  function setMaxMintPerTx(uint256 _maxMintPerTx) external onlyOperator {\n    if (_maxMintPerTx == 0) revert InvalidMaxMintPerTx();\n    if (_maxMintPerTx == maxMintPerTx) revert NoChangeToTheState();\n\n    maxMintPerTx = _maxMintPerTx;\n    emit LogMaxMintPerTxSet(_maxMintPerTx);\n  }\n\n  /**\n   * @dev Set max mint per wallet\n   *\n   * Requirements:\n   * - Only operator can call\n   * @param _maxMintPerAddress max mint limit per wallet; must not be zero; must not be same as before\n   */\n  function setMaxMintPerAddress(uint256 _maxMintPerAddress) external onlyOperator {\n    if (_maxMintPerAddress == 0) revert InvalidMaxMintPerAddress();\n    if (_maxMintPerAddress == maxMintPerAddress) revert NoChangeToTheState();\n    \n    maxMintPerAddress = _maxMintPerAddress;\n    emit LogMaxMintPerAddressSet(_maxMintPerAddress);\n  }\n\n  /**\n   * @dev Increase max mint amount\n   *\n   * Requirements:\n   * - Only operator can call\n   * - Increased max mint must not exceed cap\n   * @param _amount increase amount; must not be zero\n   */\n  function increaseMaxMintable(uint256 _amount) external onlyOperator {\n    if (_amount == 0) revert InvalidAmount();\n\n    uint256 _maxMintableIncreased = maxMintable + _amount;\n\n    if (_maxMintableIncreased > mintingCap) revert ExceedCap();\n\n    maxMintable = _maxMintableIncreased;\n    emit LogMaxMintableSet(_maxMintableIncreased);\n  }\n\n  /**\n   * @dev Mint unsold tokens; amount = total cap - total minted amount\n   *\n   * Requirements:\n   * - Only operator can call\n   * - Sale must be ended\n   * - NFTs must not be sold out\n   * @param _to receiver wallet; must not be zero address\n   */\n  function mintUnsoldTokens(address _to) external onlyOperator {\n    if (step != Step.NONE) revert SaleNotEnded();\n    if (totalMinted == mintingCap) revert NFTSoldOut();\n\n    uint256 _amount;\n\n    unchecked {\n      // we will not underflow `_amount` because of above check\n      _amount = mintingCap - totalMinted;\n    }\n\n    asset.mintBatch(_to, _amount);\n    totalMinted = mintingCap;\n    emit LogUnsoldTokensMinted(_to, _amount);\n  }\n\n  /**\n   * @dev Withdraw Eth\n   *\n   * Requirements:\n   * - Only `owner` can call\n   * @param _to receiver wallet; must not be zero address\n   */\n  function withdrawEth(address _to) external onlyOwner {\n    if (_to == address(0)) revert InvalidAddress();\n\n    uint256 balance = address(this).balance;\n    payable(_to).transfer(balance);\n    emit LogEthSent(_to, balance);\n  }\n\n  /**\n   * @dev Purchase tokens\n   *\n   * Requirements:\n   * - Sale must be ongoing\n   * - Caller must not be contract address\n   * - Enough Eth must be received\n   * @param _amount buy amount; must not be zero; must not exceed max mint per tx\n   */\n  function purchase(\n    uint256 _amount,\n    bytes calldata _sig\n  ) external payable {\n    if (msg.sender.isContract()) revert InvalidAddress();\n    if (_amount == 0) revert InvalidAmount();\n    if (_amount > maxMintPerTx) revert ExceedMaxMintPerTx();\n\n    if (step == Step.PRESALE) {\n      bytes32 msgHash = keccak256(abi.encodePacked(\n        super._chainId(), \n        address(asset), \n        _amount, \n        msg.sender,\n        ++nonces[msg.sender]\n      ));\n\n      if (!super._verify(msgHash, _sig)) revert InvalidSignature();\n\n      _updateMintedAmount(mintedPresale, _amount);\n    } else if (step == Step.SALE) {\n      _updateMintedAmount(minted, _amount);\n    } else {\n      revert SaleNotGoing();\n    }\n\n    uint256 _totalMinted = totalMinted + _amount;\n    uint256 totalPrice = _amount * price;\n\n    if (_totalMinted > maxMintable) revert ExceedMaxMintable();\n    if (msg.value < totalPrice) revert InsufficientEth();\n\n    asset.mintBatch(msg.sender, _amount);\n    totalMinted = _totalMinted;\n    uint256 change = msg.value - totalPrice;\n\n    if (change != 0) {\n      payable(msg.sender).transfer(change);\n    }\n\n    emit LogPurchased(msg.sender, _amount);\n  }\n\n  /**\n   * Override {Operatorable-transferOwnership}\n   */\n  function transferOwnership(address _newOwner) public virtual override(Ownable, Operatorable) {\n    Operatorable.transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Update minted amount\n   * @param _storage mintedPresale or minted\n   * @param _amount purchase amount\n   */\n  function _updateMintedAmount(\n    mapping(address => uint256) storage _storage, \n    uint256 _amount\n  ) private {\n    uint256 _minted = _storage[msg.sender] + _amount;\n\n    if (_minted > maxMintPerAddress) revert ExceedMaxMintPerAddress();\n\n    _storage[msg.sender] = _minted;\n  }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/Address.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
9     },
10     "contracts/token/Asset.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport \"./ERC4907.sol\";\nimport \"./ERC721Blacklisted.sol\";\nimport \"../lib/PausableOwned.sol\";\nimport \"../lib/Minterable.sol\";\nimport \"../Error.sol\";\n\ncontract Asset is ERC721Enumerable, ERC721Burnable, ERC721Blacklisted, ERC2981, ERC4907, PausableOwned, Minterable {\n  using Address for address;\n  \n  // Base token URI\n  string public baseTokenURI;\n\n  // Last token ID\n  uint256 public tokenId;\n\n  event LogMinted(\n    address indexed account, \n    uint256 indexed tokenId\n  );\n\n  event LogBurnt(uint256 indexed tokenId);\n\n  event LogBaseTokenURISet(string baseTokenURI);\n\n  /**\n   * @dev Throw if minting allowance is exceeded for non owner minter\n   * @param _address minter wallet\n   * @param _amount minting amount\n   */\n  modifier decreaseValidAllowance(\n    address _address,\n    uint256 _amount\n  ) {\n    if (_address != owner()) super._decreaseAllowance(_address, _amount);\n\n    _;\n  }\n\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    string memory _baseTokenURI,\n    uint256 _lastTokenId\n  ) ERC4907(_name, _symbol) {\n    baseTokenURI = _baseTokenURI;\n    tokenId = _lastTokenId;\n  }\n\n  /**\n   * @dev Set base token uri\n   *\n   * Requirements:\n   * - Only `owner` can call\n   * @param _baseTokenURI new base token uri string\n   */\n  function setBaseTokenURI(string memory _baseTokenURI) external onlyOwner {\n    if (keccak256(abi.encodePacked(_baseTokenURI)) == keccak256(abi.encodePacked(baseTokenURI))) {\n      revert NoChangeToTheState();\n    }\n\n    baseTokenURI = _baseTokenURI;\n    emit LogBaseTokenURISet(_baseTokenURI);\n  }\n\n  /**\n   * See {ERC2981-_setDefaultRoyalty}\n   *\n   * Requirements:\n   * - Only `owner` can call\n   */\n  function setDefaultRoyalty(\n    address _receiver, \n    uint96 _feeNumerator\n  ) external onlyOwner {\n    super._setDefaultRoyalty(_receiver, _feeNumerator);\n  }\n\n  /**\n   * See {ERC2981-_deleteDefaultRoyalty}\n   *\n   * Requirements:\n   * - Only `owner` can call\n   */\n  function deleteDefaultRoyalty() external onlyOwner {\n    super._deleteDefaultRoyalty();\n  }\n\n  /**\n   * See {ERC2981-_setTokenRoyalty}\n   *\n   * Requirements:\n   * - Only `owner` can call\n   */\n  function setTokenRoyalty(\n    uint256 _tokenId,\n    address _receiver,\n    uint96 _feeNumerator\n  ) external onlyOwner {\n    super._setTokenRoyalty(_tokenId, _receiver, _feeNumerator);\n  }\n\n  /**\n   * See {ERC2981-_resetTokenRoyalty}\n   *\n   * Requirements:\n   * - Only `owner` can call\n   */\n  function resetTokenRoyalty(uint256 _tokenId) external onlyOwner {\n    super._resetTokenRoyalty(_tokenId);\n  }\n  \n  /**\n   * @dev Mint a new token\n   *\n   * Requirements:\n   * - Only minter can call (contract owner is minter)\n   * - Check minting allowance for non owner minter\n   * @param _account receiver wallet\n   * @return newTokenId incremented new token id\n   */\n  function mint(address _account) \n    external \n    onlyMinter \n    decreaseValidAllowance(msg.sender, 1) \n    returns (uint256 newTokenId) \n  {\n    unchecked { \n      // we will not overflow on `tokenId` in a lifetime\n      newTokenId = ++tokenId;\n    }\n    \n    super._mint(_account, newTokenId);\n    emit LogMinted(_account, newTokenId);\n  }\n\n  /**\n   * @dev Mint a new token for cross-chain transfer\n   *\n   * Requirements:\n   * - Only bridge contract can call (bridge contract is minter)\n   * - Check minting allowance for bridge contract\n   * @param _account receiver wallet\n   * @param _tokenId minting token id\n   */\n  function mint(\n    address _account,\n    uint256 _tokenId\n  ) external \n    onlyMinter \n    decreaseValidAllowance(msg.sender, 1) \n  {\n    super._mint(_account, _tokenId);\n    emit LogMinted(_account, _tokenId);\n  }\n\n  /**\n   * @dev Mint a batch of tokens\n   * Zero amount check is done in {Minterable:_decreaseAllowance}\n   *\n   * Requirements:\n   * - Only minter can call (contract owner is minter)\n   * - Check minting allowance for non owner minter\n   * @param _account receiver wallet\n   * @param _amount minting amount; must not be zero\n   */\n  function mintBatch(\n    address _account,\n    uint256 _amount\n  ) external onlyMinter decreaseValidAllowance(msg.sender, _amount) {\n    unchecked { \n      // we are not accepting enough data to overflow on `_amount`\n      for (uint256 i = 0; i < _amount; i++) {\n        // we will not overflow on `tokenId` in a lifetime\n        uint256 newTokenId = ++tokenId; \n        super._mint(_account, newTokenId);\n        emit LogMinted(_account, newTokenId);\n      }      \n    }\n  }\n\n  /**\n   * @dev Mint a batch of tokens for cross-chain transfer\n   *\n   * Requirements:\n   * - Only bridge contract can call (bridge contract is minter)\n   * - Check minting allowance for bridge contract\n   * @param _account receiver wallet\n   * @param _tokenIds array of minting token id; must not have zero\n   */\n  function mintBatch(\n    address _account,\n    uint256[] calldata _tokenIds\n  ) external onlyMinter decreaseValidAllowance(msg.sender, _tokenIds.length) {\n    unchecked { \n      // we are not accepting enough data to overflow on `_tokenIds`\n      for (uint256 i = 0; i < _tokenIds.length; i++) {\n        super._mint(_account, _tokenIds[i]);\n        emit LogMinted(_account, _tokenIds[i]);\n      }      \n    }\n  }\n\n  /**\n   * Override {ERC721Burnable-burn}\n   */\n  function burn(uint256 _tokenId) public override {\n    ERC721Burnable.burn(_tokenId);\n    emit LogBurnt(_tokenId);\n  }\n\n  /**\n   * Override {Minterable-transferOwnership}\n   */\n  function transferOwnership(address _newOwner) public virtual override(Ownable, Minterable) {\n    Minterable.transferOwnership(_newOwner);\n  }\n  \n  /**\n   * Override {IERC165-supportsInterface}\n   */\n  function supportsInterface(bytes4 _interfaceId) \n    public \n    view \n    virtual \n    override(ERC721, ERC721Enumerable, ERC2981, AccessControl, ERC4907)\n    returns (bool)\n  {\n    return super.supportsInterface(_interfaceId);\n  }\n\n  /**\n   * Disable token transfer:\n   * - from/to blacklisted wallets\n   * - when paused\n   */\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256 _tokenId\n  ) internal override(ERC721, ERC721Enumerable, ERC721Blacklisted, ERC4907) whenNotPaused {\n    ERC721Blacklisted._beforeTokenTransfer(_from, _to, _tokenId);\n    ERC721Enumerable._beforeTokenTransfer(_from, _to, _tokenId);\n    ERC4907._beforeTokenTransfer(_from, _to, _tokenId);\n  }\n  \n  /**\n   * Override {ERC721:_baseURI}\n   */\n  function _baseURI() internal view override returns (string memory) {\n    return baseTokenURI;\n  }\n}\n"
12     },
13     "contracts/lib/Operatorable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Error.sol\";\n\ncontract Operatorable is AccessControl, Ownable {\n  bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n  event LogOperatorAdded(address indexed account);\n\n  event LogOperatorRemoved(address indexed account);\n\n  /**\n    * @dev Restricted to members of the `operator` role.\n    */\n  modifier onlyOperator() {\n    if (!hasRole(OPERATOR_ROLE, msg.sender)) revert NoOperatorRole();\n\n    _;\n  }\n\n  /**\n   * @dev Contract owner is operator\n   */\n  constructor() {\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(OPERATOR_ROLE, msg.sender);\n  }\n\n  /**\n   * @dev Add a new operator\n   *\n   * Requirements:\n   * - Only contract owner can call\n   * @param _account new operator address; must not be zero address\n   */\n  function addOperator(address _account) external onlyOwner {\n    if (_account == address(0)) revert InvalidAddress();\n\n    super._grantRole(OPERATOR_ROLE, _account);\n    emit LogOperatorAdded(_account);\n  }\n\n  /**\n    * @dev Remove operator\n    *\n    * Requirements:\n    * - Only contract owner can call\n    * @param _account removing operator address\n    */\n  function removeOperator(address _account) external onlyOwner {\n    super._revokeRole(OPERATOR_ROLE, _account);\n    emit LogOperatorRemoved(_account);\n  }\n\n  /**\n    * @dev Check operator role ownership\n    * @param _account checking account\n    */\n  function isOperator(address _account) external view returns (bool) {\n    return super.hasRole(OPERATOR_ROLE, _account);\n  }\n\n  /**\n   * @dev Override {Ownable-transferOwnership}\n   * Super method has `onlyOwner` modifier\n   * Revoke default admin role and operator role from old owner and grant to new owner\n   * @param _newOwner new owner address; must not be zero address\n   */\n  function transferOwnership(address _newOwner) public virtual override {\n    address oldOwner = owner();\n    super._revokeRole(DEFAULT_ADMIN_ROLE, oldOwner);\n    super._revokeRole(OPERATOR_ROLE, oldOwner);\n    super._grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\n    super._grantRole(OPERATOR_ROLE, _newOwner);\n    super.transferOwnership(_newOwner);\n  }\n}\n"
15     },
16     "contracts/lib/Signer.sol": {
17       "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../Error.sol\";\n\ncontract Signer is Ownable {\n  using Address for address;\n  using ECDSA for bytes32;\n\n  // signer wallet for signature verification\n  address public signer;\n\n  // address => nonce starting from 1; against replay attack\n  mapping(address => uint256) public nonces;\n\n  event LogSignerSet(address signer);\n\n  /**\n   * @param _signer signer wallet\n   */\n  constructor(address _signer) {\n    _setSigner(_signer);\n  }\n\n  /**\n   * See {_setSigner}\n   *\n   * Requirements:\n   * - Only contract owner can call\n   */\n  function setSigner(address _signer) external onlyOwner {\n    _setSigner(_signer);\n  }\n\n  /**\n   * @dev Set signer wallet address\n   * @param _signer new signer wallet; must not be the same as before; must not be zero address nor contract address\n   */\n  function _setSigner(address _signer) internal {\n    if (signer == _signer) revert NoChangeToTheState();\n    if (_signer == address(0) || _signer.isContract()) revert InvalidAddress();\n\n    signer = _signer;\n    emit LogSignerSet(_signer);\n  }\n\n  /**\n   * @dev Verify signature signed off signer wallet\n   * @param _hash verifying message hash\n   * @param _sig signature\n   * @return verified status\n   */\n  function _verify(\n    bytes32 _hash,\n    bytes memory _sig\n  ) internal view returns (bool) {\n    bytes32 h = _hash.toEthSignedMessageHash();\n    return h.recover(_sig) == signer;\n  }\n\n  /**\n   * @dev Return the chain id\n   * @return chainId chain id\n   */\n  function _chainId() internal view returns (uint256 chainId) {\n    assembly {\n      chainId := chainid()\n    }\n  }\n}\n"
18     },
19     "contracts/Error.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nerror Unauthorized();\n\nerror InvalidNFTId();\n\nerror InvalidAddress();\n\nerror InvalidSignature();\n\nerror InvalidAmount();\n\nerror InvalidMaxMintPerTx();\n\nerror InvalidMaxMintPerAddress();\n\nerror NFTNotLocked();\n\nerror Blacklisted();\n\nerror NoChangeToTheState();\n\nerror ArrayLengthMismatch();\n\nerror BlacklistedTransfer();\n\nerror NotERC721();\n\nerror NotERC1155();\n\nerror NotAcceptedERC20();\n\nerror NotAcceptedERC721();\n\nerror NotAcceptedERC1155();\n\nerror NotContract();\n\nerror NoBridge();\n\nerror NoMinterRole();\n\nerror ExceedMinterAllowance();\n\nerror MathOverflow();\n\nerror NoOperatorRole();\n\nerror SaleNotEnded();\n\nerror NFTSoldOut();\n\nerror SaleNotGoing();\n\nerror ExceedMaxMintable();\n\nerror InsufficientEth();\n\nerror ExceedCap();\n\nerror ExceedMaxMintPerTx();\n\nerror ExceedMaxMintPerAddress();\n\nerror EthReceived();\n\nerror InvalidMintingCap();\n\nerror NoWhitelist();\n\nerror NotOwnerNorApproved();\n"
21     },
22     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/token/common/ERC2981.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
30     },
31     "contracts/token/ERC4907.sol": {
32       "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity 0.8.4; \n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./IERC4907.sol\";\nimport \"../Error.sol\";\n\ncontract ERC4907 is ERC721, IERC4907 {\n  struct UserInfo {\n    address user;   // address of user role\n    uint64 expires; // unix timestamp, user expires\n  }\n\n  mapping(uint256 => UserInfo) internal _users;\n\n  constructor(\n    string memory name_, \n    string memory symbol_\n  ) ERC721(name_, symbol_) { }\n  \n  /// @notice set the user and expires of a NFT\n  /// @dev The zero address indicates there is no user \n  /// Throws if `tokenId` is not valid NFT\n  /// @param user  The new user of the NFT\n  /// @param expires  UNIX timestamp, The new user could use the NFT before expires\n  function setUser(uint256 tokenId, address user, uint64 expires) public virtual override {\n    if (!_isApprovedOrOwner(msg.sender, tokenId)) revert NotOwnerNorApproved();\n    \n    UserInfo storage info = _users[tokenId];\n    info.user = user;\n    info.expires = expires;\n    emit UpdateUser(tokenId, user, expires);\n  }\n\n  /// @notice Get the user address of an NFT\n  /// @dev The zero address indicates that there is no user or the user is expired\n  /// @param tokenId The NFT to get the user address for\n  /// @return The user address for this NFT\n  function userOf(uint256 tokenId) public view virtual override returns (address) {\n    if (uint256(_users[tokenId].expires) >= block.timestamp) {\n      return _users[tokenId].user; \n    } else {\n      return address(0);\n    }\n  }\n\n  /// @notice Get the user expires of an NFT\n  /// @dev The zero value indicates that there is no user \n  /// @param tokenId The NFT to get the user expires for\n  /// @return The user expires for this NFT\n  function userExpires(uint256 tokenId) public view virtual override returns (uint256) {\n    return _users[tokenId].expires;\n  }\n\n  /// @dev See {IERC165-supportsInterface}.\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n    return interfaceId == type(IERC4907).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override{\n    super._beforeTokenTransfer(from, to, tokenId);\n\n    if (from != to && _users[tokenId].user != address(0)) {\n      delete _users[tokenId];\n      emit UpdateUser(tokenId, address(0), 0);\n    }\n  }\n} \n"
33     },
34     "contracts/token/ERC721Blacklisted.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"../lib/Blacklist.sol\";\n\nabstract contract ERC721Blacklisted is ERC721, Blacklist {\n  /**\n   * @dev Override {ERC721-_beforeTokenTransfer}\n   * Disable token transfer for blacklisted wallets\n   */\n  function _beforeTokenTransfer(\n    address _from,\n    address _to,\n    uint256\n  ) internal virtual override {\n    require(!blacklist[_from] && !blacklist[_to], \"ERC721Blacklisted: TOKEN_TRANSFER_DISABLED\");\n  }\n}\n"
36     },
37     "contracts/lib/PausableOwned.sol": {
38       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PausableOwned is Ownable, Pausable {\n  /**\n   * @dev Pause the contract\n   * Only `owner` can call\n   */\n  function pause() public onlyOwner {\n    super._pause();\n  }\n\n  /**\n   * @dev Unpause the contract\n   * Only `owner` can call\n   */\n  function unpause() public onlyOwner {\n    super._unpause();\n  }\n}\n"
39     },
40     "contracts/lib/Minterable.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../Error.sol\";\n\ncontract Minterable is AccessControl, Ownable {\n  bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n  // Minter address => allowed minting amount\n  mapping(address => uint256) public minterAllowances;\n\n  event LogMinterAdded(address indexed account);\n\n  event LogMinterRemoved(address indexed account);\n\n  event LogAllowanceIncreased(\n    address indexed minter,\n    uint256 amount\n  );\n\n  event LogAllowanceDecreased(\n    address indexed minter,\n    uint256 amount\n  );\n\n  /**\n   * @dev Restricted to members of the `minter` role.\n   */\n  modifier onlyMinter() {\n    if (!super.hasRole(MINTER_ROLE, msg.sender)) revert NoMinterRole();\n\n    _;\n  }\n\n  /**\n   * @dev Throw if `_account` is zero address or contract owner\n   */\n  modifier notZeroAndOwner(address _account) {\n    if (_account == address(0) || _account == owner()) revert InvalidAddress();\n\n    _;\n  }\n\n  /**\n   * @dev Throw if `_amount` is zero\n   */\n  modifier notZero(uint256 _amount) {\n    if (_amount == 0) revert InvalidAmount();\n\n    _;\n  }\n\n  /**\n   * @dev Contract owner is minter\n   */\n  constructor() {\n    super._setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    super._setupRole(MINTER_ROLE, msg.sender);\n  }\n\n  /**\n   * @dev Increase minting allowance\n   *\n   * Requirements:\n   * - Only contract owner can call\n   * @param _minter minter wallet; must not be zero nor owner address\n   * @param _amount increasing allowance amount; must not be zero\n   */\n  function increaseAllowance(\n    address _minter,\n    uint256 _amount\n  ) external onlyOwner notZeroAndOwner(_minter) notZero(_amount) {\n    uint256 allowed = minterAllowances[_minter];\n    if (allowed > type(uint256).max - _amount) revert MathOverflow();\n\n    unchecked {\n      // we will not overflow because of above check\n      minterAllowances[_minter] = allowed + _amount;\n      emit LogAllowanceIncreased(_minter, allowed + _amount);\n    }\n  }\n\n  /**\n   * @dev See {_decreaseAllowance}\n   *\n   * Requirements:\n   * - Only contract owner can call\n   */\n  function decreaseAllowance(\n    address _minter,\n    uint256 _amount\n  ) external onlyOwner {\n    _decreaseAllowance(_minter, _amount);\n  }\n\n  /**\n   * @dev Add a new minter\n   *\n   * Requirements:\n   * - Only contract owner can call\n   * @param _account minter address; must not be zero address; must not be minter\n   */\n  function addMinter(address _account) external onlyOwner {\n    if (_account == address(0)) revert InvalidAddress();\n    \n    super._grantRole(MINTER_ROLE, _account);\n    emit LogMinterAdded(_account);\n  }\n\n  /**\n   * @dev Remove minter\n   *\n   * Requirements:\n   * - Only contract owner can call\n   * @param _account minter address; must be minter\n   */\n  function removeMinter(address _account) external onlyOwner {\n    super._revokeRole(MINTER_ROLE, _account);\n    emit LogMinterRemoved(_account);\n  }\n\n  /**\n   * @dev Check minter role ownership\n   * @param _account checking account\n   */\n  function isMinter(address _account) external view returns (bool) {\n    return super.hasRole(MINTER_ROLE, _account);\n  }  \n\n  /**\n   * @dev Override {Ownable-transferOwnership}\n   * Super method has `onlyOwner` modifier\n   * Revoke default admin role and minter role from old owner and grant to new owner\n   * @param _newOwner new owner address; must not be zero address\n   */\n  function transferOwnership(address _newOwner) public virtual override {\n    address oldOwner = owner();\n    super._revokeRole(DEFAULT_ADMIN_ROLE, oldOwner);\n    super._revokeRole(MINTER_ROLE, oldOwner);\n    super._grantRole(DEFAULT_ADMIN_ROLE, _newOwner);\n    super._grantRole(MINTER_ROLE, _newOwner);\n    super.transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Decrease minting allowance\n   * @param _minter minter wallet; must not be zero nor owner address\n   * @param _amount increasing allowance amount; must not be zero; must not exceed current allowance\n   */\n  function _decreaseAllowance(\n    address _minter,\n    uint256 _amount\n  ) internal notZeroAndOwner(_minter) notZero(_amount) {\n    uint256 allowed = minterAllowances[_minter];\n    if (_amount > allowed) revert ExceedMinterAllowance();\n\n    unchecked {\n      // we will not underflow because of above check\n      minterAllowances[_minter] = allowed - _amount;\n      emit LogAllowanceDecreased(_minter, allowed - _amount);\n    }\n  }\n}\n"
42     },
43     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
48     },
49     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
50       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
51     },
52     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
53       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
54     },
55     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
56       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
57     },
58     "@openzeppelin/contracts/utils/Context.sol": {
59       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
60     },
61     "@openzeppelin/contracts/utils/Strings.sol": {
62       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
63     },
64     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
65       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
66     },
67     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
68       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
69     },
70     "@openzeppelin/contracts/interfaces/IERC2981.sol": {
71       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
72     },
73     "contracts/token/IERC4907.sol": {
74       "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity 0.8.4;\n\ninterface IERC4907 {\n  /// Logged when the user of a token assigns a new user or updates expires\n  /// @notice Emitted when the `user` of an NFT or the `expires` of the `user` is changed\n  /// The zero address for user indicates that there is no user address\n  event UpdateUser(uint256 indexed tokenId, address indexed user, uint64 expires);\n\n  /// @notice set the user and expires of a NFT\n  /// @dev The zero address indicates there is no user \n  /// Throws if `tokenId` is not valid NFT\n  /// @param user  The new user of the NFT\n  /// @param expires  UNIX timestamp, The new user could use the NFT before expires\n  function setUser(uint256 tokenId, address user, uint64 expires) external;\n\n  /// @notice Get the user address of an NFT\n  /// @dev The zero address indicates that there is no user or the user is expired\n  /// @param tokenId The NFT to get the user address for\n  /// @return The user address for this NFT\n  function userOf(uint256 tokenId) external view returns(address);\n\n  /// @notice Get the user expires of an NFT\n  /// @dev The zero value indicates that there is no user \n  /// @param tokenId The NFT to get the user expires for\n  /// @return The user expires for this NFT\n  function userExpires(uint256 tokenId) external view returns(uint256);\n}\n"
75     },
76     "contracts/lib/Blacklist.sol": {
77       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Blacklist is Ownable {\n  // wallet address => blacklisted status\n  mapping(address => bool) public blacklist;\n\n  event LogBlacklistAdded(address indexed account);\n  event LogBlacklistRemoved(address indexed account);\n\n  /**\n    * @dev Add wallet to blacklist\n    * `_account` must not be zero address\n    */\n  function addBlacklist(address[] calldata _accounts) external onlyOwner {\n    for (uint256 i = 0; i < _accounts.length; i++) {\n      blacklist[_accounts[i]] = true;\n\n      emit LogBlacklistAdded(_accounts[i]);\n    }\n  }\n\n  /**\n    * @dev Remove wallet from blacklist\n    */\n  function removeBlacklist(address[] calldata _accounts) external onlyOwner {\n    for (uint256 i = 0; i < _accounts.length; i++) {\n      delete blacklist[_accounts[i]];\n\n      emit LogBlacklistRemoved(_accounts[i]);\n    }\n  }\n}\n"
78     },
79     "@openzeppelin/contracts/access/Ownable.sol": {
80       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
81     },
82     "@openzeppelin/contracts/security/Pausable.sol": {
83       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
84     },
85     "@openzeppelin/contracts/access/AccessControl.sol": {
86       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
87     },
88     "@openzeppelin/contracts/access/IAccessControl.sol": {
89       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
90     },
91     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
92       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
93     }
94   },
95   "settings": {
96     "optimizer": {
97       "enabled": true,
98       "runs": 100
99     },
100     "outputSelection": {
101       "*": {
102         "*": [
103           "evm.bytecode",
104           "evm.deployedBytecode",
105           "devdoc",
106           "userdoc",
107           "metadata",
108           "abi"
109         ]
110       }
111     },
112     "metadata": {
113       "useLiteralContent": true
114     },
115     "libraries": {}
116   }
117 }}