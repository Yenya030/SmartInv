1 {{
2   "language": "Solidity",
3   "sources": {
4     "/contracts/PacificRimPaymentContract.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IERC721 {\n    function mint(address to, uint256 tokenId) external;\n}\n\ncontract PacificRimPaymentContract is Ownable, AccessControl, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    IERC721 NFT; \n\n    uint256 private ethAmount; \n    uint256 private cappedSupply; \n    uint256 private mintedSupply;\n \n    uint256 private preSaleTime; \n    uint256 private preSaleDuration; \n    uint256 private preSaleMintLimit; \n\n    uint256 private whitelistSaleTime; \n    uint256 private whitelistSaleDuration; \n    uint256 private whitelistSaleMintLimit; \n\n    uint256 private publicSaleTime; \n    uint256 private publicSaleDuration; \n    \n    uint256 private preSalePerTransactionMintLimit;\n    uint256 private whitelistSalePerTransactionMintLimit;\n    uint256 private publicSalePerTransactionMintLimit;\n\n    address payable private withdrawAddress; // address who can withdraw eth\n    address private signatureAddress;\n\n    mapping(address => uint256) private mintBalancePreSale; // in case of presale mint and whitlist mint\n    mapping(address => uint256) private mintBalanceWhitelistSale;\n    mapping(bytes => bool) private signatures;\n\n    event preSaleMint(address indexed to, uint256[] tokenId, uint256 indexed price);\n    event whitelistSaleMint(address indexed to, uint256[] tokenId, uint256 indexed price);\n    event publicSaleMint(address indexed to, uint256[] tokenId, uint256 indexed price);\n    event preSaleTimeUpdate(uint256 indexed time);\n    event preSaleDurationUpdate(uint256 indexed duration);\n    event whitelistSaleTimeUpdate(uint256 indexed time);\n    event whitelistSaleDurationUpdate(uint256 indexed duration);\n    event publicSaleTimeUpdate(uint256 indexed time);\n    event publicSaleDurationUpdate(uint256 indexed duration);\n    event ETHFundsWithdrawn(uint256 indexed amount, address indexed _address);\n    event withdrawAddressUpdated(address indexed newAddress);\n    event NFTAddressUpdated(address indexed newAddress);\n    event updateETHAmount(address indexed owner, uint256 indexed amount);\n    event signatureAddressUpdated(address indexed _address);\n    event airdropNFT(address[] to, uint256[] tokenId);\n    event cappedSupplyUpdate(address indexed owner, uint256 indexed supply);\n    event preSaleMintingLimit(address indexed owner, uint256 indexed limit);\n    event whitelistSaleMintingLimit(address indexed owner, uint256 indexed limit);\n    event preSalePerTransactionMintLimitUpdated(uint256 indexed _perTransactionMintLimit);\n    event whitelistSalePerTransactionMintLimitUpdated(uint256 indexed _perTransactionMintLimit);\n    event publicSalePerTransactionMintLimitUpdated(uint256 indexed _perTransactionMintLimit);\n    \n\n    constructor(address _NFTaddress,address payable _withdrawAddress) {\n        NFT = IERC721(_NFTaddress);\n\n        ethAmount = 0 ether;\n        cappedSupply = 5000;\n        mintedSupply = 0;\n        preSaleMintLimit = 2;\n        preSalePerTransactionMintLimit = 2;\n        whitelistSaleMintLimit = 1;\n        whitelistSalePerTransactionMintLimit = 1;\n        publicSalePerTransactionMintLimit = 1;\n\n        preSaleTime = 1671813900; \n        preSaleDuration = 900;\n\n        whitelistSaleTime = 1671814801;\n        whitelistSaleDuration = 3600;\n\n        publicSaleTime = 1671818401; \n        publicSaleDuration = 157766400;\n\n        withdrawAddress = _withdrawAddress;\n        signatureAddress = 0x6e90605AB3D87FC62b50D8d5526EFdd02B6678c4;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(ADMIN_ROLE, 0x6AB132Cf61F582535397fc7E36089DD49Fef5C59);\n        _setupRole(MINTER_ROLE, 0x93BD8b204D06C4510400048781cc279Baf8480e7);\n    }\n\n    function presaleMint(uint256[] memory _tokenId, bytes32 _hash, bytes memory _signature) public payable{\n        require(msg.value == ethAmount.mul(_tokenId.length),\"Dapp: Invalid value!\");\n        require(block.timestamp >= preSaleTime,\"Dapp: Presale not started!\");\n        require(block.timestamp <= preSaleTime.add(preSaleDuration),\"Dapp: Presale ended!\");\n        require(mintBalancePreSale[msg.sender].add(_tokenId.length) <= preSaleMintLimit,\"Dapp: Wallet's presale mint limit exceeded!\");\n        require(mintedSupply.add(_tokenId.length) <= cappedSupply,\"Dapp: Max supply limit exceeded!\");\n        require(recover(_hash,_signature) == signatureAddress,\"Dapp: Invalid signature!\");\n        require(!signatures[_signature],\"Dapp: Signature already used!\");\n        require( _tokenId.length <= preSalePerTransactionMintLimit,\"Dapp: Token id length greater than presale per transacton mint limit!\");\n\n        for(uint index=0; index<_tokenId.length; index++){\n\n            NFT.mint(msg.sender, _tokenId[index]);\n            mintedSupply++;\n            mintBalancePreSale[msg.sender]++;\n\n        }\n\n        signatures[_signature] = true;\n\n        emit preSaleMint(msg.sender, _tokenId, msg.value);\n    }\n\n    function whitelistMint(uint256[] memory _tokenId, bytes32 _hash, bytes memory _signature) public payable{\n        require(msg.value == ethAmount.mul(_tokenId.length),\"Dapp: Invalid value!\");\n        require(block.timestamp >= whitelistSaleTime,\"Dapp: Whitelisted sale not started!\");\n        require(block.timestamp <= whitelistSaleTime.add(whitelistSaleDuration),\"Dapp: Whitelisted sale ended!\");\n        require(mintBalanceWhitelistSale[msg.sender].add(_tokenId.length) <= whitelistSaleMintLimit,\"Dapp: Wallet's whitelisted sale mint limit exceeded!\");\n        require(mintedSupply.add(_tokenId.length) <= cappedSupply,\"Dapp: Max supply limit exceeded!\");\n        require(recover(_hash,_signature) == signatureAddress,\"Dapp: Invalid signature!\");\n        require(!signatures[_signature],\"Dapp: Signature already used!\");\n        require( _tokenId.length <= whitelistSalePerTransactionMintLimit,\"Dapp: Token id length greater than whitelist sale per transacton mint limit!\");\n\n        for(uint index=0; index<_tokenId.length; index++){\n\n            NFT.mint(msg.sender, _tokenId[index]);\n            mintedSupply++;\n            mintBalanceWhitelistSale[msg.sender]++;\n\n        }\n        signatures[_signature] = true;\n\n        emit whitelistSaleMint(msg.sender, _tokenId, msg.value);\n    }\n\n    function publicMint(uint256[] memory _tokenId, bytes32 _hash, bytes memory _signature) public payable{\n        require(msg.value == ethAmount.mul(_tokenId.length),\"Dapp: Invalid value!\");\n        require(block.timestamp >= publicSaleTime,\"Dapp: Public sale not started!\");\n        require(block.timestamp <= publicSaleTime.add(publicSaleDuration),\"Dapp: Public sale ended!\");\n        require(mintedSupply.add(_tokenId.length) <= cappedSupply,\"Dapp: Max supply limit exceeded!\");\n        require(recover(_hash,_signature) == signatureAddress,\"Dapp: Invalid signature!\");\n        require(!signatures[_signature],\"Dapp: Signature already used!\");\n        require(_tokenId.length <= publicSalePerTransactionMintLimit,\"Dapp: Token id length greater than public per transacton mint limit!\");\n\n        for(uint index=0; index<_tokenId.length; index++){\n\n            NFT.mint(msg.sender, _tokenId[index]);\n            mintedSupply++;\n\n        }\n        \n        signatures[_signature] = true;\n\n        emit publicSaleMint(msg.sender, _tokenId, msg.value);\n    }\n\n    function updatePresaleTime(uint256 _presaleTime) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_presaleTime>block.timestamp,\"Dapp: Start time should be greater than current time!\");\n        \n        preSaleTime = _presaleTime;\n\n        emit preSaleTimeUpdate(_presaleTime);\n    }\n\n    function updatePresaleDuration(uint256 _presaleDuration) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_presaleDuration>0,\"Dapp: Invalid duration value!\");\n\n        preSaleDuration = _presaleDuration;\n\n        emit preSaleDurationUpdate(_presaleDuration);\n    }\n\n    function updateWhitelistSaleTime(uint256 _whitelistSaleTime) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_whitelistSaleTime>preSaleTime.add(preSaleDuration),\"Dapp: Whitelist sale start time should be greater than presale duration!\");\n\n        whitelistSaleTime = _whitelistSaleTime;\n\n        emit whitelistSaleTimeUpdate(_whitelistSaleTime);\n    }\n\n    function updateWhitelistSaleDuration(uint256 _whitelistSaleDuration) public {\n        require(_whitelistSaleDuration>0,\"Dapp: Invalid duration value!\");\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n\n        whitelistSaleDuration = _whitelistSaleDuration;\n\n        emit whitelistSaleDurationUpdate(_whitelistSaleDuration);\n    }\n\n    function updatePublicSaleTime(uint256 _publicSaleTime) public {\n        require(_publicSaleTime>whitelistSaleTime.add(whitelistSaleDuration),\"Dapp: Public sale start time should be greater than whitelist sale duration!\");\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n\n        publicSaleTime = _publicSaleTime;\n\n        emit publicSaleTimeUpdate(_publicSaleTime);\n    }\n\n    function updatePublicSaleDuration(uint256 _publicSaleDuration) public {\n        require(_publicSaleDuration>0,\"Dapp: Invalid duration value!\");\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n\n        publicSaleDuration = _publicSaleDuration;\n\n        emit publicSaleDurationUpdate(_publicSaleDuration);\n    }\n\n    function withdrawEthFunds(uint256 _amount) public onlyOwner nonReentrant{\n\n        require(_amount > 0,\"Dapp: invalid amount.\");\n\n        withdrawAddress.transfer(_amount);\n        emit ETHFundsWithdrawn(_amount, msg.sender);\n\n    }\n\n    function updateWithdrawAddress(address payable _withdrawAddress) public onlyOwner{\n        require(_withdrawAddress != withdrawAddress,\"Dapp: Invalid address.\");\n        require(_withdrawAddress != address(0),\"Dapp: Invalid address.\");\n\n        withdrawAddress = _withdrawAddress;\n        emit withdrawAddressUpdated(_withdrawAddress);\n\n    }\n\n    function airdrop(address[] memory to, uint256[] memory tokenId) public {\n        require(hasRole(MINTER_ROLE, _msgSender()),\"Dapp: Must have minter role to mint.\");\n        require(to.length == tokenId.length,\"Dapp: Length of token id and address are not equal!\");\n        require(mintedSupply.add(tokenId.length) <= cappedSupply,\"Dapp: Capped value rached!\");\n\n        for (uint index = 0; index < to.length; index++) {\n            NFT.mint(to[index], tokenId[index]);\n            mintedSupply++;\n        }\n\n        emit airdropNFT(to, tokenId);\n    }\n\n    function updateCapValue(uint256 _value) public  {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_value > mintedSupply, \"Dapp: Invalid capped value!\");\n        require(_value != 0, \"Dapp: Capped value cannot be zero!\");\n\n        cappedSupply = _value;\n\n        emit cappedSupplyUpdate(msg.sender, _value);\n    }\n\n    function updatePreSaleMintLimit(uint256 _limit) public  {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_limit != 0, \"Dapp: Cannot set to zero!\");\n\n        preSaleMintLimit = _limit;\n\n        emit preSaleMintingLimit(msg.sender, _limit);\n    }\n\n    function updateWhitelistSaleMintLimit(uint256 _limit) public  {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_limit != 0, \"Dapp: Cannot set to zero!\");\n\n        whitelistSaleMintLimit = _limit;\n\n        emit whitelistSaleMintingLimit(msg.sender, _limit);\n    }\n\n    function updateNFTAddress(address _address) public  {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_address != address(0),\"Dapp: Invalid address!\");\n        require(IERC721(_address) != NFT, \"Dapp: Address already exist.\");\n\n        NFT = IERC721(_address);\n\n        emit NFTAddressUpdated(_address);\n    }\n\n    function updateEthAmount(uint256 _amount) public  {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_amount != ethAmount, \"Dapp: Invalid amount!\");\n\n        ethAmount = _amount;\n\n        emit updateETHAmount(msg.sender, _amount);\n    }\n\n    function updateSignatureAddress(address _signatureAddress) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_signatureAddress != address(0),\"Dapp: Invalid address!\");\n        require(_signatureAddress != signatureAddress,\"Dapp! Old address passed again!\");\n        \n\n        signatureAddress = _signatureAddress;\n\n        emit signatureAddressUpdated(_signatureAddress);\n    }\n\n    function updatePublicSalePerTransactionMintLimit(uint256 _publicSalePerTransactionMintLimit) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_publicSalePerTransactionMintLimit>0,\"Dapp: Invalid value!\");\n        require(_publicSalePerTransactionMintLimit!=publicSalePerTransactionMintLimit,\"Dapp: Limit value is same as previous!\");\n\n        publicSalePerTransactionMintLimit = _publicSalePerTransactionMintLimit;\n\n        emit publicSalePerTransactionMintLimitUpdated(_publicSalePerTransactionMintLimit);\n    }\n\n    function updatePreSalePerTransactionMintLimit(uint256 _preSalePerTransactionMintLimit) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_preSalePerTransactionMintLimit>0,\"Dapp: Invalid value!\");\n        require(_preSalePerTransactionMintLimit!=preSalePerTransactionMintLimit,\"Dapp: Limit value is same as previous!\");\n        require(_preSalePerTransactionMintLimit<=preSaleMintLimit,\"Dapp: Per transaction mint limit cannot be greater than presale mint limit!\");\n\n        preSalePerTransactionMintLimit = _preSalePerTransactionMintLimit;\n\n        emit preSalePerTransactionMintLimitUpdated(_preSalePerTransactionMintLimit);\n    }\n\n    function updateWhitelistSalePerTransactionMintLimit(uint256 _whitelistSalePerTransactionMintLimit) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()),\"Dapp: Must have admin role to update.\");\n        require(_whitelistSalePerTransactionMintLimit>0,\"Dapp: Invalid value!\");\n        require(_whitelistSalePerTransactionMintLimit!=whitelistSalePerTransactionMintLimit,\"Dapp: Limit value is same as previous!\");\n        require(_whitelistSalePerTransactionMintLimit<=whitelistSaleMintLimit,\"Dapp: Per transaction mint limit cannot be greater than whitelist sale mint limit!\");\n\n        whitelistSalePerTransactionMintLimit = _whitelistSalePerTransactionMintLimit;\n\n        emit whitelistSalePerTransactionMintLimitUpdated(_whitelistSalePerTransactionMintLimit);\n    }\n\n    function getEthAmount() public view returns(uint256){\n        return ethAmount;\n    }\n\n    function getCappedSupply() public view returns(uint256){\n        return cappedSupply;\n    }\n\n    function getmintedSupply() public view returns(uint256){\n        return mintedSupply;\n    }\n\n    function getPreSaleTime() public view returns(uint256){\n        return preSaleTime;\n    }\n\n    function getPreSaleDuration() public view returns(uint256){\n        return preSaleDuration;\n    }\n\n    function getPreSaleMintLimit() public view returns(uint256){\n        return preSaleMintLimit;\n    }\n\n    function getWhitelistSaleTime() public view returns(uint256){\n        return whitelistSaleTime;\n    }\n\n    function getWhitelistSaleDuration() public view returns(uint256){\n        return whitelistSaleDuration;\n    }\n\n    function getWhitelistSaleMintLimit() public view returns(uint256){\n        return whitelistSaleMintLimit;\n    }\n\n    function getPublicSaleTime() public view returns(uint256){\n        return publicSaleTime;\n    }\n\n    function getPublicSaleDuration() public view returns(uint256){\n        return publicSaleDuration;\n    }\n\n    function getWithdrawAddress() public view returns(address){\n        return withdrawAddress;\n    }\n\n    function getMintBalancePreSale(address _address) public view returns(uint256){\n        return mintBalancePreSale[_address];\n    }\n    \n    function getMintBalanceWhitelistedSale(address _address) public view returns(uint256){\n        return mintBalanceWhitelistSale[_address];\n    }\n\n    function getSignatureAddress() public view returns(address _signatureAddress){\n        _signatureAddress = signatureAddress;\n    }\n\n    function checkSignatureValidity(bytes memory _signature) public view returns(bool){\n        return signatures[_signature];\n    }\n\n    function getPublicSalePerTransactionMintLimit() public view returns(uint256){\n        return publicSalePerTransactionMintLimit;\n    }\n\n    function getWhitelistSalePerTransactionMintLimit() public view returns(uint256){\n        return whitelistSalePerTransactionMintLimit;\n    }\n\n    function getPreSalePerTransactionMintLimit() public view returns(uint256){\n        return preSalePerTransactionMintLimit;\n    }\n\n    function getNFTAdress() public view returns(IERC721){\n        return NFT;\n    }\n\n    function recover(bytes32 _hash, bytes memory _signature) public pure returns (address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        if (_signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            r := mload(add(_signature, 0x20))\n            s := mload(add(_signature, 0x40))\n            v := byte(0, mload(add(_signature, 0x60)))\n        }\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            // solium-disable-next-line arg-overflow\n            return ecrecover(_hash, v, r, s);\n        }\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/math/Math.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/utils/Strings.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/utils/Context.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/access/Ownable.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/access/IAccessControl.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
33     },
34     "@openzeppelin/contracts/access/AccessControl.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "remappings": [],
40     "optimizer": {
41       "enabled": true,
42       "runs": 200
43     },
44     "evmVersion": "byzantium",
45     "libraries": {},
46     "outputSelection": {
47       "*": {
48         "*": [
49           "evm.bytecode",
50           "evm.deployedBytecode",
51           "devdoc",
52           "userdoc",
53           "metadata",
54           "abi"
55         ]
56       }
57     }
58   }
59 }}