1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts-eth/SmartChefPYE.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Arrays.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IPYESlice.sol\";\nimport \"./interfaces/IApple.sol\";\n\ncontract SmartChefPYE is Ownable, ReentrancyGuard, ERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // The address of the smart chef factory\n    address public SMART_CHEF_FACTORY;\n\n    // PYESliceToken for stakers\n    address public pyeSlice;\n    IPYESlice PYESliceInterface;\n\n    // donation state variables\n    uint256 public totalDonations; // (sum of below)\n    uint256 public pyeSwapDonations;\n    uint256 public pyeLabDonations;\n    uint256 public miniPetsDonations;\n    uint256 public pyeWalletDonations;\n    uint256 public pyeChartsDonations;\n\n    // Whether a limit is set for users\n    bool public hasUserLimit;\n\n    // Whether it is initialized\n    bool public isInitialized;\n\n    // Accrued token per share\n    uint256 public accTokenPerShare;\n\n    // The block number when Apple mining ends.\n    uint256 public bonusEndBlock;\n\n    // The block number when Apple mining starts.\n    uint256 public startBlock;\n\n    // The block number of the last pool update\n    uint256 public lastRewardBlock;\n\n    // The pool limit (0 if none)\n    uint256 public poolLimitPerUser;\n\n    // Apple tokens created per block.\n    uint256 public rewardPerBlock;\n\n    // The time for lock funds.\n    uint256 public lockTime;\n\n    // Dev fee.\n    uint256 public devfee = 1000;\n\n    // The precision factor\n    uint256 public PRECISION_FACTOR;\n\n    // The reward token\n    IApple public rewardToken;\n\n    // The weth token and USDC token\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n\n    // The staked token\n    IERC20 public stakedToken;\n\n    // Info of each user that stakes tokens (stakedToken)\n    mapping(address => UserInfo) public userInfo;\n\n    struct UserInfo {\n        uint256 amount; // How many staked tokens the user has provided\n        uint256 rewardDebt; // Reward debt\n        uint256 depositTime;    // The last time when the user deposit funds\n    }\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcludedWETH;\n        uint256 totalRealisedWETH;\n        uint256 totalExcludedUSDC;\n        uint256 totalRealisedUSDC; \n    }\n\n    // Dev address.\n    address public devaddr;\n    //address public rewardDistributor;\n\n    address[] stakers;\n    mapping (address => uint256) stakerIndexes;\n    mapping (address => uint256) stakerClaims;\n    mapping (address => bool) isRewardExempt;\n\n    mapping (address => Share) public shares;\n// ----------------- BEGIN WETH Variables -----------\n\n    uint256 public unallocatedWETHRewards;\n    uint256 public totalShares;\n    uint256 public totalRewardsWETH;\n    uint256 public totalDistributedWETH;\n    uint256 public rewardsPerShareWETH;\n    uint256 public rewardsPerShareAccuracyFactor = 10 ** 36; // Keeping same accuracy factor in the USDC Token Variables\n\n// ----------------- BEGIN USDC Token Variables -----------\n\n    uint256 public unallocatedUSDCRewards;\n    uint256 public totalRewardsUSDC;\n    uint256 public totalDistributedUSDC;\n    uint256 public rewardsPerShareUSDC;\n    uint256 public totalStakedTokens;\n\n// ----------------- END USDC Token Variables -----------    \n\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\n    event Deposit(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\n    event NewRewardPerBlock(uint256 rewardPerBlock);\n    event NewPoolLimit(uint256 poolLimitPerUser);\n    event RewardsStop(uint256 blockNumber);\n    event Withdraw(address indexed user, uint256 amount);\n    event NewLockTime(uint256 lockTime);\n    event setLockTime(address indexed user, uint256 lockTime);\n    event StakedAndMinted(address indexed _address, uint256 _blockTimestamp);\n    event UnstakedAndBurned(address indexed _address, uint256 _blockTimestamp);\n\n    constructor(IERC20 _stakedToken, IApple _rewardToken, uint256 _rewardPerBlock, uint256 _startBlock, uint256 _lockTime, address _pyeSlice) ERC20(\"\",\"\") {\n\n        // Make this contract initialized\n        isInitialized = true;\n\n        stakedToken = _stakedToken;\n        rewardToken = _rewardToken;\n        rewardPerBlock = _rewardPerBlock;\n        startBlock = _startBlock;\n        bonusEndBlock = 999999999;\n        lockTime = _lockTime;\n        devaddr = msg.sender;\n        pyeSlice = _pyeSlice;\n\n        PYESliceInterface = IPYESlice(_pyeSlice);\n\n        uint256 decimalsRewardToken = uint256(rewardToken.decimals());\n        require(decimalsRewardToken < 30, \"Must be inferior to 30\");\n\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\n\n        // Set the lastRewardBlock as the startBlock\n        lastRewardBlock = startBlock;\n\n        isRewardExempt[msg.sender] = true;\n        isRewardExempt[address(this)] = true;\n    }\n\n    modifier onlyToken {\n        require(msg.sender == address(stakedToken));\n        _;\n    }\n    \n    function deposit(uint256 _amount) external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        if (hasUserLimit) {\n            require(_amount.add(user.amount) <= poolLimitPerUser, \"User amount above limit\");\n        }\n\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeappleTransfer(msg.sender, pending);\n            }\n        }\n\n        if (_amount > 0) {\n\n            // begin slice logic\n            uint256 currentStakedBalance = user.amount; // current staked balance\n            uint256 currentPYESliceBalance = IERC20(pyeSlice).balanceOf(msg.sender);\n\n            if (currentStakedBalance == 0 && currentPYESliceBalance == 0) {\n                _beforeTokenTransfer(msg.sender, address(this), _amount);\n                stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n                user.amount = user.amount.add(_amount);\n                PYESliceInterface.mintPYESlice(msg.sender, 1);\n                totalStakedTokens = totalStakedTokens.add(_amount);\n                if(!isRewardExempt[msg.sender]){ setShare(msg.sender, user.amount); }\n                user.depositTime = block.timestamp;\n                emit StakedAndMinted(msg.sender, block.timestamp);\n            } else {\n                _beforeTokenTransfer(msg.sender, address(this), _amount);\n                stakedToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n                user.amount = user.amount.add(_amount);\n                totalStakedTokens = totalStakedTokens.add(_amount);\n                if(!isRewardExempt[msg.sender]){ setShare(msg.sender, user.amount); }\n                user.depositTime = block.timestamp; \n            }\n        } else {\n            distributeRewardWETH(msg.sender);\n            distributeRewardUSDC(msg.sender);\n        }\n\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    function harvest() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\n            if (pending > 0) {\n                safeappleTransfer(msg.sender, pending);\n            }\n        }\n\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\n    }\n\n    /*\n     * @notice Withdraw staked tokens and collect reward tokens\n     * @param _amount: amount to withdraw (in rewardToken)\n     */\n    function withdraw(uint256 _amount) external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\n        require(user.depositTime + lockTime < block.timestamp, \"Can not withdraw in lock period\");\n\n        _updatePool();\n\n        uint256 pending = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\n\n        if (_amount > 0) {\n\n            // begin slice logic\n            uint256 currentStakedBalance = user.amount; // current staked balance\n            uint256 currentPYESliceBalance = IERC20(pyeSlice).balanceOf(msg.sender);\n\n            if (currentStakedBalance.sub(_amount) == 0 && currentPYESliceBalance > 0) {\n                user.amount = user.amount.sub(_amount);\n                _beforeTokenTransfer(address(this), msg.sender, _amount);\n                stakedToken.safeTransfer(address(msg.sender), _amount);\n                PYESliceInterface.burnPYESlice(msg.sender, currentPYESliceBalance);\n                totalStakedTokens = totalStakedTokens.sub(_amount);\n                if(!isRewardExempt[msg.sender]){ setShare(msg.sender, user.amount); }\n                emit UnstakedAndBurned(msg.sender, block.timestamp);\n            } else {\n                user.amount = user.amount.sub(_amount);\n                _beforeTokenTransfer(address(this), msg.sender, _amount);\n                stakedToken.safeTransfer(address(msg.sender), _amount);\n                totalStakedTokens = totalStakedTokens.sub(_amount);\n                if(!isRewardExempt[msg.sender]){ setShare(msg.sender, user.amount); }\n            }\n        }\n\n        if (pending > 0) {\n            safeappleTransfer(msg.sender, pending);\n        }\n\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR);\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Withdraw staked tokens without caring about rewards rewards\n     * @dev Needs to be for emergency.\n     */\n    function emergencyWithdraw() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 amountToTransfer = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        uint256 currentPYESliceBalance = IERC20(pyeSlice).balanceOf(msg.sender);\n        _beforeTokenTransfer(address(this), msg.sender, user.amount);\n\n        if (amountToTransfer > 0) {\n            stakedToken.safeTransfer(address(msg.sender), amountToTransfer);\n            PYESliceInterface.burnPYESlice(msg.sender, currentPYESliceBalance);\n            totalStakedTokens = totalStakedTokens.sub(amountToTransfer);\n            emit UnstakedAndBurned(msg.sender, block.timestamp);\n        }\n\n        if(!isRewardExempt[msg.sender]){ setShare(msg.sender, 0); }\n\n        emit EmergencyWithdraw(msg.sender, user.amount);\n    }\n\n    /*\n     * @notice Stop rewards\n     * @dev Only callable by owner. Needs to be for emergency.\n     */\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\n        rewardToken.transfer(address(msg.sender), _amount);\n    }\n\n    /**\n     * @notice It allows the admin to recover wrong tokens sent to the contract\n     * @param _tokenAddress: the address of the token to withdraw\n     * @param _tokenAmount: the number of tokens to withdraw\n     * @dev This function is only callable by admin.\n     */\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        require(_tokenAddress != address(stakedToken), \"Cannot be staked token\");\n        require(_tokenAddress != address(rewardToken), \"Cannot be reward token\");\n\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\n\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\n    }\n\n    /*\n     * @notice Stop rewards\n     * @dev Only callable by owner\n     */\n    function stopReward() external onlyOwner {\n        bonusEndBlock = block.number;\n    }\n\n    /*\n     * @notice Update pool limit per user\n     * @dev Only callable by owner.\n     * @param _hasUserLimit: whether the limit remains forced\n     * @param _poolLimitPerUser: new pool limit per user\n     */\n    function updatePoolLimitPerUser(bool _hasUserLimit, uint256 _poolLimitPerUser) external onlyOwner {\n        require(hasUserLimit, \"Must be set\");\n        if (_hasUserLimit) {\n            require(_poolLimitPerUser > poolLimitPerUser, \"New limit must be higher\");\n            poolLimitPerUser = _poolLimitPerUser;\n        } else {\n            hasUserLimit = _hasUserLimit;\n            poolLimitPerUser = 0;\n        }\n        emit NewPoolLimit(poolLimitPerUser);\n    }\n\n    /*\n     * @notice Update lock time\n     * @dev Only callable by owner.\n     * @param _lockTime: the time in seconds that staked tokens are locked\n     */\n    function updateLockTime(uint256 _lockTime) external onlyOwner {\n        lockTime = _lockTime;\n        emit NewLockTime(_lockTime);\n    }\n\n    /*\n     * @notice Update reward per block\n     * @dev Only callable by owner.\n     * @param _rewardPerBlock: the reward per block\n     */\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\n        rewardPerBlock = _rewardPerBlock;\n        emit NewRewardPerBlock(_rewardPerBlock);\n    }\n\n    /**\n     * @notice It allows the admin to update start and end blocks\n     * @dev This function is only callable by owner.\n     * @param _startBlock: the new start block\n     * @param _bonusEndBlock: the new end block\n     */\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _bonusEndBlock) external onlyOwner {\n        require(_startBlock < _bonusEndBlock, \"New startBlock must be lower than new endBlock\");\n        require(block.number < _startBlock, \"New startBlock must be higher than current block\");\n\n        startBlock = _startBlock;\n        bonusEndBlock = _bonusEndBlock;\n\n        // Set the lastRewardBlock as the startBlock\n        lastRewardBlock = startBlock;\n\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\n    }\n\n    /*\n     * @notice View function to see pending reward on frontend.\n     * @param _user: user address\n     * @return Pending reward for a given user\n     */\n    function pendingReward(address _user) external view returns (uint256) {\n        UserInfo storage user = userInfo[_user];\n        \n        if (block.number > lastRewardBlock && totalStakedTokens != 0) {\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\n            uint256 appleReward = multiplier.mul(rewardPerBlock);\n            uint256 adjustedTokenPerShare =\n            accTokenPerShare.add(appleReward.mul(PRECISION_FACTOR).div(totalStakedTokens));\n            return user.amount.mul(adjustedTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\n        } else {\n            return user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(user.rewardDebt);\n        }\n    }\n\n    // Safe apple transfer function, just in case if rounding error causes pool to not have enough apple.\n    function safeappleTransfer(address _to, uint256 _amount) internal {\n        uint256 tokenBalance = rewardToken.balanceOf(address(this));\n        bool transferSuccess = false;\n        if (_amount > tokenBalance) {\n            transferSuccess = rewardToken.transfer(_to, tokenBalance);\n        } else {\n            transferSuccess = rewardToken.transfer(_to, _amount);\n        }\n        require(transferSuccess, \"safeTokenTransfer: transfer failed\");\n    }\n\n    /*\n     * @notice Update reward variables of the given pool to be up-to-date.\n     */\n    function _updatePool() internal {\n        if (block.number <= lastRewardBlock) {\n            return;\n        }\n\n        if (totalStakedTokens == 0) {\n            lastRewardBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\n        uint256 appleReward = multiplier.mul(rewardPerBlock);\n        rewardToken.mint(devaddr, appleReward.mul(devfee).div(10000));\n        rewardToken.mint(address(this), appleReward);\n        accTokenPerShare = accTokenPerShare.add(appleReward.mul(PRECISION_FACTOR).div(totalStakedTokens));\n        lastRewardBlock = block.number;\n    }\n    \n    /*\n     * @notice Return reward multiplier over the given _from to _to block.\n     * @param _from: block to start\n     * @param _to: block to finish\n     */\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\n        if (_to <= bonusEndBlock) {\n            return _to.sub(_from);\n        } else if (_from >= bonusEndBlock) {\n            return 0;\n        } else {\n            return bonusEndBlock.sub(_from);\n        }\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return isRewardExempt[account];\n    }\n\n    function setIsRewardExempt(address holder, bool exempt) external onlyOwner {\n        require(holder != address(this));\n        UserInfo storage user = userInfo[holder];\n        isRewardExempt[holder] = exempt;\n        if(exempt){\n            setShare(holder, 0);\n        }else{\n            setShare(holder, user.amount);\n        }\n    }\n    \n    function setShare(address staker, uint256 amount) internal {\n        if(shares[staker].amount > 0){\n            distributeRewardWETH(staker);\n            distributeRewardUSDC(staker);\n        }\n\n        if(amount > 0 && shares[staker].amount == 0){\n            addStaker(staker);\n        }else if(amount == 0 && shares[staker].amount > 0){\n            removeStaker(staker);\n        }\n\n        totalShares = totalShares.sub(shares[staker].amount).add(amount);\n        shares[staker].amount = amount;\n        shares[staker].totalExcludedWETH = getCumulativeRewardsWETH(shares[staker].amount);\n        shares[staker].totalExcludedUSDC = getCumulativeRewardsUSDC(shares[staker].amount);\n    }\n    \n    // WETH STUFF\n\n    function distributeRewardWETH(address staker) internal {\n        if(shares[staker].amount == 0){ return; }\n\n        uint256 amount = getUnpaidEarningsWETH(staker);\n        if(amount > 0){\n            totalDistributedWETH = totalDistributedWETH.add(amount);\n            IERC20(WETH).transfer(staker, amount);\n            stakerClaims[staker] = block.timestamp;\n            shares[staker].totalRealisedWETH = shares[staker].totalRealisedWETH.add(amount);\n            shares[staker].totalExcludedWETH = getCumulativeRewardsWETH(shares[staker].amount);\n        }\n    }\n\n    function claimWETH() external {\n        distributeRewardWETH(msg.sender);\n    }\n\n    function getUnpaidEarningsWETH(address staker) public view returns (uint256) {\n        if(shares[staker].amount == 0){ return 0; }\n\n        uint256 stakerTotalRewardsWETH = getCumulativeRewardsWETH(shares[staker].amount);\n        uint256 stakerTotalExcludedWETH = shares[staker].totalExcludedWETH;\n\n        if(stakerTotalRewardsWETH <= stakerTotalExcludedWETH){ return 0; }\n\n        return stakerTotalRewardsWETH.sub(stakerTotalExcludedWETH);\n    }\n\n    function getCumulativeRewardsWETH(uint256 share) internal view returns (uint256) {\n        return share.mul(rewardsPerShareWETH).div(rewardsPerShareAccuracyFactor);\n    }\n\n    function addStaker(address staker) internal {\n        stakerIndexes[staker] = stakers.length;\n        stakers.push(staker);\n    }\n\n    function removeStaker(address staker) internal {\n        stakers[stakerIndexes[staker]] = stakers[stakers.length-1];\n        stakerIndexes[stakers[stakers.length-1]] = stakerIndexes[staker];\n        stakers.pop();\n    }\n\n    // Rescue eth that is sent here by mistake\n    function rescueETH(uint256 amount, address to) external onlyOwner{\n        payable(to).transfer(amount);\n      }\n\n    function setFee(address _feeAddress, uint256 _devfee) public onlyOwner {\n        devaddr = _feeAddress;\n        devfee = _devfee;\n    }\n\n    /*\n     * @notice Stop rewards\n     * @dev Only callable by owner. Needs to be for emergency.\n     */\n    function emergencyWETHWithdraw(uint256 _amount) external onlyOwner {\n        IERC20(WETH).transfer(address(msg.sender), _amount);\n    }\n\n\n// ------------------- BEGIN USDC TOKEN FUNCTIONS ---------------\n\n    function depositUSDCToStakingContract(uint256 _amountUSDC) external onlyToken {\n        if (totalShares == 0) {unallocatedUSDCRewards = unallocatedUSDCRewards.add(_amountUSDC); return; } \n        \n        if (unallocatedUSDCRewards > 0) {\n            uint256 amount = _amountUSDC.add(unallocatedUSDCRewards);\n            totalRewardsUSDC = totalRewardsUSDC.add(amount);\n            rewardsPerShareUSDC = rewardsPerShareUSDC.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n            unallocatedUSDCRewards = 0;\n        } else {\n            totalRewardsUSDC = totalRewardsUSDC.add(_amountUSDC);\n            rewardsPerShareUSDC = rewardsPerShareUSDC.add(rewardsPerShareAccuracyFactor.mul(_amountUSDC).div(totalShares));\n        }   \n    }\n\n    function depositUSDC(uint256 _amount) external onlyOwner {\n        uint256 balanceBefore = IERC20(address(USDC)).balanceOf(address(this));\n\n        IERC20(USDC).transferFrom(address(msg.sender), address(this), _amount);\n\n        uint256 amount = IERC20(address(USDC)).balanceOf(address(this)).sub(balanceBefore);\n\n        totalRewardsUSDC = totalRewardsUSDC.add(amount);\n        rewardsPerShareUSDC = rewardsPerShareUSDC.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        \n    }\n\n    function getCumulativeRewardsUSDC(uint256 share) internal view returns (uint256) {\n        return share.mul(rewardsPerShareUSDC).div(rewardsPerShareAccuracyFactor);\n    }\n\n    function getUnpaidEarningsUSDC(address staker) public view returns (uint256) {\n        if(shares[staker].amount == 0){ return 0; }\n\n        uint256 stakerTotalRewardsUSDC = getCumulativeRewardsUSDC(shares[staker].amount);\n        uint256 stakerTotalExcludedUSDC = shares[staker].totalExcludedUSDC;\n\n        if(stakerTotalRewardsUSDC <= stakerTotalExcludedUSDC){ return 0; }\n\n        return stakerTotalRewardsUSDC.sub(stakerTotalExcludedUSDC);\n    }\n\n    function distributeRewardUSDC(address staker) internal {\n        if(shares[staker].amount == 0){ return; }\n\n        uint256 amount = getUnpaidEarningsUSDC(staker);\n        if(amount > 0){\n            totalDistributedUSDC = totalDistributedUSDC.add(amount);\n            IERC20(USDC).transfer(staker, amount);\n            stakerClaims[staker] = block.timestamp;\n            shares[staker].totalRealisedUSDC = shares[staker].totalRealisedUSDC.add(amount);\n            shares[staker].totalExcludedUSDC = getCumulativeRewardsUSDC(shares[staker].amount);\n        }\n    }\n\n    function claimUSDC() external {\n        distributeRewardUSDC(msg.sender);\n    }\n\n    //--------------------- BEGIN DONATION FUNCTIONS -------------\n\n    function addPYESwapDonation(uint256 _pyeSwapDonation) external nonReentrant {\n        uint256 balanceBefore = IERC20(address(WETH)).balanceOf(address(this));\n        IERC20(WETH).transferFrom(address(msg.sender), address(this), _pyeSwapDonation);\n        uint256 amount = IERC20(address(WETH)).balanceOf(address(this)).sub(balanceBefore);\n        totalRewardsWETH = totalRewardsWETH.add(amount);\n        rewardsPerShareWETH = rewardsPerShareWETH.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        totalDonations += amount;\n        pyeSwapDonations += amount;\n    }\n\n    function addPYELabDonation(uint256 _pyeLabDonation) external nonReentrant {\n        uint256 balanceBefore = IERC20(address(WETH)).balanceOf(address(this));\n        IERC20(WETH).transferFrom(address(msg.sender), address(this), _pyeLabDonation);\n        uint256 amount = IERC20(address(WETH)).balanceOf(address(this)).sub(balanceBefore);\n        totalRewardsWETH = totalRewardsWETH.add(amount);\n        rewardsPerShareWETH = rewardsPerShareWETH.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        totalDonations += amount;\n        pyeLabDonations += amount;\n    }\n\n    function addMiniPetsDonation(uint256 _miniPetsDonation) external nonReentrant {\n        uint256 balanceBefore = IERC20(address(WETH)).balanceOf(address(this));\n        IERC20(WETH).transferFrom(address(msg.sender), address(this), _miniPetsDonation);\n        uint256 amount = IERC20(address(WETH)).balanceOf(address(this)).sub(balanceBefore);\n        totalRewardsWETH = totalRewardsWETH.add(amount);\n        rewardsPerShareWETH = rewardsPerShareWETH.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        totalDonations += amount;\n        miniPetsDonations += amount;\n    }\n\n    function addPYEWalletDonation(uint256 _pyeWalletDonation) external nonReentrant {\n        uint256 balanceBefore = IERC20(address(WETH)).balanceOf(address(this));\n        IERC20(WETH).transferFrom(address(msg.sender), address(this), _pyeWalletDonation);\n        uint256 amount = IERC20(address(WETH)).balanceOf(address(this)).sub(balanceBefore);\n        totalRewardsWETH = totalRewardsWETH.add(amount);\n        rewardsPerShareWETH = rewardsPerShareWETH.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        totalDonations += amount;\n        pyeWalletDonations += amount;\n    }\n\n    function addPYEChartsDonation(uint256 _pyeChartsDonation) external nonReentrant {\n        uint256 balanceBefore = IERC20(address(WETH)).balanceOf(address(this));\n        IERC20(WETH).transferFrom(address(msg.sender), address(this), _pyeChartsDonation);\n        uint256 amount = IERC20(address(WETH)).balanceOf(address(this)).sub(balanceBefore);\n        totalRewardsWETH = totalRewardsWETH.add(amount);\n        rewardsPerShareWETH = rewardsPerShareWETH.add(rewardsPerShareAccuracyFactor.mul(amount).div(totalShares));\n        totalDonations += amount;\n        pyeChartsDonations += amount;\n    }\n\n    //--------------------BEGIN MODIFIED SNAPSHOT FUNCITONALITY---------------\n\n    // @dev a modified implementation of ERC20 Snapshot to keep track of staked balances (shares) rather than balanceOf (total token ownership). \n    // ERC20 Snapshot import/inheritance is avoided in this contract to avoid issues with interface conflicts and to directly control private \n    // functionality to keep snapshots of staked balances instead.\n    // copied from source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC20Snapshot.sol\n\n    using Arrays for uint256[];\n    using Counters for Counters.Counter;\n    Counters.Counter private _currentSnapshotId;\n\n    struct Snapshots {\n        uint256[] ids;\n        uint256[] values;\n    }\n\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\n    Snapshots private _totalStakedSnapshots;\n\n    // @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\n    event Snapshot(uint256 id);\n\n    // generate a snapshot, calls internal _snapshot().\n    function snapshot() public onlyOwner {\n        _snapshot();\n    }\n\n    function _snapshot() internal returns (uint256) {\n        _currentSnapshotId.increment();\n\n        uint256 currentId = _getCurrentSnapshotId();\n        emit Snapshot(currentId);\n        return currentId;\n    }\n\n    function _getCurrentSnapshotId() internal view returns (uint256) {\n        return _currentSnapshotId.current();\n    }\n\n    // @dev returns shares of a holder, not balanceOf, at a certain snapshot.\n    function sharesOfAt(address account, uint256 snapshotId) public view returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n\n        return snapshotted ? value : shares[account].amount;\n    }\n\n    // @dev returns totalStakedTokens at a certain snapshot\n    function totalStakedAt(uint256 snapshotId) public view returns (uint256) {\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalStakedSnapshots);\n\n        return snapshotted ? value : totalStakedTokens;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        if (from == address(0)) {\n            // mint\n            _updateAccountSnapshot(to);\n            _updateTotalStakedSnapshot();\n        } else if (to == address(0)) {\n            // burn\n            _updateAccountSnapshot(from);\n            _updateTotalStakedSnapshot();\n        } else if (to == address(this)) {\n            // user is staking\n            _updateAccountSnapshot(from);\n            _updateTotalStakedSnapshot();\n        } else if (from == address(this)) {\n            // user is unstaking\n            _updateAccountSnapshot(to);\n            _updateTotalStakedSnapshot();\n        }\n    }\n\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\n\n        // When a valid snapshot is queried, there are three possibilities:\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\n        //  to this id is the current one.\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\n        //  requested id, and its value is the one to return.\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\n        //  larger than the requested one.\n        //\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\n        // exactly this.\n\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\n\n        if (index == snapshots.ids.length) {\n            return (false, 0);\n        } else {\n            return (true, snapshots.values[index]);\n        }\n    }\n\n    function _updateAccountSnapshot(address account) private {\n        _updateSnapshot(_accountBalanceSnapshots[account], shares[account].amount);\n    }\n\n    function _updateTotalStakedSnapshot() private {\n        _updateSnapshot(_totalStakedSnapshots, totalStakedTokens);\n    }\n\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n        uint256 currentId = _getCurrentSnapshotId();\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\n            snapshots.ids.push(currentId);\n            snapshots.values.push(currentValue);\n        }\n    }\n\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n        if (ids.length == 0) {\n            return 0;\n        } else {\n            return ids[ids.length - 1];\n        }\n    }\n\n    // ------------------ BEGIN PRESALE TOKEN FUNCTIONALITY -------------------\n\n    // @dev struct containing all elements of pre-sale token. \n    struct presaleToken {\n        string presaleTokenName;\n        address presaleTokenAddress;\n        uint256 presaleTokenBalance;\n        uint256 presaleTokenRewardsPerShare; \n        uint256 presaleTokenTotalDistributed;\n        uint256 presaleTokenSnapshotId;\n    }\n\n    // @dev dynamic array of struct presaleToken\n    presaleToken[] public presaleTokenList;\n    bool checkDuplicateEnabled; \n    mapping (address => uint256) entitledTokenReward;\n    mapping (address => mapping (address => bool)) hasClaimed;\n\n    //------------------- BEGIN PRESALE-TOKEN ARRAY MODIFIERS AND GETTERS--------------------\n\n    // performs safety checks when depositing.\n    modifier depositCheck(address _presaleTokenAddress, uint256 _amount) {\n        require(IERC20(_presaleTokenAddress).balanceOf(msg.sender) >= _amount , \"Deposit amount exceeds balance!\"); \n        require(msg.sender != address(0) || msg.sender != 0x000000000000000000000000000000000000dEaD , \"Cannot deposit from address(0)!\");\n        require(_amount != 0 , \"Cannot deposit 0 tokens!\");\n        require(totalStakedTokens != 0 , \"Nobody is staked!\");\n            _;\n    }\n\n    // @dev deletes the last struct in the presaleTokenList. \n    function popToken() internal {\n        presaleTokenList.pop();\n    }\n\n    // returns number of presale Tokens stored.\n    function getTokenArrayLength() public view returns (uint256) {\n        return presaleTokenList.length;\n    }\n\n    // @dev enter the address of token to delete. avoids empty gaps in the middle of the array.\n    function deleteToken(address _address) public onlyOwner {\n        uint tokenLength = presaleTokenList.length;\n        for(uint i = 0; i < tokenLength; i++) {\n            if (_address == presaleTokenList[i].presaleTokenAddress) {\n                if (1 < presaleTokenList.length && i < tokenLength-1) {\n                    presaleTokenList[i] = presaleTokenList[tokenLength-1]; }\n                    delete presaleTokenList[tokenLength-1];\n                    popToken();\n                    break;\n            }\n        }\n    }\n\n    // @dev create presale token and fund it. requires allowance approval from token. \n    function createAndFundPresaleToken(string memory _presaleTokenName, address _presaleTokenAddress, uint256 _amount) external onlyOwner depositCheck(_presaleTokenAddress, _amount) {\n        // check duplicates\n        if (checkDuplicateEnabled) { checkDuplicates(_presaleTokenAddress); }\n\n        // deposit the token\n        IERC20(_presaleTokenAddress).transferFrom(address(msg.sender), address(this), _amount);\n        // store staked balances at time of reward token deposit\n        _snapshot();\n        // push new struct, with most recent snapshot ID\n        presaleTokenList.push(presaleToken(\n            _presaleTokenName, \n            _presaleTokenAddress, \n            _amount, \n            (rewardsPerShareAccuracyFactor.mul(_amount).div(totalStakedTokens)), \n            0,\n            _getCurrentSnapshotId()));\n    }\n\n    // @dev change whether or not createAndFundToken should check for duplicate presale tokens\n    function shouldCheckDuplicates(bool _bool) external onlyOwner {\n        checkDuplicateEnabled = _bool;\n    }\n\n    // @dev internal helper function that checks the array for preexisting addresses\n    function checkDuplicates(address _presaleTokenAddress) internal view {\n        for(uint i = 0; i < presaleTokenList.length; i++) {\n            if (_presaleTokenAddress == presaleTokenList[i].presaleTokenAddress) {\n                revert(\"Token already exists!\");\n            }\n        }\n    }\n\n    //------------------- BEGIN PRESALE-TOKEN TRANSFER FXNS AND STRUCT MODIFIERS --------------------\n\n    // @dev update an existing token's balance based on index.\n    function fundExistingToken(uint256 _index, uint256 _amount) external onlyOwner depositCheck(presaleTokenList[_index].presaleTokenAddress, _amount) {\n        require(_index <= presaleTokenList.length , \"Index out of bounds!\");\n\n        if ((bytes(presaleTokenList[_index].presaleTokenName)).length == 0 || presaleTokenList[_index].presaleTokenAddress == address(0)) {\n            revert(\"Attempting to fund a token with no name, or with an address of 0.\");\n        }\n\n        // do the transfer\n        uint256 presaleTokenBalanceBefore = presaleTokenList[_index].presaleTokenBalance;\n        uint256 presaleTokenRewardsPerShareBefore = presaleTokenList[_index].presaleTokenRewardsPerShare;\n        IERC20(presaleTokenList[_index].presaleTokenAddress).transferFrom(address(msg.sender), address(this), _amount);\n        _snapshot();\n        // update struct balances to add amount\n        presaleTokenList[_index].presaleTokenBalance = presaleTokenBalanceBefore.add(_amount);\n        presaleTokenList[_index].presaleTokenRewardsPerShare = presaleTokenRewardsPerShareBefore.add((rewardsPerShareAccuracyFactor.mul(_amount).div(totalStakedTokens)));\n        \n    }\n\n    // remove unsafe or compromised token from availability\n    function withdrawExistingToken(uint256 _index) external onlyOwner {\n        require(_index <= presaleTokenList.length , \"Index out of bounds!\");\n        \n        if ((bytes(presaleTokenList[_index].presaleTokenName)).length == 0 || presaleTokenList[_index].presaleTokenAddress == address(0)) {\n            revert(\"Attempting to withdraw from a token with no name, or with an address of 0.\");\n        }\n\n        // do the transfer\n        IERC20(presaleTokenList[_index].presaleTokenAddress).transfer(address(msg.sender), presaleTokenList[_index].presaleTokenBalance);\n        // update struct balances to subtract amount\n        presaleTokenList[_index].presaleTokenBalance = 0;\n        presaleTokenList[_index].presaleTokenRewardsPerShare = 0;\n    }\n\n    //-------------------------------- BEGIN PRESALE TOKEN REWARD FUNCTION-----------\n\n    function claimPresaleToken(uint256 _index) external nonReentrant {\n        require(_index <= presaleTokenList.length , \"Index out of bounds!\");\n        require(!hasClaimed[msg.sender][presaleTokenList[_index].presaleTokenAddress] , \"You have already claimed your reward!\");\n        // calculate reward based on share at time of current snapshot (which is when a token is funded or created)\n        if(sharesOfAt(msg.sender, presaleTokenList[_index].presaleTokenSnapshotId) == 0){ \n            entitledTokenReward[msg.sender] = 0; } \n            else { entitledTokenReward[msg.sender] = sharesOfAt(msg.sender, presaleTokenList[_index].presaleTokenSnapshotId).mul(presaleTokenList[_index].presaleTokenRewardsPerShare).div(rewardsPerShareAccuracyFactor); }\n        \n        require(presaleTokenList[_index].presaleTokenBalance >= entitledTokenReward[msg.sender]);\n        // struct balances before transfer\n        uint256 presaleTokenBalanceBefore = presaleTokenList[_index].presaleTokenBalance;\n        uint256 presaleTokenTotalDistributedBefore = presaleTokenList[_index].presaleTokenTotalDistributed;\n        // transfer\n        IERC20(presaleTokenList[_index].presaleTokenAddress).transfer(address(msg.sender), entitledTokenReward[msg.sender]);\n        hasClaimed[msg.sender][presaleTokenList[_index].presaleTokenAddress] = true;\n        // update struct balances \n        presaleTokenList[_index].presaleTokenBalance = presaleTokenBalanceBefore.sub(entitledTokenReward[msg.sender]);\n        presaleTokenList[_index].presaleTokenTotalDistributed = presaleTokenTotalDistributedBefore.add(entitledTokenReward[msg.sender]);       \n    }\n\n    // allows user to see their entitled presaleToken reward based on staked balance at time of token creation\n    function getUnpaidEarningsPresale(uint256 _index, address staker) external view returns (uint256) {\n        uint256 entitled;\n        if (hasClaimed[staker][presaleTokenList[_index].presaleTokenAddress]) {\n            entitled = 0;\n        } else {\n            entitled = sharesOfAt(staker, presaleTokenList[_index].presaleTokenSnapshotId).mul(presaleTokenList[_index].presaleTokenRewardsPerShare).div(rewardsPerShareAccuracyFactor);\n        }\n        return entitled;\n    }\n}\n"
6     },
7     "contracts-eth/interfaces/IApple.sol": {
8       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IApple {\n    function getOwnedBalance(address account) external view returns (uint256);\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function mint(address to, uint value) external;\n}"
9     },
10     "contracts-eth/interfaces/IPYESlice.sol": {
11       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IPYESlice {\n    function burnPYESlice(address _staker, uint256 _amount) external;\n    function mintPYESlice(address _depositor, uint256 amount) external;\n}"
12     },
13     "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
18     },
19     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
24     },
25     "@openzeppelin/contracts/utils/Counters.sol": {
26       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
27     },
28     "@openzeppelin/contracts/utils/Arrays.sol": {
29       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Arrays.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        if (array.length == 0) {\n            return 0;\n        }\n\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds down (it does integer division with truncation).\n            if (array[mid] > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && array[low - 1] == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n}\n"
30     },
31     "@openzeppelin/contracts/access/Ownable.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
33     },
34     "@openzeppelin/contracts/utils/math/Math.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Address.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
39     },
40     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
41       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
42     },
43     "@openzeppelin/contracts/utils/Context.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
45     },
46     "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
47       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
48     }
49   },
50   "settings": {
51     "optimizer": {
52       "enabled": true,
53       "runs": 200
54     },
55     "evmVersion": "byzantium",
56     "outputSelection": {
57       "*": {
58         "*": [
59           "evm.bytecode",
60           "evm.deployedBytecode",
61           "abi"
62         ]
63       }
64     }
65   }
66 }}