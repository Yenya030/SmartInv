1 {{
2   "language": "Solidity",
3   "sources": {
4     "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
9     },
10     "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
15     },
16     "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
18     },
19     "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
21     },
22     "src/DoubleDrop.sol": {
23       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport \"openzeppelin-contracts/contracts/access/Ownable.sol\";\n\nimport \"./IDoubleDropNFT.sol\";\nimport \"./IDoubleDrop.sol\";\nimport \"./IProvenance.sol\";\nimport \"./SignedRedeemer.sol\";\n\n/// @title The Hashmasks Double Drop\n/// @author fancyrats.io\n/**\n * @notice Holders of Hashmasks NFTs can redeem Hashmasks Elementals, Derivatives, or burn their masks to get both!\n * Holders can only choose one redemption option per Hashmask NFT.\n * Once a selection is made, that NFT cannot be used to redeem again! Choose wisely!\n */\n/**\n * @dev Hashmasks holders must set approval for this contract in order to \"burn\".\n * The original Hashmasks contract does not have burn functionality, so we move masks into the 0xdEaD wallet.\n * Elementals and Derivatives contracts must be deployed and addresses set prior to activating redemption.\n */\ncontract DoubleDrop is IDoubleDrop, Ownable, SignedRedeemer {\n    event ElementalsRedeemed(uint256[] indexed tokenIds, address indexed redeemer);\n    event DerivativesRedeemed(uint256[] indexed tokenIds, address indexed redeemer);\n    event HashmasksBurned(uint256[] indexed tokenIds, address indexed redeemer);\n\n    address private constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n    bool public isActive;\n    bool public contractsInitialized;\n\n    uint256 public elementalsProvenance;\n\n    mapping(uint256 => bool) public redeemedHashmasks;\n\n    IERC721 public hashmasks;\n    IDoubleDropNFT public derivatives;\n    IDoubleDropNFT public elementals;\n\n    constructor(address signer_) Ownable() SignedRedeemer(signer_) {}\n\n    /// @notice Redeem Hashmasks Elementals NFTs\n    /// @dev Resulting Elementals will have matching token IDs.\n    /// @param signature Signed message from our website that validates token ownership\n    /// @param tokenIds Ordered array of Hashmasks NFT ids used to claim the Elementals.\n    function redeemElementals(bytes calldata signature, uint256[] calldata tokenIds)\n        public\n        isValidRedemption(signature, tokenIds)\n    {\n        emit ElementalsRedeemed(tokenIds, msg.sender);\n        elementals.redeem(tokenIds, msg.sender);\n    }\n\n    /// @notice Redeem Hashmasks Derivatives NFTs\n    /// @dev Resulting Derivatives will have matching token IDs.\n    /// @param signature Signed message from our website that validates token ownership\n    /// @param tokenIds Ordered array of Hashmasks NFT ids used to claim the Derivatives.\n    function redeemDerivatives(bytes calldata signature, uint256[] calldata tokenIds)\n        public\n        isValidRedemption(signature, tokenIds)\n    {\n        emit DerivativesRedeemed(tokenIds, msg.sender);\n        derivatives.redeem(tokenIds, msg.sender);\n    }\n\n    /**\n     * @notice Burns Hashmasks and redeems one elemental and one derivative per Hashmask burned.\n     * Requires this contract to be approved as an operator for the Hashmasks tokens provided.\n     * CAUTION: ONLY APPROVE OR SETAPPROVALFORALL FROM THEHASHMASKS.COM\n     * CAUTION: THIS ACTION IS PERMANENT. Holders will not be able to retrieve their burned Hashmask NFTs.\n     */\n    /**\n     * @dev Resulting Derivatives and Elementals will have matching token IDs.\n     *  Approval must be managed on the frontend.\n     */\n    /// @param signature Signed message from our website that validates token ownership\n    /// @param tokenIds Ordered array of Hashmasks NFT ids to burn and use for double redemption\n    function burnMasksForDoubleRedemption(bytes calldata signature, uint256[] calldata tokenIds)\n        public\n        isValidRedemption(signature, tokenIds)\n    {\n        emit HashmasksBurned(tokenIds, msg.sender);\n        emit ElementalsRedeemed(tokenIds, msg.sender);\n        emit DerivativesRedeemed(tokenIds, msg.sender);\n\n        _burnMasks(tokenIds);\n        elementals.redeem(tokenIds, msg.sender);\n        derivatives.redeem(tokenIds, msg.sender);\n    }\n\n    /**\n     * @notice Sets the Derivatives and Elementals contract addresses for redemption.\n     * Caller must be contract owner.\n     * CAUTION: ADDRESSES CAN ONLY BE SET ONCE.\n     */\n    /// @dev derivativesAddress and elementalsAddress must conform to IDoubleDropNFT\n    /// @param hashmasksAddress The Hashmasks NFT contract address\n    /// @param derivativesAddress The Hashmasks Derivatives NFT contract address\n    /// @param elementalsAddress The Hashmasks Elementals NFT contract address\n    function setTokenContracts(address hashmasksAddress, address derivativesAddress, address elementalsAddress)\n        public\n        onlyOwner\n    {\n        if (contractsInitialized) revert ContractsAlreadyInitialized();\n        if (hashmasksAddress == address(0) || derivativesAddress == address(0) || elementalsAddress == address(0)) {\n            revert ContractsCannotBeNull();\n        }\n\n        contractsInitialized = true;\n        hashmasks = IERC721(hashmasksAddress);\n        derivatives = IDoubleDropNFT(derivativesAddress);\n        elementals = IDoubleDropNFT(elementalsAddress);\n    }\n\n    /**\n     * @notice Asks the ProvenanceGenerator for a random number\n     * Caller must be contract owner\n     * Can only be set once\n     */\n    /// @dev Provenance implementation uses chainlink, so that will need setup first\n    /// @param generatorAddress Contract conforming to IProvenance\n    function setRandomProvenance(address generatorAddress) public onlyOwner {\n        if (elementalsProvenance != 0) revert ElementalsProvenanceAlreadySet();\n        if (generatorAddress == address(0)) revert ProvenanceContractCannotBeNull();\n\n        IProvenance provenanceGenerator = IProvenance(generatorAddress);\n        elementalsProvenance = provenanceGenerator.getRandomProvenance();\n\n        if (elementalsProvenance == 0) revert ElementalsProvenanceNotSet();\n    }\n\n    /**\n     * @notice Sets the known signer address used by the redemption backend to validate ownership\n     * Caller must be contract owner.\n     */\n    /// @dev signer is responsible for signing redemption messages on the backend\n    /// @param signer_ public address to expected to sign redemption signatures\n    function setSigner(address signer_) public onlyOwner {\n        _setSigner(signer_);\n    }\n\n    /**\n     * @notice Turn on/off Double Drop redemption.\n     * Starts out paused.\n     * Caller must be contract owner.\n     */\n    /// @dev setTokenContracts must be called prior to activating.\n    /// @param isActive_ updated redemption active status. false to pause. true to resume.\n    function setIsActive(bool isActive_) public onlyOwner {\n        if (address(hashmasks) == address(0) || address(derivatives) == address(0) || address(elementals) == address(0))\n        {\n            revert ContractsNotInitialized();\n        }\n        if (elementalsProvenance == 0) revert ElementalsProvenanceNotSet();\n        isActive = isActive_;\n    }\n\n    function _burnMasks(uint256[] calldata tokenIds) private {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            hashmasks.safeTransferFrom(msg.sender, BURN_ADDRESS, tokenIds[i]);\n        }\n    }\n\n    modifier isValidRedemption(bytes calldata signature, uint256[] calldata tokenIds) {\n        if (!isActive) revert RedemptionNotActive();\n        if (!validateSignature(signature, tokenIds, msg.sender)) revert InvalidSignature();\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            if (hashmasks.ownerOf(tokenIds[i]) != msg.sender) revert NotTokenOwner();\n            if (redeemedHashmasks[tokenIds[i]]) revert TokenAlreadyRedeemed();\n            redeemedHashmasks[tokenIds[i]] = true;\n        }\n        _;\n    }\n}\n"
24     },
25     "src/IDoubleDrop.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IDoubleDrop {\n    /**\n      * Elementals provenance contract cannot be null\n      */\n    error ProvenanceContractCannotBeNull();\n\n    /**\n      * Elementals provenance not set\n      */\n    error ElementalsProvenanceNotSet();\n\n    /**\n      * Elementals provenance already set\n      */\n    error ElementalsProvenanceAlreadySet();\n\n    /**\n     * Redemption contracts already set\n     */\n    error ContractsAlreadyInitialized();\n\n    /**\n     * Redemption contracts cannot be NULL\n     */\n    error ContractsCannotBeNull();\n\n    /**\n     * Redemption contracts are not yet set\n     */\n    error ContractsNotInitialized();\n\n    /**\n     * Redemption is not active\n     */\n    error RedemptionNotActive();\n\n    /**\n     * Invalid signature provided\n     */\n    error InvalidSignature();\n\n    /**\n     * Hashmask token already used for redemption\n     */\n    error TokenAlreadyRedeemed();\n\n    /**\n     * Address is not the token owner\n     */\n    error NotTokenOwner();\n}\n"
27     },
28     "src/IDoubleDropNFT.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IDoubleDropNFT {\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * Metadata frozen. Cannot set new base URI.\n     */\n    error MetadataFrozen();\n\n    /**\n     * Cannot set redeemer contract multiple times\n     */\n    error RedeemerAlreadySet();\n\n    /**\n     * Redeemer contract not set\n     */\n    error RedeemerNotSet();\n\n    /**\n     * Only the redeemer contract can mint\n     */\n    error OnlyRedeemerCanMint();\n\n    function redeem(uint256[] calldata _tokenIds, address _to) external;\n}\n"
30     },
31     "src/IProvenance.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IProvenance {\n    function getRandomProvenance() external returns (uint256);\n\n    error ProvenanceAlreadyRequested();\n    error ProvenanceAlreadyGenerated();\n    error ProvenanceNotGenerated();\n}\n\n"
33     },
34     "src/SignedRedeemer.sol": {
35       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract SignedRedeemer {\n    using ECDSA for bytes32;\n\n    address public signer;\n\n    constructor(address signer_) {\n        signer = signer_;\n    }\n\n    /**\n     * @notice Uses ECDSA to validate the provided signature was signed by the known address.\n     */\n    /**\n     * @dev For a given unique ordered array of tokenIds,\n     * a valid signature is a message keccack256(abi.encode(owner, tokenIds)) signed by the known address.\n     */\n    /// @param signature Signed message\n    /// @param tokenIds ordered unique array of tokenIds encoded in the signed message\n    /// @param to token owner encoded in the signed message\n    function validateSignature(\n        bytes memory signature,\n        uint256[] calldata tokenIds, // must be in numeric order\n        address to\n    ) public view returns (bool) {\n        bytes memory message = abi.encode(to, tokenIds);\n        bytes32 messageHash = ECDSA.toEthSignedMessageHash(keccak256(message));\n        address recovered = messageHash.recover(signature);\n        return signer == recovered;\n    }\n\n    function _setSigner(address signer_) internal {\n        signer = signer_;\n    }\n}\n"
36     }
37   },
38   "settings": {
39     "remappings": [
40       "ERC721A/=lib/ERC721A/contracts/",
41       "chainlink/=lib/chainlink/",
42       "ds-test/=lib/solmate/lib/ds-test/src/",
43       "forge-std/=lib/forge-std/src/",
44       "openzeppelin-contracts/=lib/openzeppelin-contracts/",
45       "solmate/=lib/solmate/src/"
46     ],
47     "optimizer": {
48       "enabled": true,
49       "runs": 200
50     },
51     "metadata": {
52       "bytecodeHash": "ipfs"
53     },
54     "outputSelection": {
55       "*": {
56         "*": [
57           "evm.bytecode",
58           "evm.deployedBytecode",
59           "devdoc",
60           "userdoc",
61           "metadata",
62           "abi"
63         ]
64       }
65     },
66     "evmVersion": "london",
67     "libraries": {}
68   }
69 }}