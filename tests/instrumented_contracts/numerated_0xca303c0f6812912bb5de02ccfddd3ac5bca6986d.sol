1 {{
2   "language": "Solidity",
3   "sources": {
4     "NFTSociety/Daonnaki.sol": {
5       "content": "//SPDX-License-Identifier: UNLICENSED\n\n/*\n *  Daonnaki NFT Collection\n *  Created by NFTSociety.io\n */\n\npragma solidity ^0.8.17;\n\nimport \"erc721a/contracts/ERC721A.sol\";\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./NSClaimer.sol\";\n\ncontract Daonnaki is ERC721A, Ownable, DefaultOperatorFilterer, NSClaimer {\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    uint256 public maxSupply = 10000;\n    uint256 public currentSupply = 0;\n\n    uint256 public salePrice = 0.0198 ether;\n    uint256 public presalePrice = 0.0185 ether;\n\n    //Placeholders\n    address private presaleAddress = address(0xA57C2D44EB8f127CA6C43Cf0Aa1bE8800aEc7c93);\n    address private wallet = address(0x8A72c401649A23DE311b8108ec7962979689d083);\n\n    string private baseURI;\n    string private notRevealedUri = \"ipfs://QmcmU4Q47CQxBksyLy6jRLJ6uVcfoZNKeDwKWo5N72B3Lq\";\n\n    bool public revealed = false;\n    bool public baseLocked = false;\n\n    bool public claimOpened = false;\n    bool public presaleOpened = false;\n    bool public saleOpened = false;\n\n    mapping(address => uint256) public mintLog;\n\n    constructor()\n        ERC721A(\"Daonnaki\", \"DAO\")\n    {\n        transferOwnership(msg.sender);\n        //Reserved NFTs to be claimed at any time\n        currentSupply = 6209;\n    }\n\n    //Opensea Operator Filterer method overwrite\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId) public payable override onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public payable override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public payable override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\n        public payable override\n        onlyAllowedOperator(from)\n    {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n    // - - - -\n    \n    function withdraw() public onlyOwner {\n        uint256 _balance = address( this ).balance;\n        payable( wallet ).transfer( _balance );\n    }\n\n    function setWallet(address _newWallet) public onlyOwner {\n        wallet = _newWallet;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return currentSupply;\n    }\n\n    function validateSignature( address _addr, bytes memory _s ) internal view returns (bool){\n        bytes32 messageHash = keccak256(\n            abi.encodePacked( address(this), msg.sender)\n        );\n\n        address signer = messageHash.toEthSignedMessageHash().recover(_s);\n\n        if( _addr == signer ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n        Claim reserved NFTs\n     */\n    function claimReserved() external {\n        require( \n            claimOpened, \n            \"This phase has not yet started.\" \n        );\n\n        require( \n            !claimLog[ msg.sender ], \n            \"You have already claimed your reserved NFTs.\" \n        );\n\n        require( \n            reserveLog[ msg.sender ] > 0, \n            \"You don't have reserved NFTs for claim.\" \n        );\n\n        uint256 _am = reserveLog[ msg.sender ];\n\n        mintLog[ msg.sender ] += _am;\n        claimLog[ msg.sender ] = true;\n        claimed += _am;\n\n        _mint( msg.sender, _am );\n    }\n\n    /**\n        Presale ( Allowlist ) mint\n     */\n    function presaleMint(uint256 _amount, bytes calldata signature) external payable {\n        //Presale opened check\n        require( \n            presaleOpened, \n            \"Daonnaki: Allowlist mint is not opened yet.\" \n        );\n\n        //Min 1 NFT check\n        require(_amount > 0, \"Daonnaki: You must mint at least one NFT\");\n\n        //Check presale signature\n        require(\n            validateSignature(\n                presaleAddress,\n                signature\n            ),\n            \"SIGNATURE_VALIDATION_FAILED\"\n        );\n\n        //Price check\n        require(\n            msg.value >= presalePrice * _amount,\n            \"Daonnaki: Insufficient ETH amount sent.\"\n        );\n\n        uint256 supply = currentSupply;\n\n        require(\n            supply + _amount <= maxSupply,\n            \"Daonnaki: Mint too large, exceeding the collection supply\"\n        );\n\n        mintLog[ msg.sender ] += _amount;\n        currentSupply += _amount;\n\n        _mint( msg.sender, _amount);\n    }\n\n    /**\n        Phase 3 of the mint\n     */\n    function publicMint(uint256 _amount) external payable {\n        //Public mint check\n        require( \n            saleOpened, \n            \"Daonnaki: Public mint is not opened yet.\" \n        );\n\n        //Price check\n        require(\n            msg.value >= salePrice * _amount,\n            \"Daonnaki: Insufficient ETH amount sent.\"\n        );\n\n        uint256 supply = currentSupply;\n\n        require(\n            supply + _amount <= maxSupply,\n            \"Daonnaki: Mint too large, exceeding the collection supply\"\n        );\n\n        mintLog[ msg.sender ] += _amount;\n        currentSupply += _amount;\n\n        _mint( msg.sender, _amount );\n    }\n\n    function forceMint(uint256 number, address receiver) external onlyOwner {\n        uint256 supply = currentSupply;\n\n        require(\n            supply + number <= maxSupply,\n            \"Daonnaki: You can't mint more than max supply\"\n        );\n\n        currentSupply += number;\n\n        _mint( receiver, number );\n    }\n\n    /**\n        Force-Claim reserved NFTs\n     */\n    function forceClaim( address _addr ) external onlyOwner {\n        require( \n            !claimLog[ _addr ], \n            \"Already claimed.\" \n        );\n\n        require( \n            reserveLog[ _addr ] > 0, \n            \"No NFTs for claim on this address.\" \n        );\n\n        uint256 _am = reserveLog[ _addr ];\n\n        mintLog[ _addr ] += _am;\n        claimLog[ _addr ] = true;\n        claimed += _am;\n\n        _mint( _addr, _am );\n    }\n\n    function ownerMint(uint256 number) external onlyOwner {\n        uint256 supply = currentSupply;\n\n        require(\n            supply + number <= maxSupply,\n            \"Daonnaki: You can't mint more than max supply\"\n        );\n\n        currentSupply += number;\n\n        _mint( msg.sender, number );\n    }\n\n    function addToReserve( address _addr, uint256 _am ) public onlyOwner { \n        uint256 supply = currentSupply;\n\n        require(\n            supply + _am <= maxSupply,\n            \"Daonnaki: You can't add more than max supply\"\n        );\n\n        require( \n            !claimLog[ _addr ], \n            \"Already claimed.\" \n        );\n\n        currentSupply += _am;\n        reserveLog[ _addr ] += _am;\n    }\n\n    function setSalePrice(uint256 _newPrice) public onlyOwner {\n        salePrice = _newPrice;\n    }\n    \n    function setPresalePrice(uint256 _newPrice) public onlyOwner {\n        presalePrice = _newPrice;\n    }\n\n    function claimOpen() public onlyOwner { \n        claimOpened = true;\n    }\n\n    function claimStop() public onlyOwner { \n        claimOpened = false;\n    }\n\n    function saleOpen() public onlyOwner { \n        saleOpened = true;\n    }\n    \n    function saleStop() public onlyOwner {\n        saleOpened = false;\n    }\n\n    function presaleOpen() public onlyOwner {\n        presaleOpened = true;\n    }\n    \n    function presaleStop() public onlyOwner {\n        presaleOpened = false;\n    }\n\n    function reveal() public onlyOwner {\n        revealed = true;\n    }\n\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n    }\n\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        require( baseLocked == false, \"Base URI change has been disabled permanently\");\n\n        baseURI = _newBaseURI;\n    }\n\n    //Lock base security - your nfts can never be changed.\n    function lockBase() public onlyOwner {\n        baseLocked = true;\n    }\n\n    // FACTORY\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721A)\n        returns (string memory)\n    {\n        if (revealed == false) {\n            return notRevealedUri;\n        }\n\n        string memory currentBaseURI = baseURI;\n        return\n            bytes(currentBaseURI).length > 0\n                ? string(abi.encodePacked(currentBaseURI, tokenId.toString(),'.json'))\n                : \"\";\n    }\n \n}"
6     },
7     "NFTSociety/NSClaimer.sol": {
8       "content": "//SPDX-License-Identifier: UNLICENSED\n\n/*\n *  Claim reserved NFTs \n *  Created by NFTSociety.io\n */\n\npragma solidity ^0.8.17;\n\nabstract contract NSClaimer {\n    \n    mapping( address => uint256 ) public reserveLog;\n    mapping( address => bool ) public claimLog;\n    uint256 public claimed;\n    \n    constructor() {\n        //Init Access\n        setAccess();\n    }\n\n    //AccessLog Init\n    function setAccess() internal {\n\t\treserveLog[ address(0xC7086014ABeB5C730CC75D92F7439544039ad424) ] = 30;\n\t\treserveLog[ address(0x40E5529fc270566dD00272af0Bfa684C230cb210) ] = 50;\n\t\treserveLog[ address(0xC405d61AaF8106F1A5242D1ccb4397acA1E689ac) ] = 6;\n\t\treserveLog[ address(0x00D4da27deDce60F859471D8f595fDB4aE861557) ] = 25;\n\t\treserveLog[ address(0x92fb6b5BC7f49b02E1d44c78FC5e671893F0E531) ] = 25;\n\t\treserveLog[ address(0x9e2Ac6A3F2e8346a979cAa24fC00f8F9de8f8115) ] = 30;\n\t\treserveLog[ address(0xf71eA5dB26888f1f38E7DE3375030f32861c0803) ] = 30;\n\t\treserveLog[ address(0xE5d08078CA78C9B14101f16fcACbEE8818D06Bfa) ] = 51;\n\t\treserveLog[ address(0x3C27D06a9A390b1290a124f06593fe95E0d64A93) ] = 10;\n\t\treserveLog[ address(0x70069C30CbED62eD40Eb8813566A7a7D26A42D4C) ] = 30;\n\t\treserveLog[ address(0x4a9b4cea73531Ebbe64922639683574104e72E4E) ] = 25;\n\t\treserveLog[ address(0x62eF1F4b8D468863C88C8BE2c88D388f3D72D474) ] = 5;\n\t\treserveLog[ address(0x74D7f706b26a6Fe2caE4999DFA6940f60CF8b916) ] = 15;\n\t\treserveLog[ address(0x2Ef3f778D3032158f1bCf9c78772869339016631) ] = 15;\n\t\treserveLog[ address(0x92b398370dda6392cf5b239561aB1bD3ba393CB6) ] = 5;\n\t\treserveLog[ address(0x0Ad4214E4DEa19A8247b487af43Ea1410CF4c3DB) ] = 10;\n\t\treserveLog[ address(0x00Ef8c07aEB53A3D538e6B97a662Be2b6700F9EE) ] = 25;\n\t\treserveLog[ address(0xacCB1e0eAa4d6bB3AB8268cFa8fB08d77F082655) ] = 35;\n\t\treserveLog[ address(0xCb61C44Dd8fC8E8d40DD17975ed43A5CA4161deE) ] = 5;\n\t\treserveLog[ address(0xE0F6Bb10e17Ae2fEcD114d43603482fcEa5A9654) ] = 50;\n\t\treserveLog[ address(0x474C235426E40aD6626A3E508Dc0011E023BFE43) ] = 50;\n\t\treserveLog[ address(0x5CaA27A1Cd3351D5b9F86558A56a566DEC2f7658) ] = 40;\n\t\treserveLog[ address(0xa54F87a652254baA2D1B39984a7E25022681fF41) ] = 5;\n\t\treserveLog[ address(0x9a6F64645a71f0a40bEf45f21aB58F5dccaa18Ad) ] = 8;\n\t\treserveLog[ address(0x356d581acCE55090eEaE6348c36c7a9501CD7cB9) ] = 25;\n\t\treserveLog[ address(0x86348d8f5E3B0BF8e49e2707933d5d87CFe2119A) ] = 53;\n\t\treserveLog[ address(0xBB6a0FBE1F1D4D7D3Df73efa4Dc2888F6dce1736) ] = 5;\n\t\treserveLog[ address(0x777D30Db5EFC9b99bF5CA48Ce667a0EfC0c11913) ] = 20;\n\t\treserveLog[ address(0xAb784a5081C478f518a4B804323f2ee7931df533) ] = 10;\n\t\treserveLog[ address(0x10a348dDb0ae269eA73d9E01451eecd0a6164A28) ] = 5;\n\t\treserveLog[ address(0xf01F2ef4A58874F00A125A6722958Cf22A76C08F) ] = 2;\n\t\treserveLog[ address(0x321f9Bb604E21024Ff57259f09fcc5A5Fc19550B) ] = 21;\n\t\treserveLog[ address(0x0d2958E4d38b67f2A95892F362c238A35A8cFc51) ] = 10;\n\t\treserveLog[ address(0xb41e212b047f7A8e3961d52001ADE9413f7D0C70) ] = 35;\n\t\treserveLog[ address(0x8B0850E5F3eb8659cBE140d8423Ccc0027DD535f) ] = 5;\n\t\treserveLog[ address(0xC59E591a5a159a6FB9fCb4285052F4C5c2657810) ] = 33;\n\t\treserveLog[ address(0x2125668BC6Ea43094fe06Ac2Af328E69516753fd) ] = 5;\n\t\treserveLog[ address(0xf865C4da53B7599C1f52b3339d936420af31469d) ] = 11;\n\t\treserveLog[ address(0x069805bEFFb3deC781aff8b71dB9357Be7ae418c) ] = 16;\n\t\treserveLog[ address(0x80ea006315A1c8278419BED1951c4fC047581641) ] = 10;\n\t\treserveLog[ address(0xeC303E97f025DF3947e9E901bcc06a70F9f377B4) ] = 1;\n\t\treserveLog[ address(0x5c8aD9343c76CCE594cB3B663410DD2fa1aC0e78) ] = 110;\n\t\treserveLog[ address(0x12ab48D6eA7Fa8aabdBB845DD71DCC7868053761) ] = 1;\n\t\treserveLog[ address(0xAB674D86bF1943C060cF0C3D8103A09F5299599C) ] = 6;\n\t\treserveLog[ address(0x0Dd11C2a71ca194F7bcfcac806988b580Eb3ba8A) ] = 58;\n\t\treserveLog[ address(0x60314c86B99a2a108E5097fc2688AA1E3c30Be30) ] = 10;\n\t\treserveLog[ address(0x7b5D04A9aab29D06F8e21eb6c957a38a760F50B4) ] = 11;\n\t\treserveLog[ address(0x4494d7FB34930cC147131d405bB21027Aded12f4) ] = 10;\n\t\treserveLog[ address(0xb4F3745E46f67204c072B2B33aaA2d6176463ACD) ] = 16;\n\t\treserveLog[ address(0x081bcA4a664Cc3B440F3F6De5fEa209986056856) ] = 1;\n\t\treserveLog[ address(0x6EDf6b0229C9A205d0D0E4f81e6a956e064ECFAa) ] = 26;\n\t\treserveLog[ address(0x3b067DB9d9339169ad1C4A49504888441B0D9390) ] = 12;\n\t\treserveLog[ address(0x40EfBE92D9AD4cfA8Deb52111fBCaCCD4DBd5495) ] = 1;\n\t\treserveLog[ address(0xDd8463c7e803d6A5E8711010cFfAfd977B54f744) ] = 53;\n\t\treserveLog[ address(0x6c2e34F61c4A9031c3c7E8059A09c381Ad340007) ] = 26;\n\t\treserveLog[ address(0x562389B4B2b4c2123589800393D9c1c0051949C1) ] = 35;\n\t\treserveLog[ address(0x5F4dF796b08AcAb25dc35b14e4D3Fd0b1588290e) ] = 5;\n\t\treserveLog[ address(0xB84404f79EbeF00233E1AEdB273c67c917B8840f) ] = 5;\n\t\treserveLog[ address(0x621C6De117f61c3D0c8eC1D6dFD3E36414202480) ] = 4;\n\t\treserveLog[ address(0x19139f9C2420cF587E95375863121931581DBE9B) ] = 6;\n\t\treserveLog[ address(0x083CC11901b1bB3Ab79958C386Ed3DE674ADf564) ] = 5;\n\t\treserveLog[ address(0x0FEbC5A457F29C753B7D9BbC12e8e9f7D26b024b) ] = 1;\n\t\treserveLog[ address(0xBF412BE283Fe1105C709f1F64d40e9f70057a305) ] = 18;\n\t\treserveLog[ address(0x9Fef5892be1c331426aeb4E6E32AAc3718f96e87) ] = 50;\n\t\treserveLog[ address(0xD58D449Af4832d76eD247e0b2DD80327CfE377c0) ] = 46;\n\t\treserveLog[ address(0x9CC1126F327128Ee73175c6fD68F88a0b1F72Ac7) ] = 1;\n\t\treserveLog[ address(0x7FDF505f1fDcCb3D1e55E06f2890871DdFfA3FBe) ] = 5;\n\t\treserveLog[ address(0x4cBD07e1b723eC2334c5c33dFC92DA94cbF8994C) ] = 33;\n\t\treserveLog[ address(0x728E1D2a727d14051a3787203Db3646701026315) ] = 15;\n\t\treserveLog[ address(0x07f183E920c135A6A01f86aa64E583EF0E91164C) ] = 25;\n\t\treserveLog[ address(0x5431c0Dce14A9FFdFfc82097538f330e6d2Cbc81) ] = 5;\n\t\treserveLog[ address(0xe84db627dB0722d076F0f81ccf0AA0C72eB41d5d) ] = 3;\n\t\treserveLog[ address(0x065735841E157d74Cd2D69A95d3E4C4003A76E28) ] = 15;\n\t\treserveLog[ address(0x99EE59f6130F88113d87Cabd8A19e97D269946cf) ] = 30;\n\t\treserveLog[ address(0x345Aa080b2ca5ed336D7FEA600153CB1C57Aa387) ] = 2;\n\t\treserveLog[ address(0x090738F0600660206636E2E175553E4802bfC2fd) ] = 3;\n\t\treserveLog[ address(0x2b518e05767B49dDF3C5E1B353F923A25611c0F7) ] = 6;\n\t\treserveLog[ address(0x8575adfB4a62c2371AB87EcCa87ADE99A968F504) ] = 5;\n\t\treserveLog[ address(0xBaA3f0f0983267D1B9847B6328eDa968Aa5cB0e5) ] = 5;\n\t\treserveLog[ address(0xd8CE40b6f51f3df2F774f35Eaf9c9F20ad76AA5F) ] = 5;\n\t\treserveLog[ address(0x986eAa8d5a0EC0a0f0433BBB249D15E5430CF550) ] = 10;\n\t\treserveLog[ address(0x709A37e109D7c5b7AF637cEd53ccD2a16Cf804E6) ] = 5;\n\t\treserveLog[ address(0xdDd1918AC0D873eb02feD2ac24251da75d983Fed) ] = 1;\n\t\treserveLog[ address(0x08734fe979Db217d19A9963E358F7F2009e940d6) ] = 5;\n\t\treserveLog[ address(0x651741aD4945bE1B8fEC753168DA613FC2060c01) ] = 3;\n\t\treserveLog[ address(0x8b835e35838448a8A29Be15E926D99E9FB040822) ] = 25;\n\t\treserveLog[ address(0xe07E2A56849F1D31233dF11710C00E5a526c59aa) ] = 5;\n\t\treserveLog[ address(0xae4a6373198c7FF52992705178CC3d81BFB5c1bf) ] = 5;\n\t\treserveLog[ address(0x770Ea337b0B3b5E99AdFc3474779690856afac06) ] = 30;\n\t\treserveLog[ address(0x5fB4E2617Bdfd6c8FAe563d4cf9070b45580C305) ] = 1;\n\t\treserveLog[ address(0x3Bcb6e863939828DD391ff5c2820E1Ee93398C17) ] = 26;\n\t\treserveLog[ address(0x03d86EC6Ad13eef60Fa516E7ed291a2171AFBf6A) ] = 10;\n\t\treserveLog[ address(0x3C03Fb9387524111D5528eC19B606eF22D107AC0) ] = 10;\n\t\treserveLog[ address(0x7E7c1A3541d2ff134f755ca58512B703906f2785) ] = 6;\n\t\treserveLog[ address(0x381C43E044f019BD1bca7CCbA3db83d756e9643C) ] = 4;\n\t\treserveLog[ address(0xCBc6C9CeF4f3C7cbBb8Eb82A2aD60c00e631A8C1) ] = 3;\n\t\treserveLog[ address(0x5114908f1c7B8cB43a11bdC7f1731Db0fF8e85F8) ] = 15;\n\t\treserveLog[ address(0x25840805c7B742488f2E5566398C99d0c39A373B) ] = 4;\n\t\treserveLog[ address(0x67C1EC6455C4e62acdaC256BE78604b9cEA50A31) ] = 1;\n\t\treserveLog[ address(0xeCedfe638f467D4b7429f2d945b2b68bc8bdEEd7) ] = 57;\n\t\treserveLog[ address(0xDaef2F9cDAFB8a63c309C5969a4D4E0A507143c6) ] = 1;\n\t\treserveLog[ address(0x24a44d75938c4477900DEa8f418bC1dAfB101657) ] = 2;\n\t\treserveLog[ address(0x1444FedEA6cD0Fd7c78fB2d0CAf803F486B86cBE) ] = 5;\n\t\treserveLog[ address(0x1AF045428EB6c93486d359ac84ac6D1e3A0fb0E4) ] = 25;\n\t\treserveLog[ address(0x420CBC1223e6173c084536166877d59E072dA089) ] = 6;\n\t\treserveLog[ address(0x20687eEe454A4A8b48CBA410d67B5aa6c46fBd21) ] = 6;\n\t\treserveLog[ address(0xF78768D71fEa7e6EdA6219609046c291FA058D7B) ] = 14;\n\t\treserveLog[ address(0x0B9960B28759222d45e2fA059066BE3d94DA12c9) ] = 5;\n\t\treserveLog[ address(0xB55Be226B485f1E3DB7259159780E97119a614F3) ] = 12;\n\t\treserveLog[ address(0x659DA5D440313e21f80E55c7fBf18C704B425010) ] = 10;\n\t\treserveLog[ address(0x056bF45a910A1713260448Fb35B87109b9B9d80B) ] = 3;\n\t\treserveLog[ address(0xb20963d8655316bfCb649055397159B97088AaFA) ] = 1;\n\t\treserveLog[ address(0x87E11C338fdC4053f2AC27311E032EdA29aFa974) ] = 10;\n\t\treserveLog[ address(0x097a2D60513C377cF08041fB51847DB6A97a5d7F) ] = 6;\n\t\treserveLog[ address(0x5DC3f17c714E3076F55849A00ed8397e9661f423) ] = 1;\n\t\treserveLog[ address(0x1E18677d4c9391eCBbBf63A0Dc56f1B10F099f7f) ] = 5;\n\t\treserveLog[ address(0x775ED38A7A77D35c2D8b1cd785E39902Ed2F8F3d) ] = 1;\n\t\treserveLog[ address(0x3fE79050f920C69bC3aC67424e4005dBD0C2429b) ] = 11;\n\t\treserveLog[ address(0x0B993B2b87828f1bCf74f74e1F97cB813A966B2b) ] = 5;\n\t\treserveLog[ address(0x6B71F02e474a0005Ef2B4E69475Db0dB2091033d) ] = 6;\n\t\treserveLog[ address(0x5d0A692c1b83caE90a74bcD362d626A09b44FA98) ] = 1;\n\t\treserveLog[ address(0x0A1717bA21CEAf7c03448f6BdCE4E43a5E2D1cCD) ] = 3;\n\t\treserveLog[ address(0x72f2658CF458C1ECF60545CC38b6766a2f723185) ] = 5;\n\t\treserveLog[ address(0xBdFF8F94d23e4de61B12323605067FC14E3CbCd7) ] = 5;\n\t\treserveLog[ address(0xd140d902B24E4b94c9Ed1473a7e20db8E42b5B1F) ] = 6;\n\t\treserveLog[ address(0xBc48d0cb0f85434186b83263dcBbA6bfE79CAa10) ] = 1;\n\t\treserveLog[ address(0x32bB91144a38f372f120225661DA947B90fda3c1) ] = 5;\n\t\treserveLog[ address(0x397712e87cc37A8472dE68953F37d7D9C2A97099) ] = 5;\n\t\treserveLog[ address(0xf9794B535D607DDeedFB43a31EAd3f4B2DC1612C) ] = 2;\n\t\treserveLog[ address(0x9B52f408a3FdBCaCa3a61bB1354d287123B03Ce9) ] = 5;\n\t\treserveLog[ address(0x41993B75bDE61E347f889cE73b0Eb7b5763c6bd7) ] = 5;\n\t\treserveLog[ address(0xD5F3CCCF2243f6F67Ee93415Febf1a22e5fCb7EA) ] = 6;\n\t\treserveLog[ address(0x602Ff8316a7c4387f897E92838d91C74124A5E4d) ] = 6;\n\t\treserveLog[ address(0xf1FC52D4485BD6894B42Ad80FA1a06C427d6B410) ] = 10;\n\t\treserveLog[ address(0xaCef6dffec76437682A63F7A8FDcF037F06B5B30) ] = 5;\n\t\treserveLog[ address(0xeA5F6704694ffECF5A309a93fc122105B507faAF) ] = 11;\n\t\treserveLog[ address(0xE84B803FFb156d9Fe84569cFf2eb44E94116195F) ] = 10;\n\t\treserveLog[ address(0x623C04dd784cd3a937AB8511BbB165C872223A32) ] = 5;\n\t\treserveLog[ address(0x61aC5784E9BD011EE2D708a2000c707eF18B4356) ] = 5;\n\t\treserveLog[ address(0x910e909175BE35C21A97180653C8942F0669eBAe) ] = 9;\n\t\treserveLog[ address(0x9aee6EeD675278C23CDbC6cae68A84Ec8eaDf108) ] = 1;\n\t\treserveLog[ address(0xb0610e10a5278e5c8D6eC4FAE9C6F39eA37f1489) ] = 5;\n\t\treserveLog[ address(0x07dbD92bf686c5b60c1Db96bB66A90bd6af556F0) ] = 1;\n\t\treserveLog[ address(0x58538dC6fe148E1252296A2Cfe1cc61bCB34104B) ] = 26;\n\t\treserveLog[ address(0xE210Fa629e53721f46c9B28fE13dA66bf8a1fEFf) ] = 1;\n\t\treserveLog[ address(0x45896c9885066Fe00D1C9c95B962CD5e6579bAC5) ] = 50;\n\t\treserveLog[ address(0x1850DFF98F726c3196351e9BaBA70e92BAdc9000) ] = 40;\n\t\treserveLog[ address(0x2A2794F7da0c5e27F0D0621AE47237E872bf62c2) ] = 40;\n\t\treserveLog[ address(0xF807C4a5f07452FD962e5068D4F98b9d0931C72e) ] = 40;\n\t\treserveLog[ address(0xa2aF3d9bdA52dB53aC5fA03F996607C2A51B4FAE) ] = 30;\n\t\treserveLog[ address(0x18aB58A1F4Ea0d873Be2F2970CB83E00103dcE43) ] = 35;\n\t\treserveLog[ address(0x8E19CB0afe1534B66cD23c38D602ccF12bdC686A) ] = 35;\n\t\treserveLog[ address(0x6C7C962089eE9BF42710302FC799CEbdb191327e) ] = 30;\n\t\treserveLog[ address(0xf9cc106ebEED623eE22ED56339a894D88469f267) ] = 30;\n\t\treserveLog[ address(0x1475acBbf626AAb0fD09c7B9D2aB87F85c3d7E14) ] = 30;\n\t\treserveLog[ address(0x670C15E92f712583225e2430C1425622633112c6) ] = 40;\n\t\treserveLog[ address(0x184e65b0B9d596ADce02A4B9fcbFd95d9660aC95) ] = 40;\n\t\treserveLog[ address(0xF73cF15076259422A5dC9DBb020237b5c2045A19) ] = 30;\n\t\treserveLog[ address(0x5f58CE5DDDfc0e170C248867d6c378d64513aa49) ] = 30;\n\t\treserveLog[ address(0xf761b2CC7C68d0583371e3189fdD633fE70105dA) ] = 40;\n\t\treserveLog[ address(0x03044F4367D8bEbeB261D98dA8dCaeD088FD6760) ] = 30;\n\t\treserveLog[ address(0xd91A31a9e7f695A9a43701FA604F7C06941825f2) ] = 35;\n\t\treserveLog[ address(0x78FE789767BaE3372cBBc2a7A47dD0A7F8b32353) ] = 30;\n\t\treserveLog[ address(0xc19496A7Dce4fd9fc6623702303322a571a90187) ] = 40;\n\t\treserveLog[ address(0xC6077Cd3DF4Ad9de8B1356136Fd1C14B55eA2F6d) ] = 35;\n\t\treserveLog[ address(0x454b3697ad71299Bd539F2E057E6D21AD849d3d8) ] = 35;\n\t\treserveLog[ address(0xF363b8D00F609E8082459E6b6f8724D6080E6fa0) ] = 40;\n\t\treserveLog[ address(0x6E1d2C69Dde53cf94e120E426a1c3531FBF79766) ] = 40;\n\t\treserveLog[ address(0xa4266f94758F2bb84285f8e2C6393C3d7707C60e) ] = 35;\n\t\treserveLog[ address(0x5D7dFCBB5643717f0b36A987a3ba91cFb37E350d) ] = 30;\n\t\treserveLog[ address(0x76568C4FB1Ed4876825bB13af439303Ba56574ba) ] = 30;\n\t\treserveLog[ address(0x27D9064310FB02E52D5ADb4aB269aEd1dF27cb4b) ] = 30;\n\t\treserveLog[ address(0x4449CAdadB625DDA3E3A3A422ecAe46450a0aB54) ] = 30;\n\t\treserveLog[ address(0xD788D7F8b9A86d203F5cF86d7E54F2f058624100) ] = 35;\n\t\treserveLog[ address(0x562Ea2E758BCCc41e0c1D2c485235fbF08237608) ] = 35;\n\t\treserveLog[ address(0x71D01033f8ffb379935C0d0e8474f45E6f92A972) ] = 2;\n\t\treserveLog[ address(0xA8C3cFC34f2B0ceAF622026B3017db77170A1FF5) ] = 7;\n\t\treserveLog[ address(0x700F1523bBB4a4430860138b26606b574E417cE5) ] = 1;\n\t\treserveLog[ address(0xC6Ac567b250b986acAE49A842Dad7865dA4be3a0) ] = 20;\n\t\treserveLog[ address(0xBCe965Bcd3D16dc05bCB3F796a2314bC1ddFb8A3) ] = 30;\n\t\treserveLog[ address(0x3aBaf15114858d4C7477E30Deab1F779013C9e17) ] = 50;\n\t\treserveLog[ address(0xD67fAf0157E6576B81A083c0888b7F275cA7308c) ] = 20;\n\t\treserveLog[ address(0x94E69Ebf630cD79C89247981FBd6ac7fbC68A300) ] = 27;\n\t\treserveLog[ address(0xa34c2bd0D3Df7cbd371F94Ab68c5c826DFABB245) ] = 23;\n\t\treserveLog[ address(0x60271ffBbbD4Bb382Ad4A32129D51C2DfF46e4D4) ] = 24;\n\t\treserveLog[ address(0xA746e529E8B66C77FFC6fF7EAaA8cf0F2fB4d925) ] = 36;\n\t\treserveLog[ address(0x9F225e7E711776f86Fc4e47FE28085d8666a2ef8) ] = 19;\n\t\treserveLog[ address(0xAe00F3f0FE3672a4BF24646392024F8542DC1ac3) ] = 17;\n\t\treserveLog[ address(0x7B3c88772277E5ba86E722A08E8A8e070Ed622a7) ] = 23;\n\t\treserveLog[ address(0x887CbD3b6abEA847AE16d7e5C109366F9468A403) ] = 12;\n\t\treserveLog[ address(0x548c79cEb69f6d02a3997FD7335C38A21dA32d69) ] = 21;\n\t\treserveLog[ address(0x12BA6E5d7A0f7FF173007304e0Da014D9dBEE3aA) ] = 25;\n\t\treserveLog[ address(0xc2029cb9760A5baE2A7c9de25afd85E174D55728) ] = 22;\n\t\treserveLog[ address(0x6BDF0fe934f1e94DaA519a139ED1089BC69EE598) ] = 35;\n\t\treserveLog[ address(0xB7515518c86620910AD1490AF64c101fD16Dc8F9) ] = 38;\n\t\treserveLog[ address(0x4423fE89F2783fb0A8a7bA3Cc169324404A8DbF1) ] = 32;\n\t\treserveLog[ address(0xce64b5060A48aC01e78e7d953050cE1E4b5ac351) ] = 15;\n\t\treserveLog[ address(0x2428228000071cD44968f2b0542736BD1af47CDE) ] = 21;\n\t\treserveLog[ address(0x138b4C10B7A091023aA87451BD9d760A8b98A8ae) ] = 18;\n\t\treserveLog[ address(0x807428F34b2A1b8FD7363081cFFeDC53fB133743) ] = 26;\n\t\treserveLog[ address(0xBFdf468C854EC88Ea7761C3f1AD917317eD20a75) ] = 16;\n\t\treserveLog[ address(0xA465bcB79F887a10460537a0D2B1e2C689f743c3) ] = 33;\n\t\treserveLog[ address(0xb0Abd5E82D81AD7A69D0cfEAD5A8e0D133717fB5) ] = 2;\n\t\treserveLog[ address(0xa1a3331CC412fc9B4bE1f6e8E0fe2DB20775Fe42) ] = 5;\n\t\treserveLog[ address(0xF0f1ed472A049762967788D887d0A3ccf280c460) ] = 5;\n\t\treserveLog[ address(0x0783FD17d11589b59Ef7837803Bfb046c025C5Af) ] = 1;\n\t\treserveLog[ address(0x0945BE11418b180Ec8DfE0447a9bE1c15FB1BeaD) ] = 16;\n\t\treserveLog[ address(0x7a837fcA21341e78086f7022ac1e07f3c6b03240) ] = 1;\n\t\treserveLog[ address(0xEa0bC5d9E7e7209Db6d154589EcB5A9eC834789B) ] = 5;\n\t\treserveLog[ address(0x6E84a7EB0c34A757652A2474f4D2c73e288347c3) ] = 8;\n\t\treserveLog[ address(0xfF0F74D6c8602c95De89F67A2799BA0B17CAd4B8) ] = 11;\n\t\treserveLog[ address(0x5593cb346Fd6BBf2b6B7Ae06983785DdD31Cce75) ] = 7;\n\t\treserveLog[ address(0x372344a8808Bb85560bace3b5d4aAd03A74290f7) ] = 7;\n\t\treserveLog[ address(0x92806839C70e789a9aFDc21b53737746B1048f82) ] = 6;\n\t\treserveLog[ address(0x412802B7fF77718A3fAe786C670e4F7E19434C88) ] = 7;\n\t\treserveLog[ address(0x8D7E8E86b53283D3544Aeee3226Cab0a1BFAcf1c) ] = 11;\n\t\treserveLog[ address(0x388E66fB6D609a9D434C9e44495381A0Cfc60b65) ] = 8;\n\t\treserveLog[ address(0x94518CAE5546b20525C829f33D5e2e409672e365) ] = 14;\n\t\treserveLog[ address(0x89cb461617A7B9a7b2BE4d528a19A9dfab8f64D2) ] = 9;\n\t\treserveLog[ address(0x39a6454759fE3cD81edf71B2cf6C7f0CCa5b814d) ] = 7;\n\t\treserveLog[ address(0xF02D1F90f9F05371b724467f9dB3F867A832D69f) ] = 13;\n\t\treserveLog[ address(0xB1335c5F8947327CD1A0926A1A6891D3eb654b93) ] = 22;\n\t\treserveLog[ address(0x238f59Ee635e1D5079Cb0407Ad6157980c69C96C) ] = 8;\n\t\treserveLog[ address(0x86E453d8c94bc0ADC4f4B05b2b4E451e17Be8abe) ] = 9;\n\t\treserveLog[ address(0xb0e41D26Cc795Da7220e3FBaaa0c92E6Baf65db2) ] = 6;\n\t\treserveLog[ address(0xfB72c1a0500E18D757f722d1F71191503e937f1F) ] = 11;\n\t\treserveLog[ address(0x41C3BD08f55a1279C3c596449eB42e00A2E86823) ] = 5;\n\t\treserveLog[ address(0x95631A17dd0F4D19eb90Cc6A0a7e330C987a5139) ] = 6;\n\t\treserveLog[ address(0x4Ce304754Bbd6Bfe8643ebba72Cf494ccb089d8e) ] = 8;\n\t\treserveLog[ address(0x210DC570f8e7F0Ce80dfF902ecEc7AF2eb4b32C6) ] = 7;\n\t\treserveLog[ address(0xe3b29c5794Ac8C9c7c9fdE346209d1927A1E7B33) ] = 9;\n\t\treserveLog[ address(0xA9Eaa007aAE4924D650c50381b278841Ee4d4e01) ] = 12;\n\t\treserveLog[ address(0x278868be49d73284e6415d68b8583211eE96ce1F) ] = 6;\n\t\treserveLog[ address(0xf500006B104b34660B81d6F2Eb6eBBc1CBE2BaE3) ] = 9;\n\t\treserveLog[ address(0x0Cb7Dbc3837Ce16661BeC77e1Db239AAA6d4F0b4) ] = 13;\n\t\treserveLog[ address(0x817f2D50F51E448c1E9DCc82cd83259F3A5a6088) ] = 9;\n\t\treserveLog[ address(0x70102E977B12A3269D2a7539539d7DDFe5D63b2D) ] = 9;\n\t\treserveLog[ address(0x61D1C8059a1988725474709067D8140894545912) ] = 5;\n\t\treserveLog[ address(0x5176BB80780a68ae0194af21Ff2D168574734638) ] = 17;\n\t\treserveLog[ address(0x8CEe034078EADd552D0c8E6E80e45A9B3A7A5BE9) ] = 14;\n\t\treserveLog[ address(0xdFA7ae04064eE82378b01FDe8Fcd1aE72cE957a8) ] = 7;\n\t\treserveLog[ address(0xAe6556336374029D12C4f88813Db19D6d60AdDe7) ] = 11;\n\t\treserveLog[ address(0xC976E311b3B4Bb244C9b4f461D4EdDc3e4B229B0) ] = 6;\n\t\treserveLog[ address(0xFF64798F3dbEf51256f4De0a642d492B218F06c4) ] = 16;\n\t\treserveLog[ address(0x95bC2c07928A4AfC814c7A1b6036a3C684d5F7aF) ] = 11;\n\t\treserveLog[ address(0x4bB7EFc52778d0f5F9A3698cdaD98410da9a077c) ] = 9;\n\t\treserveLog[ address(0xC15A3291144981E0Ae8b5444a299c201A0B08e87) ] = 12;\n\t\treserveLog[ address(0x3C99046aA00B6e42a0Ec5858Bb2c9825cFf40A72) ] = 14;\n\t\treserveLog[ address(0xE718419c7DFF14Fc34AAbed3fcF4533BcF816960) ] = 8;\n\t\treserveLog[ address(0x761e3455C87ad14CBf45b1846296043e06412F1C) ] = 15;\n\t\treserveLog[ address(0x57fED59B69e1aB098033bCAFf9E73E1861ed8a10) ] = 20;\n\t\treserveLog[ address(0x251625D0FE5dAd9728ce575de96a92DEDc4DF987) ] = 17;\n\t\treserveLog[ address(0xbd05A759F39330B7001618738De8acB2E556466A) ] = 14;\n\t\treserveLog[ address(0xb36336BEB87613ffE60B28a6f94D8ab18973C10E) ] = 9;\n\t\treserveLog[ address(0x0C319880d4296207b82F463B979b4923E5F9AD07) ] = 8;\n\t\treserveLog[ address(0xdBA68BD903a0D989599905016450f396D82314e2) ] = 6;\n\t\treserveLog[ address(0x49c72c829B2aa1Ae2526fAEE29461E6cb7Efe0E6) ] = 11;\n\t\treserveLog[ address(0xbF1aE3F91EC24B5Da2d85F2bD95a9E2a0F632d47) ] = 16;\n\t\treserveLog[ address(0xF13cD4FFFB7E8C837dC3F3Bff04D34Cac4D414f5) ] = 100;\n\t\treserveLog[ address(0x8f643591EF13FbE21ecA5fbBf20Cb0662cae34A0) ] = 75;\n\t\treserveLog[ address(0x3561b596790663c72E75908060d2a882D65cc48a) ] = 85;\n\t\treserveLog[ address(0x795C9C9Dfef4cfCCbFdED3BAb98d6bC841A46534) ] = 70;\n\t\treserveLog[ address(0xe5129a9bAafAda04C82744938DEa163fFc361Cc7) ] = 90;\n\t\treserveLog[ address(0x3DDeD3Efa15d23A38eab0e8f155972Da1bB0AeBE) ] = 80;\n\t\treserveLog[ address(0x56E48cad4419A8a27DE6444f5839d85bCdBAfA27) ] = 50;\n\t\treserveLog[ address(0xA664487EAB27879d59F6162777BFb86A47bAdA68) ] = 30;\n\t\treserveLog[ address(0x800A88d1615a7B557641F5C3C4f8d6CfC9692239) ] = 20;\n\t\treserveLog[ address(0xc7A493935700EC98295E963bb3E27176761C4B91) ] = 5;\n\t\treserveLog[ address(0x4AA42aEB8a3cd22A256140b41902C5e1eA9c5cd7) ] = 6;\n\t\treserveLog[ address(0xF51F3e88923dfEFDf33A2E7cc471E27a97531783) ] = 5;\n\t\treserveLog[ address(0xb32336B2ec1C7bE286A961b8DEE466A2B6472e91) ] = 5;\n\t\treserveLog[ address(0x6A5B70026c432E5D12c13b5dC39f3E9F4e229C31) ] = 6;\n\t\treserveLog[ address(0x7f3865E3F61054b357553A09D647D77959d5287b) ] = 12;\n\t\treserveLog[ address(0xBb066a9029105b6ccC5A4d678F7C560432014D55) ] = 6;\n\t\treserveLog[ address(0x9816DE38B33C46Ef44e7D4d0f555c171404d841E) ] = 12;\n\t\treserveLog[ address(0x300D83Fa181010ab3bc10a0dFfE2fa7C392A84d1) ] = 6;\n\t\treserveLog[ address(0xa5046C737847fa4eA1372c27209EffB112748cc6) ] = 7;\n\t\treserveLog[ address(0x0a4C396BeA0170BEF5836Be1b5E2e9F0Ffab14f2) ] = 12;\n\t\treserveLog[ address(0xCAb5aa3Cda2802cec23c0006734fF4Fe3262c4a2) ] = 13;\n\t\treserveLog[ address(0xA7132B6E1a4DF7724B78fD956a3FD7c76b1BB86b) ] = 10;\n\t\treserveLog[ address(0xD4D42b578E90E1b7De6c148D26394EcC092dC97A) ] = 5;\n\t\treserveLog[ address(0xf5192AA5437646e240b5F30Ef6fcff93dC52a813) ] = 40;\n\t\treserveLog[ address(0xA1ffDB5B6845F7bC578C9E7CdfADED4C6De76c82) ] = 50;\n\t\treserveLog[ address(0x57DAB937AD5a3675200baA12DBED928dCD2C5acC) ] = 30;\n\t\treserveLog[ address(0x923DE51F9BDaFc5c66fb8DeC8a27B8ae0d5688De) ] = 25;\n\t\treserveLog[ address(0x5F79E401485c1Be93380dec4bA2c81b1D088b0eC) ] = 55;\n\t\treserveLog[ address(0xE118436bD944108aCFEB6E4E48B0c7F67F4e5150) ] = 45;\n\t\treserveLog[ address(0xEE679B08470218C9922dF223f2e7B0F4eb00F12e) ] = 200;\n\t\treserveLog[ address(0xb3caedA9DED7930a5485F6a36326B789C33c6c1e) ] = 45;\n\t\treserveLog[ address(0x2bE7cD3ad21fbDE0f3E963D13b958CFcF9fc252d) ] = 60;\n\t\treserveLog[ address(0xA59b4038b6DB489e9f257A1ABC92D8c6F402Be23) ] = 40;\n\t\treserveLog[ address(0xEA0f8E0b8Bb13386673827De68f64b6fFc1144B6) ] = 55;\n\t\treserveLog[ address(0xA0224C61f8960D989dF5455F7055D9D3aCB33Be1) ] = 30;\n\t\treserveLog[ address(0xD540254d008833463b39a9E86db5e6f0da96236f) ] = 15;\n\t\treserveLog[ address(0x054a8371805b573BB551fd214947cC7e4DCFad12) ] = 20;\n\t\treserveLog[ address(0x2Ad0f0D3CeE43291EfAFcC270Bd805005BDEe503) ] = 25;\n\t\treserveLog[ address(0x330567B06781027dBab477A9e7F73f36661B0997) ] = 30;\n\t\treserveLog[ address(0x216213236d99dFE4a76E431C93eCA1f606a051Fb) ] = 35;\n\t\treserveLog[ address(0x2E0BB93D258922e6da25F9adA10b47fB229A5f00) ] = 10;\n\t\treserveLog[ address(0x293aF2Dd1Cf2E75568392eE8A590881387dE5B05) ] = 10;\n\t\treserveLog[ address(0x105a426D0A18A69addc3CE1aE6D0500E448991ef) ] = 10;\n\t\treserveLog[ address(0x5ad9d740Abaa11aCE2a495da8A51338fab81b460) ] = 10;\n\t\treserveLog[ address(0xBF7FD93Fe70Fd6126c6f06DfBCe4EcA9Ac09e050) ] = 15;\n\t\treserveLog[ address(0xF88AaFAd4780Eb3b0eEFaB3aa886759acF9d82dC) ] = 15;\n\t\treserveLog[ address(0x41eC5138ffA418A3c61eeB2BA6a03e8C17210e3D) ] = 20;\n\t\treserveLog[ address(0x8742C30158d4889a6711A7C28C3F9eAd1A5214cA) ] = 15;\n\t\treserveLog[ address(0x74AE243121bc550b40983315E6Db541C1dB7AB96) ] = 15;\n\t\treserveLog[ address(0x2eAB1fC74bE243C5f5204F30A9bdEF6d6d236B95) ] = 20;\n\t\treserveLog[ address(0xdd4b49fb97113646DEB8aaf34f462953472D6bD6) ] = 10;\n\t\treserveLog[ address(0x351E0db8bDE58C73CB2F168Fed7fA5B65Bde7f2f) ] = 20;\n\t\treserveLog[ address(0x116d2f18B6A410AE52631a10D4bE4CC84d8be8C6) ] = 15;\n\t\treserveLog[ address(0xa110F3BF5B77E48BbF2Bc15717740E7BF1bD7c7c) ] = 15;\n\t\treserveLog[ address(0x63B2bD90Ef96dbD4EA50dd933B4463d40F8E14E5) ] = 15;\n\t\treserveLog[ address(0xf6fb5914115523ee81098047876F223E00Fc4Cdc) ] = 15;\n\t\treserveLog[ address(0xc8c671c29aEE3E57631f3647BfC763afbaECcEef) ] = 10;\n\t\treserveLog[ address(0x8a642f921aD4fA6f4F6CC7C51222832e74819c5e) ] = 10;\n\t\treserveLog[ address(0xE53ab456a22d67330CA09f91EAA13d14B65D4A7A) ] = 15;\n\t\treserveLog[ address(0x5556336191F9297d7cFA54051480d3f36b397A72) ] = 15;\n\t\treserveLog[ address(0x5c019d29e67BeD0135845a5b747ae3E705275504) ] = 10;\n\t\treserveLog[ address(0xF8E4d023d222De287e848F7A80e59E8746f9b28B) ] = 10;\n\t\treserveLog[ address(0xfADA1A694fA3A39D550dd9DD5A3Efd3C42D5A29B) ] = 10;\n\t\treserveLog[ address(0xf54DF4D46d36193170FcFDC479015DF7C6B66Fa8) ] = 10;\n\t\treserveLog[ address(0xbF0885C44D2cAB7453ABb12aA32Cf243Ef1f687a) ] = 5;\n\t\treserveLog[ address(0xAB39eB31402d0aC1d0d680c0BC123F6c798da42B) ] = 10;\n\t\treserveLog[ address(0x21B9F33A7EF798594270bed7F5a497eef76C2eA8) ] = 10;\n\t\treserveLog[ address(0x2af53963353BA3fCFaC15dF8Cde1f387f8cCC1c8) ] = 10;\n\t\treserveLog[ address(0xf85DDb44E9790E6a03F8714f2b78E60f98372e2f) ] = 3;\n\t\treserveLog[ address(0x0f25C5aC5cBEd4Ff15AAb4ca3639F87a453B9ab8) ] = 3;\n\t\treserveLog[ address(0x381022d39583b052d5F0De3E137cF1998C39fb18) ] = 10;\n\t\treserveLog[ address(0x6242DAaBadd3c08163337Cec11Db00B9a68bD149) ] = 1;\n\t\treserveLog[ address(0x853d2a8D7c855f21b86c071F2A27055345352Ae6) ] = 100;\n\n    }\n    \n}"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Counters.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
18     },
19     "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
20       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
21     },
22     "erc721a/contracts/ERC721A.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
24     },
25     "operator-filter-registry/src/lib/Constants.sol": {
26       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
27     },
28     "operator-filter-registry/src/OperatorFilterer.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
30     },
31     "erc721a/contracts/IERC721A.sol": {
32       "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
33     },
34     "@openzeppelin/contracts/utils/Strings.sol": {
35       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
36     },
37     "@openzeppelin/contracts/utils/Context.sol": {
38       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
39     },
40     "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
41       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
42     },
43     "@openzeppelin/contracts/utils/math/Math.sol": {
44       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
45     }
46   },
47   "settings": {
48     "optimizer": {
49       "enabled": false,
50       "runs": 200
51     },
52     "outputSelection": {
53       "*": {
54         "*": [
55           "evm.bytecode",
56           "evm.deployedBytecode",
57           "devdoc",
58           "userdoc",
59           "metadata",
60           "abi"
61         ]
62       }
63     }
64   }
65 }}