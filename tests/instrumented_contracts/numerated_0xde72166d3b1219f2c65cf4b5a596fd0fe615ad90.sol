1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/TombVault.sol": {
5       "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\n\r\ninterface IKlub {\r\n  function mint(address to, uint256 amount) external;\r\n}\r\n\r\ncontract TombVault is Ownable, IERC721Receiver {\r\n  \r\n  struct Stake {\r\n    uint24 tokenId;\r\n    uint48 timestamp;\r\n    address owner;\r\n  }\r\n\r\n  uint public KLUBS_PER_TOMB_PER_DAY = 5 * 1 ether;\r\n\r\n  // tokenId to stake\r\n  mapping(uint => Stake) public vault; \r\n  uint public totalStaked;\r\n\r\n  IERC721Enumerable public tomb = IERC721Enumerable(0x40f8719f2919a5DEDD2D5A67065df6EaC65c149C);\r\n  IKlub public klub = IKlub(0xa0DB234a35AaF919b51E1F6Dc21c395EeF2F959d);\r\n\r\n  event Staked(address owner, uint tokenId, uint value);\r\n  event Unstaked(address owner, uint tokenId, uint value);\r\n  event Claimed(address owner, uint amount);\r\n\r\n  constructor() { \r\n  }\r\n\r\n  function setTomb(address _tomb) external onlyOwner {\r\n    tomb = IERC721Enumerable(_tomb);\r\n  }\r\n  function setKlub(address _klub) external onlyOwner {\r\n    klub = IKlub(_klub);\r\n  }\r\n  function setKLUBS_PER_TOMB_PER_DAY(uint _KLUBS_PER_TOMB_PER_DAY) external onlyOwner {\r\n    KLUBS_PER_TOMB_PER_DAY = _KLUBS_PER_TOMB_PER_DAY * 1 ether;\r\n  }\r\n\r\n  function stake(uint[] calldata tokenIds) external {\r\n    totalStaked += tokenIds.length;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      uint tokenId = tokenIds[i];\r\n      require(tomb.ownerOf(tokenId) == msg.sender, \"TombVault: Only the owner of the tomb klub can stake it\");\r\n      require(vault[tokenId].tokenId == 0, \"TombVault: Token already staked\");\r\n\r\n      tomb.transferFrom(msg.sender, address(this), tokenId);\r\n      emit Staked(msg.sender, tokenId, block.timestamp);\r\n\r\n      vault[tokenId] = Stake({\r\n        owner: msg.sender,\r\n        tokenId: uint24(tokenId),\r\n        timestamp: uint48(block.timestamp)\r\n      });\r\n    }\r\n  }\r\n\r\n  function _unstakeMany(address account, uint[] calldata tokenIds) internal {\r\n    totalStaked -= tokenIds.length;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      uint tokenId = tokenIds[i];\r\n      Stake memory staked = vault[tokenId];\r\n      require(staked.owner == msg.sender, \"TombVault: Only the Staker can unstake it\");\r\n\r\n      delete vault[tokenId];\r\n      emit Unstaked(account, tokenId, block.timestamp);\r\n      tomb.transferFrom(address(this), account, tokenId);\r\n    }\r\n  }\r\n\r\n  function claim(uint[] calldata tokenIds) external {\r\n      _claim(msg.sender, tokenIds, false);\r\n  }\r\n\r\n  function claimForAddress(address account, uint[] calldata tokenIds) external {\r\n      _claim(account, tokenIds, false);\r\n  }\r\n\r\n  function unstake(uint[] calldata tokenIds) external {\r\n      _claim(msg.sender, tokenIds, true);\r\n  }\r\n\r\n  function _claim(address account, uint[] calldata tokenIds, bool _unstake) internal {\r\n    uint earned;\r\n    for (uint i = 0; i < tokenIds.length; i++) {\r\n      uint tokenId = tokenIds[i];\r\n      Stake memory staked = vault[tokenId];\r\n      require(staked.owner == account, \"TombVault: Only the Staker can claim\");\r\n\r\n      earned += KLUBS_PER_TOMB_PER_DAY * (block.timestamp - staked.timestamp) / 1 days;\r\n\r\n      vault[tokenId] = Stake({\r\n        owner: account,\r\n        tokenId: uint24(tokenId),\r\n        timestamp: uint48(block.timestamp)\r\n      });\r\n\r\n    }\r\n    if (earned > 0) {\r\n      klub.mint(account, earned);\r\n    }\r\n    if (_unstake) {\r\n      _unstakeMany(account, tokenIds);\r\n    }\r\n    emit Claimed(account, earned);\r\n  }\r\n\r\n  function unclamiedEarnings(uint[] calldata tokenIds) external view returns (uint) {\r\n     uint earned;\r\n     for (uint i = 0; i < tokenIds.length; i++) {\r\n      uint tokenId = tokenIds[i];\r\n      Stake memory staked = vault[tokenId];\r\n      uint stakedAt = staked.timestamp;\r\n      require(stakedAt > 0, \"TombVault: Stake not found\");\r\n\r\n      earned += KLUBS_PER_TOMB_PER_DAY * (block.timestamp - stakedAt) / 1 days;\r\n    }\r\n\r\n    return earned;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint) {\r\n    uint balance;\r\n    uint supply = tomb.totalSupply();\r\n    for(uint i = 0; i < supply; i++) {\r\n      if (vault[i].owner == account) {\r\n        balance += 1;\r\n      }\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  function tokensOfOwner(address account) external view returns (uint[] memory ownerTokens) {\r\n    uint supply = tomb.totalSupply();\r\n    uint[] memory tmp = new uint[](supply);\r\n\r\n    uint index;\r\n    for(uint tokenId = 0; tokenId < supply; tokenId++) {\r\n      if (vault[tokenId].owner == account) {\r\n        tmp[index] = vault[tokenId].tokenId;\r\n        index +=1;\r\n      }\r\n    }\r\n\r\n    uint[] memory tokens = new uint[](index);\r\n    for(uint i = 0; i < index; i++) {\r\n      tokens[i] = tmp[i];\r\n    }\r\n\r\n    return tokens;\r\n  }\r\n\r\n  function onERC721Received(\r\n        address,\r\n        address from,\r\n        uint,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n      require(from == address(0x0), \"TombVault: Can't receive tokens directly by minting\");\r\n      return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n  \r\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
15     },
16     "@openzeppelin/contracts/utils/Context.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
21     },
22     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
24     }
25   },
26   "settings": {
27     "optimizer": {
28       "enabled": true,
29       "runs": 200
30     },
31     "outputSelection": {
32       "*": {
33         "*": [
34           "evm.bytecode",
35           "evm.deployedBytecode",
36           "devdoc",
37           "userdoc",
38           "metadata",
39           "abi"
40         ]
41       }
42     },
43     "libraries": {}
44   }
45 }}