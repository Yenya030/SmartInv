1 {{
2   "language": "Solidity",
3   "sources": {
4     "@openzeppelin/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
18     },
19     "contracts/BandSaurusAuctionHouse.sol": {
20       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\n// LICENSE\n// BandSaurusAuctionHouse.sol is a modified version of nounsDAO's NounsAuctionHouse.sol:\n// https://github.com/nounsDAO/nouns-monorepo/blob/master/packages/nouns-contracts/contracts/NounsAuctionHouse.sol\n//\n// NounsAuctionHouse.sol source code Copyright nounsDAO licensed under the GPL-3.0 license.\n// With modifications by Chimney Town DAO.\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IBandSaurusAuctionHouse } from './interfaces/IBandSaurusAuctionHouse.sol';\nimport { IBandSaurus } from './interfaces/IBandSaurus.sol';\n\ncontract BandSaurusAuctionHouse is IBandSaurusAuctionHouse, Ownable, ReentrancyGuard {\n\n    modifier whenNotPaused() {\n        require(!paused, \"paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(paused, \"not paused\");\n        _;\n    }\n\n    // The BandSaurus ERC721 token contract\n    IBandSaurus public bandSaurus;\n\n    // The minimum amount of time left in an auction after a new bid is created\n    uint256 public timeBuffer = 300; // 5min\n\n    // Offset time for auction closing time (Based on UTC+0)\n    uint256 public endTimeOffset = 3600 * 12;\n\n    // The minimum price accepted in an auction\n    uint256 public reservePrice = 10000000000000000; // 0.01eth\n\n    // The minimum percentage difference between the last bid amount and the current bid\n    uint8 public minBidIncrementPercentage = 5; // 5%\n\n    bool public paused = true;\n\n    // The active auction\n    IBandSaurusAuctionHouse.Auction public auction;\n\n    /**\n     * @notice Settle the current auction, mint a new BandSaurus, and put it up for auction.\n     */\n    function settleCurrentAndCreateNewAuction() external override nonReentrant whenNotPaused {\n        _settleAuction();\n        _createAuction(0);\n    }\n\n    /**\n     * @notice Settle the current auction.\n     * @dev Only callable by the owner.\n     */\n    function settleAuction() external override onlyOwner nonReentrant {\n        _settleAuction();\n    }\n\n    /**\n     * @notice Mint a new BandSaurus, and put it up for auction.\n     * @dev Only callable by the owner.\n     */\n    function createAuction(uint256 startTime) external override onlyOwner nonReentrant whenPaused {\n        IBandSaurusAuctionHouse.Auction memory _auction = auction;\n        require(_auction.startTime == 0 || _auction.settled, 'Auction has not ended.');\n\n        _createAuction(startTime);\n    }\n\n    /**\n     * @notice Create a bid for a BandSaurus, with a given amount.\n     * @dev This contract only accepts payment in ETH.\n     */\n    function createBid(uint256 tokenId) external payable override nonReentrant whenNotPaused {\n        IBandSaurusAuctionHouse.Auction memory _auction = auction;\n\n        require(tx.origin == msg.sender, \"not eoa\");\n        require(_auction.tokenId == tokenId, 'BandSaurus not up for auction');\n        require(block.timestamp > _auction.startTime, 'Auction not started');\n        require(block.timestamp < _auction.endTime, 'Auction expired');\n        require(msg.value >= reservePrice, 'Must send at least reservePrice');\n        require(\n            msg.value >= _auction.amount + ((_auction.amount * minBidIncrementPercentage) / 100),\n            'Must send more than last bid by minBidIncrementPercentage amount'\n        );\n\n        address payable lastBidder = _auction.bidder;\n\n        // Refund the last bidder, if applicable\n        if (lastBidder != address(0)) {\n            _safeTransferETHWithFallback(lastBidder, _auction.amount);\n        }\n\n        auction.amount = msg.value;\n        auction.bidder = payable(msg.sender);\n\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\n        bool extended = _auction.endTime - block.timestamp < timeBuffer;\n        if (extended) {\n            auction.endTime = _auction.endTime = block.timestamp + timeBuffer;\n        }\n\n        emit AuctionBid(_auction.tokenId, msg.sender, msg.value, extended);\n\n        if (extended) {\n            emit AuctionExtended(_auction.tokenId, _auction.endTime);\n        }\n    }\n\n    /**\n     * @notice Pause the BandSaurus auction house.\n     * @dev This function can only be called by the owner when the\n     * contract is unpaused. While no new auctions can be started when paused,\n     * anyone can settle an ongoing auction.\n     */\n    function pause() external override onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice Unpause the BandSaurus auction house.\n     * @dev This function can only be called by the owner.\n     */\n    function unpause() external override onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Set the auction time buffer.\n     * @dev Only callable by the owner.\n     */\n    function setTimeBuffer(uint256 _timeBuffer) external override onlyOwner {\n        timeBuffer = _timeBuffer;\n\n        emit AuctionTimeBufferUpdated(_timeBuffer);\n    }\n\n    /**\n     * @notice Set the auction reserve price.\n     * @dev Only callable by the owner.\n     */\n    function setReservePrice(uint256 _reservePrice) external override onlyOwner {\n        reservePrice = _reservePrice;\n\n        emit AuctionReservePriceUpdated(_reservePrice);\n    }\n\n    /**\n     * @notice Set the auction minimum bid increment percentage.\n     * @dev Only callable by the owner.\n     */\n    function setMinBidIncrementPercentage(uint8 _minBidIncrementPercentage) external override onlyOwner {\n        minBidIncrementPercentage = _minBidIncrementPercentage;\n\n        emit AuctionMinBidIncrementPercentageUpdated(_minBidIncrementPercentage);\n    }\n\n    function setEndTimeOffset(uint256 _endTimeOffset ) external override onlyOwner {\n        endTimeOffset = _endTimeOffset;\n    }\n\n    function setBandSaurusContract(IBandSaurus _bandSaurus ) external onlyOwner {\n        bandSaurus = _bandSaurus;\n    }\n\n    /**\n     * @notice Create an auction.\n     * @dev Store the auction details in the `auction` state variable and emit an AuctionCreated event.\n     * If the mint reverts, the minter was updated without pausing this contract first. To remedy this,\n     * catch the revert and pause this contract.\n     */\n    function _createAuction(uint256 startTime) internal {\n        if(startTime > 0){\n            require(block.timestamp < startTime, 'invalid value');\n        }else{\n            startTime = block.timestamp;\n        }\n\n        try bandSaurus.mint() returns (uint256 tokenId) {\n            uint256 endTime = startTime  - startTime % 86400 + endTimeOffset;\n\n            if(startTime >= endTime){\n                endTime += 86400;\n            }\n\n            auction = Auction({\n                tokenId: tokenId,\n                amount: 0,\n                startTime: startTime,\n                endTime: endTime,\n                bidder: payable(0),\n                settled: false\n            });\n\n            emit AuctionCreated(tokenId, startTime, endTime);\n        } catch Error(string memory) {\n            _pause();\n        }\n    }\n\n    /**\n     * @notice Settle an auction, finalizing the bid and paying out to the owner.\n     * @dev If there are no bids, the BandSaurus is burned.\n     */\n    function _settleAuction() internal {\n        IBandSaurusAuctionHouse.Auction memory _auction = auction;\n\n        require(_auction.startTime != 0, \"Auction hasn't begun\");\n        require(!_auction.settled, 'Auction has already been settled');\n        require(block.timestamp >= _auction.endTime, \"Auction hasn't completed\");\n\n        auction.settled = true;\n\n        if (_auction.bidder == address(0)) {\n            bandSaurus.burn(_auction.tokenId);\n        } else {\n            bandSaurus.transferFrom(address(this), _auction.bidder, _auction.tokenId);\n        }\n\n        if (_auction.amount > 0) {\n            _safeTransferETHWithFallback(owner(), _auction.amount);\n        }\n\n        emit AuctionSettled(_auction.tokenId, _auction.bidder, _auction.amount);\n    }\n\n    /**\n     * @notice Transfer ETH. If the ETH transfer fails,send to Owner.\n     */\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\n        if (!_safeTransferETH(to, amount)) {\n            require(_safeTransferETH(owner(), amount), \"receiver rejected ETH transfer\");\n        }\n    }\n\n    /**\n     * @notice Transfer ETH and return the success status.\n     * @dev This function only forwards 30,000 gas to the callee.\n     */\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\n        return success;\n    }\n\n    function _pause() internal {\n        paused = true;\n    }\n\n    function _unpause() internal {\n        paused = false;\n    }\n\n}"
21     },
22     "contracts/interfaces/IBandSaurus.sol": {
23       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\nimport { IERC721 } from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\ninterface IBandSaurus is IERC721 {\n    event BandSaurusCreated(uint256 indexed tokenId);\n\n    event BandSaurusBurned(uint256 indexed tokenId);\n\n    event MinterUpdated(address minter);\n\n    function mint() external returns (uint256);\n\n    function burn(uint256 tokenId) external;\n\n    function setMinter(address minter) external;\n\n    function setMaxSupply(uint256 maxSupply) external;\n}"
24     },
25     "contracts/interfaces/IBandSaurusAuctionHouse.sol": {
26       "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\n\ninterface IBandSaurusAuctionHouse {\n    struct Auction {\n        // ID for the BandSaurus (ERC721 token ID)\n        uint256 tokenId;\n        // The current highest bid amount\n        uint256 amount;\n        // The time that the auction started\n        uint256 startTime;\n        // The time that the auction is scheduled to end\n        uint256 endTime;\n        // The address of the current highest bid\n        address payable bidder;\n        // Whether or not the auction has been settled\n        bool settled;\n    }\n\n    event AuctionCreated(uint256 indexed tokenId, uint256 startTime, uint256 endTime);\n\n    event AuctionBid(uint256 indexed tokenId, address sender, uint256 value, bool extended);\n\n    event AuctionExtended(uint256 indexed tokenId, uint256 endTime);\n\n    event AuctionSettled(uint256 indexed tokenId, address winner, uint256 amount);\n\n    event AuctionTimeBufferUpdated(uint256 timeBuffer);\n\n    event AuctionReservePriceUpdated(uint256 reservePrice);\n\n    event AuctionMinBidIncrementPercentageUpdated(uint256 minBidIncrementPercentage);\n\n    event AuctionEndTimeOffsetUpdated(uint256 endTimeOffset);\n\n    function settleAuction() external;\n\n    function settleCurrentAndCreateNewAuction() external;\n\n    function createBid(uint256 tokenId) external payable;\n\n    function createAuction(uint256 startTime) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function setTimeBuffer(uint256 timeBuffer) external;\n\n    function setReservePrice(uint256 reservePrice) external;\n\n    function setMinBidIncrementPercentage(uint8 minBidIncrementPercentage) external;\n\n    function setEndTimeOffset(uint256 endTimeOffset) external;\n}"
27     }
28   },
29   "settings": {
30     "optimizer": {
31       "enabled": true,
32       "runs": 200
33     },
34     "outputSelection": {
35       "*": {
36         "*": [
37           "evm.bytecode",
38           "evm.deployedBytecode",
39           "devdoc",
40           "userdoc",
41           "metadata",
42           "abi"
43         ]
44       }
45     },
46     "libraries": {}
47   }
48 }}