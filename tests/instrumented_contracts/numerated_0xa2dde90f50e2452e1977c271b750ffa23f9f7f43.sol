1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/StakingContract.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n/**\n *  ______ _ _             _                _____ _       _\n * |  ____| (_)           (_)              / ____| |     | |\n * | |__  | |_ _ __  _ __  _ _ __   __ _  | |    | |_   _| |__\n * |  __| | | | '_ \\| '_ \\| | '_ \\ / _` | | |    | | | | | '_ \\\n * | |    | | | |_) | |_) | | | | | (_| | | |____| | |_| | |_) |\n * |_|    |_|_| .__/| .__/|_|_| |_|\\__, |  \\_____|_|\\__,_|_.__/\n *            | |   | |             __/ |\n *   _____ _  |_|   |_|  _         |___/  _____            _                  _\n *  / ____| |      | |  (_)              / ____|          | |                | |\n * | (___ | |_ __ _| | ___ _ __   __ _  | |     ___  _ __ | |_ _ __ __ _  ___| |_\n *  \\___ \\| __/ _` | |/ / | '_ \\ / _` | | |    / _ \\| '_ \\| __| '__/ _` |/ __| __|\n *  ____) | || (_| |   <| | | | | (_| | | |___| (_) | | | | |_| | | (_| | (__| |_\n * |_____/ \\__\\__,_|_|\\_\\_|_| |_|\\__, |  \\_____\\___/|_| |_|\\__|_|  \\__,_|\\___|\\__|\n *                                __/ |\n *                               |___/\n *\n * @title Flipping Club Staking Contract - flippingclub.xyz\n * @author Flipping Club Team\n */\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./stakeable.sol\";\nimport \"./IClaim.sol\";\nimport \"./NFTContractFunctions.sol\";\n\ncontract FlippingClubStakingContract is Stakeable, Pausable, Ownable {\n    using SafeMath for uint256;\n    event LogDepositReceived(address indexed payee);\n    event Claimed(uint256 indexed amount, address indexed payee);\n\n    NFTContractFunctions private ERC721KeyCards;\n\n    uint256 private P1Reward = 210; // Basis Point\n    uint256 private P2Reward = 280;\n    uint256 private P3Reward = 460;\n    uint256 private P4Reward = 930;\n    uint256 private P1Duration = 864000; // Seconds\n    uint256 private P2Duration = 3888000;\n    uint256 private P3Duration = 7776000;\n    uint256 private P4Duration = 15552000;\n    uint256 private constant PACKAGE_1 = 1;\n    uint256 private constant PACKAGE_2 = 2;\n    uint256 private constant PACKAGE_3 = 3;\n    uint256 private constant PACKAGE_4 = 4;\n    uint256 private maxAllowancePerKey = 5000000000000000000;\n    uint256 private minStakeValue = 100000000000000000;\n    uint256 private maxStakeValue = 100000000000000000000;\n    uint256 private minWithdraw = 100000000000000000;\n    address private __checkKeys = 0xd2F735f959c3DC91e6C23C8254e70D07B6aaCD68; // FlippingClub Access Key Contract\n    address private _claimContract = 0x0000000000000000000000000000000000000000;\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\"ADMIN\"));\n    bytes32 private constant EXEC = keccak256(abi.encodePacked(\"EXEC\"));\n\n    constructor(address payable _newAdmin) {\n        _grantRole(ADMIN, _newAdmin);\n    }\n\n    receive() external payable {\n        emit LogDepositReceived(msg.sender);\n    }\n\n    function beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256[] memory _keysToBeUsed\n    ) external payable nonReentrant whenNotPaused {\n        _beginStake(_amount, _package, _keysToBeUsed, msg.sender);\n    }\n\n    function admin_beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256[] memory _keysToBeUsed,\n        address _spender\n    ) external payable nonReentrant onlyRole(ADMIN) whenNotPaused {\n        _beginStake(_amount, _package, _keysToBeUsed, _spender);\n    }\n\n    function admin_beginStake_noKeys(\n        uint256 _amount,\n        uint256 _package,\n        uint256 _startTime,\n        address _spender\n    ) external payable nonReentrant onlyRole(ADMIN) whenNotPaused {\n        require(\n            _amount >= minStakeValue,\n            \"Stake: Cannot stake less than minimum\"\n        );\n        require(\n            _amount <= maxStakeValue,\n            \"Stake: Cannot stake more than maximum\"\n        );\n        require(msg.value == _amount, \"Stake: Invalid amount of eth sent.\");\n        require(\n            _package == PACKAGE_1 ||\n                _package == PACKAGE_2 ||\n                _package == PACKAGE_3 ||\n                _package == PACKAGE_4,\n            \"Stake: Invalid Package\"\n        );\n        uint256 _rewardPerHour = 0;\n        uint256 _timePeriodInSeconds = 0;\n        if (_package == PACKAGE_1) {\n            _rewardPerHour = P1Reward;\n            _timePeriodInSeconds = P1Duration;\n        }\n        if (_package == PACKAGE_2) {\n            _rewardPerHour = P2Reward;\n            _timePeriodInSeconds = P2Duration;\n        }\n        if (_package == PACKAGE_3) {\n            _rewardPerHour = P3Reward;\n            _timePeriodInSeconds = P3Duration;\n        }\n        if (_package == PACKAGE_4) {\n            _rewardPerHour = P4Reward;\n            _timePeriodInSeconds = P4Duration;\n        }\n        _stake_noKeys(\n            _amount,\n            _rewardPerHour,\n            _timePeriodInSeconds,\n            _spender,\n            _startTime\n        );\n    }\n\n    function _beginStake(\n        uint256 _amount,\n        uint256 _package,\n        uint256[] memory _keysToBeUsed,\n        address _spender\n    ) private {\n        require(\n            _amount >= minStakeValue,\n            \"Stake: Cannot stake less than minimum\"\n        );\n        require(\n            _amount <= maxStakeValue,\n            \"Stake: Cannot stake more than maximum\"\n        );\n        require(msg.value == _amount, \"Stake: Invalid amount of eth sent.\");\n        require(\n            checkTokens(_keysToBeUsed, _spender) == true,\n            \"Stake: Not all Keys presented are owned by this address.\"\n        );\n        require(checkKey() >= 1, \"Stake: This address dont have any Key.\");\n        require(\n            _package == PACKAGE_1 ||\n                _package == PACKAGE_2 ||\n                _package == PACKAGE_3 ||\n                _package == PACKAGE_4,\n            \"Stake: Invalid Package\"\n        );\n        uint256 _rewardPerHour = 0;\n        uint256 _timePeriodInSeconds = 0;\n        if (_package == PACKAGE_1) {\n            _rewardPerHour = P1Reward;\n            _timePeriodInSeconds = P1Duration;\n        }\n        if (_package == PACKAGE_2) {\n            _rewardPerHour = P2Reward;\n            _timePeriodInSeconds = P2Duration;\n        }\n        if (_package == PACKAGE_3) {\n            _rewardPerHour = P3Reward;\n            _timePeriodInSeconds = P3Duration;\n        }\n        if (_package == PACKAGE_4) {\n            _rewardPerHour = P4Reward;\n            _timePeriodInSeconds = P4Duration;\n        }\n        require(\n            ((_amount / _rewardPerHour) * (_timePeriodInSeconds / 3600)) <=\n                (_keysToBeUsed.length * maxAllowancePerKey),\n            \"Stake: Not enough Keys for this package.\"\n        );\n        burnKeys(_keysToBeUsed, _spender);\n        _stake(_amount, _rewardPerHour, _timePeriodInSeconds, _spender);\n    }\n\n    function withdrawStake(uint256 amount, uint256 stake_index)\n        external\n        nonReentrant\n        whenNotPaused\n        returns (uint256)\n    {\n        require(amount >= minWithdraw, \"Claim: Amount is less than minimum\");\n        return _withdrawStake(amount, stake_index);\n    }\n\n    function checkTokens(uint256[] memory _tokenList, address _msgSender)\n        private\n        view\n        returns (bool)\n    {\n        require(__checkKeys != address(0), \"Key Contract not set.\");\n        for (uint256 i = 0; i < _tokenList.length; i++) {\n            if (ERC721KeyCards.ownerOf(_tokenList[i]) != _msgSender) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function burnKeys(uint256[] memory _keysToBeUsed, address _spender)\n        public\n        whenNotPaused\n    {\n        address burnAddress = 0x000000000000000000000000000000000000dEaD;\n        for (uint256 i = 0; i < _keysToBeUsed.length; i++) {\n            require(\n                ERC721KeyCards.isApprovedForAll(_spender, address(this)) ==\n                    true,\n                \"BurnKeys: Contract is not approved to spend Keys.\"\n            );\n            ERC721KeyCards.safeTransferFrom(\n                _spender,\n                burnAddress,\n                _keysToBeUsed[i]\n            );\n        }\n    }\n\n    function checkKey() private view returns (uint256) {\n        require(__checkKeys != address(0), \"Key Contract not set.\");\n        return ERC721KeyCards.balanceOf(msg.sender);\n    }\n\n    /// @notice Initiates Pool participition in batches.\n    function initPool(uint256 _amount, address _payee)\n        external\n        nonReentrant\n        onlyRole(ADMIN)\n    {\n        payable(_payee).transfer(_amount);\n    }\n\n    /// @notice Initiates claim for specific address.\n    function broadcastClaim(address payable _payee, uint256 _amount)\n        external\n        payable\n        onlyRole(EXEC)\n        nonReentrant\n        whenNotPaused\n    {\n        require(_claimContract != address(0), \"Claim Contract not set.\");\n        IClaim(_claimContract).initClaim{value: msg.value}(_payee, _amount);\n        emit Claimed(_amount, _payee);\n    }\n\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function setPackageOne(uint256 _P1Reward, uint256 _P1Duration)\n        external\n        onlyRole(ADMIN)\n    {\n        P1Reward = _P1Reward;\n        P1Duration = _P1Duration;\n    }\n\n    function setPackageTwo(uint256 _P2Reward, uint256 _P2Duration)\n        external\n        onlyRole(ADMIN)\n    {\n        P2Reward = _P2Reward;\n        P2Duration = _P2Duration;\n    }\n\n    function setPackageThree(uint256 _P3Reward, uint256 _P3Duration)\n        external\n        onlyRole(ADMIN)\n    {\n        P3Reward = _P3Reward;\n        P3Duration = _P3Duration;\n    }\n\n    function setPackageFour(uint256 _P4Reward, uint256 _P4Duration)\n        external\n        onlyRole(ADMIN)\n    {\n        P4Reward = _P4Reward;\n        P4Duration = _P4Duration;\n    }\n\n    function getPackages()\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            P1Reward,\n            P1Duration,\n            P2Reward,\n            P2Duration,\n            P3Reward,\n            P3Duration,\n            P4Reward,\n            P4Duration\n        );\n    }\n\n    function setCheckKeysContractAddress(address KeysContract)\n        external\n        onlyRole(ADMIN)\n    {\n        __checkKeys = KeysContract;\n        ERC721KeyCards = NFTContractFunctions(__checkKeys);\n    }\n\n    function setClaimContract(address ClaimContract) external onlyRole(ADMIN) {\n        _claimContract = ClaimContract;\n    }\n\n    function setmaxAllowancePerKey(uint256 _maxAllowancePerKey)\n        external\n        onlyRole(ADMIN)\n    {\n        maxAllowancePerKey = _maxAllowancePerKey;\n    }\n\n    function getmaxAllowancePerKey() external view returns (uint256) {\n        return maxAllowancePerKey;\n    }\n\n    function setMinWithdraw(uint256 _minWithdraw) external onlyRole(ADMIN) {\n        minWithdraw = _minWithdraw;\n    }\n\n    function getminWithdraw() external view returns (uint256) {\n        return minWithdraw;\n    }\n\n    function setminStakeValue(uint256 _minStakeValue) external onlyRole(ADMIN) {\n        minStakeValue = _minStakeValue;\n    }\n\n    function setmaxStakeValue(uint256 _maxStakeValue) external onlyRole(ADMIN) {\n        maxStakeValue = _maxStakeValue;\n    }\n\n    function getMinMaxValue() external view returns (uint256, uint256) {\n        return (minStakeValue, maxStakeValue);\n    }\n\n    function pause() external whenNotPaused onlyRole(ADMIN) {\n        _pause();\n    }\n\n    function unPause() external whenPaused onlyRole(ADMIN) {\n        _unpause();\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/security/Pausable.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
15     },
16     "@openzeppelin/contracts/utils/math/SafeMath.sol": {
17       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
18     },
19     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
20       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
21     },
22     "@openzeppelin/contracts/access/Ownable.sol": {
23       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
24     },
25     "contracts/stakeable.sol": {
26       "content": "import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ncontract Stakeable is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    uint256 private initialTimestamp;\n    uint256 private timePeriod;\n    uint256 private maxPositions = 1;\n    uint256 private MinStakeValueToClosePosition = 100000000000000000;\n    address private StakingAccount = 0x0000000000000000000000000000000000000000;\n    bool private MoveFundsUponReceipt = false;\n    bool private ClaimWithinContract = true;\n    bool private MovePercentageOfFundsUponReceipt = false;\n    uint256 private MovePercentageBasisNumber = 500; // =5%\n    event GrantRole(bytes32 indexed role, address indexed account);\n    event RevokeRole(bytes32 indexed role, address indexed account);\n    event Withdrawn(address indexed, uint256 amount, uint256 timestamp);\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 index,\n        uint256 timestamp,\n        uint256 _plan,\n        uint256 timePeriod\n    );\n\n    mapping(bytes32 => mapping(address => bool)) public roles;\n\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\"ADMIN\"));\n    bytes32 private constant EXEC = keccak256(abi.encodePacked(\"EXEC\"));\n\n    constructor() {\n        stakeholders.push();\n    }\n\n    struct Stake {\n        address user;\n        uint256 amount;\n        uint256 since; // time since staked\n        uint256 rewardPerHour;\n        uint256 timePeriod;\n        uint256 reward;\n    }\n    struct Stakeholder {\n        address user;\n        Stake[] address_stakes;\n    }\n\n    struct StakingSummary {\n        Stake[] stakes;\n    }\n\n    Stakeholder[] internal stakeholders;\n    mapping(address => uint256) internal stakes;\n\n    function _addStakeholder(address staker) private returns (uint256) {\n        stakeholders.push();\n        uint256 userIndex = stakeholders.length - 1;\n        stakeholders[userIndex].user = staker;\n        stakes[staker] = userIndex;\n        return userIndex;\n    }\n\n    function _stake(\n        uint256 _amount,\n        uint256 _rewardPerHour,\n        uint256 _timePeriodInSeconds,\n        address _Sender\n    ) internal {\n        require(StakingAccount != address(0), \"Staking account not set.\");\n        require(canStake(_Sender), \"Already have max open positions.\");\n        if (MoveFundsUponReceipt == true) {\n            payable(StakingAccount).transfer(_amount);\n        }\n        if (MovePercentageOfFundsUponReceipt == true) {\n            payable(StakingAccount).transfer(\n                _amount.mul(MovePercentageBasisNumber).div(1000000)\n            );\n        }\n        uint256 index = stakes[_Sender];\n        uint256 timestamp = block.timestamp;\n        if (index == 0) {\n            index = _addStakeholder(_Sender);\n        }\n        initialTimestamp = block.timestamp;\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\n        stakeholders[index].address_stakes.push(\n            Stake(\n                payable(_Sender),\n                _amount,\n                timestamp,\n                _rewardPerHour,\n                timePeriod,\n                0\n            )\n        );\n        emit Staked(\n            _Sender,\n            _amount,\n            index,\n            timestamp,\n            _rewardPerHour,\n            timePeriod\n        );\n    }\n\n    function _stake_noKeys(\n        uint256 _amount,\n        uint256 _rewardPerHour,\n        uint256 _timePeriodInSeconds,\n        address _Sender,\n        uint256 _startTime\n    ) internal {\n        require(StakingAccount != address(0), \"Staking account not set.\");\n        require(canStake(_Sender), \"Already have max open positions.\");\n        if (MoveFundsUponReceipt == true) {\n            payable(StakingAccount).transfer(_amount);\n        }\n        if (MovePercentageOfFundsUponReceipt == true) {\n            payable(StakingAccount).transfer(\n                _amount.mul(MovePercentageBasisNumber).div(1000000)\n            );\n        }\n        uint256 index = stakes[_Sender];\n        uint256 timestamp = _startTime;\n        if (index == 0) {\n            index = _addStakeholder(_Sender);\n        }\n        initialTimestamp = _startTime;\n        timePeriod = initialTimestamp.add(_timePeriodInSeconds);\n        stakeholders[index].address_stakes.push(\n            Stake(\n                payable(_Sender),\n                _amount,\n                timestamp,\n                _rewardPerHour,\n                timePeriod,\n                0\n            )\n        );\n        emit Staked(\n            _Sender,\n            _amount,\n            index,\n            timestamp,\n            _rewardPerHour,\n            timePeriod\n        );\n    }\n\n    function calculateStakeReward(Stake memory _current_stake)\n        private\n        view\n        returns (uint256)\n    {\n        return\n            (\n                ((block.timestamp.sub(_current_stake.since)).div(1 hours))\n                    .mul(_current_stake.amount)\n                    .mul(_current_stake.rewardPerHour)\n            ).div(1000000);\n    }\n\n    function _withdrawStake(uint256 amount, uint256 index)\n        internal\n        returns (uint256)\n    {\n        uint256 user_index = stakes[msg.sender];\n        require(user_index > 0, \"Claim: Address not registered in contract.\");\n        require(\n            index <= maxPositions - 1,\n            \"Claim: Index out of range for Max Open Positions\"\n        );\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\n            index\n        ];\n        require(\n            current_stake.amount > 0,\n            \"Claim: No active positions for this address.\"\n        );\n        uint256 reward = calculateStakeReward(current_stake);\n        require(reward > 0, \"Claim: Claim not ready yet.\");\n        uint256 claimable = current_stake.amount.add(reward);\n        require(\n            amount <= claimable,\n            \"Claim: Claim amount is higher than total claimable.\"\n        );\n        require(\n            address(this).balance > amount,\n            \"Claim: Not enough balance in Contract\"\n        );\n        require(\n            block.timestamp >= current_stake.timePeriod,\n            \"Claim: Not matured yet.\"\n        );\n        uint256 _current_stake_amount = claimable.sub(amount);\n        if (_current_stake_amount < MinStakeValueToClosePosition) {\n            delete stakeholders[user_index].address_stakes[index];\n            stakeholders[user_index].address_stakes[index] = stakeholders[\n                user_index\n            ].address_stakes[\n                    stakeholders[user_index].address_stakes.length - 1\n                ];\n            stakeholders[user_index].address_stakes.pop();\n        } else {\n            stakeholders[user_index]\n                .address_stakes[index]\n                .amount = _current_stake_amount;\n            stakeholders[user_index].address_stakes[index].since = block\n                .timestamp;\n        }\n        if (ClaimWithinContract == true) {\n            payable(msg.sender).transfer(amount);\n            amount = 0;\n        }\n        emit Withdrawn(msg.sender, amount, block.timestamp);\n        return amount;\n    }\n\n    function hasStake(address _staker, uint256 index)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            index <= maxPositions - 1,\n            \"Stake: Index out of range for Max Open Positions\"\n        );\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        require(\n            summary.stakes.length > 0,\n            \"Stake: No active positions for this address.\"\n        );\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\n            uint256 availableReward = calculateStakeReward(summary.stakes[s]);\n            summary.stakes[s].reward = availableReward;\n        }\n        return (\n            summary.stakes[index].user,\n            summary.stakes[index].amount,\n            summary.stakes[index].since,\n            summary.stakes[index].rewardPerHour,\n            summary.stakes[index].timePeriod,\n            summary.stakes[index].reward\n        );\n    }\n\n    function canStake(address _staker) private view returns (bool result) {\n        StakingSummary memory summary = StakingSummary(\n            stakeholders[stakes[_staker]].address_stakes\n        );\n        if (summary.stakes.length >= maxPositions) {\n            return false;\n        }\n        return true;\n    }\n\n    function setMaxPositions(uint256 _maxPositions) external onlyRole(ADMIN) {\n        maxPositions = _maxPositions;\n    }\n\n    function getMaxPositions() external view returns (uint256) {\n        return maxPositions;\n    }\n\n    //@notice: co-exists with minStakeValue\n    function setMinStakeValueToClosePosition(\n        uint256 _MinStakeValueToClosePosition\n    ) external onlyRole(ADMIN) {\n        MinStakeValueToClosePosition = _MinStakeValueToClosePosition;\n    }\n\n    function getMinStakeValueToClosePosition() external view returns (uint256) {\n        return MinStakeValueToClosePosition;\n    }\n\n    function setStakingAccount(address _StakingAccount)\n        external\n        onlyRole(ADMIN)\n    {\n        StakingAccount = _StakingAccount;\n    }\n\n    function setClaimWithinContract(bool _ClaimWithinContract)\n        external\n        onlyRole(ADMIN)\n    {\n        ClaimWithinContract = _ClaimWithinContract;\n    }\n\n    function setMoveFundsUponReceipt(bool _MoveFundsUponReceipt)\n        external\n        onlyRole(ADMIN)\n    {\n        MoveFundsUponReceipt = _MoveFundsUponReceipt;\n    }\n\n    function getMoveFundsUponReceipt() external view returns (bool) {\n        return MoveFundsUponReceipt;\n    }\n\n    function setMovePercentageBasisNumber(uint256 _MovePercentageBasisNumber)\n        external\n        onlyRole(ADMIN)\n    {\n        MovePercentageBasisNumber = _MovePercentageBasisNumber;\n    }\n\n    function getMovePercentageBasisNumber() external view returns (uint256) {\n        return MovePercentageBasisNumber;\n    }\n\n    function setMovePercentageOfFundsUponReceipt(\n        bool _MovePercentageOfFundsUponReceipt\n    ) external onlyRole(ADMIN) {\n        MovePercentageOfFundsUponReceipt = _MovePercentageOfFundsUponReceipt;\n    }\n\n    function getMovePercentageOfFundsUponReceipt()\n        external\n        view\n        returns (bool)\n    {\n        return MovePercentageOfFundsUponReceipt;\n    }\n\n    modifier onlyRole(bytes32 _role) {\n        require(roles[_role][msg.sender], \"Role: Not authorized.\");\n        _;\n    }\n\n    function _grantRole(bytes32 _role, address _account) internal {\n        roles[_role][_account] = true;\n        emit GrantRole(_role, _account);\n    }\n\n    function grantRole(bytes32 _role, address _account)\n        external\n        onlyRole(ADMIN)\n    {\n        _grantRole(_role, _account);\n    }\n\n    function _revokeRole(bytes32 _role, address _account) internal {\n        roles[_role][_account] = false;\n        emit RevokeRole(_role, _account);\n    }\n\n    function revokeRole(bytes32 _role, address _account)\n        external\n        onlyRole(ADMIN)\n    {\n        _revokeRole(_role, _account);\n    }\n}\n"
27     },
28     "contracts/IClaim.sol": {
29       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface IClaim {\n    function initClaim(address _payee, uint256 _amount) external payable;\n}\n"
30     },
31     "contracts/NFTContractFunctions.sol": {
32       "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\ninterface NFTContractFunctions {\n    function balanceOf(address owner) external view returns (uint256);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    function approve(address to, uint256 tokenId) external;\n}\n"
33     }
34   },
35   "settings": {
36     "optimizer": {
37       "enabled": true,
38       "runs": 20000
39     },
40     "outputSelection": {
41       "*": {
42         "*": [
43           "evm.bytecode",
44           "evm.deployedBytecode",
45           "devdoc",
46           "userdoc",
47           "metadata",
48           "abi"
49         ]
50       }
51     },
52     "libraries": {}
53   }
54 }}