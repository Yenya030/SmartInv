1 {{
2   "language": "Solidity",
3   "sources": {
4     "contracts/Compound.sol": {
5       "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// compound once a day\ncontract Compound is Ownable {\n    /* ========== STATE VARIABLES ========== */\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user\n        uint256 stakeTime; // time of user deposit\n        uint256 fee;\n        uint256 excess;\n    }\n\n    uint256 public constant MINIMUM_STAKE = 1000 ether;\n    uint256 public constant LOCK_PERIOD = 30 days;\n\n    uint256 public totalStaked; // total amount of tokens staked\n    uint256 public totalShares;\n    uint256 public rewardRate; // token rewards per second\n    uint256 public beginDate; // start date of rewards\n    uint256 public endDate; // end date of rewards\n    uint256 public lastUpdateTime;\n    uint256 public feePerShare;\n    uint256 public shareWorth;\n\n    IERC20 public stakedToken; // token allowed to be staked\n\n    mapping(address => uint256) public fees;\n    mapping(address => UserInfo[]) public userInfo;\n\n    /* ========== EVENTS ========== */\n\n    event Deposit(\n        address indexed sender,\n        uint256 amount,\n        uint256 shares,\n        uint256 lastDepositedTime\n    );\n\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\n    event Staked(address indexed user, uint256 amount);\n    event Claimed(address indexed user, uint256 amount);\n    event FeeDistributed(\n        uint256 block,\n        uint256 amount,\n        uint256 totalSharesAtEvent\n    );\n    event Unstaked(address indexed user, uint256 amount, uint256 index);\n    event RewardAdded(uint256 amount, uint256 rewardRateIncrease);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        IERC20 _stakedToken,\n        uint256 _beginDate,\n        uint256 _endDate\n    ) {\n        stakedToken = _stakedToken;\n        lastUpdateTime = _beginDate;\n        beginDate = _beginDate;\n        endDate = _endDate;\n        shareWorth = 1 ether;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    function claim() external started updateShareWorth {\n        uint256 reward;\n\n        reward += calculateFees(msg.sender);\n        reward += fees[msg.sender];\n\n        if (reward > 0) {\n            fees[msg.sender] = 0;\n            stakedToken.transfer(msg.sender, reward);\n            emit Claimed(msg.sender, reward);\n        }\n    }\n\n    function deposit(uint256 amount) external started updateShareWorth {\n        require(amount >= MINIMUM_STAKE, \"Stake too small\");\n        require(amount >= shareWorth, \"Stake smaller than share worth\");\n\n        userInfo[msg.sender].push(\n            UserInfo(\n                amount / shareWorth,\n                block.timestamp,\n                feePerShare,\n                amount - ((amount / shareWorth) * shareWorth)\n            )\n        );\n\n        totalShares += (amount) / shareWorth;\n        totalStaked += ((amount / shareWorth) * shareWorth);\n        stakedToken.transferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, amount, amount / shareWorth, block.timestamp);\n    }\n\n    function withdrawAll() external started updateShareWorth {\n        uint256 _totalShares;\n        uint256 _excess;\n\n        for (uint256 i = 0; i < userInfo[msg.sender].length; i++) {\n            if (\n                userInfo[msg.sender][i].stakeTime + LOCK_PERIOD <=\n                block.timestamp &&\n                userInfo[msg.sender][i].shares > 0\n            ) {\n                uint256 _shares = userInfo[msg.sender][i].shares;\n                _totalShares += _shares;\n                _excess += userInfo[msg.sender][i].excess;\n                userInfo[msg.sender][i].shares -= _shares;\n                fees[msg.sender] += ((_shares *\n                    (feePerShare - userInfo[msg.sender][i].fee)) / 1 ether);\n            }\n        }\n\n        uint256 feesReward = fees[msg.sender];\n\n        if (feesReward > 0 && _totalShares > 0) {\n            fees[msg.sender] = 0;\n            emit Claimed(msg.sender, feesReward);\n        }\n\n        if (_totalShares > 0) {\n            totalShares -= _totalShares;\n            totalStaked -= _totalShares * shareWorth;\n            uint256 sendingAmount = _totalShares *\n                shareWorth +\n                _excess +\n                feesReward;\n\n            stakedToken.transfer(msg.sender, sendingAmount);\n            emit Withdraw(msg.sender, sendingAmount, _totalShares);\n        }\n    }\n\n    function withdraw(uint256 index) external started updateShareWorth {\n        require(\n            userInfo[msg.sender][index].stakeTime + LOCK_PERIOD <=\n                block.timestamp\n        );\n        require(userInfo[msg.sender][index].shares > 0);\n        uint256 _shares = userInfo[msg.sender][index].shares;\n        userInfo[msg.sender][index].shares -= _shares;\n        fees[msg.sender] += ((_shares *\n            (feePerShare - userInfo[msg.sender][index].fee)) / 1 ether);\n\n        uint256 feesReward = fees[msg.sender];\n\n        if (feesReward > 0) {\n            fees[msg.sender] = 0;\n            emit Claimed(msg.sender, feesReward);\n        }\n\n        totalShares -= _shares;\n        totalStaked -= _shares * shareWorth;\n        uint256 sendingAmount = _shares *\n            shareWorth +\n            userInfo[msg.sender][index].excess +\n            feesReward;\n        stakedToken.transfer(msg.sender, sendingAmount);\n        emit Withdraw(msg.sender, sendingAmount, _shares);\n    }\n\n    function calculateFees(address user) internal returns (uint256) {\n        uint256 _fees;\n\n        for (uint256 i = 0; i < userInfo[user].length; i++) {\n            _fees += ((userInfo[user][i].shares *\n                (feePerShare - userInfo[user][i].fee)) / 1 ether);\n\n            userInfo[user][i].fee = feePerShare;\n        }\n\n        return _fees;\n    }\n\n    function addReward(uint256 amount) external updateShareWorth {\n        require(amount > 0, \"Cannot add 0 reward\");\n\n        uint256 time = (endDate - firstTimeRewardApplicable());\n        rewardRate += (amount) / time;\n\n        stakedToken.transferFrom(\n            msg.sender,\n            address(this),\n            (amount / time) * time\n        );\n\n        emit RewardAdded((amount / time) * time, (amount) / time);\n    }\n\n    function feeDistribution(uint256 amount) external {\n        require(amount > 0, \"Cannot distribute 0 fee\");\n        require(totalStaked > 0, \"Noone to distribute fee to\");\n\n        feePerShare += (amount * 1 ether) / (totalShares);\n        uint256 result = (((amount * 1 ether) / (totalShares)) * totalShares) /\n            1 ether;\n        stakedToken.transferFrom(msg.sender, address(this), result);\n\n        emit FeeDistributed(block.timestamp, result, totalShares);\n    }\n\n    /* ========== VIEWS ========== */\n\n    function currentFees(address user) public view returns (uint256) {\n        uint256 _fees;\n\n        for (uint256 i = 0; i < userInfo[user].length; i++) {\n            _fees += ((userInfo[user][i].shares *\n                (feePerShare - userInfo[user][i].fee)) / 1 ether);\n        }\n\n        return _fees;\n    }\n\n    function currentAmount(address user) public view returns (uint256) {\n        uint256 amount;\n\n        for (uint256 i = 0; i < userInfo[user].length; i++) {\n            amount += userInfo[user][i].shares;\n        }\n\n        return amount;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < endDate ? block.timestamp : endDate;\n    }\n\n    function firstTimeRewardApplicable() public view returns (uint256) {\n        return block.timestamp < beginDate ? beginDate : block.timestamp;\n    }\n\n    function currentShareWorth() public view returns (uint256) {\n        uint256 newShareWorth = shareWorth;\n        uint256 newTotalStaked = totalStaked;\n        if (newTotalStaked > 0) {\n            for (\n                uint256 i = 0;\n                i < (lastTimeRewardApplicable() - lastUpdateTime) / 1 days;\n                i++\n            ) {\n                uint256 placeHolder = newShareWorth;\n                newShareWorth +=\n                    (newShareWorth * 1 days * rewardRate) /\n                    newTotalStaked;\n                newTotalStaked += totalShares * (newShareWorth - placeHolder);\n            }\n        }\n        return newShareWorth;\n    }\n\n    function currentWithdrawalPossible(address user)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 _totalShares;\n        uint256 _excess;\n        uint256 _feePayout;\n        for (uint256 i = 0; i < userInfo[user].length; i++) {\n            if (\n                userInfo[user][i].stakeTime + LOCK_PERIOD <= block.timestamp &&\n                userInfo[user][i].shares > 0\n            ) {\n                uint256 _shares = userInfo[user][i].shares;\n                _totalShares += _shares;\n                _excess += userInfo[user][i].excess;\n                _feePayout += ((_shares *\n                    (feePerShare - userInfo[user][i].fee)) / 1 ether);\n            }\n        }\n\n        if (_totalShares > 0) {\n            return _totalShares * shareWorth + _excess + _feePayout;\n        } else {\n            return 0;\n        }\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateShareWorth() {\n        if (totalStaked > 0) {\n            for (\n                uint256 i = 0;\n                i < (lastTimeRewardApplicable() - lastUpdateTime) / 1 days;\n                i++\n            ) {\n                uint256 placeHolder = shareWorth;\n                shareWorth += (shareWorth * 1 days * rewardRate) / totalStaked;\n                totalStaked += totalShares * (shareWorth - placeHolder);\n            }\n            lastUpdateTime = (lastTimeRewardApplicable() / 1 days) * 1 days;\n        }\n        _;\n    }\n\n    modifier started() {\n        require(block.timestamp >= beginDate, \"Stake period hasn't started\");\n        _;\n    }\n}\n"
6     },
7     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
9     },
10     "@openzeppelin/contracts/access/Ownable.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/utils/Context.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
15     }
16   },
17   "settings": {
18     "optimizer": {
19       "enabled": false,
20       "runs": 200
21     },
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     },
34     "libraries": {}
35   }
36 }}