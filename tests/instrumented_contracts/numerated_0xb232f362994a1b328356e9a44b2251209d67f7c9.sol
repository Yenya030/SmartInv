1 {{
2   "language": "Solidity",
3   "sources": {
4     "openzeppelin-solidity/contracts/access/Ownable.sol": {
5       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
6     },
7     "openzeppelin-solidity/contracts/utils/Context.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
9     },
10     "/contracts/MLTrainMeta.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n//------------------------------------------------------------------------------\n// geneticchain.io - NextGen Generative NFT Platform\n//------------------------------------------------------------------------------\n//    _______                   __   __        ______ __          __\n//   |     __|-----.-----.-----|  |_|__|----. |      |  |--.---.-|__|-----.\n//   |    |  |  -__|     |  -__|   _|  |  __| |   ---|     |  _  |  |     |\n//   |_______|_____|__|__|_____|____|__|____| |______|__|__|___._|__|__|__|\n//\n//------------------------------------------------------------------------------\n// Genetic Chain: Member Lounde: Train Meta\n//------------------------------------------------------------------------------\n// Author: papaver (@tronicdreams)\n//------------------------------------------------------------------------------\n\nimport \"openzeppelin-solidity/contracts/access/Ownable.sol\";\n\n//------------------------------------------------------------------------------\n// interfaces\n//------------------------------------------------------------------------------\n\n/**\n * Lounge interface.\n */\ninterface ILounge {\n\n  function mint(address to, uint256 id, uint256 amount)\n    external;\n\n  function burn(address to, uint256 id, uint256 amount)\n    external;\n\n  function balanceOf(address account, uint256 id)\n    external view returns (uint256);\n\n  function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    external view returns (uint256[] memory);\n\n  function uri(uint256 tokenId)\n    external view returns (string memory);\n\n}\n\n//------------------------------------------------------------------------------\n// Member Lounge: Train Meta\n//------------------------------------------------------------------------------\n\n/**\n * @title Member Lounge: Train Meta\n */\ncontract MLTrainMeta is Ownable\n{\n\n    //-------------------------------------------------------------------------\n    // events\n    //-------------------------------------------------------------------------\n\n    /**\n     * Emited when train hop attempted.\n     */\n    event TrainHop(address indexed owner, uint256 current, uint256 next, bool success);\n\n    //-------------------------------------------------------------------------\n    // fields\n    //-------------------------------------------------------------------------\n\n    // member lounge contract\n    ILounge private immutable _lounge;\n\n    // train tokens\n    uint256[] private _trains;\n\n    //-------------------------------------------------------------------------\n    // modifiers\n    //-------------------------------------------------------------------------\n\n    modifier validTokenId(uint256 tokenId) {\n        require(bytes(_lounge.uri(tokenId)).length != 0, \"invalid token\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n\n    modifier hasBalance(address owner, uint256 trainIdx) {\n        require(_lounge.balanceOf(owner, _trains[trainIdx]) > 0, \"invalid balance\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n\n    modifier canHop(uint256 trainIdx) {\n        require(trainIdx + 1 < _trains.length , \"invalid hop\");\n        _;\n    }\n\n    //-------------------------------------------------------------------------\n    // ctor\n    //-------------------------------------------------------------------------\n\n    constructor(address lounge, uint256[] memory trains)\n    {\n        _lounge = ILounge(lounge);\n        _trains = trains;\n    }\n\n    //-------------------------------------------------------------------------\n    // admin\n    //-------------------------------------------------------------------------\n\n    function pushTrain(uint tokenId)\n        public\n        onlyOwner\n        validTokenId(tokenId)\n    {\n        _trains.push(tokenId);\n    }\n\n    //-------------------------------------------------------------------------\n\n    function popTrain()\n        public\n        onlyOwner\n    {\n        _trains.pop();\n    }\n\n    //-------------------------------------------------------------------------\n    // helper functions\n    //-------------------------------------------------------------------------\n\n    /**\n     * @dev Create a Pseudo-random number using block info.\n     */\n    function _random(uint256 tokenId)\n        internal\n        view\n        returns (uint256)\n    {\n      return uint256(keccak256(\n          abi.encodePacked(\n              address(this),\n              block.difficulty,\n              blockhash(block.number),\n              block.timestamp,\n              msg.sender,\n              tokenId)));\n    }\n\n    //-------------------------------------------------------------------------\n    // methods\n    //-------------------------------------------------------------------------\n\n    /**\n     * @dev Return list of passes staked by staker.\n     */\n    function getTrains()\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return _trains;\n    }\n\n    //-------------------------------------------------------------------------\n\n    /**\n     * @dev Returns users train balances.\n     */\n    function balances(address user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        address[] memory addresses = new address[](_trains.length);\n        for (uint256 i = 0; i < addresses.length; ++i) {\n            addresses[i] = user;\n        }\n        return _lounge.balanceOfBatch(addresses, _trains);\n    }\n\n    //-------------------------------------------------------------------------\n\n    /**\n     * Hop to next tain, 50% chance of making it.\n     */\n    function hopTrain(uint256 trainIdx)\n        external\n        hasBalance(msg.sender, trainIdx)\n        canHop(trainIdx)\n    {\n        uint256 current = _trains[trainIdx];\n        uint256 next    = _trains[trainIdx + 1];\n\n        // current always gets burned\n        _lounge.burn(msg.sender, current, 1);\n\n        // 50% chance they make it to the next train\n        uint256 random = _random(current);\n        bool madeIt    = random & 0x1 == 0x1;\n        if (madeIt) {\n            _lounge.mint(msg.sender, next, 1);\n        }\n\n        // track hops\n        emit TrainHop(msg.sender, current, next, madeIt);\n    }\n\n}\n"
12     }
13   },
14   "settings": {
15     "remappings": [],
16     "optimizer": {
17       "enabled": true,
18       "runs": 50
19     },
20     "evmVersion": "london",
21     "libraries": {},
22     "outputSelection": {
23       "*": {
24         "*": [
25           "evm.bytecode",
26           "evm.deployedBytecode",
27           "devdoc",
28           "userdoc",
29           "metadata",
30           "abi"
31         ]
32       }
33     }
34   }
35 }}