1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "london",
5     "libraries": {},
6     "metadata": {
7       "bytecodeHash": "ipfs",
8       "useLiteralContent": true
9     },
10     "optimizer": {
11       "details": {
12         "constantOptimizer": true,
13         "cse": true,
14         "deduplicate": true,
15         "inliner": true,
16         "jumpdestRemover": true,
17         "orderLiterals": true,
18         "peephole": true,
19         "yul": false
20       },
21       "runs": 200
22     },
23     "remappings": [],
24     "outputSelection": {
25       "*": {
26         "*": [
27           "evm.bytecode",
28           "evm.deployedBytecode",
29           "devdoc",
30           "userdoc",
31           "metadata",
32           "abi"
33         ]
34       }
35     }
36   },
37   "sources": {
38     "@openzeppelin/contracts/access/Ownable.sol": {
39       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
40     },
41     "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
42       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
43     },
44     "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
45       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
46     },
47     "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
48       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
49     },
50     "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
51       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
52     },
53     "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
54       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
55     },
56     "@openzeppelin/contracts/utils/Address.sol": {
57       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
58     },
59     "@openzeppelin/contracts/utils/Context.sol": {
60       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
61     },
62     "@openzeppelin/contracts/utils/Counters.sol": {
63       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
64     },
65     "@openzeppelin/contracts/utils/Strings.sol": {
66       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
67     },
68     "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
69       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
70     },
71     "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
72       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
73     },
74     "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
75       "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
76     },
77     "contracts/Scribbles.sol": {
78       "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n// import \"hardhat/console.sol\";\n\ninterface IOracle{\n    function request() external returns (uint64 key);\n    function getRandom(uint64 id) external view returns(uint256 rand);\n}\n\ncontract Scribbles is Ownable, ReentrancyGuard, ERC721 {\n\n    using Strings for uint;\n    using Counters for Counters.Counter;\n    using ECDSA for bytes32;\n\n    Counters.Counter private _tokenId;\n    address private signer; // signer to make signature\n    string public notRevealedUri;\n\n    // SALES\n    address public constant WITHDRAW_ADDRESS = 0x876F13D830dBB25017da552256d56c779bD5C58e;\n    bool public presaleActive = false;\n    bool public publicSaleActive = false;\n    bool public paused = false;\n\n    uint256 public cost = 0.065 ether;\n    uint256 public maxSupply = 5_898;\n    uint256 public maxMintAmount = 2;\n    uint256 public maxPerWallet = 4;\n    bool public revealed = false;\n\n    mapping(address => uint256) public whitelistMinted; // address => amount\n    mapping(address => uint256) public publicMinted; // address => amount\n\n    // list of probabilities for each trait type\n    // 0-5: [Wizard, Rainbow, Plant (bark colors), Water, Fire, Ice]\n    //      0-3: [clothes, expression, head, background]\n    mapping(uint8 => uint8[][4]) public rarities;\n    mapping(uint8 => uint8[][4]) public aliases;\n    uint8[] public raritiesFaction;\n    uint8[] public aliasesFaction;\n    // mapping from hashed(tokenTrait) to the tokenId it's associated with\n    // used to ensure there are no duplicates\n    mapping(uint256 => uint256) public existingCombinations;\n\n    IOracle public oracle;\n    bytes32 internal entropySauce;\n\n    mapping(uint256 => uint256) public mintBlocks;\n    mapping(uint256 => Scribble) internal scribbles;\n\n    // Flag for allowing or not allowing locking\n    bool public lockingOpen = false;\n    // tokenId to locking start time (0 = not locking).\n    mapping(uint256 => uint256) private lockingStarted;\n    // Cumulative per-token locking, excluding the current period.\n    mapping(uint256 => uint256) private lockingTotal;\n    uint256 public totalLockedCount;\n\n    /** DATA STRUCTURE */\n    struct Scribble {\n        uint8 base;\n        uint8 clothes;\n        uint8 expression;\n        uint8 head;\n        uint8 background;\n    }\n\n    /** EVENTS */\n    event BaseURISet(string baseURI);\n    event OracleChanged(IOracle oracle);\n    event SignerChanged(address signer);\n    event PublicSaleStatusChanged(bool isActive);\n    event PresaleStatusChanged(bool isActive);\n    event NotRevealedUriChanged(string uri);\n    event MaxMintAmountChanged(uint256 amount);\n    event MaxPerWalletChanged(uint256 amount);\n    event CostChanged(uint256 cost);\n    event Paused(bool isPaused);\n    event Revealed();\n\n    // Emitted when a token begins locking.\n    event Locked(uint256 indexed tokenId);\n    // Emitted when a token stops locking; either through standard means or\n    event UnLocked(uint256 indexed tokenId);\n    // Emitted when a token is expelled from the locking.\n    event Expelled(uint256 indexed tokenId);\n\n\n    constructor(string memory _initNotRevealedUri) ERC721(\"Scribbles Mint Pass\", \"SCRBBLS\") {\n        setNotRevealedURI(_initNotRevealedUri);\n        signer = msg.sender;\n\n        // We'll use the last caller hash to add entropy to next caller\n        entropySauce = keccak256(abi.encodePacked(msg.sender, block.timestamp, block.coinbase));\n\n        raritySetup();\n    }\n\n    function raritySetup() internal {\n        // I know this looks weird but it saves users gas by making lookup O(1)\n        // A.J. Walker's Alias Algorithm\n        // Faction: [0.18, 0.1, 0.18, 0.18, 0.18, 0.18]\n        raritiesFaction = [173, 153, 193, 214, 234, 254];\n        aliasesFaction = [2, 0, 3, 4, 5, 5];\n        // Wizard\n        //      clothes: [0.18, 0.2, 0.14, 0.15, 0.08, 0.25]\n        rarities[0][0] =[234, 147, 214, 229, 122, 255];\n        aliases[0][0] = [5, 5, 0, 1, 1, 5];\n        //      expression: [0.25, 0.09, 0.21, 0.19, 0.08, 0.18]\n        rarities[0][1] = [132, 137, 198, 234, 122, 255];\n        aliases[0][1] = [2, 0, 3, 5, 0, 5];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.2]\n        rarities[0][2] = [229, 234, 198, 244, 234, 255];\n        aliases[0][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.2, 0.18, 0.25, 0.08, 0.14]\n        rarities[0][3] = [229, 147, 234, 255, 122, 214];\n        aliases[0][3] = [1, 3, 3, 5, 1, 2];\n\n        // Rainbow\n        //      clothes: [0.25, 0.18, 0.2, 0.14, 0.15, 0.08]\n        rarities[1][0] =[183, 204, 255, 214, 229, 122];\n        aliases[1][0] = [1, 2, 5, 0, 0, 0];\n        //      expression: [0.2, 0.2, 0.18, 0.16, 0.12, 0.14]\n        rarities[1][1] = [224, 249, 244, 244, 183, 198];\n        aliases[1][1] = [2, 5, 5, 0, 0, 1];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.20]\n        rarities[1][2] = [229, 234, 198, 244, 234, 255];\n        aliases[1][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.16, 0.14, 0.16, 0.14, 0.25]\n        rarities[1][3] = [229, 244, 214, 244, 214, 255];\n        aliases[1][3] = [5, 5, 5, 5, 5, 5];\n\n        // Plant (bark colors)\n        //      clothes: [0.05, 0.19, 0.19, 0.19, 0.19, 0.19]\n        rarities[2][0] = [76, 112, 147, 183, 219, 255];\n        aliases[2][0] = [1, 2, 3, 4, 5, 5];\n        //      expression: [0.2, 0.2, 0.18, 0.16, 0.12, 0.14]\n        rarities[2][1] = [224, 249, 244, 244, 183, 198];\n        aliases[2][1] = [2, 5, 5, 0, 0, 1];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.2]\n        rarities[2][2] = [229, 234, 198, 244, 234, 255];\n        aliases[2][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.2, 0.16, 0.25, 0.14, 0.1]\n        rarities[2][3] = [229, 229, 244, 255, 214, 153];\n        aliases[2][3] = [1, 3, 1, 5, 1, 3];\n\n        // Water\n        //      clothes: [0.25, 0.2, 0.14, 0.12, 0.19, 0.1]\n        rarities[3][0] = [168, 219, 214, 183, 239, 153];\n        aliases[3][0] = [1, 4, 0, 0, 5, 0];\n        //      expression: [0.2, 0.2, 0.18, 0.16, 0.12, 0.14]\n        rarities[3][1] = [224, 249, 244, 244, 183, 198];\n        aliases[3][1] = [2, 5, 5, 0, 0, 1];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.2]\n        rarities[3][2] = [229, 234, 198, 244, 234, 255];\n        aliases[3][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.2, 0.25, 0.18, 0.1, 0.12]\n        rarities[3][3] = [229, 178, 234, 255, 153, 183];\n        aliases[3][3] = [1, 2, 3, 5, 1, 2];\n\n        // Fire\n        //      clothes: [0.25, 0.18, 0.15, 0.14, 0.2, 0.08]\n        rarities[4][0] = [183, 204, 229, 214, 255, 122];\n        aliases[4][0] = [1, 4, 0, 0, 5, 0];\n        //      expression: [0.2, 0.2, 0.18, 0.16, 0.12, 0.14]\n        rarities[4][1] = [224, 249, 244, 244, 183, 198];\n        aliases[4][1] = [2, 5, 5, 0, 0, 1];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.2]\n        rarities[4][2] = [229, 234, 198, 244, 234, 255];\n        aliases[4][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.25, 0.2, 0.15, 0.09, 0.16]\n        rarities[4][3] = [229, 214, 254, 229, 137, 244];\n        aliases[4][3] = [1, 2, 5, 1, 1, 2];\n\n        // Ice\n        //      clothes: [0.25, 0.18, 0.2, 0.14, 0.15, 0.08]\n        rarities[5][0] = [183, 204, 255, 214, 229, 122];\n        aliases[5][0] = [1, 2, 5, 0, 0, 0];\n        //      expression: [0.2, 0.2, 0.18, 0.16, 0.12, 0.14]\n        rarities[5][1] = [224, 249, 244, 244, 183, 198];\n        aliases[5][1] = [2, 5, 5, 0, 0, 1];\n        //      head: [0.15, 0.17, 0.13, 0.16, 0.19, 0.2]\n        rarities[5][2] = [229, 234, 198, 244, 234, 255];\n        aliases[5][2] = [1, 5, 4, 5, 5, 5];\n        //      background: [0.15, 0.2, 0.25, 0.18, 0.1, 0.12]\n        rarities[5][3] = [229, 178, 234, 255, 153, 183];\n        aliases[5][3] = [1, 2, 3, 5, 1, 2];\n    }\n\n    // MODIFIERS\n    modifier notPaused {\n         require(!paused, \"Contract paused\");\n         _;\n    }\n\n    modifier noCheaters() {\n        uint256 size = 0;\n        address acc = msg.sender;\n        assembly {\n            size := extcodesize(acc)\n        }\n\n        require(\n            // (owner() == msg.sender) || (msg.sender == tx.origin && size == 0),\n            (owner() == msg.sender) || (size == 0),\n            \"you're trying to cheat!\"\n        );\n        _;\n\n        // We'll use the last caller hash to add entropy to next caller\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase, entropySauce));\n    }\n\n    modifier validateCostMintAmount(uint256 _mintAmount) {\n        require(msg.value >= cost * _mintAmount, \"Insufficient funds\");\n        require(_mintAmount > 0, \"Need to mint at least 1 NFT\");\n        require(_mintAmount + _tokenId.current() <= maxSupply, \"Max supply exceeded\");\n        _;\n    }\n\n    // Public Methods\n\n    function mint1(uint256 _mintAmount, bytes memory _signature) public payable notPaused nonReentrant noCheaters validateCostMintAmount(_mintAmount) {\n        require(presaleActive == true, \"Presale has not started yet\");\n        require(_isValidSignature(msg.sender, _signature) == true, \"Not whitelisted\");\n        require(_mintAmount + whitelistMinted[msg.sender] <= maxMintAmount, \"Max mint amount exceeded\");\n\n        whitelistMinted[msg.sender] += _mintAmount;\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _mintScribble(msg.sender);\n        }\n    }\n\n    function mintPublic(uint256 _mintAmount) public payable notPaused nonReentrant noCheaters validateCostMintAmount(_mintAmount) {\n        require(publicSaleActive == true, \"Public sale has not started yet\");\n        require(_mintAmount + publicMinted[msg.sender] <= maxPerWallet, \"Max mint per wallet exceeded\");\n\n        publicMinted[msg.sender] += _mintAmount;\n        for (uint256 i = 1; i <= _mintAmount; i++) {\n            _mintScribble(msg.sender);\n        }\n    }\n\n    function mintReserve(uint _mintAmount, address _to) external notPaused onlyOwner noCheaters {\n        require(_mintAmount + _tokenId.current() <= maxSupply, \"Max supply exceeded\");\n        for (uint i =0; i < _mintAmount; i++) {\n            _mintScribble(_to);\n        }\n    }\n\n    // PUBLIC VIEWS\n\n    function currentTokenID() external view returns(uint){\n        return _tokenId.current();\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenId.current();\n    }\n\n    function getSigner() public view returns (address) {\n        return signer;\n    }\n\n    /**\n    @dev Don't use this method in other calls and contracts.\n     */\n    function walletOfOwner(address _owner) public view returns (uint256[] memory) {\n        uint256 ownerTokenCount = balanceOf(_owner);\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\n        uint256 id_ = 0;\n        for (uint256 i = 1; i <= _tokenId.current(); i++) {\n            if(ownerOf(i) == _owner) tokenIds[id_++] = i;\n        }\n        return tokenIds;\n    }\n\n    // Returns the length of time, in seconds, that the token has locked.\n    function lockingPeriod(uint256 tokenId) external view returns (bool locking, uint256 current, uint256 total){\n        uint256 start = lockingStarted[tokenId];\n        if (start != 0) {\n            locking = true;\n            current = block.timestamp - start;\n        }\n        total = current + lockingTotal[tokenId];\n    }\n\n    // Changes the tokens' locking status (what's the plural of status?\n    function toggleLocking(uint256[] calldata tokenIds) external {\n        uint256 n = tokenIds.length;\n        for (uint256 i = 0; i < n; ++i) {\n            toggleLocking(tokenIds[i]);\n        }\n    }\n\n    function toggleLocking(uint256 tokenId) internal {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        uint256 start = lockingStarted[tokenId];\n        if (start == 0) {\n            require(lockingOpen, \"locking closed\");\n            lockingStarted[tokenId] = block.timestamp;\n            totalLockedCount ++;\n            emit Locked(tokenId);\n        } else {\n            lockingTotal[tokenId] += block.timestamp - start;\n            lockingStarted[tokenId] = 0;\n            totalLockedCount --;\n            emit UnLocked(tokenId);\n        }\n    }\n\n    // @notice Admin-only ability to expel a token from the locking.\n    function expelFromLocking(uint256 tokenId) external onlyOwner() {\n        require(lockingStarted[tokenId] != 0, \"Not locked\");\n        lockingTotal[tokenId] += block.timestamp - lockingStarted[tokenId];\n        lockingStarted[tokenId] = 0;\n        totalLockedCount --;\n        emit UnLocked(tokenId);\n        emit Expelled(tokenId);\n    }\n\n    /**\n    @dev MUST only be modified by safeTransferWhileLocking(); if set to 2 then\n    the _beforeTokenTransfer() block while locking is disabled.\n     */\n    uint256 private lockingTransfer = 1;\n\n    /**\n    @notice Transfer a token between addresses while the scribble is minting,\n    thus not resetting the locking period.\n     */\n    function safeTransferWhileLocking(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external {\n        require(ownerOf(tokenId) == _msgSender(), \"Only owner\");\n        lockingTransfer = 2;\n        safeTransferFrom(from, to, tokenId);\n        lockingTransfer = 1;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint tokenId) public view override(ERC721) returns (string memory) {\n        require(_exists(tokenId), \"Cannot query non-existent token\");\n\n        if (!revealed) {\n            return notRevealedUri;\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    function getAttributes(uint256 tokenId) public view returns (Scribble memory) {\n        require(_exists(tokenId), \"Cannot query non-existent token\");\n        require(mintBlocks[tokenId] != block.number, \"Cannot query traits\");\n        return scribbles[tokenId];\n    }\n    \n    /**\n    * initiate random factor\n    */\n    uint64 key;\n    uint256 randomResult;\n    function requestRandomFactor() external onlyOwner {\n        key = oracle.request();\n    }\n\n    function finalizeRandomFactor() external onlyOwner {\n        require(key != 0, \"not requested\");\n        randomResult = oracle.getRandom(key);\n        require(randomResult != 0, \"too soon\");\n        entropySauce = keccak256(abi.encodePacked(msg.sender, block.coinbase, randomResult, entropySauce));\n        randomResult = 0;\n        key = 0;\n    }\n\n    // ONLY OWNER SETTERS\n    function setBaseURI(string calldata baseURI) external onlyOwner {\n        _baseTokenURI = baseURI;\n        emit BaseURISet(baseURI);\n    }\n\n    // Toggles the `lockingOpen` flag.\n    function setLockingOpen(bool open) external onlyOwner {\n        lockingOpen = open;\n    }\n\n    function setOracle(IOracle _oracle) external onlyOwner {\n        oracle = _oracle;\n        emit OracleChanged(_oracle);\n    }\n\n    function reveal() public onlyOwner {\n        revealed = true;\n        emit Revealed();\n    }\n\n    function pause(bool _state) public onlyOwner {\n        paused = _state;\n        emit Paused(_state);\n    }\n\n    function setCost(uint256 _newCost) public onlyOwner {\n        cost = _newCost;\n        emit CostChanged(_newCost);\n    }\n\n    function setMaxMintAmount(uint256 _newMaxMintAmount) public onlyOwner {\n        maxMintAmount = _newMaxMintAmount;\n        emit MaxMintAmountChanged(_newMaxMintAmount);\n    }\n\n    function setMaxPerWallet(uint256 _newMaxPerWallet) public onlyOwner {\n        maxPerWallet = _newMaxPerWallet;\n        emit MaxPerWalletChanged(_newMaxPerWallet);\n    }\n\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\n        notRevealedUri = _notRevealedURI;\n        emit NotRevealedUriChanged(_notRevealedURI);\n    }\n\n    function setPresaleStatus(bool _saleActive) public onlyOwner {\n        presaleActive = _saleActive;\n        emit PresaleStatusChanged(_saleActive);\n    }\n\n    function setPublicSaleStatus(bool _saleActive) public onlyOwner {\n        publicSaleActive = _saleActive;\n        emit PublicSaleStatusChanged(_saleActive);\n    }\n\n    function setSigner(address signer_) public onlyOwner {\n        signer = signer_;\n        emit SignerChanged(signer_);\n    }\n\n    function withdraw(uint256 amount) public payable {\n        require(msg.sender == owner() || msg.sender == WITHDRAW_ADDRESS, \"Only admin or withdrawer can call\");\n        (bool success, ) = payable(WITHDRAW_ADDRESS).call{value: (amount > address(this).balance ? address(this).balance : amount)}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // metadata URI\n    string private _baseTokenURI;\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n    \n    /**\n    @dev Block transfers while locking.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        require(\n            lockingStarted[tokenId] == 0 || lockingTransfer == 2,\n            \"locking\"\n        );\n    }\n\n    // Internal Helper Methods\n\n    function _mintScribble(address to) internal {\n        _tokenId.increment();\n        uint256 id = _tokenId.current();\n        mintBlocks[id] = block.number;\n        uint256 seed = _random(id);\n        generate(id, seed);\n        _mint(to, id);\n    }\n    \n    /**\n    * generates traits for a specific token, checking to make sure it's unique\n    * @param tokenId the id of the token to generate traits for\n    * @param seed a pseudorandom 256 bit number to derive traits from\n    * @return t - a struct of traits for the given token ID\n    */\n    function generate(uint256 tokenId, uint256 seed) internal returns (Scribble memory t) {\n        t = selectTraits(seed);\n        scribbles[tokenId] = t;\n        return t;\n\n        // keep the following code for future use, current version using different seed, so no need for now\n        // if (existingCombinations[structToHash(t)] == 0) {\n        //     scribbles[tokenId] = t;\n        //     existingCombinations[structToHash(t)] = tokenId;\n        //     return t;\n        // }\n        // return generate(tokenId, random(seed));\n    }\n\n    /**\n    * uses A.J. Walker's Alias algorithm for O(1) rarity table lookup\n    * ensuring O(1) instead of O(n) reduces mint cost by more than 50%\n    * probability & alias tables are generated off-chain beforehand\n    * @param seed portion of the 256 bit seed to remove trait correlation\n    * @param traitType the trait type to select a trait for \n    * @return the ID of the randomly selected trait\n    */\n    function selectTrait(uint16 seed, uint8 traitType, uint8 base) internal view returns (uint8) {\n        if(traitType == 0) { // base\n            uint8 trait = uint8(seed) % uint8(raritiesFaction.length);\n            if (seed >> 8 < raritiesFaction[trait]) return trait;\n            return aliasesFaction[trait];\n        } else { // clothes, expression, head, background\n            uint8 rid = traitType - 1;\n            uint8 trait = uint8(seed) % uint8(rarities[base][rid].length);\n            if (seed >> 8 < rarities[base][rid][trait]) return trait;\n            return aliases[base][rid][trait];\n        }\n    }\n\n    /**\n    * selects the species and all of its traits based on the seed value\n    * @param seed a pseudorandom 256 bit number to derive traits from\n    * @return t -  a struct of randomly selected traits\n    */\n    function selectTraits(uint256 seed) internal view returns (Scribble memory t) {    \n        t.base = selectTrait(uint16(seed & 0xFFFF), 0, 0);\n        seed >>= 16;\n        t.clothes = selectTrait(uint16(seed & 0xFFFF), 1, t.base);\n        seed >>= 16;\n        t.expression = selectTrait(uint16(seed & 0xFFFF), 2, t.base);\n        seed >>= 16;\n        t.head = selectTrait(uint16(seed & 0xFFFF), 3, t.base);\n        seed >>= 16;\n        t.background = selectTrait(uint16(seed & 0xFFFF), 4, t.base);\n        seed >>= 16;\n    }\n\n    /**\n    * converts a struct to a 256 bit hash to check for uniqueness\n    * @param s the struct to pack into a hash\n    * @return the 256 bit hash of the struct\n    */\n    function structToHash(Scribble memory s) internal pure returns (uint256) {\n        return uint256(bytes32(\n        abi.encodePacked(\n            s.base,\n            s.clothes,\n            s.expression,\n            s.head,\n            s.background\n        )\n        ));\n    }\n\n    /// @dev Create a bit more of randomness\n    // function _randomize(\n    //     uint256 rand,\n    //     string memory val,\n    //     uint256 spicy\n    // ) internal pure returns (uint256) {\n    //     return uint256(keccak256(abi.encode(rand, val, spicy)));\n    // }\n\n    // function _rand() internal view returns (uint256) {\n    //     return\n    //         uint256(\n    //             keccak256(\n    //                 abi.encodePacked(\n    //                     tx.origin,\n    //                     blockhash(block.number - 1),\n    //                     block.timestamp,\n    //                     entropySauce\n    //                 )\n    //             )\n    //         );\n    // }\n\n    /**\n    * generates a pseudorandom number\n    * @param seed a value ensure different outcomes for different sources in the same block\n    * @return a pseudorandom value\n    */\n    function _random(uint256 seed) internal view returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(\n            // tx.origin,\n            blockhash(block.number - 1),\n            block.timestamp,\n            seed,\n            entropySauce\n        )));\n    }\n\n    function _isValidSignature(address user, bytes memory signature) internal view returns (bool) {\n        bytes32 hash = keccak256(abi.encodePacked(\"whitelist\", user));\n        address signer_ = hash.toEthSignedMessageHash().recover(signature);\n        return signer_ == signer;\n    }\n\n}\n"
79     }
80   }
81 }}