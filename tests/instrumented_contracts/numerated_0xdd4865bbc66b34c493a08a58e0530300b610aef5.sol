1 
2 // File: @daostack/infra/contracts/votingMachines/IntVoteInterface.sol
3 
4 pragma solidity ^0.5.11;
5 
6 interface IntVoteInterface {
7     //When implementing this interface please do not only override function and modifier,
8     //but also to keep the modifiers on the overridden functions.
9     modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}
10     modifier votable(bytes32 _proposalId) {revert(); _;}
11 
12     event NewProposal(
13         bytes32 indexed _proposalId,
14         address indexed _organization,
15         uint256 _numOfChoices,
16         address _proposer,
17         bytes32 _paramsHash
18     );
19 
20     event ExecuteProposal(bytes32 indexed _proposalId,
21         address indexed _organization,
22         uint256 _decision,
23         uint256 _totalReputation
24     );
25 
26     event VoteProposal(
27         bytes32 indexed _proposalId,
28         address indexed _organization,
29         address indexed _voter,
30         uint256 _vote,
31         uint256 _reputation
32     );
33 
34     event CancelProposal(bytes32 indexed _proposalId, address indexed _organization );
35     event CancelVoting(bytes32 indexed _proposalId, address indexed _organization, address indexed _voter);
36 
37     /**
38      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
39      * generated by calculating keccak256 of a incremented counter.
40      * @param _numOfChoices number of voting choices
41      * @param _proposalParameters defines the parameters of the voting machine used for this proposal
42      * @param _proposer address
43      * @param _organization address - if this address is zero the msg.sender will be used as the organization address.
44      * @return proposal's id.
45      */
46     function propose(
47         uint256 _numOfChoices,
48         bytes32 _proposalParameters,
49         address _proposer,
50         address _organization
51         ) external returns(bytes32);
52 
53     function vote(
54         bytes32 _proposalId,
55         uint256 _vote,
56         uint256 _rep,
57         address _voter
58     )
59     external
60     returns(bool);
61 
62     function cancelVote(bytes32 _proposalId) external;
63 
64     function getNumberOfChoices(bytes32 _proposalId) external view returns(uint256);
65 
66     function isVotable(bytes32 _proposalId) external view returns(bool);
67 
68     /**
69      * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
70      * @param _proposalId the ID of the proposal
71      * @param _choice the index in the
72      * @return voted reputation for the given choice
73      */
74     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256);
75 
76     /**
77      * @dev isAbstainAllow returns if the voting machine allow abstain (0)
78      * @return bool true or false
79      */
80     function isAbstainAllow() external pure returns(bool);
81 
82     /**
83      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
84      * @return min - minimum number of choices
85                max - maximum number of choices
86      */
87     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max);
88 }
89 
90 // File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
91 
92 pragma solidity ^0.5.0;
93 
94 /**
95  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
96  * the optional functions; to access them see `ERC20Detailed`.
97  */
98 interface IERC20 {
99     /**
100      * @dev Returns the amount of tokens in existence.
101      */
102     function totalSupply() external view returns (uint256);
103 
104     /**
105      * @dev Returns the amount of tokens owned by `account`.
106      */
107     function balanceOf(address account) external view returns (uint256);
108 
109     /**
110      * @dev Moves `amount` tokens from the caller's account to `recipient`.
111      *
112      * Returns a boolean value indicating whether the operation succeeded.
113      *
114      * Emits a `Transfer` event.
115      */
116     function transfer(address recipient, uint256 amount) external returns (bool);
117 
118     /**
119      * @dev Returns the remaining number of tokens that `spender` will be
120      * allowed to spend on behalf of `owner` through `transferFrom`. This is
121      * zero by default.
122      *
123      * This value changes when `approve` or `transferFrom` are called.
124      */
125     function allowance(address owner, address spender) external view returns (uint256);
126 
127     /**
128      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
129      *
130      * Returns a boolean value indicating whether the operation succeeded.
131      *
132      * > Beware that changing an allowance with this method brings the risk
133      * that someone may use both the old and the new allowance by unfortunate
134      * transaction ordering. One possible solution to mitigate this race
135      * condition is to first reduce the spender's allowance to 0 and set the
136      * desired value afterwards:
137      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
138      *
139      * Emits an `Approval` event.
140      */
141     function approve(address spender, uint256 amount) external returns (bool);
142 
143     /**
144      * @dev Moves `amount` tokens from `sender` to `recipient` using the
145      * allowance mechanism. `amount` is then deducted from the caller's
146      * allowance.
147      *
148      * Returns a boolean value indicating whether the operation succeeded.
149      *
150      * Emits a `Transfer` event.
151      */
152     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
153 
154     /**
155      * @dev Emitted when `value` tokens are moved from one account (`from`) to
156      * another (`to`).
157      *
158      * Note that `value` may be zero.
159      */
160     event Transfer(address indexed from, address indexed to, uint256 value);
161 
162     /**
163      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
164      * a call to `approve`. `value` is the new allowance.
165      */
166     event Approval(address indexed owner, address indexed spender, uint256 value);
167 }
168 
169 // File: @daostack/infra/contracts/votingMachines/VotingMachineCallbacksInterface.sol
170 
171 pragma solidity ^0.5.11;
172 
173 
174 interface VotingMachineCallbacksInterface {
175     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId) external returns(bool);
176     function burnReputation(uint256 _amount, address _owner, bytes32 _proposalId) external returns(bool);
177 
178     function stakingTokenTransfer(IERC20 _stakingToken, address _beneficiary, uint256 _amount, bytes32 _proposalId)
179     external
180     returns(bool);
181 
182     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256);
183     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256);
184     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256);
185 }
186 
187 // File: openzeppelin-solidity/contracts/ownership/Ownable.sol
188 
189 pragma solidity ^0.5.0;
190 
191 /**
192  * @dev Contract module which provides a basic access control mechanism, where
193  * there is an account (an owner) that can be granted exclusive access to
194  * specific functions.
195  *
196  * This module is used through inheritance. It will make available the modifier
197  * `onlyOwner`, which can be aplied to your functions to restrict their use to
198  * the owner.
199  */
200 contract Ownable {
201     address private _owner;
202 
203     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
204 
205     /**
206      * @dev Initializes the contract setting the deployer as the initial owner.
207      */
208     constructor () internal {
209         _owner = msg.sender;
210         emit OwnershipTransferred(address(0), _owner);
211     }
212 
213     /**
214      * @dev Returns the address of the current owner.
215      */
216     function owner() public view returns (address) {
217         return _owner;
218     }
219 
220     /**
221      * @dev Throws if called by any account other than the owner.
222      */
223     modifier onlyOwner() {
224         require(isOwner(), "Ownable: caller is not the owner");
225         _;
226     }
227 
228     /**
229      * @dev Returns true if the caller is the current owner.
230      */
231     function isOwner() public view returns (bool) {
232         return msg.sender == _owner;
233     }
234 
235     /**
236      * @dev Leaves the contract without owner. It will not be possible to call
237      * `onlyOwner` functions anymore. Can only be called by the current owner.
238      *
239      * > Note: Renouncing ownership will leave the contract without an owner,
240      * thereby removing any functionality that is only available to the owner.
241      */
242     function renounceOwnership() public onlyOwner {
243         emit OwnershipTransferred(_owner, address(0));
244         _owner = address(0);
245     }
246 
247     /**
248      * @dev Transfers ownership of the contract to a new account (`newOwner`).
249      * Can only be called by the current owner.
250      */
251     function transferOwnership(address newOwner) public onlyOwner {
252         _transferOwnership(newOwner);
253     }
254 
255     /**
256      * @dev Transfers ownership of the contract to a new account (`newOwner`).
257      */
258     function _transferOwnership(address newOwner) internal {
259         require(newOwner != address(0), "Ownable: new owner is the zero address");
260         emit OwnershipTransferred(_owner, newOwner);
261         _owner = newOwner;
262     }
263 }
264 
265 // File: @daostack/infra/contracts/Reputation.sol
266 
267 pragma solidity ^0.5.11;
268 
269 
270 
271 /**
272  * @title Reputation system
273  * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .
274  * A reputation is use to assign influence measure to a DAO'S peers.
275  * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.
276  * The Reputation contract maintain a map of address to reputation value.
277  * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.
278  */
279 
280 contract Reputation is Ownable {
281 
282     uint8 public decimals = 18;             //Number of decimals of the smallest unit
283     // Event indicating minting of reputation to an address.
284     event Mint(address indexed _to, uint256 _amount);
285     // Event indicating burning of reputation for an address.
286     event Burn(address indexed _from, uint256 _amount);
287 
288       /// @dev `Checkpoint` is the structure that attaches a block number to a
289       ///  given value, the block number attached is the one that last changed the
290       ///  value
291     struct Checkpoint {
292 
293     // `fromBlock` is the block number that the value was generated from
294         uint128 fromBlock;
295 
296           // `value` is the amount of reputation at a specific block number
297         uint128 value;
298     }
299 
300       // `balances` is the map that tracks the balance of each address, in this
301       //  contract when the balance changes the block number that the change
302       //  occurred is also included in the map
303     mapping (address => Checkpoint[]) balances;
304 
305       // Tracks the history of the `totalSupply` of the reputation
306     Checkpoint[] totalSupplyHistory;
307 
308     /// @notice Constructor to create a Reputation
309     constructor(
310     ) public
311     {
312     }
313 
314     /// @dev This function makes it easy to get the total number of reputation
315     /// @return The total number of reputation
316     function totalSupply() public view returns (uint256) {
317         return totalSupplyAt(block.number);
318     }
319 
320   ////////////////
321   // Query balance and totalSupply in History
322   ////////////////
323     /**
324     * @dev return the reputation amount of a given owner
325     * @param _owner an address of the owner which we want to get his reputation
326     */
327     function balanceOf(address _owner) public view returns (uint256 balance) {
328         return balanceOfAt(_owner, block.number);
329     }
330 
331       /// @dev Queries the balance of `_owner` at a specific `_blockNumber`
332       /// @param _owner The address from which the balance will be retrieved
333       /// @param _blockNumber The block number when the balance is queried
334       /// @return The balance at `_blockNumber`
335     function balanceOfAt(address _owner, uint256 _blockNumber)
336     public view returns (uint256)
337     {
338         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
339             return 0;
340           // This will return the expected balance during normal situations
341         } else {
342             return getValueAt(balances[_owner], _blockNumber);
343         }
344     }
345 
346       /// @notice Total amount of reputation at a specific `_blockNumber`.
347       /// @param _blockNumber The block number when the totalSupply is queried
348       /// @return The total amount of reputation at `_blockNumber`
349     function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {
350         if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {
351             return 0;
352           // This will return the expected totalSupply during normal situations
353         } else {
354             return getValueAt(totalSupplyHistory, _blockNumber);
355         }
356     }
357 
358       /// @notice Generates `_amount` reputation that are assigned to `_owner`
359       /// @param _user The address that will be assigned the new reputation
360       /// @param _amount The quantity of reputation generated
361       /// @return True if the reputation are generated correctly
362     function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {
363         uint256 curTotalSupply = totalSupply();
364         require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow
365         uint256 previousBalanceTo = balanceOf(_user);
366         require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow
367         updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);
368         updateValueAtNow(balances[_user], previousBalanceTo + _amount);
369         emit Mint(_user, _amount);
370         return true;
371     }
372 
373       /// @notice Burns `_amount` reputation from `_owner`
374       /// @param _user The address that will lose the reputation
375       /// @param _amount The quantity of reputation to burn
376       /// @return True if the reputation are burned correctly
377     function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {
378         uint256 curTotalSupply = totalSupply();
379         uint256 amountBurned = _amount;
380         uint256 previousBalanceFrom = balanceOf(_user);
381         if (previousBalanceFrom < amountBurned) {
382             amountBurned = previousBalanceFrom;
383         }
384         updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);
385         updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);
386         emit Burn(_user, amountBurned);
387         return true;
388     }
389 
390   ////////////////
391   // Internal helper functions to query and set a value in a snapshot array
392   ////////////////
393 
394       /// @dev `getValueAt` retrieves the number of reputation at a given block number
395       /// @param checkpoints The history of values being queried
396       /// @param _block The block number to retrieve the value at
397       /// @return The number of reputation being queried
398     function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {
399         if (checkpoints.length == 0) {
400             return 0;
401         }
402 
403           // Shortcut for the actual value
404         if (_block >= checkpoints[checkpoints.length-1].fromBlock) {
405             return checkpoints[checkpoints.length-1].value;
406         }
407         if (_block < checkpoints[0].fromBlock) {
408             return 0;
409         }
410 
411           // Binary search of the value in the array
412         uint256 min = 0;
413         uint256 max = checkpoints.length-1;
414         while (max > min) {
415             uint256 mid = (max + min + 1) / 2;
416             if (checkpoints[mid].fromBlock<=_block) {
417                 min = mid;
418             } else {
419                 max = mid-1;
420             }
421         }
422         return checkpoints[min].value;
423     }
424 
425       /// @dev `updateValueAtNow` used to update the `balances` map and the
426       ///  `totalSupplyHistory`
427       /// @param checkpoints The history of data being updated
428       /// @param _value The new number of reputation
429     function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {
430         require(uint128(_value) == _value); //check value is in the 128 bits bounderies
431         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
432             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
433             newCheckPoint.fromBlock = uint128(block.number);
434             newCheckPoint.value = uint128(_value);
435         } else {
436             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
437             oldCheckPoint.value = uint128(_value);
438         }
439     }
440 }
441 
442 // File: openzeppelin-solidity/contracts/math/SafeMath.sol
443 
444 pragma solidity ^0.5.0;
445 
446 /**
447  * @dev Wrappers over Solidity's arithmetic operations with added overflow
448  * checks.
449  *
450  * Arithmetic operations in Solidity wrap on overflow. This can easily result
451  * in bugs, because programmers usually assume that an overflow raises an
452  * error, which is the standard behavior in high level programming languages.
453  * `SafeMath` restores this intuition by reverting the transaction when an
454  * operation overflows.
455  *
456  * Using this library instead of the unchecked operations eliminates an entire
457  * class of bugs, so it's recommended to use it always.
458  */
459 library SafeMath {
460     /**
461      * @dev Returns the addition of two unsigned integers, reverting on
462      * overflow.
463      *
464      * Counterpart to Solidity's `+` operator.
465      *
466      * Requirements:
467      * - Addition cannot overflow.
468      */
469     function add(uint256 a, uint256 b) internal pure returns (uint256) {
470         uint256 c = a + b;
471         require(c >= a, "SafeMath: addition overflow");
472 
473         return c;
474     }
475 
476     /**
477      * @dev Returns the subtraction of two unsigned integers, reverting on
478      * overflow (when the result is negative).
479      *
480      * Counterpart to Solidity's `-` operator.
481      *
482      * Requirements:
483      * - Subtraction cannot overflow.
484      */
485     function sub(uint256 a, uint256 b) internal pure returns (uint256) {
486         require(b <= a, "SafeMath: subtraction overflow");
487         uint256 c = a - b;
488 
489         return c;
490     }
491 
492     /**
493      * @dev Returns the multiplication of two unsigned integers, reverting on
494      * overflow.
495      *
496      * Counterpart to Solidity's `*` operator.
497      *
498      * Requirements:
499      * - Multiplication cannot overflow.
500      */
501     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
502         // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
503         // benefit is lost if 'b' is also tested.
504         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
505         if (a == 0) {
506             return 0;
507         }
508 
509         uint256 c = a * b;
510         require(c / a == b, "SafeMath: multiplication overflow");
511 
512         return c;
513     }
514 
515     /**
516      * @dev Returns the integer division of two unsigned integers. Reverts on
517      * division by zero. The result is rounded towards zero.
518      *
519      * Counterpart to Solidity's `/` operator. Note: this function uses a
520      * `revert` opcode (which leaves remaining gas untouched) while Solidity
521      * uses an invalid opcode to revert (consuming all remaining gas).
522      *
523      * Requirements:
524      * - The divisor cannot be zero.
525      */
526     function div(uint256 a, uint256 b) internal pure returns (uint256) {
527         // Solidity only automatically asserts when dividing by 0
528         require(b > 0, "SafeMath: division by zero");
529         uint256 c = a / b;
530         // assert(a == b * c + a % b); // There is no case in which this doesn't hold
531 
532         return c;
533     }
534 
535     /**
536      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
537      * Reverts when dividing by zero.
538      *
539      * Counterpart to Solidity's `%` operator. This function uses a `revert`
540      * opcode (which leaves remaining gas untouched) while Solidity uses an
541      * invalid opcode to revert (consuming all remaining gas).
542      *
543      * Requirements:
544      * - The divisor cannot be zero.
545      */
546     function mod(uint256 a, uint256 b) internal pure returns (uint256) {
547         require(b != 0, "SafeMath: modulo by zero");
548         return a % b;
549     }
550 }
551 
552 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol
553 
554 pragma solidity ^0.5.0;
555 
556 
557 
558 /**
559  * @dev Implementation of the `IERC20` interface.
560  *
561  * This implementation is agnostic to the way tokens are created. This means
562  * that a supply mechanism has to be added in a derived contract using `_mint`.
563  * For a generic mechanism see `ERC20Mintable`.
564  *
565  * *For a detailed writeup see our guide [How to implement supply
566  * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*
567  *
568  * We have followed general OpenZeppelin guidelines: functions revert instead
569  * of returning `false` on failure. This behavior is nonetheless conventional
570  * and does not conflict with the expectations of ERC20 applications.
571  *
572  * Additionally, an `Approval` event is emitted on calls to `transferFrom`.
573  * This allows applications to reconstruct the allowance for all accounts just
574  * by listening to said events. Other implementations of the EIP may not emit
575  * these events, as it isn't required by the specification.
576  *
577  * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`
578  * functions have been added to mitigate the well-known issues around setting
579  * allowances. See `IERC20.approve`.
580  */
581 contract ERC20 is IERC20 {
582     using SafeMath for uint256;
583 
584     mapping (address => uint256) private _balances;
585 
586     mapping (address => mapping (address => uint256)) private _allowances;
587 
588     uint256 private _totalSupply;
589 
590     /**
591      * @dev See `IERC20.totalSupply`.
592      */
593     function totalSupply() public view returns (uint256) {
594         return _totalSupply;
595     }
596 
597     /**
598      * @dev See `IERC20.balanceOf`.
599      */
600     function balanceOf(address account) public view returns (uint256) {
601         return _balances[account];
602     }
603 
604     /**
605      * @dev See `IERC20.transfer`.
606      *
607      * Requirements:
608      *
609      * - `recipient` cannot be the zero address.
610      * - the caller must have a balance of at least `amount`.
611      */
612     function transfer(address recipient, uint256 amount) public returns (bool) {
613         _transfer(msg.sender, recipient, amount);
614         return true;
615     }
616 
617     /**
618      * @dev See `IERC20.allowance`.
619      */
620     function allowance(address owner, address spender) public view returns (uint256) {
621         return _allowances[owner][spender];
622     }
623 
624     /**
625      * @dev See `IERC20.approve`.
626      *
627      * Requirements:
628      *
629      * - `spender` cannot be the zero address.
630      */
631     function approve(address spender, uint256 value) public returns (bool) {
632         _approve(msg.sender, spender, value);
633         return true;
634     }
635 
636     /**
637      * @dev See `IERC20.transferFrom`.
638      *
639      * Emits an `Approval` event indicating the updated allowance. This is not
640      * required by the EIP. See the note at the beginning of `ERC20`;
641      *
642      * Requirements:
643      * - `sender` and `recipient` cannot be the zero address.
644      * - `sender` must have a balance of at least `value`.
645      * - the caller must have allowance for `sender`'s tokens of at least
646      * `amount`.
647      */
648     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
649         _transfer(sender, recipient, amount);
650         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));
651         return true;
652     }
653 
654     /**
655      * @dev Atomically increases the allowance granted to `spender` by the caller.
656      *
657      * This is an alternative to `approve` that can be used as a mitigation for
658      * problems described in `IERC20.approve`.
659      *
660      * Emits an `Approval` event indicating the updated allowance.
661      *
662      * Requirements:
663      *
664      * - `spender` cannot be the zero address.
665      */
666     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
667         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
668         return true;
669     }
670 
671     /**
672      * @dev Atomically decreases the allowance granted to `spender` by the caller.
673      *
674      * This is an alternative to `approve` that can be used as a mitigation for
675      * problems described in `IERC20.approve`.
676      *
677      * Emits an `Approval` event indicating the updated allowance.
678      *
679      * Requirements:
680      *
681      * - `spender` cannot be the zero address.
682      * - `spender` must have allowance for the caller of at least
683      * `subtractedValue`.
684      */
685     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
686         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));
687         return true;
688     }
689 
690     /**
691      * @dev Moves tokens `amount` from `sender` to `recipient`.
692      *
693      * This is internal function is equivalent to `transfer`, and can be used to
694      * e.g. implement automatic token fees, slashing mechanisms, etc.
695      *
696      * Emits a `Transfer` event.
697      *
698      * Requirements:
699      *
700      * - `sender` cannot be the zero address.
701      * - `recipient` cannot be the zero address.
702      * - `sender` must have a balance of at least `amount`.
703      */
704     function _transfer(address sender, address recipient, uint256 amount) internal {
705         require(sender != address(0), "ERC20: transfer from the zero address");
706         require(recipient != address(0), "ERC20: transfer to the zero address");
707 
708         _balances[sender] = _balances[sender].sub(amount);
709         _balances[recipient] = _balances[recipient].add(amount);
710         emit Transfer(sender, recipient, amount);
711     }
712 
713     /** @dev Creates `amount` tokens and assigns them to `account`, increasing
714      * the total supply.
715      *
716      * Emits a `Transfer` event with `from` set to the zero address.
717      *
718      * Requirements
719      *
720      * - `to` cannot be the zero address.
721      */
722     function _mint(address account, uint256 amount) internal {
723         require(account != address(0), "ERC20: mint to the zero address");
724 
725         _totalSupply = _totalSupply.add(amount);
726         _balances[account] = _balances[account].add(amount);
727         emit Transfer(address(0), account, amount);
728     }
729 
730      /**
731      * @dev Destoys `amount` tokens from `account`, reducing the
732      * total supply.
733      *
734      * Emits a `Transfer` event with `to` set to the zero address.
735      *
736      * Requirements
737      *
738      * - `account` cannot be the zero address.
739      * - `account` must have at least `amount` tokens.
740      */
741     function _burn(address account, uint256 value) internal {
742         require(account != address(0), "ERC20: burn from the zero address");
743 
744         _totalSupply = _totalSupply.sub(value);
745         _balances[account] = _balances[account].sub(value);
746         emit Transfer(account, address(0), value);
747     }
748 
749     /**
750      * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
751      *
752      * This is internal function is equivalent to `approve`, and can be used to
753      * e.g. set automatic allowances for certain subsystems, etc.
754      *
755      * Emits an `Approval` event.
756      *
757      * Requirements:
758      *
759      * - `owner` cannot be the zero address.
760      * - `spender` cannot be the zero address.
761      */
762     function _approve(address owner, address spender, uint256 value) internal {
763         require(owner != address(0), "ERC20: approve from the zero address");
764         require(spender != address(0), "ERC20: approve to the zero address");
765 
766         _allowances[owner][spender] = value;
767         emit Approval(owner, spender, value);
768     }
769 
770     /**
771      * @dev Destoys `amount` tokens from `account`.`amount` is then deducted
772      * from the caller's allowance.
773      *
774      * See `_burn` and `_approve`.
775      */
776     function _burnFrom(address account, uint256 amount) internal {
777         _burn(account, amount);
778         _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));
779     }
780 }
781 
782 // File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol
783 
784 pragma solidity ^0.5.0;
785 
786 
787 /**
788  * @dev Extension of `ERC20` that allows token holders to destroy both their own
789  * tokens and those that they have an allowance for, in a way that can be
790  * recognized off-chain (via event analysis).
791  */
792 contract ERC20Burnable is ERC20 {
793     /**
794      * @dev Destoys `amount` tokens from the caller.
795      *
796      * See `ERC20._burn`.
797      */
798     function burn(uint256 amount) public {
799         _burn(msg.sender, amount);
800     }
801 
802     /**
803      * @dev See `ERC20._burnFrom`.
804      */
805     function burnFrom(address account, uint256 amount) public {
806         _burnFrom(account, amount);
807     }
808 }
809 
810 // File: contracts/controller/DAOToken.sol
811 
812 pragma solidity ^0.5.11;
813 
814 
815 
816 
817 
818 /**
819  * @title DAOToken, base on zeppelin contract.
820  * @dev ERC20 compatible token. It is a mintable, burnable token.
821  */
822 
823 contract DAOToken is ERC20, ERC20Burnable, Ownable {
824 
825     string public name;
826     string public symbol;
827     // solhint-disable-next-line const-name-snakecase
828     uint8 public constant decimals = 18;
829     uint256 public cap;
830 
831     /**
832     * @dev Constructor
833     * @param _name - token name
834     * @param _symbol - token symbol
835     * @param _cap - token cap - 0 value means no cap
836     */
837     constructor(string memory _name, string memory _symbol, uint256 _cap)
838     public {
839         name = _name;
840         symbol = _symbol;
841         cap = _cap;
842     }
843 
844     /**
845      * @dev Function to mint tokens
846      * @param _to The address that will receive the minted tokens.
847      * @param _amount The amount of tokens to mint.
848      */
849     function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {
850         if (cap > 0)
851             require(totalSupply().add(_amount) <= cap);
852         _mint(_to, _amount);
853         return true;
854     }
855 }
856 
857 // File: openzeppelin-solidity/contracts/utils/Address.sol
858 
859 pragma solidity ^0.5.0;
860 
861 /**
862  * @dev Collection of functions related to the address type,
863  */
864 library Address {
865     /**
866      * @dev Returns true if `account` is a contract.
867      *
868      * This test is non-exhaustive, and there may be false-negatives: during the
869      * execution of a contract's constructor, its address will be reported as
870      * not containing a contract.
871      *
872      * > It is unsafe to assume that an address for which this function returns
873      * false is an externally-owned account (EOA) and not a contract.
874      */
875     function isContract(address account) internal view returns (bool) {
876         // This method relies in extcodesize, which returns 0 for contracts in
877         // construction, since the code is only stored at the end of the
878         // constructor execution.
879 
880         uint256 size;
881         // solhint-disable-next-line no-inline-assembly
882         assembly { size := extcodesize(account) }
883         return size > 0;
884     }
885 }
886 
887 // File: contracts/libs/SafeERC20.sol
888 
889 /*
890 
891 SafeERC20 by daostack.
892 The code is based on a fix by SECBIT Team.
893 
894 USE WITH CAUTION & NO WARRANTY
895 
896 REFERENCE & RELATED READING
897 - https://github.com/ethereum/solidity/issues/4116
898 - https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c
899 - https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
900 - https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61
901 
902 */
903 pragma solidity ^0.5.11;
904 
905 
906 
907 library SafeERC20 {
908     using Address for address;
909 
910     bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
911     bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
912     bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes("approve(address,uint256)")));
913 
914     function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {
915 
916         // Must be a contract addr first!
917         require(_erc20Addr.isContract());
918 
919         (bool success, bytes memory returnValue) =
920         // solhint-disable-next-line avoid-low-level-calls
921         _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
922         // call return false when something wrong
923         require(success);
924         //check return value
925         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
926     }
927 
928     function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {
929 
930         // Must be a contract addr first!
931         require(_erc20Addr.isContract());
932 
933         (bool success, bytes memory returnValue) =
934         // solhint-disable-next-line avoid-low-level-calls
935         _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
936         // call return false when something wrong
937         require(success);
938         //check return value
939         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
940     }
941 
942     function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {
943 
944         // Must be a contract addr first!
945         require(_erc20Addr.isContract());
946 
947         // safeApprove should only be called when setting an initial allowance,
948         // or when resetting it to zero.
949         require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));
950 
951         (bool success, bytes memory returnValue) =
952         // solhint-disable-next-line avoid-low-level-calls
953         _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
954         // call return false when something wrong
955         require(success);
956         //check return value
957         require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));
958     }
959 }
960 
961 // File: contracts/controller/Avatar.sol
962 
963 pragma solidity ^0.5.11;
964 
965 
966 
967 
968 
969 
970 
971 /**
972  * @title An Avatar holds tokens, reputation and ether for a controller
973  */
974 contract Avatar is Ownable {
975     using SafeERC20 for address;
976 
977     string public orgName;
978     DAOToken public nativeToken;
979     Reputation public nativeReputation;
980 
981     event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
982     event SendEther(uint256 _amountInWei, address indexed _to);
983     event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
984     event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
985     event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
986     event ReceiveEther(address indexed _sender, uint256 _value);
987     event MetaData(string _metaData);
988 
989     /**
990     * @dev the constructor takes organization name, native token and reputation system
991     and creates an avatar for a controller
992     */
993     constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {
994         orgName = _orgName;
995         nativeToken = _nativeToken;
996         nativeReputation = _nativeReputation;
997     }
998 
999     /**
1000     * @dev enables an avatar to receive ethers
1001     */
1002     function() external payable {
1003         emit ReceiveEther(msg.sender, msg.value);
1004     }
1005 
1006     /**
1007     * @dev perform a generic call to an arbitrary contract
1008     * @param _contract  the contract's address to call
1009     * @param _data ABI-encoded contract call to call `_contract` address.
1010     * @param _value value (ETH) to transfer with the transaction
1011     * @return bool    success or fail
1012     *         bytes - the return bytes of the called contract's function.
1013     */
1014     function genericCall(address _contract, bytes memory _data, uint256 _value)
1015     public
1016     onlyOwner
1017     returns(bool success, bytes memory returnValue) {
1018       // solhint-disable-next-line avoid-call-value
1019         (success, returnValue) = _contract.call.value(_value)(_data);
1020         emit GenericCall(_contract, _data, _value, success);
1021     }
1022 
1023     /**
1024     * @dev send ethers from the avatar's wallet
1025     * @param _amountInWei amount to send in Wei units
1026     * @param _to send the ethers to this address
1027     * @return bool which represents success
1028     */
1029     function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
1030         _to.transfer(_amountInWei);
1031         emit SendEther(_amountInWei, _to);
1032         return true;
1033     }
1034 
1035     /**
1036     * @dev external token transfer
1037     * @param _externalToken the token contract
1038     * @param _to the destination address
1039     * @param _value the amount of tokens to transfer
1040     * @return bool which represents success
1041     */
1042     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)
1043     public onlyOwner returns(bool)
1044     {
1045         address(_externalToken).safeTransfer(_to, _value);
1046         emit ExternalTokenTransfer(address(_externalToken), _to, _value);
1047         return true;
1048     }
1049 
1050     /**
1051     * @dev external token transfer from a specific account
1052     * @param _externalToken the token contract
1053     * @param _from the account to spend token from
1054     * @param _to the destination address
1055     * @param _value the amount of tokens to transfer
1056     * @return bool which represents success
1057     */
1058     function externalTokenTransferFrom(
1059         IERC20 _externalToken,
1060         address _from,
1061         address _to,
1062         uint256 _value
1063     )
1064     public onlyOwner returns(bool)
1065     {
1066         address(_externalToken).safeTransferFrom(_from, _to, _value);
1067         emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);
1068         return true;
1069     }
1070 
1071     /**
1072     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1073     *      on behalf of msg.sender.
1074     * @param _externalToken the address of the Token Contract
1075     * @param _spender address
1076     * @param _value the amount of ether (in Wei) which the approval is referring to.
1077     * @return bool which represents a success
1078     */
1079     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)
1080     public onlyOwner returns(bool)
1081     {
1082         address(_externalToken).safeApprove(_spender, _value);
1083         emit ExternalTokenApproval(address(_externalToken), _spender, _value);
1084         return true;
1085     }
1086 
1087     /**
1088     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1089     * @param _metaData a string representing a hash of the meta data
1090     * @return bool which represents a success
1091     */
1092     function metaData(string memory _metaData) public onlyOwner returns(bool) {
1093         emit MetaData(_metaData);
1094         return true;
1095     }
1096 
1097 
1098 }
1099 
1100 // File: contracts/universalSchemes/UniversalSchemeInterface.sol
1101 
1102 pragma solidity ^0.5.11;
1103 
1104 
1105 contract UniversalSchemeInterface {
1106 
1107     function getParametersFromController(Avatar _avatar) internal view returns(bytes32);
1108     
1109 }
1110 
1111 // File: contracts/globalConstraints/GlobalConstraintInterface.sol
1112 
1113 pragma solidity ^0.5.11;
1114 
1115 
1116 contract GlobalConstraintInterface {
1117 
1118     enum CallPhase { Pre, Post, PreAndPost }
1119 
1120     function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
1121     function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
1122     /**
1123      * @dev when return if this globalConstraints is pre, post or both.
1124      * @return CallPhase enum indication  Pre, Post or PreAndPost.
1125      */
1126     function when() public returns(CallPhase);
1127 }
1128 
1129 // File: contracts/controller/ControllerInterface.sol
1130 
1131 pragma solidity ^0.5.11;
1132 
1133 
1134 
1135 /**
1136  * @title Controller contract
1137  * @dev A controller controls the organizations tokens ,reputation and avatar.
1138  * It is subject to a set of schemes and constraints that determine its behavior.
1139  * Each scheme has it own parameters and operation permissions.
1140  */
1141 interface ControllerInterface {
1142 
1143     /**
1144      * @dev Mint `_amount` of reputation that are assigned to `_to` .
1145      * @param  _amount amount of reputation to mint
1146      * @param _to beneficiary address
1147      * @return bool which represents a success
1148     */
1149     function mintReputation(uint256 _amount, address _to, address _avatar)
1150     external
1151     returns(bool);
1152 
1153     /**
1154      * @dev Burns `_amount` of reputation from `_from`
1155      * @param _amount amount of reputation to burn
1156      * @param _from The address that will lose the reputation
1157      * @return bool which represents a success
1158      */
1159     function burnReputation(uint256 _amount, address _from, address _avatar)
1160     external
1161     returns(bool);
1162 
1163     /**
1164      * @dev mint tokens .
1165      * @param  _amount amount of token to mint
1166      * @param _beneficiary beneficiary address
1167      * @param _avatar address
1168      * @return bool which represents a success
1169      */
1170     function mintTokens(uint256 _amount, address _beneficiary, address _avatar)
1171     external
1172     returns(bool);
1173 
1174   /**
1175    * @dev register or update a scheme
1176    * @param _scheme the address of the scheme
1177    * @param _paramsHash a hashed configuration of the usage of the scheme
1178    * @param _permissions the permissions the new scheme will have
1179    * @param _avatar address
1180    * @return bool which represents a success
1181    */
1182     function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)
1183     external
1184     returns(bool);
1185 
1186     /**
1187      * @dev unregister a scheme
1188      * @param _avatar address
1189      * @param _scheme the address of the scheme
1190      * @return bool which represents a success
1191      */
1192     function unregisterScheme(address _scheme, address _avatar)
1193     external
1194     returns(bool);
1195 
1196     /**
1197      * @dev unregister the caller's scheme
1198      * @param _avatar address
1199      * @return bool which represents a success
1200      */
1201     function unregisterSelf(address _avatar) external returns(bool);
1202 
1203     /**
1204      * @dev add or update Global Constraint
1205      * @param _globalConstraint the address of the global constraint to be added.
1206      * @param _params the constraint parameters hash.
1207      * @param _avatar the avatar of the organization
1208      * @return bool which represents a success
1209      */
1210     function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)
1211     external returns(bool);
1212 
1213     /**
1214      * @dev remove Global Constraint
1215      * @param _globalConstraint the address of the global constraint to be remove.
1216      * @param _avatar the organization avatar.
1217      * @return bool which represents a success
1218      */
1219     function removeGlobalConstraint (address _globalConstraint, address _avatar)
1220     external  returns(bool);
1221 
1222   /**
1223     * @dev upgrade the Controller
1224     *      The function will trigger an event 'UpgradeController'.
1225     * @param  _newController the address of the new controller.
1226     * @param _avatar address
1227     * @return bool which represents a success
1228     */
1229     function upgradeController(address _newController, Avatar _avatar)
1230     external returns(bool);
1231 
1232     /**
1233     * @dev perform a generic call to an arbitrary contract
1234     * @param _contract  the contract's address to call
1235     * @param _data ABI-encoded contract call to call `_contract` address.
1236     * @param _avatar the controller's avatar address
1237     * @param _value value (ETH) to transfer with the transaction
1238     * @return bool -success
1239     *         bytes  - the return value of the called _contract's function.
1240     */
1241     function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)
1242     external
1243     returns(bool, bytes memory);
1244 
1245   /**
1246    * @dev send some ether
1247    * @param _amountInWei the amount of ether (in Wei) to send
1248    * @param _to address of the beneficiary
1249    * @param _avatar address
1250    * @return bool which represents a success
1251    */
1252     function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)
1253     external returns(bool);
1254 
1255     /**
1256     * @dev send some amount of arbitrary ERC20 Tokens
1257     * @param _externalToken the address of the Token Contract
1258     * @param _to address of the beneficiary
1259     * @param _value the amount of ether (in Wei) to send
1260     * @param _avatar address
1261     * @return bool which represents a success
1262     */
1263     function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)
1264     external
1265     returns(bool);
1266 
1267     /**
1268     * @dev transfer token "from" address "to" address
1269     *      One must to approve the amount of tokens which can be spend from the
1270     *      "from" account.This can be done using externalTokenApprove.
1271     * @param _externalToken the address of the Token Contract
1272     * @param _from address of the account to send from
1273     * @param _to address of the beneficiary
1274     * @param _value the amount of ether (in Wei) to send
1275     * @param _avatar address
1276     * @return bool which represents a success
1277     */
1278     function externalTokenTransferFrom(
1279     IERC20 _externalToken,
1280     address _from,
1281     address _to,
1282     uint256 _value,
1283     Avatar _avatar)
1284     external
1285     returns(bool);
1286 
1287     /**
1288     * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens
1289     *      on behalf of msg.sender.
1290     * @param _externalToken the address of the Token Contract
1291     * @param _spender address
1292     * @param _value the amount of ether (in Wei) which the approval is referring to.
1293     * @return bool which represents a success
1294     */
1295     function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)
1296     external
1297     returns(bool);
1298 
1299     /**
1300     * @dev metaData emits an event with a string, should contain the hash of some meta data.
1301     * @param _metaData a string representing a hash of the meta data
1302     * @param _avatar Avatar
1303     * @return bool which represents a success
1304     */
1305     function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);
1306 
1307     /**
1308      * @dev getNativeReputation
1309      * @param _avatar the organization avatar.
1310      * @return organization native reputation
1311      */
1312     function getNativeReputation(address _avatar)
1313     external
1314     view
1315     returns(address);
1316 
1317     function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);
1318 
1319     function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);
1320 
1321     function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);
1322 
1323     function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);
1324 
1325     /**
1326      * @dev globalConstraintsCount return the global constraint pre and post count
1327      * @return uint256 globalConstraintsPre count.
1328      * @return uint256 globalConstraintsPost count.
1329      */
1330     function globalConstraintsCount(address _avatar) external view returns(uint, uint);
1331 
1332     function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);
1333 }
1334 
1335 // File: contracts/universalSchemes/UniversalScheme.sol
1336 
1337 pragma solidity ^0.5.11;
1338 
1339 
1340 
1341 
1342 
1343 contract UniversalScheme is UniversalSchemeInterface {
1344     /**
1345     *  @dev get the parameters for the current scheme from the controller
1346     */
1347     function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {
1348         require(ControllerInterface(_avatar.owner()).isSchemeRegistered(address(this), address(_avatar)),
1349         "scheme is not registered");
1350         return ControllerInterface(_avatar.owner()).getSchemeParameters(address(this), address(_avatar));
1351     }
1352 }
1353 
1354 // File: openzeppelin-solidity/contracts/cryptography/ECDSA.sol
1355 
1356 pragma solidity ^0.5.0;
1357 
1358 /**
1359  * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
1360  *
1361  * These functions can be used to verify that a message was signed by the holder
1362  * of the private keys of a given address.
1363  */
1364 library ECDSA {
1365     /**
1366      * @dev Returns the address that signed a hashed message (`hash`) with
1367      * `signature`. This address can then be used for verification purposes.
1368      *
1369      * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
1370      * this function rejects them by requiring the `s` value to be in the lower
1371      * half order, and the `v` value to be either 27 or 28.
1372      *
1373      * (.note) This call _does not revert_ if the signature is invalid, or
1374      * if the signer is otherwise unable to be retrieved. In those scenarios,
1375      * the zero address is returned.
1376      *
1377      * (.warning) `hash` _must_ be the result of a hash operation for the
1378      * verification to be secure: it is possible to craft signatures that
1379      * recover to arbitrary addresses for non-hashed data. A safe way to ensure
1380      * this is by receiving a hash of the original message (which may otherwise)
1381      * be too long), and then calling `toEthSignedMessageHash` on it.
1382      */
1383     function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
1384         // Check the signature length
1385         if (signature.length != 65) {
1386             return (address(0));
1387         }
1388 
1389         // Divide the signature in r, s and v variables
1390         bytes32 r;
1391         bytes32 s;
1392         uint8 v;
1393 
1394         // ecrecover takes the signature parameters, and the only way to get them
1395         // currently is to use assembly.
1396         // solhint-disable-next-line no-inline-assembly
1397         assembly {
1398             r := mload(add(signature, 0x20))
1399             s := mload(add(signature, 0x40))
1400             v := byte(0, mload(add(signature, 0x60)))
1401         }
1402 
1403         // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
1404         // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
1405         // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most
1406         // signatures from current libraries generate a unique signature with an s-value in the lower half order.
1407         //
1408         // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
1409         // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
1410         // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
1411         // these malleable signatures as well.
1412         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
1413             return address(0);
1414         }
1415 
1416         if (v != 27 && v != 28) {
1417             return address(0);
1418         }
1419 
1420         // If the signature is valid (and not malleable), return the signer address
1421         return ecrecover(hash, v, r, s);
1422     }
1423 
1424     /**
1425      * @dev Returns an Ethereum Signed Message, created from a `hash`. This
1426      * replicates the behavior of the
1427      * [`eth_sign`](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)
1428      * JSON-RPC method.
1429      *
1430      * See `recover`.
1431      */
1432     function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
1433         // 32 is the length in bytes of hash,
1434         // enforced by the type signature above
1435         return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
1436     }
1437 }
1438 
1439 // File: @daostack/infra/contracts/libs/RealMath.sol
1440 
1441 pragma solidity ^0.5.11;
1442 
1443 /**
1444  * RealMath: fixed-point math library, based on fractional and integer parts.
1445  * Using uint256 as real216x40, which isn't in Solidity yet.
1446  * Internally uses the wider uint256 for some math.
1447  *
1448  * Note that for addition, subtraction, and mod (%), you should just use the
1449  * built-in Solidity operators. Functions for these operations are not provided.
1450  *
1451  */
1452 
1453 
1454 library RealMath {
1455 
1456     /**
1457      * How many total bits are there?
1458      */
1459     uint256 constant private REAL_BITS = 256;
1460 
1461     /**
1462      * How many fractional bits are there?
1463      */
1464     uint256 constant private REAL_FBITS = 40;
1465 
1466     /**
1467      * What's the first non-fractional bit
1468      */
1469     uint256 constant private REAL_ONE = uint256(1) << REAL_FBITS;
1470 
1471     /**
1472      * Raise a real number to any positive integer power
1473      */
1474     function pow(uint256 realBase, uint256 exponent) internal pure returns (uint256) {
1475 
1476         uint256 tempRealBase = realBase;
1477         uint256 tempExponent = exponent;
1478 
1479         // Start with the 0th power
1480         uint256 realResult = REAL_ONE;
1481         while (tempExponent != 0) {
1482             // While there are still bits set
1483             if ((tempExponent & 0x1) == 0x1) {
1484                 // If the low bit is set, multiply in the (many-times-squared) base
1485                 realResult = mul(realResult, tempRealBase);
1486             }
1487                 // Shift off the low bit
1488             tempExponent = tempExponent >> 1;
1489             if (tempExponent != 0) {
1490                 // Do the squaring
1491                 tempRealBase = mul(tempRealBase, tempRealBase);
1492             }
1493         }
1494 
1495         // Return the final result.
1496         return realResult;
1497     }
1498 
1499     /**
1500      * Create a real from a rational fraction.
1501      */
1502     function fraction(uint216 numerator, uint216 denominator) internal pure returns (uint256) {
1503         return div(uint256(numerator) * REAL_ONE, uint256(denominator) * REAL_ONE);
1504     }
1505 
1506     /**
1507      * Multiply one real by another. Truncates overflows.
1508      */
1509     function mul(uint256 realA, uint256 realB) private pure returns (uint256) {
1510         // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.
1511         // So we just have to clip off the extra REAL_FBITS fractional bits.
1512         uint256 res = realA * realB;
1513         require(res/realA == realB, "RealMath mul overflow");
1514         return (res >> REAL_FBITS);
1515     }
1516 
1517     /**
1518      * Divide one real by another real. Truncates overflows.
1519      */
1520     function div(uint256 realNumerator, uint256 realDenominator) private pure returns (uint256) {
1521         // We use the reverse of the multiplication trick: convert numerator from
1522         // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.
1523         return uint256((uint256(realNumerator) * REAL_ONE) / uint256(realDenominator));
1524     }
1525 
1526 }
1527 
1528 // File: @daostack/infra/contracts/votingMachines/ProposalExecuteInterface.sol
1529 
1530 pragma solidity ^0.5.11;
1531 
1532 interface ProposalExecuteInterface {
1533     function executeProposal(bytes32 _proposalId, int _decision) external returns(bool);
1534 }
1535 
1536 // File: openzeppelin-solidity/contracts/math/Math.sol
1537 
1538 pragma solidity ^0.5.0;
1539 
1540 /**
1541  * @dev Standard math utilities missing in the Solidity language.
1542  */
1543 library Math {
1544     /**
1545      * @dev Returns the largest of two numbers.
1546      */
1547     function max(uint256 a, uint256 b) internal pure returns (uint256) {
1548         return a >= b ? a : b;
1549     }
1550 
1551     /**
1552      * @dev Returns the smallest of two numbers.
1553      */
1554     function min(uint256 a, uint256 b) internal pure returns (uint256) {
1555         return a < b ? a : b;
1556     }
1557 
1558     /**
1559      * @dev Returns the average of two numbers. The result is rounded towards
1560      * zero.
1561      */
1562     function average(uint256 a, uint256 b) internal pure returns (uint256) {
1563         // (a + b) / 2 can overflow, so we distribute
1564         return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);
1565     }
1566 }
1567 
1568 // File: @daostack/infra/contracts/votingMachines/GenesisProtocolLogic.sol
1569 
1570 pragma solidity ^0.5.11;
1571 
1572 
1573 
1574 
1575 
1576 
1577 
1578 
1579 
1580 
1581 
1582 /**
1583  * @title GenesisProtocol implementation -an organization's voting machine scheme.
1584  */
1585 contract GenesisProtocolLogic is IntVoteInterface {
1586     using SafeMath for uint256;
1587     using Math for uint256;
1588     using RealMath for uint216;
1589     using RealMath for uint256;
1590     using Address for address;
1591 
1592     enum ProposalState { None, ExpiredInQueue, Executed, Queued, PreBoosted, Boosted, QuietEndingPeriod}
1593     enum ExecutionState { None, QueueBarCrossed, QueueTimeOut, PreBoostedBarCrossed, BoostedTimeOut, BoostedBarCrossed}
1594 
1595     //Organization's parameters
1596     struct Parameters {
1597         uint256 queuedVoteRequiredPercentage; // the absolute vote percentages bar.
1598         uint256 queuedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.
1599         uint256 boostedVotePeriodLimit; //the time limit for a proposal to be in boost mode.
1600         uint256 preBoostedVotePeriodLimit; //the time limit for a proposal
1601                                           //to be in an preparation state (stable) before boosted.
1602         uint256 thresholdConst; //constant  for threshold calculation .
1603                                 //threshold =thresholdConst ** (numberOfBoostedProposals)
1604         uint256 limitExponentValue;// an upper limit for numberOfBoostedProposals
1605                                    //in the threshold calculation to prevent overflow
1606         uint256 quietEndingPeriod; //quite ending period
1607         uint256 proposingRepReward;//proposer reputation reward.
1608         uint256 votersReputationLossRatio;//Unsuccessful pre booster
1609                                           //voters lose votersReputationLossRatio% of their reputation.
1610         uint256 minimumDaoBounty;
1611         uint256 daoBountyConst;//The DAO downstake for each proposal is calculate according to the formula
1612                                //(daoBountyConst * averageBoostDownstakes)/100 .
1613         uint256 activationTime;//the point in time after which proposals can be created.
1614         //if this address is set so only this address is allowed to vote of behalf of someone else.
1615         address voteOnBehalf;
1616     }
1617 
1618     struct Voter {
1619         uint256 vote; // YES(1) ,NO(2)
1620         uint256 reputation; // amount of voter's reputation
1621         bool preBoosted;
1622     }
1623 
1624     struct Staker {
1625         uint256 vote; // YES(1) ,NO(2)
1626         uint256 amount; // amount of staker's stake
1627         uint256 amount4Bounty;// amount of staker's stake used for bounty reward calculation.
1628     }
1629 
1630     struct Proposal {
1631         bytes32 organizationId; // the organization unique identifier the proposal is target to.
1632         address callbacks;    // should fulfill voting callbacks interface.
1633         ProposalState state;
1634         uint256 winningVote; //the winning vote.
1635         address proposer;
1636         //the proposal boosted period limit . it is updated for the case of quiteWindow mode.
1637         uint256 currentBoostedVotePeriodLimit;
1638         bytes32 paramsHash;
1639         uint256 daoBountyRemain; //use for checking sum zero bounty claims.it is set at the proposing time.
1640         uint256 daoBounty;
1641         uint256 totalStakes;// Total number of tokens staked which can be redeemable by stakers.
1642         uint256 confidenceThreshold;
1643         uint256 secondsFromTimeOutTillExecuteBoosted;
1644         uint[3] times; //times[0] - submittedTime
1645                        //times[1] - boostedPhaseTime
1646                        //times[2] -preBoostedPhaseTime;
1647         bool daoRedeemItsWinnings;
1648         //      vote      reputation
1649         mapping(uint256   =>  uint256    ) votes;
1650         //      vote      reputation
1651         mapping(uint256   =>  uint256    ) preBoostedVotes;
1652         //      address     voter
1653         mapping(address =>  Voter    ) voters;
1654         //      vote        stakes
1655         mapping(uint256   =>  uint256    ) stakes;
1656         //      address  staker
1657         mapping(address  => Staker   ) stakers;
1658     }
1659 
1660     event Stake(bytes32 indexed _proposalId,
1661         address indexed _organization,
1662         address indexed _staker,
1663         uint256 _vote,
1664         uint256 _amount
1665     );
1666 
1667     event Redeem(bytes32 indexed _proposalId,
1668         address indexed _organization,
1669         address indexed _beneficiary,
1670         uint256 _amount
1671     );
1672 
1673     event RedeemDaoBounty(bytes32 indexed _proposalId,
1674         address indexed _organization,
1675         address indexed _beneficiary,
1676         uint256 _amount
1677     );
1678 
1679     event RedeemReputation(bytes32 indexed _proposalId,
1680         address indexed _organization,
1681         address indexed _beneficiary,
1682         uint256 _amount
1683     );
1684 
1685     event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
1686     event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
1687     event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
1688     event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
1689 
1690     mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters
1691     mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.
1692     mapping(bytes32=>uint) public orgBoostedProposalsCnt;
1693            //organizationId => organization
1694     mapping(bytes32        => address     ) public organizations;
1695           //organizationId => averageBoostDownstakes
1696     mapping(bytes32           => uint256              ) public averagesDownstakesOfBoosted;
1697     uint256 constant public NUM_OF_CHOICES = 2;
1698     uint256 constant public NO = 2;
1699     uint256 constant public YES = 1;
1700     uint256 public proposalsCnt; // Total number of proposals
1701     IERC20 public stakingToken;
1702     address constant private GEN_TOKEN_ADDRESS = 0x543Ff227F64Aa17eA132Bf9886cAb5DB55DCAddf;
1703     uint256 constant private MAX_BOOSTED_PROPOSALS = 4096;
1704 
1705     /**
1706      * @dev Constructor
1707      */
1708     constructor(IERC20 _stakingToken) public {
1709       //The GEN token (staking token) address is hard coded in the contract by GEN_TOKEN_ADDRESS .
1710       //This will work for a network which already hosted the GEN token on this address (e.g mainnet).
1711       //If such contract address does not exist in the network (e.g ganache)
1712       //the contract will use the _stakingToken param as the
1713       //staking token address.
1714         if (address(GEN_TOKEN_ADDRESS).isContract()) {
1715             stakingToken = IERC20(GEN_TOKEN_ADDRESS);
1716         } else {
1717             stakingToken = _stakingToken;
1718         }
1719     }
1720 
1721   /**
1722    * @dev Check that the proposal is votable
1723    * a proposal is votable if it is in one of the following states:
1724    *  PreBoosted,Boosted,QuietEndingPeriod or Queued
1725    */
1726     modifier votable(bytes32 _proposalId) {
1727         require(_isVotable(_proposalId));
1728         _;
1729     }
1730 
1731     /**
1732      * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being
1733      * generated by calculating keccak256 of a incremented counter.
1734      * @param _paramsHash parameters hash
1735      * @param _proposer address
1736      * @param _organization address
1737      */
1738     function propose(uint256, bytes32 _paramsHash, address _proposer, address _organization)
1739         external
1740         returns(bytes32)
1741     {
1742       // solhint-disable-next-line not-rely-on-time
1743         require(now > parameters[_paramsHash].activationTime, "not active yet");
1744         //Check parameters existence.
1745         require(parameters[_paramsHash].queuedVoteRequiredPercentage >= 50);
1746         // Generate a unique ID:
1747         bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));
1748         proposalsCnt = proposalsCnt.add(1);
1749          // Open proposal:
1750         Proposal memory proposal;
1751         proposal.callbacks = msg.sender;
1752         proposal.organizationId = keccak256(abi.encodePacked(msg.sender, _organization));
1753 
1754         proposal.state = ProposalState.Queued;
1755         // solhint-disable-next-line not-rely-on-time
1756         proposal.times[0] = now;//submitted time
1757         proposal.currentBoostedVotePeriodLimit = parameters[_paramsHash].boostedVotePeriodLimit;
1758         proposal.proposer = _proposer;
1759         proposal.winningVote = NO;
1760         proposal.paramsHash = _paramsHash;
1761         if (organizations[proposal.organizationId] == address(0)) {
1762             if (_organization == address(0)) {
1763                 organizations[proposal.organizationId] = msg.sender;
1764             } else {
1765                 organizations[proposal.organizationId] = _organization;
1766             }
1767         }
1768         //calc dao bounty
1769         uint256 daoBounty =
1770         parameters[_paramsHash].daoBountyConst.mul(averagesDownstakesOfBoosted[proposal.organizationId]).div(100);
1771         proposal.daoBountyRemain = daoBounty.max(parameters[_paramsHash].minimumDaoBounty);
1772         proposals[proposalId] = proposal;
1773         proposals[proposalId].stakes[NO] = proposal.daoBountyRemain;//dao downstake on the proposal
1774 
1775         emit NewProposal(proposalId, organizations[proposal.organizationId], NUM_OF_CHOICES, _proposer, _paramsHash);
1776         return proposalId;
1777     }
1778 
1779     /**
1780       * @dev executeBoosted try to execute a boosted or QuietEndingPeriod proposal if it is expired
1781       * it rewards the msg.sender with P % of the proposal's upstakes upon a successful call to this function.
1782       * P = t/150, where t is the number of seconds passed since the the proposal's timeout.
1783       * P is capped by 10%.
1784       * @param _proposalId the id of the proposal
1785       * @return uint256 expirationCallBounty the bounty amount for the expiration call
1786      */
1787     function executeBoosted(bytes32 _proposalId) external returns(uint256 expirationCallBounty) {
1788         Proposal storage proposal = proposals[_proposalId];
1789         require(proposal.state == ProposalState.Boosted || proposal.state == ProposalState.QuietEndingPeriod,
1790         "proposal state in not Boosted nor QuietEndingPeriod");
1791         require(_execute(_proposalId), "proposal need to expire");
1792 
1793         proposal.secondsFromTimeOutTillExecuteBoosted =
1794         // solhint-disable-next-line not-rely-on-time
1795         now.sub(proposal.currentBoostedVotePeriodLimit.add(proposal.times[1]));
1796 
1797         expirationCallBounty = calcExecuteCallBounty(_proposalId);
1798         proposal.totalStakes = proposal.totalStakes.sub(expirationCallBounty);
1799         require(stakingToken.transfer(msg.sender, expirationCallBounty), "transfer to msg.sender failed");
1800         emit ExpirationCallBounty(_proposalId, msg.sender, expirationCallBounty);
1801     }
1802 
1803     /**
1804      * @dev hash the parameters, save them if necessary, and return the hash value
1805      * @param _params a parameters array
1806      *    _params[0] - _queuedVoteRequiredPercentage,
1807      *    _params[1] - _queuedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.
1808      *    _params[2] - _boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.
1809      *    _params[3] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an preparation
1810      *                  state (stable) before boosted.
1811      *    _params[4] -_thresholdConst
1812      *    _params[5] -_quietEndingPeriod
1813      *    _params[6] -_proposingRepReward
1814      *    _params[7] -_votersReputationLossRatio
1815      *    _params[8] -_minimumDaoBounty
1816      *    _params[9] -_daoBountyConst
1817      *    _params[10] -_activationTime
1818      * @param _voteOnBehalf - authorized to vote on behalf of others.
1819     */
1820     function setParameters(
1821         uint[11] calldata _params, //use array here due to stack too deep issue.
1822         address _voteOnBehalf
1823     )
1824     external
1825     returns(bytes32)
1826     {
1827         require(_params[0] <= 100 && _params[0] >= 50, "50 <= queuedVoteRequiredPercentage <= 100");
1828         require(_params[4] <= 16000 && _params[4] > 1000, "1000 < thresholdConst <= 16000");
1829         require(_params[7] <= 100, "votersReputationLossRatio <= 100");
1830         require(_params[2] >= _params[5], "boostedVotePeriodLimit >= quietEndingPeriod");
1831         require(_params[8] > 0, "minimumDaoBounty should be > 0");
1832         require(_params[9] > 0, "daoBountyConst should be > 0");
1833 
1834         bytes32 paramsHash = getParametersHash(_params, _voteOnBehalf);
1835         //set a limit for power for a given alpha to prevent overflow
1836         uint256 limitExponent = 172;//for alpha less or equal 2
1837         uint256 j = 2;
1838         for (uint256 i = 2000; i < 16000; i = i*2) {
1839             if ((_params[4] > i) && (_params[4] <= i*2)) {
1840                 limitExponent = limitExponent/j;
1841                 break;
1842             }
1843             j++;
1844         }
1845 
1846         parameters[paramsHash] = Parameters({
1847             queuedVoteRequiredPercentage: _params[0],
1848             queuedVotePeriodLimit: _params[1],
1849             boostedVotePeriodLimit: _params[2],
1850             preBoostedVotePeriodLimit: _params[3],
1851             thresholdConst:uint216(_params[4]).fraction(uint216(1000)),
1852             limitExponentValue:limitExponent,
1853             quietEndingPeriod: _params[5],
1854             proposingRepReward: _params[6],
1855             votersReputationLossRatio:_params[7],
1856             minimumDaoBounty:_params[8],
1857             daoBountyConst:_params[9],
1858             activationTime:_params[10],
1859             voteOnBehalf:_voteOnBehalf
1860         });
1861         return paramsHash;
1862     }
1863 
1864     /**
1865      * @dev redeem a reward for a successful stake, vote or proposing.
1866      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1867      * users to redeem on behalf of someone else.
1868      * @param _proposalId the ID of the proposal
1869      * @param _beneficiary - the beneficiary address
1870      * @return rewards -
1871      *           [0] stakerTokenReward
1872      *           [1] voterReputationReward
1873      *           [2] proposerReputationReward
1874      */
1875      // solhint-disable-next-line function-max-lines,code-complexity
1876     function redeem(bytes32 _proposalId, address _beneficiary) public returns (uint[3] memory rewards) {
1877         Proposal storage proposal = proposals[_proposalId];
1878         require((proposal.state == ProposalState.Executed)||(proposal.state == ProposalState.ExpiredInQueue),
1879         "Proposal should be Executed or ExpiredInQueue");
1880         Parameters memory params = parameters[proposal.paramsHash];
1881         //as staker
1882         Staker storage staker = proposal.stakers[_beneficiary];
1883         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1884         uint256 totalStakesLeftAfterCallBounty =
1885         proposal.stakes[NO].add(proposal.stakes[YES]).sub(calcExecuteCallBounty(_proposalId));
1886         if (staker.amount > 0) {
1887 
1888             if (proposal.state == ProposalState.ExpiredInQueue) {
1889                 //Stakes of a proposal that expires in Queue are sent back to stakers
1890                 rewards[0] = staker.amount;
1891             } else if (staker.vote == proposal.winningVote) {
1892                 if (staker.vote == YES) {
1893                     if (proposal.daoBounty < totalStakesLeftAfterCallBounty) {
1894                         uint256 _totalStakes = totalStakesLeftAfterCallBounty.sub(proposal.daoBounty);
1895                         rewards[0] = (staker.amount.mul(_totalStakes))/totalWinningStakes;
1896                     }
1897                 } else {
1898                     rewards[0] = (staker.amount.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes;
1899                 }
1900             }
1901             staker.amount = 0;
1902         }
1903             //dao redeem its winnings
1904         if (proposal.daoRedeemItsWinnings == false &&
1905             _beneficiary == organizations[proposal.organizationId] &&
1906             proposal.state != ProposalState.ExpiredInQueue &&
1907             proposal.winningVote == NO) {
1908             rewards[0] =
1909             rewards[0]
1910             .add((proposal.daoBounty.mul(totalStakesLeftAfterCallBounty))/totalWinningStakes)
1911             .sub(proposal.daoBounty);
1912             proposal.daoRedeemItsWinnings = true;
1913         }
1914 
1915         //as voter
1916         Voter storage voter = proposal.voters[_beneficiary];
1917         if ((voter.reputation != 0) && (voter.preBoosted)) {
1918             if (proposal.state == ProposalState.ExpiredInQueue) {
1919               //give back reputation for the voter
1920                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100);
1921             } else if (proposal.winningVote == voter.vote) {
1922                 uint256 lostReputation;
1923                 if (proposal.winningVote == YES) {
1924                     lostReputation = proposal.preBoostedVotes[NO];
1925                 } else {
1926                     lostReputation = proposal.preBoostedVotes[YES];
1927                 }
1928                 lostReputation = (lostReputation.mul(params.votersReputationLossRatio))/100;
1929                 rewards[1] = ((voter.reputation.mul(params.votersReputationLossRatio))/100)
1930                 .add((voter.reputation.mul(lostReputation))/proposal.preBoostedVotes[proposal.winningVote]);
1931             }
1932             voter.reputation = 0;
1933         }
1934         //as proposer
1935         if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {
1936             rewards[2] = params.proposingRepReward;
1937             proposal.proposer = address(0);
1938         }
1939         if (rewards[0] != 0) {
1940             proposal.totalStakes = proposal.totalStakes.sub(rewards[0]);
1941             require(stakingToken.transfer(_beneficiary, rewards[0]), "transfer to beneficiary failed");
1942             emit Redeem(_proposalId, organizations[proposal.organizationId], _beneficiary, rewards[0]);
1943         }
1944         if (rewards[1].add(rewards[2]) != 0) {
1945             VotingMachineCallbacksInterface(proposal.callbacks)
1946             .mintReputation(rewards[1].add(rewards[2]), _beneficiary, _proposalId);
1947             emit RedeemReputation(
1948             _proposalId,
1949             organizations[proposal.organizationId],
1950             _beneficiary,
1951             rewards[1].add(rewards[2])
1952             );
1953         }
1954     }
1955 
1956     /**
1957      * @dev redeemDaoBounty a reward for a successful stake.
1958      * The function use a beneficiary address as a parameter (and not msg.sender) to enable
1959      * users to redeem on behalf of someone else.
1960      * @param _proposalId the ID of the proposal
1961      * @param _beneficiary - the beneficiary address
1962      * @return redeemedAmount - redeem token amount
1963      * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the organization )
1964      */
1965     function redeemDaoBounty(bytes32 _proposalId, address _beneficiary)
1966     public
1967     returns(uint256 redeemedAmount, uint256 potentialAmount) {
1968         Proposal storage proposal = proposals[_proposalId];
1969         require(proposal.state == ProposalState.Executed);
1970         uint256 totalWinningStakes = proposal.stakes[proposal.winningVote];
1971         Staker storage staker = proposal.stakers[_beneficiary];
1972         if (
1973             (staker.amount4Bounty > 0)&&
1974             (staker.vote == proposal.winningVote)&&
1975             (proposal.winningVote == YES)&&
1976             (totalWinningStakes != 0)) {
1977             //as staker
1978                 potentialAmount = (staker.amount4Bounty * proposal.daoBounty)/totalWinningStakes;
1979             }
1980         if ((potentialAmount != 0)&&
1981             (VotingMachineCallbacksInterface(proposal.callbacks)
1982             .balanceOfStakingToken(stakingToken, _proposalId) >= potentialAmount)) {
1983             staker.amount4Bounty = 0;
1984             proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);
1985             require(
1986             VotingMachineCallbacksInterface(proposal.callbacks)
1987             .stakingTokenTransfer(stakingToken, _beneficiary, potentialAmount, _proposalId));
1988             redeemedAmount = potentialAmount;
1989             emit RedeemDaoBounty(_proposalId, organizations[proposal.organizationId], _beneficiary, redeemedAmount);
1990         }
1991     }
1992 
1993     /**
1994       * @dev calcExecuteCallBounty calculate the execute boosted call bounty
1995       * @param _proposalId the ID of the proposal
1996       * @return uint256 executeCallBounty
1997     */
1998     function calcExecuteCallBounty(bytes32 _proposalId) public view returns(uint256) {
1999         uint maxRewardSeconds = 1500;
2000         uint rewardSeconds =
2001         uint256(maxRewardSeconds).min(proposals[_proposalId].secondsFromTimeOutTillExecuteBoosted);
2002         return rewardSeconds.mul(proposals[_proposalId].stakes[YES]).div(maxRewardSeconds*10);
2003     }
2004 
2005     /**
2006      * @dev shouldBoost check if a proposal should be shifted to boosted phase.
2007      * @param _proposalId the ID of the proposal
2008      * @return bool true or false.
2009      */
2010     function shouldBoost(bytes32 _proposalId) public view returns(bool) {
2011         Proposal memory proposal = proposals[_proposalId];
2012         return (_score(_proposalId) > threshold(proposal.paramsHash, proposal.organizationId));
2013     }
2014 
2015     /**
2016      * @dev threshold return the organization's score threshold which required by
2017      * a proposal to shift to boosted state.
2018      * This threshold is dynamically set and it depend on the number of boosted proposal.
2019      * @param _organizationId the organization identifier
2020      * @param _paramsHash the organization parameters hash
2021      * @return uint256 organization's score threshold as real number.
2022      */
2023     function threshold(bytes32 _paramsHash, bytes32 _organizationId) public view returns(uint256) {
2024         uint256 power = orgBoostedProposalsCnt[_organizationId];
2025         Parameters storage params = parameters[_paramsHash];
2026 
2027         if (power > params.limitExponentValue) {
2028             power = params.limitExponentValue;
2029         }
2030 
2031         return params.thresholdConst.pow(power);
2032     }
2033 
2034   /**
2035    * @dev hashParameters returns a hash of the given parameters
2036    */
2037     function getParametersHash(
2038         uint[11] memory _params,//use array here due to stack too deep issue.
2039         address _voteOnBehalf
2040     )
2041         public
2042         pure
2043         returns(bytes32)
2044         {
2045         //double call to keccak256 to avoid deep stack issue when call with too many params.
2046         return keccak256(
2047             abi.encodePacked(
2048             keccak256(
2049             abi.encodePacked(
2050                 _params[0],
2051                 _params[1],
2052                 _params[2],
2053                 _params[3],
2054                 _params[4],
2055                 _params[5],
2056                 _params[6],
2057                 _params[7],
2058                 _params[8],
2059                 _params[9],
2060                 _params[10])
2061             ),
2062             _voteOnBehalf
2063         ));
2064     }
2065 
2066     /**
2067       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2068       * @param _proposalId the id of the proposal
2069       * @return bool true - the proposal has been executed
2070       *              false - otherwise.
2071      */
2072      // solhint-disable-next-line function-max-lines,code-complexity
2073     function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {
2074         Proposal storage proposal = proposals[_proposalId];
2075         Parameters memory params = parameters[proposal.paramsHash];
2076         Proposal memory tmpProposal = proposal;
2077         uint256 totalReputation =
2078         VotingMachineCallbacksInterface(proposal.callbacks).getTotalReputationSupply(_proposalId);
2079         //first divide by 100 to prevent overflow
2080         uint256 executionBar = (totalReputation/100) * params.queuedVoteRequiredPercentage;
2081         ExecutionState executionState = ExecutionState.None;
2082         uint256 averageDownstakesOfBoosted;
2083         uint256 confidenceThreshold;
2084 
2085         if (proposal.votes[proposal.winningVote] > executionBar) {
2086          // someone crossed the absolute vote execution bar.
2087             if (proposal.state == ProposalState.Queued) {
2088                 executionState = ExecutionState.QueueBarCrossed;
2089             } else if (proposal.state == ProposalState.PreBoosted) {
2090                 executionState = ExecutionState.PreBoostedBarCrossed;
2091             } else {
2092                 executionState = ExecutionState.BoostedBarCrossed;
2093             }
2094             proposal.state = ProposalState.Executed;
2095         } else {
2096             if (proposal.state == ProposalState.Queued) {
2097                 // solhint-disable-next-line not-rely-on-time
2098                 if ((now - proposal.times[0]) >= params.queuedVotePeriodLimit) {
2099                     proposal.state = ProposalState.ExpiredInQueue;
2100                     proposal.winningVote = NO;
2101                     executionState = ExecutionState.QueueTimeOut;
2102                 } else {
2103                     confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
2104                     if (_score(_proposalId) > confidenceThreshold) {
2105                         //change proposal mode to PreBoosted mode.
2106                         proposal.state = ProposalState.PreBoosted;
2107                         // solhint-disable-next-line not-rely-on-time
2108                         proposal.times[2] = now;
2109                         proposal.confidenceThreshold = confidenceThreshold;
2110                     }
2111                 }
2112             }
2113 
2114             if (proposal.state == ProposalState.PreBoosted) {
2115                 confidenceThreshold = threshold(proposal.paramsHash, proposal.organizationId);
2116               // solhint-disable-next-line not-rely-on-time
2117                 if ((now - proposal.times[2]) >= params.preBoostedVotePeriodLimit) {
2118                     if (_score(_proposalId) > confidenceThreshold) {
2119                         if (orgBoostedProposalsCnt[proposal.organizationId] < MAX_BOOSTED_PROPOSALS) {
2120                          //change proposal mode to Boosted mode.
2121                             proposal.state = ProposalState.Boosted;
2122                          // solhint-disable-next-line not-rely-on-time
2123                             proposal.times[1] = now;
2124                             orgBoostedProposalsCnt[proposal.organizationId]++;
2125                          //add a value to average -> average = average + ((value - average) / nbValues)
2126                             averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2127                           // solium-disable-next-line indentation
2128                             averagesDownstakesOfBoosted[proposal.organizationId] =
2129                                 uint256(int256(averageDownstakesOfBoosted) +
2130                                 ((int256(proposal.stakes[NO])-int256(averageDownstakesOfBoosted))/
2131                                 int256(orgBoostedProposalsCnt[proposal.organizationId])));
2132                         }
2133                     } else {
2134                         proposal.state = ProposalState.Queued;
2135                     }
2136                 } else { //check the Confidence level is stable
2137                     uint256 proposalScore = _score(_proposalId);
2138                     if (proposalScore <= proposal.confidenceThreshold.min(confidenceThreshold)) {
2139                         proposal.state = ProposalState.Queued;
2140                     } else if (proposal.confidenceThreshold > proposalScore) {
2141                         proposal.confidenceThreshold = confidenceThreshold;
2142                         emit ConfidenceLevelChange(_proposalId, confidenceThreshold);
2143                     }
2144                 }
2145             }
2146         }
2147 
2148         if ((proposal.state == ProposalState.Boosted) ||
2149             (proposal.state == ProposalState.QuietEndingPeriod)) {
2150             // solhint-disable-next-line not-rely-on-time
2151             if ((now - proposal.times[1]) >= proposal.currentBoostedVotePeriodLimit) {
2152                 proposal.state = ProposalState.Executed;
2153                 executionState = ExecutionState.BoostedTimeOut;
2154             }
2155         }
2156 
2157         if (executionState != ExecutionState.None) {
2158             if ((executionState == ExecutionState.BoostedTimeOut) ||
2159                 (executionState == ExecutionState.BoostedBarCrossed)) {
2160                 orgBoostedProposalsCnt[tmpProposal.organizationId] =
2161                 orgBoostedProposalsCnt[tmpProposal.organizationId].sub(1);
2162                 //remove a value from average = ((average * nbValues) - value) / (nbValues - 1);
2163                 uint256 boostedProposals = orgBoostedProposalsCnt[tmpProposal.organizationId];
2164                 if (boostedProposals == 0) {
2165                     averagesDownstakesOfBoosted[proposal.organizationId] = 0;
2166                 } else {
2167                     averageDownstakesOfBoosted = averagesDownstakesOfBoosted[proposal.organizationId];
2168                     averagesDownstakesOfBoosted[proposal.organizationId] =
2169                     (averageDownstakesOfBoosted.mul(boostedProposals+1).sub(proposal.stakes[NO]))/boostedProposals;
2170                 }
2171             }
2172             emit ExecuteProposal(
2173             _proposalId,
2174             organizations[proposal.organizationId],
2175             proposal.winningVote,
2176             totalReputation
2177             );
2178             emit GPExecuteProposal(_proposalId, executionState);
2179             ProposalExecuteInterface(proposal.callbacks).executeProposal(_proposalId, int(proposal.winningVote));
2180             proposal.daoBounty = proposal.daoBountyRemain;
2181         }
2182         if (tmpProposal.state != proposal.state) {
2183             emit StateChange(_proposalId, proposal.state);
2184         }
2185         return (executionState != ExecutionState.None);
2186     }
2187 
2188     /**
2189      * @dev staking function
2190      * @param _proposalId id of the proposal
2191      * @param _vote  NO(2) or YES(1).
2192      * @param _amount the betting amount
2193      * @return bool true - the proposal has been executed
2194      *              false - otherwise.
2195      */
2196     function _stake(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _staker) internal returns(bool) {
2197         // 0 is not a valid vote.
2198         require(_vote <= NUM_OF_CHOICES && _vote > 0, "wrong vote value");
2199         require(_amount > 0, "staking amount should be >0");
2200 
2201         if (_execute(_proposalId)) {
2202             return true;
2203         }
2204         Proposal storage proposal = proposals[_proposalId];
2205 
2206         if ((proposal.state != ProposalState.PreBoosted) &&
2207             (proposal.state != ProposalState.Queued)) {
2208             return false;
2209         }
2210 
2211         // enable to increase stake only on the previous stake vote
2212         Staker storage staker = proposal.stakers[_staker];
2213         if ((staker.amount > 0) && (staker.vote != _vote)) {
2214             return false;
2215         }
2216 
2217         uint256 amount = _amount;
2218         require(stakingToken.transferFrom(_staker, address(this), amount), "fail transfer from staker");
2219         proposal.totalStakes = proposal.totalStakes.add(amount); //update totalRedeemableStakes
2220         staker.amount = staker.amount.add(amount);
2221         //This is to prevent average downstakes calculation overflow
2222         //Note that any how GEN cap is 100000000 ether.
2223         require(staker.amount <= 0x100000000000000000000000000000000, "staking amount is too high");
2224         require(proposal.totalStakes <= uint256(0x100000000000000000000000000000000).sub(proposal.daoBountyRemain),
2225                 "total stakes is too high");
2226 
2227         if (_vote == YES) {
2228             staker.amount4Bounty = staker.amount4Bounty.add(amount);
2229         }
2230         staker.vote = _vote;
2231 
2232         proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);
2233         emit Stake(_proposalId, organizations[proposal.organizationId], _staker, _vote, _amount);
2234         return _execute(_proposalId);
2235     }
2236 
2237     /**
2238      * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead
2239      * @param _proposalId id of the proposal
2240      * @param _voter used in case the vote is cast for someone else
2241      * @param _vote a value between 0 to and the proposal's number of choices.
2242      * @param _rep how many reputation the voter would like to stake for this vote.
2243      *         if  _rep==0 so the voter full reputation will be use.
2244      * @return true in case of proposal execution otherwise false
2245      * throws if proposal is not open or if it has been executed
2246      * NB: executes the proposal if a decision has been reached
2247      */
2248      // solhint-disable-next-line function-max-lines,code-complexity
2249     function internalVote(bytes32 _proposalId, address _voter, uint256 _vote, uint256 _rep) internal returns(bool) {
2250         require(_vote <= NUM_OF_CHOICES && _vote > 0, "0 < _vote <= 2");
2251         if (_execute(_proposalId)) {
2252             return true;
2253         }
2254 
2255         Parameters memory params = parameters[proposals[_proposalId].paramsHash];
2256         Proposal storage proposal = proposals[_proposalId];
2257 
2258         // Check voter has enough reputation:
2259         uint256 reputation = VotingMachineCallbacksInterface(proposal.callbacks).reputationOf(_voter, _proposalId);
2260         require(reputation > 0, "_voter must have reputation");
2261         require(reputation >= _rep, "reputation >= _rep");
2262         uint256 rep = _rep;
2263         if (rep == 0) {
2264             rep = reputation;
2265         }
2266         // If this voter has already voted, return false.
2267         if (proposal.voters[_voter].reputation != 0) {
2268             return false;
2269         }
2270         // The voting itself:
2271         proposal.votes[_vote] = rep.add(proposal.votes[_vote]);
2272         //check if the current winningVote changed or there is a tie.
2273         //for the case there is a tie the current winningVote set to NO.
2274         if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||
2275             ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&
2276             proposal.winningVote == YES)) {
2277             if (proposal.state == ProposalState.Boosted &&
2278             // solhint-disable-next-line not-rely-on-time
2279                 ((now - proposal.times[1]) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod))||
2280                 proposal.state == ProposalState.QuietEndingPeriod) {
2281                 //quietEndingPeriod
2282                 if (proposal.state != ProposalState.QuietEndingPeriod) {
2283                     proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;
2284                     proposal.state = ProposalState.QuietEndingPeriod;
2285                     emit StateChange(_proposalId, proposal.state);
2286                 }
2287                 // solhint-disable-next-line not-rely-on-time
2288                 proposal.times[1] = now;
2289             }
2290             proposal.winningVote = _vote;
2291         }
2292         proposal.voters[_voter] = Voter({
2293             reputation: rep,
2294             vote: _vote,
2295             preBoosted:((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued))
2296         });
2297         if ((proposal.state == ProposalState.PreBoosted) || (proposal.state == ProposalState.Queued)) {
2298             proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);
2299             uint256 reputationDeposit = (params.votersReputationLossRatio.mul(rep))/100;
2300             VotingMachineCallbacksInterface(proposal.callbacks).burnReputation(reputationDeposit, _voter, _proposalId);
2301         }
2302         emit VoteProposal(_proposalId, organizations[proposal.organizationId], _voter, _vote, rep);
2303         return _execute(_proposalId);
2304     }
2305 
2306     /**
2307      * @dev _score return the proposal score (Confidence level)
2308      * For dual choice proposal S = (S+)/(S-)
2309      * @param _proposalId the ID of the proposal
2310      * @return uint256 proposal score as real number.
2311      */
2312     function _score(bytes32 _proposalId) internal view returns(uint256) {
2313         Proposal storage proposal = proposals[_proposalId];
2314         //proposal.stakes[NO] cannot be zero as the dao downstake > 0 for each proposal.
2315         return uint216(proposal.stakes[YES]).fraction(uint216(proposal.stakes[NO]));
2316     }
2317 
2318     /**
2319       * @dev _isVotable check if the proposal is votable
2320       * @param _proposalId the ID of the proposal
2321       * @return bool true or false
2322     */
2323     function _isVotable(bytes32 _proposalId) internal view returns(bool) {
2324         ProposalState pState = proposals[_proposalId].state;
2325         return ((pState == ProposalState.PreBoosted)||
2326                 (pState == ProposalState.Boosted)||
2327                 (pState == ProposalState.QuietEndingPeriod)||
2328                 (pState == ProposalState.Queued)
2329         );
2330     }
2331 }
2332 
2333 // File: @daostack/infra/contracts/votingMachines/GenesisProtocol.sol
2334 
2335 pragma solidity ^0.5.11;
2336 
2337 
2338 
2339 
2340 /**
2341  * @title GenesisProtocol implementation -an organization's voting machine scheme.
2342  */
2343 contract GenesisProtocol is IntVoteInterface, GenesisProtocolLogic {
2344     using ECDSA for bytes32;
2345 
2346     // Digest describing the data the user signs according EIP 712.
2347     // Needs to match what is passed to Metamask.
2348     bytes32 public constant DELEGATION_HASH_EIP712 =
2349     keccak256(abi.encodePacked(
2350     "address GenesisProtocolAddress",
2351     "bytes32 ProposalId",
2352     "uint256 Vote",
2353     "uint256 AmountToStake",
2354     "uint256 Nonce"
2355     ));
2356 
2357     mapping(address=>uint256) public stakesNonce; //stakes Nonce
2358 
2359     /**
2360      * @dev Constructor
2361      */
2362     constructor(IERC20 _stakingToken)
2363     public
2364     // solhint-disable-next-line no-empty-blocks
2365     GenesisProtocolLogic(_stakingToken) {
2366     }
2367 
2368     /**
2369      * @dev staking function
2370      * @param _proposalId id of the proposal
2371      * @param _vote  NO(2) or YES(1).
2372      * @param _amount the betting amount
2373      * @return bool true - the proposal has been executed
2374      *              false - otherwise.
2375      */
2376     function stake(bytes32 _proposalId, uint256 _vote, uint256 _amount) external returns(bool) {
2377         return _stake(_proposalId, _vote, _amount, msg.sender);
2378     }
2379 
2380     /**
2381      * @dev stakeWithSignature function
2382      * @param _proposalId id of the proposal
2383      * @param _vote  NO(2) or YES(1).
2384      * @param _amount the betting amount
2385      * @param _nonce nonce value ,it is part of the signature to ensure that
2386               a signature can be received only once.
2387      * @param _signatureType signature type
2388               1 - for web3.eth.sign
2389               2 - for eth_signTypedData according to EIP #712.
2390      * @param _signature  - signed data by the staker
2391      * @return bool true - the proposal has been executed
2392      *              false - otherwise.
2393      */
2394     function stakeWithSignature(
2395         bytes32 _proposalId,
2396         uint256 _vote,
2397         uint256 _amount,
2398         uint256 _nonce,
2399         uint256 _signatureType,
2400         bytes calldata _signature
2401         )
2402         external
2403         returns(bool)
2404         {
2405         // Recreate the digest the user signed
2406         bytes32 delegationDigest;
2407         if (_signatureType == 2) {
2408             delegationDigest = keccak256(
2409                 abi.encodePacked(
2410                     DELEGATION_HASH_EIP712, keccak256(
2411                         abi.encodePacked(
2412                         address(this),
2413                         _proposalId,
2414                         _vote,
2415                         _amount,
2416                         _nonce)
2417                     )
2418                 )
2419             );
2420         } else {
2421             delegationDigest = keccak256(
2422                         abi.encodePacked(
2423                         address(this),
2424                         _proposalId,
2425                         _vote,
2426                         _amount,
2427                         _nonce)
2428                     ).toEthSignedMessageHash();
2429         }
2430         address staker = delegationDigest.recover(_signature);
2431         //a garbage staker address due to wrong signature will revert due to lack of approval and funds.
2432         require(staker != address(0), "staker address cannot be 0");
2433         require(stakesNonce[staker] == _nonce);
2434         stakesNonce[staker] = stakesNonce[staker].add(1);
2435         return _stake(_proposalId, _vote, _amount, staker);
2436     }
2437 
2438     /**
2439      * @dev voting function
2440      * @param _proposalId id of the proposal
2441      * @param _vote NO(2) or YES(1).
2442      * @param _amount the reputation amount to vote with . if _amount == 0 it will use all voter reputation.
2443      * @param _voter voter address
2444      * @return bool true - the proposal has been executed
2445      *              false - otherwise.
2446      */
2447     function vote(bytes32 _proposalId, uint256 _vote, uint256 _amount, address _voter)
2448     external
2449     votable(_proposalId)
2450     returns(bool) {
2451         Proposal storage proposal = proposals[_proposalId];
2452         Parameters memory params = parameters[proposal.paramsHash];
2453         address voter;
2454         if (params.voteOnBehalf != address(0)) {
2455             require(msg.sender == params.voteOnBehalf);
2456             voter = _voter;
2457         } else {
2458             voter = msg.sender;
2459         }
2460         return internalVote(_proposalId, voter, _vote, _amount);
2461     }
2462 
2463   /**
2464    * @dev Cancel the vote of the msg.sender.
2465    * cancel vote is not allow in genesisProtocol so this function doing nothing.
2466    * This function is here in order to comply to the IntVoteInterface .
2467    */
2468     function cancelVote(bytes32 _proposalId) external votable(_proposalId) {
2469        //this is not allowed
2470         return;
2471     }
2472 
2473     /**
2474       * @dev execute check if the proposal has been decided, and if so, execute the proposal
2475       * @param _proposalId the id of the proposal
2476       * @return bool true - the proposal has been executed
2477       *              false - otherwise.
2478      */
2479     function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {
2480         return _execute(_proposalId);
2481     }
2482 
2483   /**
2484     * @dev getNumberOfChoices returns the number of choices possible in this proposal
2485     * @return uint256 that contains number of choices
2486     */
2487     function getNumberOfChoices(bytes32) external view returns(uint256) {
2488         return NUM_OF_CHOICES;
2489     }
2490 
2491     /**
2492       * @dev getProposalTimes returns proposals times variables.
2493       * @param _proposalId id of the proposal
2494       * @return proposals times array
2495       */
2496     function getProposalTimes(bytes32 _proposalId) external view returns(uint[3] memory times) {
2497         return proposals[_proposalId].times;
2498     }
2499 
2500     /**
2501      * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal
2502      * @param _proposalId the ID of the proposal
2503      * @param _voter the address of the voter
2504      * @return uint256 vote - the voters vote
2505      *        uint256 reputation - amount of reputation committed by _voter to _proposalId
2506      */
2507     function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {
2508         Voter memory voter = proposals[_proposalId].voters[_voter];
2509         return (voter.vote, voter.reputation);
2510     }
2511 
2512     /**
2513     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.
2514     * @param _proposalId the ID of the proposal
2515     * @param _choice the index in the
2516     * @return voted reputation for the given choice
2517     */
2518     function voteStatus(bytes32 _proposalId, uint256 _choice) external view returns(uint256) {
2519         return proposals[_proposalId].votes[_choice];
2520     }
2521 
2522     /**
2523     * @dev isVotable check if the proposal is votable
2524     * @param _proposalId the ID of the proposal
2525     * @return bool true or false
2526     */
2527     function isVotable(bytes32 _proposalId) external view returns(bool) {
2528         return _isVotable(_proposalId);
2529     }
2530 
2531     /**
2532     * @dev proposalStatus return the total votes and stakes for a given proposal
2533     * @param _proposalId the ID of the proposal
2534     * @return uint256 preBoostedVotes YES
2535     * @return uint256 preBoostedVotes NO
2536     * @return uint256 total stakes YES
2537     * @return uint256 total stakes NO
2538     */
2539     function proposalStatus(bytes32 _proposalId) external view returns(uint256, uint256, uint256, uint256) {
2540         return (
2541                 proposals[_proposalId].preBoostedVotes[YES],
2542                 proposals[_proposalId].preBoostedVotes[NO],
2543                 proposals[_proposalId].stakes[YES],
2544                 proposals[_proposalId].stakes[NO]
2545         );
2546     }
2547 
2548   /**
2549     * @dev getProposalOrganization return the organizationId for a given proposal
2550     * @param _proposalId the ID of the proposal
2551     * @return bytes32 organization identifier
2552     */
2553     function getProposalOrganization(bytes32 _proposalId) external view returns(bytes32) {
2554         return (proposals[_proposalId].organizationId);
2555     }
2556 
2557     /**
2558       * @dev getStaker return the vote and stake amount for a given proposal and staker
2559       * @param _proposalId the ID of the proposal
2560       * @param _staker staker address
2561       * @return uint256 vote
2562       * @return uint256 amount
2563     */
2564     function getStaker(bytes32 _proposalId, address _staker) external view returns(uint256, uint256) {
2565         return (proposals[_proposalId].stakers[_staker].vote, proposals[_proposalId].stakers[_staker].amount);
2566     }
2567 
2568     /**
2569       * @dev voteStake return the amount stakes for a given proposal and vote
2570       * @param _proposalId the ID of the proposal
2571       * @param _vote vote number
2572       * @return uint256 stake amount
2573     */
2574     function voteStake(bytes32 _proposalId, uint256 _vote) external view returns(uint256) {
2575         return proposals[_proposalId].stakes[_vote];
2576     }
2577 
2578   /**
2579     * @dev voteStake return the winningVote for a given proposal
2580     * @param _proposalId the ID of the proposal
2581     * @return uint256 winningVote
2582     */
2583     function winningVote(bytes32 _proposalId) external view returns(uint256) {
2584         return proposals[_proposalId].winningVote;
2585     }
2586 
2587     /**
2588       * @dev voteStake return the state for a given proposal
2589       * @param _proposalId the ID of the proposal
2590       * @return ProposalState proposal state
2591     */
2592     function state(bytes32 _proposalId) external view returns(ProposalState) {
2593         return proposals[_proposalId].state;
2594     }
2595 
2596    /**
2597     * @dev isAbstainAllow returns if the voting machine allow abstain (0)
2598     * @return bool true or false
2599     */
2600     function isAbstainAllow() external pure returns(bool) {
2601         return false;
2602     }
2603 
2604     /**
2605      * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.
2606      * @return min - minimum number of choices
2607                max - maximum number of choices
2608      */
2609     function getAllowedRangeOfChoices() external pure returns(uint256 min, uint256 max) {
2610         return (YES, NO);
2611     }
2612 
2613     /**
2614      * @dev score return the proposal score
2615      * @param _proposalId the ID of the proposal
2616      * @return uint256 proposal score.
2617      */
2618     function score(bytes32 _proposalId) public view returns(uint256) {
2619         return  _score(_proposalId);
2620     }
2621 }
2622 
2623 // File: contracts/votingMachines/VotingMachineCallbacks.sol
2624 
2625 pragma solidity ^0.5.11;
2626 
2627 
2628 
2629 
2630 contract VotingMachineCallbacks is VotingMachineCallbacksInterface {
2631 
2632     struct ProposalInfo {
2633         uint256 blockNumber; // the proposal's block number
2634         Avatar avatar; // the proposal's avatar
2635     }
2636 
2637     modifier onlyVotingMachine(bytes32 _proposalId) {
2638         require(proposalsInfo[msg.sender][_proposalId].avatar != Avatar(address(0)), "only VotingMachine");
2639         _;
2640     }
2641 
2642     // VotingMaching  ->  proposalId  ->  ProposalInfo
2643     mapping(address => mapping(bytes32 => ProposalInfo)) public proposalsInfo;
2644 
2645     function mintReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2646     external
2647     onlyVotingMachine(_proposalId)
2648     returns(bool)
2649     {
2650         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2651         if (avatar == Avatar(0)) {
2652             return false;
2653         }
2654         return ControllerInterface(avatar.owner()).mintReputation(_amount, _beneficiary, address(avatar));
2655     }
2656 
2657     function burnReputation(uint256 _amount, address _beneficiary, bytes32 _proposalId)
2658     external
2659     onlyVotingMachine(_proposalId)
2660     returns(bool)
2661     {
2662         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2663         if (avatar == Avatar(0)) {
2664             return false;
2665         }
2666         return ControllerInterface(avatar.owner()).burnReputation(_amount, _beneficiary, address(avatar));
2667     }
2668 
2669     function stakingTokenTransfer(
2670         IERC20 _stakingToken,
2671         address _beneficiary,
2672         uint256 _amount,
2673         bytes32 _proposalId)
2674     external
2675     onlyVotingMachine(_proposalId)
2676     returns(bool)
2677     {
2678         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2679         if (avatar == Avatar(0)) {
2680             return false;
2681         }
2682         return ControllerInterface(avatar.owner()).externalTokenTransfer(_stakingToken, _beneficiary, _amount, avatar);
2683     }
2684 
2685     function balanceOfStakingToken(IERC20 _stakingToken, bytes32 _proposalId) external view returns(uint256) {
2686         Avatar avatar = proposalsInfo[msg.sender][_proposalId].avatar;
2687         if (proposalsInfo[msg.sender][_proposalId].avatar == Avatar(0)) {
2688             return 0;
2689         }
2690         return _stakingToken.balanceOf(address(avatar));
2691     }
2692 
2693     function getTotalReputationSupply(bytes32 _proposalId) external view returns(uint256) {
2694         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2695         if (proposal.avatar == Avatar(0)) {
2696             return 0;
2697         }
2698         return proposal.avatar.nativeReputation().totalSupplyAt(proposal.blockNumber);
2699     }
2700 
2701     function reputationOf(address _owner, bytes32 _proposalId) external view returns(uint256) {
2702         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2703         if (proposal.avatar == Avatar(0)) {
2704             return 0;
2705         }
2706         return proposal.avatar.nativeReputation().balanceOfAt(_owner, proposal.blockNumber);
2707     }
2708 }
2709 
2710 // File: contracts/universalSchemes/ContributionReward.sol
2711 
2712 pragma solidity ^0.5.11;
2713 
2714 
2715 
2716 
2717 
2718 
2719 /**
2720  * @title A scheme for proposing and rewarding contributions to an organization
2721  * @dev An agent can ask an organization to recognize a contribution and reward
2722  * him with token, reputation, ether or any combination.
2723  */
2724 
2725 contract ContributionReward is UniversalScheme, VotingMachineCallbacks, ProposalExecuteInterface {
2726     using SafeMath for uint;
2727 
2728     event NewContributionProposal(
2729         address indexed _avatar,
2730         bytes32 indexed _proposalId,
2731         address indexed _intVoteInterface,
2732         string _descriptionHash,
2733         int256 _reputationChange,
2734         uint[5]  _rewards,
2735         IERC20 _externalToken,
2736         address _beneficiary
2737     );
2738 
2739     event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
2740 
2741     event RedeemReputation(
2742         address indexed _avatar,
2743         bytes32 indexed _proposalId,
2744         address indexed _beneficiary,
2745         int256 _amount);
2746 
2747     event RedeemEther(address indexed _avatar,
2748         bytes32 indexed _proposalId,
2749         address indexed _beneficiary,
2750         uint256 _amount);
2751 
2752     event RedeemNativeToken(address indexed _avatar,
2753         bytes32 indexed _proposalId,
2754         address indexed _beneficiary,
2755         uint256 _amount);
2756 
2757     event RedeemExternalToken(address indexed _avatar,
2758         bytes32 indexed _proposalId,
2759         address indexed _beneficiary,
2760         uint256 _amount);
2761 
2762     // A struct holding the data for a contribution proposal
2763     struct ContributionProposal {
2764         uint256 nativeTokenReward; // Reward asked in the native token of the organization.
2765         int256 reputationChange; // Organization reputation reward requested.
2766         uint256 ethReward;
2767         IERC20 externalToken;
2768         uint256 externalTokenReward;
2769         address payable beneficiary;
2770         uint256 periodLength;
2771         uint256 numberOfPeriods;
2772         uint256 executionTime;
2773         uint[4] redeemedPeriods;
2774     }
2775 
2776     // A mapping from the organization (Avatar) address to the saved data of the organization:
2777     mapping(address=>mapping(bytes32=>ContributionProposal)) public organizationsProposals;
2778 
2779     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2780     struct Parameters {
2781         bytes32 voteApproveParams;
2782         IntVoteInterface intVote;
2783     }
2784 
2785     // A mapping from hashes to parameters (use to store a particular configuration on the controller)
2786     mapping(bytes32=>Parameters) public parameters;
2787 
2788     /**
2789     * @dev execution of proposals, can only be called by the voting machine in which the vote is held.
2790     * @param _proposalId the ID of the voting in the voting machine
2791     * @param _param a parameter of the voting result, 1 yes and 2 is no.
2792     */
2793     function executeProposal(bytes32 _proposalId, int256 _param) external onlyVotingMachine(_proposalId) returns(bool) {
2794         ProposalInfo memory proposal = proposalsInfo[msg.sender][_proposalId];
2795         require(organizationsProposals[address(proposal.avatar)][_proposalId].executionTime == 0);
2796         require(organizationsProposals[address(proposal.avatar)][_proposalId].beneficiary != address(0));
2797         // Check if vote was successful:
2798         if (_param == 1) {
2799           // solhint-disable-next-line not-rely-on-time
2800             organizationsProposals[address(proposal.avatar)][_proposalId].executionTime = now;
2801         }
2802         emit ProposalExecuted(address(proposal.avatar), _proposalId, _param);
2803         return true;
2804     }
2805 
2806     /**
2807     * @dev hash the parameters, save them if necessary, and return the hash value
2808     */
2809     function setParameters(
2810         bytes32 _voteApproveParams,
2811         IntVoteInterface _intVote
2812     ) public returns(bytes32)
2813     {
2814         bytes32 paramsHash = getParametersHash(
2815             _voteApproveParams,
2816             _intVote
2817         );
2818         parameters[paramsHash].voteApproveParams = _voteApproveParams;
2819         parameters[paramsHash].intVote = _intVote;
2820         return paramsHash;
2821     }
2822 
2823     /**
2824     * @dev Submit a proposal for a reward for a contribution:
2825     * @param _avatar Avatar of the organization that the contribution was made for
2826     * @param _descriptionHash A hash of the proposal's description
2827     * @param _reputationChange - Amount of reputation change requested .Can be negative.
2828     * @param _rewards rewards array:
2829     *         rewards[0] - Amount of tokens requested per period
2830     *         rewards[1] - Amount of ETH requested per period
2831     *         rewards[2] - Amount of external tokens requested per period
2832     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
2833     *         rewards[4] - Number of periods
2834     * @param _externalToken Address of external token, if reward is requested there
2835     * @param _beneficiary Who gets the rewards
2836     */
2837     function proposeContributionReward(
2838         Avatar _avatar,
2839         string memory _descriptionHash,
2840         int256 _reputationChange,
2841         uint[5] memory _rewards,
2842         IERC20 _externalToken,
2843         address payable _beneficiary
2844     )
2845     public
2846     returns(bytes32)
2847     {
2848         validateProposalParams(_reputationChange, _rewards);
2849         Parameters memory controllerParams = parameters[getParametersFromController(_avatar)];
2850 
2851         bytes32 contributionId = controllerParams.intVote.propose(
2852         2,
2853         controllerParams.voteApproveParams,
2854         msg.sender,
2855         address(_avatar)
2856         );
2857 
2858         address payable beneficiary = _beneficiary;
2859         if (beneficiary == address(0)) {
2860             beneficiary = msg.sender;
2861         }
2862 
2863         ContributionProposal memory proposal = ContributionProposal({
2864             nativeTokenReward: _rewards[0],
2865             reputationChange: _reputationChange,
2866             ethReward: _rewards[1],
2867             externalToken: _externalToken,
2868             externalTokenReward: _rewards[2],
2869             beneficiary: beneficiary,
2870             periodLength: _rewards[3],
2871             numberOfPeriods: _rewards[4],
2872             executionTime: 0,
2873             redeemedPeriods:[uint(0), uint(0), uint(0), uint(0)]
2874         });
2875         organizationsProposals[address(_avatar)][contributionId] = proposal;
2876 
2877         emit NewContributionProposal(
2878             address(_avatar),
2879             contributionId,
2880             address(controllerParams.intVote),
2881             _descriptionHash,
2882             _reputationChange,
2883             _rewards,
2884             _externalToken,
2885             beneficiary
2886         );
2887 
2888         proposalsInfo[address(controllerParams.intVote)][contributionId] = ProposalInfo({
2889             blockNumber:block.number,
2890             avatar:_avatar
2891         });
2892         return contributionId;
2893     }
2894 
2895     /**
2896     * @dev RedeemReputation reward for proposal
2897     * @param _proposalId the ID of the voting in the voting machine
2898     * @param _avatar address of the controller
2899     * @return reputation the redeemed reputation.
2900     */
2901     function redeemReputation(bytes32 _proposalId, Avatar _avatar) public returns(int256 reputation) {
2902 
2903         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2904         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2905         require(proposal.executionTime != 0);
2906         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 0);
2907 
2908         //set proposal reward to zero to prevent reentrancy attack.
2909         proposal.reputationChange = 0;
2910         reputation = int(periodsToPay) * _proposal.reputationChange;
2911         if (reputation > 0) {
2912             require(
2913             ControllerInterface(
2914             _avatar.owner()).mintReputation(uint(reputation), _proposal.beneficiary, address(_avatar)));
2915         } else if (reputation < 0) {
2916             require(
2917             ControllerInterface(
2918             _avatar.owner()).burnReputation(uint(reputation*(-1)), _proposal.beneficiary, address(_avatar)));
2919         }
2920         if (reputation != 0) {
2921             proposal.redeemedPeriods[0] = proposal.redeemedPeriods[0].add(periodsToPay);
2922             emit RedeemReputation(address(_avatar), _proposalId, _proposal.beneficiary, reputation);
2923         }
2924         //restore proposal reward.
2925         proposal.reputationChange = _proposal.reputationChange;
2926     }
2927 
2928     /**
2929     * @dev RedeemNativeToken reward for proposal
2930     * @param _proposalId the ID of the voting in the voting machine
2931     * @param _avatar address of the controller
2932     * @return amount the redeemed nativeToken.
2933     */
2934     function redeemNativeToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2935 
2936         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2937         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2938         require(proposal.executionTime != 0);
2939         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 1);
2940         //set proposal rewards to zero to prevent reentrancy attack.
2941         proposal.nativeTokenReward = 0;
2942 
2943         amount = periodsToPay.mul(_proposal.nativeTokenReward);
2944         if (amount > 0) {
2945             require(ControllerInterface(_avatar.owner()).mintTokens(amount, _proposal.beneficiary, address(_avatar)));
2946             proposal.redeemedPeriods[1] = proposal.redeemedPeriods[1].add(periodsToPay);
2947             emit RedeemNativeToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2948         }
2949 
2950         //restore proposal reward.
2951         proposal.nativeTokenReward = _proposal.nativeTokenReward;
2952     }
2953 
2954     /**
2955     * @dev RedeemEther reward for proposal
2956     * @param _proposalId the ID of the voting in the voting machine
2957     * @param _avatar address of the controller
2958     * @return amount ether redeemed amount
2959     */
2960     function redeemEther(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2961 
2962         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2963         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2964         require(proposal.executionTime != 0);
2965         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 2);
2966         //set proposal rewards to zero to prevent reentrancy attack.
2967         proposal.ethReward = 0;
2968         amount = periodsToPay.mul(_proposal.ethReward);
2969 
2970         if (amount > 0) {
2971             require(ControllerInterface(_avatar.owner()).sendEther(amount, _proposal.beneficiary, _avatar));
2972             proposal.redeemedPeriods[2] = proposal.redeemedPeriods[2].add(periodsToPay);
2973             emit RedeemEther(address(_avatar), _proposalId, _proposal.beneficiary, amount);
2974         }
2975 
2976         //restore proposal reward.
2977         proposal.ethReward = _proposal.ethReward;
2978     }
2979 
2980     /**
2981     * @dev RedeemNativeToken reward for proposal
2982     * @param _proposalId the ID of the voting in the voting machine
2983     * @param _avatar address of the controller
2984     * @return amount the external token redeemed amount
2985     */
2986     function redeemExternalToken(bytes32 _proposalId, Avatar _avatar) public returns(uint256 amount) {
2987 
2988         ContributionProposal memory _proposal = organizationsProposals[address(_avatar)][_proposalId];
2989         ContributionProposal storage proposal = organizationsProposals[address(_avatar)][_proposalId];
2990         require(proposal.executionTime != 0);
2991         uint256 periodsToPay = getPeriodsToPay(_proposalId, address(_avatar), 3);
2992         //set proposal rewards to zero to prevent reentrancy attack.
2993         proposal.externalTokenReward = 0;
2994 
2995         if (proposal.externalToken != IERC20(0) && _proposal.externalTokenReward > 0) {
2996             amount = periodsToPay.mul(_proposal.externalTokenReward);
2997             if (amount > 0) {
2998                 require(
2999                 ControllerInterface(
3000                 _avatar.owner())
3001                 .externalTokenTransfer(_proposal.externalToken, _proposal.beneficiary, amount, _avatar));
3002                 proposal.redeemedPeriods[3] = proposal.redeemedPeriods[3].add(periodsToPay);
3003                 emit RedeemExternalToken(address(_avatar), _proposalId, _proposal.beneficiary, amount);
3004             }
3005         }
3006         //restore proposal reward.
3007         proposal.externalTokenReward = _proposal.externalTokenReward;
3008     }
3009 
3010     /**
3011     * @dev redeem rewards for proposal
3012     * @param _proposalId the ID of the voting in the voting machine
3013     * @param _avatar address of the controller
3014     * @param _whatToRedeem whatToRedeem array:
3015     *         whatToRedeem[0] - reputation
3016     *         whatToRedeem[1] - nativeTokenReward
3017     *         whatToRedeem[2] - Ether
3018     *         whatToRedeem[3] - ExternalToken
3019     * @return  result boolean array for each redeem type.
3020     */
3021     function redeem(bytes32 _proposalId, Avatar _avatar, bool[4] memory _whatToRedeem)
3022     public
3023     returns(int256 reputationReward, uint256 nativeTokenReward, uint256 etherReward, uint256 externalTokenReward)
3024     {
3025 
3026         if (_whatToRedeem[0]) {
3027             reputationReward = redeemReputation(_proposalId, _avatar);
3028         }
3029 
3030         if (_whatToRedeem[1]) {
3031             nativeTokenReward = redeemNativeToken(_proposalId, _avatar);
3032         }
3033 
3034         if (_whatToRedeem[2]) {
3035             etherReward = redeemEther(_proposalId, _avatar);
3036         }
3037 
3038         if (_whatToRedeem[3]) {
3039             externalTokenReward = redeemExternalToken(_proposalId, _avatar);
3040         }
3041     }
3042 
3043     /**
3044     * @dev getPeriodsToPay return the periods left to be paid for reputation,nativeToken,ether or externalToken.
3045     * The function ignore the reward amount to be paid (which can be zero).
3046     * @param _proposalId the ID of the voting in the voting machine
3047     * @param _avatar address of the controller
3048     * @param _redeemType - the type of the reward  :
3049     *         0 - reputation
3050     *         1 - nativeTokenReward
3051     *         2 - Ether
3052     *         3 - ExternalToken
3053     * @return  periods left to be paid.
3054     */
3055     function getPeriodsToPay(bytes32 _proposalId, address _avatar, uint256 _redeemType) public view returns (uint256) {
3056         require(_redeemType <= 3, "should be in the redeemedPeriods range");
3057         ContributionProposal memory _proposal = organizationsProposals[_avatar][_proposalId];
3058         if (_proposal.executionTime == 0)
3059             return 0;
3060         uint256 periodsFromExecution;
3061         if (_proposal.periodLength > 0) {
3062           // solhint-disable-next-line not-rely-on-time
3063             periodsFromExecution = (now.sub(_proposal.executionTime))/(_proposal.periodLength);
3064         }
3065         uint256 periodsToPay;
3066         if ((_proposal.periodLength == 0) || (periodsFromExecution >= _proposal.numberOfPeriods)) {
3067             periodsToPay = _proposal.numberOfPeriods.sub(_proposal.redeemedPeriods[_redeemType]);
3068         } else {
3069             periodsToPay = periodsFromExecution.sub(_proposal.redeemedPeriods[_redeemType]);
3070         }
3071         return periodsToPay;
3072     }
3073 
3074     /**
3075     * @dev getRedeemedPeriods return the already redeemed periods for reputation, nativeToken, ether or externalToken.
3076     * @param _proposalId the ID of the voting in the voting machine
3077     * @param _avatar address of the controller
3078     * @param _redeemType - the type of the reward  :
3079     *         0 - reputation
3080     *         1 - nativeTokenReward
3081     *         2 - Ether
3082     *         3 - ExternalToken
3083     * @return redeemed period.
3084     */
3085     function getRedeemedPeriods(bytes32 _proposalId, address _avatar, uint256 _redeemType)
3086     public
3087     view
3088     returns (uint256) {
3089         return organizationsProposals[_avatar][_proposalId].redeemedPeriods[_redeemType];
3090     }
3091 
3092     function getProposalEthReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3093         return organizationsProposals[_avatar][_proposalId].ethReward;
3094     }
3095 
3096     function getProposalExternalTokenReward(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3097         return organizationsProposals[_avatar][_proposalId].externalTokenReward;
3098     }
3099 
3100     function getProposalExternalToken(bytes32 _proposalId, address _avatar) public view returns (address) {
3101         return address(organizationsProposals[_avatar][_proposalId].externalToken);
3102     }
3103 
3104     function getProposalExecutionTime(bytes32 _proposalId, address _avatar) public view returns (uint256) {
3105         return organizationsProposals[_avatar][_proposalId].executionTime;
3106     }
3107 
3108     /**
3109     * @dev return a hash of the given parameters
3110     * @param _voteApproveParams parameters for the voting machine used to approve a contribution
3111     * @param _intVote the voting machine used to approve a contribution
3112     * @return a hash of the parameters
3113     */
3114     function getParametersHash(
3115         bytes32 _voteApproveParams,
3116         IntVoteInterface _intVote
3117     ) public pure returns(bytes32)
3118     {
3119         return (keccak256(abi.encodePacked(_voteApproveParams, _intVote)));
3120     }
3121 
3122     /**
3123     * @dev validateProposalParams validate proposal's rewards parameters.
3124     * The function check for potential overflow upon proposal's redeem.
3125     * The function reverts if the params are not valid.
3126     * @param _reputationChange - Amount of reputation change requested .Can be negative.
3127     * @param _rewards rewards array:
3128     *         rewards[0] - Amount of tokens requested per period
3129     *         rewards[1] - Amount of ETH requested per period
3130     *         rewards[2] - Amount of external tokens requested per period
3131     *         rewards[3] - Period length - if set to zero it allows immediate redeeming after execution.
3132     *         rewards[4] - Number of periods
3133     */
3134     function validateProposalParams(int256 _reputationChange, uint[5] memory _rewards) private pure {
3135         require(((_rewards[3] > 0) || (_rewards[4] == 1)), "periodLength equal 0 require numberOfPeriods to be 1");
3136         if (_rewards[4] > 0) {
3137             // This is the only case of overflow not detected by the check below
3138             require(!(int(_rewards[4]) == -1 && _reputationChange == (-2**255)),
3139             "numberOfPeriods * _reputationChange will overflow");
3140            //check that numberOfPeriods * _reputationChange will not overflow
3141             require((int(_rewards[4]) * _reputationChange) / int(_rewards[4]) == _reputationChange,
3142             "numberOfPeriods * reputationChange will overflow");
3143             //check that numberOfPeriods * tokenReward will not overflow
3144             require((_rewards[4] * _rewards[0]) / _rewards[4] == _rewards[0],
3145             "numberOfPeriods * tokenReward will overflow");
3146             //check that numberOfPeriods * ethReward will not overflow
3147             require((_rewards[4] * _rewards[1]) / _rewards[4] == _rewards[1],
3148             "numberOfPeriods * ethReward will overflow");
3149             //check that numberOfPeriods * texternalTokenReward will not overflow
3150             require((_rewards[4] * _rewards[2]) / _rewards[4] == _rewards[2],
3151             "numberOfPeriods * texternalTokenReward will overflow");
3152         }
3153     }
3154 
3155 }
