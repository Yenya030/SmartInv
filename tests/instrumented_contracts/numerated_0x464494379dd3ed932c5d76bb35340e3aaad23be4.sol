1 {{
2   "language": "Solidity",
3   "sources": {
4     "./contracts/utils/uniq/GiftRequester.sol": {
5       "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract GiftRequester is Ownable{\n    //mapping giftNumer for giftType for receiver address\n    //where 0 - boxes, 1 - christmast chest, 2 - genesis chest\n\n    mapping(address => mapping(uint256 => uint256)) internal giftNumber; \n\n    event GiftRequested(address indexed _requester, uint256 indexed _giftNumber, uint256 indexed _giftType ,uint256 _chainId, address _nftAddress, uint256 _tokenId);\n\n    function giftRequestedFor(address _requester) external view returns(uint256, uint256, uint256){\n        return (giftNumber[_requester][0],giftNumber[_requester][1],giftNumber[_requester][2]);\n    }\n\n    function giftRequest(uint256 _number, address _paymentToken, uint256 _amount, uint256 _chainId, address _nftAddress, uint256 _tokenId, uint256 _giftType, bytes memory _signature) external{\n        require(\n            verifySignature(msg.sender, _number, _paymentToken, _amount, _chainId, _nftAddress, _tokenId, _giftType, _signature),\n            \"Signature mismatch\"\n        );\n        require(_number>0,\"Gift id can't be zero\");\n        require(giftNumber[msg.sender][_giftType]==0, \"The gift has been delivered, hasn't it?\");\n        if(_amount>0){\n            IERC20(_paymentToken).transferFrom(msg.sender, address(this), _amount);\n        }\n        giftNumber[msg.sender][_giftType] = _number;\n        emit GiftRequested(msg.sender, _number, _giftType, _chainId, _nftAddress, _tokenId);\n    }\n\n    function getMessageHash(address _address, uint256 _giftNum, address _paymentToken, uint256 _amount, uint256 _chainId, address _nftAddress, uint256 _tokenId, uint256 _giftType )\n        public\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_address, _giftNum, _paymentToken, _amount, _chainId, _nftAddress, _tokenId, _giftType, address(this)));\n    }\n\n    function getEthSignedMessageHash(bytes32 _messageHash)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    _messageHash\n                )\n            );\n    }\n\n    function verifySignature(\n        address _address,\n        uint256 _giftNum,\n        address _paymentToken,\n        uint256 _amount,\n        uint256 _chainId, \n        address _nftAddress, \n        uint256 _tokenId,\n        uint256 _giftType,\n        bytes memory _signature\n    ) internal view returns (bool) {\n        bytes32 messageHash = getMessageHash(_address, _giftNum, _paymentToken, _amount, _chainId, _nftAddress, _tokenId, _giftType);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n        return recoverSigner(ethSignedMessageHash, _signature) == owner();\n    }\n\n    function recoverSigner(\n        bytes32 _ethSignedMessageHash,\n        bytes memory _signature\n    ) internal pure returns (address) {\n        require(_signature.length == 65, \"invalid signature length\");\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(_signature, 32))\n            s := mload(add(_signature, 64))\n            v := byte(0, mload(add(_signature, 96)))\n        }\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n}"
6     },
7     "@openzeppelin/contracts/access/Ownable.sol": {
8       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
9     },
10     "@openzeppelin/contracts/utils/Context.sol": {
11       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
12     },
13     "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
14       "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
15     }
16   },
17   "settings": {
18     "metadata": {
19       "useLiteralContent": true
20     },
21     "outputSelection": {
22       "*": {
23         "*": [
24           "evm.bytecode",
25           "evm.deployedBytecode",
26           "abi"
27         ]
28       }
29     }
30   }
31 }}