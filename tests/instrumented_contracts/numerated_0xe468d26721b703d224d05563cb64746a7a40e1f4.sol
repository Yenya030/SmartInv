1 /*
2 
3 Etheria v0.9
4 Block 407810 
5 Oct-19-2015 02:54:36 PM +UTC
6 0xe468d26721b703d224d05563cb64746a7a40e1f4
7 
8 
9 Function hashes:
10 {
11     "54385526": "setStatus(uint8,uint8,string)",			// unused (costs 0.1 ETH)
12     "a5ffca0e": "acceptOffer(uint8,uint8,uint8)",			// used for wrapping/unwrapping only
13     "8cae1374": "editBlock(uint8,uint8,uint256,int8[5])",	// unused under modern build mechanics
14     "959eac47": "farmTile(uint8,uint8)",					// unused under modern build mechanics
15     "fa93019c": "getBlocks(uint8,uint8)",					// unused under modern build mechanics
16     "a55cab95": "getName(uint8,uint8)",
17     "6a864559": "getOfferers(uint8,uint8)",					// used for wrapping/unwrapping only
18     "c7dafc78": "getOffers(uint8,uint8)",					// used for wrapping/unwrapping only
19     "e039e4a1": "getOwner(uint8,uint8)",
20     "d39eb301": "getStatus(uint8,uint8)",					// unused (setStatus costs 0.1 ETH)
21     "4b42d208": "getUint8FromByte32(bytes32,uint8)",		// unused under modern build mechanics
22     "182db370": "getWhatHappened()",
23     "6266b514": "makeOffer(uint8,uint8)",					// used for wrapping/unwrapping only
24     "a713081c": "rejectOffer(uint8,uint8,uint8)",			// used for wrapping/unwrapping only
25     "edffcd57": "retractOffer(uint8,uint8)",				// used for wrapping/unwrapping only
26     "93eec1fb": "setName(uint8,uint8,string)"
27 }
28 
29 Note: No kill or locking mechanisms
30 
31 var etheriaAddress = "0xe468d26721b703d224d05563cb64746a7a40e1f4";
32 var abi =  [
33 	{"constant":true,"inputs":[],"name":"getWhatHappened","outputs":[{"name":"","type":"uint8"}],"type":"function","payable":false,"stateMutability":"view"},
34 	{"constant":true,"inputs":[{"name":"_b32","type":"bytes32"},{"name":"byteindex","type":"uint8"}],"name":"getUint8FromByte32","outputs":[{"name":"","type":"uint8"}],"type":"function","payable":false,"stateMutability":"view"},
35 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"},{"name":"_s","type":"string"}],"name":"setStatus","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
36 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"makeOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
37 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getOfferers","outputs":[{"name":"","type":"address[]"}],"type":"function","payable":false,"stateMutability":"view"},
38 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"},{"name":"index","type":"uint256"},{"name":"_block","type":"int8[5]"}],"name":"editBlock","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
39 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"},{"name":"_n","type":"string"}],"name":"setName","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
40 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"farmTile","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
41 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getName","outputs":[{"name":"","type":"string"}],"type":"function","payable":false,"stateMutability":"view"},
42 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"},{"name":"i","type":"uint8"}],"name":"acceptOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
43 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"},{"name":"i","type":"uint8"}],"name":"rejectOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
44 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getOffers","outputs":[{"name":"","type":"uint256[]"}],"type":"function","payable":false,"stateMutability":"view"},
45 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getStatus","outputs":[{"name":"","type":"string"}],"type":"function","payable":false,"stateMutability":"view"},
46 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getOwner","outputs":[{"name":"","type":"address"}],"type":"function","payable":false,"stateMutability":"view"},
47 	{"constant":false,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"retractOffer","outputs":[],"type":"function","payable":true,"stateMutability":"payable"},
48 	{"constant":true,"inputs":[{"name":"col","type":"uint8"},{"name":"row","type":"uint8"}],"name":"getBlocks","outputs":[{"name":"","type":"int8[5][]"}],"type":"function","payable":false,"stateMutability":"view"},
49 	{"inputs":[],"type":"constructor","payable":true,"stateMutability":"payable"},
50 	{"type":"fallback","payable":true,"stateMutability":"payable"}
51 ];
52 var etheria = new web3.eth.Contract(abi, etheriaAddress);
53 
54 Exact bytecode match with source below and Solidity: 0.1.6 w/ default optimization (200) (compile 4 times due to solc determinism bug)
55 chain: 
56 compiled:
57 
58 */
59 
60 contract BlockDefStorage 
61 {
62 	function getOccupies(uint8 which) public returns (int8[24])
63 	{}
64 	function getAttachesto(uint8 which) public returns (int8[48])
65     {}
66 }
67 
68 contract MapElevationRetriever 
69 {
70 	function getElevation(uint8 col, uint8 row) public constant returns (uint8)
71 	{}
72 }
73 
74 contract Etheria //is mortal
75 {
76     uint8 mapsize = 33;
77     Tile[33][33] tiles;
78     address creator;
79     
80     struct Tile 
81     {
82     	address owner;
83     	address[] offerers;
84     	uint[] offers;
85     	int8[5][] blocks; //0 = which,1 = blockx,2 = blocky,3 = blockz, 4 = color
86     	uint lastfarm;
87     	int8[3][] occupado;
88     	string name;
89     	string status;
90     }
91     
92     BlockDefStorage bds;
93     MapElevationRetriever mer;
94     
95     function Etheria() {
96     	creator = msg.sender;
97     	bds = BlockDefStorage(0x782bdf7015b71b64f6750796dd087fde32fd6fdc); 
98     	mer = MapElevationRetriever(0x68549d7dbb7a956f955ec1263f55494f05972a6b);
99     }
100     
101     function getOwner(uint8 col, uint8 row) public constant returns(address)
102     {
103     	return tiles[col][row].owner; // no harm if col,row are invalid
104     }
105     
106     /***
107      *     _   _   ___  ___  ___ _____            _____ _____ ___ _____ _   _ _____ 
108      *    | \ | | / _ \ |  \/  ||  ___|   ___    /  ___|_   _/ _ \_   _| | | /  ___|
109      *    |  \| |/ /_\ \| .  . || |__    ( _ )   \ `--.  | |/ /_\ \| | | | | \ `--. 
110      *    | . ` ||  _  || |\/| ||  __|   / _ \/\  `--. \ | ||  _  || | | | | |`--. \
111      *    | |\  || | | || |  | || |___  | (_>  < /\__/ / | || | | || | | |_| /\__/ /
112      *    \_| \_/\_| |_/\_|  |_/\____/   \___/\/ \____/  \_/\_| |_/\_/  \___/\____/ 
113      *                                                                              
114      *                                                                              
115      */
116     
117     function getName(uint8 col, uint8 row) public constant returns(string)
118     {
119     	return tiles[col][row].name; // no harm if col,row are invalid
120     }
121     function setName(uint8 col, uint8 row, string _n) public
122     {
123     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
124     	{
125     		whathappened = 50;  
126     		return;
127     	}
128     	Tile tile = tiles[col][row];
129     	if(tile.owner != msg.sender)
130     	{
131     		whathappened = 51;
132     		return;
133     	}
134     	tile.name = _n;
135     	whathappened = 52;
136     	return;
137     }
138     
139     function getStatus(uint8 col, uint8 row) public constant returns(string)
140     {
141     	return tiles[col][row].status; // no harm if col,row are invalid
142     }
143     function setStatus(uint8 col, uint8 row, string _s) public // setting status costs .1 eth. (currently 5 cents. Cry me a river.)
144     {
145     	if(msg.value == 0)	// the only situation where we don't refund money.
146     	{
147     		whathappened = 40;
148     		return;
149     	}
150     	if(msg.value != 100000000000000000) // the only situation
151     	{
152     		msg.sender.send(msg.value); 		// return their money
153     		whathappened = 41;
154     		return;
155     	}
156     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
157     	{
158     		msg.sender.send(msg.value); 		// return their money
159     		whathappened = 42;
160     		return;
161     	}
162     	Tile tile = tiles[col][row];
163     	if(tile.owner != msg.sender)
164     	{
165     		msg.sender.send(msg.value); 		// return their money
166     		whathappened = 43;
167     		return;
168     	}
169     	tile.status = _s;
170     	whathappened = 44;
171     	return;
172     }
173     
174     /***
175      *    ______ ___  _________  ________ _   _ _____            ___________ _____ _____ _____ _   _ _____ 
176      *    |  ___/ _ \ | ___ \  \/  |_   _| \ | |  __ \   ___    |  ___|  _  \_   _|_   _|_   _| \ | |  __ \
177      *    | |_ / /_\ \| |_/ / .  . | | | |  \| | |  \/  ( _ )   | |__ | | | | | |   | |   | | |  \| | |  \/
178      *    |  _||  _  ||    /| |\/| | | | | . ` | | __   / _ \/\ |  __|| | | | | |   | |   | | | . ` | | __ 
179      *    | |  | | | || |\ \| |  | |_| |_| |\  | |_\ \ | (_>  < | |___| |/ / _| |_  | |  _| |_| |\  | |_\ \
180      *    \_|  \_| |_/\_| \_\_|  |_/\___/\_| \_/\____/  \___/\/ \____/|___/  \___/  \_/  \___/\_| \_/\____/
181      *                                                                                                     
182      */
183     
184     function farmTile(uint8 col, uint8 row) public 
185     {
186     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
187     	{
188     		whathappened = 30;
189     		return;
190     	}
191     	Tile tile = tiles[col][row];
192         if(tile.owner != msg.sender)
193         {
194         	whathappened = 31;
195         	return;
196         }
197         if((block.number - tile.lastfarm) < 4320) // a day's worth of blocks hasn't passed yet. can only farm once a day. (Assumes block times of 20 seconds.)
198         {
199         	whathappened = 32;
200         	return;
201         }
202         bytes32 lastblockhash = block.blockhash(block.number - 1);
203     	for(uint8 i = 0; i < 10; i++)
204     	{
205             tile.blocks.length+=1;
206     	    tile.blocks[tile.blocks.length - 1][0] = int8(getUint8FromByte32(lastblockhash,i) % 32); // which, guaranteed 0-31
207     	    tile.blocks[tile.blocks.length - 1][1] = 0; // x
208     	    tile.blocks[tile.blocks.length - 1][2] = 0; // y
209     	    tile.blocks[tile.blocks.length - 1][3] = -1; // z
210     	    tile.blocks[tile.blocks.length - 1][4] = 0; // color
211     	}
212     	tile.lastfarm = block.number;
213     	whathappened = 33;
214     	return;
215     }
216     
217     function editBlock(uint8 col, uint8 row, uint index, int8[5] _block)  
218     {
219     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
220     	{
221     		whathappened = 20;
222     		return;
223     	}
224     	
225     	Tile tile = tiles[col][row];
226         if(tile.owner != msg.sender) // 1. DID THE OWNER SEND THIS MESSAGE?
227         {
228         	whathappened = 21;
229         	return;
230         }
231         if(_block[3] < 0) // 2. IS THE Z LOCATION OF THE BLOCK BELOW ZERO? BLOCKS CANNOT BE HIDDEN
232         {
233         	whathappened = 22;
234         	return;
235         }
236         
237         _block[0] = tile.blocks[index][0]; // can't change the which, so set it to whatever it already was
238 
239         int8[24] memory didoccupy = bds.getOccupies(uint8(_block[0]));
240         int8[24] memory wouldoccupy = bds.getOccupies(uint8(_block[0]));
241         
242         for(uint8 b = 0; b < 24; b+=3) // always 8 hexes, calculate the didoccupy
243  		{
244  			 wouldoccupy[b] = wouldoccupy[b]+_block[1];
245  			 wouldoccupy[b+1] = wouldoccupy[b+1]+_block[2];
246  			 if(wouldoccupy[1] % 2 != 0 && wouldoccupy[b+1] % 2 == 0) // if anchor y is odd and this hex y is even, (SW NE beam goes 11,`2`2,23,`3`4,35,`4`6,47,`5`8  ` = x value incremented by 1. Same applies to SW NE beam from 01,12,13,24,25,36,37,48)
247  				 wouldoccupy[b] = wouldoccupy[b]+1;  			   // then offset x by +1
248  			 wouldoccupy[b+2] = wouldoccupy[b+2]+_block[3];
249  			 
250  			 didoccupy[b] = didoccupy[b]+tile.blocks[index][1];
251  			 didoccupy[b+1] = didoccupy[b+1]+tile.blocks[index][2];
252  			 if(didoccupy[1] % 2 != 0 && didoccupy[b+1] % 2 == 0) // if anchor y and this hex y are both odd,
253  				 didoccupy[b] = didoccupy[b]+1; 					 // then offset x by +1
254        		didoccupy[b+2] = didoccupy[b+2]+tile.blocks[index][3];
255  		}
256         
257         if(!isValidLocation(col,row,_block, wouldoccupy))
258         {
259         	return; // whathappened is already set
260         }
261         
262         // EVERYTHING CHECKED OUT, WRITE OR OVERWRITE THE HEXES IN OCCUPADO
263         
264       	if(tile.blocks[index][3] >= 0) // If the previous z was greater than 0 (i.e. not hidden) ...
265      	{
266          	for(uint8 l = 0; l < 24; l+=3) // loop 8 times,find the previous occupado entries and overwrite them
267          	{
268          		for(uint o = 0; o < tile.occupado.length; o++)
269          		{
270          			if(didoccupy[l] == tile.occupado[o][0] && didoccupy[l+1] == tile.occupado[o][1] && didoccupy[l+2] == tile.occupado[o][2]) // x,y,z equal?
271          			{
272          				tile.occupado[o][0] = wouldoccupy[l]; // found it. Overwrite it
273          				tile.occupado[o][1] = wouldoccupy[l+1];
274          				tile.occupado[o][2] = wouldoccupy[l+2];
275          			}
276          		}
277          	}
278      	}
279      	else // previous block was hidden
280      	{
281      		for(uint8 ll = 0; ll < 24; ll+=3) // add the 8 new hexes to occupado
282          	{
283      			tile.occupado.length++;
284      			tile.occupado[tile.occupado.length-1][0] = wouldoccupy[ll];
285      			tile.occupado[tile.occupado.length-1][1] = wouldoccupy[ll+1];
286      			tile.occupado[tile.occupado.length-1][2] = wouldoccupy[ll+2];
287          	}
288      	}
289      	tile.blocks[index] = _block;
290     	return;
291     }
292        
293     function getBlocks(uint8 col, uint8 row) public constant returns (int8[5][])
294     {
295     	return tiles[col][row].blocks; // no harm if col,row are invalid
296     }
297    
298     /***
299      *     _________________ ___________  _____ 
300      *    |  _  |  ___|  ___|  ___| ___ \/  ___|
301      *    | | | | |_  | |_  | |__ | |_/ /\ `--. 
302      *    | | | |  _| |  _| |  __||    /  `--. \
303      *    \ \_/ / |   | |   | |___| |\ \ /\__/ /
304      *     \___/\_|   \_|   \____/\_| \_|\____/ 
305      *                                          
306      */
307     
308     function makeOffer(uint8 col, uint8 row)
309     {
310     	if(msg.value == 0) // checking this first means that we will ALWAYS need to return money on any other failure
311     	{
312     		whathappened = 1;
313     		return;
314     	}	// do nothing, just return
315     	
316     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
317     	{
318     		whathappened = 2;
319     		msg.sender.send(msg.value); 		// return their money
320     		return;
321     	}
322     	
323     	Tile tile = tiles[col][row];
324     	if(tile.owner == address(0x0000000000000000000000000000000000000000))			// if UNOWNED
325     	{	  
326     		if(msg.value != 1000000000000000000 || mer.getElevation(col,row) < 125)	// 1 ETH is the starting value. If not return; // Also, if below sea level, return. 
327     		{
328     			msg.sender.send(msg.value); 	 									// return their money
329     			whathappened = 3;
330     			return;
331     		}
332     		else
333     		{	
334     			creator.send(msg.value);     		 								// this was a valid offer, send money to contract creator
335     			tile.owner = msg.sender;  								// set tile owner to the buyer
336     			whathappened = 4;
337     			return;
338     		}
339     	}	
340     	else 																		// if already OWNED
341     	{
342     		if(tile.owner == msg.sender || msg.value < 10000000000000000 || msg.value > 1000000000000000000000000 || tile.offerers.length >= 10 ) // trying to make an offer on their own tile. or the offer list is full (10 max) or the value is out of range (.01 ETH - 1 mil ETH is range)
343     		{
344     			msg.sender.send(msg.value); 	 									// return the money
345     			whathappened = 5;
346     			return;
347     		}
348     		else
349     		{	
350     			for(uint8 i = 0; i < tile.offerers.length; i++)
351     			{
352     				if(tile.offerers[i] == msg.sender) 						// user has already made an offer. Update it and return;
353     				{
354     					msg.sender.send(tile.offers[i]); 					// return their previous money
355     					tile.offers[i] = msg.value; 							// set the new offer
356     					whathappened = 6;
357     					return;
358     				}
359     			}	
360     			// the user has not yet made an offer
361     			tile.offerers.length++; // make room for 1 more
362     			tile.offers.length++; // make room for 1 more
363     			tile.offerers[tile.offerers.length - 1] = msg.sender; // record who is making the offer
364     			tile.offers[tile.offers.length - 1] = msg.value; // record the offer
365     			whathappened = 7;
366     			return;
367     		}
368     	}
369     }
370     
371     function retractOffer(uint8 col, uint8 row) // retracts the first offer in the array by this user.
372     {
373     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
374     	{
375     		whathappened = 60;
376     		return;
377     	}
378     	Tile tile = tiles[col][row];
379         for(uint8 i = 0; i < tile.offerers.length; i++)
380     	{
381     		if(tile.offerers[i] == msg.sender) // this user has an offer on file. Remove it.
382     		{
383     			whathappened = 61;
384     			removeOffer(col,row,i);
385     			return;
386     		}
387     	}	
388         whathappened = 62; // no offer found for msg.sender
389         return;
390     }
391     
392     function rejectOffer(uint8 col, uint8 row, uint8 i) // index 0-10
393     {
394     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
395     	{
396     		whathappened = 70;
397     		return;
398     	}
399     	Tile tile = tiles[col][row];
400     	if(tile.owner != msg.sender) // only the owner can reject offers
401     	{
402     		whathappened = 71;
403     		return;
404     	}
405     	if(i < 0 || i > (tile.offers.length - 1)) // index oob
406     	{
407     		whathappened = 72;
408     		return;
409     	}	
410     	removeOffer(col,row,i);
411     	whathappened = 73;
412 		return;
413     }
414     
415     function removeOffer(uint8 col, uint8 row, uint8 i) private // index 0-10, can't be odd
416     {
417     	Tile tile = tiles[col][row]; // private method. No need to check col,row validity
418         tile.offerers[i].send(tile.offers[i]); // return the money
419     			
420     	// delete user and offer and reshape the array
421     	delete tile.offerers[i];   // zero out user
422     	delete tile.offers[i];   // zero out offer
423     	for(uint8 j = i+1; j < tile.offerers.length; j++) // close the arrays after the gap
424     	{
425     	    tile.offerers[j-1] = tile.offerers[j];
426     	    tile.offers[j-1] = tile.offers[j];
427     	}
428     	tile.offerers.length--;
429     	tile.offers.length--;
430     	return;
431     }
432     
433     function acceptOffer(uint8 col, uint8 row, uint8 i) // accepts the offer at index (1-10)
434     {
435     	if(isOOB(col,row)) // row and/or col was not between 0-mapsize
436     	{
437     		whathappened = 80;
438     		return;
439     	}
440     	
441     	Tile tile = tiles[col][row];
442     	if(tile.owner != msg.sender) // only the owner can reject offers
443     	{
444     		whathappened = 81;
445     		return;
446     	}
447     	if(i < 0 || i > (tile.offers.length - 1)) // index oob
448     	{
449     		whathappened = 82;
450     		return;
451     	}	
452     	uint offeramount = tile.offers[i];
453     	uint housecut = offeramount / 10;
454     	creator.send(housecut);
455     	tile.owner.send(offeramount-housecut); // send offer money to oldowner
456     	tile.owner = tile.offerers[i]; // new owner is the offerer
457     	for(uint8 j = 0; j < tile.offerers.length; j++) // return all the other offerers' offer money
458     	{
459     		if(j != i) // don't return money for the purchaser
460     			tile.offerers[j].send(tile.offers[j]);
461     	}
462     	delete tile.offerers; // delete all offerers
463     	delete tile.offers; // delete all offers
464     	whathappened = 83;
465     	return;
466     }
467     
468     function getOfferers(uint8 col, uint8 row) constant returns (address[])
469     {
470     	return tiles[col][row].offerers; // no harm if col,row are invalid
471     }
472     
473     function getOffers(uint8 col, uint8 row) constant returns (uint[])
474     {
475     	return tiles[col][row].offers; // no harm if col,row are invalid
476     }
477     
478     function isOOB(uint8 col, uint8 row) private constant returns (bool)
479     {
480     	if(col < 0 || col > (mapsize-1) || row < 0 || row > (mapsize-1))
481     		return true; // is out of bounds
482     }
483     
484     /***
485      *     _   _ _____ _____ _     _____ _______   __
486      *    | | | |_   _|_   _| |   |_   _|_   _\ \ / /
487      *    | | | | | |   | | | |     | |   | |  \ V / 
488      *    | | | | | |   | | | |     | |   | |   \ /  
489      *    | |_| | | |  _| |_| |_____| |_  | |   | |  
490      *     \___/  \_/  \___/\_____/\___/  \_/   \_/  
491      *                                               
492      */
493     
494     // this logic COULD be reduced a little, but the gain is minimal and readability suffers
495     function blockHexCoordsValid(int8 x, int8 y) private constant returns (bool)
496     {
497     	if(-33 <= y && y <= 33)
498     	{
499     		if(y % 2 != 0 ) // odd
500     		{
501     			if(-50 <= x && x <= 49)
502     				return true;
503     		}
504     		else // even
505     		{
506     			if(-49 <= x && x <= 49)
507     				return true;
508     		}	
509     	}	
510     	else
511     	{	
512     		uint8 absx;
513 			uint8 absy;
514 			if(x < 0)
515 				absx = uint8(x*-1);
516 			else
517 				absx = uint8(x);
518 			if(y < 0)
519 				absy = uint8(y*-1);
520 			else
521 				absy = uint8(y);
522     		if((y >= 0 && x >= 0) || (y < 0 && x > 0)) // first or 4th quadrants
523     		{
524     			if(y % 2 != 0 ) // odd
525     			{
526     				if (((absx*2) + (absy*3)) <= 198)
527     					return true;
528     			}	
529     			else	// even
530     			{
531     				if ((((absx+1)*2) + ((absy-1)*3)) <= 198)
532     					return true;
533     			}
534     		}
535     		else
536     		{	
537     			if(y % 2 == 0 ) // even
538     			{
539     				if (((absx*2) + (absy*3)) <= 198)
540     					return true;
541     			}	
542     			else	// odd
543     			{
544     				if ((((absx+1)*2) + ((absy-1)*3)) <= 198)
545     					return true;
546     			}
547     		}
548     	}
549     	return false;
550     }
551     
552     // SEVERAL CHECKS TO BE PERFORMED
553     // 1. DID THE OWNER SEND THIS MESSAGE?		(SEE editBlock)
554     // 2. IS THE Z LOCATION OF THE BLOCK BELOW ZERO? BLOCKS CANNOT BE HIDDEN AFTER SHOWING	   (SEE editBlock)
555     // 3. DO ANY OF THE PROPOSED HEXES FALL OUTSIDE OF THE TILE? 
556     // 4. DO ANY OF THE PROPOSED HEXES CONFLICT WITH ENTRIES IN OCCUPADO? 
557     // 5. DO ANY OF THE BLOCKS TOUCH ANOTHER?
558     // 6. NONE OF THE OCCUPY BLOCKS TOUCHED THE GROUND. BUT MAYBE THEY TOUCH ANOTHER BLOCK?
559     
560     function isValidLocation(uint8 col, uint8 row, int8[5] _block, int8[24] wouldoccupy) private constant returns (bool)
561     {
562     	bool touches;
563     	Tile tile = tiles[col][row]; // since this is a private method, we don't need to check col,row validity
564     	
565         for(uint8 b = 0; b < 24; b+=3) // always 8 hexes, calculate the wouldoccupy and the didoccupy
566        	{
567        		if(!blockHexCoordsValid(wouldoccupy[b], wouldoccupy[b+1])) // 3. DO ANY OF THE PROPOSED HEXES FALL OUTSIDE OF THE TILE? 
568       		{
569        			whathappened = 10;
570       			return false;
571       		}
572        		for(uint o = 0; o < tile.occupado.length; o++)  // 4. DO ANY OF THE PROPOSED HEXES CONFLICT WITH ENTRIES IN OCCUPADO? 
573           	{
574       			if(wouldoccupy[b] == tile.occupado[o][0] && wouldoccupy[b+1] == tile.occupado[o][1] && wouldoccupy[b+2] == tile.occupado[o][2]) // do the x,y,z entries of each match?
575       			{
576       				whathappened = 11;
577       				return false; // this hex conflicts. The proposed block does not avoid overlap. Return false immediately.
578       			}
579           	}
580       		if(touches == false && wouldoccupy[b+2] == 0)  // 5. DO ANY OF THE BLOCKS TOUCH ANOTHER? (GROUND ONLY FOR NOW)
581       		{
582       			touches = true; // once true, always true til the end of this method. We must keep looping to check all the hexes for conflicts and tile boundaries, though, so we can't return true here.
583       		}	
584        	}
585         
586         // now if we're out of the loop and here, there were no conflicts and the block was found to be in the tile boundary.
587         // touches may be true or false, so we need to check 
588           
589         if(touches == false)  // 6. NONE OF THE OCCUPY BLOCKS TOUCHED THE GROUND. BUT MAYBE THEY TOUCH ANOTHER BLOCK?
590   		{
591           	int8[48] memory attachesto = bds.getAttachesto(uint8(_block[0]));
592           	for(uint8 a = 0; a < 48 && !touches; a+=3) // always 8 hexes, calculate the wouldoccupy and the didoccupy
593           	{
594           		if(attachesto[a] == 0 && attachesto[a+1] == 0 && attachesto[a+2] == 0) // there are no more attachestos available, break (0,0,0 signifies end)
595           			break;
596           		attachesto[a] = attachesto[a]+_block[1];
597           		attachesto[a+1] = attachesto[a+1]+_block[2];
598            		if(attachesto[1] % 2 != 0 && attachesto[a+1] % 2 == 0) // if anchor y and this hex y are both odd,  (for attachesto, anchory is the same as for occupies, but the z is different. Nothing to worry about)
599            			attachesto[a] = attachesto[a]+1;  			       // then offset x by +1
600            		attachesto[a+2] = attachesto[a+2]+_block[3];
601            		for(o = 0; o < tile.occupado.length && !touches; o++)
602            		{
603            			if(attachesto[a] == tile.occupado[o][0] && attachesto[a+1] == tile.occupado[o][1] && attachesto[a+2] == tile.occupado[o][2]) // a valid attachesto found in occupado?
604            			{
605            				whathappened = 12;
606            				return true; // in bounds, didn't conflict and now touches is true. All good. Return.
607            			}
608            		}
609           	}
610           	whathappened = 13;
611           	return false; 
612   		}
613         else // touches was true by virtue of a z = 0 above (touching the ground). Return true;
614         {
615         	whathappened = 14;
616         	return true;
617         }	
618     }  
619 
620     // This function is handy for getting random numbers from 0-255 without getting a new hash every time. 
621     // With one bytes32, there are 32 of these available, depending on the index
622     function getUint8FromByte32(bytes32 _b32, uint8 byteindex) public constant returns(uint8) {
623     	uint numdigits = 64;
624     	uint buint = uint(_b32);
625     	uint upperpowervar = 16 ** (numdigits - (byteindex*2)); 		// @i=0 upperpowervar=16**64 (SEE EXCEPTION BELOW), @i=1 upperpowervar=16**62, @i upperpowervar=16**60
626     	uint lowerpowervar = 16 ** (numdigits - 2 - (byteindex*2));		// @i=0 upperpowervar=16**62, @i=1 upperpowervar=16**60, @i upperpowervar=16**58
627     	uint postheadchop;
628     	if(byteindex == 0)
629     		postheadchop = buint; 								//for byteindex 0, buint is just the input number. 16^64 is out of uint range, so this exception has to be made.
630     	else
631     		postheadchop = buint % upperpowervar; 				// @i=0 _b32=a1b2c3d4... postheadchop=a1b2c3d4, @i=1 postheadchop=b2c3d4, @i=2 postheadchop=c3d4
632     	uint remainder = postheadchop % lowerpowervar; 			// @i=0 remainder=b2c3d4, @i=1 remainder=c3d4, @i=2 remainder=d4
633     	uint evenedout = postheadchop - remainder; 				// @i=0 evenedout=a1000000, @i=1 remainder=b20000, @i=2 remainder=c300
634     	uint b = evenedout / lowerpowervar; 					// @i=0 b=a1 (to uint), @i=1 b=b2, @i=2 b=c3
635     	return uint8(b);
636     }
637     
638   uint8 whathappened;
639   function getWhatHappened() public constant returns (uint8)
640   {
641   	return whathappened;
642   }
643 }