1 {{
2   "language": "Solidity",
3   "settings": {
4     "evmVersion": "istanbul",
5     "libraries": {},
6     "metadata": {
7       "useLiteralContent": true
8     },
9     "optimizer": {
10       "enabled": true,
11       "runs": 100
12     },
13     "remappings": [],
14     "outputSelection": {
15       "*": {
16         "*": [
17           "evm.bytecode",
18           "evm.deployedBytecode",
19           "devdoc",
20           "userdoc",
21           "metadata",
22           "abi"
23         ]
24       }
25     }
26   },
27   "sources": {
28     "contracts/lending/compound/governance/GovernanceBravoDelegator.sol": {
29       "content": "pragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"./GovernorBravoInterfaces.sol\";\n\n// https://etherscan.io/address/0xc0Da02939E1441F497fd74F78cE7Decb17B66529#code\n\ncontract GovernorBravoDelegator is\n  GovernorBravoDelegatorStorage,\n  GovernorBravoEvents\n{\n  constructor(\n    address timelock_,\n    address comp_,\n    address admin_,\n    address implementation_,\n    uint votingPeriod_,\n    uint votingDelay_,\n    uint proposalThreshold_\n  ) public {\n    // Admin set to msg.sender for initialization\n    admin = msg.sender;\n\n    delegateTo(\n      implementation_,\n      abi.encodeWithSignature(\n        \"initialize(address,address,uint256,uint256,uint256)\",\n        timelock_,\n        comp_,\n        votingPeriod_,\n        votingDelay_,\n        proposalThreshold_\n      )\n    );\n\n    _setImplementation(implementation_);\n\n    admin = admin_;\n  }\n\n  /**\n   * @notice Called by the admin to update the implementation of the delegator\n   * @param implementation_ The address of the new implementation for delegation\n   */\n  function _setImplementation(address implementation_) public {\n    require(\n      msg.sender == admin,\n      \"GovernorBravoDelegator::_setImplementation: admin only\"\n    );\n    require(\n      implementation_ != address(0),\n      \"GovernorBravoDelegator::_setImplementation: invalid implementation address\"\n    );\n\n    address oldImplementation = implementation;\n    implementation = implementation_;\n\n    emit NewImplementation(oldImplementation, implementation);\n  }\n\n  /**\n   * @notice Internal method to delegate execution to another contract\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n   * @param callee The contract to delegatecall\n   * @param data The raw data to delegatecall\n   */\n  function delegateTo(address callee, bytes memory data) internal {\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\n    assembly {\n      if eq(success, 0) {\n        revert(add(returnData, 0x20), returndatasize)\n      }\n    }\n  }\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * It returns to the external caller whatever the implementation returns\n   * or forwards reverts.\n   */\n  function() external payable {\n    // delegate all other functions to current implementation\n    (bool success, ) = implementation.delegatecall(msg.data);\n\n    assembly {\n      let free_mem_ptr := mload(0x40)\n      returndatacopy(free_mem_ptr, 0, returndatasize)\n\n      switch success\n      case 0 {\n        revert(free_mem_ptr, returndatasize)\n      }\n      default {\n        return(free_mem_ptr, returndatasize)\n      }\n    }\n  }\n}\n"
30     },
31     "contracts/lending/compound/governance/GovernorBravoInterfaces.sol": {
32       "content": "pragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\n// https://etherscan.io/address/0xeF3B6E9e13706A8F01fe98fdCf66335dc5CfdEED#code\n\n// TODO: check the difference between this file and the one located here: 0xc0Da02939E1441F497fd74F78cE7Decb17B66529\n\ncontract GovernorBravoEvents {\n  /// @notice An event emitted when a new proposal is created\n  event ProposalCreated(\n    uint id,\n    address proposer,\n    address[] targets,\n    uint[] values,\n    string[] signatures,\n    bytes[] calldatas,\n    uint startBlock,\n    uint endBlock,\n    string description\n  );\n\n  /// @notice An event emitted when a vote has been cast on a proposal\n  /// @param voter The address which casted a vote\n  /// @param proposalId The proposal id which was voted on\n  /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\n  /// @param votes Number of votes which were cast by the voter\n  /// @param reason The reason given for the vote by the voter\n  event VoteCast(\n    address indexed voter,\n    uint proposalId,\n    uint8 support,\n    uint votes,\n    string reason\n  );\n\n  /// @notice An event emitted when a proposal has been canceled\n  event ProposalCanceled(uint id);\n\n  /// @notice An event emitted when a proposal has been queued in the Timelock\n  event ProposalQueued(uint id, uint eta);\n\n  /// @notice An event emitted when a proposal has been executed in the Timelock\n  event ProposalExecuted(uint id);\n\n  /// @notice An event emitted when the voting delay is set\n  event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);\n\n  /// @notice An event emitted when the voting period is set\n  event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);\n\n  /// @notice Emitted when implementation is changed\n  event NewImplementation(address oldImplementation, address newImplementation);\n\n  /// @notice Emitted when proposal threshold is set\n  event ProposalThresholdSet(\n    uint oldProposalThreshold,\n    uint newProposalThreshold\n  );\n\n  /// @notice Emitted when pendingAdmin is changed\n  event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n  /// @notice Emitted when pendingAdmin is accepted, which means admin is updated\n  event NewAdmin(address oldAdmin, address newAdmin);\n\n  /// @notice Emitted when whitelist account expiration is set\n  event WhitelistAccountExpirationSet(address account, uint expiration);\n\n  /// @notice Emitted when the whitelistGuardian is set\n  event WhitelistGuardianSet(address oldGuardian, address newGuardian);\n}\n\ncontract GovernorBravoDelegatorStorage {\n  /// @notice Administrator for this contract\n  address public admin;\n\n  /// @notice Pending administrator for this contract\n  address public pendingAdmin;\n\n  /// @notice Active brains of Governor\n  address public implementation;\n}\n\n/**\n * @title Storage for Governor Bravo Delegate\n * @notice For future upgrades, do not change GovernorBravoDelegateStorageV1. Create a new\n * contract which implements GovernorBravoDelegateStorageV1 and following the naming convention\n * GovernorBravoDelegateStorageVX.\n */\ncontract GovernorBravoDelegateStorageV1 is GovernorBravoDelegatorStorage {\n  /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\n  uint public votingDelay;\n\n  /// @notice The duration of voting on a proposal, in blocks\n  uint public votingPeriod;\n\n  /// @notice The number of votes required in order for a voter to become a proposer\n  uint public proposalThreshold;\n\n  /// @notice Initial proposal id set at become\n  uint public initialProposalId;\n\n  /// @notice The total number of proposals\n  uint public proposalCount;\n\n  /// @notice The address of the Compound Protocol Timelock\n  TimelockInterface public timelock;\n\n  /// @notice The address of the Compound governance token\n  CompInterface public comp;\n\n  /// @notice The official record of all proposals ever proposed\n  mapping(uint => Proposal) public proposals;\n\n  /// @notice The latest proposal for each proposer\n  mapping(address => uint) public latestProposalIds;\n\n  struct Proposal {\n    /// @notice Unique id for looking up a proposal\n    uint id;\n    /// @notice Creator of the proposal\n    address proposer;\n    /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n    uint eta;\n    /// @notice the ordered list of target addresses for calls to be made\n    address[] targets;\n    /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n    uint[] values;\n    /// @notice The ordered list of function signatures to be called\n    string[] signatures;\n    /// @notice The ordered list of calldata to be passed to each call\n    bytes[] calldatas;\n    /// @notice The block at which voting begins: holders must delegate their votes prior to this block\n    uint startBlock;\n    /// @notice The block at which voting ends: votes must be cast prior to this block\n    uint endBlock;\n    /// @notice Current number of votes in favor of this proposal\n    uint forVotes;\n    /// @notice Current number of votes in opposition to this proposal\n    uint againstVotes;\n    /// @notice Current number of votes for abstaining for this proposal\n    uint abstainVotes;\n    /// @notice Flag marking whether the proposal has been canceled\n    bool canceled;\n    /// @notice Flag marking whether the proposal has been executed\n    bool executed;\n    /// @notice Receipts of ballots for the entire set of voters\n    mapping(address => Receipt) receipts;\n  }\n\n  /// @notice Ballot receipt record for a voter\n  struct Receipt {\n    /// @notice Whether or not a vote has been cast\n    bool hasVoted;\n    /// @notice Whether or not the voter supports the proposal or abstains\n    uint8 support;\n    /// @notice The number of votes the voter had, which were cast\n    uint96 votes;\n  }\n\n  /// @notice Possible states that a proposal may be in\n  enum ProposalState {\n    Pending,\n    Active,\n    Canceled,\n    Defeated,\n    Succeeded,\n    Queued,\n    Expired,\n    Executed\n  }\n}\n\ncontract GovernorBravoDelegateStorageV2 is GovernorBravoDelegateStorageV1 {\n  /// @notice Stores the expiration of account whitelist status as a timestamp\n  mapping(address => uint) public whitelistAccountExpirations;\n\n  /// @notice Address which manages whitelisted proposals and whitelist accounts\n  address public whitelistGuardian;\n}\n\ninterface TimelockInterface {\n  function delay() external view returns (uint);\n\n  function GRACE_PERIOD() external view returns (uint);\n\n  function acceptAdmin() external;\n\n  function queuedTransactions(bytes32 hash) external view returns (bool);\n\n  function queueTransaction(\n    address target,\n    uint value,\n    string calldata signature,\n    bytes calldata data,\n    uint eta\n  ) external returns (bytes32);\n\n  function cancelTransaction(\n    address target,\n    uint value,\n    string calldata signature,\n    bytes calldata data,\n    uint eta\n  ) external;\n\n  function executeTransaction(\n    address target,\n    uint value,\n    string calldata signature,\n    bytes calldata data,\n    uint eta\n  ) external payable returns (bytes memory);\n}\n\ninterface CompInterface {\n  function getPriorVotes(\n    address account,\n    uint blockNumber\n  ) external view returns (uint96);\n}\n\ninterface GovernorAlpha {\n  /// @notice The total number of proposals\n  function proposalCount() external returns (uint);\n}\n"
33     }
34   }
35 }}