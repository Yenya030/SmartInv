1 // SPDX-License-Identifier: MIT
2 pragma solidity 0.8.17;
3 
4 import { TransferrableOwnership } from "../Helpers/TransferrableOwnership.sol";
5 import { MerkleProof } from "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
6 import { LibAsset, IERC20 } from "../Libraries/LibAsset.sol";
7 import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
8 import { Pausable } from "@openzeppelin/contracts/security/Pausable.sol";
9 
10 /// @title GasRebateDistributor
11 /// @author LI.FI (https://li.fi)
12 /// @notice Contract to distribute gas rebates from a LI.FI marketing campaign
13 /// @custom:version 1.0.0
14 contract GasRebateDistributor is TransferrableOwnership, Pausable {
15     /// Storage ///
16 
17     /// stores the root of the merkle tree that contains info about which account can claim which amount in which token
18     bytes32 public merkleRoot;
19     /// (account => latestClaimedMerkleRootVersion) mapping from account to the latest merkle root version that was claimed by this address
20     mapping(address => uint8) private _hasClaimed;
21     /// stores the current version of the merkle root
22     uint8 private _currentMerkleRootVersion;
23     /// stores the timestamp until the claims of the current merkle root can be claimed
24     uint256 public claimDeadline;
25     /// address of the ERC20 token in which gas rebates are paid out
26     address public tokenAddress;
27 
28     /// Errors ///
29 
30     error AlreadyClaimed();
31     error InvalidProof();
32     error ClaimDeadlineExpired();
33 
34     /// Events ///
35 
36     event Claimed(address indexed account, uint256 amount);
37 
38     /// Constructor
39     constructor(
40         address owner_,
41         bytes32 merkleRoot_,
42         uint256 deadline,
43         address tokenAddress_
44     ) TransferrableOwnership(owner_) Pausable() {
45         merkleRoot = merkleRoot_;
46         claimDeadline = deadline;
47         tokenAddress = tokenAddress_;
48         _currentMerkleRootVersion = 1;
49     }
50 
51     /// EXTERNAL FUNCTIONS ///
52 
53     /// @notice Allows the caller of this function to claim the specified amount if presented with a valid merkle proof
54     /// @param amount the amount that should be claimed
55     /// @param merkleProof the merkle proof required to verify the claim (this proof is generated by LI.FI backend)
56     function claim(
57         uint256 amount,
58         bytes32[] calldata merkleProof
59     ) public virtual whenNotPaused {
60         // check if account claimed already for the current merkle root version
61         if (_hasClaimed[msg.sender] == _currentMerkleRootVersion)
62             revert AlreadyClaimed();
63 
64         // check if claim deadline is expired
65         if (block.timestamp > claimDeadline) revert ClaimDeadlineExpired();
66 
67         // Verify the merkle proof
68         bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));
69         if (!MerkleProof.verify(merkleProof, merkleRoot, node))
70             revert InvalidProof();
71 
72         // Mark the account as claimed for the current merkle root version
73         _hasClaimed[msg.sender] = _currentMerkleRootVersion;
74 
75         // send specified and validated amount of tokens to caller
76         SafeERC20.safeTransfer(IERC20(tokenAddress), msg.sender, amount);
77 
78         emit Claimed(msg.sender, amount);
79     }
80 
81     /// ADMIN FUNCTIONS ///
82 
83     /// @notice Sends all unclaimed token balance(s) to the specified address
84     /// @param to the address unclaimed funds should be sent to
85     function withdrawUnclaimed(
86         address[] calldata tokenAddresses,
87         address to
88     ) public onlyOwner whenNotPaused {
89         for (uint i; i < tokenAddresses.length; ) {
90             // get current balance
91             uint256 balance = IERC20(tokenAddresses[i]).balanceOf(
92                 address(this)
93             );
94 
95             // send specified and validated amount of tokens to caller
96             SafeERC20.safeTransfer(IERC20(tokenAddresses[i]), to, balance);
97 
98             // gas-efficient way to increase loop index
99             unchecked {
100                 ++i;
101             }
102         }
103     }
104 
105     /// @notice Updates the merkle root and its version to allow wallets that have previously claimed to claim again, if permitted
106     /// @param merkleRoot_ the root of the merkle tree that contains all claimable amounts
107     /// @param deadline timestamp until claims for this merkle root are claimable
108     /// @param tokenAddress_ address of the gas rebate token
109     function updateMerkleRoot(
110         bytes32 merkleRoot_,
111         uint256 deadline,
112         address tokenAddress_
113     ) public onlyOwner {
114         // update the merkle root
115         merkleRoot = merkleRoot_;
116 
117         // update tokenAddress
118         tokenAddress = tokenAddress_;
119 
120         // update the claimable-until deadline
121         claimDeadline = deadline;
122 
123         // increase the merkle root version
124         _currentMerkleRootVersion++;
125     }
126 
127     /// @notice Allows to pause the contract to stop claims and withdrawals for security purposes
128     function pauseContract() external onlyOwner {
129         _pause();
130     }
131 
132     /// @notice Allows to unpause the contract to stop claims and withdrawals for security purposes
133     function unpauseContract() external onlyOwner {
134         _unpause();
135     }
136 }
