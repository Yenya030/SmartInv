{{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./IBridge.sol\";\n\n/// @title Root network bridge contract on ethereum\n/// @author Root Network\n/// @notice Provides methods for verifying messages from the validator set\ncontract Bridge is IBridge, IBridgeReceiver, Ownable, ReentrancyGuard, ERC165 {\n    using ECDSA for bytes32;\n\n    // map from validator set nonce to keccak256 digest of validator ECDSA addresses (i.e bridge session keys)\n    // these should be encoded in sorted order matching `pallet_session::Module<T>::validators()` to create the digest\n    // signatures from a threshold of these addresses are considered approved by the protocol\n    mapping(uint => bytes32) public validatorSetDigests;\n    // Nonce for validator set changes\n    uint32 public activeValidatorSetId;\n    // Nonce of the next outgoing event\n    uint public sentEventId;\n    // Map of verified incoming event nonces\n    // will only validate one event per nonce.\n    // Verification/submission out of order is ok.\n    mapping(uint => bool) public verifiedEventIds;\n    // Fee for message verification\n    // Offsets bridge upkeep costs i.e updating the validator set\n    uint public bridgeFee = 4e15; // 0.004 ether\n    // Acceptance threshold in %\n    uint public thresholdPercent = 60;\n    // Number of staking eras before a bridge message will be considered expired\n    uint public proofTTL = 7;\n    // Whether the bridge is active or not\n    bool public active = false;\n    // Max reward paid out to successful caller of `setValidator`\n    uint public maxRewardPayout = 1 ether;\n    // The bridge pallet (pseudo) address this contract is paired with\n    address public palletAddress =\n        address(0x6D6f646C65746879627264670000000000000000);\n    // Max message length allowed\n    uint public maxMessageLength = 1024; // 1kb\n    // Fee required to be paid for SendMessage calls\n    uint256 internal _sendMessageFee = 3e14; // 0.0003 ether\n    // Message fees accumulated by the bridge\n    uint public accumulatedMessageFees;\n\n    event MessageReceived(\n        uint indexed eventId,\n        address indexed source,\n        address indexed destinate,\n        bytes message\n    );\n    event SetValidators(\n        bytes32 indexed validatorSetDigest,\n        uint256 indexed reward,\n        uint32 indexed validatorSetId\n    );\n    event ForceSetActiveValidators(\n        bytes32 indexed validatorSetDigest,\n        uint32 indexed validatorSetId\n    );\n    event ForceSetHistoricValidators(\n        bytes32 indexed validatorSetDigest,\n        uint32 indexed validatorSetId\n    );\n    event BridgeFeeUpdated(uint indexed bridgeFee);\n    event ThresholdUpdated(uint indexed thresholdPercent);\n    event ProofTTLUpdated(uint indexed proofTTL);\n    event BridgeActiveUpdated(bool indexed active);\n    event MaxRewardPayoutUpdated(uint indexed maxRewardPayout);\n    event PalletAddressUpdated(address indexed palletAddress);\n    event MaxMessageLengthUpdated(uint indexed maxMessageLength);\n    event SentEventIdUpdated(uint indexed _newId);\n    event Endowed(uint256 indexed amount);\n    event EtherWithdrawn(address _to, uint256 _amount);\n    event WithdrawnMessageFees(address indexed recipient, uint indexed amount);\n    event SendMessageFeeUpdated(uint256 indexed sendMessageFee);\n\n    /// @notice Emit an event for the remote chain\n    function sendMessage(address destination, bytes calldata message)\n        external\n        payable\n        override\n    {\n        require(active, \"Bridge: bridge inactive\");\n        require(message.length <= maxMessageLength, \"Bridge: msg exceeds max length\");\n        require(msg.value >= _sendMessageFee, \"Bridge: insufficient message fee\");\n        accumulatedMessageFees += msg.value;\n        emit SendMessage(sentEventId++, msg.sender, destination, message, msg.value);\n    }\n\n    function sendMessageFee() external override view returns (uint256) {\n        return _sendMessageFee;\n    }\n\n    /// @notice Receive a message from the remote chain\n    /// @param proof contains a list of validator signature data and respective addresses - retrieved via RPC call from the remote chain\n    function receiveMessage(\n        address source,\n        address destination,\n        bytes calldata appMessage,\n        EventProof calldata proof\n    ) external payable override {\n        require(\n            msg.value >= bridgeFee || destination == address(this),\n            \"Bridge: must supply bridge fee\"\n        );\n        require(appMessage.length > 0, \"Bridge: empty message\");\n\n        bytes memory preimage = abi.encode(\n            source,\n            destination,\n            appMessage,\n            proof.validatorSetId,\n            proof.eventId\n        );\n        _verifyMessage(preimage, proof);\n\n        emit MessageReceived(proof.eventId, source, destination, appMessage);\n\n        // call bridge receiver\n        IBridgeReceiver(destination).onMessageReceived(source, appMessage);\n    }\n\n    /// @notice Verify a message was authorised by validators.\n    /// - Callable by anyone.\n    /// - Caller must provide `bridgeFee`.\n    /// - Requires signatures from a threshold validators at proof.validatorSetId.\n    /// - Requires proof is not older than `proofTTL` eras\n    /// - Halts on failure\n    ///\n    /// @dev Parameters:\n    /// - preimage: the unhashed message data packed wide w source, dest, validatorSetId & eventId e.g. `abi.encode(source, dest, message, validatorSetId, eventId);`\n    /// - proof: Signed witness material generated by proving 'message'\n    ///     - v,r,s are sparse arrays expected to align w public key in 'validators'\n    ///     - i.e. v[i], r[i], s[i] matches the i-th validator[i]\n    function _verifyMessage(bytes memory preimage, EventProof calldata proof)\n        internal\n    {\n        // gas savings\n        uint256 _eventId = proof.eventId;\n        uint32 _validatorSetId = proof.validatorSetId;\n        address[] memory _validators = proof.validators;\n\n        require(active, \"Bridge: bridge inactive\");\n        require(!verifiedEventIds[_eventId], \"Bridge: eventId replayed\");\n        require(\n            _validatorSetId <= activeValidatorSetId,\n            \"Bridge: future validator set\"\n        );\n        require(\n            activeValidatorSetId - _validatorSetId <= proofTTL,\n            \"Bridge: expired proof\"\n        );\n        // audit item #1\n        require(_validators.length > 0, \"Bridge: invalid validator set\");\n        require(\n            keccak256(abi.encode(_validators)) ==\n                validatorSetDigests[_validatorSetId],\n            \"Bridge: unexpected validator digest\"\n        );\n\n        bytes32 digest = keccak256(preimage);\n        uint acceptanceTreshold = ((_validators.length * thresholdPercent) /\n            100);\n        uint witnessCount; // uint256(0)\n        bytes32 ommited; // bytes32(0)\n\n        for (uint i; i < _validators.length; ++i) {\n            if (proof.r[i] != ommited) { // check signature omitted == bytes32(0)\n                // check signature\n                require(\n                    _validators[i] == digest.recover(proof.v[i], proof.r[i], proof.s[i]),\n                    \"Bridge: signature invalid\"\n                );\n                witnessCount += 1;\n                // have we got proven consensus?\n                if (witnessCount >= acceptanceTreshold) {\n                    break;\n                }\n            }\n        }\n\n        require(witnessCount >= acceptanceTreshold, \"Bridge: not enough signatures\");\n        verifiedEventIds[_eventId] = true;\n    }\n\n    /// @notice Handle a verified message provided by 'receiveMessage` to update the next validator set\n    /// i.e. The bridge contract is itself a bridge app contract\n    function onMessageReceived(address source, bytes calldata message)\n        external\n        override\n    {\n        require(msg.sender == address(this), \"Bridge: only bridge can call\");\n        require(source == palletAddress, \"Bridge: source must be pallet\");\n        (address[] memory newValidators, uint32 newValidatorSetId) = abi.decode(\n            message,\n            (address[], uint32)\n        );\n        _setValidators(newValidators, newValidatorSetId);\n    }\n\n    /// @dev Update the known validator set (must be called via 'relayMessage' with a valid proof of new validator set)\n    function _setValidators(\n        address[] memory newValidators,\n        uint32 newValidatorSetId\n    ) internal nonReentrant {\n        require(newValidators.length > 0, \"Bridge: empty validator set\"); // also checked in _verifyMessage\n        require(\n            newValidatorSetId > activeValidatorSetId,\n            \"Bridge: validator set id replayed\"\n        );\n\n        // update set digest and active id\n        bytes32 validatorSetDigest = keccak256(abi.encode(newValidators));\n        validatorSetDigests[newValidatorSetId] = validatorSetDigest;\n        activeValidatorSetId = newValidatorSetId;\n\n        // return accumulated fees to the sender as a reward, capped at `maxRewardPayout`\n        uint reward = Math.min(address(this).balance - accumulatedMessageFees, maxRewardPayout);\n        (bool sent, ) = tx.origin.call{value: reward}(\"\");\n        require(sent, \"Bridge: Failed to send reward\");\n\n        emit SetValidators(validatorSetDigest, reward, newValidatorSetId);\n    }\n\n    /// @dev See {IERC165-supportsInterface}. Docs: https://docs.openzeppelin.com/contracts/4.x/api/utils#IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return\n            interfaceId == type(IBridge).interfaceId ||\n            interfaceId == type(IBridgeReceiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    // ============================================================================================================= //\n    // ============================================== Admin functions ============================================== //\n    // ============================================================================================================= //\n\n    /// @notice force set the active validator set\n    /// @dev newValidatorSetId can be equal to current activeValidatorSetId - to override current validators\n    function forceActiveValidatorSet(\n        address[] calldata newValidators,\n        uint32 newValidatorSetId\n    ) external onlyOwner {\n        require(newValidators.length > 0, \"Bridge: empty validator set\");\n        require(newValidatorSetId >= activeValidatorSetId, \"Bridge: set is historic\");\n        bytes32 validatorSetDigest = keccak256(abi.encode(newValidators));\n        validatorSetDigests[newValidatorSetId] = validatorSetDigest;\n        activeValidatorSetId = newValidatorSetId;\n        emit ForceSetActiveValidators(validatorSetDigest, newValidatorSetId);\n    }\n\n    /// @notice Force set a historic validator set\n    /// @dev Sets older than proofTTL are not modifiable (since they cannot produce valid proofs any longer)\n    function forceHistoricValidatorSet(\n        address[] calldata _validators,\n        uint32 validatorSetId\n    ) external onlyOwner {\n        require(_validators.length > 0, \"Bridge: empty validator set\");\n        require(\n            validatorSetId + proofTTL > activeValidatorSetId,\n            \"Bridge: set is inactive\"\n        );\n        bytes32 validatorSetDigest = keccak256(abi.encode(_validators));\n        validatorSetDigests[validatorSetId] = validatorSetDigest;\n        emit ForceSetHistoricValidators(validatorSetDigest, validatorSetId);\n    }\n\n    /// @notice Set the TTL for historic validator set proofs\n    function setProofTTL(uint256 _proofTTL) external onlyOwner {\n        proofTTL = _proofTTL;\n        emit ProofTTLUpdated(_proofTTL);\n    }\n\n    /// @notice Set the max reward payout for `setValidator` incentive\n    function setMaxRewardPayout(uint256 _maxRewardPayout) external onlyOwner {\n        maxRewardPayout = _maxRewardPayout;\n        emit MaxRewardPayoutUpdated(_maxRewardPayout);\n    }\n\n    /// @notice Set the sentEventId for the contract to start with\n    function setSentEventId(uint _newId) external onlyOwner {\n        sentEventId = _newId;\n        emit SentEventIdUpdated(_newId);\n    }\n\n    /// @notice Set the fee for verify messages\n    function setBridgeFee(uint256 _bridgeFee) external onlyOwner {\n        bridgeFee = _bridgeFee;\n        emit BridgeFeeUpdated(_bridgeFee);\n    }\n\n    /// @notice Set the threshold % required for proof verification\n    function setThreshold(uint256 _thresholdPercent) external onlyOwner {\n        require(_thresholdPercent <= 100, \"Bridge: percent must be <= 100\");\n        thresholdPercent = _thresholdPercent;\n        emit ThresholdUpdated(_thresholdPercent);\n    }\n\n    /// @notice Set the pallet address\n    function setPalletAddress(address _palletAddress) external onlyOwner {\n        palletAddress = _palletAddress;\n        emit PalletAddressUpdated(_palletAddress);\n    }\n\n    /// @notice Activate/deactivate the bridge\n    function setActive(bool _active) external onlyOwner {\n        active = _active;\n        emit BridgeActiveUpdated(_active);\n    }\n\n    /// @dev Reset max message length\n    function setMaxMessageLength(uint256 _maxMessageLength) external onlyOwner {\n        maxMessageLength = _maxMessageLength;\n        emit MaxMessageLengthUpdated(_maxMessageLength);\n    }\n\n    /// @dev Endow the contract with ether\n    function endow() external payable {\n        require(msg.value > 0, \"Bridge: must endow nonzero\");\n        emit Endowed(msg.value);\n    }\n\n    /// @dev Owner can withdraw ether from the contract (primarily to support contract upgradability)\n    function withdrawAll(address payable _to) public onlyOwner {\n        uint256 balance = address(this).balance;\n        (bool sent,) = _to.call{value: balance}(\"\");\n        require(sent, \"Bridge: failed to send Ether\");\n        emit EtherWithdrawn(_to, balance);\n    }\n\n    /// @dev Set _sendMessageFee\n    function setSendMessageFee(uint256 _fee) external onlyOwner {\n        _sendMessageFee = _fee;\n        emit SendMessageFeeUpdated(_fee);\n    }\n\n    /// @dev Owner can withdraw accumulates msg fees from the contract\n    function withdrawMsgFees(address payable _to, uint256 _amount) public onlyOwner {\n        accumulatedMessageFees -= _amount; // prevent re-entrancy protection\n        (bool sent, ) = _to.call{value: _amount}(\"\");\n        require(sent, \"Bridge: Failed to send msg fees\");\n        emit WithdrawnMessageFees(_to, _amount);\n    }\n}\n"
    },
    "contracts/IBridge.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.17;\n\n// Proof of a witnessed event by validators\nstruct EventProof {\n    // The Id (nonce) of the event\n    uint256 eventId;\n    // The validator set Id which witnessed the event\n    uint32 validatorSetId;\n    // v,r,s are sparse arrays expected to align w public key in 'validators'\n    // i.e. v[i], r[i], s[i] matches the i-th validator[i]\n    // v part of validator signatures\n    uint8[] v;\n    // r part of validator signatures\n    bytes32[] r;\n    // s part of validator signatures\n    bytes32[] s;\n    // The validator addresses\n    address[] validators;\n}\n\ninterface IBridge {\n    // A sent message event\n    event SendMessage(uint messageId, address source, address destination, bytes message, uint256 fee);\n    // Receive a bridge message from the remote chain\n    function receiveMessage(address source, address destination, bytes calldata message, EventProof calldata proof) external payable;\n    // Send a bridge message to the remote chain\n    function sendMessage(address destination, bytes calldata message) external payable;\n    // Send message fee - used by sendMessage caller to obtain required fee for sendMessage\n    function sendMessageFee() external view returns (uint256);\n}\n\ninterface IBridgeReceiver {\n    // Handle a bridge message received from the remote chain\n    // It is guaranteed to be valid\n    function onMessageReceived(address source, bytes calldata message) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}