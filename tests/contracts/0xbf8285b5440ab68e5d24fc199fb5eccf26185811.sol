{{
  "language": "Solidity",
  "sources": {
    "contracts/Streets.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// Â©2022 Ponderware Ltd\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ICondos {\n    function assembleRandomStreet(uint256 seed) external returns (uint16[5] memory ids);\n    function breakupStreet(address to, uint256[] calldata ids) external;\n    function assembleStreet(address from, uint256[] calldata ids) external;\n}\n\ninterface IMetadata {\n    function condosAddress() external pure returns (address contractAddress);\n    function streetMetadata(uint256 tokenId) external view returns (string memory);\n    function revealed() external pure returns (bool isRevealed);\n    function CONDOS_IPFS_CID() external pure returns (string memory condosIPFS);\n    function BACKGROUNDS_IPFS_CID() external pure returns (string memory backgroundsIPFS);\n    function STREETS_PREREVEAL_URI() external pure returns (string memory streetsURI);\n    function IPFS_URI_Prefix() external pure returns (string memory prefixURI);\n    function totalBackgrounds() external pure returns (uint16 numBackgrounds);\n}\n\ninterface IMoonCatSVGS {\n    function uint2str(uint value) external pure returns (string memory);\n}\n\ninterface IReverseResolver {\n    function claim(address owner) external returns (bytes32);\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\n\n/*\n * @title CondoMini Streets\n * @author Ponderware Ltd\n * @dev CondoMini Neighborhood ERC-721 NFT\n */\ncontract Streets is Ownable, IERC721Enumerable, IERC721Metadata {\n    ICondos public Condos;\n    IMetadata public Metadata;\n\n    uint256 public price = 0.01 ether;\n    bool public paused = true;\n\n    string public name = \"CondoMiniNeighborhood\";\n    string public symbol = \"CMi\";\n\n    address[4000] private Owners;\n    mapping(address => uint256[]) internal TokensByOwner;\n    uint16[4000] internal OwnerTokenIndex;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private TokenApprovals;\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private OperatorApprovals;\n\n    uint256 public mintsAvailable = 4000;\n    uint256 public totalSupply = 0;\n\n    bool public onlyFriends = true;\n    mapping(address => bool) private Friends;\n\n    address private immutable publisher;\n\n    struct Street {\n        uint16[5] condos;\n        uint16 background;\n        bytes20 name;\n    }\n\n    Street[4000] directory;\n    uint16[] availableIds;\n\n    constructor(address metadataAddress, address publisherAddress) {\n        publisher = publisherAddress;\n        Metadata = IMetadata(metadataAddress);\n        Condos = ICondos(Metadata.condosAddress());\n    }\n\n    /* Modifiers */\n    modifier whenNotPaused() {\n        require(paused == false, \"Paused\");\n        _;\n    }\n\n    modifier notContracts() {\n        require(tx.origin == msg.sender, \"Contracts not allowed\");\n        _;\n    }\n\n    /* Administration */\n    function pause() public onlyOwner {\n        paused = true;\n    }\n\n    function unpause() public onlyOwner {\n        paused = false;\n    }\n\n    function openPublicMint() public onlyOwner {\n        onlyFriends = false;\n    }\n\n    function refreshCondosAdress() public onlyOwner {\n        Condos = ICondos(Metadata.condosAddress());\n    }\n\n    function addFriends(address[] calldata friendAddresses) public onlyOwner {\n        for (uint i = 0; i < friendAddresses.length; i++) {\n            Friends[friendAddresses[i]] = true;\n        }\n    }\n\n    function setPrice(uint256 priceWei) public onlyOwner {\n        price = priceWei;\n    }\n\n    function clearName(uint256 tokenId) public onlyOwner {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        directory[tokenId].name = 0;\n    }\n\n    function withdraw() public {\n        require(msg.sender == owner() || msg.sender == publisher, \"Unauthorized\");\n        uint256 publisherShare = (address(this).balance * 40) / 100;\n        payable(publisher).transfer(publisherShare);\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function isFriend(address friendAddress) public view returns (bool) {\n        return Friends[friendAddress] == true;\n    }\n\n    function _handleMintStreet(address recipient) internal returns (uint256 tokenId) {\n        require(mintsAvailable > 0, \"Insufficient supply available\");\n\n        uint256 seed = uint256(keccak256(abi.encodePacked(recipient, blockhash(block.number - 1))));\n\n        uint16[5] memory ids = Condos.assembleRandomStreet(seed);\n\n        tokenId = _mint(recipient);\n\n        uint16 backgroundId = uint16(uint256(keccak256(abi.encodePacked(tokenId, seed))) % Metadata.totalBackgrounds());\n\n        directory[tokenId] = Street(ids, backgroundId, \"\");\n\n        mintsAvailable--;\n    }\n\n    function premintRandomStreets(address recipient, uint256 quantity) public onlyOwner {\n        for (uint256 i = 0; i < quantity; i++) {\n            _handleMintStreet(recipient);\n        }\n    }\n\n    function mintRandomStreet(address recipient) public payable whenNotPaused notContracts returns (uint256 id) {\n        require(onlyFriends == false || Friends[msg.sender] == true, \"Public minting not open\");\n\n        uint256 cost = price * 5;\n        require(msg.value >= cost, \"Insufficient Funds\");\n\n        id = _handleMintStreet(recipient);\n    }\n\n    function mintRandomStreets(address recipient, uint256 quantity) public payable whenNotPaused notContracts {\n        require(onlyFriends == false || Friends[msg.sender] == true, \"Public minting not open\");\n\n        uint256 cost = price * 5 * quantity;\n        require(msg.value >= cost, \"Insufficient Funds\");\n\n        for (uint256 i = 0; i < quantity; i++) {\n            _handleMintStreet(recipient);\n        }\n    }\n\n    function assembleStreet(uint256[] memory ids, uint16 backgroundId, bytes20 streetName) public whenNotPaused notContracts returns (uint256 tokenId) {\n        require(Metadata.revealed(), \"The metadata has not yet revealed\");\n        require(ids.length == 5, \"Requires 5 Condos\");\n        require(backgroundId < Metadata.totalBackgrounds(), \"Invalid background id\");\n        Condos.assembleStreet(msg.sender, ids);\n\n        tokenId = _mint(msg.sender);\n\n        uint16[5] memory newStreet;\n        newStreet[0] = uint16(ids[0]);\n        newStreet[1] = uint16(ids[1]);\n        newStreet[2] = uint16(ids[2]);\n        newStreet[3] = uint16(ids[3]);\n        newStreet[4] = uint16(ids[4]);\n\n        directory[tokenId] = Street(newStreet, backgroundId, streetName);\n    }\n\n    function breakupStreet(uint256 tokenId) public whenNotPaused notContracts {\n        require(Metadata.revealed(), \"The metadata has not yet revealed\");\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        Street storage street = directory[tokenId];\n        uint256[] memory condoIds = new uint256[](5);\n        condoIds[0] = street.condos[0];\n        condoIds[1] = street.condos[1];\n        condoIds[2] = street.condos[2];\n        condoIds[3] = street.condos[3];\n        condoIds[4] = street.condos[4];\n\n        Condos.breakupStreet(msg.sender, condoIds);\n        _burn(tokenId);\n        delete directory[tokenId];\n    }\n\n    function breakupStreets(uint256[] calldata tokenIds) public {\n        require(Metadata.revealed(), \"The metadata has not yet revealed\");\n\n        for (uint i = 0; i < tokenIds.length; i++) {\n            breakupStreet(tokenIds[i]);\n        }\n    }\n\n    function getStreetCondos(uint256 tokenId) public view returns (uint16[5] memory ids) {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        Street storage street = directory[tokenId];\n        ids = street.condos;\n    }\n\n    /* Minting Helpers */\n\n    function _mint(address to) internal returns (uint256 tokenId) {\n        if (availableIds.length > 0) {\n            tokenId = availableIds[availableIds.length - 1];\n            availableIds.pop();\n        } else {\n            tokenId = totalSupply;\n        }\n        TokensByOwner[to].push(tokenId);\n        OwnerTokenIndex[tokenId] = uint16(TokensByOwner[to].length);\n        Owners[tokenId] = to;\n        totalSupply++;\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    function _burn(uint256 tokenId) internal {\n        _approve(address(0), tokenId);\n        address from = Owners[tokenId];\n        uint16 valueIndex = OwnerTokenIndex[tokenId];\n        uint256 toDeleteIndex = valueIndex - 1;\n        uint256 lastIndex = TokensByOwner[from].length - 1;\n        if (lastIndex != toDeleteIndex) {\n            uint256 lastTokenId = TokensByOwner[from][lastIndex];\n            TokensByOwner[from][toDeleteIndex] = lastTokenId;\n            OwnerTokenIndex[lastTokenId] = valueIndex;\n        }\n        TokensByOwner[from].pop();\n        Owners[tokenId] = address(0);\n\n        totalSupply--;\n        availableIds.push(uint16(tokenId));\n\n        emit Transfer(from, address(0), tokenId);\n    }\n\n    /* ERC-721 Metadata */\n\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        require(tokenExists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n        if (Metadata.revealed()) {\n            return Metadata.streetMetadata(tokenId);\n        } else {\n            // Show unrevealed json\n            return Metadata.STREETS_PREREVEAL_URI();\n        }\n    }\n\n    function tokenImage(uint256 tokenId) public view returns (string memory) {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        if (Metadata.revealed()) {\n            return assembleSVG(directory[tokenId].condos, directory[tokenId].background);\n        } else {\n            // Show no image\n            return \"\";\n        }\n    }\n\n    function getStreetData(uint256 tokenId) public view returns (uint16[5] memory condoIds, uint16 background, bytes20 name) {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        Street storage street = directory[tokenId];\n        condoIds = street.condos;\n        background = street.background;\n        name = street.name;\n    }\n\n    /* ERC-721 Enumerable */\n\n    function tokenByIndex(uint256 tokenId) public view returns (uint256) {\n        require(tokenExists(tokenId), \"Nonexistent Token\");\n        return tokenId;\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return TokensByOwner[owner][index];\n    }\n\n    /* ERC 721 */\n\n    function tokenExists(uint256 tokenId) public view returns (bool) {\n        return Owners[tokenId] != address(0);\n    }\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        require(tokenExists(tokenId), \"ERC721: Nonexistent token\");\n        return Owners[tokenId];\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return TokensByOwner[owner].length;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {\n        return\n            interfaceId == type(IERC165).interfaceId ||\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            interfaceId == type(IERC721Enumerable).interfaceId;\n    }\n\n    function _approve(address to, uint256 tokenId) internal {\n        TokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n        _approve(to, tokenId);\n    }\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(tokenExists(tokenId), \"ERC721: approved query for nonexistent token\");\n        return TokenApprovals[tokenId];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return OperatorApprovals[owner][operator];\n    }\n\n    function setApprovalForAll(address operator, bool approved) external virtual {\n        require(msg.sender != operator, \"ERC721: approve to caller\");\n        OperatorApprovals[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns (bool) {\n        if (isContract(to)) {\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function _transfer(address from, address to, uint256 tokenId) private whenNotPaused {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        uint16 valueIndex = OwnerTokenIndex[tokenId];\n        uint256 toDeleteIndex = valueIndex - 1;\n        uint256 lastIndex = TokensByOwner[from].length - 1;\n        if (lastIndex != toDeleteIndex) {\n            uint256 lastTokenId = TokensByOwner[from][lastIndex];\n            TokensByOwner[from][toDeleteIndex] = lastTokenId;\n            OwnerTokenIndex[lastTokenId] = valueIndex;\n        }\n        TokensByOwner[from].pop();\n\n        TokensByOwner[to].push(tokenId);\n        OwnerTokenIndex[tokenId] = uint16(TokensByOwner[to].length);\n\n        Owners[tokenId] = to;\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(tokenExists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) private {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Claim ENS reverse-resolver rights for this contract.\n     * https://docs.ens.domains/contract-api-reference/reverseregistrar#claim-address\n     */\n    function setReverseResolver(address registrar) public onlyOwner {\n        IReverseResolver(registrar).claim(msg.sender);\n    }\n\n    /**\n     * @dev Rescue ERC20 assets sent directly to this contract.\n     */\n    function withdrawForeignERC20(address tokenContract) public onlyOwner {\n        IERC20 token = IERC20(tokenContract);\n        token.transfer(msg.sender, token.balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Rescue ERC721 assets sent directly to this contract.\n     */\n    function withdrawForeignERC721(address tokenContract, uint256 tokenId) public virtual onlyOwner {\n        IERC721(tokenContract).safeTransferFrom(address(this), msg.sender, tokenId);\n    }\n\n    /* SVG Assembly */\n\n    IMoonCatSVGS MoonCatSVGS = IMoonCatSVGS(0xB39C61fe6281324A23e079464f7E697F8Ba6968f);\n\n    /**\n     * @dev Assemble one png layer of the SVG composite\n     */\n    function svgLayer(uint16 condoId, uint16 posX) internal view returns (bytes memory) {\n        return\n            abi.encodePacked(\n                '<image x=\"',\n                MoonCatSVGS.uint2str(posX),\n                '\" y=\"104\" width=\"385\" height=\"385\" href=\"',\n                Metadata.IPFS_URI_Prefix(),\n                Metadata.CONDOS_IPFS_CID(),\n                \"/\",\n                MoonCatSVGS.uint2str(condoId),\n                '.png\" />'\n            );\n    }\n\n    /**\n     * @dev Assemble the full SVG image for a street\n     */\n    function assembleSVG(uint16[5] memory condoIds, uint16 background) internal view returns (string memory) {\n        bytes memory svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 1500 500\" width=\"1500\" height=\"500\">';\n\n        svg = abi.encodePacked(\n            svg,\n            '<image x=\"0\" y=\"0\" width=\"1500\" height=\"500\" href=\"',\n            Metadata.IPFS_URI_Prefix(),\n            Metadata.BACKGROUNDS_IPFS_CID(),\n            \"/\",\n            MoonCatSVGS.uint2str(background),\n            '.jpg\" />'\n        );\n\n        uint16 posX = 0;\n\n        for (uint i = 0; i < 5; i++) {\n            svg = abi.encodePacked(svg, svgLayer(condoIds[i], posX));\n            posX = posX + 279;\n        }\n\n        return string(abi.encodePacked(svg, \"</svg>\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}