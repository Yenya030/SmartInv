{{
  "language": "Solidity",
  "sources": {
    "contracts/interface/factory/IQWAFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.8.19;\n\ninterface IQWAFactory {\n    function WETH() external view returns (address);\n    function QWN() external view returns (address);\n    function sQWN() external view returns (address);\n    function QWNStaking() external view returns (address);\n    function feeAddress() external view returns (address);\n    function feeDiscount(address _user) external view returns (bool);\n}\n"
    },
    "contracts/interface/IQWAFee.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IQWAFee {\n    function convertFees() external;\n}\n"
    },
    "contracts/token/QWA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IQWAFee.sol\";\nimport \"../interface/factory/IQWAFactory.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../IERC20.sol\"; */\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(\n        address tokenA,\n        address tokenB\n    ) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(\n        address tokenA,\n        address tokenB\n    ) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ninterface IUniswapV3Router {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(\n        ExactInputSingleParams calldata params\n    ) external payable returns (uint256 amountOut);\n}\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint) external;\n}\n\n/// @title   QuantumWealthAcceleratorToken\n/// @notice  Quantum Wealth Accelerator Token\ncontract QuantumWealthAcceleratorToken is ERC20, Ownable {\n    /// STATE VARIABLES ///\n\n    /// @notice Address of UniswapV2Router\n    IUniswapV2Router02 private immutable uniswapV2Router;\n    /// @notice Address of UniswapV3Router\n    address private immutable uniswapV3Router;\n\n    /// @notice Address of QWN/ETH LP\n    address public immutable uniswapV2Pair;\n    /// @notice WETH address\n    address private immutable WETH;\n    /// @notice Backing token addresses\n    address[] public backingTokens;\n    /// @notice Backing token V3 pool fee to swap (if 0 - v2)\n    uint24[] private backingTokensV3Fee;\n    /// @notice QWN treasury\n    address public treasury;\n    /// @notice Address QWA Factory address\n    address private QWAFactory;\n\n    bool private swapping;\n\n    uint256 private backingSwapping;\n\n    /// @notice Current percent of supply to swap tokens at (i.e. 5 = 0.05%)\n    uint256 private swapPercent;\n\n    /// @notice Current total fees\n    uint256 public totalFees;\n    /// @notice Current backing fee\n    uint256 public backingFee;\n    /// @notice Current liquidity fee\n    uint256 public liquidityFee;\n    /// @notice 1% QWA fee\n    uint256 public constant QWA_FEE = 100;\n    /// @notice Current team fee\n    uint256 public teamFee;\n\n    /// @notice Current tokens going for backing\n    uint256 public tokensForBacking;\n    /// @notice Current tokens going for liquidity\n    uint256 public tokensForLiquidity;\n    /// @notice Current tokens going for tean\n    uint256 public tokensForTeam;\n    /// @notice Current tokens going towards fee\n    uint256 public tokensForFee;\n\n    /// MAPPINGS ///\n\n    /// @dev Bool if address is excluded from fees\n    mapping(address => bool) private _isExcludedFromFees;\n\n    /// @notice Bool if address is AMM pair\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    /// EVENTS ///\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    /// CONSTRUCTOR ///\n\n    /// @param _weth  Address of WETH\n    constructor(\n        address _qwaFactory,\n        address _weth,\n        address[] memory _backingTokens,\n        uint24[] memory _backingTokensV3Fee,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) {\n        QWAFactory = _qwaFactory;\n        WETH = _weth;\n        backingTokens = _backingTokens;\n        backingTokensV3Fee = _backingTokensV3Fee;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n\n        uniswapV2Router = _uniswapV2Router;\n\n        uniswapV3Router = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _weth);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n\n        swapPercent = 25; // 0.25%\n\n        backingFee = 200;\n        liquidityFee = 100;\n        teamFee = 100;\n        totalFees = 500;\n\n        // exclude from paying fees\n        _isExcludedFromFees[_qwaFactory] = true;\n        _isExcludedFromFees[address(this)] = true;\n\n        /// Starting supply of 25,000\n        _mint(_qwaFactory, 25000000000000);\n    }\n\n    /// RECEIVE ///\n\n    receive() external payable {}\n\n    /// AMM PAIR ///\n\n    /// @notice       Sets if address is AMM pair\n    /// @param pair   Address of pair\n    /// @param value  Bool if AMM pair\n    function setAutomatedMarketMakerPair(\n        address pair,\n        bool value\n    ) public onlyOwner {\n        require(pair != uniswapV2Pair);\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    /// @dev Internal function to set `vlaue` of `pair`\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    /// INTERNAL TRANSFER ///\n\n    /// @dev Internal function to burn `amount` from `account`\n    function _burnFrom(address account, uint256 amount) internal {\n        uint256 decreasedAllowance_ = allowance(account, msg.sender) - amount;\n\n        _approve(account, msg.sender, decreasedAllowance_);\n        _burn(account, amount);\n    }\n\n    /// @dev Internal function to transfer - handles fee logic\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount();\n\n        if (\n            canSwap &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n\n            swapBack();\n\n            swapping = false;\n        }\n\n        bool takeFee = !swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        uint256 fees;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // on buy or sell\n            if (\n                (automatedMarketMakerPairs[from] ||\n                    automatedMarketMakerPairs[to]) && totalFees > 0\n            ) {\n                fees = (amount * totalFees) / 10000;\n                if (IQWAFactory(QWAFactory).feeDiscount(tx.origin))\n                    fees = (fees * 3) / 4;\n                tokensForLiquidity += (fees * liquidityFee) / totalFees;\n                tokensForTeam += (fees * teamFee) / totalFees;\n                tokensForBacking += (fees * backingFee) / totalFees;\n                tokensForFee += (fees * QWA_FEE) / totalFees;\n            }\n\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n            }\n\n            amount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    /// PRIVATE FUNCTIONS ///\n\n    /// @dev PRIVATE function to swap `ethTokenAmount` for ETH\n    /// @dev Invoked in `swapBack()`\n    function swapTokens(\n        uint256 ethTokenAmount,\n        uint256 totalTokensToSwap\n    ) private returns (uint256 ethBalance_, uint256 ethForBacking_) {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = WETH;\n\n        _approve(address(this), address(uniswapV2Router), ethTokenAmount + 1);\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            ethTokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        ethBalance_ = address(this).balance;\n\n        ethForBacking_ =\n            (ethBalance_ * tokensForBacking) /\n            (totalTokensToSwap - tokensForLiquidity / 2);\n\n        address backingToken = backingTokens[backingSwapping];\n\n        if (backingToken == WETH) {\n            IWETH(WETH).deposit{value: ethForBacking_}();\n            IERC20(WETH).transfer(treasury, ethForBacking_);\n        } else {\n            if (backingTokensV3Fee[backingSwapping] == 0) {\n                path[0] = WETH;\n                path[1] = backingToken;\n\n                uniswapV2Router\n                    .swapExactETHForTokensSupportingFeeOnTransferTokens{\n                    value: ethForBacking_\n                }(0, path, treasury, block.timestamp);\n            } else {\n                IUniswapV3Router.ExactInputSingleParams\n                    memory params = IUniswapV3Router.ExactInputSingleParams({\n                        tokenIn: WETH,\n                        tokenOut: backingToken,\n                        fee: backingTokensV3Fee[backingSwapping],\n                        recipient: treasury,\n                        deadline: block.timestamp,\n                        amountIn: ethForBacking_,\n                        amountOutMinimum: 0,\n                        sqrtPriceLimitX96: 0\n                    });\n\n                IUniswapV3Router(uniswapV3Router).exactInputSingle{\n                    value: ethForBacking_\n                }(params);\n            }\n        }\n\n        if (backingSwapping == backingTokens.length - 1) backingSwapping = 0;\n        else ++backingSwapping;\n    }\n\n    /// @dev PRIVATE function to add `tokenAmount` and `ethAmount` to LP\n    /// @dev Invoked in `swapBack()`\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            treasury,\n            block.timestamp\n        );\n    }\n\n    /// @dev PRIVATE function to transfer fees properly\n    /// @dev Invoked in `_transfer()`\n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForLiquidity +\n            tokensForBacking +\n            tokensForTeam +\n            tokensForFee;\n        bool success;\n\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\n            return;\n        }\n\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\n            totalTokensToSwap /\n            2;\n\n        uint256 amountToSwapForETH = contractBalance - liquidityTokens;\n\n        (uint256 ethBalance, uint256 ethForBacking) = swapTokens(\n            amountToSwapForETH,\n            totalTokensToSwap\n        );\n\n        uint256 ethForTeam = (ethBalance * tokensForTeam) /\n            (totalTokensToSwap - tokensForLiquidity / 2);\n\n        uint256 ethForFee = (ethBalance * tokensForFee) /\n            (totalTokensToSwap - tokensForLiquidity / 2);\n\n        uint256 ethForLiquidity = ethBalance -\n            ethForTeam -\n            ethForFee -\n            ethForBacking;\n\n        tokensForLiquidity = 0;\n        tokensForBacking = 0;\n        tokensForTeam = 0;\n        tokensForFee = 0;\n\n        (success, ) = address(owner()).call{value: ethForTeam}(\"\");\n\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\n            addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(\n                amountToSwapForETH,\n                ethForLiquidity,\n                tokensForLiquidity\n            );\n        }\n\n        address feeAddress = IQWAFactory(QWAFactory).feeAddress();\n        (success, ) = address(feeAddress).call{value: address(this).balance}(\n            \"\"\n        );\n        IQWAFee(feeAddress).convertFees();\n    }\n\n    /// VIEW FUNCTION ///\n\n    /// @notice Returns decimals for QWA (9)\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /// @notice Returns if address is excluded from fees\n    function isExcludedFromFees(address account) external view returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    /// @notice Returns at what percent of supply to swap tokens at\n    function swapTokensAtAmount() public view returns (uint256 amount_) {\n        amount_ = (totalSupply() * swapPercent) / 10000;\n    }\n\n    /// TREASURY FUNCTION ///\n\n    /// @notice         Mint QWA (Only by treasury)\n    /// @param account  Address to mint QWA to\n    /// @param amount   Amount to mint\n    function mint(address account, uint256 amount) external {\n        require(msg.sender == treasury);\n        _mint(account, amount);\n    }\n\n    /// USER FUNCTIONS ///\n\n    /// @notice         Burn QWA\n    /// @param account  Address to burn QWA from\n    /// @param amount   Amount to QWA to burn\n    function burnFrom(address account, uint256 amount) external {\n        _burnFrom(account, amount);\n    }\n\n    /// @notice         Burn QWA\n    /// @param amount   Amount to QWA to burn\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n\n    /// OWNER FUNCTIONS ///\n\n    /// @notice Set address of treasury\n    function setTreasury(address _treasury) external onlyOwner {\n        require(treasury == address(0));\n        treasury = _treasury;\n        excludeFromFees(_treasury, true);\n    }\n\n    /// @notice Update percent of supply to swap tokens at\n    function updateSwapTokensAtPercent(uint256 newPercent) external onlyOwner {\n        require(newPercent >= 1);\n        require(newPercent <= 50);\n        swapPercent = newPercent;\n    }\n\n    /// @notice Update fees\n    function updateFees(\n        uint256 _backingFee,\n        uint256 _liquidityFee,\n        uint256 _teamFee\n    ) external onlyOwner {\n        backingFee = _backingFee;\n        liquidityFee = _liquidityFee;\n        teamFee = _teamFee;\n        totalFees = backingFee + liquidityFee + teamFee + QWA_FEE;\n        require(teamFee <= 100, \"Team fee <= 1%\");\n        require(totalFees <= 500);\n    }\n\n    /// @notice Set if an address is excluded from fees\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}