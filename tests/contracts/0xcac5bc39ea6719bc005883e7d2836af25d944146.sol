{{
  "language": "Solidity",
  "sources": {
    "contracts/implementations/MultiRelease.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity 0.8.17;\npragma abicoder v2;\n\n/*----------------------------------------------------------\\\n|                             _                 _           |\n|        /\\                  | |     /\\        | |          |\n|       /  \\__   ____ _ _ __ | |_   /  \\   _ __| |_ ___     |\n|      / /\\ \\ \\ / / _` | '_ \\| __| / /\\ \\ | '__| __/ _ \\    |\n|     / ____ \\ V / (_| | | | | |_ / ____ \\| |  | ||  __/    |\n|    /_/    \\_\\_/ \\__,_|_| |_|\\__/_/    \\_\\_|   \\__\\___|    |\n|                                                           |\n|    https://avantarte.com/careers                          |\n|    https://avantarte.com/support/contact                  |\n|                                                           |\n\\----------------------------------------------------------*/\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {TimerLib} from \"../libraries/Timer/TimerLib.sol\";\nimport {IERC721CreatorMintPermissions} from \"@manifoldxyz/creator-core-solidity/contracts/permissions/ERC721/IERC721CreatorMintPermissions.sol\";\nimport {IERC721CreatorCore} from \"@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {ISpecifiedMinter} from \"./Erc721/ISpecifiedMinter.sol\";\n\n/// @notice Represents the settings for an auction\nstruct NftAuctionSettings {\n    // the time at which the auction would close (will be updating)\n    uint256 initialAuctionSeconds;\n    // the time at which the auction would close (will be updating)\n    uint256 floor;\n    // The minimum amount of time left in an auction after a new bid is created\n    uint256 timeBufferSeconds;\n    // the token id for this auction\n    uint256 tokenId;\n    // The minimum percentage difference between the last bid amount and the current bid. (1-100)\n    uint256 minBidIncrementPercentage;\n}\n\n/// @notice Represents an auction project\nstruct NftAuction {\n    NftAuctionSettings settings;\n    // the token id for this auction\n    uint256 startTime;\n    // the time at which the auction would close (will be updating)\n    uint256 closeTime;\n    // the highest bid, used specifically for auctions\n    uint256 highBid;\n    // the highest bidder, used specifically for auctions\n    address highBidder;\n}\n\n/// @notice Represents a ranged project\nstruct NftRangedProjectState {\n    // used for ranged release to specify the start of the range\n    uint256 rangeStart;\n    // used for ranged release to specify the end of the range\n    uint256 rangeEnd;\n    // used specifically for ranged release\n    uint256 pointer;\n}\n\n/// @notice Represents an input to create/update a project\nstruct NftProjectInput {\n    // the id of the project (should use product id from storyblok)\n    uint256 id;\n    // the wallet of the project\n    address wallet;\n    // the nft contract of the project\n    address nftContract;\n    // the time at which the contract would be closed\n    uint256 closeTime;\n    // allows us to pause the project if needed\n    bool paused;\n    // the custodial for the tokens in this project, if applicable\n    address custodial;\n    // we can limit items to be claimed from a release by specifying a limit.\n    uint256 countLimit;\n}\n\n/// @notice Represents an NFT project\nstruct NftProject {\n    // the curator who created the project\n    address curator;\n    // the time the project was created\n    uint256 timestamp;\n    // the type of the project\n    uint256 projectType;\n    // the id of the project (should use product id from storyblok)\n    uint256 id;\n    // the wallet of the project\n    address wallet;\n    // the nft contract of the project\n    address nftContract;\n    // the time at which the contract would be closed\n    uint256 closeTime;\n    // allows us to pause the project if needed\n    bool paused;\n    // the custodial for the tokens in this project, if applicable\n    address custodial;\n    // counts the items claimed from this release.\n    uint256 count;\n    // we can limit items to be claimed from a release by specifying a limit.\n    uint256 countLimit;\n}\n\n/// @notice Represents a voucher with definitions that allows the holder to claim an NFT\nstruct NFTVoucher {\n    /// @notice the id of the project, allows us to scope projects.\n    uint256 projectId;\n    /// @notice (optional) used to lock voucher usage to specific wallet address.\n    address walletAddress;\n    /// @notice the identifier of the voucher, used to prevent double usage.\n    uint256 voucherId;\n    /// @notice (optional) The minimum price (in wei) that the NFT creator is willing to accept for the initial sale of this NFT.\n    uint256 price;\n    /// @notice (optional) allows us to restrict voucher usage.\n    uint256 validUntil;\n    /// @notice (optional) allows us to restrict voucher usage.\n    uint256 tokenId;\n    /// @notice the EIP-712 signature of all other fields in the NFTVoucher struct. For a voucher to be valid, it must be signed by an account with the SIGNER_ROLE.\n    bytes signature;\n}\n\n/// @notice Represents the state of a project\nstruct ProjectStateOutput {\n    uint256 time;\n    NftProject project;\n    NftAuction auction;\n    NftRangedProjectState ranged;\n}\n\n/// @title a multi release contract supporting multiple release formats\n/// @author Liron Navon\n/// @notice this contract has a complicated access system, please contact owner for support\n/// @dev This contract heavily relies on vouchers with valid signatures.\ncontract MultiRelease is\n    Ownable,\n    ReentrancyGuard,\n    EIP712,\n    AccessControl,\n    IERC721CreatorMintPermissions\n{\n    /// @dev roles for access control\n    bytes32 private constant SIGNER_ROLE = keccak256(\"SIGNER_ROLE\");\n    bytes32 private constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 private constant WITHDRAWER_ROLE = keccak256(\"WITHDRAWER_ROLE\");\n\n    /// @dev release types for project types\n    uint256 private constant AUCTION_PROJECT = 1;\n    uint256 private constant SPECIFIED_PROJECT = 2;\n    uint256 private constant RANGED_PROJECT = 3;\n    uint256 private constant LAZY_MINT_PROJECT = 4;\n    uint256 private constant SPECIFIED_LAZY_MINT_PROJECT = 5;\n\n    /// @dev for domain separation (EIP712)\n    string private constant SIGNING_DOMAIN = \"AvantArte NFT Voucher\";\n    string private constant SIGNATURE_VERSION = \"1\";\n\n    /// @notice vouchers which are already used\n    mapping(uint256 => address) public usedVouchers;\n    /// @notice mapping of projectId => project\n    mapping(uint256 => NftProject) private projects;\n    /// @notice mapping of projectId => auction info - used only for auctions\n    mapping(uint256 => NftAuction) private auctions;\n    /// @notice mapping of projectId => auction project - used only for auctions\n    mapping(uint256 => NftRangedProjectState) private rangedProjects;\n    /// @notice mapping of address => address - used to verify minting using manifold\n    mapping(address => address) private pendingMints;\n\n    /// @notice an event that represents when funds have been withdrawn from the contract\n    event OnWithdraw(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 value\n    );\n\n    /// @notice an event that represents when a token is claimed\n    event OnTokenClaim(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 tokenId,\n        uint256 value,\n        bool minted\n    );\n\n    /// @notice an event that represents when a bid happens\n    event OnAuctionBid(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 tokenId,\n        uint256 value\n    );\n\n    /// @notice an event that represents when an auction start\n    event OnAuctionStart(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 tokenId\n    );\n\n    /// @notice an event to call when the auction is closed manually\n    event OnAuctionClose(uint256 indexed projectId, address indexed account);\n\n    /// @notice an event to call when a user dropped from the auction\n    event OnAuctionOutBid(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 tokenId,\n        uint256 value\n    );\n\n    /// @notice an event that happens when a project is created\n    event OnProjectCreated(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 indexed projectType\n    );\n\n    /// @notice an event that happens when a voucher is used\n    event OnVoucherUsed(\n        uint256 indexed projectId,\n        address indexed account,\n        uint256 voucherId\n    );\n\n    // solhint-disable-next-line no-empty-blocks\n    constructor() ReentrancyGuard() EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {}\n\n    /// @notice creates a project in which we give a range of tokens\n    /// @param project the input to create this project\n    /// @param rangeStart the first token in the range\n    /// @param rangeEnd the last token in the range\n    /// @param pointer where we start counting from, in a new project it should be same as rangeStart\n    function setRangedProject(\n        NftProjectInput calldata project,\n        uint256 rangeStart,\n        uint256 rangeEnd,\n        uint256 pointer\n    ) external onlyRole(ADMIN_ROLE) {\n        _setProject(project, RANGED_PROJECT);\n        rangedProjects[project.id].rangeStart = rangeStart;\n        rangedProjects[project.id].rangeEnd = rangeEnd;\n        rangedProjects[project.id].pointer = pointer;\n    }\n\n    /// @notice creates a project in which we expect to be given a contract of type manifold creator\n    /// @param project the input to create this project\n    function setLazyMintProject(NftProjectInput calldata project)\n        external\n        onlyRole(ADMIN_ROLE)\n    {\n        _setProject(project, LAZY_MINT_PROJECT);\n    }\n\n    /// @notice creates a project in which we expect to be given a contract that implements the ISpecifiedMinter interface\n    /// @param project the input to create this project\n    function setSpecifiedLazyMintProject(NftProjectInput calldata project)\n        external\n        onlyRole(ADMIN_ROLE)\n    {\n        _setProject(project, SPECIFIED_LAZY_MINT_PROJECT);\n    }\n\n    /// @notice creates a project in which we expect to be given a tokenId from the voucher\n    /// @param project the input to create this project\n    function setSpecifiedProject(NftProjectInput calldata project)\n        external\n        onlyRole(ADMIN_ROLE)\n    {\n        _setProject(project, SPECIFIED_PROJECT);\n    }\n\n    /// @notice creates a project which is an auction\n    /// @param project the input to create this project\n    /// @param auctionSettings extra settings, releated to the auction\n    function setAuctionProject(\n        NftProjectInput calldata project,\n        NftAuctionSettings memory auctionSettings\n    ) external onlyRole(ADMIN_ROLE) {\n        _setProject(project, AUCTION_PROJECT);\n        // settings specific to auction project\n        auctions[project.id].settings = auctionSettings;\n    }\n\n    /// @notice allows an admin to withdraw funds from the contract, be careful as this can break functionality\n    /// @dev extra care was taken to make sure the contract has only the funds reqired to function\n    /// @param to the address to get the funds\n    /// @param value the amount of funds to withdraw\n    /// @param projectId the project id this withdrawal is based off\n    function withdraw(\n        address to,\n        uint256 value,\n        uint256 projectId\n    ) external onlyRole(WITHDRAWER_ROLE) {\n        _withdraw(to, value, projectId);\n    }\n\n    /// @dev makes sure the project exists\n    /// @param projectId the id of the project\n    modifier onlyExistingProject(uint256 projectId) {\n        require(projects[projectId].timestamp != 0, \"Nonexisting project\");\n        _;\n    }\n\n    /// @dev makes sure the project is of the right type\n    /// @param projectId the id of the project\n    /// @param projectType type id of the project\n    modifier onlyProjectOfType(uint256 projectId, uint256 projectType) {\n        require(projects[projectId].timestamp != 0, \"Nonexisting project\");\n        require(\n            projects[projectId].projectType == projectType,\n            \"Wrong project type\"\n        );\n        _;\n    }\n\n    /// @dev makes sure the project is active\n    /// @param projectId the id of the project\n    modifier onlyActiveProjects(uint256 projectId) {\n        // check if the project is paused\n        require(!projects[projectId].paused, \"Project is paused\");\n        // check if the project has a closeTime, and if so check if it passed\n        if (projects[projectId].closeTime > 0) {\n            require(\n                projects[projectId].closeTime >= TimerLib._now(),\n                \"Project is over\"\n            );\n        }\n        // check if the project has a countLimit, and if it's reached\n        if (projects[projectId].countLimit > 0) {\n            require(\n                projects[projectId].countLimit > projects[projectId].count,\n                \"Project at count limit\"\n            );\n        }\n        _;\n    }\n\n    /// @dev makes sure voucher was never used\n    /// @param voucherId the id of the voucher\n    modifier onlyUnusedVouchers(uint256 voucherId) {\n        require(usedVouchers[voucherId] == address(0), \"Used voucher\");\n        _;\n    }\n\n    /// @dev makes sure the voucher is verified\n    /// @param voucher the voucher to validates\n    modifier onlyVerifiedVouchers(NFTVoucher calldata voucher) {\n        // check authorized signer\n        require(\n            hasRole(SIGNER_ROLE, _recoverVoucherSigner(voucher)),\n            \"Unauthorized signer\"\n        );\n\n        // check payment\n        if (voucher.price > 0) {\n            require(msg.value >= voucher.price, \"Insufficient funds\");\n        }\n\n        if (voucher.validUntil > 0) {\n            require(voucher.validUntil >= TimerLib._now(), \"Voucher expired\");\n        }\n\n        // check wallet restriction\n        if (voucher.walletAddress != address(0)) {\n            require(voucher.walletAddress == msg.sender, \"Unauthorized wallet\");\n        }\n        _;\n    }\n\n    /// @notice sets the project as paused\n    /// @param projectId the id of the project\n    /// @param paused is the project paused\n    function setPaused(uint256 projectId, bool paused)\n        external\n        onlyExistingProject(projectId)\n        onlyRole(ADMIN_ROLE)\n    {\n        projects[projectId].paused = paused;\n    }\n\n    /// @dev starts the auction\n    /// @param projectId the id of the project\n    function _startAuction(uint256 projectId) private {\n        // set start time\n        auctions[projectId].startTime = TimerLib._now();\n        // set end time\n        auctions[projectId].closeTime =\n            TimerLib._now() +\n            auctions[projectId].settings.initialAuctionSeconds;\n\n        emit OnAuctionStart(\n            projectId,\n            msg.sender,\n            auctions[projectId].settings.tokenId\n        );\n    }\n\n    /// @notice starts the auction manualy\n    /// @param projectId the id of the project\n    function startAuction(uint256 projectId)\n        external\n        onlyProjectOfType(projectId, AUCTION_PROJECT)\n        onlyRole(ADMIN_ROLE)\n    {\n        _startAuction(projectId);\n    }\n\n    /// @notice close the auction manually\n    /// @param projectId the id of the project\n    function closeAuction(uint256 projectId)\n        external\n        onlyProjectOfType(projectId, AUCTION_PROJECT)\n        onlyRole(ADMIN_ROLE)\n    {\n        auctions[projectId].closeTime = TimerLib._now();\n        emit OnAuctionClose({projectId: projectId, account: msg.sender});\n    }\n\n    /// @notice start the project with a given time\n    /// @param projectId the id of the project\n    /// @param timeSeconds the time, in seconds\n    function startWithTime(uint256 projectId, uint256 timeSeconds)\n        external\n        onlyExistingProject(projectId)\n        onlyRole(ADMIN_ROLE)\n    {\n        projects[projectId].paused = false;\n        projects[projectId].closeTime = TimerLib._now() + timeSeconds;\n    }\n\n    function getProjectState(uint256 projectId)\n        external\n        view\n        returns (ProjectStateOutput memory state)\n    {\n        return\n            ProjectStateOutput({\n                time: TimerLib._now(),\n                project: projects[projectId],\n                auction: auctions[projectId],\n                ranged: rangedProjects[projectId]\n            });\n    }\n\n    /// @dev in order to make a bid in an auction, a user must pass a certain threshhold, this function calculates it\n    /// @param projectId the id of the auction project\n    function _getAuctionThreshHold(uint256 projectId)\n        private\n        view\n        returns (uint256)\n    {\n        return\n            auctions[projectId].highBid +\n            (auctions[projectId].highBid *\n                auctions[projectId].settings.minBidIncrementPercentage) /\n            100;\n    }\n\n    /// @notice validates and marks voucher as used\n    /// @param voucher the voucher to use\n    function _useVoucher(NFTVoucher calldata voucher)\n        private\n        onlyUnusedVouchers(voucher.voucherId)\n        onlyVerifiedVouchers(voucher)\n    {\n        usedVouchers[voucher.voucherId] = msg.sender;\n        projects[voucher.projectId].count += 1;\n        emit OnVoucherUsed(voucher.projectId, msg.sender, voucher.voucherId);\n    }\n\n    /// @dev take the funds if required, validate required payments before calling this\n    /// @param to the wallet to get the funds\n    /// @param amount the amount of funds to withdraw\n    /// @param projectId the project id related to the funds\n    function _withdraw(\n        address to,\n        uint256 amount,\n        uint256 projectId\n    ) private {\n        emit OnWithdraw(projectId, to, amount);\n        /// solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = payable(to).call{value: amount}(\"\");\n        require(success, \"Failed to withdraw\");\n    }\n\n    /// @notice claim a token from a ranged project\n    /// @param voucher the voucher to use\n    function claimRanged(NFTVoucher calldata voucher)\n        external\n        payable\n        nonReentrant\n        onlyProjectOfType(voucher.projectId, RANGED_PROJECT)\n        onlyActiveProjects(voucher.projectId)\n    {\n        require(\n            rangedProjects[voucher.projectId].pointer <=\n                rangedProjects[voucher.projectId].rangeEnd,\n            \"Project out of tokens\"\n        );\n        _useVoucher(voucher);\n\n        // get token id and increase pointer\n        uint256 tokenId = rangedProjects[voucher.projectId].pointer;\n        rangedProjects[voucher.projectId].pointer += 1;\n\n        // transfer the NFT\n        _transferToken(voucher.projectId, tokenId, msg.sender);\n        if (msg.value > 0) {\n            _withdraw(\n                projects[voucher.projectId].wallet,\n                msg.value,\n                voucher.projectId\n            );\n        }\n    }\n\n    function claimSpecifiedLazyMint(NFTVoucher calldata voucher)\n        external\n        payable\n        nonReentrant\n        onlyProjectOfType(voucher.projectId, SPECIFIED_LAZY_MINT_PROJECT)\n        onlyActiveProjects(voucher.projectId)\n    {\n        _useVoucher(voucher);\n\n        ISpecifiedMinter minter = ISpecifiedMinter(\n            projects[voucher.projectId].nftContract\n        );\n        uint256 createdToken = minter.mint(msg.sender, voucher.tokenId);\n\n        emit OnTokenClaim(\n            voucher.projectId,\n            msg.sender,\n            createdToken,\n            msg.value,\n            true\n        );\n\n        if (msg.value > 0) {\n            _withdraw(\n                projects[voucher.projectId].wallet,\n                msg.value,\n                voucher.projectId\n            );\n        }\n    }\n\n    /// @notice claim a token from a lazy mint project\n    /// @param voucher the voucher to use\n    function claimLazyMint(NFTVoucher calldata voucher)\n        external\n        payable\n        nonReentrant\n        onlyProjectOfType(voucher.projectId, LAZY_MINT_PROJECT)\n        onlyActiveProjects(voucher.projectId)\n    {\n        _useVoucher(voucher);\n\n        pendingMints[msg.sender] = projects[voucher.projectId].nftContract;\n\n        IERC721CreatorCore erc721 = IERC721CreatorCore(\n            projects[voucher.projectId].nftContract\n        );\n        uint256 createdToken = erc721.mintExtension(msg.sender);\n\n        emit OnTokenClaim(\n            voucher.projectId,\n            msg.sender,\n            createdToken,\n            msg.value,\n            true\n        );\n\n        if (msg.value > 0) {\n            _withdraw(\n                projects[voucher.projectId].wallet,\n                msg.value,\n                voucher.projectId\n            );\n        }\n    }\n\n    /// @notice claim a token from a specified project\n    /// @param voucher the voucher to use\n    function claimSpecified(NFTVoucher calldata voucher)\n        external\n        payable\n        nonReentrant\n        onlyProjectOfType(voucher.projectId, SPECIFIED_PROJECT)\n        onlyActiveProjects(voucher.projectId)\n    {\n        _useVoucher(voucher);\n        _transferToken(voucher.projectId, voucher.tokenId, msg.sender);\n\n        if (msg.value > 0) {\n            _withdraw(\n                projects[voucher.projectId].wallet,\n                msg.value,\n                voucher.projectId\n            );\n        }\n    }\n\n    /// @notice claim a token from an auction project\n    /// @param projectId the id of the auction\n    function claimAuction(uint256 projectId)\n        external\n        payable\n        nonReentrant\n        onlyProjectOfType(projectId, AUCTION_PROJECT)\n        onlyActiveProjects(projectId)\n    {\n        require(\n            TimerLib._now() >= auctions[projectId].closeTime,\n            \"Auction: still running\"\n        );\n        require(\n            msg.sender == auctions[projectId].highBidder,\n            \"Auction: not winner\"\n        );\n        projects[projectId].count += 1;\n        _transferToken(\n            projectId,\n            auctions[projectId].settings.tokenId,\n            msg.sender\n        );\n        _withdraw(\n            projects[projectId].wallet,\n            auctions[projectId].highBid,\n            projectId\n        );\n    }\n\n    /// @notice make a bid for an auction\n    /// @param projectId the id of the auction\n    function bidAuction(uint256 projectId)\n        external\n        payable\n        onlyProjectOfType(projectId, AUCTION_PROJECT)\n        onlyActiveProjects(projectId)\n    {\n        // setup the auction if it's not started yet\n        if (auctions[projectId].startTime == 0) {\n            _startAuction(projectId);\n        } else {\n            // auction needs to be running\n            require(\n                TimerLib._now() < auctions[projectId].closeTime,\n                \"Auction: is over\"\n            );\n        }\n\n        // check the bid value\n        if (auctions[projectId].highBid == 0) {\n            // needs to be above floor price\n            require(\n                msg.value >= auctions[projectId].settings.floor,\n                \"Auction: lower than floor\"\n            );\n        } else {\n            require(\n                msg.value >= _getAuctionThreshHold(projectId),\n                \"Auction: lower than threshold\"\n            );\n            // emit the event for outbid\n            emit OnAuctionOutBid(\n                projectId,\n                auctions[projectId].highBidder,\n                auctions[projectId].settings.tokenId,\n                auctions[projectId].highBid\n            );\n        }\n\n        // emit the event for the bid\n        emit OnAuctionBid(\n            projectId,\n            msg.sender,\n            auctions[projectId].settings.tokenId,\n            msg.value\n        );\n\n        // increase the time if needed\n        uint256 timeLeft = auctions[projectId].closeTime - TimerLib._now();\n        if (timeLeft < auctions[projectId].settings.timeBufferSeconds) {\n            auctions[projectId].closeTime +=\n                auctions[projectId].settings.timeBufferSeconds -\n                timeLeft;\n        }\n\n        // info to refund the last high bidder\n        uint256 refundBid = auctions[projectId].highBid;\n        address refundBidder = auctions[projectId].highBidder;\n\n        // set the new high bidder\n        auctions[projectId].highBid = msg.value;\n        auctions[projectId].highBidder = msg.sender;\n\n        // refund the last bidder\n        if (refundBid > 0 && refundBidder != address(0)) {\n            _withdraw(refundBidder, refundBid, projectId);\n        }\n    }\n\n    /// @dev setup a project\n    /// @param project the input for the project\n    /// @param projectType the type of the project to create/update\n    function _setProject(NftProjectInput calldata project, uint256 projectType)\n        private\n    {\n        // check if exists, if so check if the same project type\n        if (projects[project.id].timestamp != 0) {\n            require(\n                projects[project.id].projectType == projectType,\n                \"Wrong project type\"\n            );\n        } else {\n            // setup for new project, these cannot be edited after creation\n            projects[project.id].id = project.id;\n            projects[project.id].timestamp = TimerLib._now();\n            projects[project.id].curator = msg.sender;\n            projects[project.id].count = 0;\n            projects[project.id].projectType = projectType;\n            emit OnProjectCreated(project.id, msg.sender, projectType);\n        }\n\n        // general project settings\n        projects[project.id].custodial = project.custodial;\n        projects[project.id].wallet = project.wallet;\n        projects[project.id].nftContract = project.nftContract;\n        projects[project.id].paused = project.paused;\n        projects[project.id].closeTime = project.closeTime;\n        projects[project.id].countLimit = project.countLimit;\n    }\n\n    /// @notice Returns a hash of the given NFTVoucher, prepared using EIP712 typed data hashing rules.\n    /// @param voucher An NFTVoucher to hash.\n    function _hashVoucher(NFTVoucher calldata voucher)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            _hashTypedDataV4(\n                keccak256(\n                    abi.encode(\n                        keccak256(\n                            \"NFTVoucher(uint256 projectId,address walletAddress,uint256 voucherId,uint256 price,uint256 validUntil,uint256 tokenId)\"\n                        ),\n                        voucher.projectId,\n                        voucher.walletAddress,\n                        voucher.voucherId,\n                        voucher.price,\n                        voucher.validUntil,\n                        voucher.tokenId\n                    )\n                )\n            );\n    }\n\n    /// @notice Verifies the signature for a given NFTVoucher, returning the address of the signer.\n    /// @dev Will revert if the signature is invalid. Does not verify that the signer is authorized to mint NFTs.\n    /// @param voucher An NFTVoucher describing an unminted NFT.\n    function _recoverVoucherSigner(NFTVoucher calldata voucher)\n        internal\n        view\n        returns (address)\n    {\n        // take data, hash it\n        bytes32 digest = _hashVoucher(voucher);\n        // take hash + signature, and get public key\n        return ECDSA.recover(digest, voucher.signature);\n    }\n\n    /// @notice Transfers a token from a custodial wallet to a user wallet\n    /// @param projectId the id of the related project\n    /// @param tokenId the id of the token to transfer\n    /// @param to the wallet who would recieve the token\n    function _transferToken(\n        uint256 projectId,\n        uint256 tokenId,\n        address to\n    ) private {\n        emit OnTokenClaim(projectId, msg.sender, tokenId, msg.value, false);\n        IERC721 nft = IERC721(projects[projectId].nftContract);\n        nft.transferFrom(projects[projectId].custodial, to, tokenId);\n    }\n\n    /// @notice approve minting for manifold contract (ERC721)\n    /// @dev it is verified by setting pendingMints for a wallet address and approving only the specified wallet\n    /// @param to the wallet which is expected to recieve the token\n    function approveMint(\n        address, /* extension */\n        address to,\n        uint256 /* tokenId */\n    ) external virtual override {\n        require(msg.sender == pendingMints[to], \"Not manifold creator\");\n        delete pendingMints[to];\n    }\n\n    /// @notice derived from ERC165, checks support for interfaces\n    /// @param interfaceId the interface id to check\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControl, IERC165)\n        returns (bool)\n    {\n        return\n            // supports open zepplin's access control\n            AccessControl.supportsInterface(interfaceId) ||\n            // supports maniford mint permissions (erc721)\n            interfaceId == type(IERC721CreatorMintPermissions).interfaceId;\n    }\n\n    /// @notice overriding check role (from AccessControl) to treat the owner as a super user\n    /// @param role the id of the role\n    function _checkRole(bytes32 role) internal view virtual override {\n        if (msg.sender != owner()) {\n            _checkRole(role, msg.sender);\n        }\n    }\n}\n"
    },
    "contracts/implementations/Erc721/ISpecifiedMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/*----------------------------------------------------------\\\n|                             _                 _           |\n|        /\\                  | |     /\\        | |          |\n|       /  \\__   ____ _ _ __ | |_   /  \\   _ __| |_ ___     |\n|      / /\\ \\ \\ / / _` | '_ \\| __| / /\\ \\ | '__| __/ _ \\    |\n|     / ____ \\ V / (_| | | | | |_ / ____ \\| |  | ||  __/    |\n|    /_/    \\_\\_/ \\__,_|_| |_|\\__/_/    \\_\\_|   \\__\\___|    |\n|                                                           |\n|    https://avantarte.com/careers                          |\n|    https://avantarte.com/support/contact                  |\n|                                                           |\n\\----------------------------------------------------------*/\n\n/**\n * @title An interface for a contract that allows minting with a specified token id\n * @author Liron Navon\n * @dev This interface is used for connecting to the lazy minting contracts.\n */\ninterface ISpecifiedMinter {\n    function mint(address to, uint256 tokenId) external returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@manifoldxyz/creator-core-solidity/contracts/core/IERC721CreatorCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"./ICreatorCore.sol\";\n\n/**\n * @dev Core ERC721 creator interface\n */\ninterface IERC721CreatorCore is ICreatorCore {\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBase(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token with no extension. Can only be called by an admin.\n     * Returns tokenId minted\n     */\n    function mintBaseBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to) external returns (uint256);\n\n    /**\n     * @dev mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtension(address to, string calldata uri) external returns (uint256);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenIds minted\n     */\n    function mintExtensionBatch(address to, uint16 count) external returns (uint256[] memory);\n\n    /**\n     * @dev batch mint a token. Can only be called by a registered extension.\n     * Returns tokenId minted\n     */\n    function mintExtensionBatch(address to, string[] calldata uris) external returns (uint256[] memory);\n\n    /**\n     * @dev burn a token. Can only be called by token owner or approved address.\n     * On burn, calls back to the registered extension's onBurn method\n     */\n    function burn(uint256 tokenId) external;\n\n}"
    },
    "@manifoldxyz/creator-core-solidity/contracts/permissions/ERC721/IERC721CreatorMintPermissions.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721Creator compliant extension contracts.\n */\ninterface IERC721CreatorMintPermissions is IERC165 {\n\n    /**\n     * @dev get approval to mint\n     */\n    function approveMint(address extension, address to, uint256 tokenId) external;\n}"
    },
    "contracts/libraries/Timer/TimerLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nstruct TimerData {\n    /// @notice the time the contract started (seconds)\n    uint256 startTime;\n    /// @notice the time the contract is running from startTime (seconds)\n    uint256 runningTime;\n}\n\n/// @title provides functionality to use time\nlibrary TimerLib {\n    using TimerLib for Timer;\n    struct Timer {\n        /// @notice the time the contract started\n        uint256 startTime;\n        /// @notice the time the contract is running from startTime\n        uint256 runningTime;\n        /// @notice is the timer paused\n        bool paused;\n    }\n\n    /// @notice is the timer running - marked as running and has time remaining\n    function _deadline(Timer storage self) internal view returns (uint256) {\n        return self.startTime + self.runningTime;\n    }\n\n    function _now() internal view returns (uint256) {\n        // solhint-disable-next-line not-rely-on-time\n        return block.timestamp;\n    }\n\n    /// @notice is the timer running - marked as running and has time remaining\n    function _isRunning(Timer storage self) internal view returns (bool) {\n        return !self.paused && (self._deadline() > _now());\n    }\n\n    /// @notice starts the timer, call again to restart\n    function _start(Timer storage self, uint256 runningTime) internal {\n        self.paused = false;\n        self.startTime = _now();\n        self.runningTime = runningTime;\n    }\n\n    /// @notice updates the running time\n    function _updateRunningTime(Timer storage self, uint256 runningTime)\n        internal\n    {\n        self.runningTime = runningTime;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@manifoldxyz/creator-core-solidity/contracts/core/ICreatorCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Core creator interface\n */\ninterface ICreatorCore is IERC165 {\n\n    event ExtensionRegistered(address indexed extension, address indexed sender);\n    event ExtensionUnregistered(address indexed extension, address indexed sender);\n    event ExtensionBlacklisted(address indexed extension, address indexed sender);\n    event MintPermissionsUpdated(address indexed extension, address indexed permissions, address indexed sender);\n    event RoyaltiesUpdated(uint256 indexed tokenId, address payable[] receivers, uint256[] basisPoints);\n    event DefaultRoyaltiesUpdated(address payable[] receivers, uint256[] basisPoints);\n    event ExtensionRoyaltiesUpdated(address indexed extension, address payable[] receivers, uint256[] basisPoints);\n    event ExtensionApproveTransferUpdated(address indexed extension, bool enabled);\n\n    /**\n     * @dev gets address of all extensions\n     */\n    function getExtensions() external view returns (address[] memory);\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * extension address must point to a contract implementing ICreatorExtension.\n     * Returns True if newly added, False if already added.\n     */\n    function registerExtension(address extension, string calldata baseURI, bool baseURIIdentical) external;\n\n    /**\n     * @dev add an extension.  Can only be called by contract owner or admin.\n     * Returns True if removed, False if already removed.\n     */\n    function unregisterExtension(address extension) external;\n\n    /**\n     * @dev blacklist an extension.  Can only be called by contract owner or admin.\n     * This function will destroy all ability to reference the metadata of any tokens created\n     * by the specified extension. It will also unregister the extension if needed.\n     * Returns True if removed, False if already removed.\n     */\n    function blacklistExtension(address extension) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     */\n    function setBaseTokenURIExtension(string calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI of an extension.  Can only be called by extension.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURIExtension(string calldata uri, bool identical) external;\n\n    /**\n     * @dev set the common prefix of an extension.  Can only be called by extension.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefixExtension(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token extension.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of a token extension for multiple tokens.  Can only be called by extension that minted token.\n     */\n    function setTokenURIExtension(uint256[] memory tokenId, string[] calldata uri) external;\n\n    /**\n     * @dev set the baseTokenURI for tokens with no extension.  Can only be called by owner/admin.\n     * For tokens with no uri configured, tokenURI will return \"uri+tokenId\"\n     */\n    function setBaseTokenURI(string calldata uri) external;\n\n    /**\n     * @dev set the common prefix for tokens with no extension.  Can only be called by owner/admin.\n     * If configured, and a token has a uri set, tokenURI will return \"prefixURI+tokenURI\"\n     * Useful if you want to use ipfs/arweave\n     */\n    function setTokenURIPrefix(string calldata prefix) external;\n\n    /**\n     * @dev set the tokenURI of a token with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256 tokenId, string calldata uri) external;\n\n    /**\n     * @dev set the tokenURI of multiple tokens with no extension.  Can only be called by owner/admin.\n     */\n    function setTokenURI(uint256[] memory tokenIds, string[] calldata uris) external;\n\n    /**\n     * @dev set a permissions contract for an extension.  Used to control minting.\n     */\n    function setMintPermissions(address extension, address permissions) external;\n\n    /**\n     * @dev Configure so transfers of tokens created by the caller (must be extension) gets approval\n     * from the extension before transferring\n     */\n    function setApproveTransferExtension(bool enabled) external;\n\n    /**\n     * @dev get the extension of a given token\n     */\n    function tokenExtension(uint256 tokenId) external view returns (address);\n\n    /**\n     * @dev Set default royalties\n     */\n    function setRoyalties(address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of a token\n     */\n    function setRoyalties(uint256 tokenId, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Set royalties of an extension\n     */\n    function setRoyaltiesExtension(address extension, address payable[] calldata receivers, uint256[] calldata basisPoints) external;\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    \n    // Royalty support for various other standards\n    function getFeeRecipients(uint256 tokenId) external view returns (address payable[] memory);\n    function getFeeBps(uint256 tokenId) external view returns (uint[] memory);\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}