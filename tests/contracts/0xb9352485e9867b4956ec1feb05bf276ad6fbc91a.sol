{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/JimmyTheMonkeyBuffs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./lib/Operator.sol\";\n\n//      |||||\\          |||||\\               |||||\\           |||||\\\n//      ||||| |         ||||| |              ||||| |          ||||| |\n//       \\__|||||\\  |||||\\___\\|               \\__|||||\\   |||||\\___\\|\n//          ||||| | ||||| |                      ||||| |  ||||| |\n//           \\__|||||\\___\\|       Y u g a         \\__|||||\\___\\|\n//              ||||| |             L a b s          ||||| |\n//          |||||\\___\\|                          |||||\\___\\|\n//          ||||| |               J T M          ||||| |\n//           \\__|||||||||||\\        B u f f s     \\__|||||||||||\\\n//              ||||||||||| |                        ||||||||||| |\n//               \\_________\\|                         \\_________\\|\n\nerror BuffPurchasesNotEnabled();\n\ncontract JimmyTheMonkeyBuffs is Operator {\n    uint256 public buffCost;\n    uint256 public buffTimeIncrease = 660;\n    bool public buffPurchasesEnabled = false;\n    address public immutable apeCoinContract;\n\n    mapping(address => uint256) public playerAddressToBuffTimestamp;\n\n    event BuffPurchased(\n        address indexed playerAddress,\n        uint256 indexed buffTimestamp\n    );\n\n    constructor(\n        address _apeCoinContract,\n        uint256 _buffCost,\n        address _operator\n    ) Operator(_operator) {\n        apeCoinContract = _apeCoinContract;\n        buffCost = _buffCost;\n    }\n\n    /**\n     * @notice Purchase a buff boost - time starts when the transaction is confirmed\n     */\n    function purchaseBuff() external {\n        if (!buffPurchasesEnabled) revert BuffPurchasesNotEnabled();\n\n        uint256 currentBuffTimestamp = playerAddressToBuffTimestamp[msg.sender];\n        uint256 newTimestamp;\n\n        if (currentBuffTimestamp > block.timestamp) {\n            newTimestamp = currentBuffTimestamp + buffTimeIncrease;\n        } else {\n            newTimestamp = block.timestamp + buffTimeIncrease;\n        }\n\n        IERC20(apeCoinContract).transferFrom(\n            msg.sender,\n            address(this),\n            buffCost\n        );\n\n        emit BuffPurchased(msg.sender, newTimestamp);\n        playerAddressToBuffTimestamp[msg.sender] = newTimestamp;\n    }\n\n    /**\n     * @notice Get the ending boost timestamp for a player address\n     * @param playerAddress the address of the player\n     * @return uint256 unix timestamp\n     */\n    function getBuffTimestampForPlayer(\n        address playerAddress\n    ) external view returns (uint256) {\n        return playerAddressToBuffTimestamp[playerAddress];\n    }\n\n    /**\n     * @notice Get the seconds remaining in the boost for a player address\n     * @param playerAddress the address of the player\n     * @return uint256 seconds of boost remaining\n     */\n    function getRemainingBuffTimeInSeconds(\n        address playerAddress\n    ) external view returns (uint256) {\n        uint256 currentBuffTimestamp = playerAddressToBuffTimestamp[\n            playerAddress\n        ];\n        if (currentBuffTimestamp > block.timestamp) {\n            return currentBuffTimestamp - block.timestamp;\n        }\n        return 0;\n    }\n\n    // Operator functions\n\n    /**\n     * @notice Set the cost of buff boost\n     * @param _buffCost cost in wei\n     */\n    function setBuffCost(uint256 _buffCost) external onlyOperator {\n        buffCost = _buffCost;\n    }\n\n    /**\n     * @notice Change the buff time increase - this will never be used\n     * @param _buffTimeIncrease time increase in seconds\n     */\n    function setBuffTimeIncrease(\n        uint256 _buffTimeIncrease\n    ) external onlyOperator {\n        buffTimeIncrease = _buffTimeIncrease;\n    }\n\n    /**\n     * @notice Toggle the purchased state of buffs\n     */\n    function flipBuffPurchasesEnabled() external onlyOperator {\n        buffPurchasesEnabled = !buffPurchasesEnabled;\n    }\n\n    /**\n     * @notice Withdraw erc-20 tokens\n     * @param coinContract the erc-20 contract address\n     */\n    function withdraw(address coinContract) external onlyOperator {\n        uint256 balance = IERC20(coinContract).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(coinContract).transfer(operator, balance);\n        }\n    }\n}\n"
    },
    "contracts/lib/Operator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror OnlyOperatorError();\nerror OperatorZeroAddressCheck();\n\ncontract Operator is Ownable {\n    address public operator;\n\n    event OperatorChanged(address operator);\n\n    modifier onlyOperator() {\n        if (operator != _msgSender()) revert OnlyOperatorError();\n        _;\n    }\n\n    constructor(address _operator) {\n        if (_operator == address(0)) revert OperatorZeroAddressCheck();\n        operator = _operator;\n    }\n\n    /**\n     * @notice change operator\n     */\n    function setOperator(address _operator) external onlyOwner {\n        if (_operator == address(0)) revert OperatorZeroAddressCheck();\n\n        operator = _operator;\n        emit OperatorChanged(_operator);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}