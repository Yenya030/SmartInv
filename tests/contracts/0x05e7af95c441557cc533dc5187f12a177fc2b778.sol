{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/KrunRaffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract KrunRaffle is Ownable {\n  bool public paused;\n  address private krunAddress;\n  uint256 public raffleIndex;\n  uint256 public KrunTicketMax;\n  uint256 public EthTicketMax;\n\n  constructor() {\n    krunAddress = 0x14a47885db4AEE4b83d13e281b2013A18AA75ff4;\n    paused = false;\n    raffleIndex = 1;\n    KrunTicketMax = 1000000000000000000000;\n    EthTicketMax = 100;\n  }\n\n  // userAddress => raffleIndex => token amount //\n  mapping(address => mapping(uint256 => uint256)) userKrunBalance;\n  mapping(address => mapping(uint256 => uint256)) userEthBalance;\n\n  // Events //\n  event etherDepositComplete(address sender, uint256 value);\n  event KrunDepositComplete(address sender, uint256 amount);\n  event etherwithdrawComplete(address sender, uint256 amount);\n  event KrunWithdrawalComplete(address sender, uint256 amount);\n\n  // Views //\n  function getEthBalance() public view returns (uint) {\n    return address(this).balance;\n  }\n\n  function getKrunBalance() public view returns (uint) {\n    return IERC20(krunAddress).balanceOf(address(this));\n  }\n\n  function getUserKrunBalance(address user) public view returns (uint) {\n    return userKrunBalance[user][raffleIndex];\n  }\n\n  function getUserEthBalance(address user) public view returns (uint) {\n    return userEthBalance[user][raffleIndex];\n  }\n\n  // Functions //\n  function setPaused(bool _paused) external onlyOwner {\n    paused = _paused;\n  }\n\n  function setRaffleIndex(uint256 _raffleIndex) external onlyOwner {\n    raffleIndex = _raffleIndex;\n  }\n\n  function setKrunTicketMax(uint256 _TicketMax) external onlyOwner {\n    KrunTicketMax = _TicketMax;\n  }\n\n  function setEthTicketMax(uint256 _TicketMax) external onlyOwner {\n    EthTicketMax = _TicketMax;\n  }\n\n  function depositEther() public payable {\n    require(paused == false, \"Contract Paused\");\n    require(\n      msg.sender.balance > msg.value,\n      \"Your Eth balance is less than deposit amount\"\n    );\n    require(\n      userEthBalance[msg.sender][raffleIndex] + msg.value <= EthTicketMax,\n      \"You have already hit ticket limit\"\n    );\n    userEthBalance[msg.sender][raffleIndex] += msg.value;\n    emit etherDepositComplete(msg.sender, msg.value);\n  }\n\n  function depositKrun(uint256 amount) public {\n    require(paused == false, \"Contract Paused\");\n    require(\n      IERC20(krunAddress).balanceOf(msg.sender) >= amount,\n      \"Your token balance is less than deposit amount\"\n    );\n    require(\n      userKrunBalance[msg.sender][raffleIndex] + amount <= KrunTicketMax,\n      \"You have already hit ticket limit\"\n    );\n    require(\n      IERC20(krunAddress).transferFrom(msg.sender, address(this), amount)\n    );\n    userKrunBalance[msg.sender][raffleIndex] += amount;\n    emit KrunDepositComplete(msg.sender, amount);\n  }\n\n  function withdrawEther() external onlyOwner {\n    require(address(this).balance > 0, \"Contract value is zero\");\n    address payable to = payable(msg.sender);\n    uint256 amount = getEthBalance();\n    to.transfer(getEthBalance());\n    emit etherwithdrawComplete(msg.sender, amount);\n  }\n\n  function withdrawKrun() external onlyOwner {\n    require(\n      IERC20(krunAddress).balanceOf(address(this)) > 0,\n      \"Contract value is zero\"\n    );\n    uint256 amount = getKrunBalance();\n    require(\n      IERC20(krunAddress).transfer(msg.sender, amount),\n      \"Withdraw all has failed\"\n    );\n    emit KrunWithdrawalComplete(msg.sender, amount);\n  }\n\n  function tokenRescue(\n    IERC20 token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    token.transfer(recipient, amount);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}