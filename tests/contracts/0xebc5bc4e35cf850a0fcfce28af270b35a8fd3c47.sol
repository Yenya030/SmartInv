{{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20BABYUSHI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//                       ,ƒ   ,╗Γ                ╚╔,   \\,\n//                      ██L  ▓▐▌                  ▓▌╬Γ  ▀█\n//                     ██▌▒, ╚▓▀▓                ╬█ß▌ ,@╟██\n//                     ▐███/▒w▓╦█▓@g╖        ╓g╥▓█╦▓╔╫\\███▌\n//                      '█████▄ █████▓▄@w╤¢▄╬███▓█,╓█████'\n//                         █████████▀▀▄▓██▓▄▀▀█████████`\n//                           ╙████████▄▓▄▄▓▄████████▀\n//                             ▄████▓▓██▀▀██▓▓████▄\n//                            ███╣█████▌╬▓▐█████Ñ▀██\n//                               ╘▓▀██]▓▓▓▓╝████┘\n//                                 ╚╣████████▌╝\n//                                    ▀████▀`\n\n// ╫╬╬╬╬╬╬@╗    ,╬╬╬╖    ╫╬╬╬╬╬╬@╗ ╙╬╬╖   @╬╝  ╬╬     ╬╬  ,@╬╬╣╬╬@,  ╬╬     ╬╬U ╟╬╬\n// ║╢╣,,,╓╢╬   ,╣╢ ╣╢┐   ║╢╣,,,╓╢╬   ╨╢@╓╬╣╜   ╢╢     ╢╢  ╟╢╢╖╖,```  ╢╢U,,,,╢╢U ╟╢╢\n// ║╢╣╜╜╜╨║@  ,╣╢Ç,]╢╢,  ║╢╣╜╜╜╨╢@    `╢╢╣     ╢╢    ]╢╢    ╙╙╩╩╣╢@  ╢╢╨╨╨╨╨╢╢U ╟╢╢\n// ║╢╣╦╦╦@╢╢  ╣╢╜╜╜╜╨╢╢  ║╢╣╦╦╦@╢╢     ╢╢[     ╚╢╣╦╦@╬╢╝  ╚╢╬╦╗╦╬╢╝  ╢╢     ╢╢U ╟╢╢\n\n//    ╢ ╓╢╜╙╢╖ ║╢ ╢╢, ╢L    ╢╢╖  @╜╙╚N   ╢╜╙╙╢ ╢[  ║[ ╢    ║[   ║╢╙╙╢╖ ╢   ╢ ]╢╖  ╢\n// ╓  ║ ╢[  ,║ ║╢ ║ ╙╢╢L   ╢╣╓║╖ ,╙╙╢@   ║╜╙╙╢ ╢[  ║[ ║    ║[   ║║╝╢╢  ║   ║ ]║╙╢╢║\n// `╙╙╜  `╙╙\"  ╙' ╙   ╙   \"╜   ╙ `╙╙╙    ╙╙╙╙`  ╙╙╙`  ╙╙╙╙ ╙╙╙╙'╙╙  ╙\"  ╙╙╙   ╙  `╙\n\n// Is an improved fork token with\n// the function of a passive staking protocol\n// on the Ethereum network Mainnet,\n// which is launched for the purpose\n// of Continue the BULLISH trend\n\n// https://babyushi.com/\n// https://twitter.com/babyushieth\n// https://t.me/babyushiengchat\n// https://t.me/babyushieng\n\n// Rewards 8%\n// BuyBack 3%\n// AutoLp 1%\n// Marketing 8%\n\npragma solidity ^0.8.14;\n\nimport './interfaces/RewardsTracker.sol';\nimport './interfaces/Ownable.sol';\nimport './interfaces/IDex.sol';\nimport './interfaces/IERC20.sol';\nimport './interfaces/ERC20.sol';\n\nlibrary Address {\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, 'Address: insufficient balance');\n\n        (bool success, ) = recipient.call{value: amount}('');\n        require(success, 'Address: unable to send value, recipient may have reverted');\n    }\n}\n\ncontract ERC20BABYUSH1 is ERC20, Ownable, RewardsTracker {\n    using Address for address payable;\n\n    IRouter public router;\n    address public pair;\n\n    bool private swapping;\n    bool public antiBotSystem;\n    bool public swapEnabled = true;\n\n    address public marketingWallet = 0xdE747aeF6E223601352aD01A9115D34b7a333c04;\n    address public buybackWallet = 0x5e901ca79A5CDe2804772910Fa3eC7eAC651F147;\n\n    uint256 public swapTokensAtAmount = 10_000_000 * 10**18;\n    uint256 public maxWalletAmount = 105_000_000 * 10**18;\n    uint256 public gasLimit = 300_000;\n    uint256 public goldenHourStart;\n\n    struct Taxes {\n        uint64 rewards;\n        uint64 marketing;\n        uint64 buyback;\n        uint64 lp;\n    }\n\n    Taxes public buyTaxes = Taxes(8, 8, 3, 1);\n    Taxes public sellTaxes = Taxes(8, 8, 3, 1);\n\n    uint256 public totalBuyTax = 20;\n    uint256 public totalSellTax = 20;\n\n    mapping(address => bool) public _isExcludedFromFees;\n    mapping(address => bool) public antiBot;\n    mapping(address => bool) public isPair;\n\n    ///////////////\n    //   Events  //\n    ///////////////\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\n    event ProcessedDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        uint256 gas,\n        address indexed processor\n    );\n\n    constructor(address _router, address _rewardToken) ERC20('BUSHI', 'BUSHI') RewardsTracker(_router, _rewardToken) {\n        router = IRouter(_router);\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\n\n        isPair[pair] = true;\n\n        minBalanceForRewards = 210_000 * 10**18;\n        claimDelay = 1 hours;\n\n        // exclude from receiving dividends\n        excludedFromDividends[address(this)] = true;\n        excludedFromDividends[owner()] = true;\n        excludedFromDividends[address(0xdead)] = true;\n        excludedFromDividends[address(_router)] = true;\n        excludedFromDividends[address(pair)] = true;\n\n        // exclude from paying fees or having max transaction amount\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[marketingWallet] = true;\n        _isExcludedFromFees[buybackWallet] = true;\n\n        antiBotSystem = true;\n        antiBot[address(this)] = true;\n        antiBot[owner()] = true;\n        antiBot[marketingWallet] = true;\n        antiBot[buybackWallet] = true;\n\n        // _mint is an internal function in ERC20.sol that is only called here,\n        // and CANNOT be called ever again\n        _mint(owner(), 21e9 * (10**18));\n    }\n\n    receive() external payable {}\n\n    /// @notice Manual claim the dividends\n    function claim() external {\n        super._processAccount(payable(msg.sender));\n    }\n\n    function rescueERC20(address tokenAddress, uint256 amount) external onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), amount);\n    }\n\n    function rescueETH() external onlyOwner {\n        uint256 ETHbalance = address(this).balance;\n        payable(owner()).sendValue(ETHbalance);\n    }\n\n    function updateRouter(address newRouter) external onlyOwner {\n        router = IRouter(newRouter);\n    }\n\n    /////////////////////////////////\n    // Exclude / Include functions //\n    /////////////////////////////////\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _isExcludedFromFees[accounts[i]] = excluded;\n        }\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\n    }\n\n    ///////////////////////\n    //  Setter Functions //\n    ///////////////////////\n\n    function setRewardToken(address newToken) external onlyOwner {\n        super._setRewardToken(newToken);\n    }\n\n    function startGoldenHour() external onlyOwner {\n        goldenHourStart = block.timestamp;\n    }\n\n    function setMarketingWallet(address newWallet) external onlyOwner {\n        marketingWallet = newWallet;\n    }\n\n    function setBuybackWallet(address newWallet) external onlyOwner {\n        buybackWallet = newWallet;\n    }\n\n    function setClaimDelay(uint256 amountInSeconds) external onlyOwner {\n        claimDelay = amountInSeconds;\n    }\n\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\n        swapTokensAtAmount = amount * 10**18;\n    }\n\n    function setBuyTaxes(\n        uint64 _rewards,\n        uint64 _marketing,\n        uint64 _buyback,\n        uint64 _lp\n    ) external onlyOwner {\n        buyTaxes = Taxes(_rewards, _marketing, _buyback, _lp);\n        totalBuyTax = _rewards + _marketing + _buyback + _lp;\n    }\n\n    function setSellTaxes(\n        uint64 _rewards,\n        uint64 _marketing,\n        uint64 _buyback,\n        uint64 _lp\n    ) external onlyOwner {\n        sellTaxes = Taxes(_rewards, _marketing, _buyback, _lp);\n        totalSellTax = _rewards + _marketing + _buyback + _lp;\n    }\n\n    function setMaxWallet(uint256 maxWalletPercentage) external onlyOwner {\n        maxWalletAmount = (maxWalletPercentage * totalSupply()) / 1000;\n    }\n\n    function setGasLimit(uint256 newGasLimit) external onlyOwner {\n        gasLimit = newGasLimit;\n        //QWxsIHJpZ2h0cyBiZWxvbmcgdG8gQkFZVVNISS4gQ29weWluZyBhIGNvbnRyYWN0IGlzIGEgdmlvbGF0aW9uIGFuZCBzdWdnZXN0cyB0aGF0IHdob2V2ZXIgZGlkIGl0IGhhcyBzbW9vdGhpZXMgaW5zdGVhZCBvZiBicmFpbnMu\n    }\n\n    function setSwapEnabled(bool _enabled) external onlyOwner {\n        swapEnabled = _enabled;\n    }\n\n    function setMinBalanceForRewards(uint256 minBalance) external onlyOwner {\n        minBalanceForRewards = minBalance * 10**18;\n    }\n\n    function setAntiBotStatus(bool value) external onlyOwner {\n        _setAntiBotStatus(value);\n    }\n\n    function _setAntiBotStatus(bool value) internal {\n        antiBotSystem = value;\n    }\n\n    function addAntiBot(address _address) external onlyOwner {\n        _addAntiBot(_address);\n    }\n\n    function addMultipleAntiBot(address[] memory _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            _addAntiBot(_addresses[i]);\n        }\n    }\n\n    function _addAntiBot(address _address) internal {\n        antiBot[_address] = true;\n    }\n\n    function removeMultipleAntiBot(address[] memory _addresses) external onlyOwner {\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            _removeAntiBot(_addresses[i]);\n        }\n    }\n\n    function _removeAntiBot(address _address) internal {\n        antiBot[_address] = false;\n    }\n\n    /// @dev Set new pairs created due to listing in new DEX\n    function setPair(address newPair, bool value) external onlyOwner {\n        _setPair(newPair, value);\n    }\n\n    function _setPair(address newPair, bool value) private {\n        isPair[newPair] = value;\n\n        if (value) {\n            excludedFromDividends[newPair] = true;\n        }\n    }\n\n    ////////////////////////\n    // Transfer Functions //\n    ////////////////////////\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), 'ERC20: transfer from the zero address');\n        require(to != address(0), 'ERC20: transfer to the zero address');\n        require(amount > 0, 'Transfer amount must be greater than zero');\n        if (antiBotSystem) {\n            require(antiBot[tx.origin], 'Address is bot');\n        }\n\n        if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to] && !swapping) {\n            if (!isPair[to]) {\n                require(balanceOf(to) + amount <= maxWalletAmount, 'You are exceeding maxWallet');\n            }\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if (\n            canSwap &&\n            !swapping &&\n            swapEnabled &&\n            !isPair[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to] &&\n            totalSellTax > 0\n        ) {\n            swapping = true;\n            swapAndLiquify(swapTokensAtAmount);\n            swapping = false;\n        }\n\n        bool takeFee = !swapping;\n\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        if (!isPair[to] && !isPair[from]) takeFee = false;\n\n        if (takeFee) {\n            uint256 feeAmt;\n            if (isPair[to]) feeAmt = (amount * totalSellTax) / 100;\n            else if (isPair[from]) {\n                if (block.timestamp < goldenHourStart + 1 hours)\n                    feeAmt = (amount * (buyTaxes.lp + buyTaxes.buyback)) / 100;\n                else feeAmt = (amount * totalBuyTax) / 100;\n            }\n\n            amount = amount - feeAmt;\n            super._transfer(from, address(this), feeAmt);\n        }\n        super._transfer(from, to, amount);\n\n        super.setBalance(from, balanceOf(from));\n        super.setBalance(to, balanceOf(to));\n\n        if (!swapping) {\n            super.autoDistribute(gasLimit);\n        }\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // Split the contract balance into halves\n        uint256 denominator = totalSellTax * 2;\n        uint256 tokensToAddLiquidityWith = (tokens * sellTaxes.lp) / denominator;\n        uint256 toSwap = tokens - tokensToAddLiquidityWith;\n\n        uint256 initialBalance = address(this).balance;\n\n        swapTokensForETH(toSwap);\n\n        uint256 deltaBalance = address(this).balance - initialBalance;\n        uint256 unitBalance = deltaBalance / (denominator - sellTaxes.lp);\n        uint256 bnbToAddLiquidityWith = unitBalance * sellTaxes.lp;\n\n        if (bnbToAddLiquidityWith > 0) {\n            // Add liquidity to pancake\n            addLiquidity(tokensToAddLiquidityWith, bnbToAddLiquidityWith);\n        }\n\n        // Send ETH to marketing\n        uint256 marketingAmt = unitBalance * 2 * sellTaxes.marketing;\n        if (marketingAmt > 0) {\n            payable(marketingWallet).sendValue(marketingAmt);\n        }\n\n        // Send ETH to buyback\n        uint256 buybackAmt = unitBalance * 2 * sellTaxes.buyback;\n        if (buybackAmt > 0) {\n            payable(buybackWallet).sendValue(buybackAmt);\n        }\n\n        // Send ETH to rewards\n        uint256 dividends = unitBalance * 2 * sellTaxes.rewards;\n        if (dividends > 0) super._distributeDividends(dividends);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(router), tokenAmount);\n\n        // add the liquidity\n        router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        _approve(address(this), address(router), tokenAmount);\n\n        // make the swap\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path, // QWxsIHJpZ2h0cyBiZWxvbmcgdG8gQkFZVVNISS4gQ29weWluZyBhIGNvbnRyYWN0IGlzIGEgdmlvbGF0aW9uIGFuZCBzdWdnZXN0cyB0aGF0IHdob2V2ZXIgZGlkIGl0IGhhcyBzbW9vdGhpZXMgaW5zdGVhZCBvZiBicmFpbnMu\n            address(this),\n            block.timestamp\n        );\n    }\n}\n"
    },
    "contracts/interfaces/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
    },
    "contracts/interfaces/RewardsTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./IDex.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\n/// @title RewardsTracker\r\n/// @author FreezyEx (https://github.com/FreezyEx)\r\n/// @dev A contract that allows anyone to pay and distribute ethers to users as shares.\r\n/// @notice This contract is based on erc1726 by Roger-Wu (https://github.com/Roger-Wu/erc1726-dividend-paying-token)\r\n\r\ncontract RewardsTracker is Ownable {\r\n\r\n    mapping(address => uint256) public userShares;\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n    mapping(address => bool) public excludedFromDividends;\r\n    mapping(address => uint256) public lastClaimTime;\r\n    mapping(address => uint256) public elegibleUsersIndex;\r\n    mapping(address => bool ) public isElegible;\r\n\r\n    address[] elegibleUsers;\r\n\r\n    IRouter public rewardRouter;\r\n    address public rewardToken;\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDividendsWithdrawn;\r\n    uint256 public totalShares;\r\n    uint256 public minBalanceForRewards;\r\n    uint256 public claimDelay;\r\n    uint256 public currentIndex;\r\n\r\n    event ExcludeFromDividends(address indexed account, bool value);\r\n    event Claim(address indexed account, uint256 amount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n\r\n    constructor(address _router, address _rewardToken) {\r\n      rewardRouter = IRouter(_router);\r\n      rewardToken = _rewardToken;\r\n    }\r\n\r\n    function excludeFromDividends(address account, bool value) external onlyOwner {\r\n        require(excludedFromDividends[account] != value);\r\n        excludedFromDividends[account] = value;\r\n        if(value == true){\r\n          _setBalance(account, 0);\r\n        }\r\n        else{\r\n          _setBalance(account, userShares[account]);\r\n        }\r\n        emit ExcludeFromDividends(account, value);\r\n\r\n    }\r\n    \r\n    function _setRewardToken(address newToken) internal{\r\n      rewardToken = newToken;\r\n    }\r\n\r\n    function getAccount(address account) public view returns (uint256 withdrawableUserDividends, uint256 totalUserDividends, uint256 lastUserClaimTime, uint256 withdrawnUserDividends) {\r\n        withdrawableUserDividends = withdrawableDividendOf(account);\r\n        totalUserDividends = accumulativeDividendOf(account);\r\n        lastUserClaimTime = lastClaimTime[account];\r\n        withdrawnUserDividends = withdrawnDividends[account]; \r\n    }\r\n\r\n    function setBalance(address account, uint256 newBalance) internal {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }   \r\n        _setBalance(account, newBalance);\r\n    }\r\n\r\n    function _setMinBalanceForRewards(uint256 newMinBalance) internal {\r\n        minBalanceForRewards = newMinBalance;\r\n    }\r\n\r\n    function autoDistribute(uint256 gasAvailable) public {\r\n      uint256 size = elegibleUsers.length;\r\n      if(size == 0) return;\r\n\r\n      uint256 gasSpent = 0;\r\n      uint256 gasLeft = gasleft();\r\n      uint256 lastIndex = currentIndex;\r\n      uint256 iterations = 0;\r\n\r\n      while(gasSpent < gasAvailable && iterations < size){\r\n        if(lastIndex >= size){\r\n          lastIndex = 0;\r\n        }\r\n        address account = elegibleUsers[lastIndex];\r\n        if(lastClaimTime[account] + claimDelay < block.timestamp){\r\n          _processAccount(account);\r\n        }\r\n        lastIndex++;\r\n        iterations++;\r\n        gasSpent += gasLeft - gasleft();\r\n        gasLeft = gasleft();\r\n      }\r\n\r\n      currentIndex = lastIndex;\r\n\r\n    }\r\n\r\n    function _processAccount(address account) internal returns(bool){\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n          if(amount > 0) {\r\n              lastClaimTime[account] = block.timestamp;\r\n              emit Claim(account, amount);\r\n              return true;\r\n          }\r\n          return false;\r\n    }\r\n\r\n    function distributeDividends() external payable {\r\n      if (msg.value > 0) {\r\n      _distributeDividends(msg.value);\r\n      }\r\n    }\r\n\r\n    function _distributeDividends(uint256 amount) internal {\r\n      require(totalShares > 0);\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare + (amount * magnitude / totalShares);\r\n      totalDividends= totalDividends + amount;\r\n    }\r\n    \r\n    function _withdrawDividendOfUser(address user) internal returns (uint256) {\r\n      uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n      if (_withdrawableDividend > 0) {\r\n        withdrawnDividends[user] += _withdrawableDividend;\r\n        totalDividendsWithdrawn += _withdrawableDividend;\r\n        emit DividendWithdrawn(user, _withdrawableDividend);\r\n        (bool success) = swapEthForCustomToken(user, _withdrawableDividend);\r\n        if(!success) {\r\n          (bool secondSuccess,) = payable(user).call{value: _withdrawableDividend, gas: 3000}(\"\");\r\n          if(!secondSuccess) {\r\n            withdrawnDividends[user] -= _withdrawableDividend;\r\n            totalDividendsWithdrawn -= _withdrawableDividend;\r\n            return 0;\r\n          }       \r\n        }\r\n        return _withdrawableDividend;\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    function swapEthForCustomToken(address user, uint256 amt) internal returns (bool) {\r\n      address[] memory path = new address[](2);\r\n      path[0] = rewardRouter.WETH();\r\n      path[1] = rewardToken;\r\n      \r\n      try rewardRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amt}(0, path, user, block.timestamp) {\r\n        return true;\r\n      } catch {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function dividendOf(address _owner) public view returns(uint256) {\r\n      return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view returns(uint256) {\r\n      return accumulativeDividendOf(_owner) - withdrawnDividends[_owner];\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view returns(uint256) {\r\n      return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view returns(uint256) {\r\n      return uint256(int256(magnifiedDividendPerShare * userShares[_owner]) + magnifiedDividendCorrections[_owner]) / magnitude;\r\n    }\r\n\r\n    function addShares(address account, uint256 value) internal {\r\n      userShares[account] += value;\r\n      totalShares += value;\r\n\r\n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] - int256(magnifiedDividendPerShare * value);\r\n    }\r\n\r\n    function removeShares(address account, uint256 value) internal {\r\n      userShares[account] -= value;\r\n      totalShares -= value;\r\n\r\n      magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account] + int256(magnifiedDividendPerShare * value);\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n      uint256 currentBalance = userShares[account];\r\n      if(currentBalance > 0) {\r\n        _processAccount(account);\r\n      }\r\n      if(newBalance < minBalanceForRewards && isElegible[account]){\r\n        isElegible[account] = false;\r\n        elegibleUsers[elegibleUsersIndex[account]] = elegibleUsers[elegibleUsers.length - 1];\r\n        elegibleUsersIndex[elegibleUsers[elegibleUsers.length - 1]] = elegibleUsersIndex[account];\r\n        elegibleUsers.pop();\r\n        removeShares(account, currentBalance);\r\n      }\r\n      else{\r\n        if(userShares[account] == 0){\r\n          isElegible[account] = true;\r\n          elegibleUsersIndex[account] = elegibleUsers.length;\r\n          elegibleUsers.push(account);\r\n        }\r\n        if(newBalance > currentBalance) {\r\n          uint256 mintAmount = newBalance - currentBalance;\r\n          addShares(account, mintAmount);\r\n        } else if(newBalance < currentBalance) {\r\n          uint256 burnAmount = currentBalance - newBalance;\r\n          removeShares(account, burnAmount);\r\n        }\r\n      }\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IDex.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;   \r\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"
    },
    "contracts/interfaces/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}"
    },
    "contracts/interfaces/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}