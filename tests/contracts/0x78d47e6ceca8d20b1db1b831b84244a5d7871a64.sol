{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@ensdomains/ens-contracts/contracts/registry/ENS.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface ENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\n    function setResolver(bytes32 node, address resolver) external virtual;\n    function setOwner(bytes32 node, address owner) external virtual;\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\n    function setApprovalForAll(address operator, bool approved) external virtual;\n    function owner(bytes32 node) external virtual view returns (address);\n    function resolver(bytes32 node) external virtual view returns (address);\n    function ttl(bytes32 node) external virtual view returns (uint64);\n    function recordExists(bytes32 node) external virtual view returns (bool);\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol": {
      "content": "pragma solidity >=0.8.4;\n\nimport \"./ENS.sol\";\n\n/**\n * The ENS registry contract.\n */\ncontract ENSRegistry is ENS {\n\n    struct Record {\n        address owner;\n        address resolver;\n        uint64 ttl;\n    }\n\n    mapping (bytes32 => Record) records;\n    mapping (address => mapping(address => bool)) operators;\n\n    // Permits modifications only by the owner of the specified node.\n    modifier authorised(bytes32 node) {\n        address owner = records[node].owner;\n        require(owner == msg.sender || operators[owner][msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Constructs a new ENS registrar.\n     */\n    constructor() public {\n        records[0x0].owner = msg.sender;\n    }\n\n    /**\n     * @dev Sets the record for a node.\n     * @param node The node to update.\n     * @param owner The address of the new owner.\n     * @param resolver The address of the resolver.\n     * @param ttl The TTL in seconds.\n     */\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual override {\n        setOwner(node, owner);\n        _setResolverAndTTL(node, resolver, ttl);\n    }\n\n    /**\n     * @dev Sets the record for a subnode.\n     * @param node The parent node.\n     * @param label The hash of the label specifying the subnode.\n     * @param owner The address of the new owner.\n     * @param resolver The address of the resolver.\n     * @param ttl The TTL in seconds.\n     */\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual override {\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\n        _setResolverAndTTL(subnode, resolver, ttl);\n    }\n\n    /**\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\n     * @param node The node to transfer ownership of.\n     * @param owner The address of the new owner.\n     */\n    function setOwner(bytes32 node, address owner) public virtual override authorised(node) {\n        _setOwner(node, owner);\n        emit Transfer(node, owner);\n    }\n\n    /**\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\n     * @param node The parent node.\n     * @param label The hash of the label specifying the subnode.\n     * @param owner The address of the new owner.\n     */\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public virtual override authorised(node) returns(bytes32) {\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\n        _setOwner(subnode, owner);\n        emit NewOwner(node, label, owner);\n        return subnode;\n    }\n\n    /**\n     * @dev Sets the resolver address for the specified node.\n     * @param node The node to update.\n     * @param resolver The address of the resolver.\n     */\n    function setResolver(bytes32 node, address resolver) public virtual override authorised(node) {\n        emit NewResolver(node, resolver);\n        records[node].resolver = resolver;\n    }\n\n    /**\n     * @dev Sets the TTL for the specified node.\n     * @param node The node to update.\n     * @param ttl The TTL in seconds.\n     */\n    function setTTL(bytes32 node, uint64 ttl) public virtual override authorised(node) {\n        emit NewTTL(node, ttl);\n        records[node].ttl = ttl;\n    }\n\n    /**\n     * @dev Enable or disable approval for a third party (\"operator\") to manage\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\n     * @param operator Address to add to the set of authorized operators.\n     * @param approved True if the operator is approved, false to revoke approval.\n     */\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        operators[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /**\n     * @dev Returns the address that owns the specified node.\n     * @param node The specified node.\n     * @return address of the owner.\n     */\n    function owner(bytes32 node) public virtual override view returns (address) {\n        address addr = records[node].owner;\n        if (addr == address(this)) {\n            return address(0x0);\n        }\n\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address of the resolver for the specified node.\n     * @param node The specified node.\n     * @return address of the resolver.\n     */\n    function resolver(bytes32 node) public virtual override view returns (address) {\n        return records[node].resolver;\n    }\n\n    /**\n     * @dev Returns the TTL of a node, and any records associated with it.\n     * @param node The specified node.\n     * @return ttl of the node.\n     */\n    function ttl(bytes32 node) public virtual override view returns (uint64) {\n        return records[node].ttl;\n    }\n\n    /**\n     * @dev Returns whether a record has been imported to the registry.\n     * @param node The specified node.\n     * @return Bool if record exists\n     */\n    function recordExists(bytes32 node) public virtual override view returns (bool) {\n        return records[node].owner != address(0x0);\n    }\n\n    /**\n     * @dev Query if an address is an authorized operator for another address.\n     * @param owner The address that owns the records.\n     * @param operator The address that acts on behalf of the owner.\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\n     */\n    function isApprovedForAll(address owner, address operator) external virtual override view returns (bool) {\n        return operators[owner][operator];\n    }\n\n    function _setOwner(bytes32 node, address owner) internal virtual {\n        records[node].owner = owner;\n    }\n\n    function _setResolverAndTTL(bytes32 node, address resolver, uint64 ttl) internal {\n        if(resolver != records[node].resolver) {\n            records[node].resolver = resolver;\n            emit NewResolver(node, resolver);\n        }\n\n        if(ttl != records[node].ttl) {\n            records[node].ttl = ttl;\n            emit NewTTL(node, ttl);\n        }\n    }\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/ISupportsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface ISupportsInterface {\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\n}"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"./profiles/IABIResolver.sol\";\nimport \"./profiles/IAddressResolver.sol\";\nimport \"./profiles/IAddrResolver.sol\";\nimport \"./profiles/IContentHashResolver.sol\";\nimport \"./profiles/IDNSRecordResolver.sol\";\nimport \"./profiles/IDNSZoneResolver.sol\";\nimport \"./profiles/IInterfaceResolver.sol\";\nimport \"./profiles/INameResolver.sol\";\nimport \"./profiles/IPubkeyResolver.sol\";\nimport \"./profiles/ITextResolver.sol\";\nimport \"./ISupportsInterface.sol\";\n/**\n * A generic resolver interface which includes all the functions including the ones deprecated\n */\ninterface Resolver is ISupportsInterface, IABIResolver, IAddressResolver, IAddrResolver, IContentHashResolver, IDNSRecordResolver, IDNSZoneResolver, IInterfaceResolver, INameResolver, IPubkeyResolver, ITextResolver {\n    /* Deprecated events */\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\n\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) external;\n    function setAddr(bytes32 node, address addr) external;\n    function setAddr(bytes32 node, uint coinType, bytes calldata a) external;\n    function setContenthash(bytes32 node, bytes calldata hash) external;\n    function setDnsrr(bytes32 node, bytes calldata data) external;\n    function setName(bytes32 node, string calldata _name) external;\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external;\n    function setText(bytes32 node, string calldata key, string calldata value) external;\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) external;\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\n\n    /* Deprecated functions */\n    function content(bytes32 node) external view returns (bytes32);\n    function multihash(bytes32 node) external view returns (bytes memory);\n    function setContent(bytes32 node, bytes32 hash) external;\n    function setMultihash(bytes32 node, bytes calldata hash) external;\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"./SupportsInterface.sol\";\n\nabstract contract ResolverBase is SupportsInterface {\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\n\n    modifier authorised(bytes32 node) {\n        require(isAuthorised(node));\n        _;\n    }\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/SupportsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./ISupportsInterface.sol\";\n\nabstract contract SupportsInterface is ISupportsInterface {\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\n        return interfaceID == type(ISupportsInterface).interfaceId;\n    }\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\nimport \"./IABIResolver.sol\";\nimport \"../ResolverBase.sol\";\n\ninterface IABIResolver {\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n    /**\n     * Returns the ABI associated with an ENS node.\n     * Defined in EIP205.\n     * @param node The ENS node to query\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n     * @return contentType The content type of the return value\n     * @return data The ABI data\n     */\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the legacy (ETH-only) addr function.\n */\ninterface IAddrResolver {\n    event AddrChanged(bytes32 indexed node, address a);\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address payable);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the new (multicoin) addr function.\n */\ninterface IAddressResolver {\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\n\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IContentHashResolver {\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\n\n    /**\n     * Returns the contenthash associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function contenthash(bytes32 node) external view returns (bytes memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSRecordResolver {\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\n    event DNSZoneCleared(bytes32 indexed node);\n\n    /**\n     * Obtain a DNS record.\n     * @param node the namehash of the node for which to fetch the record\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\n     * @return the DNS record in wire format if present, otherwise empty\n     */\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IDNSZoneResolver {\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\n\n    /**\n     * zonehash obtains the hash for the zone.\n     * @param node The ENS node to query.\n     * @return The associated contenthash.\n     */\n    function zonehash(bytes32 node) external view returns (bytes memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IInterfaceResolver {\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\n\n    /**\n     * Returns the address of a contract that implements the specified interface for this name.\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\n     * will be returned.\n     * @param node The ENS node to query.\n     * @param interfaceID The EIP 165 interface ID to check for.\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\n     */\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface INameResolver {\n    event NameChanged(bytes32 indexed node, string name);\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) external view returns (string memory);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface IPubkeyResolver {\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n\n    /**\n     * Returns the SECP256k1 public key associated with an ENS node.\n     * Defined in EIP 619.\n     * @param node The ENS node to query\n     * @return x The X coordinate of the curve point for the public key.\n     * @return y The Y coordinate of the curve point for the public key.\n     */\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\n}\n"
    },
    "@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string calldata key) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/common/IPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\ninterface IPriceOracle {\n    /**\n     * @dev Returns the price to register or renew a name.\n     * @param name The name being registered or renewed.\n     * @param expires When the name presently expires (0 if this is a new registration).\n     * @param duration How long the name is being registered or extended for, in seconds.\n     * @return The price of this renewal or registration, in wei.\n     */\n    function price(string calldata name, uint expires, uint duration) external view returns(uint);\n}\n"
    },
    "src/common/PremiumPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"./SafeMath.sol\";\r\nimport \"./StringUtils.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./StablePriceOracle.sol\";\r\nimport \"../universal/UniversalRegistrar.sol\";\r\nimport \"./SLDPriceOracle.sol\";\r\nimport \"../universal_v2/Access.sol\";\r\n\r\n// PremiumPriceOracle a price oracle with support for setting different prices for premium names.\r\ncontract PremiumPriceOracle is Ownable, Access {\r\n    using SafeMath for *;\r\n    using StringUtils for *;\r\n\r\n    AggregatorInterface public immutable usdOracle;\r\n    SLDPriceOracle public sldPriceOracle;\r\n\r\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\r\n    uint256[] public defaultPrices;\r\n    mapping(bytes32 => uint256[]) public rentPrices;\r\n    mapping(bytes32 => uint256) public rentPricesUpdated;\r\n\r\n    mapping(uint256 => mapping(bytes32 => mapping(bytes32 => uint256))) public premiumPrices;\r\n    mapping(bytes32 => uint256) public premiumPricesVersion;\r\n\r\n    event NamePremium(bytes32 indexed node, string name, uint256 price);\r\n    event PremiumsCleared(bytes32 indexed node);\r\n    event RentPriceChanged(bytes32 node, uint256[] prices);\r\n    event DefaultRentPriceChanged(uint256[] prices);\r\n\r\n    bytes4 private constant INTERFACE_META_ID =\r\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n\r\n    bytes4 private constant ORACLE_ID =\r\n    bytes4(keccak256(\"price(bytes32,string,uint256,uint256)\"));\r\n\r\n    constructor(SLDPriceOracle _sldPriceOracle, uint256[] memory _defaultPrices) Access(_sldPriceOracle.registrar()) {\r\n        usdOracle = _sldPriceOracle.usdOracle();\r\n        sldPriceOracle = _sldPriceOracle;\r\n        _setDefaultPrices(_defaultPrices);\r\n    }\r\n\r\n    function price(bytes32 node, string calldata name, uint256 expires, uint256 duration) external view returns (uint256) {\r\n        bytes32 label = keccak256(bytes(name));\r\n\r\n        // if a premium price exists, return it\r\n        if (premiumPrices[premiumPricesVersion[node]][node][label] != 0) {\r\n            uint256 basePremium = premiumPrices[premiumPricesVersion[node]][node][label];\r\n            return attoUSDToWei(basePremium.mul(duration));\r\n        }\r\n\r\n        // fallback to SLDPriceOracle if no prices set\r\n        if (rentPricesUpdated[node] == 0) {\r\n            return sldPriceOracle.price(node, name, expires, duration);\r\n        }\r\n\r\n        uint256 len = name.strlen();\r\n        uint256[] memory prices = rentPrices[node].length > 0 ? rentPrices[node] : defaultPrices;\r\n\r\n        if (len > prices.length) {\r\n            len = prices.length;\r\n        }\r\n        require(len > 0);\r\n\r\n        uint256 basePrice = prices[len - 1].mul(duration);\r\n        return attoUSDToWei(basePrice);\r\n    }\r\n\r\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\r\n        uint256 ethPrice = uint256(usdOracle.latestAnswer()); //2\r\n        return amount.mul(1e8).div(ethPrice);\r\n    }\r\n\r\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\r\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\r\n        return amount.mul(ethPrice).div(1e8);\r\n    }\r\n\r\n    function premium(bytes32 node, bytes32 label) external view returns (uint256) {\r\n        return premiumPrices[premiumPricesVersion[node]][node][label];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the rent price for a specific name.\r\n     * @param node The node to set the rent price for.\r\n     * @param name The name to set the rent price for.\r\n     * @param _price The rent price. Values are in base\r\n     * price units, equal to one attodollar (1e-18 dollar)\r\n     * each (zero values will clear the price premium).\r\n     */\r\n    function setPremium(bytes32 node, string calldata name, uint256 _price) external nodeOperator(node) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        premiumPrices[premiumPricesVersion[node]][node][label] = _price;\r\n        emit NamePremium(node, name, _price);\r\n    }\r\n\r\n    function setPremiums(bytes32 node, string[] calldata names, uint256[] calldata prices) external nodeOperator(node) {\r\n        require(names.length == prices.length, \"names and prices must have the same length\");\r\n        for (uint i = 0; i < names.length; i++) {\r\n            bytes32 label = keccak256(bytes(names[i]));\r\n            premiumPrices[premiumPricesVersion[node]][node][label] = prices[i];\r\n            emit NamePremium(node, names[i], prices[i]);\r\n        }\r\n    }\r\n\r\n    function clearPremiums(bytes32 node) external nodeOperator(node) {\r\n        premiumPricesVersion[node]++;\r\n        emit PremiumsCleared(node);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets rent prices for the specified node (can only be called by the node owner)\r\n     * @param _rentPrices The price array. Each element corresponds to a specific\r\n     *                    name length; names longer than the length of the array\r\n     *                    default to the price of the last element. Values are\r\n     *                    in base price units, equal to one attodollar (1e-18\r\n     *                    dollar) each.\r\n     */\r\n    function setPrices(bytes32 node, uint256[] memory _rentPrices) public nodeOperator(node) {\r\n        require(block.timestamp - rentPricesUpdated[node] > 5 minutes);\r\n\r\n        rentPrices[node] = _rentPrices;\r\n        rentPricesUpdated[node] = block.timestamp;\r\n        emit RentPriceChanged(node, _rentPrices);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets default rent prices to be used by nodes that don't have pricing set.\r\n     * @param _defaultPrices The price array. Each element corresponds to a specific\r\n     *                    name length; names longer than the length of the array\r\n     *                    default to the price of the last element. Values are\r\n     *                    in base price units, equal to one attodollar (1e-18\r\n     *                    dollar) each.\r\n     */\r\n    function setDefaultPrices(uint256[] memory _defaultPrices) public onlyOwner {\r\n        _setDefaultPrices(_defaultPrices);\r\n    }\r\n\r\n    function _setDefaultPrices(uint256[] memory _defaultPrices) internal {\r\n        defaultPrices = _defaultPrices;\r\n        emit DefaultRentPriceChanged(_defaultPrices);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool)\r\n    {\r\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\r\n    }\r\n}\r\n"
    },
    "src/common/SLDPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./SafeMath.sol\";\nimport \"./StringUtils.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./StablePriceOracle.sol\";\nimport \"../universal/UniversalRegistrar.sol\";\n\n// SLDPriceOracle sets a price in USD, based on an oracle for each node.\n// The registry can set and change default prices. However, if the node owner\n// sets their own price, they will override the default.\ncontract SLDPriceOracle is Ownable {\n    using SafeMath for *;\n    using StringUtils for *;\n\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\n    mapping(bytes32 => uint256[]) public rentPrices;\n    uint256[] public defaultPrices;\n\n    // Oracle address\n    AggregatorInterface public immutable usdOracle;\n    // Registrar address\n    UniversalRegistrar public registrar;\n\n    /**\n     * @dev Throws if called by any account other than the node owner.\n     */\n    modifier onlyNodeOwner(bytes32 node) {\n        require(registrar.ownerOfNode(node) == _msgSender(), \"caller is not the node owner\");\n        _;\n    }\n\n    event OracleChanged(address oracle);\n\n    event RentPriceChanged(bytes32 node, uint256[] prices);\n    event DefaultRentPriceChanged(uint256[] prices);\n\n    bytes4 private constant INTERFACE_META_ID =\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    bytes4 private constant ORACLE_ID =\n    bytes4(keccak256(\"price(bytes32,string,uint256,uint256)\"));\n\n    constructor(UniversalRegistrar _registrar, AggregatorInterface _usdOracle, uint256[] memory _defaultPrices) {\n        registrar = _registrar;\n        usdOracle = _usdOracle;\n        defaultPrices = _defaultPrices;\n    }\n\n    function price(bytes32 node, string calldata name, uint256 expires, uint256 duration) external view returns (uint256) {\n        uint256 len = name.strlen();\n        uint256[] memory prices = rentPrices[node].length > 0 ? rentPrices[node] : defaultPrices;\n\n        if (len > prices.length) {\n            len = prices.length;\n        }\n        require(len > 0);\n\n        uint256 basePrice = prices[len - 1].mul(duration);\n        return attoUSDToWei(basePrice);\n    }\n\n    /**\n     * @dev Sets rent prices for the specified node (can only be called by the node owner)\n     * @param _rentPrices The price array. Each element corresponds to a specific\n     *                    name length; names longer than the length of the array\n     *                    default to the price of the last element. Values are\n     *                    in base price units, equal to one attodollar (1e-18\n     *                    dollar) each.\n     */\n    function setPrices(bytes32 node, uint256[] memory _rentPrices) public onlyNodeOwner(node) {\n        rentPrices[node] = _rentPrices;\n        emit RentPriceChanged(node, _rentPrices);\n    }\n\n    /**\n     * @dev Sets default rent prices to be used by nodes that don't have pricing set.\n     * @param _defaultPrices The price array. Each element corresponds to a specific\n     *                    name length; names longer than the length of the array\n     *                    default to the price of the last element. Values are\n     *                    in base price units, equal to one attodollar (1e-18\n     *                    dollar) each.\n     */\n    function setDefaultPrices(uint256[] memory _defaultPrices) public onlyOwner {\n        defaultPrices = _defaultPrices;\n        emit DefaultRentPriceChanged(_defaultPrices);\n    }\n\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\n        uint256 ethPrice = uint256(usdOracle.latestAnswer()); //2\n        return amount.mul(1e8).div(ethPrice);\n    }\n\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\n        return amount.mul(ethPrice).div(1e8);\n    }\n\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool)\n    {\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\n    }\n}\n"
    },
    "src/common/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n"
    },
    "src/common/StablePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./IPriceOracle.sol\";\nimport \"./SafeMath.sol\";\nimport \"./StringUtils.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface AggregatorInterface {\n    function latestAnswer() external view returns (int256);\n}\n\n// StablePriceOracle sets a price in USD, based on an oracle.\ncontract StablePriceOracle is Ownable, IPriceOracle {\n    using SafeMath for *;\n    using StringUtils for *;\n\n    // Rent in base price units by length. Element 0 is for 1-length names, and so on.\n    uint256[] public rentPrices;\n\n    // Oracle address\n    AggregatorInterface public immutable usdOracle;\n\n    event OracleChanged(address oracle);\n\n    event RentPriceChanged(uint256[] prices);\n\n    bytes4 private constant INTERFACE_META_ID =\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\n    bytes4 private constant ORACLE_ID =\n    bytes4(\n        keccak256(\"price(string,uint256,uint256)\") ^\n        keccak256(\"premium(string,uint256,uint256)\")\n    );\n\n    constructor(AggregatorInterface _usdOracle, uint256[] memory _rentPrices) {\n        usdOracle = _usdOracle;\n        setPrices(_rentPrices);\n    }\n\n    function price(string calldata name, uint256 expires, uint256 duration) external view override returns (uint256) {\n        uint256 len = name.strlen();\n        if (len > rentPrices.length) {\n            len = rentPrices.length;\n        }\n        require(len > 0);\n\n        uint256 basePrice = rentPrices[len - 1].mul(duration);\n        basePrice = basePrice.add(_premium(name, expires, duration));\n\n        return attoUSDToWei(basePrice);\n    }\n\n    /**\n     * @dev Sets rent prices.\n     * @param _rentPrices The price array. Each element corresponds to a specific\n     *                    name length; names longer than the length of the array\n     *                    default to the price of the last element. Values are\n     *                    in base price units, equal to one attodollar (1e-18\n     *                    dollar) each.\n     */\n    function setPrices(uint256[] memory _rentPrices) public onlyOwner {\n        rentPrices = _rentPrices;\n        emit RentPriceChanged(_rentPrices);\n    }\n\n    /**\n     * @dev Returns the pricing premium in wei.\n     */\n    function premium(\n        string calldata name,\n        uint256 expires,\n        uint256 duration\n    ) external view returns (uint256) {\n        uint256 weiPrice = attoUSDToWei(_premium(name, expires, duration));\n        return weiPrice;\n    }\n\n    /**\n     * @dev Returns the pricing premium in internal base units.\n     */\n    function _premium(\n        string memory name,\n        uint256 expires,\n        uint256 duration\n    ) internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    function attoUSDToWei(uint256 amount) internal view returns (uint256) {\n        uint256 ethPrice = uint256(usdOracle.latestAnswer()); //2\n        return amount.mul(1e8).div(ethPrice);\n    }\n\n    function weiToAttoUSD(uint256 amount) internal view returns (uint256) {\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\n        return amount.mul(ethPrice).div(1e8);\n    }\n\n    function supportsInterface(bytes4 interfaceID) public view virtual returns (bool)\n    {\n        return interfaceID == INTERFACE_META_ID || interfaceID == ORACLE_ID;\n    }\n}\n"
    },
    "src/common/StringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4;\n\nlibrary StringUtils {\n    /**\n     * @dev Returns the length of a given string\n     *\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string memory s) internal pure returns (uint) {\n        uint len;\n        uint i = 0;\n        uint bytelength = bytes(s).length;\n        for(len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if(b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n        return len;\n    }\n}\n"
    },
    "src/root/Controllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Controllable is Ownable {\n    mapping(address => bool) public controllers;\n\n    event ControllerChanged(address indexed controller, bool enabled);\n\n    modifier onlyController {\n        require(\n            controllers[msg.sender],\n            \"Controllable: Caller is not a controller\"\n        );\n        _;\n    }\n\n    function setController(address controller, bool enabled) public onlyOwner {\n        controllers[controller] = enabled;\n        emit ControllerChanged(controller, enabled);\n    }\n}\n"
    },
    "src/root/Root.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Controllable.sol\";\n\ncontract Root is Ownable, Controllable {\n    bytes32 private constant ROOT_NODE = bytes32(0);\n\n    bytes4 private constant INTERFACE_META_ID =\n    bytes4(keccak256(\"supportsInterface(bytes4)\"));\n\n    event TLDLocked(bytes32 indexed label);\n\n    ENS public ens;\n    mapping(bytes32 => bool) public locked;\n\n    constructor(ENS _ens) {\n        ens = _ens;\n    }\n\n    function setSubnodeOwner(bytes32 label, address owner) external onlyController\n    {\n        require(!locked[label], \"name locked\");\n        ens.setSubnodeOwner(ROOT_NODE, label, owner);\n    }\n\n    function setResolver(address resolver) external onlyController {\n        ens.setResolver(ROOT_NODE, resolver);\n    }\n\n    function lock(bytes32 label) external onlyController {\n        emit TLDLocked(label);\n        locked[label] = true;\n    }\n\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n        return interfaceID == INTERFACE_META_ID;\n    }\n}\n"
    },
    "src/universal/IUniversalRegistrar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IUniversalRegistrar is IERC721 {\n    event ControllerAdded(bytes32 node, address indexed controller);\n    event ControllerRemoved(bytes32 node, address indexed controller);\n\n    event NameRegistered(\n        bytes32 node,\n        bytes32 indexed label,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRenewed(bytes32 node, bytes32 indexed label, uint256 expires);\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(bytes32 node, address controller) external;\n\n    // Revoke controller permission for an address.\n    function removeController(bytes32 node, address controller) external;\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(bytes32 node, address resolver) external;\n\n    // Returns the expiration timestamp of the specified label hash.\n    function nameExpires(uint256 id) external view returns (uint256);\n\n    // Returns true iff the specified name is available for registration.\n    function available(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Register a name.\n     */\n    function register(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        uint256 duration\n    ) external returns (uint256);\n\n    function renew(bytes32 node, bytes32 label, uint256 duration) external returns (uint256);\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(bytes32 node, bytes32 label, address owner) external;\n}\n"
    },
    "src/universal/RegistrarAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../root/Root.sol\";\n\ncontract RegistrarAccess {\n    event NodeOwnerChanged(bytes32 node, address indexed oldOwner, address indexed newOwner);\n    event RegistryControllersChanged(address indexed controller, bool approved);\n    event RegistryNodeControllersChanged(bytes32 node, address indexed controller, bool approved);\n\n    Root public root;\n\n    constructor(Root _root) {\n        root = _root;\n    }\n\n    // A map of top level domains and their authorised owner\n    mapping(bytes32 => address) private nodeOwners;\n\n    // A map specifying which controller addresses TLD owners are allowed to use.\n    mapping(address => bool) private registryControllers;\n\n    // A map specifying which controller addresses a specific TLD owner is allowed to use.\n    mapping(bytes32 => mapping(address => bool)) private registryNodeControllers;\n\n    modifier onlyNodeOwner(bytes32 node) {\n        require(nodeOwners[node] == msg.sender);\n        _;\n    }\n\n    modifier onlyRegistry {\n        require(root.controllers(msg.sender));\n        _;\n    }\n\n    modifier onlyRegistryControllers(bytes32 node, address controller) {\n        require(registryNodeControllers[node][controller] ||\n            registryControllers[controller], \"controller not approved by registry\");\n        _;\n    }\n\n    // Transfers ownership of a TLD to a new owner\n    // can only be called by existing node owner.\n    function transferNodeOwnership(bytes32 node, address newOwner) public onlyNodeOwner(node) {\n        require(newOwner != address(0));\n        emit NodeOwnerChanged(node, nodeOwners[node], newOwner);\n        nodeOwners[node] = newOwner;\n    }\n\n    // Gives up ownership of a TLD to a burn address. All functionality marked with onlyNodeOwner\n    // will be disabled for the specified TLD. It will also affect any contracts\n    // that rely on {ownerOfNode}. Use with extreme caution.\n    function renounceNodeOwnership(bytes32 node) public onlyNodeOwner(node) {\n        emit NodeOwnerChanged(node, nodeOwners[node], address(0));\n        nodeOwners[node] = address(0);\n    }\n\n    function ownerOfNode(bytes32 node) public view returns (address) {\n        return nodeOwners[node];\n    }\n\n    // Sets ownership of a name in the registrar. If the name\n    // is locked, only the owner can transfer ownership by\n    // calling transferNodeOwnership.\n    function setSubnodeOwner(bytes32 label, address owner) public onlyRegistry returns(bytes32) {\n        require(!root.locked(label), \"name locked\");\n        bytes32 node = keccak256(abi.encodePacked(bytes32(0), label));\n        emit NodeOwnerChanged(node, nodeOwners[node], owner);\n        nodeOwners[node] = owner;\n        return node;\n    }\n\n    // Whitelists a controller address to be used by the specified node.\n    function approveControllerForNode(bytes32 node, address controller, bool approved) external onlyRegistry {\n        registryNodeControllers[node][controller] = approved;\n        emit RegistryNodeControllersChanged(node, controller, approved);\n    }\n\n    // Whitelists a controller address to be used by any node.\n    function approveController(address controller, bool approved) external onlyRegistry {\n        registryControllers[controller] = approved;\n        emit RegistryControllersChanged(controller, approved);\n    }\n}\n"
    },
    "src/universal/UniversalRegistrar.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@ensdomains/ens-contracts/contracts/registry/ENS.sol\";\nimport \"@ensdomains/ens-contracts/contracts/registry/ENSRegistry.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IUniversalRegistrar.sol\";\nimport \"./RegistrarAccess.sol\";\n\ncontract UniversalRegistrar is ERC721, RegistrarAccess, IUniversalRegistrar, Ownable {\n    // A map of expiry times\n    mapping(uint256 => uint) expiries;\n    ENS public ens;\n\n    // ERC721 Metadata URI\n    string private metadataUri;\n\n    // A map of addresses that are authorised to register and renew\n    // names for the given top level node.\n    mapping(bytes32 => mapping(address => bool)) public controllers;\n\n    uint256 public constant GRACE_PERIOD = 90 days;\n\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\n    bytes4 constant private ERC721_ID = bytes4(\n        keccak256(\"balanceOf(address)\") ^\n        keccak256(\"ownerOf(uint256)\") ^\n        keccak256(\"approve(address,uint256)\") ^\n        keccak256(\"getApproved(uint256)\") ^\n        keccak256(\"setApprovalForAll(address,bool)\") ^\n        keccak256(\"isApprovedForAll(address,address)\") ^\n        keccak256(\"transferFrom(address,address,uint256)\") ^\n        keccak256(\"safeTransferFrom(address,address,uint256)\") ^\n        keccak256(\"safeTransferFrom(address,address,uint256,bytes)\")\n    );\n    bytes4 constant private RECLAIM_ID = bytes4(keccak256(\"reclaim(bytes32,uint256,address)\"));\n\n    /**\n     * v2.1.3 version of _isApprovedOrOwner which calls ownerOf(tokenId) and takes grace period into consideration instead of ERC721.ownerOf(tokenId);\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.1.3/contracts/token/ERC721/ERC721.sol#L187\n     * @dev Returns whether the given spender can transfer a given token ID\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     *    is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view override returns (bool) {\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    constructor(ENS _ens, Root _root) ERC721(\"Impervious Registry\", \"IR\") RegistrarAccess(_root) {\n        ens = _ens;\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return metadataUri;\n    }\n\n    modifier live(bytes32 node) {\n        require(ens.owner(node) == address(this));\n        _;\n    }\n\n    modifier onlyController(bytes32 node) {\n        require(controllers[node][msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID. Names become unowned\n     *      when their registration expires.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view override(IERC721, ERC721) returns (address) {\n        require(expiries[tokenId] > block.timestamp);\n        return super.ownerOf(tokenId);\n    }\n\n    // Change metadata uri\n    function setUri(string memory _uri) external onlyOwner {\n        metadataUri = _uri;\n    }\n\n    // Authorises a controller, who can register and renew domains.\n    // can only be called by the node owner.\n    function addController(\n        bytes32 node,\n        address controller\n    ) external override onlyNodeOwner(node) onlyRegistryControllers(node, controller) {\n        controllers[node][controller] = true;\n        emit ControllerAdded(node, controller);\n    }\n\n    // Revoke controller permission for an address.\n    // can only be called by the node owner.\n    function removeController(bytes32 node, address controller) external override onlyNodeOwner(node) {\n        controllers[node][controller] = false;\n        emit ControllerRemoved(node, controller);\n    }\n\n    // Set the resolver for the TLD this registrar manages.\n    // can only be called by the node owner.\n    function setResolver(bytes32 node, address resolver) external override onlyNodeOwner(node) {\n        ens.setResolver(node, resolver);\n    }\n\n    // Returns the expiration timestamp of the specified id.\n    function nameExpires(uint256 id) external view override returns (uint) {\n        return expiries[id];\n    }\n\n    // Returns true iff the specified name is available for registration.\n    function available(uint256 id) public view override returns (bool) {\n        // Not available if it's registered here or in its grace period.\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\n    }\n\n    /**\n     * @dev Register a name.\n     * @param node The node hash.\n     * @param label The token ID (keccak256 of the label).\n     * @param owner The address that should own the registration.\n     * @param duration Duration in seconds for the registration.\n     */\n    function register(bytes32 node, bytes32 label, address owner, uint duration) external override returns (uint) {\n        return _register(node, label, owner, duration, true);\n    }\n\n    /**\n     * @dev Register a name, without modifying the registry.\n     * @param node The node hash.\n     * @param label The token ID (keccak256 of the label).\n     * @param owner The address that should own the registration.\n     * @param duration Duration in seconds for the registration.\n     */\n    function registerOnly(bytes32 node, bytes32 label, address owner, uint duration) external returns (uint) {\n        return _register(node, label, owner, duration, false);\n    }\n\n    function _register(bytes32 node, bytes32 label, address owner,\n        uint duration, bool updateRegistry) internal live(node) onlyController(node) returns (uint) {\n        require(block.timestamp + duration + GRACE_PERIOD > block.timestamp + GRACE_PERIOD); // Prevent future overflow\n\n        uint256 id = _tokenID(node, label);\n        require(available(id));\n\n        expiries[id] = block.timestamp + duration;\n        if (_exists(id)) {\n            // Name was previously owned, and expired\n            _burn(id);\n        }\n        _mint(owner, id);\n        if (updateRegistry) {\n            ens.setSubnodeOwner(node, label, owner);\n        }\n\n        emit NameRegistered(node, label, owner, block.timestamp + duration);\n\n        return block.timestamp + duration;\n    }\n\n    function renew(bytes32 node, bytes32 label, uint duration) external override live(node) onlyController(node) returns (uint) {\n        uint256 id = _tokenID(node, label);\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\n        require(expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD); // Prevent future overflow\n\n        expiries[id] += duration;\n        emit NameRenewed(node, label, expiries[id]);\n        return expiries[id];\n    }\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(bytes32 node, bytes32 label, address owner) external override live(node) {\n        uint256 id = _tokenID(node, label);\n        require(_isApprovedOrOwner(msg.sender, id));\n        ens.setSubnodeOwner(node, label, owner);\n    }\n\n    function supportsInterface(bytes4 interfaceID) public override(ERC721, IERC165) view returns (bool) {\n        return interfaceID == INTERFACE_META_ID ||\n        interfaceID == ERC721_ID ||\n        interfaceID == RECLAIM_ID;\n    }\n\n    function _tokenID(bytes32 node, bytes32 label) internal pure returns (uint256) {\n        return uint256(keccak256(abi.encodePacked(node, label)));\n    }\n}\n"
    },
    "src/universal_v2/Access.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\nimport \"../universal/UniversalRegistrar.sol\";\r\nimport \"./IExtensionAccess.sol\";\r\n\r\nabstract contract Access {\r\n    UniversalRegistrar public registrar;\r\n\r\n    constructor(UniversalRegistrar _registrar) {\r\n        registrar = _registrar;\r\n    }\r\n\r\n    modifier nodeOperator(bytes32 node) {\r\n        require(_isNodeOperator(node, msg.sender), \"Caller is not a node operator\");\r\n        _;\r\n    }\r\n\r\n    modifier nodeApprovedOrOwner(bytes32 node) {\r\n        require(_isNodeApprovedOrOwner(node, msg.sender), \"Caller is not a node owner nor approved by owner\");\r\n        _;\r\n    }\r\n\r\n    function isNodeOperator(bytes32 node, address operator) public view returns (bool) {\r\n        return _isNodeOperator(node, operator);\r\n    }\r\n\r\n    function isNodeApprovedOrOwner(bytes32 node, address operator) public view returns (bool) {\r\n        return _isNodeApprovedOrOwner(node, operator);\r\n    }\r\n\r\n    function _isNodeOperator(bytes32 node, address addr) internal view returns (bool) {\r\n        address owner = registrar.ownerOfNode(node);\r\n        if (!Address.isContract(owner)) {\r\n            return owner == addr;\r\n        }\r\n\r\n        try IERC165(owner).supportsInterface(type(IExtensionAccess).interfaceId) returns (bool supported) {\r\n            if (supported) {\r\n                return IExtensionAccess(owner).isApprovedOrOwner(addr, uint256(node)) ||\r\n                 IExtensionAccess(owner).getOperator(uint256(node)) == addr;\r\n            }\r\n        } catch {}\r\n\r\n        return owner == addr;\r\n    }\r\n\r\n    function _isNodeApprovedOrOwner(bytes32 node, address addr) internal view returns (bool) {\r\n        address owner = registrar.ownerOfNode(node);\r\n        if (!Address.isContract(owner)) {\r\n            return owner == addr;\r\n        }\r\n\r\n        try IERC165(owner).supportsInterface(type(IExtensionAccess).interfaceId) returns (bool supported) {\r\n            if (supported) {\r\n                return IExtensionAccess(owner).isApprovedOrOwner(addr, uint256(node));\r\n            }\r\n        } catch {}\r\n\r\n        return owner == addr;\r\n    }\r\n}\r\n"
    },
    "src/universal_v2/BaseUniversalRegistrarControllerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (finance/PaymentSplitter.sol)\r\n// Adapted for use by the registry\r\n\r\npragma solidity >=0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\nimport \"../universal/UniversalRegistrar.sol\";\r\nimport \"./IExtensionPayee.sol\";\r\n\r\n/**\r\n * @title BaseUniversalRegistrarControllerV2\r\n * @dev This contract allows to split Ether payments among an owner (a staker) and the registry.\r\n *\r\n * `BaseUniversalRegistrarControllerV2` follows a _pull payment_ model. This means that payments are not automatically\r\n * forwarded to the accounts but kept in this contract, and the actual transfer is triggered as a separate step by\r\n * calling the {releaseToOwner} and {releaseToRegistry} functions.\r\n *\r\n */\r\nabstract contract BaseUniversalRegistrarControllerV2 {\r\n    event PaymentReleased(bytes32 node, address to, uint256 amount);\r\n\r\n    // The total number of shares\r\n    uint256 private _totalShares;\r\n\r\n    // Number of shares the registry owns\r\n    uint256 private _registryShare;\r\n\r\n    // Number of shares a staker owns\r\n    uint256 private _ownerShare;\r\n\r\n    // Amount of Ether available for release to share holders.\r\n    mapping(bytes32 => uint256) private _balances;\r\n\r\n    // Total amount of Ether already released to share holders.\r\n    mapping(bytes32 => uint256) private _totalReleased;\r\n\r\n    // Amount of Ether already released to the registry.\r\n    mapping(bytes32 => uint256) private _registryReleased;\r\n\r\n    // Amount of Ether already released to the TLD owner.\r\n    mapping(bytes32 => uint256) private _ownerReleased;\r\n\r\n    UniversalRegistrar public base;\r\n\r\n    // Owner payee address for the specified TLD\r\n    function ownerPayee(bytes32 node) public view returns (address) {\r\n        address owner = base.ownerOfNode(node);\r\n\r\n        // if the owner is a contract and supports the IExtensionPayee interface, return the payee address\r\n        // to send the payment to instead.\r\n        if (Address.isContract(owner)) {\r\n            try IERC165(owner).supportsInterface(type(IExtensionPayee).interfaceId) returns (bool supported) {\r\n                if (supported) {\r\n                    return IExtensionPayee(owner).payeeOf(node);\r\n                }\r\n            } catch {}\r\n        }\r\n\r\n        return owner;\r\n    }\r\n\r\n    // Registry payee address\r\n    function registryPayee() public view returns (address) {\r\n        // get address of root owner from registrar\r\n        return base.root().owner();\r\n    }\r\n\r\n    constructor(UniversalRegistrar base_, uint256 ownerShare_, uint256 registryShare_) {\r\n        base = base_;\r\n        _ownerShare = ownerShare_;\r\n        _registryShare = registryShare_;\r\n        _totalShares = ownerShare_ + registryShare_;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total shares held by payees.\r\n     */\r\n    function totalShares() external view returns (uint256) {\r\n        return _totalShares;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the total amount of Ether already released.\r\n     */\r\n    function totalReleased(bytes32 node) external view returns (uint256) {\r\n        return _totalReleased[node];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by owner\r\n     */\r\n    function ownerShare() external view returns (uint256) {\r\n        return _ownerShare;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of shares held by registry.\r\n     */\r\n    function registryShare() external view returns (uint256) {\r\n        return _registryShare;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to the owner\r\n     */\r\n    function ownerReleased(bytes32 node) external view returns (uint256) {\r\n        return _ownerReleased[node];\r\n    }\r\n\r\n    /**\r\n     * @dev Getter for the amount of Ether already released to the registry.\r\n     */\r\n    function registryReleased(bytes32 node) external view returns (uint256) {\r\n        return _registryReleased[node];\r\n    }\r\n\r\n    function balance(bytes32 node) external view returns (uint256) {\r\n        return _balances[node];\r\n    }\r\n\r\n    function ownerBalance(bytes32 node) public view returns (uint256) {\r\n        uint256 totalReceived = _balances[node] + _totalReleased[node];\r\n        return _pendingPayment(_ownerShare, totalReceived, _ownerReleased[node]);\r\n    }\r\n\r\n    function registryBalance(bytes32 node) public view returns (uint256) {\r\n        uint256 totalReceived = _balances[node] + _totalReleased[node];\r\n        return _pendingPayment(_registryShare, totalReceived, _registryReleased[node]);\r\n    }\r\n\r\n    function _addPayment(bytes32 node, uint256 amount) internal {\r\n        _balances[node] += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to the owner for the amount of Ether they are owed, according to their\r\n     * percentage of the total shares and their previous withdrawals.\r\n     */\r\n    function releaseToOwner(bytes32 node) external {\r\n        uint256 payment = ownerBalance(node);\r\n        require(payment != 0, \"owner is not due payment\");\r\n\r\n        _ownerReleased[node] += payment;\r\n        _totalReleased[node] += payment;\r\n        _balances[node] -= payment;\r\n\r\n        address owner = ownerPayee(node);\r\n        Address.sendValue(payable(owner), payment);\r\n        emit PaymentReleased(node, owner, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers a transfer to the registry owner of the amount of Ether they are owed, according to their\r\n     * percentage of the total shares and their previous withdrawals.\r\n     */\r\n    function releaseToRegistry(bytes32 node) external {\r\n        uint256 payment = registryBalance(node);\r\n        require(payment != 0, \"registry is not due payment\");\r\n\r\n        _registryReleased[node] += payment;\r\n        _totalReleased[node] += payment;\r\n        _balances[node] -= payment;\r\n\r\n        address rootOwner = registryPayee();\r\n        Address.sendValue(payable(rootOwner), payment);\r\n        emit PaymentReleased(node, rootOwner, payment);\r\n    }\r\n\r\n    /**\r\n     * @dev internal logic for computing the pending payment of an account given the token historical balances and\r\n     * already released amounts.\r\n     */\r\n    function _pendingPayment(\r\n        uint256 shares,\r\n        uint256 totalReceived,\r\n        uint256 alreadyReleased\r\n    ) private view returns (uint256) {\r\n        return (totalReceived * shares) / _totalShares - alreadyReleased;\r\n    }\r\n}\r\n"
    },
    "src/universal_v2/IExtensionAccess.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\ninterface IExtensionAccess {\r\n    function getOperator(uint256 tokenId) external view returns (address);\r\n    function getOwner(uint256 tokenId) external view returns (address);\r\n    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\r\n}\r\n"
    },
    "src/universal_v2/IExtensionPayee.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\ninterface IExtensionPayee {\r\n    function payeeOf(bytes32 node) external view returns (address);\r\n}\r\n"
    },
    "src/universal_v2/NameStore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\nimport \"../universal/UniversalRegistrar.sol\";\r\nimport \"./Access.sol\";\r\n\r\ncontract NameStore is Access {\r\n    mapping(uint256 => bytes32) public tokenToExtension;\r\n\r\n    mapping(uint256 => mapping(bytes32 => mapping(bytes32 => address))) public reservedNames;\r\n    mapping(bytes32 => uint256) public reservedNamesVersion;\r\n\r\n    mapping(bytes32 => bool) public registrationsPaused;\r\n\r\n    mapping(bytes32 => bytes) public metadata;\r\n\r\n    event NameReserved(bytes32 indexed node, string name, address recipient);\r\n    event ReservedNamesCleared(bytes32 indexed node);\r\n    event RegistrationsPauseChanged(bytes32 indexed node, bool paused);\r\n    event MetadataChanged(bytes32 indexed node);\r\n\r\n    constructor(UniversalRegistrar _registrar) Access(_registrar) {}\r\n\r\n    function parentOf(uint256 tokenId) external view returns (bytes32) {\r\n        return tokenToExtension[tokenId];\r\n    }\r\n\r\n    function adopt(bytes32 parent, bytes32 label) external {\r\n        uint256 tokenId = uint256(keccak256(abi.encodePacked(parent, label)));\r\n        tokenToExtension[tokenId] = parent;\r\n    }\r\n\r\n    function bulkAdopt(bytes32 parent, bytes32[] calldata labels) external {\r\n        for (uint i = 0; i < labels.length; i++) {\r\n            uint256 tokenId = uint256(keccak256(abi.encodePacked(parent, labels[i])));\r\n            tokenToExtension[tokenId] = parent;\r\n        }\r\n    }\r\n\r\n    function setMetadata(bytes32 node, bytes calldata _metadata) external nodeOperator(node) {\r\n        metadata[node] = _metadata;\r\n        emit MetadataChanged(node);\r\n    }\r\n\r\n    function reserved(bytes32 node, bytes32 label) external view returns (address) {\r\n        return reservedNames[reservedNamesVersion[node]][node][label];\r\n    }\r\n\r\n    function available(bytes32 node, bytes32 label) external view returns (bool) {\r\n        return reservedNames[reservedNamesVersion[node]][node][label] == address(0) && !registrationsPaused[node];\r\n    }\r\n\r\n    function pauseRegistrations(bytes32 node) external nodeOperator(node) {\r\n        registrationsPaused[node] = true;\r\n        emit RegistrationsPauseChanged(node, true);\r\n    }\r\n\r\n    function unpauseRegistrations(bytes32 node) external nodeOperator(node) {\r\n        registrationsPaused[node] = false;\r\n        emit RegistrationsPauseChanged(node, false);\r\n    }\r\n\r\n    // can be called by either the TLD owner or a controller authorised by the TLD owner.\r\n    function reserve(bytes32 node, string calldata name, address recipient) external {\r\n        require(isNodeApprovedOrOwner(node, msg.sender) ||\r\n                isNodeOperator(node, msg.sender) ||\r\n                registrar.controllers(node, msg.sender),\r\n            \"caller is not a controller, owner or operator\");\r\n        _reserve(node, name, recipient);\r\n    }\r\n\r\n    function _reserve(bytes32 node, string calldata name, address recipient) internal {\r\n        bytes32 label = keccak256(bytes(name));\r\n        reservedNames[reservedNamesVersion[node]][node][label] = recipient;\r\n        emit NameReserved(node, name, recipient);\r\n    }\r\n\r\n    function bulkReserve(bytes32 node, string[] calldata names, address[] calldata recipients) external nodeOperator(node) {\r\n        require(names.length == recipients.length, \"names and recipients must have the same length\");\r\n        for (uint i = 0; i < names.length; i++) {\r\n            bytes32 label = keccak256(bytes(names[i]));\r\n            reservedNames[reservedNamesVersion[node]][node][label] = recipients[i];\r\n            emit NameReserved(node, names[i], recipients[i]);\r\n        }\r\n    }\r\n\r\n    function clearReservedNames(bytes32 node) external nodeOperator(node) {\r\n        reservedNamesVersion[node]++;\r\n        emit ReservedNamesCleared(node);\r\n    }\r\n}\r\n"
    },
    "src/universal_v2/UniversalRegistrarControllerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.4;\r\n\r\nimport \"@ensdomains/ens-contracts/contracts/resolvers/Resolver.sol\";\r\nimport \"../common/StringUtils.sol\";\r\nimport \"../common/PremiumPriceOracle.sol\";\r\nimport \"./NameStore.sol\";\r\nimport \"./BaseUniversalRegistrarControllerV2.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @dev A registrar controller for registering and renewing second level domains.\r\n */\r\ncontract UniversalRegistrarControllerV2 is Ownable, BaseUniversalRegistrarControllerV2 {\r\n    using StringUtils for *;\r\n\r\n    uint constant public MIN_REGISTRATION_DURATION = 28 days;\r\n\r\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n    bytes4 constant private COMMITMENT_CONTROLLER_ID = bytes4(\r\n        keccak256(\"rentPrice(bytes32,string,uint256)\") ^\r\n        keccak256(\"available(bytes32,string)\") ^\r\n        keccak256(\"makeCommitment(bytes32,string,address,bytes32)\") ^\r\n        keccak256(\"commit(bytes32)\") ^\r\n        keccak256(\"register(bytes32,string,address,uint256,bytes32)\") ^\r\n        keccak256(\"renew(bytes32,string,uint256)\")\r\n    );\r\n\r\n    bytes4 constant private COMMITMENT_WITH_CONFIG_CONTROLLER_ID = bytes4(\r\n        keccak256(\"registerWithConfig(bytes32,string,address,uint256,bytes32,address,address)\") ^\r\n        keccak256(\"makeCommitmentWithConfig(bytes32,string,address,bytes32,address,address)\")\r\n    );\r\n\r\n    bytes4 constant private RESERVED_NAMES_CONTROLLER_ID = bytes4(\r\n        keccak256(\"registerReservedWithConfig(bytes32,string,address,uint256,address,address)\") ^\r\n        keccak256(\"availabilityInfo(bytes32,string)\")\r\n    );\r\n\r\n    PremiumPriceOracle prices;\r\n    NameStore store;\r\n    uint public minCommitmentAge;\r\n    uint public maxCommitmentAge;\r\n\r\n    mapping(bytes32 => uint) public commitments;\r\n\r\n    event NameRegistered(bytes32 indexed tld, string name, bytes32 indexed label, address indexed owner, uint cost, uint expires);\r\n    event NameRenewed(bytes32 indexed tld, string name, bytes32 indexed label, uint cost, uint expires);\r\n    event NewPriceOracle(address indexed oracle);\r\n\r\n    constructor(\r\n        UniversalRegistrar base_,\r\n        PremiumPriceOracle prices_,\r\n        NameStore store_,\r\n        uint minCommitmentAge_,\r\n        uint maxCommitmentAge_,\r\n        uint256 ownerShare_,\r\n        uint256 registryShare_\r\n    ) BaseUniversalRegistrarControllerV2(base_, ownerShare_, registryShare_) {\r\n        require(maxCommitmentAge_ > minCommitmentAge_);\r\n\r\n        store = store_;\r\n        prices = prices_;\r\n        minCommitmentAge = minCommitmentAge_;\r\n        maxCommitmentAge = maxCommitmentAge_;\r\n    }\r\n\r\n    function _tokenID(bytes32 node, bytes32 label) internal pure returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(node, label)));\r\n    }\r\n\r\n    function rentPrice(bytes32 node, string memory name, uint duration) view public returns (uint) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return prices.price(node, name, base.nameExpires(_tokenID(node, label)), duration);\r\n    }\r\n\r\n    function valid(string memory name) public pure returns (bool) {\r\n        return name.strlen() >= 1;\r\n    }\r\n\r\n    function available(bytes32 node, string memory name) public view returns (bool) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return _available(node, name, label) && store.available(node, label);\r\n    }\r\n\r\n    function _available(bytes32 node, string memory name, bytes32 label) internal view returns(bool) {\r\n        return valid(name) && base.available(_tokenID(node, label));\r\n    }\r\n\r\n    // 0 - unavailable, 1 - available, 2 - reserved, 3 - paused\r\n    function availabilityInfo(bytes32 node, string memory name) public view returns (uint8, address) {\r\n        bytes32 label = keccak256(bytes(name));\r\n\r\n        if (!valid(name) ||\r\n            !base.available(_tokenID(node, label))) {\r\n            return (0, address(0));\r\n        }\r\n        if (store.reserved(node, label) != address(0)) {\r\n            return (2, store.reserved(node, label));\r\n        }\r\n        if (store.registrationsPaused(node)) {\r\n            return (3, address(0));\r\n        }\r\n        return (1, address(0));\r\n    }\r\n\r\n    function makeCommitment(bytes32 node, string memory name, address owner, bytes32 secret) pure public returns (bytes32) {\r\n        return makeCommitmentWithConfig(node, name, owner, secret, address(0), address(0));\r\n    }\r\n\r\n    function makeCommitmentWithConfig(bytes32 node, string memory name,\r\n        address owner, bytes32 secret, address resolver, address addr) pure public returns (bytes32) {\r\n        bytes32 label = keccak256(bytes(name));\r\n        return _makeCommitmentWithConfig(node, label, owner, secret, resolver, addr);\r\n    }\r\n\r\n    function _makeCommitmentWithConfig(bytes32 node, bytes32 label,\r\n        address owner, bytes32 secret, address resolver, address addr) pure internal returns (bytes32) {\r\n        if (resolver == address(0) && addr == address(0)) {\r\n            return keccak256(abi.encodePacked(node, label, owner, secret));\r\n        }\r\n        require(resolver != address(0));\r\n        return keccak256(abi.encodePacked(node, label, owner, resolver, addr, secret));\r\n    }\r\n\r\n    function commit(bytes32 commitment) public {\r\n        require(commitments[commitment] + maxCommitmentAge < block.timestamp);\r\n        commitments[commitment] = block.timestamp;\r\n    }\r\n\r\n    function register(bytes32 node, string calldata name, address owner, uint duration, bytes32 secret) external payable {\r\n        registerWithConfig(node, name, owner, duration, secret, address(0), address(0));\r\n    }\r\n\r\n    function registerWithConfig(bytes32 node, string memory name, address owner,\r\n        uint duration, bytes32 secret, address resolver, address addr) public payable {\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint cost = _consumeCommitment\r\n        (\r\n            node,\r\n            name,\r\n            label,\r\n            duration,\r\n            _makeCommitmentWithConfig(node, label, owner, secret, resolver, addr)\r\n        );\r\n\r\n        store.adopt(node, label);\r\n\r\n        uint expires;\r\n        if (resolver != address(0)) {\r\n            // Set this contract as the (temporary) owner, giving it\r\n            // permission to set up the resolver.\r\n            expires = base.register(node, label, address(this), duration);\r\n\r\n            // The nodehash of this label\r\n            bytes32 nodehash = keccak256(abi.encodePacked(node, label));\r\n\r\n            // Set the resolver\r\n            base.ens().setResolver(nodehash, resolver);\r\n\r\n            // Configure the resolver\r\n            if (addr != address(0)) {\r\n                Resolver(resolver).setAddr(nodehash, addr);\r\n            }\r\n\r\n            // Now transfer full ownership to the expeceted owner\r\n            base.reclaim(node, label, owner);\r\n            base.transferFrom(address(this), owner, uint256(nodehash));\r\n        } else {\r\n            require(addr == address(0));\r\n            expires = base.register(node, label, owner, duration);\r\n        }\r\n\r\n        // Record revenue generated by this node\r\n        _addPayment(node, cost);\r\n\r\n        emit NameRegistered(node, name, label, owner, cost, expires);\r\n\r\n        // Refund any extra payment\r\n        if (msg.value > cost) {\r\n            payable(msg.sender).transfer(msg.value - cost);\r\n        }\r\n    }\r\n\r\n    function registerReservedWithConfig(bytes32 node, string memory name, address owner,\r\n        uint duration, address resolver, address addr) public payable {\r\n        bytes32 label = keccak256(bytes(name));\r\n        require(_available(node, name, label) && !store.registrationsPaused(node));\r\n        require(store.reserved(node, label) == msg.sender, \"unauthorised to register reserved name\");\r\n\r\n        uint cost = rentPrice(node, name, duration);\r\n        require(duration >= MIN_REGISTRATION_DURATION);\r\n        require(msg.value >= cost);\r\n\r\n        store.adopt(node, label);\r\n\r\n        // address is no longer reserved once registered\r\n        store.reserve(node, name, address(0));\r\n\r\n        uint expires;\r\n        if (resolver != address(0)) {\r\n            // Set this contract as the (temporary) owner, giving it\r\n            // permission to set up the resolver.\r\n            expires = base.register(node, label, address(this), duration);\r\n\r\n            // The nodehash of this label\r\n            bytes32 nodehash = keccak256(abi.encodePacked(node, label));\r\n\r\n            // Set the resolver\r\n            base.ens().setResolver(nodehash, resolver);\r\n\r\n            // Configure the resolver\r\n            if (addr != address(0)) {\r\n                Resolver(resolver).setAddr(nodehash, addr);\r\n            }\r\n\r\n            // Now transfer full ownership to the expeceted owner\r\n            base.reclaim(node, label, owner);\r\n            base.transferFrom(address(this), owner, uint256(nodehash));\r\n        } else {\r\n            require(addr == address(0));\r\n            expires = base.register(node, label, owner, duration);\r\n        }\r\n\r\n        // Record revenue generated by this node\r\n        _addPayment(node, cost);\r\n\r\n        emit NameRegistered(node, name, label, owner, cost, expires);\r\n\r\n        // Refund any extra payment\r\n        if (msg.value > cost) {\r\n            payable(msg.sender).transfer(msg.value - cost);\r\n        }\r\n    }\r\n\r\n    function renew(bytes32 node, string calldata name, uint duration) external payable {\r\n        uint cost = rentPrice(node, name, duration);\r\n        require(msg.value >= cost);\r\n\r\n        bytes32 label = keccak256(bytes(name));\r\n        uint expires = base.renew(node, label, duration);\r\n\r\n        // Record revenue generated by this node\r\n        _addPayment(node, cost);\r\n\r\n        if (msg.value > cost) {\r\n            payable(msg.sender).transfer(msg.value - cost);\r\n        }\r\n\r\n        emit NameRenewed(node, name, label, cost, expires);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external pure returns (bool) {\r\n        return interfaceID == INTERFACE_META_ID ||\r\n        interfaceID == COMMITMENT_CONTROLLER_ID ||\r\n        interfaceID == COMMITMENT_WITH_CONFIG_CONTROLLER_ID ||\r\n        interfaceID == RESERVED_NAMES_CONTROLLER_ID;\r\n    }\r\n\r\n    function _consumeCommitment(bytes32 node, string memory name, bytes32 label, uint duration, bytes32 commitment) internal returns (uint256) {\r\n        // Require a valid commitment\r\n        require(commitments[commitment] + minCommitmentAge <= block.timestamp);\r\n\r\n        // If the commitment is too old, or the name is registered, stop\r\n        require(commitments[commitment] + maxCommitmentAge > block.timestamp);\r\n        require(_available(node, name, label) && store.available(node, label));\r\n\r\n        delete (commitments[commitment]);\r\n\r\n        uint cost = rentPrice(node, name, duration);\r\n        require(duration >= MIN_REGISTRATION_DURATION);\r\n        require(msg.value >= cost);\r\n\r\n        return cost;\r\n    }\r\n}\r\n"
    }
  }
}}