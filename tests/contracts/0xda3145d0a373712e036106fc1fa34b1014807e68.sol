{"IERC20.sol":{"content":"pragma solidity \u003e=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"},"Ownable.sol":{"content":"pragma solidity  \u003e0.5.0;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}"},"SafeMath.sol":{"content":"pragma solidity \u003e=0.5.16;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) \u003e= x, \u0027ds-math-add-overflow\u0027);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) \u003c= x, \u0027ds-math-sub-underflow\u0027);\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \u0027ds-math-mul-overflow\u0027);\n    }\n}\n"},"SwapXGovernToken.sol":{"content":"pragma solidity ^0.5.16;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\nimport \"./Ownable.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract SwapXGovernToken is Ownable, IERC20{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003e uint256) internal _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    uint256 internal _maxSupply;\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    mapping(address =\u003e bool) internal issuer;\r\n\r\n    modifier onlyIssuer() {\r\n        require(issuer[msg.sender], \"The caller does not have issuer role privileges\");\r\n        _;\r\n    }\r\n\r\n    constructor (string memory name, string memory sym, uint256 maxSupply) public {\r\n        _name = name;\r\n        _symbol = sym;\r\n        _decimals = 18;\r\n\r\n        if (maxSupply != 0) {\r\n            _maxSupply = maxSupply;\r\n        }\r\n\r\n        owner = msg.sender;\r\n        issuer[msg.sender] = true;\r\n    }\r\n\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function maxSupply() external view returns (uint256) {\r\n        return _maxSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        //        require(!frozen[sender] \u0026\u0026 !frozen[recipient] \u0026\u0026 !frozen[msg.sender], \"address frozen\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        //        require(!frozen[spender] \u0026\u0026 !frozen[msg.sender], \"address frozen\");\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        //        require(!frozen[spender] \u0026\u0026 !frozen[msg.sender], \"address frozen\");\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function issue(address account, uint256 amount) external onlyIssuer returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function redeem(address account, uint256 amount) external onlyIssuer returns (bool) {\r\n        _burn(account, amount);\r\n        return true;\r\n    }\r\n\r\n    function addIssuer(address _addr) public onlyOwner returns (bool){\r\n        require(_addr != address(0), \"address cannot be 0\");\r\n        if(issuer[_addr] == false) {\r\n            issuer[_addr] = true;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function removeIssuer(address _addr) public onlyOwner returns (bool) {\r\n        require(_addr != address(0), \"address cannot be 0\");\r\n        if(issuer[_addr] == true) {\r\n            issuer[_addr] = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n        require(_totalSupply \u003c= _maxSupply, \"ERC20: supply amount cannot over maxSupply\");\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 value) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][spender] = value;\r\n        emit Approval(_owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n"}}