{{
  "language": "Solidity",
  "sources": {
    "contracts/Bananite.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./StakingERC20.sol\";\nimport \"./Rng.sol\";\nimport \"./ChainScoutMetadata.sol\";\n\ncontract Bananite is StakingERC20 {\n    using RngLibrary for Rng;\n\n    mapping(address => uint256) public scoutCounts;\n\n    constructor() ERC20(\"Bananite\", \"BANANITE\") {}\n\n    function extensionKey() public pure override returns (string memory) {\n        return \"token\";\n    }\n\n    function calculateTokenRewardsOverTime(\n        Rng memory rn,\n        uint256 tokenId,\n        uint256 secs\n    ) public view override returns (uint256) {\n        ChainScoutMetadata memory sm = chainScouts.getChainScoutMetadata(tokenId);\n        BackAccessory c = sm.backaccessory;\n        secs *= 1 ether;\n\n        if (c == BackAccessory.SCOUT) {\n            uint256 scoutNumerator = scoutCounts[tokenIdOwners[tokenId]] >= 5\n                ? 8\n                : 7;\n            secs = secs * scoutNumerator / 2;\n        } else if (c == BackAccessory.MERCENARY) {\n            uint256 r = rn.generate(1, 10);\n            if (r <= 2) {\n                secs = (secs * 119) / 40;\n            } else if (r >= 9) {\n                secs = (secs * 21) / 5;\n            } else {\n                secs = (secs * 7) / 2;\n            }\n        } else if (c == BackAccessory.VANGUARD) {\n            uint256 n = rn.generate(140, 210);\n            secs = (secs * n) / 50;\n        } else if (c == BackAccessory.RONIN) {\n            uint256 r = rn.generate(1, 20);\n            if (r == 1) {\n                secs = secs * 3;\n            } else {\n                secs = secs * 6;\n            }\n        } else if (c == BackAccessory.MINER) {\n            uint256 r = rn.generate(1, 10);\n            if (r == 1) {\n                secs = secs * 15;\n            } else {\n                secs = (secs * 15) / 2;\n            }\n        } else if (c == BackAccessory.PATHFINDER) {\n            uint256 r = rn.generate(390, 975);\n            secs = (secs * r) / 100;\n        } else if (c == BackAccessory.ENCHANTER) {\n            uint256 r = rn.generate(90, 140);\n            secs = (secs * r) / 20;\n        } else {\n            uint256 r = rn.generate(1, 10);\n            if (r == 1) {\n                secs = secs * 2;\n            } else {\n                secs = secs * 10;\n            }\n        }\n\n        return secs / 1 days;\n    }\n\n    function stake(uint256[] calldata tokenIds) public override {\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            ChainScoutMetadata memory md = chainScouts.getChainScoutMetadata(\n                tokenIds[i]\n            );\n            if (md.backaccessory == BackAccessory.SCOUT) {\n                scoutCounts[chainScouts.ownerOf(tokenIds[i])]++;\n            }\n        }\n        super.stake(tokenIds);\n    }\n\n    function unstake(uint256[] calldata tokenIds) public override {\n        super.unstake(tokenIds);\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            ChainScoutMetadata memory md = chainScouts.getChainScoutMetadata(\n                tokenIds[i]\n            );\n            if (md.backaccessory == BackAccessory.SCOUT) {\n                scoutCounts[chainScouts.ownerOf(tokenIds[i])]--;\n            }\n        }\n    }\n}\n"
    },
    "contracts/StakingERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ChainScoutsExtension.sol\";\nimport \"./IUtilityERC20.sol\";\nimport \"./ChainScoutMetadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"./Rng.sol\";\n\nabstract contract StakingERC20 is\n    ChainScoutsExtension,\n    IUtilityERC20,\n    ERC20Burnable\n{\n    Rng internal rng = RngLibrary.newRng();\n\n    mapping(uint256 => uint256) public lastClaimTime;\n    mapping(uint256 => address) public tokenIdOwners;\n    mapping(address => mapping(uint256 => uint256)) public ownerTokenIds;\n    mapping(address => uint256) public numberTokensStaked;\n\n    function adminMint(address owner, uint256 amountWei)\n        external\n        override\n        onlyAdmin\n    {\n        super._mint(owner, amountWei);\n    }\n\n    function adminSetTokenTimestamp(uint256 tokenId, uint256 timestamp)\n        external\n        override\n        onlyAdmin\n    {\n        lastClaimTime[tokenId] = timestamp;\n    }\n\n    function burn(address owner, uint256 amountWei) external override {\n        require(\n            chainScouts.isAdmin(msg.sender) || msg.sender == owner,\n            \"must be admin or owner\"\n        );\n        super._burn(owner, amountWei);\n    }\n\n    function calculateTokenRewards(Rng memory rn, uint256 tokenId)\n        public\n        view\n        returns (uint256 rewards)\n    {\n        rewards = calculateTokenRewardsOverTime(\n            rn,\n            tokenId,\n            block.timestamp > lastClaimTime[tokenId] &&\n                lastClaimTime[tokenId] > 0\n                ? block.timestamp - lastClaimTime[tokenId]\n                : 0\n        );\n    }\n\n    function calculateTokenRewardsOverTime(\n        Rng memory,\n        uint256,\n        uint256 secondsElapsedSinceLastClaim\n    ) public view virtual returns (uint256) {\n        return (secondsElapsedSinceLastClaim * 1 ether) / 1 days;\n    }\n\n    function claimRewards() external virtual override whenEnabled {\n        Rng memory rn = rng;\n        uint count = 0;\n\n        for (uint256 i = 0; i < numberTokensStaked[msg.sender]; ++i) {\n            uint256 tid = ownerTokenIds[msg.sender][i];\n            count += calculateTokenRewards(rn, tid);\n            lastClaimTime[tid] = block.timestamp;\n        }\n\n        if (count > 0) {\n            super._mint(msg.sender, count);\n        }\n\n        rng = rn;\n    }\n\n    function stake(uint256[] calldata tokenIds) public virtual override whenEnabled {\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            require(\n                chainScouts.canAccessToken(msg.sender, tokenId),\n                \"ChainScoutsExtension: you don't own the token\"\n            );\n            require(\n                tokenIdOwners[tokenId] == address(0),\n                \"StakingERC20: This token is already staked\"\n            );\n\n            address owner = chainScouts.ownerOf(tokenId);\n\n            lastClaimTime[tokenId] = block.timestamp;\n            tokenIdOwners[tokenId] = owner;\n            ownerTokenIds[owner][numberTokensStaked[owner]] = tokenId;\n            numberTokensStaked[owner]++;\n            chainScouts.adminTransfer(owner, address(this), tokenId);\n        }\n    }\n\n    function unstake(uint256[] calldata tokenIds) public virtual whenEnabled {\n        Rng memory rn = rng;\n\n        for (uint256 i = 0; i < tokenIds.length; ++i) {\n            uint tokenId = tokenIds[i];\n            require(\n                tokenIdOwners[tokenId] == msg.sender,\n                \"StakingERC20: You don't own this token\"\n            );\n\n            uint256 rewards = calculateTokenRewards(rn, tokenId);\n            if (rewards > 0) {\n                super._mint(msg.sender, rewards);\n            }\n\n            tokenIdOwners[tokenId] = address(0);\n            for (uint256 j = 0; j < numberTokensStaked[msg.sender]; ++j) {\n                if (ownerTokenIds[msg.sender][j] == tokenId) {\n                    uint256 lastIndex = numberTokensStaked[msg.sender] - 1;\n                    ownerTokenIds[msg.sender][j] = ownerTokenIds[msg.sender][\n                        lastIndex\n                    ];\n                    delete ownerTokenIds[msg.sender][lastIndex];\n                    break;\n                }\n            }\n            numberTokensStaked[msg.sender]--;\n            chainScouts.adminTransfer(address(this), msg.sender, tokenId);\n        }\n\n        rng = rn;\n    }\n}\n"
    },
    "contracts/Rng.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title A pseudo random number generator\n *\n * @dev This is not a true random number generator because smart contracts must be deterministic (every node a transaction goes to must produce the same result).\n *      True randomness requires an oracle which is both expensive in terms of gas and would take a critical part of the project off the chain.\n */\nstruct Rng {\n    bytes32 state;\n}\n\n/**\n * @title A library for working with the Rng struct.\n *\n * @dev Rng cannot be a contract because then anyone could manipulate it by generating random numbers.\n */\nlibrary RngLibrary {\n    /**\n     * Creates a new Rng.\n     */\n    function newRng() internal view returns (Rng memory) {\n        return Rng(getEntropy());\n    }\n\n    /**\n     * Creates a pseudo-random value from the current block miner's address and sender.\n     */\n    function getEntropy() internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(block.coinbase, msg.sender));\n    }\n\n    /**\n     * Generates a random uint256.\n     */\n    function generate(Rng memory self) internal view returns (uint256) {\n        self.state = keccak256(abi.encodePacked(getEntropy(), self.state));\n        return uint256(self.state);\n    }\n\n    /**\n     * Generates a random uint256 from min to max inclusive.\n     *\n     * @dev This function is not subject to modulo bias.\n     *      The chance that this function has to reroll is astronomically unlikely, but it can theoretically reroll forever.\n     */\n    function generate(Rng memory self, uint min, uint max) internal view returns (uint256) {\n        require(min <= max, \"min > max\");\n\n        uint delta = max - min;\n\n        if (delta == 0) {\n            return min;\n        }\n\n        return generate(self) % (delta + 1) + min;\n    }\n}\n"
    },
    "contracts/ChainScoutMetadata.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Enums.sol\";\n\nstruct KeyValuePair {\n    string key;\n    string value;\n}\n\nstruct ChainScoutMetadata {\n    Accessory accessory;\n    BackAccessory backaccessory;\n    Background background;\n    Clothing clothing;\n    Eyes eyes;\n    Fur fur;\n    Head head;\n    Mouth mouth;\n    uint24 attack;\n    uint24 defense;\n    uint24 luck;\n    uint24 speed;\n    uint24 strength;\n    uint24 intelligence;\n    uint16 level;\n}\n"
    },
    "contracts/ChainScoutsExtension.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IChainScouts.sol\";\n\nabstract contract ChainScoutsExtension {\n    IChainScouts internal chainScouts;\n    bool public enabled = true;\n\n    modifier canAccessToken(uint tokenId) {\n        require(chainScouts.canAccessToken(msg.sender, tokenId), \"ChainScoutsExtension: you don't own the token\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(chainScouts.isAdmin(msg.sender), \"ChainScoutsExtension: admins only\");\n        _;\n    }\n\n    modifier whenEnabled() {\n        require(enabled, \"ChainScoutsExtension: currently disabled\");\n        _;\n    }\n\n    function adminSetEnabled(bool e) external onlyAdmin {\n        enabled = e;\n    }\n\n    function extensionKey() public virtual view returns (string memory);\n\n    function setChainScouts(IChainScouts _contract) external {\n        require(address(0) == address(chainScouts) || chainScouts.isAdmin(msg.sender), \"ChainScoutsExtension: The Chain Scouts contract must not be set or you must be an admin\");\n        chainScouts = _contract;\n        chainScouts.adminSetExtension(extensionKey(), this);\n    }\n}\n"
    },
    "contracts/IUtilityERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IUtilityERC20 is IERC20 {\n    function adminMint(address owner, uint amountWei) external;\n\n    function adminSetTokenTimestamp(uint tokenId, uint timestamp) external;\n\n    function burn(address owner, uint amountWei) external;\n\n    function claimRewards() external;\n\n    function stake(uint[] calldata tokenId) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/IChainScouts.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IExtensibleERC721Enumerable.sol\";\nimport \"./ChainScoutsExtension.sol\";\nimport \"./ChainScoutMetadata.sol\";\n\ninterface IChainScouts is IExtensibleERC721Enumerable {\n    function adminCreateChainScout(\n        ChainScoutMetadata calldata tbd,\n        address owner\n    ) external;\n\n    function adminRemoveExtension(string calldata key) external;\n\n    function adminSetExtension(\n        string calldata key,\n        ChainScoutsExtension extension\n    ) external;\n\n    function adminSetChainScoutMetadata(\n        uint256 tokenId,\n        ChainScoutMetadata calldata tbd\n    ) external;\n\n    function getChainScoutMetadata(uint256 tokenId)\n        external\n        view\n        returns (ChainScoutMetadata memory);\n}\n"
    },
    "contracts/IExtensibleERC721Enumerable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\ninterface IExtensibleERC721Enumerable is IERC721Enumerable {\n    function isAdmin(address addr) external view returns (bool);\n\n    function addAdmin(address addr) external;\n\n    function removeAdmin(address addr) external;\n\n    function canAccessToken(address addr, uint tokenId) external view returns (bool);\n\n    function adminBurn(uint tokenId) external;\n\n    function adminTransfer(address from, address to, uint tokenId) external;\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Enums.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nenum Accessory {\n    GOLD_EARRINGS,\n    SCARS,\n    GOLDEN_CHAIN,\n    AMULET,\n    CUBAN_LINK_GOLD_CHAIN,\n    FANNY_PACK,\n    NONE\n}\n\nenum BackAccessory {\n    NETRUNNER,\n    MERCENARY,\n    RONIN,\n    ENCHANTER,\n    VANGUARD,\n    MINER,\n    PATHFINDER,\n    SCOUT\n}\n\nenum Background {\n    STARRY_PINK,\n    STARRY_YELLOW,\n    STARRY_PURPLE,\n    STARRY_GREEN,\n    NEBULA,\n    STARRY_RED,\n    STARRY_BLUE,\n    SUNSET,\n    MORNING,\n    INDIGO,\n    CITY__PURPLE,\n    CONTROL_ROOM,\n    LAB,\n    GREEN,\n    ORANGE,\n    PURPLE,\n    CITY__GREEN,\n    CITY__RED,\n    STATION,\n    BOUNTY,\n    BLUE_SKY,\n    RED_SKY,\n    GREEN_SKY\n}\n\nenum Clothing {\n    MARTIAL_SUIT,\n    AMETHYST_ARMOR,\n    SHIRT_AND_TIE,\n    THUNDERDOME_ARMOR,\n    FLEET_UNIFORM__BLUE,\n    BANANITE_SHIRT,\n    EXPLORER,\n    COSMIC_GHILLIE_SUIT__BLUE,\n    COSMIC_GHILLIE_SUIT__GOLD,\n    CYBER_JUMPSUIT,\n    ENCHANTER_ROBES,\n    HOODIE,\n    SPACESUIT,\n    MECHA_ARMOR,\n    LAB_COAT,\n    FLEET_UNIFORM__RED,\n    GOLD_ARMOR,\n    ENERGY_ARMOR__BLUE,\n    ENERGY_ARMOR__RED,\n    MISSION_SUIT__BLACK,\n    MISSION_SUIT__PURPLE,\n    COWBOY,\n    GLITCH_ARMOR,\n    NONE\n}\n\nenum Eyes {\n    SPACE_VISOR,\n    ADORABLE,\n    VETERAN,\n    SUNGLASSES,\n    WHITE_SUNGLASSES,\n    RED_EYES,\n    WINK,\n    CASUAL,\n    CLOSED,\n    DOWNCAST,\n    HAPPY,\n    BLUE_EYES,\n    HUD_GLASSES,\n    DARK_SUNGLASSES,\n    NIGHT_VISION_GOGGLES,\n    BIONIC,\n    HIVE_GOGGLES,\n    MATRIX_GLASSES,\n    GREEN_GLOW,\n    ORANGE_GLOW,\n    RED_GLOW,\n    PURPLE_GLOW,\n    BLUE_GLOW,\n    SKY_GLOW,\n    RED_LASER,\n    BLUE_LASER,\n    GOLDEN_SHADES,\n    HIPSTER_GLASSES,\n    PINCENEZ,\n    BLUE_SHADES,\n    BLIT_GLASSES,\n    NOUNS_GLASSES\n}\n\nenum Fur {\n    MAGENTA,\n    BLUE,\n    GREEN,\n    RED,\n    BLACK,\n    BROWN,\n    SILVER,\n    PURPLE,\n    PINK,\n    SEANCE,\n    TURQUOISE,\n    CRIMSON,\n    GREENYELLOW,\n    GOLD,\n    DIAMOND,\n    METALLIC\n}\n\nenum Head {\n    HALO,\n    ENERGY_FIELD,\n    BLUE_TOP_HAT,\n    RED_TOP_HAT,\n    ENERGY_CRYSTAL,\n    CROWN,\n    BANDANA,\n    BUCKET_HAT,\n    HOMBURG_HAT,\n    PROPELLER_HAT,\n    HEADBAND,\n    DORAG,\n    PURPLE_COWBOY_HAT,\n    SPACESUIT_HELMET,\n    PARTY_HAT,\n    CAP,\n    LEATHER_COWBOY_HAT,\n    CYBER_HELMET__BLUE,\n    CYBER_HELMET__RED,\n    SAMURAI_HAT,\n    NONE\n}\n\nenum Mouth {\n    SMIRK,\n    SURPRISED,\n    SMILE,\n    PIPE,\n    OPEN_SMILE,\n    NEUTRAL,\n    MASK,\n    TONGUE_OUT,\n    GOLD_GRILL,\n    DIAMOND_GRILL,\n    NAVY_RESPIRATOR,\n    RED_RESPIRATOR,\n    MAGENTA_RESPIRATOR,\n    GREEN_RESPIRATOR,\n    MEMPO,\n    VAPE,\n    PILOT_OXYGEN_MASK,\n    CIGAR,\n    BANANA,\n    CHROME_RESPIRATOR,\n    STOIC\n}\n\nlibrary Enums {\n    function toString(Accessory v) external pure returns (string memory) {\n        if (v == Accessory.GOLD_EARRINGS) {\n            return \"Gold Earrings\";\n        }\n\n        if (v == Accessory.SCARS) {\n            return \"Scars\";\n        }\n\n        if (v == Accessory.GOLDEN_CHAIN) {\n            return \"Golden Chain\";\n        }\n\n        if (v == Accessory.AMULET) {\n            return \"Amulet\";\n        }\n\n        if (v == Accessory.CUBAN_LINK_GOLD_CHAIN) {\n            return \"Cuban Link Gold Chain\";\n        }\n\n        if (v == Accessory.FANNY_PACK) {\n            return \"Fanny Pack\";\n        }\n\n        if (v == Accessory.NONE) {\n            return \"None\";\n        }\n        revert(\"invalid accessory\");\n    }\n\n    function toString(BackAccessory v) external pure returns (string memory) {\n        if (v == BackAccessory.NETRUNNER) {\n            return \"Netrunner\";\n        }\n\n        if (v == BackAccessory.MERCENARY) {\n            return \"Mercenary\";\n        }\n\n        if (v == BackAccessory.RONIN) {\n            return \"Ronin\";\n        }\n\n        if (v == BackAccessory.ENCHANTER) {\n            return \"Enchanter\";\n        }\n\n        if (v == BackAccessory.VANGUARD) {\n            return \"Vanguard\";\n        }\n\n        if (v == BackAccessory.MINER) {\n            return \"Miner\";\n        }\n\n        if (v == BackAccessory.PATHFINDER) {\n            return \"Pathfinder\";\n        }\n\n        if (v == BackAccessory.SCOUT) {\n            return \"Scout\";\n        }\n        revert(\"invalid back accessory\");\n    }\n\n    function toString(Background v) external pure returns (string memory) {\n        if (v == Background.STARRY_PINK) {\n            return \"Starry Pink\";\n        }\n\n        if (v == Background.STARRY_YELLOW) {\n            return \"Starry Yellow\";\n        }\n\n        if (v == Background.STARRY_PURPLE) {\n            return \"Starry Purple\";\n        }\n\n        if (v == Background.STARRY_GREEN) {\n            return \"Starry Green\";\n        }\n\n        if (v == Background.NEBULA) {\n            return \"Nebula\";\n        }\n\n        if (v == Background.STARRY_RED) {\n            return \"Starry Red\";\n        }\n\n        if (v == Background.STARRY_BLUE) {\n            return \"Starry Blue\";\n        }\n\n        if (v == Background.SUNSET) {\n            return \"Sunset\";\n        }\n\n        if (v == Background.MORNING) {\n            return \"Morning\";\n        }\n\n        if (v == Background.INDIGO) {\n            return \"Indigo\";\n        }\n\n        if (v == Background.CITY__PURPLE) {\n            return \"City - Purple\";\n        }\n\n        if (v == Background.CONTROL_ROOM) {\n            return \"Control Room\";\n        }\n\n        if (v == Background.LAB) {\n            return \"Lab\";\n        }\n\n        if (v == Background.GREEN) {\n            return \"Green\";\n        }\n\n        if (v == Background.ORANGE) {\n            return \"Orange\";\n        }\n\n        if (v == Background.PURPLE) {\n            return \"Purple\";\n        }\n\n        if (v == Background.CITY__GREEN) {\n            return \"City - Green\";\n        }\n\n        if (v == Background.CITY__RED) {\n            return \"City - Red\";\n        }\n\n        if (v == Background.STATION) {\n            return \"Station\";\n        }\n\n        if (v == Background.BOUNTY) {\n            return \"Bounty\";\n        }\n\n        if (v == Background.BLUE_SKY) {\n            return \"Blue Sky\";\n        }\n\n        if (v == Background.RED_SKY) {\n            return \"Red Sky\";\n        }\n\n        if (v == Background.GREEN_SKY) {\n            return \"Green Sky\";\n        }\n        revert(\"invalid background\");\n    }\n\n    function toString(Clothing v) external pure returns (string memory) {\n        if (v == Clothing.MARTIAL_SUIT) {\n            return \"Martial Suit\";\n        }\n\n        if (v == Clothing.AMETHYST_ARMOR) {\n            return \"Amethyst Armor\";\n        }\n\n        if (v == Clothing.SHIRT_AND_TIE) {\n            return \"Shirt and Tie\";\n        }\n\n        if (v == Clothing.THUNDERDOME_ARMOR) {\n            return \"Thunderdome Armor\";\n        }\n\n        if (v == Clothing.FLEET_UNIFORM__BLUE) {\n            return \"Fleet Uniform - Blue\";\n        }\n\n        if (v == Clothing.BANANITE_SHIRT) {\n            return \"Bananite Shirt\";\n        }\n\n        if (v == Clothing.EXPLORER) {\n            return \"Explorer\";\n        }\n\n        if (v == Clothing.COSMIC_GHILLIE_SUIT__BLUE) {\n            return \"Cosmic Ghillie Suit - Blue\";\n        }\n\n        if (v == Clothing.COSMIC_GHILLIE_SUIT__GOLD) {\n            return \"Cosmic Ghillie Suit - Gold\";\n        }\n\n        if (v == Clothing.CYBER_JUMPSUIT) {\n            return \"Cyber Jumpsuit\";\n        }\n\n        if (v == Clothing.ENCHANTER_ROBES) {\n            return \"Enchanter Robes\";\n        }\n\n        if (v == Clothing.HOODIE) {\n            return \"Hoodie\";\n        }\n\n        if (v == Clothing.SPACESUIT) {\n            return \"Spacesuit\";\n        }\n\n        if (v == Clothing.MECHA_ARMOR) {\n            return \"Mecha Armor\";\n        }\n\n        if (v == Clothing.LAB_COAT) {\n            return \"Lab Coat\";\n        }\n\n        if (v == Clothing.FLEET_UNIFORM__RED) {\n            return \"Fleet Uniform - Red\";\n        }\n\n        if (v == Clothing.GOLD_ARMOR) {\n            return \"Gold Armor\";\n        }\n\n        if (v == Clothing.ENERGY_ARMOR__BLUE) {\n            return \"Energy Armor - Blue\";\n        }\n\n        if (v == Clothing.ENERGY_ARMOR__RED) {\n            return \"Energy Armor - Red\";\n        }\n\n        if (v == Clothing.MISSION_SUIT__BLACK) {\n            return \"Mission Suit - Black\";\n        }\n\n        if (v == Clothing.MISSION_SUIT__PURPLE) {\n            return \"Mission Suit - Purple\";\n        }\n\n        if (v == Clothing.COWBOY) {\n            return \"Cowboy\";\n        }\n\n        if (v == Clothing.GLITCH_ARMOR) {\n            return \"Glitch Armor\";\n        }\n\n        if (v == Clothing.NONE) {\n            return \"None\";\n        }\n        revert(\"invalid clothing\");\n    }\n\n    function toString(Eyes v) external pure returns (string memory) {\n        if (v == Eyes.SPACE_VISOR) {\n            return \"Space Visor\";\n        }\n\n        if (v == Eyes.ADORABLE) {\n            return \"Adorable\";\n        }\n\n        if (v == Eyes.VETERAN) {\n            return \"Veteran\";\n        }\n\n        if (v == Eyes.SUNGLASSES) {\n            return \"Sunglasses\";\n        }\n\n        if (v == Eyes.WHITE_SUNGLASSES) {\n            return \"White Sunglasses\";\n        }\n\n        if (v == Eyes.RED_EYES) {\n            return \"Red Eyes\";\n        }\n\n        if (v == Eyes.WINK) {\n            return \"Wink\";\n        }\n\n        if (v == Eyes.CASUAL) {\n            return \"Casual\";\n        }\n\n        if (v == Eyes.CLOSED) {\n            return \"Closed\";\n        }\n\n        if (v == Eyes.DOWNCAST) {\n            return \"Downcast\";\n        }\n\n        if (v == Eyes.HAPPY) {\n            return \"Happy\";\n        }\n\n        if (v == Eyes.BLUE_EYES) {\n            return \"Blue Eyes\";\n        }\n\n        if (v == Eyes.HUD_GLASSES) {\n            return \"HUD Glasses\";\n        }\n\n        if (v == Eyes.DARK_SUNGLASSES) {\n            return \"Dark Sunglasses\";\n        }\n\n        if (v == Eyes.NIGHT_VISION_GOGGLES) {\n            return \"Night Vision Goggles\";\n        }\n\n        if (v == Eyes.BIONIC) {\n            return \"Bionic\";\n        }\n\n        if (v == Eyes.HIVE_GOGGLES) {\n            return \"Hive Goggles\";\n        }\n\n        if (v == Eyes.MATRIX_GLASSES) {\n            return \"Matrix Glasses\";\n        }\n\n        if (v == Eyes.GREEN_GLOW) {\n            return \"Green Glow\";\n        }\n\n        if (v == Eyes.ORANGE_GLOW) {\n            return \"Orange Glow\";\n        }\n\n        if (v == Eyes.RED_GLOW) {\n            return \"Red Glow\";\n        }\n\n        if (v == Eyes.PURPLE_GLOW) {\n            return \"Purple Glow\";\n        }\n\n        if (v == Eyes.BLUE_GLOW) {\n            return \"Blue Glow\";\n        }\n\n        if (v == Eyes.SKY_GLOW) {\n            return \"Sky Glow\";\n        }\n\n        if (v == Eyes.RED_LASER) {\n            return \"Red Laser\";\n        }\n\n        if (v == Eyes.BLUE_LASER) {\n            return \"Blue Laser\";\n        }\n\n        if (v == Eyes.GOLDEN_SHADES) {\n            return \"Golden Shades\";\n        }\n\n        if (v == Eyes.HIPSTER_GLASSES) {\n            return \"Hipster Glasses\";\n        }\n\n        if (v == Eyes.PINCENEZ) {\n            return \"Pince-nez\";\n        }\n\n        if (v == Eyes.BLUE_SHADES) {\n            return \"Blue Shades\";\n        }\n\n        if (v == Eyes.BLIT_GLASSES) {\n            return \"Blit GLasses\";\n        }\n\n        if (v == Eyes.NOUNS_GLASSES) {\n            return \"Nouns Glasses\";\n        }\n        revert(\"invalid eyes\");\n    }\n\n    function toString(Fur v) external pure returns (string memory) {\n        if (v == Fur.MAGENTA) {\n            return \"Magenta\";\n        }\n\n        if (v == Fur.BLUE) {\n            return \"Blue\";\n        }\n\n        if (v == Fur.GREEN) {\n            return \"Green\";\n        }\n\n        if (v == Fur.RED) {\n            return \"Red\";\n        }\n\n        if (v == Fur.BLACK) {\n            return \"Black\";\n        }\n\n        if (v == Fur.BROWN) {\n            return \"Brown\";\n        }\n\n        if (v == Fur.SILVER) {\n            return \"Silver\";\n        }\n\n        if (v == Fur.PURPLE) {\n            return \"Purple\";\n        }\n\n        if (v == Fur.PINK) {\n            return \"Pink\";\n        }\n\n        if (v == Fur.SEANCE) {\n            return \"Seance\";\n        }\n\n        if (v == Fur.TURQUOISE) {\n            return \"Turquoise\";\n        }\n\n        if (v == Fur.CRIMSON) {\n            return \"Crimson\";\n        }\n\n        if (v == Fur.GREENYELLOW) {\n            return \"Green-Yellow\";\n        }\n\n        if (v == Fur.GOLD) {\n            return \"Gold\";\n        }\n\n        if (v == Fur.DIAMOND) {\n            return \"Diamond\";\n        }\n\n        if (v == Fur.METALLIC) {\n            return \"Metallic\";\n        }\n        revert(\"invalid fur\");\n    }\n\n    function toString(Head v) external pure returns (string memory) {\n        if (v == Head.HALO) {\n            return \"Halo\";\n        }\n\n        if (v == Head.ENERGY_FIELD) {\n            return \"Energy Field\";\n        }\n\n        if (v == Head.BLUE_TOP_HAT) {\n            return \"Blue Top Hat\";\n        }\n\n        if (v == Head.RED_TOP_HAT) {\n            return \"Red Top Hat\";\n        }\n\n        if (v == Head.ENERGY_CRYSTAL) {\n            return \"Energy Crystal\";\n        }\n\n        if (v == Head.CROWN) {\n            return \"Crown\";\n        }\n\n        if (v == Head.BANDANA) {\n            return \"Bandana\";\n        }\n\n        if (v == Head.BUCKET_HAT) {\n            return \"Bucket Hat\";\n        }\n\n        if (v == Head.HOMBURG_HAT) {\n            return \"Homburg Hat\";\n        }\n\n        if (v == Head.PROPELLER_HAT) {\n            return \"Propeller Hat\";\n        }\n\n        if (v == Head.HEADBAND) {\n            return \"Headband\";\n        }\n\n        if (v == Head.DORAG) {\n            return \"Do-rag\";\n        }\n\n        if (v == Head.PURPLE_COWBOY_HAT) {\n            return \"Purple Cowboy Hat\";\n        }\n\n        if (v == Head.SPACESUIT_HELMET) {\n            return \"Spacesuit Helmet\";\n        }\n\n        if (v == Head.PARTY_HAT) {\n            return \"Party Hat\";\n        }\n\n        if (v == Head.CAP) {\n            return \"Cap\";\n        }\n\n        if (v == Head.LEATHER_COWBOY_HAT) {\n            return \"Leather Cowboy Hat\";\n        }\n\n        if (v == Head.CYBER_HELMET__BLUE) {\n            return \"Cyber Helmet - Blue\";\n        }\n\n        if (v == Head.CYBER_HELMET__RED) {\n            return \"Cyber Helmet - Red\";\n        }\n\n        if (v == Head.SAMURAI_HAT) {\n            return \"Samurai Hat\";\n        }\n\n        if (v == Head.NONE) {\n            return \"None\";\n        }\n        revert(\"invalid head\");\n    }\n\n    function toString(Mouth v) external pure returns (string memory) {\n        if (v == Mouth.SMIRK) {\n            return \"Smirk\";\n        }\n\n        if (v == Mouth.SURPRISED) {\n            return \"Surprised\";\n        }\n\n        if (v == Mouth.SMILE) {\n            return \"Smile\";\n        }\n\n        if (v == Mouth.PIPE) {\n            return \"Pipe\";\n        }\n\n        if (v == Mouth.OPEN_SMILE) {\n            return \"Open Smile\";\n        }\n\n        if (v == Mouth.NEUTRAL) {\n            return \"Neutral\";\n        }\n\n        if (v == Mouth.MASK) {\n            return \"Mask\";\n        }\n\n        if (v == Mouth.TONGUE_OUT) {\n            return \"Tongue Out\";\n        }\n\n        if (v == Mouth.GOLD_GRILL) {\n            return \"Gold Grill\";\n        }\n\n        if (v == Mouth.DIAMOND_GRILL) {\n            return \"Diamond Grill\";\n        }\n\n        if (v == Mouth.NAVY_RESPIRATOR) {\n            return \"Navy Respirator\";\n        }\n\n        if (v == Mouth.RED_RESPIRATOR) {\n            return \"Red Respirator\";\n        }\n\n        if (v == Mouth.MAGENTA_RESPIRATOR) {\n            return \"Magenta Respirator\";\n        }\n\n        if (v == Mouth.GREEN_RESPIRATOR) {\n            return \"Green Respirator\";\n        }\n\n        if (v == Mouth.MEMPO) {\n            return \"Mempo\";\n        }\n\n        if (v == Mouth.VAPE) {\n            return \"Vape\";\n        }\n\n        if (v == Mouth.PILOT_OXYGEN_MASK) {\n            return \"Pilot Oxygen Mask\";\n        }\n\n        if (v == Mouth.CIGAR) {\n            return \"Cigar\";\n        }\n\n        if (v == Mouth.BANANA) {\n            return \"Banana\";\n        }\n\n        if (v == Mouth.CHROME_RESPIRATOR) {\n            return \"Chrome Respirator\";\n        }\n\n        if (v == Mouth.STOIC) {\n            return \"Stoic\";\n        }\n        revert(\"invalid mouth\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}