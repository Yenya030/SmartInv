{{
  "language": "Solidity",
  "sources": {
    "contracts/TheChinaNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"./ERC721A.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n\ncontract TheChinaNFT is ERC721A, Ownable {\n\tusing Strings for uint256;\n\n\tstring private _uriPrefix;\n\tstring private _uriSuffix;\n\n\tuint256 public maxSupply;\n\tuint256 public presaleSupply;\n\tuint256 public maxMintAmountPerAddress;\n\tuint256 public maxMintAmountPerAddressForVip;\n\n\tbytes32 private _presaleMerkleRoot;\n\tbytes32 private _vipAddressesMerkleRoot;\n\n\tenum SaleState { PAUSED, PRESALE, PUBLIC_SALE }\n\n\tmapping(address => uint256) public helpers;\n\n\tstring private contractMetadataURI;\n\n\tSaleState public saleState;\n\n\tevent SaleStateChanged(SaleState indexed oldSaleState, SaleState indexed newSaleState);\n\tevent UriPrefixUpdated(string indexed oldURIprefix, string indexed newURIprefix);\n\tevent UriSuffixUpdated(string indexed oldURIsuffix, string indexed newURIsuffix);\n\tevent MaxSupplyUpdated(uint256 indexed oldMaxSupply, uint256 indexed newMaxSupply);\n\tevent PresaleSupplyUpdated(uint256 indexed oldPresaleSupply, uint256 indexed newPresaleSupply);\n\tevent MaxMintAmountPerAddressUpdated(uint256 indexed oldMaxMintAmountPerAddress, uint256 indexed newMaxMintAmountPerAddress);\n\tevent MaxMintAmountPerAddressForVipUpdated(uint256 indexed oldMaxMintAmountPerAddressForVip, uint256 indexed newMaxMintAmountPerAddressForVip);\n\tevent PresaleMerkleRootUpdated(bytes32 indexed oldPresaleMerkleRoot, bytes32 indexed newPresaleMerkleRoot);\n\tevent VipAddressesMerkleRootUpdated(bytes32 indexed oldVipAddressesMerkleRoot, bytes32 indexed newVipAddressesMerkleRoot);\n\n\n\tconstructor(string memory initUriPrefix, bytes32 initPresaleMerkleRoot, bytes32 initVipAddressesMerkleRoot) ERC721A(\"The China NFT\", \"CHINA\") {\n\t\tmaxSupply = 5888;\n\t\tpresaleSupply = 5888;\n\t\tmaxMintAmountPerAddress = 1;\n\t\tmaxMintAmountPerAddressForVip = 2;\n\n\t\t_uriPrefix = initUriPrefix;\n\t\t_uriSuffix = \".json\";\n\t\t_presaleMerkleRoot = initPresaleMerkleRoot;\n\t\t_vipAddressesMerkleRoot = initVipAddressesMerkleRoot;\n\n\t\tsaleState = SaleState.PAUSED;\n\t\tcontractMetadataURI = \"ipfs://QmNXXHFw1LdBbHzBnCWCdBVDUF3mEqUMjnfra7GJ1YeRt6/metadata.json\";\n\t}\n\n\tfunction mint(uint256 amount, bytes32[] calldata vipMerkleProof) external payable {\n\t\trequire(tx.origin == _msgSender(), \"The China NFT: contract denied\");\n\t\trequire(saleState == SaleState.PUBLIC_SALE, \"The China NFT: minting is not in public sale\");\n\t\trequire(amount > 0 && _numberMinted(_msgSender()) + amount <= _maxMintAmount(_msgSender(), vipMerkleProof), \"The China NFT: invalid mint amount\");\n\t\trequire(_totalMinted() + amount <= maxSupply, \"The China NFT: max token supply exceeded\");\n\n\t\t_safeMint(_msgSender(), amount);\n\t}\n\n\tfunction presaleMint(uint256 amount, bytes32[] calldata vipMerkleProof, bytes32[] calldata presaleMerkleProof) external payable {\n\t\trequire(tx.origin == _msgSender(), \"The China NFT: contract denied\");\n\t\trequire(saleState == SaleState.PRESALE, \"The China NFT: minting is not in presale\");\n\t\trequire(amount > 0 && _numberMinted(_msgSender()) + amount <= _maxMintAmount(_msgSender(), vipMerkleProof), \"The China NFT: invalid mint amount\");\n\t\trequire(_merkleProof(_msgSender(), presaleMerkleProof, _presaleMerkleRoot), \"The China NFT: invalid merkle proof\");\n\n\t\tuint256 newSupply = _totalMinted() + amount;\n\n\t\trequire(newSupply <= presaleSupply, \"The China NFT: presale token supply exceeded\");\n\n\t\t_safeMint(_msgSender(), amount);\n\t}\n\n\n\tfunction helperMint() external payable {\n\t\trequire(tx.origin == _msgSender(), \"The China NFT: contract denied\");\n\t\trequire(saleState != SaleState.PAUSED, \"The China NFT: minting is paused\");\n\t\tuint256 amount = helpers[msg.sender];\n\t\trequire(_totalMinted() + amount <= maxSupply, \"The China NFT: max token supply exceeded\");\n\t\thelpers[msg.sender] = 0;\n\t\t_safeMint(_msgSender(), amount);\n\n\t}\n\n\tfunction contractURI() public view returns (string memory) {\n    return contractMetadataURI;\n  }\n\n\tfunction setContractMetadataURI(string memory _contractMetadataURI) external onlyOwner {\n\t\tcontractMetadataURI = _contractMetadataURI;\n\t}\n\n\tfunction addHelper(address _address, uint256 _amount) external onlyOwner {\n        helpers[_address] = _amount;\n    }\n\n\tfunction addMultipleHelpers(address[] calldata _addresses, uint256[] calldata _amounts) external onlyOwner {\n        require(_addresses.length <= 333,\"too many addresses\");\n\t\trequire(_addresses.length == _amounts.length, \"array sizes must match\");\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            helpers[_addresses[i]] = _amounts[i];\n        }\n    }\n\n\t function removeHelper(address _address) external onlyOwner {\n        helpers[_address] = 0;\n    }\n\n\t\tfunction isHelper(address _address) public view returns(uint256) {\n        return helpers[_address];\n    }\n\n\tfunction setSaleState(SaleState newSaleState) external onlyOwner {\n\t\temit SaleStateChanged(saleState, newSaleState);\n\n\t\tsaleState = newSaleState;\n\t}\n\n\n\tfunction tokenURI(uint256 tokenId) public view override returns(string memory) {\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n\t\tstring memory baseURI = _baseURI();\n\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString(), _uriSuffix)) : \"\";\n\t}\n\n\n\tfunction setUriPrefix(string memory newPrefix) external onlyOwner {\n\t\temit UriPrefixUpdated(_uriPrefix, newPrefix);\n\n\t\t_uriPrefix = newPrefix;\n\t}\n\n\tfunction setUriSuffix(string memory newSuffix) external onlyOwner {\n\t\temit UriSuffixUpdated(_uriSuffix, newSuffix);\n\n\t\t_uriSuffix = newSuffix;\n\t}\n\n\tfunction setMaxSupply(uint256 newMaxSupply) external onlyOwner {\n\t\trequire(newMaxSupply > _totalMinted() && newMaxSupply > presaleSupply, \"The China NFT: invalid amount\");\n\n\t\temit MaxSupplyUpdated(maxSupply, newMaxSupply);\n\n\t\tmaxSupply = newMaxSupply;\n\t}\n\n\tfunction setPresaleSupply(uint256 newPresaleSupply) external onlyOwner {\n\t\trequire(newPresaleSupply > _totalMinted() && newPresaleSupply < maxSupply, \"The China NFT: invalid amount\");\n\n\t\temit PresaleSupplyUpdated(presaleSupply, newPresaleSupply);\n\n\t\tpresaleSupply = newPresaleSupply;\n\t}\n\n\tfunction setMaxMintAmountPerAddress(uint256 newMaxMintAmountPerAddress) external onlyOwner {\n\t\temit MaxMintAmountPerAddressUpdated(maxMintAmountPerAddress, newMaxMintAmountPerAddress);\n\n\t\tmaxMintAmountPerAddress = newMaxMintAmountPerAddress;\n\t}\n\n\tfunction setMaxMintAmountPerAddressForVip(uint256 newMaxMintAmountPerAddressForVip) external onlyOwner {\n\t\temit MaxMintAmountPerAddressForVipUpdated(maxMintAmountPerAddressForVip, newMaxMintAmountPerAddressForVip);\n\n\t\tmaxMintAmountPerAddressForVip = newMaxMintAmountPerAddressForVip;\n\t}\n\n\tfunction setPresaleMerkleRoot(bytes32 newPresaleMerkleRoot) external onlyOwner {\n\t\temit PresaleMerkleRootUpdated(_presaleMerkleRoot, newPresaleMerkleRoot);\n\n\t\t_presaleMerkleRoot = newPresaleMerkleRoot;\n\t}\n\n\tfunction setVipAddressesMerkleRoot(bytes32 newVipAddressesMerkleRoot) external onlyOwner {\n\t\temit VipAddressesMerkleRootUpdated(_vipAddressesMerkleRoot, newVipAddressesMerkleRoot);\n\n\t\t_vipAddressesMerkleRoot = newVipAddressesMerkleRoot;\n\t}\n\n\n\tfunction _baseURI() internal view override returns(string memory) {\n\t\treturn _uriPrefix;\n\t}\n\n\tfunction _startTokenId() internal pure override returns(uint256) {\n\t\treturn 1;\n\t}\n\n\tfunction _maxMintAmount(address account, bytes32[] calldata merkleProof) internal view returns(uint256) {\n\t\tbool isVip = _merkleProof(account, merkleProof, _vipAddressesMerkleRoot);\n\n\t\treturn isVip ? maxMintAmountPerAddressForVip : maxMintAmountPerAddress;\n\t}\n\n\tfunction _merkleProof(address account, bytes32[] calldata merkleProof, bytes32 merkleRoot) internal pure returns(bool) {\n\t\tbytes32 leaf = keccak256(abi.encodePacked(account));\n\t\tbool verified = MerkleProof.verify(merkleProof, merkleRoot, leaf);\n\n\t\treturn verified;\n\t}\n}\n"
    },
    "contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n\tusing Address for address;\n\tusing Strings for uint256;\n\n\t// Compiler will pack this into a single 256bit word.\n\tstruct TokenOwnership {\n\t\t// The address of the owner.\n\t\taddress addr;\n\t\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\n\t\tuint64 startTimestamp;\n\t\t// Whether the token has been burned.\n\t\tbool burned;\n\t}\n\n\t// Compiler will pack this into a single 256bit word.\n\tstruct AddressData {\n\t\t// Realistically, 2**64-1 is more than enough.\n\t\tuint64 balance;\n\t\t// Keeps track of mint count with minimal overhead for tokenomics.\n\t\tuint64 numberMinted;\n\t\t// Keeps track of burn count with minimal overhead for tokenomics.\n\t\tuint64 numberBurned;\n\t\t// For miscellaneous variable(s) pertaining to the address\n\t\t// (e.g. number of whitelist mint slots used).\n\t\t// If there are multiple variables, please pack them into a uint64.\n\t\tuint64 aux;\n\t}\n\n\t// The tokenId of the next token to be minted.\n\tuint256 internal _currentIndex;\n\n\t// The number of tokens burned.\n\tuint256 internal _burnCounter;\n\n\t// Token name\n\tstring private _name;\n\n\t// Token symbol\n\tstring private _symbol;\n\n\t// Mapping from token ID to ownership details\n\t// An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n\tmapping(uint256 => TokenOwnership) internal _ownerships;\n\n\t// Mapping owner address to address data\n\tmapping(address => AddressData) private _addressData;\n\n\t// Mapping from token ID to approved address\n\tmapping(uint256 => address) private _tokenApprovals;\n\n\t// Mapping from owner to operator approvals\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\n\n\tconstructor(string memory name_, string memory symbol_) {\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\t_currentIndex = _startTokenId();\n\t}\n\n\t/**\n\t * To change the starting tokenId, please override this function.\n\t */\n\tfunction _startTokenId() internal view virtual returns (uint256) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n\t */\n\tfunction totalSupply() public view returns (uint256) {\n\t\t// Counter underflow is impossible as _burnCounter cannot be incremented\n\t\t// more than _currentIndex - _startTokenId() times\n\t\tunchecked {\n\t\t\treturn _currentIndex - _burnCounter - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the total amount of tokens minted in the contract.\n\t */\n\tfunction _totalMinted() internal view returns (uint256) {\n\t\t// Counter underflow is impossible as _currentIndex does not decrement,\n\t\t// and it is initialized to _startTokenId()\n\t\tunchecked {\n\t\t\treturn _currentIndex - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev See {IERC165-supportsInterface}.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n\t\treturn\n\t\t\tinterfaceId == type(IERC721).interfaceId ||\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-balanceOf}.\n\t */\n\tfunction balanceOf(address owner) public view override returns (uint256) {\n\t\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\n\t\treturn uint256(_addressData[owner].balance);\n\t}\n\n\t/**\n\t * Returns the number of tokens minted by `owner`.\n\t */\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\n\t\treturn uint256(_addressData[owner].numberMinted);\n\t}\n\n\t/**\n\t * Returns the number of tokens burned by or on behalf of `owner`.\n\t */\n\tfunction _numberBurned(address owner) internal view returns (uint256) {\n\t\treturn uint256(_addressData[owner].numberBurned);\n\t}\n\n\t/**\n\t * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n\t */\n\tfunction _getAux(address owner) internal view returns (uint64) {\n\t\treturn _addressData[owner].aux;\n\t}\n\n\t/**\n\t * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n\t * If there are multiple variables, please pack them into a uint64.\n\t */\n\tfunction _setAux(address owner, uint64 aux) internal {\n\t\t_addressData[owner].aux = aux;\n\t}\n\n\t/**\n\t * Gas spent here starts off proportional to the maximum mint batch size.\n\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n\t */\n\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n\t\tuint256 curr = tokenId;\n\n\t\tunchecked {\n\t\t\tif (_startTokenId() <= curr && curr < _currentIndex) {\n\t\t\t\tTokenOwnership memory ownership = _ownerships[curr];\n\t\t\t\tif (!ownership.burned) {\n\t\t\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\t\t\treturn ownership;\n\t\t\t\t\t}\n\t\t\t\t\t// Invariant:\n\t\t\t\t\t// There will always be an ownership that has an address and is not burned\n\t\t\t\t\t// before an ownership that does not have an address and is not burned.\n\t\t\t\t\t// Hence, curr will not underflow.\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tcurr--;\n\t\t\t\t\t\townership = _ownerships[curr];\n\t\t\t\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\t\t\t\treturn ownership;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trevert OwnerQueryForNonexistentToken();\n\t}\n\n\t/**\n\t * @dev See {IERC721-ownerOf}.\n\t */\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\n\t\treturn _ownershipOf(tokenId).addr;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-name}.\n\t */\n\tfunction name() public view virtual override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-symbol}.\n\t */\n\tfunction symbol() public view virtual override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-tokenURI}.\n\t */\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n\t\tstring memory baseURI = _baseURI();\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\n\t}\n\n\t/**\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n\t * by default, can be overriden in child contracts.\n\t */\n\tfunction _baseURI() internal view virtual returns (string memory) {\n\t\treturn '';\n\t}\n\n\t/**\n\t * @dev See {IERC721-approve}.\n\t */\n\tfunction approve(address to, uint256 tokenId) public override {\n\t\taddress owner = ERC721A.ownerOf(tokenId);\n\t\tif (to == owner) revert ApprovalToCurrentOwner();\n\n\t\tif (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n\t\t\trevert ApprovalCallerNotOwnerNorApproved();\n\t\t}\n\n\t\t_approve(to, tokenId, owner);\n\t}\n\n\t/**\n\t * @dev See {IERC721-getApproved}.\n\t */\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\n\t\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n\t\treturn _tokenApprovals[tokenId];\n\t}\n\n\t/**\n\t * @dev See {IERC721-setApprovalForAll}.\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\n\t\tif (operator == _msgSender()) revert ApproveToCaller();\n\n\t\t_operatorApprovals[_msgSender()][operator] = approved;\n\t\temit ApprovalForAll(_msgSender(), operator, approved);\n\t}\n\n\t/**\n\t * @dev See {IERC721-isApprovedForAll}.\n\t */\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n\t\treturn _operatorApprovals[owner][operator];\n\t}\n\n\t/**\n\t * @dev See {IERC721-transferFrom}.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\t_transfer(from, to, tokenId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\tsafeTransferFrom(from, to, tokenId, '');\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) public virtual override {\n\t\t_transfer(from, to, tokenId);\n\t\tif (to.isContract() && !_checkContractOnERC721Received(from, to, tokenId, _data)) {\n\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns whether `tokenId` exists.\n\t *\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n\t *\n\t * Tokens start existing when they are minted (`_mint`),\n\t */\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\n\t\treturn _startTokenId() <= tokenId && tokenId < _currentIndex && !_ownerships[tokenId].burned;\n\t}\n\n\tfunction _safeMint(address to, uint256 quantity) internal {\n\t\t_safeMint(to, quantity, '');\n\t}\n\n\t/**\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _safeMint(\n\t\taddress to,\n\t\tuint256 quantity,\n\t\tbytes memory _data\n\t) internal {\n\t\t_mint(to, quantity, _data, true);\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _mint(\n\t\taddress to,\n\t\tuint256 quantity,\n\t\tbytes memory _data,\n\t\tbool safe\n\t) internal {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are incredibly unrealistic.\n\t\t// balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n\t\t// updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n\t\tunchecked {\n\t\t\t_addressData[to].balance += uint64(quantity);\n\t\t\t_addressData[to].numberMinted += uint64(quantity);\n\n\t\t\t_ownerships[startTokenId].addr = to;\n\t\t\t_ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n\t\t\tuint256 updatedIndex = startTokenId;\n\t\t\tuint256 end = updatedIndex + quantity;\n\n\t\t\tif (safe && to.isContract()) {\n\t\t\t\tdo {\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex);\n\t\t\t\t\tif (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\n\t\t\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t\t\t}\n\t\t\t\t} while (updatedIndex != end);\n\t\t\t\t// Reentrancy protection\n\t\t\t\tif (_currentIndex != startTokenId) revert();\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\temit Transfer(address(0), to, updatedIndex++);\n\t\t\t\t} while (updatedIndex != end);\n\t\t\t}\n\t\t\t_currentIndex = updatedIndex;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _transfer(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) private {\n\t\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n\t\tif (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n\t\tbool isApprovedOrOwner = (_msgSender() == from ||\n\t\t\tisApprovedForAll(from, _msgSender()) ||\n\t\t\tgetApproved(tokenId) == _msgSender());\n\n\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n\t\tif (to == address(0)) revert TransferToZeroAddress();\n\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\n\n\t\t// Clear approvals from the previous owner\n\t\t_approve(address(0), tokenId, from);\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n\t\tunchecked {\n\t\t\t_addressData[from].balance -= 1;\n\t\t\t_addressData[to].balance += 1;\n\n\t\t\tTokenOwnership storage currSlot = _ownerships[tokenId];\n\t\t\tcurrSlot.addr = to;\n\t\t\tcurrSlot.startTimestamp = uint64(block.timestamp);\n\n\t\t\t// If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n\t\t\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\n\t\t\tif (nextSlot.addr == address(0)) {\n\t\t\t\t// This will suffice for checking _exists(nextTokenId),\n\t\t\t\t// as a burned slot cannot contain the zero address.\n\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\tnextSlot.addr = from;\n\t\t\t\t\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, to, tokenId);\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\n\t}\n\n\t/**\n\t * @dev This is equivalent to _burn(tokenId, false)\n\t */\n\tfunction _burn(uint256 tokenId) internal virtual {\n\t\t_burn(tokenId, false);\n\t}\n\n\t/**\n\t * @dev Destroys `tokenId`.\n\t * The approval is cleared when the token is burned.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n\t\tTokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n\t\taddress from = prevOwnership.addr;\n\n\t\tif (approvalCheck) {\n\t\t\tbool isApprovedOrOwner = (_msgSender() == from ||\n\t\t\t\tisApprovedForAll(from, _msgSender()) ||\n\t\t\t\tgetApproved(tokenId) == _msgSender());\n\n\t\t\tif (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n\t\t}\n\n\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Clear approvals from the previous owner\n\t\t_approve(address(0), tokenId, from);\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n\t\tunchecked {\n\t\t\tAddressData storage addressData = _addressData[from];\n\t\t\taddressData.balance -= 1;\n\t\t\taddressData.numberBurned += 1;\n\n\t\t\t// Keep track of who burned the token, and the timestamp of burning.\n\t\t\tTokenOwnership storage currSlot = _ownerships[tokenId];\n\t\t\tcurrSlot.addr = from;\n\t\t\tcurrSlot.startTimestamp = uint64(block.timestamp);\n\t\t\tcurrSlot.burned = true;\n\n\t\t\t// If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n\t\t\t// Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\tTokenOwnership storage nextSlot = _ownerships[nextTokenId];\n\t\t\tif (nextSlot.addr == address(0)) {\n\t\t\t\t// This will suffice for checking _exists(nextTokenId),\n\t\t\t\t// as a burned slot cannot contain the zero address.\n\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\tnextSlot.addr = from;\n\t\t\t\t\tnextSlot.startTimestamp = prevOwnership.startTimestamp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, address(0), tokenId);\n\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n\t\tunchecked {\n\t\t\t_burnCounter++;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Approve `to` to operate on `tokenId`\n\t *\n\t * Emits a {Approval} event.\n\t */\n\tfunction _approve(\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\taddress owner\n\t) private {\n\t\t_tokenApprovals[tokenId] = to;\n\t\temit Approval(owner, to, tokenId);\n\t}\n\n\t/**\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n\t *\n\t * @param from address representing the previous owner of the given token ID\n\t * @param to target address that will receive the tokens\n\t * @param tokenId uint256 ID of the token to be transferred\n\t * @param _data bytes optional data to send along with the call\n\t * @return bool whether the call correctly returned the expected magic value\n\t */\n\tfunction _checkContractOnERC721Received(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) private returns (bool) {\n\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n\t\t\treturn retval == IERC721Receiver(to).onERC721Received.selector;\n\t\t} catch (bytes memory reason) {\n\t\t\tif (reason.length == 0) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t} else {\n\t\t\t\tassembly {\n\t\t\t\t\trevert(add(32, reason), mload(reason))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n\t * And also called before burning one token.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _beforeTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n\t * minting.\n\t * And also called after one token has been burned.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` has been minted for `to`.\n\t * - When `to` is zero, `tokenId` has been burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _afterTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}