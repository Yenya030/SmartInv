{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Config.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./interfaces/IConfig.sol\";\nimport {MANAGER_ROLE, SIGNER_ROLE} from \"./Roles.sol\";\n\nbytes32 constant PERMIT_MANAGER_ROLE = keccak256(\"PERMIT_MANAGER\");\n\n/**\n * @title  Configurations for both ERC721 token and ERC20 currency.\n * @author XY3 g\n * @dev Implements token and currency management and security functions.\n */\nabstract contract Config is AccessControl, Pausable, ReentrancyGuard, IConfig {\n\n    /**\n     * @dev Admin fee receiver, can be updated by admin.\n     */\n    address public adminFeeReceiver;\n\n    /**\n     * @dev Borrow durations, can be updated by admin.\n     */\n    uint256 public override maxBorrowDuration = 365 days;\n    uint256 public override minBorrowDuration = 1 days;\n\n    /**\n     * @dev The fee percentage is taken by the contract admin's as a\n     * fee, which is from the the percentage of lender earned.\n     * Unit is hundreths of percent, like adminShare/10000.\n     */\n    uint16 public override adminShare = 25;\n    uint16 public constant HUNDRED_PERCENT = 10000;\n\n    /**\n     * @dev The permitted ERC20 currency for this contract.\n     */\n    mapping(address => bool) private erc20Permits;\n\n    /**\n     * @dev The permitted ERC721 token or collections for this contract.\n     */\n    mapping(address => bool) private erc721Permits;\n\n    /**\n     * @dev The permitted agent for this contract, index is target + selector;\n     */\n    mapping(address => mapping(bytes4 => bool)) private agentPermits;\n\n    /**\n     * @dev Address Provider\n     */\n    address private addressProvider;\n\n    /**\n     * @dev Init the contract admin.\n     * @param _admin - Initial admin of this contract and fee receiver.\n     */\n    constructor(address _admin, address _addressProvider) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setRoleAdmin(MANAGER_ROLE, DEFAULT_ADMIN_ROLE);\n        _setRoleAdmin(SIGNER_ROLE, DEFAULT_ADMIN_ROLE);\n        adminFeeReceiver = _admin;\n        addressProvider = _addressProvider;\n    }\n\n    /**\n     * @dev Sets contract to be stopped state.\n     */\n    function pause() external onlyRole(MANAGER_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Restore the contract from stopped state.\n     */\n    function unpause() external onlyRole(MANAGER_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev Update the maxBorrowDuration by manger role.\n     * @param _newMaxBorrowDuration - The new max borrow duration, measured in seconds.\n     */\n    function updateMaxBorrowDuration(\n        uint256 _newMaxBorrowDuration\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(_newMaxBorrowDuration >= minBorrowDuration, \"Invalid duration\");\n        if (maxBorrowDuration != _newMaxBorrowDuration) {\n            maxBorrowDuration = _newMaxBorrowDuration;\n            emit MaxBorrowDurationUpdated(_newMaxBorrowDuration);\n        }\n    }\n\n    /**\n     * @dev Update the minBorrowDuration by manger role.\n     * @param _newMinBorrowDuration - The new min borrow duration, measured in seconds.\n     */\n    function updateMinBorrowDuration(\n        uint256 _newMinBorrowDuration\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(_newMinBorrowDuration <= maxBorrowDuration, \"Invalid duration\");\n        if (minBorrowDuration != _newMinBorrowDuration) {\n            minBorrowDuration = _newMinBorrowDuration;\n            emit MinBorrowDurationUpdated(_newMinBorrowDuration);\n        }\n    }\n\n    /**\n     * @notice Update the adminShaer by manger role. The newAdminFee can be bigger than 10,000.\n     * @param _newAdminShare - The new admin fee measured in basis points.\n     */\n    function updateAdminShare(\n        uint16 _newAdminShare\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(_newAdminShare <= HUNDRED_PERCENT, \"basis points > 10000\");\n        if (adminShare != _newAdminShare) {\n            adminShare = _newAdminShare;\n            emit AdminFeeUpdated(_newAdminShare);\n        }\n    }\n\n    /**\n     * @dev Update the adminFeeReceiver by manger role.\n     * @param _newAdminFeeReceiver - The new admin fee receiver address.\n     */\n    function updateAdminFeeReceiver(\n        address _newAdminFeeReceiver\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(_newAdminFeeReceiver != address(0), \"Invalid receiver address\");\n        if (adminFeeReceiver != _newAdminFeeReceiver) {\n            adminFeeReceiver = _newAdminFeeReceiver;\n            emit AdminFeeReceiverUpdated(adminFeeReceiver);\n        }\n    }\n\n    /**\n     * @dev Set or remove the ERC20 currency permit by manger role.\n     * @param _erc20s - The addresses of the ERC20 currencies.\n     * @param _permits - The new statuses of the currencies.\n     */\n    function setERC20Permits(\n        address[] memory _erc20s,\n        bool[] memory _permits\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(\n            _erc20s.length == _permits.length,\n            \"address and permits length mismatch\"\n        );\n\n        for (uint256 i = 0; i < _erc20s.length; i++) {\n            _setERC20Permit(_erc20s[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @dev Set or remove the ERC721 token permit by manger role.\n     * @param _erc721s - The addresses of the ERC721 collection.\n     * @param _permits - The new statuses of the collection.\n     */\n    function setERC721Permits(\n        address[] memory _erc721s,\n        bool[] memory _permits\n    ) external override onlyRole(MANAGER_ROLE) {\n        require(\n            _erc721s.length == _permits.length,\n            \"address and permits length mismatch\"\n        );\n\n        for (uint256 i = 0; i < _erc721s.length; i++) {\n            _setERC721Permit(_erc721s[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @dev Set or remove the ERC721 token permit by manger role.\n     * @param _agents - The addresses of the ERC721 collection.\n     * @param _permits - The new statuses of the collection.\n     */\n    function setAgentPermits(\n        address[] memory _agents,\n        bytes4[] memory _selectors,\n        bool[] memory _permits\n    ) external override onlyRole(PERMIT_MANAGER_ROLE) {\n        require(\n            _agents.length == _permits.length && _selectors.length == _permits.length,\n            \"address and permits length mismatch\"\n        );\n\n        for (uint256 i = 0; i < _agents.length; i++) {\n            _setAgentPermit(_agents[i], _selectors[i], _permits[i]);\n        }\n    }\n\n    /**\n     * @dev Get the permit of the ERC20 token, public reading.\n     * @param _erc20 - The address of the ERC20 token.\n     * @return The ERC20 permit boolean value\n     */\n    function getERC20Permit(\n        address _erc20\n    ) public view override returns (bool) {\n        return erc20Permits[_erc20];\n    }\n\n    /**\n     * @dev Get the permit of the ERC721 collection, public reading.\n     * @param _erc721 - The address of the ERC721 collection.\n     * @return The ERC721 collection permit boolean value\n     */\n    function getERC721Permit(\n        address _erc721\n    ) public view override returns (bool) {\n        return erc721Permits[_erc721];\n    }\n\n    /**\n     * @dev Get the permit of agent, public reading.\n     * @param _agent - The address of the agent.\n     * @return The agent permit boolean value\n     */\n    function getAgentPermit(\n        address _agent,\n        bytes4 _selector\n    ) public view override returns (bool) {\n        return agentPermits[_agent][_selector];\n    }\n\n    function getAddressProvider()\n        public\n        view\n        override\n        returns (IAddressProvider)\n    {\n        return IAddressProvider(addressProvider);\n    }\n\n    /**\n     * @dev Permit or remove ERC20 currency.\n     * @param _erc20 - The operated ERC20 currency address.\n     * @param _permit - The currency new status, permitted or not.\n     */\n    function _setERC20Permit(address _erc20, bool _permit) internal {\n        require(_erc20 != address(0), \"erc20 is zero address\");\n\n        erc20Permits[_erc20] = _permit;\n\n        emit ERC20Permit(_erc20, _permit);\n    }\n\n    /**\n     * @dev Permit or remove ERC721 token.\n     * @param _erc721 - The operated ERC721 token address.\n     * @param _permit - The token new status, permitted or not.\n     */\n    function _setERC721Permit(address _erc721, bool _permit) internal {\n        require(_erc721 != address(0), \"erc721 is zero address\");\n\n        erc721Permits[_erc721] = _permit;\n\n        emit ERC721Permit(_erc721, _permit);\n    }\n\n    /**\n     * @dev Permit or remove ERC721 token.\n     * @param _agent - The operated ERC721 token address.\n     * @param _permit - The token new status, permitted or not.\n     */\n    function _setAgentPermit(address _agent, bytes4 _selector, bool _permit) internal {\n        require(_agent != address(0) && _selector != bytes4(0), \"agent is zero address\");\n\n        agentPermits[_agent][_selector] = _permit;\n\n        emit AgentPermit(_agent, _selector, _permit);\n    }\n}\n"
    },
    "contracts/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @title  Loan data types\n * @author XY3\n */\n\n/**\n * @dev Signature data for both lender & broker.\n * @param signer - The address of the signer.\n * @param nonce User offer nonce.\n * @param expiry  The signature expires date.\n * @param signature  The ECDSA signature, singed off-chain.\n */\nstruct Signature {\n    uint256 nonce;\n    uint256 expiry;\n    address signer;\n    bytes signature;\n}\n\n/**\n * @dev Saved the loan related data.\n * \n * @param borrowAmount - The original amount of money transferred from lender to borrower.\n * @param repayAmount - The maximum amount of money that the borrower would be required to retrieve their collateral.\n * @param nftTokenId - The ID within the Xy3 NFT.\n * @param borrowAsset - The ERC20 currency address.\n * @param loanDuration - The alive time of loan in seconds.\n * @param adminShare - The admin fee percent from paid loan.\n * @param loanStart - The block.timestamp the loan start in seconds.\n * @param nftAsset - The address of the the Xy3 NFT contract.\n * @param isCollection - The accepted offer is a collection or not.\n*/\nstruct LoanDetail {\n    uint256 borrowAmount;\n    uint256 repayAmount;\n    uint256 nftTokenId;\n    address borrowAsset;\n    uint32 loanDuration;\n    uint16 adminShare;\n    uint64 loanStart;\n    address nftAsset;\n    bool isCollection;\n}\n\n/**\n * @dev The offer made by the lender. Used as parameter on borrow.\n *\n * @param borrowAsset - The address of the ERC20 currency.\n * @param borrowAmount - The original amount of money transferred from lender to borrower.\n * @param repayAmount - The maximum amount of money that the borrower would be required to retrieve their collateral.\n * @param nftAsset - The address of the the Xy3 NFT contract.\n * @param borrowDuration - The alive time of borrow in seconds.\n * @param timestamp - For timestamp cancel\n * @param extra - Extra bytes for only signed check\n */\nstruct Offer {\n    uint256 borrowAmount;\n    uint256 repayAmount;\n    address nftAsset;\n    uint32 borrowDuration;\n    address borrowAsset;\n    uint256 timestamp;\n    bytes extra;\n}\n\n/**\n * @dev The data for borrow external call.\n *\n * @param target - The target contract address.\n * @param selector - The target called function.\n * @param data - The target function call data with parameters only.\n * @param referral - The referral code for borrower.\n *\n */\nstruct CallData {\n    address target;\n    bytes4 selector;\n    bytes data;\n    uint256 referral;\n}"
    },
    "contracts/InterceptorManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport {INTERCEPTOR_ROLE, MANAGER_ROLE} from \"./Roles.sol\";\nuint constant BORROW_QUEUE = 0;\nuint constant REPAY_QUEUE = 1;\nuint constant LIQUIDATE_QUEUE = 2;\nuint constant QUEUE_LEN = 3;\n\ninterface IInterceptor {\n    function beforeEvent(\n        uint _eventId,\n        address _nftAsset,\n        uint _tokenId\n    ) external;\n\n    function afterEvent(\n        uint _eventId,\n        address _nftAsset,\n        uint _tokenId\n    ) external;\n}\n\nabstract contract InterceptorManager is AccessControl {\n    event UpdageInterceptor(uint256 indexed queueId, address indexed nftAsset, uint256 tokenId, address interceptor, bool add);\n    event ExecuteInterceptor(uint256 indexed queueId, address indexed nftAsset, uint256 tokenId, address interceptor, bool before);\n\n    mapping(address => mapping(uint256 => address[]))[QUEUE_LEN]\n        private _interceptors;\n\n    function addInterceptor(\n        uint _queueId,\n        address _nftAsset,\n        uint _tokenId\n    ) external onlyRole(INTERCEPTOR_ROLE) {\n        require(_queueId < QUEUE_LEN, \"Invalid queueId\");\n        address interceptor = msg.sender;\n        address[] storage interceptors = _interceptors[_queueId][_nftAsset][\n            _tokenId\n        ];\n        for (uint i = 0; i < interceptors.length; i++) {\n            if (interceptors[i] == interceptor) {\n                return;\n            }\n        }\n        interceptors.push(interceptor);\n        emit UpdageInterceptor(_queueId, _nftAsset, _tokenId, interceptor, true);\n    }\n\n    function deleteInterceptor(\n        uint _queueId,\n        address _nftAsset,\n        uint _tokenId\n    ) external onlyRole(INTERCEPTOR_ROLE) {\n        address interceptor = msg.sender;\n\n        address[] storage interceptors = _interceptors[_queueId][_nftAsset][\n            _tokenId\n        ];\n\n        uint256 findIndex = 0;\n        for (; findIndex < interceptors.length; findIndex++) {\n            if (interceptors[findIndex] == interceptor) {\n                break;\n            }\n        }\n\n        if (findIndex != _interceptors.length) {\n            _deleteInterceptor(_queueId, _nftAsset, _tokenId, findIndex);\n        }\n    }\n\n    function purgeInterceptor(\n        uint256 _queueId,\n        address nftAsset,\n        uint256[] calldata tokenIds,\n        address interceptor\n    ) public onlyRole(MANAGER_ROLE) {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            address[] storage interceptors = _interceptors[_queueId][nftAsset][\n                tokenIds[i]\n            ];\n            for (\n                uint256 findIndex = 0;\n                findIndex < interceptors.length;\n                findIndex++\n            ) {\n                if (interceptors[findIndex] == interceptor) {\n                    _deleteInterceptor(\n                        _queueId,\n                        nftAsset,\n                        tokenIds[i],\n                        findIndex\n                    );\n                    break;\n                }\n            }\n        }\n    }\n\n    function getInterceptors(\n        uint _queueId,\n        address nftAsset,\n        uint256 tokenId\n    ) public view returns (address[] memory) {\n        return _interceptors[_queueId][nftAsset][tokenId];\n    }\n\n    function _deleteInterceptor(\n        uint queueId,\n        address nftAsset,\n        uint256 tokenId,\n        uint256 findIndex\n    ) internal {\n        address[] storage interceptors = _interceptors[queueId][nftAsset][\n            tokenId\n        ];\n        address findInterceptor = interceptors[findIndex];\n        uint256 lastInterceptorIndex = interceptors.length - 1;\n        // When the token to delete is the last item, the swap operation is unnecessary.\n        // Move the last interceptor to the slot of the to-delete interceptor\n        if (findIndex < lastInterceptorIndex) {\n            address lastInterceptorAddr = interceptors[lastInterceptorIndex];\n            interceptors[findIndex] = lastInterceptorAddr;\n        }\n        interceptors.pop();\n        emit UpdageInterceptor(queueId, nftAsset, tokenId, findInterceptor, false);\n    }\n\n    function executeInterceptors(\n        uint queueId,\n        bool before,\n        address nftAsset,\n        uint tokenId\n    ) internal {\n        address[] memory interceptors = _interceptors[queueId][nftAsset][\n            tokenId\n        ];\n        for (uint i = 0; i < interceptors.length; i++) {\n            if (before) {\n                IInterceptor(interceptors[i]).beforeEvent(\n                    queueId,\n                    nftAsset,\n                    tokenId\n                );\n            } else {\n                IInterceptor(interceptors[i]).afterEvent(\n                    queueId,\n                    nftAsset,\n                    tokenId\n                );\n            }\n\n            emit ExecuteInterceptor(queueId, nftAsset, tokenId, interceptors[i], before);\n        }\n    }\n\n    function beforeBorrow(address nftAsset, uint tokenId) internal {\n        executeInterceptors(BORROW_QUEUE, true, nftAsset, tokenId);\n    }\n\n    function beforeRepay(address nftAsset, uint tokenId) internal {\n        executeInterceptors(REPAY_QUEUE, true, nftAsset, tokenId);\n    }\n\n    function beforeLiquidate(address nftAsset, uint tokenId) internal {\n        executeInterceptors(LIQUIDATE_QUEUE, true, nftAsset, tokenId);\n    }\n\n    function afterBorrow(address nftAsset, uint tokenId) internal {\n        executeInterceptors(BORROW_QUEUE, false, nftAsset, tokenId);\n    }\n\n    function afterRepay(address nftAsset, uint tokenId) internal {\n        executeInterceptors(REPAY_QUEUE, false, nftAsset, tokenId);\n    }\n\n    function afterLiquidate(address nftAsset, uint tokenId) internal {\n        executeInterceptors(LIQUIDATE_QUEUE, false, nftAsset, tokenId);\n    }\n}\n"
    },
    "contracts/interfaces/IAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\nbytes32 constant ADDR_LENDER_NOTE = \"LENDER_NOTE\";\nbytes32 constant ADDR_BORROWER_NOTE = \"BORROWER_NOTE\";\nbytes32 constant ADDR_FLASH_EXEC_PERMITS = \"FLASH_EXEC_PERMITS\";\nbytes32 constant ADDR_TRANSFER_DELEGATE = \"TRANSFER_DELEGATE\";\nbytes32 constant ADDR_SERVICE_FEE = \"SERVICE_FEE\";\nbytes32 constant ADDR_XY3 = \"XY3\";\ninterface IAddressProvider {\n    function getAddress(bytes32 id) external view returns (address);\n\n    function getXY3() external view returns (address);\n\n    function getLenderNote() external view returns (address);\n\n    function getBorrowerNote() external view returns (address);\n\n    function getFlashExecPermits() external view returns (address);\n\n    function getTransferDelegate() external view returns (address);\n\n    function getServiceFee() external view returns (address);\n\n    function setAddress(bytes32 id, address newAddress) external;\n}\n"
    },
    "contracts/interfaces/IConfig.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\nimport {IAddressProvider} from \"./IAddressProvider.sol\";\n\ninterface IConfig {\n    /**\n     * @notice This event is emitted when admin fee percent changed.\n     * @param  newAdminFee - The new admin fee measured in basis points.\n     */\n    event AdminFeeUpdated(uint16 newAdminFee);\n\n    /**\n     * @notice This event is emitted when the max duration of all borrows.\n     * @param  newMaxBorrowDuration - The new max duration in seconds.\n     */\n    event MaxBorrowDurationUpdated(uint256 newMaxBorrowDuration);\n\n    /**\n     * @notice This event is emitted when the min duration of all borrows.\n     * @param  newMinBorrowDuration - The new min duration.\n     */\n    event MinBorrowDurationUpdated(uint256 newMinBorrowDuration);\n\n    /**\n     * @notice This event is emitted when the ERC20 permit is set.\n     * @param erc20Contract - Address of the ERC20 token.\n     * @param isPermitted - ERC20 permit bool value.\n     */\n    event ERC20Permit(address indexed erc20Contract, bool isPermitted);\n\n    /**\n     * @notice This event is emitted when the ERC721 permit is set.\n     * @param erc721Contract - Address of the ERC721 collection address.\n     * @param isPermitted - ERC721 permit bool value.\n     */\n    event ERC721Permit(address indexed erc721Contract, bool isPermitted);\n\n    /**\n     * @notice This event is emitted when the agent permit is set.\n     * @param agent - Address of the agent.\n     * @param isPermitted - Agent permit bool value.\n     */\n    event AgentPermit(address indexed agent, bytes4 selector, bool isPermitted);\n\n    /**\n     * @notice This event is emitted when the ERC20 approved to user.\n     * @param user - User account.\n     * @param erc20Contract - Address of the ERC20 token.\n     * @param amount - ERC20 amount.\n     */\n    event ERC20Approve(address indexed user, address indexed erc20Contract, uint256 amount);\n\n    /**\n     * @notice This event is emitted when the ERC721 permit is set.\n     * @param user - User account.\n     * @param erc721Contract - Address of the ERC721 collection address.\n     * @param isPermitted - ERC721 permit bool value.\n     */\n    event ERC721Approve(address indexed user, address indexed erc721Contract, bool isPermitted);\n\n    /**\n     * @notice This event is emitted when the admin fee receiver address is changed.\n     */\n    event AdminFeeReceiverUpdated(address);\n\n    /**\n     * @notice Get the current max allowed borrow duration.\n     */\n    function maxBorrowDuration() external view returns (uint256);\n\n    /**\n     * @notice Get the current min allowed borrow duration.\n     */\n    function minBorrowDuration() external view returns (uint256);\n\n    /**\n     * @notice Get percent of admin fee charged from lender earned.\n     */\n    function adminShare() external view returns (uint16);\n\n    /**\n     * @notice Update max borrow duration\n     * @param  _newMaxBorrowDuration - The new max duration.\n     */\n    function updateMaxBorrowDuration(uint256 _newMaxBorrowDuration)\n        external;\n\n    /**\n     * @notice Update min borrow duration\n     * @param  _newMinBorrowDuration - The new min duration.\n     */\n    function updateMinBorrowDuration(uint256 _newMinBorrowDuration)\n        external;\n\n    /**\n     * @notice Update admin fee.\n     * @param  _newAdminShare - The new admin fee.\n     */\n    function updateAdminShare(uint16 _newAdminShare) external;\n\n    /**\n     * @notice Update admin fee receiver.\n     * @param _newAdminFeeReceiver - The new admin fee receiver address.\n     */\n    function updateAdminFeeReceiver(address _newAdminFeeReceiver) external;\n\n    /**\n     * @notice Get the erc20 token permitted status.\n     * @param _erc20 - The address of the ERC20 token.\n     * @return The ERC20 permit boolean value\n     */\n    function getERC20Permit(address _erc20) external view returns (bool);\n\n    /**\n     * @notice Get the erc721 token permitted status.\n     * @param _erc721 - The address of the ERC721 collection.\n     * @return The ERC721 collection permit boolean value\n     */\n    function getERC721Permit(address _erc721) external view returns (bool);\n\n    /**\n     * @dev Get the permit of agent, public reading.\n     * @param _agent - The address of the agent.\n     * @return The agent permit boolean value\n     */\n    function getAgentPermit(address _agent, bytes4 _selector) external view returns (bool);\n\n    /**\n     * @notice Update a set of the ERC20 tokens permitted status.\n     * @param _erc20s - The addresses of the ERC20 currencies.\n     * @param _permits - The new statuses of the currencies.\n     */\n    function setERC20Permits(address[] memory _erc20s, bool[] memory _permits)\n        external;\n\n    /**\n     * @notice Update a set of the ERC721 collection permitted status.\n     * @param _erc721s - The addresses of the ERC721 collection.\n     * @param _permits - The new statuses of the collection.\n     */\n    function setERC721Permits(address[] memory _erc721s, bool[] memory _permits)\n        external;\n\n    function setAgentPermits(address[] memory _agents, bytes4[] memory _selectors, bool[] memory _permits)\n        external;\n\n    function getAddressProvider() external view returns (IAddressProvider);\n}\n"
    },
    "contracts/interfaces/IDelegateV3.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity 0.8.4;\npragma abicoder v2;\n\ninterface IDelegateV3 {\n    function erc20Transfer(\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount\n    ) external;\n    function erc721Transfer(\n        address sender,\n        address receiver,\n        address token,\n        uint256 tokenId\n    )external;\n}"
    },
    "contracts/interfaces/IFlashExecPermits.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\ninterface IFlashExecPermits {\n  event AddPermit(address indexed target, bytes4 indexed selector);\n  event RemovePermit(address indexed target, bytes4 indexed selector);\n\n  function isPermitted(address target, bytes4 selector) external returns (bool);\n  function addPermit(address target, bytes4 selector) external;\n  function removePermit(address target, bytes4 selector) external;\n}"
    },
    "contracts/interfaces/ILoanStatus.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface ILoanStatus {\n    /**\n     * @dev loan status\n     */\n    enum StatusType {\n        NOT_EXISTS,\n        NEW,\n        RESOLVED\n    }\n    \n    /**\n     * @dev load status record structure\n     */\n    struct LoanState {\n        uint64 xy3NftId;\n        StatusType status;\n    }\n\n    /**\n     * @dev get load status\n     * @param _loanId load ID\n     */\n    function getLoanState(uint32 _loanId)\n        external\n        view\n        returns (LoanState memory);\n}\n"
    },
    "contracts/interfaces/IServiceFee.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\ninterface IServiceFee {\n    function setServiceFee(\n        address _target,\n        address _sender,\n        address _nftAsset,\n        uint16 _fee\n    ) external;\n\n    function clearServiceFee(\n        address _target,\n        address _sender,\n        address _nftAsset\n    ) external;\n\n    function getServiceFee(\n        address _target,\n        address _sender,\n        address _nftAsset\n    ) external view returns (uint16);\n}\n"
    },
    "contracts/interfaces/IXY3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.4;\n\nimport \"../DataTypes.sol\";\n\ninterface IXY3 {\n    /**\n     * @dev This event is emitted when  calling acceptOffer(), need both the lender and borrower to approve their ERC721 and ERC20 contracts to XY3.\n     *\n     * @param  loanId - A unique identifier for the loan.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender.\n     * @param  nonce - nonce of the lender's offer signature\n     */\n    event LoanStarted(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint256 nonce,\n        LoanDetail loanDetail,\n        address target,\n        bytes4 selector\n    );\n\n    /**\n     * @dev This event is emitted when a borrower successfully repaid the loan.\n     *\n     * @param  loanId - A unique identifier for the loan.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender.\n     * @param  borrowAmount - The original amount of money transferred from lender to borrower.\n     * @param  nftTokenId - The ID of the borrowd.\n     * @param  repayAmount The amount of ERC20 that the borrower paid back.\n     * @param  adminFee The amount of interest paid to the contract admins.\n     * @param  nftAsset - The ERC721 contract of the NFT collateral\n     * @param  borrowAsset - The ERC20 currency token.\n     */\n    event LoanRepaid(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint256 borrowAmount,\n        uint256 nftTokenId,\n        uint256 repayAmount,\n        uint256 adminFee,\n        address nftAsset,\n        address borrowAsset\n    );\n\n    /**\n     * @dev This event is emitted when cancelByNonce called.\n     * @param  lender - The address of the lender.\n     * @param  nonce - nonce of the lender's offer signature\n     */\n    event NonceCancelled(address lender, uint256 nonce);\n\n    /**\n     * @dev This event is emitted when cancelByTimestamp called\n     * @param  lender - The address of the lender.\n     * @param timestamp - cancelled timestamp\n     */\n    event TimeStampCancelled(address lender, uint256 timestamp);\n\n    /**\n     * @dev This event is emitted when liquidates happened\n     * @param  loanId - A unique identifier for this particular loan.\n     * @param  borrower - The address of the borrower.\n     * @param  lender - The address of the lender.\n     * @param  borrowAmount - The original amount of money transferred from lender to borrower.\n     * @param  nftTokenId - The ID of the borrowd.\n     * @param  loanMaturityDate - The unix time (measured in seconds) that the loan became due and was eligible for liquidation.\n     * @param  loanLiquidationDate - The unix time (measured in seconds) that liquidation occurred.\n     * @param  nftAsset - The ERC721 contract of the NFT collateral\n     */\n    event LoanLiquidated(\n        uint32 indexed loanId,\n        address indexed borrower,\n        address indexed lender,\n        uint256 borrowAmount,\n        uint256 nftTokenId,\n        uint256 loanMaturityDate,\n        uint256 loanLiquidationDate,\n        address nftAsset\n    );\n\n    event BorrowRefferal(\n        uint32 indexed loanId,\n        address indexed borrower,\n        uint256 referral\n    );\n\n    event FlashExecute(\n        uint32 indexed loanId,\n        address nft,\n        uint256 nftTokenId,\n        address flashTarget\n    );\n\n    event ServiceFee(uint32 indexed loanId, address indexed target, uint16 serviceFeeRate, uint256 feeAmount);\n\n    /**\n     * @dev Get the load info by loadId\n     */\n    function loanDetails(\n        uint32\n    )\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            address,\n            uint32,\n            uint16,\n            uint64,\n            address,\n            bool\n        );\n\n    function loanIds(\n        address collection,\n        uint256 tokenId\n    ) external view returns (uint32);\n\n    /**\n     * @dev The borrower accept a lender's offer to create a loan.\n     *\n     * @param _offer - The offer made by the lender.\n     * @param _nftId - The ID\n     * @param _isCollectionOffer - Wether the offer is a collection offer.\n     * @param _lenderSignature - The lender's signature.\n     * @param _brokerSignature - The broker's signature.\n     * @param _extraDeal - Create a new loan by getting a NFT colleteral from external contract call.\n     * The external contract can be lending market or deal market, specially included the restricted repay of myself.\n     * But should not be the Xy3Nft.mint, though this contract maybe have the permission.\n     */\n    function borrow(\n        Offer memory _offer,\n        uint256 _nftId,\n        bool _isCollectionOffer,\n        Signature memory _lenderSignature,\n        Signature memory _brokerSignature,\n        CallData memory _extraDeal\n    ) external returns (uint32);\n\n    /**\n     * @dev A lender or a borrower to cancel all off-chain orders signed that contain this nonce.\n     * @param  _nonce - User nonce\n     */\n    function cancelByNonce(uint256 _nonce) external;\n\n    /**\n     * @dev A borrower cancel all offers with timestamp before the _timestamp parameter.\n     * @param _timestamp - cancelled timestamp\n     */\n    function cancelByTimestamp(uint256 _timestamp) external;\n\n    /**\n     * @notice Check a nonce has been used or not\n     * @param _user - The user address.\n     * @param _nonce - The order Id\n     *\n     * @return A bool for used or not.\n     */\n    function getNonceUsed(\n        address _user,\n        uint256 _nonce\n    ) external view returns (bool);\n\n    /**\n     * @dev This function can be used to view the last cancel timestamp a borrower has set.\n     * @param _user User address\n     * @return The cancel timestamp\n     */\n    function getTimestampCancelled(\n        address _user\n    ) external view returns (uint256);\n\n    /**\n     * @dev Public function for anyone to repay a loan, and return the NFT token to origin borrower.\n     * @param _loanId  The loan Id.\n     */\n    function repay(uint32 _loanId) external;\n\n    /**\n     * @dev Lender ended the load which not paid by borrow and expired.\n     * @param _loanId The loan Id.\n     */\n    function liquidate(uint32 _loanId) external;\n\n    /**\n     * @dev Allow admin to claim airdroped erc20 tokens\n     */\n    function adminClaimErc20(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @dev Allow admin to claim airdroped erc721 tokens\n     */\n\n    function adminClaimErc721(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory tokenIds\n    ) external;\n\n    /**\n     * @dev Allow admin to claim airdroped erc1155 tokens\n     */\n\n    function adminClaimErc1155(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) external;\n\n    /**\n     * @dev The amount of ERC20 currency for the loan.\n     * @param _loanId  A unique identifier for this particular loan.\n     * @return The amount of ERC20 currency.\n     */\n    function getRepayAmount(uint32 _loanId) external returns (uint256);\n}\n"
    },
    "contracts/LoanStatus.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"./Xy3Nft.sol\";\nimport \"./interfaces/ILoanStatus.sol\";\nimport \"./interfaces/IConfig.sol\";\n\n/**\n * @title  LoanStatus\n * @author XY3\n */\ncontract LoanStatus is ILoanStatus {\n\n    event UpdateStatus(\n        uint32 indexed loanId,\n        uint64 indexed xy3NftId,\n        StatusType newStatus\n    );\n\n    uint32 public totalNumLoans = 10000;\n    mapping(uint32 => LoanState) private loanStatus;\n\n    /**\n     * @dev XY3 mint a NFT to the lender as a ticket for collateral\n     * @param _lender Lender address\n     * @param _borrower Borrower address\n     */\n    function createLoan(address _lender, address _borrower) internal returns (uint32) {\n        // skip 0, loanIds start from 1\n        totalNumLoans += 1;\n\n        uint64 xy3NftId = uint64(\n            uint256(keccak256(abi.encodePacked(address(this), totalNumLoans)))\n        );\n\n        LoanState memory newLoan = LoanState({\n            status: StatusType.NEW,\n            xy3NftId: xy3NftId\n        });\n\n        (Xy3Nft borrowerNote, Xy3Nft lenderNote) = getNotes();\n        // Mint an ERC721 to the lender as the ticket for the collateral\n        lenderNote.mint(\n            _lender,\n            xy3NftId,\n            abi.encode(totalNumLoans)\n        );\n\n        // Mint an ERC721 to the borrower as the ticket for the collateral\n        borrowerNote.mint(\n            _borrower,\n            xy3NftId,\n            abi.encode(totalNumLoans)\n        );\n\n        loanStatus[totalNumLoans] = newLoan;\n        emit UpdateStatus(totalNumLoans, xy3NftId, StatusType.NEW);\n\n        return totalNumLoans;\n    }\n\n    /**\n     * @dev XY3 close the loan when load paid\n     * Update the loan status to be RESOLVED and burns Xy3Nft token.\n     * @param _loanId - Id of loan\n     */\n    function resolveLoan(uint32 _loanId) internal {\n        LoanState storage loan = loanStatus[_loanId];\n        require(loan.status == StatusType.NEW, \"Loan is not a new one\");\n\n        loan.status = StatusType.RESOLVED;\n        (Xy3Nft borrowerNote, Xy3Nft lenderNote) = getNotes();\n        lenderNote.burn(loan.xy3NftId);\n        borrowerNote.burn(loan.xy3NftId);\n\n        emit UpdateStatus(_loanId, loan.xy3NftId, StatusType.RESOLVED);\n        delete loanStatus[_loanId];\n    }\n\n    /**\n     * @dev Get loan state for a given id.\n     * @param _loanId The given load Id.\n     */\n    function getLoanState(uint32 _loanId)\n        public\n        view\n        override\n        returns (LoanState memory)\n    {\n        return loanStatus[_loanId];\n    }\n\n    function getNotes() private view returns(Xy3Nft borrowerNote, Xy3Nft lenderNote) {\n        IAddressProvider addressProvider = IConfig(address(this)).getAddressProvider();\n        borrowerNote = Xy3Nft(addressProvider.getBorrowerNote());\n        lenderNote = Xy3Nft(addressProvider.getLenderNote());\n    }\n}\n"
    },
    "contracts/Roles.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\n/**\n * @dev Role for interceptor contracts\n */\nbytes32 constant INTERCEPTOR_ROLE = keccak256(\"INTERCEPTOR\");\n/**\n * @dev Role for configration management.\n */\nbytes32 constant MANAGER_ROLE = keccak256(\"MANAGER\");\n/**\n * @dev Role for singed, used by the main contract.\n */\nbytes32 constant SIGNER_ROLE = keccak256(\"SIGNER\");\n\n/**\n * @dev Role for calling transfer delegator\n */\nbytes32 constant DELEGATION_CALLER_ROLE = keccak256(\"DELEGATION_CALLER\");\n\n/**\n * @dev Role for xy3nft minter\n */\nbytes32 constant MINTER_ROLE = keccak256(\"MINTER\");\n\n/**\n * @dev Role for those can call exchange contracts\n */\nbytes32 constant EXCHANGE_CALLER_ROLE = keccak256(\"EXCHANGE_CALLER\");\n\n/**\n * @dev Role for those can be called by FlashTrade\n */\nbytes32 constant FLASH_TRADE_CALLEE_ROLE = keccak256(\"FLASH_TRADE_CALLEE\");"
    },
    "contracts/utils/SigningUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport {Offer, Signature} from \"../DataTypes.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\n/**\n * @title  SigningUtils\n * @author XY3\n * @notice Helper functions for signature.\n */\nlibrary SigningUtils {\n    /**\n     * @dev Get the current chain ID.\n     */\n    function getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    /**\n     * @dev check signature without nftId.\n     * @param _offer  The offer data\n     * @param _nftId The NFT Id\n     * @param _signature The signature data\n     */\n\n    function offerSignatureIsValid(\n        Offer memory _offer,\n        uint256 _nftId,\n        Signature memory _signature\n    ) public view returns(bool) {\n        require(block.timestamp <= _signature.expiry, \"Signature expired\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(getEncodedOffer(_offer), _nftId, getEncodedSignature(_signature), address(this), getChainID())\n            );\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @dev check signature without nftId.\n     * @param _offer  The offer data\n     * @param _signature - The signature data\n     */\n    function offerSignatureIsValid(\n        Offer memory _offer,\n        Signature memory _signature\n    ) public view returns (bool) {\n        require(block.timestamp <= _signature.expiry, \"Signature has expired\");\n        if (_signature.signer == address(0)) {\n            return false;\n        } else {\n            bytes32 message = keccak256(\n                abi.encodePacked(getEncodedOffer(_offer), getEncodedSignature(_signature), address(this), getChainID())\n            );\n\n            return\n                SignatureChecker.isValidSignatureNow(\n                    _signature.signer,\n                    ECDSA.toEthSignedMessageHash(message),\n                    _signature.signature\n                );\n        }\n    }\n\n    /**\n     * @dev Helper function.\n     */\n    function getEncodedOffer(Offer memory _offer) internal pure returns (bytes memory data) {\n            data = \n                abi.encodePacked(\n                    _offer.borrowAsset,\n                    _offer.borrowAmount,\n                    _offer.repayAmount,\n                    _offer.nftAsset,\n                    _offer.borrowDuration,\n                    _offer.timestamp,\n                    _offer.extra\n                );\n    }\n\n    /**\n     * @dev Helper function.\n     */\n    function getEncodedSignature(Signature memory _signature) internal pure returns (bytes memory) {\n        return abi.encodePacked(_signature.signer, _signature.nonce, _signature.expiry);\n    }\n}\n"
    },
    "contracts/XY3.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\n\nimport \"./interfaces/IXY3.sol\";\nimport \"./interfaces/IDelegateV3.sol\";\nimport \"./interfaces/IAddressProvider.sol\";\nimport \"./interfaces/IServiceFee.sol\";\nimport {IFlashExecPermits} from \"./interfaces/IFlashExecPermits.sol\";\nimport \"./DataTypes.sol\";\nimport \"./LoanStatus.sol\";\nimport \"./Config.sol\";\nimport \"./utils/SigningUtils.sol\";\nimport {InterceptorManager} from \"./InterceptorManager.sol\";\nimport {SIGNER_ROLE} from \"./Roles.sol\";\n\n/**\n * @title  XY3\n * @author XY3\n * @notice Main contract for XY3 lending.\n */\ncontract XY3 is\n    IXY3,\n    Config,\n    LoanStatus,\n    InterceptorManager,\n    ERC721Holder,\n    ERC1155Holder\n{\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice A mapping from a loan's identifier to the loan's terms, represted by the LoanTerms struct.\n     */\n    mapping(uint32 => LoanDetail) public override loanDetails;\n\n    /**\n     * @notice A mapping, (collection address, token Id) -> loan ID.\n     */\n    mapping(address => mapping(uint256 => uint32)) public override loanIds;\n\n    /**\n     * @notice A mapping, (user address , nonce) -> boolean.\n     */\n    mapping(address => mapping(uint256 => bool)) internal _invalidNonce;\n\n    /**\n     * @notice A mapping that takes a user's address and a cancel timestamp.\n     *\n     */\n    mapping(address => uint256) internal _offerCancelTimestamp;\n\n    /**\n     * modifier\n     */\n    modifier loanIsOpen(uint32 _loanId) {\n        require(\n            getLoanState(_loanId).status == StatusType.NEW,\n            \"Loan is not open\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Init contract\n     *\n     * @param _admin - Initial admin of this contract.\n     * @param _addressProvider - AddressProvider contract\n     */\n    constructor(\n        address _admin,\n        address _addressProvider\n    )\n        Config(_admin, _addressProvider)\n        LoanStatus()\n        InterceptorManager()\n    {\n    }\n\n    /**\n     PUBLIC FUNCTIONS\n     */\n\n    /**\n     * @dev The borrower accept a lender's offer to create a loan.\n     *\n     * @param _offer - The offer made by the lender.\n     * @param _nftId - The ID\n     * @param _isCollectionOffer - Wether the offer is a collection offer.\n     * @param _lenderSignature - The lender's signature.\n     * @param _brokerSignature - The broker's signature.\n     * @param _extraDeal - Create a new loan by getting a NFT colleteral from external contract call.\n     * The external contract can be lending market or deal market, specially included the restricted repay of myself.\n     * But should not be the Xy3Nft.mint, though this contract maybe have the permission.\n     */\n    function borrow(\n        Offer calldata _offer,\n        uint256 _nftId,\n        bool _isCollectionOffer,\n        Signature calldata _lenderSignature,\n        Signature calldata _brokerSignature,\n        CallData calldata _extraDeal\n    ) external override whenNotPaused nonReentrant returns (uint32) {\n        _loanSanityChecks(_offer);\n        address nftAsset = _offer.nftAsset;\n\n        beforeBorrow(nftAsset, _nftId);\n        LoanDetail memory _loanDetail = _createLoanDetail(\n            _offer,\n            _nftId,\n            _isCollectionOffer\n        );\n        _checkBorrow(\n            _offer,\n            _nftId,\n            _isCollectionOffer,\n            _lenderSignature,\n            _brokerSignature\n        );\n\n        IAddressProvider addressProvider = getAddressProvider();\n        IDelegateV3(addressProvider.getTransferDelegate()).erc20Transfer(\n            _lenderSignature.signer,\n            msg.sender,\n            _offer.borrowAsset,\n            _offer.borrowAmount\n        );\n\n        if (_extraDeal.target != address(0)) {\n            require(getAgentPermit(_extraDeal.target, _extraDeal.selector), \"Not valide agent\");\n            bytes memory data = abi.encodeWithSelector(\n                _extraDeal.selector,\n                msg.sender,\n                _extraDeal.data\n            );\n            (bool succ, ) = _extraDeal.target.call(data);\n            require(succ, \"Borrow extra call failed\");\n        }\n        IDelegateV3(addressProvider.getTransferDelegate()).erc721Transfer(\n            msg.sender,\n            address(this),\n            nftAsset,\n            _nftId\n        );\n\n        uint32 loanId = _createBorrowNote(\n            _lenderSignature.signer,\n            msg.sender,\n            _loanDetail,\n            _lenderSignature,\n            _extraDeal\n        );\n\n        _serviceFee(_offer, loanId, _extraDeal.target);\n\n        loanIds[nftAsset][_nftId] = loanId;\n        afterBorrow(nftAsset, _nftId);\n        emit BorrowRefferal(loanId, msg.sender, _extraDeal.referral);\n\n        return loanId;\n    }\n\n    /**\n     * @dev Restricted function, only called by self from borrow with target.\n     * @param _sender  The borrow's msg.sender.\n     * @param _param  The borrow CallData's data, encode loadId only.\n     */\n    function repay(address _sender, bytes calldata _param) external {\n        require(msg.sender == address(this), \"Invalide caller\");\n        uint32 loanId = abi.decode(_param, (uint32));\n        _repay(_sender, loanId);\n    }\n\n    /**\n     * @dev Public function for anyone to repay a loan, and return the NFT token to origin borrower.\n     * @param _loanId  The loan Id.\n     */\n    function repay(uint32 _loanId) public override nonReentrant {\n        _repay(msg.sender, _loanId);\n    }\n\n    /**\n     * @dev Lender ended the load which not paid by borrow and expired.\n     *\n     * @param _loanId The loan Id.\n     */\n    function liquidate(\n        uint32 _loanId\n    ) external override nonReentrant loanIsOpen(_loanId) {\n        (\n            address borrower,\n            address lender,\n            LoanDetail memory loan\n        ) = _getPartiesAndData(_loanId);\n        address nftAsset = loan.nftAsset;\n        uint nftId = loan.nftTokenId;\n        beforeLiquidate(nftAsset, nftId);\n\n        uint256 loanMaturityDate = _loanMaturityDate(loan);\n        require(block.timestamp > loanMaturityDate, \"Loan is not overdue yet\");\n\n        require(msg.sender == lender, \"Only lender can liquidate\");\n\n        // Emit an event with all relevant details from this transaction.\n        emit LoanLiquidated(\n            _loanId,\n            borrower,\n            lender,\n            loan.borrowAmount,\n            nftId,\n            loanMaturityDate,\n            block.timestamp,\n            nftAsset\n        );\n\n        // nft to lender\n        IERC721(nftAsset).safeTransferFrom(address(this), lender, nftId);\n        _resolveLoanNote(_loanId);\n        delete loanIds[nftAsset][nftId];\n\n        afterLiquidate(nftAsset, nftId);\n    }\n\n    /**\n     * @dev Flash out the colleteral NFT.\n     *\n     * @param _loanId The loan Id.\n     * @param _target The target contract.\n     * @param _selector The callback selector.\n     * @param _data The callback data.\n     */\n    function flashExecute(\n        uint32 _loanId,\n        address _target,\n        bytes4 _selector,\n        bytes memory _data\n    ) external {\n        (address borrower, , LoanDetail memory loan) = _getPartiesAndData(\n            _loanId\n        );\n        IAddressProvider addressProvider = getAddressProvider();\n        require(\n            IFlashExecPermits(addressProvider.getFlashExecPermits())\n                .isPermitted(_target, _selector),\n            \"Invalid airdrop target\"\n        );\n        require(block.timestamp <= _loanMaturityDate(loan), \"Loan is expired\");\n        require(msg.sender == borrower, \"Only borrower\");\n        IERC721(loan.nftAsset).safeTransferFrom(\n            address(this),\n            _target,\n            loan.nftTokenId\n        );\n        (bool succ, ) = _target.call(\n            abi.encodeWithSelector(_selector, msg.sender, _data)\n        );\n        require(succ, \"External call failed\");\n        address owner = IERC721(loan.nftAsset).ownerOf(loan.nftTokenId);\n        require(owner == address(this), \"Nft not returned\");\n        emit FlashExecute(_loanId, loan.nftAsset, loan.nftTokenId, _target);\n    }\n\n    /**\n     * @dev A lender or a borrower to cancel all off-chain orders signed that contain this nonce.\n     * @param  _nonce - User nonce\n     */\n    function cancelByNonce(uint256 _nonce) external override {\n        require(!_invalidNonce[msg.sender][_nonce], \"Invalid nonce\");\n        _invalidNonce[msg.sender][_nonce] = true;\n        emit NonceCancelled(msg.sender, _nonce);\n    }\n\n    /**\n     * @dev A borrower cancel all offers with timestamp before the _timestamp parameter.\n     * @param _timestamp - cancelled timestamp\n     */\n    function cancelByTimestamp(uint256 _timestamp) external override {\n        require(_timestamp < block.timestamp, \"Invalid timestamp\");\n        if (_timestamp > _offerCancelTimestamp[msg.sender]) {\n            _offerCancelTimestamp[msg.sender] = _timestamp;\n            emit TimeStampCancelled(msg.sender, _timestamp);\n        }\n    }\n\n    /**\n     * @dev The amount of ERC20 currency for the loan.\n     *\n     * @param _loanId  loan Id.\n     * @return The amount of ERC20 currency.\n     */\n    function getRepayAmount(\n        uint32 _loanId\n    ) external view override returns (uint256) {\n        LoanDetail storage loan = loanDetails[_loanId];\n        return loan.repayAmount;\n    }\n\n    /**\n     * @notice Check a nonce has been used or not\n     * @param _user - The user address.\n     * @param _nonce - The order Id.\n     *\n     * @return A bool for used or not.\n     */\n    function getNonceUsed(\n        address _user,\n        uint256 _nonce\n    ) external view override returns (bool) {\n        return _invalidNonce[_user][_nonce];\n    }\n\n    /**\n     * @dev This function can be used to view the last cancel timestamp a borrower has set.\n     * @param _user User address\n     * @return The cancel timestamp\n     */\n    function getTimestampCancelled(\n        address _user\n    ) external view override returns (uint256) {\n        return _offerCancelTimestamp[_user];\n    }\n\n    /**\n     * @dev Claim the ERC20 airdrop by admin timelock.\n     * @param  _to - Receiver address\n     * @param  tokens - Claimed token list\n     * @param  amounts - Clamined amount list\n     */\n    function adminClaimErc20(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_to != address(0x0), \"Invalid address\");\n        for (uint i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            IERC20(token).safeTransfer(_to, amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Claim the ERC721 airdrop by admin timelock.\n     * @param  _to - Receiver address\n     * @param  tokens - Claimed token list\n     * @param  tokenIds - Clamined ID list\n     */\n    function adminClaimErc721(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory tokenIds\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            uint256 tokenId = tokenIds[i];\n            uint32 loanId = loanIds[token][tokenId];\n            if (loanId == 0) {\n                IERC721(token).safeTransferFrom(\n                    address(this),\n                    _to,\n                    tokenIds[i]\n                );\n            }\n        }\n    }\n\n    /**\n     * @dev Claim the ERC1155 airdrop by admin timelock.\n     * @param  _to - Receiver address\n     * @param  tokens - Claimed token list\n     * @param  tokenIds - Clamined ID list\n     * @param  amounts - Clamined amount list\n     */\n    function adminClaimErc1155(\n        address _to,\n        address[] memory tokens,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        for (uint i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            IERC1155(token).safeTransferFrom(\n                address(this),\n                _to,\n                tokenIds[i],\n                amounts[i],\n                \"\"\n            );\n        }\n    }\n\n    /**\n     * @dev ERC165 support\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(AccessControl, ERC1155Receiver)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @param _loanId  Load Id.\n     */\n    function _resolveLoanNote(uint32 _loanId) internal {\n        resolveLoan(_loanId);\n        delete loanDetails[_loanId];\n    }\n\n    /**\n     * @dev Check loan parameters validation\n     *\n     */\n    function _loanSanityChecks(Offer memory _offer) internal view {\n        require(getERC20Permit(_offer.borrowAsset), \"Invalid currency\");\n        require(getERC721Permit(_offer.nftAsset), \"Invalid ERC721 token\");\n        require(\n            uint256(_offer.borrowDuration) <= maxBorrowDuration,\n            \"Invalid maximum duration\"\n        );\n        require(\n            uint256(_offer.borrowDuration) >= minBorrowDuration,\n            \"Invalid minimum duration\"\n        );\n        require(\n            _offer.repayAmount >= _offer.borrowAmount,\n            \"Invalid interest rate\"\n        );\n    }\n\n    function _getPartiesAndData(\n        uint32 _loanId\n    )\n        internal\n        view\n        returns (address borrower, address lender, LoanDetail memory loan)\n    {\n        uint256 xy3NftId = getLoanState(_loanId).xy3NftId;\n        loan = loanDetails[_loanId];\n\n        borrower = IERC721(getAddressProvider().getBorrowerNote()).ownerOf(xy3NftId);\n        lender = IERC721(getAddressProvider().getLenderNote()).ownerOf(xy3NftId);\n    }\n\n    /**\n     * @dev Get the payoff amount and admin fee\n     * @param _loanDetail - Loan parameters\n     */\n    function _payoffAndFee(\n        LoanDetail memory _loanDetail\n    ) internal pure returns (uint256 adminFee, uint256 payoffAmount) {\n        uint256 interestDue = _loanDetail.repayAmount -\n            _loanDetail.borrowAmount;\n        adminFee = (interestDue * _loanDetail.adminShare) / HUNDRED_PERCENT;\n        payoffAmount = _loanDetail.repayAmount - adminFee;\n    }\n\n    /**\n     * @param _offer - Offer parameters\n     * @param _nftId - NFI ID\n     * @param _isCollection - is collection or not\n     * @param _lenderSignature - lender signature\n     * @param _brokerSignature - broker signature\n     */\n    function _checkBorrow(\n        Offer memory _offer,\n        uint256 _nftId,\n        bool _isCollection,\n        Signature memory _lenderSignature,\n        Signature memory _brokerSignature\n    ) internal view {\n        address _lender = _lenderSignature.signer;\n\n        require(\n            !_invalidNonce[_lender][_lenderSignature.nonce],\n            \"Lender nonce invalid\"\n        );\n        require(\n            hasRole(SIGNER_ROLE, _brokerSignature.signer),\n            \"Invalid broker signer\"\n        );\n        require(\n            _offerCancelTimestamp[_lender] < _offer.timestamp,\n            \"Offer cancelled\"\n        );\n\n        _checkSignatures(\n            _offer,\n            _nftId,\n            _isCollection,\n            _lenderSignature,\n            _brokerSignature\n        );\n    }\n\n    function _createBorrowNote(\n        address _lender,\n        address _borrower,\n        LoanDetail memory _loanDetail,\n        Signature memory _lenderSignature,\n        CallData memory _extraDeal\n    ) internal returns (uint32) {\n        _invalidNonce[_lender][_lenderSignature.nonce] = true;\n        // Mint ERC721 note to the lender and borrower\n        uint32 loanId = createLoan(_lender, _borrower);\n        // Record\n        loanDetails[loanId] = _loanDetail;\n        emit LoanStarted(\n            loanId,\n            msg.sender,\n            _lenderSignature.signer,\n            _lenderSignature.nonce,\n            _loanDetail,\n            _extraDeal.target,\n            _extraDeal.selector\n        );\n\n        return loanId;\n    }\n\n    function _repay(\n        address payer,\n        uint32 _loanId\n    ) internal loanIsOpen(_loanId) {\n        (\n            address borrower,\n            address lender,\n            LoanDetail memory loan\n        ) = _getPartiesAndData(_loanId);\n        require(block.timestamp <= _loanMaturityDate(loan), \"Loan is expired\");\n\n        address nftAsset = loan.nftAsset;\n        uint nftId = loan.nftTokenId;\n\n        beforeRepay(nftAsset, nftId);\n        IERC721(nftAsset).safeTransferFrom(address(this), borrower, nftId);\n\n        // pay from the payer\n        _repayAsset(payer, borrower, lender, _loanId, loan);\n        _resolveLoanNote(_loanId);\n        delete loanIds[nftAsset][nftId];\n        afterRepay(nftAsset, nftId);\n    }\n\n    function _repayAsset(\n        address payer,\n        address borrower,\n        address lender,\n        uint32 _loanId,\n        LoanDetail memory loan\n    ) internal {\n        (uint256 adminFee, uint256 payoffAmount) = _payoffAndFee(loan);\n        IAddressProvider addressProvider = getAddressProvider();\n        // Paid back to lender\n        IDelegateV3(addressProvider.getTransferDelegate()).erc20Transfer(\n            payer,\n            lender,\n            loan.borrowAsset,\n            payoffAmount\n        );\n        // Transfer admin fee\n        IDelegateV3(addressProvider.getTransferDelegate()).erc20Transfer(\n            payer,\n            adminFeeReceiver,\n            loan.borrowAsset,\n            adminFee\n        );\n\n        emit LoanRepaid(\n            _loanId,\n            borrower,\n            lender,\n            loan.borrowAmount,\n            loan.nftTokenId,\n            payoffAmount,\n            adminFee,\n            loan.nftAsset,\n            loan.borrowAsset\n        );\n    }\n\n    /**\n     * @param _offer - Offer parameters\n     * @param _nftId - NFI ID\n     * @param _isCollection - is collection or not\n     * @param _lenderSignature - lender signature\n     * @param _brokerSignature - broker signature\n     */\n    function _checkSignatures(\n        Offer memory _offer,\n        uint256 _nftId,\n        bool _isCollection,\n        Signature memory _lenderSignature,\n        Signature memory _brokerSignature\n    ) private view {\n        if (_isCollection) {\n            require(\n                SigningUtils.offerSignatureIsValid(_offer, _lenderSignature),\n                \"Lender signature is invalid\"\n            );\n        } else {\n            require(\n                SigningUtils.offerSignatureIsValid(\n                    _offer,\n                    _nftId,\n                    _lenderSignature\n                ),\n                \"Lender signature is invalid\"\n            );\n        }\n        require(\n            SigningUtils.offerSignatureIsValid(\n                _offer,\n                _nftId,\n                _brokerSignature\n            ),\n            \"Signer signature is invalid\"\n        );\n    }\n\n    /**\n     * @param _offer - Offer parameters\n     * @param _nftId - NFI ID\n     * @param _isCollection - is collection or not\n     */\n    function _createLoanDetail(\n        Offer memory _offer,\n        uint256 _nftId,\n        bool _isCollection\n    ) internal view returns (LoanDetail memory) {\n        return\n            LoanDetail({\n                borrowAsset: _offer.borrowAsset,\n                borrowAmount: _offer.borrowAmount,\n                repayAmount: _offer.repayAmount,\n                nftAsset: _offer.nftAsset,\n                nftTokenId: _nftId,\n                loanStart: uint64(block.timestamp),\n                loanDuration: _offer.borrowDuration,\n                adminShare: adminShare,\n                isCollection: _isCollection\n            });\n    }\n\n    /**\n     * @param loan - Loan parameters\n     */\n    function _loanMaturityDate(\n        LoanDetail memory loan\n    ) private pure returns (uint256) {\n        return uint256(loan.loanStart) + uint256(loan.loanDuration);\n    }\n\n    function _serviceFee(Offer memory offer, uint32 loanId, address target) internal {\n        if (target != address(0)) {\n            IAddressProvider addressProvider = getAddressProvider();\n            address nftAsset = offer.nftAsset;\n            uint256 borrowAmount = offer.borrowAmount;\n            address borrowAsset = offer.borrowAsset;\n            address serviceFeeAddr = addressProvider.getServiceFee();\n            uint16 serviceFeeRate = 0;\n            uint256 fee = 0;\n            if(serviceFeeAddr != address(0)) {\n                serviceFeeRate = IServiceFee(serviceFeeAddr).getServiceFee(\n                    target,\n                    msg.sender,\n                    nftAsset\n                );\n                if(serviceFeeRate > 0) {\n                    fee = borrowAmount * serviceFeeRate / HUNDRED_PERCENT;\n                    IDelegateV3(addressProvider.getTransferDelegate()).erc20Transfer(\n                        msg.sender,\n                        adminFeeReceiver,\n                        borrowAsset,\n                        fee\n                    );\n                }\n\n                emit ServiceFee(loanId, target, serviceFeeRate, fee);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Xy3Nft.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title Xy3Nft\n * @author XY3\n * @dev ERC721 token for promissory note.\n */\ncontract Xy3Nft is ERC721, AccessControl {\n    using Strings for uint256;\n\n    /**\n     * @dev Record the data for findig the loan linked to a Xy3.\n     */\n    struct Ticket {\n        uint256 loanId;\n        address minter;\n    }\n\n    /**\n     * @dev base URI for token\n     */\n    string public baseURI;\n\n    /*\n     * @dev map Xy3Id to Ticket\n     */\n    mapping(uint256 => Ticket) public tickets;\n\n    /**\n     * @dev Role for token URI and mint\n     */\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\");\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER\");\n\n    /**\n     * @dev Init the contract and set the default admin role.\n     *\n     * @param _admin Admin role account\n     * @param _name Xy3NFT name\n     * @param _symbol Xy3NFT symbol\n     * @param _customBaseURI Xy3NFT Base URI\n     */\n    constructor(\n        address _admin,\n        string memory _name,\n        string memory _symbol,\n        string memory _customBaseURI\n    ) ERC721(_name, _symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n        _setBaseURI(_customBaseURI);\n    }\n\n    /**\n     * @dev Burn token by minter.\n     * @param _tokenId The ERC721 token Id\n     */\n    function burn(uint256 _tokenId) external onlyRole(MINTER_ROLE) {\n        delete tickets[_tokenId];\n        _burn(_tokenId);\n    }\n\n    /**\n     * @dev Mint a new token and assigned to receiver\n     *\n     * @param _to The receiver address\n     * @param _tokenId The token ID of the Xy3 \n     * @param _data The first 32 bytes is an integer for the loanId in Xy3\n     */\n    function mint(\n        address _to,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external onlyRole(MINTER_ROLE) {\n        require(_data.length > 0, \"no data\");\n\n        uint256 loanId = abi.decode(_data, (uint256));\n        tickets[_tokenId] = Ticket({loanId: loanId, minter: msg.sender});\n        _safeMint(_to, _tokenId, _data);\n    }\n\n    /**\n     * @dev Set baseURI by URI manager\n     * @param _customBaseURI - Base URI for the Xy3NFT\n     */\n    function setBaseURI(string memory _customBaseURI)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        _setBaseURI(_customBaseURI);\n    }\n\n    /**\n     * @dev Defined by IERC165\n     * @param _interfaceId The queried selector Id\n     */\n    function supportsInterface(bytes4 _interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, AccessControl)\n        returns (bool) \n    {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    /**\n     * @dev Check the token exist or not.\n     * @param _tokenId The ERC721 token id\n     */\n    function exists(uint256 _tokenId)\n        external\n        view\n        returns (bool)\n    {\n        return _exists(_tokenId);\n    }\n\n    /**\n     * @dev Get the current chain ID.\n     */\n    function _getChainID() internal view returns (uint256 id) {\n        assembly {\n            id := chainid()\n        }\n    }\n\n    /** \n     * @dev Base URI for concat {tokenURI} by `baseURI` and `tokenId`.\n     */\n    function _baseURI()\n        internal\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        return baseURI;\n    }\n\n    /**\n     * @dev Set baseURI, internal used.\n     * @param _customBaseURI The new URI.\n     */\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\n        baseURI = bytes(_customBaseURI).length > 0\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \"/\"))\n            : \"\";\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "contracts/utils/SigningUtils.sol": {
        "SigningUtils": "0x6a7acf3feb58fcf15f74b73391c78a879f7c9e35"
      }
    }
  }
}}