{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/BambooDAOStaking/Array.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Array\n * @author artpumpkin\n * @notice Adds utility functions to an array of integers\n */\nlibrary Array {\n  /**\n   * @notice Removes an array item by index\n   * @dev This is a O(1) time-complexity algorithm without persiting the order\n   * @param array_ A reference value to the array\n   * @param index_ An item index to be removed\n   */\n  function remove(uint256[] storage array_, uint256 index_) internal {\n    require(index_ < array_.length, \"index out of bound\");\n    array_[index_] = array_[array_.length - 1];\n    array_.pop();\n  }\n}\n"
    },
    "contracts/BambooDAOStaking/BambooDAOStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Recoverable.sol\";\nimport \"./Generatable.sol\";\nimport \"./Array.sol\";\n\nstruct Fee {\n  uint128 numerator;\n  uint128 denominator;\n}\n\nstruct PendingPeriod {\n  uint128 repeat;\n  uint128 period;\n}\n\nstruct PendingAmount {\n  uint32 createdAt;\n  uint112 fullAmount;\n  uint112 claimedAmount;\n  PendingPeriod pendingPeriod;\n}\n\n/**\n * @title Contract that adds auto-compounding staking functionalities with whitelist support\n * @author artpumpkin\n * @notice Stakes any ERC20 token in a auto-compounding way using this contract\n */\ncontract BambooDAOStaking is Ownable, Pausable, Generatable, Recoverable {\n  using Array for uint256[];\n  using SafeERC20 for IERC20;\n\n  IERC20 private immutable _token;\n\n  uint256 private constant YEAR = 365 days;\n\n  uint152 public rewardRate;\n  uint32 public rewardDuration = 12 weeks;\n  uint32 private _rewardUpdatedAt = uint32(block.timestamp);\n  uint32 public rewardFinishedAt;\n  bool public whitelisted = false;\n  mapping(address => bool) public isWhitelisted;\n\n  uint256 private _totalStake;\n  mapping(address => uint256) private _userStake;\n\n  uint128 private _rewardPerToken;\n  uint128 private _lastRewardPerTokenPaid;\n  mapping(address => uint256) private _userRewardPerTokenPaid;\n\n  Fee public fee = Fee(0, 1000);\n\n  PendingPeriod public pendingPeriod = PendingPeriod({ repeat: 4, period: 7 days });\n  mapping(address => uint256[]) private _userPendingIds;\n  mapping(address => mapping(uint256 => PendingAmount)) private _userPending;\n\n  /**\n   * @param token_ The ERC20 token address to enable staking for\n   */\n  constructor(IERC20 token_) {\n    _token = token_;\n  }\n\n  /**\n   * @notice Computes the compounded total stake in real-time\n   * @return totalStake The current compounded total stake\n   */\n  function totalStake() public view returns (uint256) {\n    return _totalStake + _earned(_totalStake, _lastRewardPerTokenPaid);\n  }\n\n  /**\n   * @notice Gets the current staking APY (4 decimals)\n   * @return apy The current staking APY\n   */\n  function apy() external view returns (uint256) {\n    if (block.timestamp > rewardFinishedAt || totalStake() == 0) {\n      return 0;\n    }\n\n    return (rewardRate * YEAR * 100 * 100) / totalStake();\n  }\n\n  /**\n   * @notice Converts targeted APY (4 decimals) to rewards to set\n   * @param apy_ The targeted APY to convert\n   * @return rewards The amount of rewards to set to match the targeted APY\n   */\n  function apyToAlphaRewards(uint256 apy_) external view returns (uint256) {\n    return (totalStake() * rewardDuration * apy_) / (YEAR * 100 * 100);\n  }\n\n  /**\n   * @notice Converts targeted APY (4 decimals) to rewards to increase/decrease\n   * @dev This function can only be used if the reward duration isn't finished yet\n   * @param apy_ The targeted APY to convert\n   * @return rewards The amount of rewards to increase/decrease to match the targeted APY\n   */\n  function apyToDeltaRewards(uint256 apy_) external view returns (int256) {\n    require(block.timestamp <= rewardFinishedAt, \"reward duration finished\");\n\n    uint256 remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\n\n    int256 results = int256((totalStake() * rewardDuration * apy_) / (YEAR * 100 * 100)) - int256(remainingReward);\n\n    return results >= 0 ? results : -results;\n  }\n\n  /**\n   * @notice Gets the current rewards for a specific duration in seconds\n   * @param duration_ The specific duration in seconds\n   * @return rewards The rewards computed for the inputed duration\n   */\n  function rewardsForDuration(uint256 duration_) external view returns (uint256) {\n    if (block.timestamp > rewardFinishedAt) {\n      return 0;\n    }\n\n    return rewardRate * duration_;\n  }\n\n  /**\n   * @notice Computes the compounded user stake in real-time\n   * @param account_ The user address to use\n   * @return userStake The current compounded user stake\n   */\n  function userStake(address account_) external view returns (uint256) {\n    return _userStake[account_] + earned(account_);\n  }\n\n  /**\n   * @notice Returns the user pending amount metadata\n   * @param account_ The user address to use\n   * @param index_ The user pending index to use\n   * @return pendingAmount The user pending amount metadata\n   */\n  function userPending(address account_, uint256 index_) public view returns (PendingAmount memory) {\n    uint256 id = _userPendingIds[account_][index_];\n    return _userPending[account_][id];\n  }\n\n  /**\n   * @notice Computes the user claimable pending percentage\n   * @param account_ The user address to use\n   * @param index_ The user pending index to use\n   * @dev 18 decimals were used to not lose information\n   * @return percentage The user claimable pending percentage\n   */\n  function userClaimablePendingPercentage(address account_, uint256 index_) external view returns (uint256) {\n    PendingAmount memory pendingAmount = userPending(account_, index_);\n    uint256 n = getClaimablePendingPortion(pendingAmount);\n    return n >= pendingAmount.pendingPeriod.repeat ? 100 * 1e9 : (n * 100 * 1e9) / pendingAmount.pendingPeriod.repeat;\n  }\n\n  /**\n   * @notice Returns the user pending ids\n   * @param account_ The user address to use\n   * @return ids The user pending ids\n   */\n  function userPendingIds(address account_) external view returns (uint256[] memory) {\n    return _userPendingIds[account_];\n  }\n\n  /**\n   * @notice Returns the last time rewards were updated\n   * @return lastTimeRewardActiveAt A timestamp of the last time the update reward modifier was called\n   */\n  function lastTimeRewardActiveAt() public view returns (uint256) {\n    return rewardFinishedAt > block.timestamp ? block.timestamp : rewardFinishedAt;\n  }\n\n  /**\n   * @notice Returns the current reward per token value\n   * @return rewardPerToken The accumulated reward per token value\n   */\n  function rewardPerToken() public view returns (uint256) {\n    if (_totalStake == 0) {\n      return _rewardPerToken;\n    }\n\n    return _rewardPerToken + ((lastTimeRewardActiveAt() - _rewardUpdatedAt) * rewardRate * 1e9) / _totalStake;\n  }\n\n  /**\n   * @notice Returns the total rewards available\n   * @return totalDurationReward The total expected rewards for the current reward duration\n   */\n  function totalDurationReward() external view returns (uint256) {\n    return rewardRate * rewardDuration;\n  }\n\n  /**\n   * @notice Returns the user earned rewards\n   * @param account_ The user address to use\n   * @return earned The user earned rewards\n   */\n  function earned(address account_) private view returns (uint256) {\n    return _earned(_userStake[account_], _userRewardPerTokenPaid[account_]);\n  }\n\n  /**\n   * @notice Returns the accumulated rewards for a given staking amount\n   * @param stakeAmount_ The staked token amount\n   * @param rewardPerTokenPaid_ The already paid reward per token\n   * @return _earned The earned rewards based on a staking amount and the reward per token paid\n   */\n  function _earned(uint256 stakeAmount_, uint256 rewardPerTokenPaid_) internal view returns (uint256) {\n    uint256 rewardPerTokenDiff = rewardPerToken() - rewardPerTokenPaid_;\n    return (stakeAmount_ * rewardPerTokenDiff) / 1e9;\n  }\n\n  /**\n   * @notice This modifier is used to update the rewards metadata for a specific account\n   * @notice It is called for every user or owner interaction that changes the staking, the reward pool or the reward duration\n   * @notice This is an extended modifier version of the Synthetix contract to support auto-compounding\n   * @notice _rewardPerToken is accumulated every second\n   * @notice _rewardUpdatedAt is updated for every interaction with this modifier\n   * @param account_ The user address to use\n   */\n  modifier updateReward(address account_) {\n    _rewardPerToken = uint128(rewardPerToken());\n    _rewardUpdatedAt = uint32(lastTimeRewardActiveAt());\n\n    // auto-compounding\n    if (account_ != address(0)) {\n      uint256 reward = earned(account_);\n\n      _userRewardPerTokenPaid[account_] = _rewardPerToken;\n      _lastRewardPerTokenPaid = _rewardPerToken;\n\n      _userStake[account_] += reward;\n      _totalStake += reward;\n    }\n    _;\n  }\n\n  /**\n   * @notice This modifier is used to check whether the sender is whitelisted or not\n   */\n  modifier onlyWhitelist() {\n    require(!whitelisted || isWhitelisted[msg.sender], \"sender isn't whitelisted\");\n    _;\n  }\n\n  /**\n   * @notice Sets the contract to support whitelisting or not\n   * @param value_ Boolean value indicating whether to enable whitelisting or not\n   */\n  function setWhitelisted(bool value_) external onlyOwner {\n    whitelisted = value_;\n\n    emit WhitelistedSet(value_);\n  }\n\n  /**\n   * @notice Sets an array of users to be whitelisted or not\n   * @param users_ Users addresses\n   * @param values_ Boolean values indicating whether the current user to be whitelisted or not\n   */\n  function setIsWhitelisted(address[] calldata users_, bool[] calldata values_) external onlyOwner {\n    require(users_.length == values_.length, \"users_ and values_ have different lengths\");\n\n    for (uint256 i = 0; i < users_.length; i++) {\n      isWhitelisted[users_[i]] = values_[i];\n    }\n\n    emit IsWhitelistedSet(users_, values_);\n  }\n\n  /**\n   * @notice Stakes an amount of the ERC20 token\n   * @param amount_ The amount to stake\n   */\n  function stake(uint256 amount_) external whenNotPaused updateReward(msg.sender) onlyWhitelist {\n    // checks\n    require(amount_ > 0, \"invalid input amount\");\n\n    // effects\n    _totalStake += amount_;\n    _userStake[msg.sender] += amount_;\n\n    // interactions\n    _token.safeTransferFrom(msg.sender, address(this), amount_);\n\n    emit Staked(msg.sender, amount_);\n  }\n\n  /**\n   * @notice Creates a new pending after withdrawal\n   * @param amount_ The amount to create pending for\n   */\n  function createPending(uint256 amount_) internal {\n    uint256 id = unique();\n    _userPendingIds[msg.sender].push(id);\n    _userPending[msg.sender][id] = PendingAmount({ createdAt: uint32(block.timestamp), fullAmount: uint112(amount_), claimedAmount: 0, pendingPeriod: pendingPeriod });\n\n    emit PendingCreated(msg.sender, block.timestamp, amount_);\n  }\n\n  /**\n   * @notice Cancels an existing pending\n   * @param index_ The pending index to cancel\n   */\n  function cancelPending(uint256 index_) external whenNotPaused updateReward(msg.sender) {\n    PendingAmount memory pendingAmount = userPending(msg.sender, index_);\n    uint256 amount = pendingAmount.fullAmount - pendingAmount.claimedAmount;\n    deletePending(index_);\n\n    // effects\n    _totalStake += amount;\n    _userStake[msg.sender] += amount;\n\n    emit PendingCanceled(msg.sender, pendingAmount.createdAt, pendingAmount.fullAmount);\n  }\n\n  /**\n   * @notice Deletes an existing pending\n   * @param index_ The pending index to delete\n   */\n  function deletePending(uint256 index_) internal {\n    uint256[] storage ids = _userPendingIds[msg.sender];\n    uint256 id = ids[index_];\n    ids.remove(index_);\n    delete _userPending[msg.sender][id];\n  }\n\n  /**\n   * @notice Withdraws an amount of the ERC20 token\n   * @notice When you withdraw a pending will be created for that amount\n   * @notice You will be able to claim the pending for after an exact vesting period\n   * @param amount_ The amount to withdraw\n   */\n  function _withdraw(uint256 amount_) internal {\n    // effects\n    _totalStake -= amount_;\n    _userStake[msg.sender] -= amount_;\n\n    createPending(amount_);\n\n    emit Withdrawn(msg.sender, amount_);\n  }\n\n  /**\n   * @notice Withdraws an amount of the ERC20 token\n   * @param amount_ The amount to withdraw\n   */\n  function withdraw(uint256 amount_) external whenNotPaused updateReward(msg.sender) {\n    // checks\n    require(_userStake[msg.sender] > 0, \"user has no active stake\");\n    require(amount_ > 0 && _userStake[msg.sender] >= amount_, \"invalid input amount\");\n\n    // effects\n    _withdraw(amount_);\n  }\n\n  /**\n   * @notice Withdraws the full amount of the ERC20 token\n   */\n  function withdrawAll() external whenNotPaused updateReward(msg.sender) {\n    // checks\n    require(_userStake[msg.sender] > 0, \"user has no active stake\");\n\n    // effects\n    _withdraw(_userStake[msg.sender]);\n  }\n\n  /**\n   * @notice Gets the user claimable pending portion\n   * @param pendingAmount_ The pending amount metadata to use\n   */\n  function getClaimablePendingPortion(PendingAmount memory pendingAmount_) private view returns (uint256) {\n    return (block.timestamp - pendingAmount_.createdAt) / pendingAmount_.pendingPeriod.period; // 0 1 2 3 4\n  }\n\n  /**\n   * @notice Updates the claiming fee\n   * @param numerator_ The fee numerator\n   * @param denominator_ The fee denominator\n   */\n  function setFee(uint128 numerator_, uint128 denominator_) external onlyOwner {\n    require(denominator_ != 0, \"denominator must not equal 0\");\n    fee = Fee(numerator_, denominator_);\n    emit FeeSet(numerator_, denominator_);\n  }\n\n  /**\n   * @notice User can claim a specific pending by index\n   * @param index_ The pending index to claim\n   */\n  function claim(uint256 index_) external whenNotPaused {\n    // checks\n    uint256 id = _userPendingIds[msg.sender][index_];\n    PendingAmount storage pendingAmount = _userPending[msg.sender][id];\n\n    uint256 n = getClaimablePendingPortion(pendingAmount);\n    require(n != 0, \"claim is still pending\");\n\n    uint256 amount;\n    /**\n     * @notice n is the user claimable pending portion\n     * @notice Checking if user n and the user MAX n are greater than or equal\n     * @notice That way we know if the user wants to claim the full amount or just part of it\n     */\n    if (n >= pendingAmount.pendingPeriod.repeat) {\n      amount = pendingAmount.fullAmount - pendingAmount.claimedAmount;\n    } else {\n      uint256 percentage = (n * 1e9) / pendingAmount.pendingPeriod.repeat;\n      amount = (pendingAmount.fullAmount * percentage) / 1e9 - pendingAmount.claimedAmount;\n    }\n\n    // effects\n    /**\n     * @notice Pending is completely done\n     * @notice It will remove the pending item\n     */\n    if (n >= pendingAmount.pendingPeriod.repeat) {\n      uint256 createdAt = pendingAmount.createdAt;\n      uint256 fullAmount = pendingAmount.fullAmount;\n      deletePending(index_);\n      emit PendingFinished(msg.sender, createdAt, fullAmount);\n    }\n    /**\n     * @notice Pending is partially done\n     * @notice It will update the pending item\n     */\n    else {\n      pendingAmount.claimedAmount += uint112(amount);\n      emit PendingUpdated(msg.sender, pendingAmount.createdAt, pendingAmount.fullAmount);\n    }\n\n    // interactions\n    uint256 feeAmount = (amount * fee.numerator) / fee.denominator;\n    _token.safeTransfer(msg.sender, amount - feeAmount);\n\n    emit Claimed(msg.sender, amount);\n  }\n\n  /**\n   * @notice Owner can set staking rewards\n   * @param reward_ The reward amount to set\n   */\n  function setReward(uint256 reward_) external onlyOwner updateReward(address(0)) {\n    resetReward();\n\n    // checks\n    require(reward_ > 0, \"invalid input amount\");\n\n    // effects\n    rewardRate = uint152(reward_ / rewardDuration);\n    _rewardUpdatedAt = uint32(block.timestamp);\n    rewardFinishedAt = uint32(block.timestamp + rewardDuration);\n\n    // interactions\n    _token.safeTransferFrom(owner(), address(this), reward_);\n\n    emit RewardSet(reward_);\n  }\n\n  /**\n   * @notice Owner can increase staking rewards only if the duration isn't finished yet\n   * @notice Increasing rewards doesn't alter the reward finish time\n   * @param reward_ The reward amount to increase\n   */\n  function increaseReward(uint256 reward_) external onlyOwner updateReward(address(0)) {\n    // checks\n    require(reward_ > 0, \"invalid input amount\");\n    require(block.timestamp <= rewardFinishedAt, \"reward duration finished\");\n\n    // effects\n    uint256 remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\n    rewardRate = uint152((remainingReward + reward_) / (rewardFinishedAt - block.timestamp));\n    _rewardUpdatedAt = uint32(block.timestamp);\n\n    // interactions\n    _token.safeTransferFrom(owner(), address(this), reward_);\n\n    emit RewardIncreased(reward_);\n  }\n\n  /**\n   * @notice Owner can decrease staking rewards only if the duration isn't finished yet\n   * @notice Decreasing rewards doesn't alter the reward finish time\n   * @param reward_ The reward amount to decrease\n   */\n  function decreaseReward(uint256 reward_) external onlyOwner updateReward(address(0)) {\n    // checks\n    require(reward_ > 0, \"invalid input amount\");\n    require(block.timestamp <= rewardFinishedAt, \"reward duration finished\");\n\n    // effects\n    uint256 remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\n    require(remainingReward > reward_, \"invalid input amount\");\n\n    rewardRate = uint152((remainingReward - reward_) / (rewardFinishedAt - block.timestamp));\n    _rewardUpdatedAt = uint32(block.timestamp);\n\n    // interactions\n    _token.safeTransfer(owner(), reward_);\n\n    emit RewardDecreased(reward_);\n  }\n\n  /**\n   * @notice Owner can rest all rewards and reward finish time back to 0\n   */\n  function resetReward() public onlyOwner updateReward(address(0)) {\n    if (rewardFinishedAt <= block.timestamp) {\n      rewardRate = 0;\n      _rewardUpdatedAt = uint32(block.timestamp);\n      rewardFinishedAt = uint32(block.timestamp);\n    } else {\n      // checks\n      uint256 remainingReward = rewardRate * (rewardFinishedAt - block.timestamp);\n\n      // effects\n      rewardRate = 0;\n      _rewardUpdatedAt = uint32(block.timestamp);\n      rewardFinishedAt = uint32(block.timestamp);\n\n      // interactions\n      _token.safeTransfer(owner(), remainingReward);\n    }\n\n    emit RewardReseted();\n  }\n\n  /**\n   * @notice Owner can update the reward duration\n   * @notice It can only be updated if the old reward duration is already finished\n   * @param rewardDuration_ The reward rewardDuration_ to use\n   */\n  function setRewardDuration(uint32 rewardDuration_) external onlyOwner {\n    require(block.timestamp > rewardFinishedAt, \"reward duration must be finalized\");\n\n    rewardDuration = rewardDuration_;\n\n    emit RewardDurationSet(rewardDuration_);\n  }\n\n  /**\n   * @notice Owner can set the pending period\n   * @notice If we want a vesting period of 7 days 4 times, we can have the repeat as 4 and the period as 7 days\n   * @param repeat_ The number of times to keep a withdrawal pending\n   * @param period_ The period between each repeat\n   */\n  function setPendingPeriod(uint128 repeat_, uint128 period_) external onlyOwner {\n    pendingPeriod = PendingPeriod(repeat_, period_);\n    emit PendingPeriodSet(repeat_, period_);\n  }\n\n  /**\n   * @notice Owner can pause the staking contract\n   */\n  function pause() external whenNotPaused onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @notice Owner can resume the staking contract\n   */\n  function unpause() external whenPaused onlyOwner {\n    _unpause();\n  }\n\n  event Staked(address indexed account, uint256 amount);\n  event PendingCreated(address indexed account, uint256 createdAt, uint256 amount);\n  event PendingUpdated(address indexed account, uint256 createdAt, uint256 amount);\n  event PendingFinished(address indexed account, uint256 createdAt, uint256 amount);\n  event PendingCanceled(address indexed account, uint256 createdAt, uint256 amount);\n  event Withdrawn(address indexed account, uint256 amount);\n  event Claimed(address indexed account, uint256 amount);\n  event RewardSet(uint256 amount);\n  event RewardIncreased(uint256 amount);\n  event RewardDecreased(uint256 amount);\n  event RewardReseted();\n  event RewardDurationSet(uint256 duration);\n  event PendingPeriodSet(uint256 repeat, uint256 period);\n  event FeeSet(uint256 numerator, uint256 denominator);\n  event WhitelistedSet(bool value);\n  event IsWhitelistedSet(address[] users, bool[] values);\n}\n"
    },
    "contracts/BambooDAOStaking/Generatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Generatable\n * @author artpumpkin\n * @notice Generates a unique id\n */\ncontract Generatable {\n  uint256 private _id;\n\n  /**\n   * @notice Generates a unique id\n   * @return id The newly generated id\n   */\n  function unique() internal returns (uint256) {\n    _id += 1;\n    return _id;\n  }\n}\n"
    },
    "contracts/BambooDAOStaking/Recoverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Recoverable\n * @author artpumpkin\n * @notice Recovers stuck BNB or ERC20 tokens\n * @dev You can inhertit from this contract to support recovering stuck tokens or BNB\n */\ncontract Recoverable is Ownable {\n  using SafeERC20 for IERC20;\n\n  /**\n   * @notice Recovers stuck ERC20 token in the contract\n   * @param token_ An ERC20 token address\n   * @param amount_ Amount to recover\n   */\n  function recoverERC20(address token_, uint256 amount_) external onlyOwner {\n    IERC20 erc20 = IERC20(token_);\n    require(erc20.balanceOf(address(this)) >= amount_, \"invalid input amount\");\n\n    erc20.safeTransfer(owner(), amount_);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}