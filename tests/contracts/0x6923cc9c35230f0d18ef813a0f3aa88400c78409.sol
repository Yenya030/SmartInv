{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/contracts/ERC20Club/IERC1644.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/// @title IERC1644 Controller Token Operation (part of the ERC1400 Security Token Standards)\n/// @dev See https://github.com/ethereum/EIPs/issues/1644\n/// @notice data and operatorData parameters were removed from `controllerTransfer`\n/// and `controllerRedeem`\ninterface IERC1644 {\n    // Controller Operation\n    function isControllable() external view returns (bool);\n\n    function controllerTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    function controllerRedeem(address account, uint256 amount) external;\n\n    // Controller Events\n    event ControllerTransfer(\n        address controller,\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    event ControllerRedemption(\n        address controller,\n        address indexed account,\n        uint256 amount\n    );\n}\n"
    },
    "src/contracts/ERC20Club/IERC20Club.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IERC1644} from \"./IERC1644.sol\";\nimport {ITokenEnforceable} from \"../TokenEnforceable/ITokenEnforceable.sol\";\n\n// IERC1644 Adds controller mechanisms for the owner to burn and transfer without allowances\ninterface IERC20Club is IERC1644 {\n    event ControlDisabled(address indexed controller);\n    event MemberJoined(address indexed member);\n    event MemberExited(address indexed member);\n    event TokenRecovered(\n        address indexed recipient,\n        address indexed token,\n        uint256 amount\n    );\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC20Club_init(\n        string memory name_,\n        string memory symbol_,\n        address mintPolicy_,\n        address burnPolicy_,\n        address transferPolicy_\n    ) external;\n\n    function memberCount() external view returns (uint256);\n\n    function disableControl() external;\n\n    function mintTo(address account, uint256 amount) external returns (bool);\n\n    function redeem(uint256 amount) external returns (bool);\n\n    function redeemFrom(address account, uint256 amount)\n        external\n        returns (bool);\n\n    function recoverERC20(\n        address recipient,\n        address token,\n        uint256 amount\n    ) external;\n}\n\ninterface IERC20ClubFull is\n    IERC20,\n    IERC20Metadata,\n    ITokenEnforceable,\n    IERC20Club\n{\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "src/contracts/ERC721Membership/IERC721Membership.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {ITokenEnforceable} from \"../TokenEnforceable/ITokenEnforceable.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IERC721Membership {\n    event RendererUpdated(address indexed implementation);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __ERC721Membership_init(\n        string memory name_,\n        string memory symbol_,\n        address mintPolicy_,\n        address burnPolicy_,\n        address transferPolicy_,\n        address renderer_\n    ) external;\n\n    function mintTo(address account) external returns (bool);\n\n    function currentSupply() external view returns (uint256);\n}\n\ninterface IERC721MembershipFull is\n    IERC721,\n    IERC721Metadata,\n    ITokenEnforceable,\n    IERC721Membership\n{\n    function owner() external view returns (address);\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "src/contracts/ERC721Membership/Renderer/IMembershipRenderer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface IMembershipRenderer {\n    // to be called by frontend to render for a provided membership contract\n    function tokenURIOf(address membership, uint256 tokenId)\n        external\n        view\n        returns (string memory);\n\n    // to be called by a ERC721Membership contract\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "src/contracts/ERC721Membership/RugUtilityProperties.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {IMembershipRenderer} from \"./Renderer/IMembershipRenderer.sol\";\n\n/// Custom contract for RugRadio utility NFTsproperties\ncontract RugUtilityProperties is Ownable, IMembershipRenderer {\n    using Strings for uint256;\n\n    uint256 public seed;\n    string public baseURI; // https://pinata.cloud/<location>/\n\n    // tokenId => custom combination ID\n    mapping(uint256 => uint256) public oneOfOneCombination;\n    // tokenId => custom token production\n    mapping(uint256 => uint256) public oneOfOneProduction;\n\n    event SeedGenerated(string phrase, uint256 seed);\n    event UpdateBaseURI(string baseURI);\n    event UpdateCombination(\n        uint256 indexed tokenId,\n        uint256 indexed combinationId\n    );\n    event UpdateProduction(uint256 indexed tokenId, uint256 indexed production);\n\n    modifier onlyAfterReveal() {\n        require(\n            seed > 0 && bytes(baseURI).length > 0,\n            \"Reveal not released yet\"\n        );\n        _;\n    }\n\n    function generateSeed(string memory phrase)\n        external\n        onlyOwner\n        returns (uint256)\n    {\n        require(seed == 0, \"Seed already set\");\n        seed = uint256(keccak256(abi.encode(phrase)));\n        emit SeedGenerated(phrase, seed);\n    }\n\n    function updateBaseURI(string memory uri)\n        external\n        onlyOwner\n        returns (string memory)\n    {\n        baseURI = uri;\n        emit UpdateBaseURI(baseURI);\n    }\n\n    function updateOneOfOneCombination(uint256 tokenId, uint256 combination)\n        external\n        onlyOwner\n    {\n        // max combination Id = 4 * 100 + 16 = 416 -> use 500 for clean separation\n        // additionally let people set to 0 in case an error occured and need a reset\n        require(\n            combination >= 500 || combination == 0,\n            \"One-of-One combination id invalid\"\n        );\n        oneOfOneCombination[tokenId] = combination;\n        emit UpdateCombination(tokenId, combination);\n    }\n\n    function updateOneOfOneProduction(uint256 tokenId, uint256 production)\n        external\n        onlyOwner\n    {\n        oneOfOneProduction[tokenId] = production;\n        emit UpdateProduction(tokenId, production);\n    }\n\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        if (seed == 0) {\n            // fixed URL for utility NFT pre-reveal, allows us to switch renderer before reveal easily\n            return \"ipfs://QmPLizWkV3zmDybjXZnr7AALNLjab67QsmfrzHC8bhUm4S\";\n        }\n        return\n            string(\n                abi.encodePacked(\n                    baseURI,\n                    getCombinationId(tokenId).toString(),\n                    \".json\"\n                )\n            );\n    }\n\n    function tokenURIOf(address, uint256 tokenId)\n        external\n        view\n        returns (string memory)\n    {\n        return tokenURI(tokenId);\n    }\n\n    function getSlot(uint256 tokenId)\n        internal\n        view\n        onlyAfterReveal\n        returns (uint256)\n    {\n        // randomly distributee tokenId's across slots by re-hashing with seed\n        uint256 slotSeed = uint256(keccak256(abi.encode(seed, tokenId)));\n        return slotSeed % 19989;\n    }\n\n    function getCombinationId(uint256 tokenId) internal view returns (uint256) {\n        if (oneOfOneCombination[tokenId] == 0) {\n            return uint256(getRole(tokenId)) * 100 + getMeme(tokenId);\n        } else {\n            return oneOfOneCombination[tokenId];\n        }\n    }\n\n    function getRole(uint256 tokenId) public view returns (uint8) {\n        if (oneOfOneCombination[tokenId] == 0) {\n            uint256 slot = getSlot(tokenId);\n\n            if (slot < 112) {\n                // 7 * 16 rows = 112 \"Rare 2\" roles\n                return 1;\n            } else if (slot < 112 + 1104) {\n                // 69 * 16 rows = 1104 \"Scarce 1\" roles\n                return 2;\n            } else if (slot < 112 + 1104 + 7648) {\n                // 478 * 16 rows = 7648 \"Scarce 2\" roles\n                return 3;\n            } else {\n                // rest of roles are \"Standard\"\n                return 4;\n            }\n        } else {\n            // custom additions of \"Rare 1\" roles\n            return 0;\n        }\n    }\n\n    function getMeme(uint256 tokenId) public view returns (uint8) {\n        if (oneOfOneCombination[tokenId] == 0) {\n            // all rows share uniform distribution of different meme values\n            return uint8((getSlot(tokenId) % 16) + 1);\n        } else {\n            // \"One-of-One\" for special tokens with override\n            return 0;\n        }\n    }\n\n    function getProduction(uint256 tokenId) external view returns (uint256) {\n        if (oneOfOneProduction[tokenId] > 0) {\n            // \"Rare 1\" roles with additional custom production rate\n            return oneOfOneProduction[tokenId];\n        }\n        uint8 role = getRole(tokenId);\n        if (role <= 1) {\n            // \"Rare X\" roles\n            return 11;\n        } else if (role <= 3) {\n            // \"Scarce X\" roles\n            return 7;\n        } else {\n            // \"Standard\" roles\n            return 5;\n        }\n    }\n}\n"
    },
    "src/contracts/Mint/RugERC20ClaimModule.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport {IERC20ClubFull} from \"../ERC20Club/IERC20Club.sol\";\nimport {IERC721MembershipFull} from \"../ERC721Membership/IERC721Membership.sol\";\nimport {RugUtilityProperties} from \"../ERC721Membership/RugUtilityProperties.sol\";\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// This module contract allows users to claim available tokens for a given Gensis NFT\n/// The caller of the claim function does not have to be the owner of the NFT\ncontract RugERC20ClaimModule is Ownable, ReentrancyGuard {\n    uint256 public constant RUG_TOKEN_DECIMALS_MULTIPLIER = 10**18;\n\n    IERC20ClubFull public rugToken;\n    IERC721MembershipFull public genesisNFT;\n    RugUtilityProperties public properties;\n\n    // Mapping of TokenIds => time of last claim\n    mapping(uint256 => uint256) public lastClaim;\n    uint256 public startTime;\n\n    event StartTimeSet(uint256 startTime);\n    event RugTokensClaimed(uint256 indexed tokenId, uint256 amount);\n\n    constructor(\n        address rugToken_,\n        address genesisNFT_,\n        address properties_,\n        uint256 startTime_\n    ) Ownable() ReentrancyGuard() {\n        rugToken = IERC20ClubFull(rugToken_);\n        genesisNFT = IERC721MembershipFull(genesisNFT_);\n        properties = RugUtilityProperties(properties_);\n        setStartTime(startTime_);\n    }\n\n    modifier onlyAfterStart() {\n        require(block.timestamp > startTime, \"Token claiming is not active\");\n        _;\n    }\n\n    /// Function to set the start time of the claiming period\n    /// Can only be called by the owner of the contract\n    /// @param start Start time of claim\n    function setStartTime(uint256 start) public onlyOwner {\n        require(start != 0, \"Start time must not be 0\");\n        startTime = start;\n        emit StartTimeSet(startTime);\n    }\n\n    /// Function that returns initial bonus amount of tokens\n    /// @param production Get the initial bonus for a given role\n    /// @return The amount bonus tokens for a given production amount\n    function getStartingBalance(uint256 production)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (production == 5) {\n            return 555;\n        } else if (production == 7) {\n            return 888;\n        } else if (production == 11) {\n            return 1111;\n        }\n\n        return 0;\n    }\n\n    /// Function that calculates the amount of tokens a tokenId has available to claim\n    /// IMPORTANT: This returns the number of tokens NOT scaled up with decimals\n    /// @param tokenId Gensis NFT ID\n    /// @return The amount tokens to mint\n    function getClaimAmount(uint256 tokenId)\n        public\n        view\n        onlyAfterStart\n        returns (uint256)\n    {\n        uint256 production = properties.getProduction(tokenId);\n        if (lastClaim[tokenId] == 0) {\n            return\n                (((block.timestamp - startTime) / 1 days) * production) +\n                getStartingBalance(production);\n        } else {\n            return\n                ((block.timestamp - lastClaim[tokenId]) / 1 days) * production;\n        }\n    }\n\n    /// Function that mints/claims the available amount of tokens for a given RR Genesis NFT\n    /// @param tokenId Gensis NFT ID\n    /// @return The amount tokens claimed\n    function claimTokens(uint256 tokenId)\n        external\n        onlyAfterStart\n        nonReentrant\n        returns (uint256)\n    {\n        uint256 amount = getClaimAmount(tokenId) *\n            RUG_TOKEN_DECIMALS_MULTIPLIER;\n        if (amount == 0) {\n            return 0;\n        }\n        lastClaim[tokenId] = block.timestamp;\n\n        address owner = genesisNFT.ownerOf(tokenId);\n        rugToken.mintTo(owner, amount);\n\n        emit RugTokensClaimed(tokenId, amount);\n        return amount;\n    }\n\n    /// Function that bulk mints/claims for an array of Genesis token Ids\n    /// @param tokenIds Array of Gensis NFT IDs\n    /// @return True if successful\n    function bulkClaimTokens(uint256[] calldata tokenIds)\n        external\n        onlyAfterStart\n        nonReentrant\n        returns (bool)\n    {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            uint256 tokenId = tokenIds[i];\n\n            uint256 amount = getClaimAmount(tokenId) *\n                RUG_TOKEN_DECIMALS_MULTIPLIER;\n            if (amount != 0) {\n                lastClaim[tokenId] = block.timestamp;\n\n                address owner = genesisNFT.ownerOf(tokenId);\n                rugToken.mintTo(owner, amount);\n\n                emit RugTokensClaimed(tokenId, amount);\n            }\n        }\n\n        return true;\n    }\n\n    /// This function is called for all messages sent to this contract (there\n    /// are no other functions). Sending Ether to this contract will cause an\n    /// exception, because the fallback function does not have the `payable`\n    /// modifier.\n    /// Source: https://docs.soliditylang.org/en/v0.8.9/contracts.html?highlight=fallback#fallback-function\n    fallback() external {}\n}\n"
    },
    "src/contracts/TokenEnforceable/ITokenEnforceable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\ninterface ITokenEnforceable {\n    event PolicyUpdated(\n        PolicyType indexed policy,\n        address indexed implementation\n    );\n\n    function updateMintPolicy(address implementation) external;\n\n    function updateBurnPolicy(address implementation) external;\n\n    function updateTransferPolicy(address implementation) external;\n\n    function isAllowed(\n        address operator,\n        address sender,\n        address recipient,\n        uint256 value // amount (ERC20) or tokenId (ERC721)\n    ) external view returns (bool);\n}\n\nenum PolicyType {\n    Mint,\n    Burn,\n    Transfer\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable.git/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "contracts/=src/contracts/",
      "ds-test/=lib/ds-test/src/",
      "openzeppelin-contracts-upgradeable.git/=lib/openzeppelin-contracts-upgradeable.git/contracts/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "test/=src/test/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}