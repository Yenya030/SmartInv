{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC721A {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\r\n}"
    },
    "contracts/TwoPaws/TwoPaws.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IERC721A.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\n\r\n// https://twitter.com/TwoPawsDefi\r\n// https://twopaws.io/\r\n\r\n//TOKENOMIC TOKEN 2PAW.\r\n//Total supply 100M\r\n//Add uniswap 75% supply token / 4 ETH, 25% team .\r\n//LP token Burn (0) address.\r\n//Tax: buy and sales of 2PAW over 80k are taxed at 20%; transfers over 80k are taxed at 1%.\r\n//No tax on buy and sales and transfer of < 80k 2PAW.\r\n//Auto-added Liquidity: 1.25% of tokens are auto-added to the pair if it has an overabundance of tokens. Liquidity not added from (number of sales NFTDAO * 30000) + 2.5m is used to buy back NFT.\r\n//All tax proceeds are allocated to the protocol for incentives.\r\n\r\n//TOKENOMIC PROTOCOL\r\n//The protocol collects 0.3% of the loan amount if it is taken.\r\n//The protocol distributes the 2PAW token from buy and sales of the token and NFT buy/sell itself, stimulating orders.\r\n//NFT Buy 40000 2PAW / Sell 30000 2PAW\r\n//Only NFT holders can place reward orders!\r\n//1 NFT = 1 Reward order !\r\n//NFTDAO holders are entitled to all the proceeds of the protocol after the sale of 1650 NFTDAO.\r\n//The owner will change to the DAO contract address!\r\n//Reward Formula: Repayment date must be 21 days from now (repayment date + loan amount/ denominator)*(repayment date + loan amount/ denominator).\r\n//Only the DAO can add new denominator & tokens or change them.\r\n\r\n// WT - Wrong Timestamp\r\n// WR - Wrong Role\r\n// NC - No Contracts\r\n// WA - Wrong Amount\r\n// WS - Wrong Status\r\n// WLF - Wrong Lender Fee\r\n// WTP - Wrong Tokens Pair\r\n// TF - Transfer Filed\r\n// LCB - The Lender cannot be the Borrower\r\n// BCL - The Borrower cannot be the Lender\r\n// CF - Cancel Filed\r\n// BR - Only Borrower Can Repay\r\n// LL - Only Lender Can Liquidate Order\r\n// IB - Insufficient Tokens Balance\r\n// EA - Empty Array\r\n// ETF - Ether Transfer Filed\r\n// LI - Locked NFTId\r\n// 0A - Zero Address\r\n// WD - Wrong Days\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IPawToken is IERC20 {\r\n    function devLocked() external view returns (bool);\r\n}\r\n\r\ncontract TwoPaws is Ownable, ERC721Holder {\r\n    enum Status {\r\n        OPEN,\r\n        WORKING,\r\n        CLOSED,\r\n        CANCELED\r\n    }\r\n    enum Role {\r\n        SUPPLY,\r\n        BORROW\r\n    }\r\n    struct SupportedTokenSettings {\r\n        bool isRewarded;\r\n        uint256 denominator;\r\n    }\r\n\r\n    struct Order {\r\n        uint256 id;\r\n        address lender;\r\n        address borrower;\r\n        address loanToken;\r\n        uint256 loanAmount;\r\n        address collateralToken;\r\n        uint256 collateralAmount;\r\n        uint256 lenderFeeAmount;\r\n        uint256[] timestamps;\r\n        uint256 rewardAmount;\r\n        uint256 NFTId;\r\n        Status status;\r\n        Role role;\r\n    }\r\n\r\n    address public governanceContract;\r\n    IPawToken public protocolToken;\r\n    IERC721A public protocolNFT;\r\n    uint256 public protocolTokenDecimals = 18;\r\n    mapping(uint256 => bool) public lockedProtocolNFTs;\r\n    // Orders\r\n    uint256 public ordersCount;\r\n    mapping(uint256 => Order) public orders;\r\n    // DAO\r\n    address[] public supportedTokens;\r\n    mapping(address => SupportedTokenSettings) public supportedTokensSettings;\r\n    uint256 public protocolNFTBuyPrice = 40000 * 10 ** protocolTokenDecimals;\r\n    uint256 public protocolNFTSellPrice = 30000 * 10 ** protocolTokenDecimals;\r\n    uint256 public exchangeFeeBuyPercent = 20;\r\n    uint256 public exchangeFeeSellPercent = 20;\r\n    uint256 public DAOFeePercent = 30; // 0,3%\r\n    uint256 public maxRewardDays = 200;\r\n\r\n    event NewOrder(uint256 indexed orderId, Order order);\r\n    event OrderStatusChange(uint256 indexed orderId, Status status);\r\n\r\n    modifier noContracts() {\r\n        require(msg.sender == tx.origin, \"NC\");\r\n        _;\r\n    }\r\n\r\n    function init(address _protocolToken, address _protocolNFT, address _governanceContract) public onlyOwner {\r\n        require (address(protocolToken) == address(0));\r\n        protocolToken = IPawToken(_protocolToken);\r\n        protocolNFT = IERC721A(_protocolNFT);\r\n        governanceContract = _governanceContract;\r\n    }\r\n\r\n    function newOrder(\r\n        address _loanToken,\r\n        uint256 _loanAmount,\r\n        address _collateralToken,\r\n        uint256 _collateralAmount,\r\n        uint256 _lenderFeeAmount,\r\n        uint256[] memory _timestamps,\r\n        Role _role,\r\n        uint256 NFTId\r\n    ) public noContracts returns (uint256 orderId) {\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(\r\n            _timestamps[0] > block.timestamp &&\r\n            _timestamps[1] > block.timestamp &&\r\n            _timestamps[1] > _timestamps[0],\r\n            \"WTS\"\r\n        );\r\n        require(_role == Role.SUPPLY || _role == Role.BORROW, \"WR\");\r\n        require(_loanAmount > 0 && _collateralAmount > 0, \"WA\");\r\n        require(\r\n            (_loanToken != address(0)) &&\r\n            (_collateralToken != address(0)) &&\r\n            (_loanToken != _collateralToken)\r\n        , \"WTP\");\r\n        uint256 rewardAmount = 0;\r\n        if (NFTId < protocolNFT.totalSupply()) {\r\n            address NFTOwner = protocolNFT.ownerOf(NFTId);\r\n            if (\r\n                NFTOwner == msg.sender &&\r\n                supportedTokensSettings[_loanToken].isRewarded &&\r\n                supportedTokensSettings[_collateralToken].isRewarded &&\r\n                !lockedProtocolNFTs[NFTId]\r\n            ) {\r\n                rewardAmount = _calcRewardAmount(_timestamps[0], _loanToken, _loanAmount);\r\n                lockedProtocolNFTs[NFTId] = rewardAmount == 0 ? false : true;\r\n            } else {\r\n                NFTId = type(uint256).max;\r\n            }\r\n        }\r\n        uint256 amount;\r\n        uint256 DAOFeeAmount;\r\n        if (_role == Role.SUPPLY) {\r\n            amount = _transferToProtocol(_loanToken, msg.sender, _loanAmount);\r\n            DAOFeeAmount = amount * DAOFeePercent / 10000;\r\n            require(_lenderFeeAmount + DAOFeeAmount < amount, \"WA\");\r\n        } else if (_role == Role.BORROW) {\r\n            amount = _transferToProtocol(_collateralToken, msg.sender, _collateralAmount);\r\n            DAOFeeAmount = _loanAmount * DAOFeePercent / 10000;\r\n            require(_lenderFeeAmount + DAOFeeAmount < _loanAmount, \"WA\");\r\n        }\r\n        orderId = ordersCount;\r\n        Order memory order;\r\n        order = Order(\r\n            orderId,\r\n            _role == Role.SUPPLY ? msg.sender : address(0),\r\n            _role == Role.BORROW ? msg.sender : address(0),\r\n            _loanToken,\r\n            _role == Role.SUPPLY ? amount : _loanAmount,\r\n            _collateralToken,\r\n            _role == Role.BORROW ? amount : _collateralAmount,\r\n            _lenderFeeAmount,\r\n            _timestamps,\r\n            rewardAmount,\r\n            NFTId,\r\n            Status.OPEN,\r\n            _role\r\n        );\r\n        orders[orderId] = order;\r\n        ordersCount++;\r\n        emit NewOrder(orderId, order);\r\n        return orderId;\r\n    }\r\n\r\n    function _transferToProtocol(address _token, address _sender, uint256 _amount) public returns (uint256 amount) {\r\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n        TransferHelper.safeTransferFrom(_token, _sender, address(this), _amount);\r\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\r\n        require((balanceAfter - balanceBefore) > 0, \"TF\");\r\n        return balanceAfter - balanceBefore;\r\n    }\r\n\r\n\r\n    function _calcRewardAmount(uint256 repayTimestamp, address _loanToken, uint256 _loanAmount) internal view returns (uint256 rewardAmount){\r\n        uint256 daysAmount = (repayTimestamp - block.timestamp) / 1 days;\r\n        uint256 addDays;\r\n        if (supportedTokensSettings[_loanToken].denominator != 0) {\r\n            addDays = _loanAmount / supportedTokensSettings[_loanToken].denominator;\r\n            addDays = addDays > maxRewardDays ? maxRewardDays : addDays; // TODO 365 days and settings addDays\r\n        }\r\n        if ((daysAmount != 0) && (daysAmount >= 20)) {\r\n            rewardAmount = ((daysAmount + addDays) ** 2) * 10 ** protocolTokenDecimals;\r\n        } else {\r\n            rewardAmount = 0;\r\n        }\r\n\r\n    }\r\n\r\n    function getOrder(uint256 _orderId) public noContracts {\r\n        if (orders[_orderId].role == Role.SUPPLY) {\r\n            _getSupplyOrder(_orderId);\r\n        } else if (orders[_orderId].role == Role.BORROW) {\r\n            _getBorrowOrder(_orderId);\r\n        }\r\n        emit OrderStatusChange(_orderId, orders[_orderId].status);\r\n    }\r\n\r\n    function _getSupplyOrder(uint256 _orderId) private {\r\n        require(\r\n            block.timestamp < orders[_orderId].timestamps[1],\r\n            \"WT\"\r\n        );\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(orders[_orderId].status == Status.OPEN, \"WS\");\r\n        orders[_orderId].status = Status.WORKING;\r\n        require(\r\n            msg.sender != orders[_orderId].lender,\r\n            \"LCB\"\r\n        );\r\n        uint256 amount = _transferToProtocol(\r\n            orders[_orderId].collateralToken,\r\n            msg.sender,\r\n            orders[_orderId].collateralAmount\r\n        );\r\n        orders[_orderId].collateralAmount = amount;\r\n        uint256 DAOFeeAmount = orders[_orderId].loanAmount * DAOFeePercent / 10000;\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].loanToken,\r\n            msg.sender,\r\n            orders[_orderId].loanAmount - (DAOFeeAmount + orders[_orderId].lenderFeeAmount)\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].loanToken,\r\n            owner(),\r\n            DAOFeeAmount\r\n        );\r\n        if (orders[_orderId].lenderFeeAmount > 0) {\r\n            TransferHelper.safeTransfer(\r\n                orders[_orderId].loanToken,\r\n                orders[_orderId].lender,\r\n                orders[_orderId].lenderFeeAmount\r\n            );\r\n        }\r\n        orders[_orderId].borrower = msg.sender;\r\n    }\r\n\r\n    function _getBorrowOrder(uint256 _orderId) private {\r\n        require(\r\n            block.timestamp < orders[_orderId].timestamps[1],\r\n            \"WT\"\r\n        );\r\n        require(msg.sender != address(0), \"0A\");\r\n        require(orders[_orderId].status == Status.OPEN, \"WS\");\r\n        orders[_orderId].status = Status.WORKING;\r\n        require(\r\n            msg.sender != orders[_orderId].borrower,\r\n            \"BCL\"\r\n        );\r\n        uint256 amount = _transferToProtocol(\r\n            orders[_orderId].loanToken,\r\n            msg.sender,\r\n            orders[_orderId].loanAmount\r\n        );\r\n        orders[_orderId].loanAmount = amount;\r\n        uint256 DAOFeeAmount = amount * DAOFeePercent / 10000;\r\n        require(orders[_orderId].lenderFeeAmount + DAOFeeAmount < amount, \"WA\");\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].loanToken,\r\n            orders[_orderId].borrower,\r\n            amount - (orders[_orderId].lenderFeeAmount + DAOFeeAmount)\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].loanToken,\r\n            owner(),\r\n            DAOFeeAmount\r\n        );\r\n        if (orders[_orderId].lenderFeeAmount > 0) {\r\n            TransferHelper.safeTransfer(\r\n                orders[_orderId].loanToken,\r\n                msg.sender,\r\n                orders[_orderId].lenderFeeAmount\r\n            );\r\n        }\r\n        orders[_orderId].lender = msg.sender;\r\n    }\r\n\r\n    function cancelOrder(uint256 _orderId) public noContracts {\r\n        require(orders[_orderId].status == Status.OPEN, \"WS\");\r\n        orders[_orderId].status = Status.CANCELED;\r\n        require(\r\n            (orders[_orderId].role == Role.SUPPLY && orders[_orderId].lender == msg.sender) ||\r\n            (orders[_orderId].role == Role.BORROW && orders[_orderId].borrower == msg.sender),\r\n            \"CF\"\r\n        );\r\n        uint256 amount = orders[_orderId].role == Role.SUPPLY\r\n        ? orders[_orderId].loanAmount\r\n        : orders[_orderId].collateralAmount;\r\n\r\n        orders[_orderId].role == Role.SUPPLY\r\n        ? TransferHelper.safeTransfer(orders[_orderId].loanToken, msg.sender, amount)\r\n        : TransferHelper.safeTransfer(orders[_orderId].collateralToken, msg.sender, amount);\r\n\r\n        lockedProtocolNFTs[orders[_orderId].NFTId] = false;\r\n        emit OrderStatusChange(_orderId, orders[_orderId].status);\r\n    }\r\n\r\n    function repayOrder(uint256 _orderId) public noContracts {\r\n        require(orders[_orderId].status == Status.WORKING, \"WS\");\r\n        orders[_orderId].status = Status.CLOSED;\r\n        require(\r\n            orders[_orderId].timestamps[0] < block.timestamp &&\r\n            block.timestamp < orders[_orderId].timestamps[1],\r\n            \"WT\"\r\n        );\r\n        require(orders[_orderId].borrower == msg.sender, \"BR\");\r\n        uint256 amount = _transferToProtocol(\r\n            orders[_orderId].loanToken,\r\n            msg.sender,\r\n            orders[_orderId].loanAmount\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].loanToken,\r\n            orders[_orderId].lender,\r\n            amount\r\n        );\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].collateralToken,\r\n            orders[_orderId].borrower,\r\n            orders[_orderId].collateralAmount\r\n        );\r\n        _reward(orders[_orderId].borrower, orders[_orderId].rewardAmount);\r\n        lockedProtocolNFTs[orders[_orderId].NFTId] = false;\r\n        emit OrderStatusChange(_orderId, orders[_orderId].status);\r\n    }\r\n\r\n    function liquidateOrder(uint256 _orderId) public noContracts {\r\n        require(orders[_orderId].status == Status.WORKING, \"WS\");\r\n        orders[_orderId].status = Status.CLOSED;\r\n        require(block.timestamp > orders[_orderId].timestamps[1], \"WT\");\r\n        require(orders[_orderId].lender == msg.sender, \"LL\");\r\n        TransferHelper.safeTransfer(\r\n            orders[_orderId].collateralToken,\r\n            orders[_orderId].lender,\r\n            orders[_orderId].collateralAmount\r\n        );\r\n        _reward(orders[_orderId].lender, orders[_orderId].rewardAmount);\r\n\r\n        lockedProtocolNFTs[orders[_orderId].NFTId] = false;\r\n        emit OrderStatusChange(_orderId, orders[_orderId].status);\r\n    }\r\n\r\n    function _reward(address _to, uint256 _amount) private {\r\n        if (_amount > 0) {\r\n            uint256 contractBalance = protocolToken.balanceOf(address(this));\r\n            uint256 lockedNFT = protocolNFT.totalSupply() - protocolNFT.balanceOf(address(this));\r\n            uint256 lockedTokens = (protocolNFTSellPrice * lockedNFT);\r\n            if (contractBalance > lockedTokens + _amount) {\r\n                require(protocolToken.transfer(_to, _amount), \"TF\");\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function buyNFTForTokens(uint256[] memory _tokensIds) public {\r\n        require(_tokensIds.length > 0, \"EA\");\r\n        uint256 NFTCount = _tokensIds.length;\r\n        uint256 protocolTokensAmount = NFTCount * protocolNFTBuyPrice;\r\n        require(protocolToken.transferFrom(msg.sender, address(this), protocolTokensAmount), \"TF\");\r\n        for (uint256 i = 0; i < NFTCount; i++) {\r\n            protocolNFT.transferFrom(address(this), msg.sender, _tokensIds[i]);\r\n        }\r\n    }\r\n\r\n    function sellNFT(uint256[] memory _tokensIds) public {\r\n        require(_tokensIds.length > 0, \"EA\");\r\n        uint256 NFTCount = _tokensIds.length;\r\n        for (uint256 i = 0; i < NFTCount; i++) {\r\n            require(!lockedProtocolNFTs[_tokensIds[i]], \"LI\");\r\n            protocolNFT.transferFrom(msg.sender, address(this), _tokensIds[i]);\r\n        }\r\n        uint256 protocolTokensAmount = NFTCount * protocolNFTSellPrice;\r\n        require(protocolToken.transfer(msg.sender, protocolTokensAmount), \"TF\");\r\n    }\r\n\r\n    function getAllOrders() public view returns (Order[] memory allOrders) {\r\n        allOrders = new Order[](ordersCount);\r\n        for (uint256 i = 0; i < ordersCount; i++) {\r\n            Order storage order = orders[i];\r\n            allOrders[i] = order;\r\n        }\r\n        return allOrders;\r\n    }\r\n\r\n    function getSupportedTokens() public view returns (address[] memory allTokens){\r\n        allTokens = new address[](supportedTokens.length);\r\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\r\n            address token = supportedTokens[i];\r\n            allTokens[i] = token;\r\n        }\r\n        return allTokens;\r\n    }\r\n\r\n    //DAO\r\n    function transferOwnershipToDAO() public {\r\n        require(protocolNFT.balanceOf(address(this)) < 900);\r\n        _transferOwnership(governanceContract);\r\n    }\r\n\r\n    function setMaxRewardDays(uint256 _newMaxRewardDays) public onlyOwner {\r\n        require(\r\n            _newMaxRewardDays <= 365 &&\r\n            _newMaxRewardDays >= 100, \"WD\");\r\n        maxRewardDays = _newMaxRewardDays;\r\n    }\r\n\r\n    function addSupportedToken(address _tokenAddress, uint256 _denominator) public onlyOwner {\r\n        for (uint256 i = 0; i < supportedTokens.length; i++) {\r\n            require(supportedTokens[i] != _tokenAddress);\r\n        }\r\n        supportedTokens.push(_tokenAddress);\r\n        supportedTokensSettings[_tokenAddress].isRewarded = true;\r\n        supportedTokensSettings[_tokenAddress].denominator = _denominator;\r\n    }\r\n\r\n    function setTokenReward(address _tokenAddress, bool _flag, uint256 _denominator) public onlyOwner {\r\n        supportedTokensSettings[_tokenAddress].isRewarded = _flag;\r\n        supportedTokensSettings[_tokenAddress].denominator = _denominator;\r\n    }\r\n\r\n    function changeProtocolNFTSellPrice(uint256 _protocolNFTSellPrice) public onlyOwner {\r\n        require(\r\n            _protocolNFTSellPrice < 30000 * 10 ** protocolTokenDecimals\r\n            && _protocolNFTSellPrice >= 20000 * 10 ** protocolTokenDecimals\r\n        );\r\n        protocolNFTSellPrice = _protocolNFTSellPrice;\r\n    }\r\n\r\n    function changeDAOFeePercent(uint256 _DAOFeePercent) public onlyOwner {\r\n        require(_DAOFeePercent >= 10 && _DAOFeePercent <= 150);\r\n        DAOFeePercent = _DAOFeePercent;\r\n    }\r\n\r\n    function changeFeePercents(uint256 _exchangeFeeBuyPercent, uint256 _exchangeFeeSellPercent) public onlyOwner {\r\n        require(_exchangeFeeBuyPercent <= 20 && _exchangeFeeBuyPercent > 0);\r\n        require(_exchangeFeeSellPercent <= 20 && _exchangeFeeSellPercent > 0);\r\n        exchangeFeeBuyPercent = _exchangeFeeBuyPercent;\r\n        exchangeFeeSellPercent = _exchangeFeeSellPercent;\r\n    }\r\n\r\n    function withdraw() public onlyOwner returns (bytes memory){\r\n        (, bytes memory resp) = owner().call{value : address(this).balance}(\"\");\r\n        return resp;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}