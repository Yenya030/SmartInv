{{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\ncontract Bridge is Ownable {\n  IERC20 _token = IERC20(0x30dcBa0405004cF124045793E1933C798Af9E66a);\n  bool public isActive;\n  uint256 public bridgeCost = 2 ether / 100;\n  uint16 public sourceConfirmations = 30;\n\n  struct Bridge {\n    bytes32 id;\n    bool isSource;\n    uint256 sourceBlock;\n    bool isComplete;\n    address wallet;\n    uint256 amount;\n  }\n\n  address[] _relays;\n  mapping(address => uint256) _relaysIdx;\n\n  mapping(bytes32 => Bridge) public sources;\n  bytes32[] _incompleteSources;\n  mapping(bytes32 => uint256) _incSourceIdx;\n\n  mapping(bytes32 => Bridge) public receivers;\n  bytes32[] _incompleteReceivers;\n  mapping(bytes32 => uint256) _incReceiverIdx;\n  mapping(bytes32 => address) public receiverIniter;\n  mapping(bytes32 => address) public receiverSender;\n\n  event Create(bytes32 indexed id, address wallet, uint256 amount);\n  event InitDeliver(bytes32 indexed id, address wallet, uint256 amount);\n  event Deliver(bytes32 indexed id, address wallet, uint256 amount);\n\n  modifier onlyRelay() {\n    bool _isValid;\n    for (uint256 _i = 0; _i < _relays.length; _i++) {\n      if (_relays[_i] == msg.sender) {\n        _isValid = true;\n        break;\n      }\n    }\n    require(_isValid, 'Must be relay');\n    _;\n  }\n\n  function getBridgeToken() external view returns (address) {\n    return address(_token);\n  }\n\n  function getIncompleteSources() external view returns (bytes32[] memory) {\n    return _incompleteSources;\n  }\n\n  function getIncompleteReceivers() external view returns (bytes32[] memory) {\n    return _incompleteReceivers;\n  }\n\n  function setBridgeToken(address __token) external onlyOwner {\n    _token = IERC20(__token);\n  }\n\n  function setIsActive(bool _isActive) external onlyOwner {\n    isActive = _isActive;\n  }\n\n  function setBridgeCost(uint256 _wei) external onlyOwner {\n    bridgeCost = _wei;\n  }\n\n  function setRelay(address _relay, bool _isRelay) external onlyOwner {\n    uint256 _idx = _relaysIdx[_relay];\n    if (_isRelay) {\n      require(\n        _relays.length == 0 || (_idx == 0 && _relays[_idx] != _relay),\n        'Must enable'\n      );\n      _relaysIdx[_relay] = _relays.length;\n      _relays.push(_relay);\n    } else {\n      require(_relays[_idx] == _relay, 'Must disable');\n      delete _relaysIdx[_relay];\n      _relaysIdx[_relays[_relays.length - 1]] = _idx;\n      _relays[_idx] = _relays[_relays.length - 1];\n      _relays.pop();\n    }\n  }\n\n  function create(uint256 _amount) external payable {\n    require(isActive, 'Bridge disabled');\n    require(msg.value >= bridgeCost, 'Must pay bridge fee');\n\n    _amount = _amount == 0 ? _token.balanceOf(msg.sender) : _amount;\n    require(_amount > 0, 'Must bridge some tokens');\n\n    bytes32 _id = sha256(abi.encodePacked(msg.sender, block.number, _amount));\n    require(sources[_id].id == bytes32(0), 'Can only bridge once per block');\n\n    _token.transferFrom(msg.sender, address(this), _amount);\n\n    sources[_id] = Bridge({\n      id: _id,\n      isSource: true,\n      sourceBlock: block.number,\n      isComplete: false,\n      wallet: msg.sender,\n      amount: _amount\n    });\n    _incSourceIdx[_id] = _incompleteSources.length;\n    _incompleteSources.push(_id);\n    emit Create(_id, msg.sender, _amount);\n  }\n\n  function setSourceComplete(bytes32 _id) external onlyRelay {\n    require(sources[_id].id != bytes32(0), 'Source does not exist');\n    require(!sources[_id].isComplete, 'Source is already complete');\n    sources[_id].isComplete = true;\n\n    uint256 _sourceIdx = _incSourceIdx[_id];\n    delete _incSourceIdx[_id];\n    _incSourceIdx[\n      _incompleteSources[_incompleteSources.length - 1]\n    ] = _sourceIdx;\n    _incompleteSources[_sourceIdx] = _incompleteSources[\n      _incompleteSources.length - 1\n    ];\n    _incompleteSources.pop();\n  }\n\n  function initDeliver(\n    bytes32 _id,\n    address _user,\n    uint256 _sourceBlock,\n    uint256 _amount\n  ) external onlyRelay {\n    require(isActive, 'Bridge disabled');\n\n    bytes32 _idCheck = sha256(abi.encodePacked(_user, _sourceBlock, _amount));\n    require(_id == _idCheck, 'Not recognized');\n    require(receiverIniter[_id] == address(0), 'Already initialized');\n\n    receiverIniter[_id] = msg.sender;\n    receivers[_id] = Bridge({\n      id: _id,\n      isSource: false,\n      sourceBlock: _sourceBlock,\n      isComplete: false,\n      wallet: _user,\n      amount: _amount\n    });\n    _incReceiverIdx[_id] = _incompleteReceivers.length;\n    _incompleteReceivers.push(_id);\n    emit InitDeliver(_id, receivers[_id].wallet, receivers[_id].amount);\n  }\n\n  function deliver(bytes32 _id) external onlyRelay {\n    require(isActive, 'Bridge disabled');\n    Bridge storage receiver = receivers[_id];\n    require(receiver.id == _id && _id != bytes32(0), 'Invalid bridge txn');\n    require(\n      msg.sender != receiverIniter[_id],\n      'Initer and sender must be different'\n    );\n    require(!receiver.isComplete, 'Already completed');\n\n    receiverSender[_id] = msg.sender;\n    receiver.isComplete = true;\n\n    _token.transfer(receiver.wallet, receiver.amount);\n\n    uint256 _recIdx = _incReceiverIdx[_id];\n    delete _incReceiverIdx[_id];\n    _incReceiverIdx[\n      _incompleteReceivers[_incompleteReceivers.length - 1]\n    ] = _recIdx;\n    _incompleteReceivers[_recIdx] = _incompleteReceivers[\n      _incompleteReceivers.length - 1\n    ];\n    _incompleteReceivers.pop();\n    emit Deliver(_id, receiver.wallet, receiver.amount);\n  }\n\n  function setSourceConfirmations(uint16 _conf) external onlyOwner {\n    sourceConfirmations = _conf;\n  }\n\n  function withdrawERC20(address _token, uint256 _amount) external onlyOwner {\n    IERC20 _contract = IERC20(_token);\n    _amount = _amount == 0 ? _contract.balanceOf(address(this)) : _amount;\n    require(_amount > 0);\n    _contract.transfer(owner(), _amount);\n  }\n\n  function withdrawETH() external onlyOwner {\n    payable(owner()).call{ value: address(this).balance }('');\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}