{{
  "language": "Solidity",
  "sources": {
    "contracts/UnipilotStaking.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// Openzeppelin helper\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// Definition of custom errors\nerror AmountLessThanStakedAmountOrZero();\nerror CallerNotGovernance();\nerror EtherNotAccepted();\nerror InsufficientFunds();\nerror InsufficientPilotFunds();\nerror InputLengthMismatch();\nerror NoPendingRewardsToClaim();\nerror NoStakeFound();\nerror PilotAddressInput();\nerror RewardDistributionPeriodHasExpired();\nerror RewardPerBlockIsNotSet();\nerror SameRewardToken();\nerror ZeroAddress();\nerror ZeroInput();\n\n/// @title Unipilot Staking\n/// @author @hammadghazi007 & @mutahhirEth\n/// @notice Contract for staking Unipilot to earn rewards\ncontract UnipilotStaking {\n    using SafeERC20 for IERC20Metadata;\n\n    // Info of each user\n    struct UserInfo {\n        uint256 lastUpdateRewardToken; // Timestamp of last reward token update - used to reset user reward debt\n        uint256 amount; // Amount of pilot tokens staked by the user\n        uint256 rewardDebt; // Reward debt\n    }\n\n    // To determine transaction type\n    enum TxType {\n        STAKE,\n        UNSTAKE,\n        CLAIM,\n        EMERGENCY\n    }\n\n    // Address of the pilot token\n    IERC20Metadata public immutable pilotToken;\n\n    // Address of the reward token\n    IERC20Metadata public rewardToken;\n\n    // Address of the governance\n    address public governance;\n\n    // Precision factor for multiple calculations\n    uint256 public constant ONE = 1e18;\n\n    // Accumulated reward per pilot token\n    uint256 public accRewardPerPilot;\n\n    // Last update block for rewards\n    uint256 public lastUpdateBlock;\n\n    // Total pilot tokens staked\n    uint256 public totalPilotStaked;\n\n    // Reward to distribute per block\n    uint256 public currentRewardPerBlock;\n\n    // Current end block for the current reward period\n    uint256 public periodEndBlock;\n\n    // Last time reward token was updated\n    uint256 public lastUpdateRewardToken;\n\n    // Info of each user that stakes Pilot tokens\n    mapping(address => UserInfo) public userInfo;\n\n    event StakeOrUnstakeOrClaim(\n        address indexed user,\n        uint256 amount,\n        uint256 pendingReward,\n        TxType txType\n    );\n    event NewRewardPeriod(\n        uint256 numberBlocksToDistributeRewards,\n        uint256 newRewardPerBlock,\n        uint256 rewardToDistribute,\n        uint256 rewardExpirationBlock\n    );\n    event GovernanceChanged(\n        address indexed oldGovernance,\n        address indexed newGovernance\n    );\n    event RewardTokenChanged(\n        address indexed oldRewardToken,\n        address indexed newRewardToken\n    );\n    event FundsMigrated(\n        address indexed _newVersion,\n        IERC20Metadata[] _tokens,\n        uint256[] _amounts\n    );\n    event PeriodEndBlockUpdate(\n        uint256 numberBlocksToDistributeRewards,\n        uint256 rewardExpirationBlock\n    );\n\n    /**\n     * @notice Constructor\n     * @param _governance governance address of unipilot staking\n     * @param _rewardToken address of the reward token\n     * @param _pilotToken address of the pilot token\n     */\n    constructor(\n        address _governance,\n        address _rewardToken,\n        address _pilotToken\n    ) {\n        if (\n            _governance == address(0) ||\n            _rewardToken == address(0) ||\n            _pilotToken == address(0)\n        ) revert ZeroAddress();\n\n        governance = _governance;\n        rewardToken = IERC20Metadata(_rewardToken);\n        pilotToken = IERC20Metadata(_pilotToken);\n        emit GovernanceChanged(address(0), _governance);\n        emit RewardTokenChanged(address(0), _rewardToken);\n    }\n\n    /**\n     * @dev Throws if ether is received\n     */\n    receive() external payable {\n        revert EtherNotAccepted();\n    }\n\n    /**\n     * @dev Throws if called by any account other than the governance\n     */\n    modifier onlyGovernance() {\n        if (msg.sender != governance) revert CallerNotGovernance();\n        _;\n    }\n\n    /**\n     * @notice Updates the governance of this contract\n     * @param _newGovernance address of the new governance of this contract\n     * @dev Only callable by Governance\n     */\n    function setGovernance(address _newGovernance) external onlyGovernance {\n        if (_newGovernance == address(0)) revert ZeroAddress();\n\n        emit GovernanceChanged(governance, _newGovernance);\n        governance = _newGovernance;\n    }\n\n    /**\n     * @notice Updates the reward token.\n     * @param _newRewardToken address of the new reward token\n     * @dev Only callable by Governance. It also resets reward distribution accounting\n     */\n    function updateRewardToken(address _newRewardToken)\n        external\n        onlyGovernance\n    {\n        if (_newRewardToken == address(rewardToken)) revert SameRewardToken();\n        if (_newRewardToken == address(0)) revert ZeroAddress();\n\n        // Resetting reward distribution accounting\n        accRewardPerPilot = 0;\n        lastUpdateBlock = _lastRewardBlock();\n\n        // Setting reward token update time\n        lastUpdateRewardToken = block.timestamp;\n\n        emit RewardTokenChanged(address(rewardToken), _newRewardToken);\n\n        // Updating reward token address\n        rewardToken = IERC20Metadata(_newRewardToken);\n    }\n\n    /**\n     * @notice Updates the reward per block\n     * @param _reward total reward to distribute.\n     * @param _rewardDurationInBlocks total number of blocks in which the '_reward' should be distributed\n     * @dev Only callable by Governance.\n     */\n    function updateRewards(uint256 _reward, uint256 _rewardDurationInBlocks)\n        external\n        onlyGovernance\n    {\n        if (_rewardDurationInBlocks == 0) revert ZeroInput();\n\n        // Update reward distribution accounting\n        _updateRewardPerPilotAndLastBlock();\n\n        // Adjust the current reward per block\n        // If reward distribution duration is expired\n        if (block.number >= periodEndBlock) {\n            if (_reward == 0) revert ZeroInput();\n\n            currentRewardPerBlock = _reward / _rewardDurationInBlocks;\n        }\n        // Otherwise, reward distribution duration isn't expired\n        else {\n            currentRewardPerBlock =\n                (_reward +\n                    ((periodEndBlock - block.number) * currentRewardPerBlock)) /\n                _rewardDurationInBlocks;\n        }\n\n        lastUpdateBlock = block.number;\n\n        // Setting rewards expiration block\n        periodEndBlock = block.number + _rewardDurationInBlocks;\n\n        emit NewRewardPeriod(\n            _rewardDurationInBlocks,\n            currentRewardPerBlock,\n            _reward,\n            periodEndBlock\n        );\n    }\n\n    /**\n     * @notice Updates the reward distribution duration end block\n     * @param _expireDurationInBlocks number of blocks after which reward distribution should be halted\n     * @dev Only callable by Governance\n     */\n    function updateRewardEndBlock(uint256 _expireDurationInBlocks)\n        external\n        onlyGovernance\n    {\n        // Update reward distribution accounting\n        _updateRewardPerPilotAndLastBlock();\n        lastUpdateBlock = block.number;\n\n        // Setting rewards expiration block\n        periodEndBlock = block.number + _expireDurationInBlocks;\n        emit PeriodEndBlockUpdate(_expireDurationInBlocks, periodEndBlock);\n    }\n\n    /**\n     * @notice Migrates the funds to another address.\n     * @param _newVersion receiver address of the funds\n     * @param _tokens list of token addresses\n     * @param _amounts list of funds amount\n     * @param _isPilotMigrate whether to transfer pilot tokens\n     * @dev Only callable by Governance.\n     */\n    function migrateFunds(\n        address _newVersion,\n        IERC20Metadata[] calldata _tokens,\n        uint256[] calldata _amounts,\n        bool _isPilotMigrate\n    ) external onlyGovernance {\n        if (_newVersion == address(0)) revert ZeroAddress();\n\n        if (_tokens.length != _amounts.length) revert InputLengthMismatch();\n\n        // Declaring outside the loop to save gas\n        IERC20Metadata tokenAddress;\n        uint256 amount;\n\n        for (uint256 i; i < _tokens.length; ) {\n            // Local copy to save gas\n            tokenAddress = _tokens[i];\n            amount = _amounts[i];\n\n            if (tokenAddress == pilotToken) revert PilotAddressInput();\n\n            if (address(tokenAddress) == address(0)) revert ZeroAddress();\n\n            if (amount == 0) revert ZeroInput();\n\n            if (amount > tokenAddress.balanceOf(address(this)))\n                revert InsufficientFunds();\n\n            tokenAddress.safeTransfer(_newVersion, amount);\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Migrate pilot tokens\n        if (_isPilotMigrate) {\n            // Pilot token balance of this contract minus staked pilot\n            uint256 protocolPilotBalance = pilotToken.balanceOf(address(this)) -\n                totalPilotStaked;\n\n            // If protocol owns any pilot in this contract then transfer\n            if (protocolPilotBalance > 0)\n                pilotToken.safeTransfer(_newVersion, protocolPilotBalance);\n            else revert InsufficientPilotFunds();\n        }\n        emit FundsMigrated(_newVersion, _tokens, _amounts);\n    }\n\n    /**\n     * @notice Stake pilot tokens. Also triggers a claim.\n     * @param _to staking reward receiver address\n     * @param _amount amount of pilot tokens to stake\n     */\n    function stake(address _to, uint256 _amount) external {\n        if (_amount == 0) revert ZeroInput();\n\n        if (_to == address(0)) revert ZeroAddress();\n\n        if (currentRewardPerBlock == 0) revert RewardPerBlockIsNotSet();\n\n        if (block.number >= periodEndBlock)\n            revert RewardDistributionPeriodHasExpired();\n\n        if (rewardToken.balanceOf(address(this)) == 0)\n            revert InsufficientFunds();\n\n        _stakeOrUnstakeOrClaim(_to, _amount, TxType.STAKE);\n    }\n\n    /**\n     * @notice Unstake pilot tokens. Also triggers a reward claim.\n     * @param _amount amount of pilot tokens to unstake\n     */\n    function unstake(uint256 _amount) external {\n        if ((_amount > userInfo[msg.sender].amount) || _amount == 0)\n            revert AmountLessThanStakedAmountOrZero();\n\n        _stakeOrUnstakeOrClaim(msg.sender, _amount, TxType.UNSTAKE);\n    }\n\n    /**\n     * @notice Unstake all staked pilot tokens without caring about rewards, EMERGENCY ONLY\n     */\n    function emergencyUnstake() external {\n        if (userInfo[msg.sender].amount > 0) {\n            _stakeOrUnstakeOrClaim(\n                msg.sender,\n                userInfo[msg.sender].amount,\n                TxType.EMERGENCY\n            );\n        } else revert NoStakeFound();\n    }\n\n    /**\n     * @notice Claim pending rewards.\n     */\n    function claim() external {\n        _stakeOrUnstakeOrClaim(\n            msg.sender,\n            userInfo[msg.sender].amount,\n            TxType.CLAIM\n        );\n    }\n\n    /**\n     * @notice Calculate pending rewards for a user\n     * @param _user address of the user\n     * @return pending rewards of the user\n     */\n    function calculatePendingRewards(address _user)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 newAccRewardPerPilot;\n\n        if (totalPilotStaked != 0) {\n            newAccRewardPerPilot =\n                accRewardPerPilot +\n                (((_lastRewardBlock() - lastUpdateBlock) *\n                    (currentRewardPerBlock * ONE)) / totalPilotStaked);\n            // If checking user pending rewards in the block in which reward token is updated\n            if (newAccRewardPerPilot == 0) return 0;\n        } else return 0;\n\n        uint256 rewardDebt = userInfo[_user].rewardDebt;\n\n        // Reset debt if user is checking rewards after reward token has changed\n        if (userInfo[_user].lastUpdateRewardToken < lastUpdateRewardToken)\n            rewardDebt = 0;\n\n        uint256 pendingRewards = ((userInfo[_user].amount *\n            newAccRewardPerPilot) / ONE) - rewardDebt;\n\n        // Downscale if reward token has less than 18 decimals\n        if (_computeScalingFactor(rewardToken) != 1) {\n            // Downscaling pending rewards before transferring to the user\n            pendingRewards = _downscale(pendingRewards);\n        }\n        return pendingRewards;\n    }\n\n    /**\n     * @notice Return last block where trading rewards were distributed\n     */\n    function lastRewardBlock() external view returns (uint256) {\n        return _lastRewardBlock();\n    }\n\n    /**\n     * @notice Stake/ Unstake pilot tokens and also distributes reward\n     * @param _to staking reward receiver address\n     * @param _amount amount of pilot tokens to stake or unstake. 0 if claim tx.\n     * @param _txType type of the transaction\n     */\n    function _stakeOrUnstakeOrClaim(\n        address _to,\n        uint256 _amount,\n        TxType _txType\n    ) private {\n        // Update reward distribution accounting\n        _updateRewardPerPilotAndLastBlock();\n\n        // Reset debt if reward token has changed\n        _resetDebtIfNewRewardToken(_to);\n\n        UserInfo storage user = userInfo[_to];\n\n        uint256 pendingRewards;\n\n        // Distribute rewards if not emergency unstake\n        if (TxType.EMERGENCY != _txType) {\n            // Distribute rewards if not new stake\n            if (user.amount > 0) {\n                // Calculate pending rewards\n                pendingRewards = _calculatePendingRewards(_to);\n\n                // Downscale if reward token has less than 18 decimals\n                if (_computeScalingFactor(rewardToken) != 1) {\n                    // Downscaling pending rewards before transferring to the user\n                    pendingRewards = _downscale(pendingRewards);\n                }\n\n                // If there are rewards to distribute\n                if (pendingRewards > 0) {\n                    if (pendingRewards > rewardToken.balanceOf(address(this)))\n                        revert InsufficientFunds();\n\n                    // Transferring rewards to the user\n                    rewardToken.safeTransfer(_to, pendingRewards);\n                }\n                // If there are no pending rewards and tx is of claim then revert\n                else if (TxType.CLAIM == _txType)\n                    revert NoPendingRewardsToClaim();\n            }\n            // Claiming rewards without any stake\n            else if (TxType.CLAIM == _txType) revert NoPendingRewardsToClaim();\n        }\n\n        if (TxType.STAKE == _txType) {\n            // Transfer Pilot tokens from the caller to this contract\n            pilotToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n            // Increase user pilot staked amount\n            user.amount += _amount;\n\n            // Increase total pilot staked amount\n            totalPilotStaked += _amount;\n        } else if (TxType.UNSTAKE == _txType || TxType.EMERGENCY == _txType) {\n            // Decrease user pilot staked amount\n            user.amount -= _amount;\n\n            // Decrease total pilot staked amount\n            totalPilotStaked -= _amount;\n\n            // Transfer Pilot tokens back to the sender\n            pilotToken.safeTransfer(_to, _amount);\n        }\n\n        // Adjust user debt\n        user.rewardDebt = (user.amount * accRewardPerPilot) / ONE;\n\n        emit StakeOrUnstakeOrClaim(_to, _amount, pendingRewards, _txType);\n    }\n\n    /**\n     * @notice Resets user reward debt if reward token has changed\n     * @param _to reward debt reset address\n     */\n    function _resetDebtIfNewRewardToken(address _to) private {\n        // Reset debt if user last update reward token time is less than the time of last reward token update\n        if (userInfo[_to].lastUpdateRewardToken < lastUpdateRewardToken) {\n            userInfo[_to].rewardDebt = 0;\n            userInfo[_to].lastUpdateRewardToken = lastUpdateRewardToken;\n        }\n    }\n\n    /**\n     * @notice Updates accumulated reward to distribute per pilot token. Also updates the last block in which rewards are distributed\n     */\n    function _updateRewardPerPilotAndLastBlock() private {\n        if (totalPilotStaked == 0) {\n            lastUpdateBlock = block.number;\n            return;\n        }\n\n        accRewardPerPilot +=\n            ((_lastRewardBlock() - lastUpdateBlock) *\n                (currentRewardPerBlock * ONE)) /\n            totalPilotStaked;\n\n        if (block.number != lastUpdateBlock)\n            lastUpdateBlock = _lastRewardBlock();\n    }\n\n    /**\n     * @notice Calculate pending rewards for a user\n     * @param _user address of the user\n     */\n    function _calculatePendingRewards(address _user)\n        private\n        view\n        returns (uint256)\n    {\n        return\n            ((userInfo[_user].amount * accRewardPerPilot) / ONE) -\n            userInfo[_user].rewardDebt;\n    }\n\n    /**\n     * @notice Return last block where rewards must be distributed\n     */\n    function _lastRewardBlock() private view returns (uint256) {\n        return block.number < periodEndBlock ? block.number : periodEndBlock;\n    }\n\n    /**\n     * @notice Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\n     * it had 18 decimals.\n     */\n    function _computeScalingFactor(IERC20Metadata _token)\n        private\n        view\n        returns (uint256)\n    {\n        // Tokens that don't implement the `decimals` method are not supported.\n        uint256 tokenDecimals = _token.decimals();\n\n        // Tokens with more than 18 decimals are not supported.\n        uint256 decimalsDifference = 18 - tokenDecimals;\n        return 10**decimalsDifference;\n    }\n\n    /**\n     * @notice Reverses the upscaling applied to `amount`, resulting in a smaller or equal value depending on\n     * whether it needed scaling or not\n     */\n    function _downscale(uint256 _amount) private view returns (uint256) {\n        return _amount / _computeScalingFactor(rewardToken);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}