{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "src/contracts/bebop_aggregation_contract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./token/ERC20/IERC20.sol\";\nimport \"./token/Address.sol\";\nimport \"./token/ERC20/SafeER20.sol\";\nimport \"./interface/bebop_aggregation_contract.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\ncontract BebopAggregationContract is IBebopAggregationContract {\n\n    bytes4 constant internal EIP1271_MAGICVALUE = bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"));\n\n    using SafeERC20 for IERC20;\n\n    function getChainID() private view returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    uint256 chainId = getChainID();\n    address verifyingContract = address(this);\n    string private constant EIP712_DOMAIN =\n        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n\n    bytes32 public constant EIP712_DOMAIN_TYPEHASH =\n        keccak256(abi.encodePacked(EIP712_DOMAIN));\n\n    string constant AGGREGATED_ORDER_TYPE =\n        \"AggregateOrder(uint256 expiry,address taker_address,address[] maker_addresses,uint256[] maker_nonces,address[][] taker_tokens,address[][] maker_tokens,uint256[][] taker_amounts,uint256[][] maker_amounts,address receiver)\";\n    bytes32 constant AGGREGATED_ORDER_TYPE_HASH = keccak256(abi.encodePacked(AGGREGATED_ORDER_TYPE));\n\n    string constant PARTIAL_AGGREGATED_ORDER_TYPE =\n        \"PartialOrder(uint256 expiry,address taker_address,address maker_address,uint256 maker_nonce,address[] taker_tokens,address[] maker_tokens,uint256[] taker_amounts,uint256[] maker_amounts,address receiver)\";\n    bytes32 constant PARTIAL_AGGREGATED_ORDER_TYPE_HASH = keccak256(abi.encodePacked(PARTIAL_AGGREGATED_ORDER_TYPE));\n\n    bytes32 private DOMAIN_SEPARATOR;\n\n    uint256 private constant ETH_SIGN_HASH_PREFIX = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n\n    mapping(address => mapping(uint256 => uint256)) private maker_validator;\n    mapping(address => mapping(address => bool)) orderSignerRegistry;\n\n    constructor() {\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(\"BebopAggregationContract\"),\n                keccak256(\"1\"),\n                chainId,\n                verifyingContract\n            )\n        );\n    }\n\n    function getRsv(bytes memory sig) internal pure returns (bytes32, bytes32, uint8)\n    {\n        require(sig.length == 65, \"Invalid signature length\");\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := and(mload(add(sig, 65)), 255)\n        }\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"Invalid sig value S\");\n        require(v == 27 || v == 28, \"Invalid sig value V\");\n        return (r, s, v);\n    }\n\n    function encodeTightlyPackedNestedInt(uint256[][] memory _nested_array) internal pure returns(bytes memory encoded) {\n        uint nested_array_length = _nested_array.length;\n        for (uint i = 0; i < nested_array_length; i++) {\n            encoded = abi.encodePacked(\n                encoded,\n                keccak256(abi.encodePacked(_nested_array[i]))\n            );\n        }\n        return encoded;\n    }\n\n    function encodeTightlyPackedNested(address[][] memory _nested_array) internal pure returns(bytes memory encoded) {\n        uint nested_array_length = _nested_array.length;\n        for (uint i = 0; i < nested_array_length; i++) {\n            encoded = abi.encodePacked(\n                encoded,\n                keccak256(abi.encodePacked(_nested_array[i]))\n            );\n        }\n        return encoded;\n    }\n\n    function registerAllowedOrderSigner(address signer, bool allowed) external override {\n        orderSignerRegistry[msg.sender][signer] = allowed;\n        emit OrderSignerRegistered(msg.sender, signer, allowed);\n    }\n\n    function hashAggregateOrder(AggregateOrder memory order) public view override returns (bytes32) {\n        return\n        keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        AGGREGATED_ORDER_TYPE_HASH,\n                        order.expiry,\n                        order.taker_address,\n                        keccak256(abi.encodePacked(order.maker_addresses)),\n                        keccak256(abi.encodePacked(order.maker_nonces)),\n                        keccak256(encodeTightlyPackedNested(order.taker_tokens)),\n                        keccak256(encodeTightlyPackedNested(order.maker_tokens)),\n                        keccak256(encodeTightlyPackedNestedInt(order.taker_amounts)),\n                        keccak256(encodeTightlyPackedNestedInt(order.maker_amounts)),\n                        order.receiver\n                    )\n                )\n            )\n        );\n    }\n\n    function hashPartialOrder(PartialOrder memory order) public view override returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR,\n                    keccak256(\n                        abi.encode(\n                            PARTIAL_AGGREGATED_ORDER_TYPE_HASH,\n                            order.expiry,\n                            order.taker_address,\n                            order.maker_address,\n                            order.maker_nonce,\n                            keccak256(abi.encodePacked(order.taker_tokens)),\n                            keccak256(abi.encodePacked(order.maker_tokens)),\n                            keccak256(abi.encodePacked(order.taker_amounts)),\n                            keccak256(abi.encodePacked(order.maker_amounts)),\n                            order.receiver\n                        )\n                    )\n                )\n            );\n    }\n\n    function invalidateOrder(address maker, uint256 nonce) private {\n        require(nonce != 0, \"Nonce must be non-zero\");\n        uint256 invalidatorSlot = uint64(nonce) >> 8;\n        uint256 invalidatorBit = 1 << uint8(nonce);\n        mapping(uint256 => uint256) storage invalidatorStorage = maker_validator[maker];\n        uint256 invalidator = invalidatorStorage[invalidatorSlot];\n        require(invalidator & invalidatorBit == 0, \"Invalid maker order (nonce)\");\n        invalidatorStorage[invalidatorSlot] = invalidator | invalidatorBit;\n    }\n\n    function validateMakerSignature(\n        address maker_address,\n        bytes32 hash,\n        Signature memory signature\n    ) public view override {\n        if (signature.signatureType == SignatureType.EIP712) {\n            // Signed using EIP712\n            (bytes32 r, bytes32 s, uint8 v) = getRsv(signature.signatureBytes);\n            address signer = ecrecover(hash, v, r, s);\n            require(signer != address(0), \"Invalid signer\");\n            if (signer != maker_address && !orderSignerRegistry[maker_address][signer]) {\n                revert(\"Invalid maker signature\");\n            }\n        } else if (signature.signatureType == SignatureType.EIP1271) {\n            require(IERC1271(maker_address).isValidSignature(hash, signature.signatureBytes) == EIP1271_MAGICVALUE, \"Invalid Maker EIP 1271 Signature\");\n        } else if (signature.signatureType == SignatureType.ETHSIGN) {\n            bytes32 ethSignHash;\n            assembly {\n                mstore(0, ETH_SIGN_HASH_PREFIX) // length of 28 bytes\n                mstore(28, hash) // length of 32 bytes\n                ethSignHash := keccak256(0, 60)\n            }\n            (bytes32 r, bytes32 s, uint8 v) = getRsv(signature.signatureBytes);\n            address signer = ecrecover(ethSignHash, v, r, s);\n            require(signer != address(0), \"Invalid signer\");\n            if (signer != maker_address && !orderSignerRegistry[maker_address][signer]) {\n                revert(\"Invalid maker signature\");\n            }\n        } else {\n            revert(\"Invalid Signature Type\");\n        }\n    }\n\n    function assertAndInvalidateMakerOrders(\n        AggregateOrder memory order,\n        Signature[] memory makerSigs\n    ) private {\n        // number of columns = number of sigs otherwise unwarranted columns can be injected by sender.\n        require(order.taker_tokens.length == makerSigs.length, \"Taker tokens length mismatch\");\n        require(order.maker_tokens.length == makerSigs.length, \"Maker tokens length mismatch\");\n        require(order.taker_amounts.length == makerSigs.length, \"Taker amounts length mismatch\");\n        require(order.maker_amounts.length == makerSigs.length, \"Maker amounts length mismatch\");\n        require(order.maker_nonces.length == makerSigs.length, \"Maker nonces length mismatch\");\n        require(order.maker_addresses.length == makerSigs.length, \"Maker addresses length mismatch\");\n        uint numMakerSigs = makerSigs.length;\n        for (uint256 i = 0; i < numMakerSigs; i++) {\n            // validate the partially signed orders.\n            address maker_address = order.maker_addresses[i];\n            require(order.maker_tokens[i].length == order.maker_amounts[i].length, \"Maker tokens and amounts length mismatch\");\n            require(order.taker_tokens[i].length == order.taker_amounts[i].length, \"Taker tokens and amounts length mismatch\");\n            PartialOrder memory partial_order = PartialOrder(\n                 order.expiry,\n                 order.taker_address,\n                 maker_address,\n                 order.maker_nonces[i],\n                 order.taker_tokens[i],\n                 order.maker_tokens[i],\n                 order.taker_amounts[i],\n                 order.maker_amounts[i],\n                 order.receiver\n            );\n            bytes32 partial_hash = hashPartialOrder(partial_order);\n            Signature memory makerSig = makerSigs[i];\n            validateMakerSignature(maker_address, partial_hash, makerSig);\n            invalidateOrder(maker_address, order.maker_nonces[i]);\n        }\n    }\n\n    // Construct partial orders from aggregated orders\n    function assertAndInvalidateAggregateOrder(\n        AggregateOrder memory order,\n        bytes memory takerSig,\n        Signature[] memory makerSigs\n    ) internal returns (bytes32) {\n        bytes32 h = hashAggregateOrder(order);\n        (bytes32 R, bytes32 S, uint8 V) = getRsv(takerSig);\n        address taker = ecrecover(h, V, R, S);\n        require(taker == order.taker_address, \"Invalid taker signature\");\n\n        // construct and validate maker partial orders\n        assertAndInvalidateMakerOrders(order, makerSigs);\n\n        require(order.expiry > block.timestamp, \"Signature expired\");\n        return h;\n    }\n\n    function makerTransferFunds(\n        address from,\n        address to,\n        uint256 quantity,\n        address token\n    ) private returns (bool) {\n        IERC20(token).safeTransferFrom(from, to, quantity);\n        return true;\n    }\n\n    function SettleAggregateOrder(\n        AggregateOrder memory order,\n        bytes memory takerSig,\n        Signature[] memory makerSigs\n    ) public payable override returns (bool) {\n        bytes32 h = assertAndInvalidateAggregateOrder(\n            order,\n            takerSig,\n            makerSigs\n        );\n\n        // for each distinct maker\n        uint numMakerSigs = makerSigs.length;\n        for (uint256 i = 0; i < numMakerSigs; i++) {\n            // for each of that maker's tokens\n            uint makerTokensLength = order.maker_tokens[i].length;\n            uint takerTokensLength = order.taker_tokens[i].length;\n            for (uint256 j = 0; j < makerTokensLength; j++) {\n                require(\n                    // transfer those tokens to the receiver\n                    makerTransferFunds(\n                        order.maker_addresses[i],\n                        order.receiver,\n                        order.maker_amounts[i][j],\n                        order.maker_tokens[i][j]\n                    )\n                );\n            }\n\n            // for each of the takers tokens (corresponding to each maker)\n            for (uint k = 0; k < takerTokensLength; k++){\n                // transfer each of those tokens to the corresponding maker\n                IERC20(address(order.taker_tokens[i][k])).safeTransferFrom(\n                    order.taker_address,\n                    order.maker_addresses[i],\n                    order.taker_amounts[i][k]\n                );\n            }\n        }\n\n        emit AggregateOrderExecuted(\n            h\n        );\n\n        return true;\n    }\n}\n"
    },
    "src/contracts/interface/bebop_aggregation_contract.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nenum SignatureType {\n    EIP712,  //0\n    EIP1271, //1\n    ETHSIGN  //2\n}\n\nstruct Signature {\n    SignatureType signatureType;\n    bytes signatureBytes;\n}\n\nstruct AggregateOrder {\n    uint256 expiry;\n    address taker_address;\n    address[] maker_addresses;\n    uint256[] maker_nonces;\n    address[][] taker_tokens;\n    address[][] maker_tokens;\n    uint256[][] taker_amounts;\n    uint256[][] maker_amounts;\n    address receiver;\n}\n\nstruct PartialOrder {\n    uint256 expiry;\n    address taker_address;\n    address maker_address;\n    uint256 maker_nonce;\n    address[] taker_tokens;\n    address[] maker_tokens;\n    uint256[] taker_amounts;\n    uint256[] maker_amounts;\n    address receiver;\n}\n\ninterface IBebopAggregationContract {\n    event AggregateOrderExecuted(\n        bytes32 order_hash\n    );\n\n    event OrderSignerRegistered(address maker, address signer, bool allowed);\n\n    function hashAggregateOrder(AggregateOrder memory order) external view returns (bytes32);\n    function hashPartialOrder(PartialOrder memory order) external view returns (bytes32);\n    function registerAllowedOrderSigner(address signer, bool allowed) external;\n\n    function validateMakerSignature(\n        address maker_address,\n        bytes32 hash,\n        Signature memory signature\n    ) external view;\n\n    function SettleAggregateOrder(\n        AggregateOrder memory order,\n        bytes memory takerSig,\n        Signature[] memory makerSigs\n    ) external payable returns (bool);\n\n}"
    },
    "src/contracts/token/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}"
    },
    "src/contracts/token/ERC20/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}"
    },
    "src/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "src/contracts/token/ERC20/SafeER20.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"../Address.sol\";\nimport \"./IERC20.sol\";\nimport \"./draft-IERC20Permit.sol\"; /**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n    unchecked {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n        uint256 newAllowance = oldAllowance - value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}