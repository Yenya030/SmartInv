{{
  "language": "Solidity",
  "sources": {
    "SimpleVaultMigrator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\npragma solidity ^0.8.15;\n\nimport \"SafeERC20.sol\";\n\ninterface IVaultAPI is IERC20 {\n    function deposit(uint256 _amount, address recipient)\n        external\n        returns (uint256 shares);\n\n    function withdraw(uint256 _shares) external;\n\n    function token() external view returns (address);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        bytes calldata signature\n    ) external returns (bool);\n}\n\ninterface IRegistry {\n    function latestVault(address token) external view returns (address);\n}\n\n/// @title Yearn Simple Vault Migrator\n/// @author yearn\n/// @notice This contract is used to migrate from an older to a newer version of a yearn vault.\n/// @dev Contract can only migrate to the newest version of a vault for a token. Migration\n///  must be between vaults that have the same underlying token. Gasless approval via permit()\n///  is an option for all v2 yearn vault API versions except 0.4.4.\n\ncontract SimpleVaultMigrator {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IVaultAPI;\n\n    /* ========== STATE VARIABLES ========== */\n\n    /// @notice Governance can update the registry and sweep stuck tokens.\n    address public governance;\n\n    /// @notice New address must be set by current gov and then accepted to transfer power.\n    address public pendingGovernance;\n\n    /// @notice Vault registry to pull info about yearn vaults. This will vary based on network.\n    address public registry;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _governance, address _registry) {\n        require(_governance != address(0), \"Governance cannot be 0\");\n        require(_registry != address(0), \"Registry cannot be 0\");\n        governance = _governance;\n\n        registry = _registry;\n    }\n\n    /* ========== EVENTS ========== */\n    event NewGovernance(address indexed governance);\n\n    event NewRegistry(address indexed registry);\n\n    event SuccessfulMigration(\n        address indexed user,\n        address indexed vaultFrom,\n        address indexed vaultTo,\n        uint256 migratedAmount\n    );\n\n    /* ========== MODIFIERS ========== */\n    modifier onlyGovernance {\n        require(msg.sender == governance, \"Sender must be governance\");\n        _;\n    }\n\n    modifier onlyPendingGovernance {\n        require(\n            msg.sender == pendingGovernance,\n            \"Sender must be pending governance\"\n        );\n        _;\n    }\n\n    modifier checkVaults(address vaultFrom, address vaultTo) {\n        require(\n            IVaultAPI(vaultFrom).token() == IVaultAPI(vaultTo).token(),\n            \"Vaults must have the same token\"\n        );\n        require(\n            IRegistry(registry).latestVault(IVaultAPI(vaultFrom).token()) ==\n                vaultTo,\n            \"Target vault should be the latest for token\"\n        );\n        _;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Migrate all of our vault shares to the newest vault version.\n     * @dev Throws if the vaults do not have the same want, or if our\n     *  target is not the newest version\n     * @param vaultFrom The old vault we are migrating from.\n     * @param vaultTo The new vault we are migrating to.\n     */\n    function migrateAll(address vaultFrom, address vaultTo) external {\n        uint256 shares = IVaultAPI(vaultFrom).balanceOf(msg.sender);\n\n        _migrate(vaultFrom, vaultTo, shares);\n    }\n\n    /**\n     * @notice Migrate a specific amount of our vault shares to the newest vault version.\n     * @dev Throws if the vaults do not have the same want, or if our\n     *  target is not the newest version\n     * @param vaultFrom The old vault we are migrating from.\n     * @param vaultTo The new vault we are migrating to.\n     * @param shares The number of shares to migrate.\n     */\n    function migrateShares(\n        address vaultFrom,\n        address vaultTo,\n        uint256 shares\n    ) external {\n        _migrate(vaultFrom, vaultTo, shares);\n    }\n\n    function _migrate(\n        address vaultFrom,\n        address vaultTo,\n        uint256 shares\n    ) internal checkVaults(vaultFrom, vaultTo) {\n        // Transfer in vaultFrom shares\n        IVaultAPI vf = IVaultAPI(vaultFrom);\n\n        uint256 preBalanceVaultFrom = vf.balanceOf(address(this));\n\n        vf.safeTransferFrom(msg.sender, address(this), shares);\n\n        uint256 balanceVaultFrom =\n            vf.balanceOf(address(this)) - preBalanceVaultFrom;\n\n        // Withdraw token from vaultFrom\n        IERC20 token = IERC20(vf.token());\n\n        uint256 preBalanceToken = token.balanceOf(address(this));\n\n        vf.withdraw(balanceVaultFrom);\n\n        uint256 balanceToken = token.balanceOf(address(this)) - preBalanceToken;\n\n        // Deposit new vault\n        token.safeIncreaseAllowance(vaultTo, balanceToken);\n\n        IVaultAPI(vaultTo).deposit(balanceToken, msg.sender);\n        emit SuccessfulMigration(msg.sender, vaultFrom, vaultTo, shares);\n    }\n\n    /**\n     * @notice Migrate all of our vault shares to the newest\n     *  vault version using the permit function for gasless approvals.\n     * @dev Throws if the vaults do not have the same want, or if our\n     *  target is not the newest version. Cannot be used with 0.4.4 vaults.\n     * @param vaultFrom The old vault we are migrating from.\n     * @param vaultTo The new vault we are migrating to.\n     * @param deadline The deadline for our permit call.\n     * @param signature The signature for our permit call.\n     */\n    function migrateAllWithPermit(\n        address vaultFrom,\n        address vaultTo,\n        uint256 deadline,\n        bytes calldata signature\n    ) external {\n        uint256 shares = IVaultAPI(vaultFrom).balanceOf(msg.sender);\n\n        _permit(vaultFrom, shares, deadline, signature);\n        _migrate(vaultFrom, vaultTo, shares);\n    }\n\n    /**\n     * @notice Migrate a specific amount of our vault shares to the newest\n     *  vault version using the permit function for gasless approvals.\n     * @dev Throws if the vaults do not have the same want, or if our\n     *  target is not the newest version. Cannot be used with 0.4.4 vaults.\n     * @param vaultFrom The old vault we are migrating from.\n     * @param vaultTo The new vault we are migrating to.\n     * @param shares The number of shares to migrate.\n     * @param deadline The deadline for our permit call.\n     * @param signature The signature for our permit call.\n     */\n    function migrateSharesWithPermit(\n        address vaultFrom,\n        address vaultTo,\n        uint256 shares,\n        uint256 deadline,\n        bytes calldata signature\n    ) external {\n        _permit(vaultFrom, shares, deadline, signature);\n        _migrate(vaultFrom, vaultTo, shares);\n    }\n\n    function _permit(\n        address vault,\n        uint256 value,\n        uint256 deadline,\n        bytes calldata signature\n    ) internal {\n        require(\n            IVaultAPI(vault).permit(\n                msg.sender,\n                address(this),\n                value,\n                deadline,\n                signature\n            ),\n            \"Unable to permit on vault\"\n        );\n    }\n\n    /**\n     * @notice Sweep out any tokens accidentally sent to this address.\n     * @dev Throws if the caller is not current governance.\n     * @param _token The token address to sweep out.\n     */\n    function sweep(address _token) external onlyGovernance {\n        IERC20(_token).safeTransfer(\n            governance,\n            IERC20(_token).balanceOf(address(this))\n        );\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Starts the 1st phase of the governance transfer.\n     * @dev Throws if the caller is not current governance.\n     * @param _pendingGovernance The next governance address.\n     */\n    function setPendingGovernance(address _pendingGovernance)\n        external\n        onlyGovernance\n    {\n        pendingGovernance = _pendingGovernance;\n    }\n\n    /**\n     * @notice Completes the 2nd phase of the governance transfer.\n     * @dev Throws if the caller is not the pending caller.\n     *  Emits a NewGovernance event.\n     */\n    function acceptGovernance() external onlyPendingGovernance {\n        governance = msg.sender;\n        pendingGovernance = address(0);\n        emit NewGovernance(msg.sender);\n    }\n\n    /**\n     * @notice Sets the address used for our registry.\n     * @dev Throws if the caller is not current governance or if using 0 as address.\n     * @param _registry The network's vault registry address.\n     */\n    function setRegistry(address _registry) external onlyGovernance {\n        require(_registry != address(0), \"Registry cannot be 0\");\n        registry = _registry;\n        emit NewRegistry(_registry);\n    }\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"draft-IERC20Permit.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "SimpleVaultMigrator.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}