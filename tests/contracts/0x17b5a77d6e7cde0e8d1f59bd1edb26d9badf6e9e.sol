{{
  "language": "Solidity",
  "sources": {
    "contracts/core/Relocker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport {RLBTRFLY} from \"contracts/core/RLBTRFLY.sol\";\n\nlibrary Common {\n    struct Claim {\n        address token;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n}\n\ninterface IRewardDistributor {\n    function claim(Common.Claim[] calldata claims) external;\n}\n\ncontract Relocker {\n    using SafeTransferLib for ERC20;\n\n    ERC20 public immutable btrfly;\n    RLBTRFLY public immutable rlBtrfly;\n    IRewardDistributor public immutable rewardDistributor;\n\n    event Relock(address indexed account, uint256 amount);\n\n    error ZeroAddress();\n    error ZeroAmount();\n\n    constructor(\n        address _btrfly,\n        address _rlBtrfly,\n        address _rewardDistributor\n    ) {\n        if (_btrfly == address(0)) revert ZeroAddress();\n        if (_rlBtrfly == address(0)) revert ZeroAddress();\n        if (_rewardDistributor == address(0)) revert ZeroAddress();\n\n        btrfly = ERC20(_btrfly);\n        rlBtrfly = RLBTRFLY(_rlBtrfly);\n        rewardDistributor = IRewardDistributor(_rewardDistributor);\n\n        btrfly.approve(_rlBtrfly, type(uint256).max);\n    }\n\n    /**\n        @notice Claim rewards based on the specified metadata and lock amount as rlBtrfly\n        @notice Use msg.sender not account parameter since relock is explicit action\n        @param  claims  Claim[]  List of claim metadata \n        @param  amount  uint256  Amount to relock, cheaper to calculate offchain\n     */\n    function claimAndLock(Common.Claim[] calldata claims, uint256 amount)\n        external\n    {\n        if (amount == 0) revert ZeroAmount();\n\n        rewardDistributor.claim(claims);\n        btrfly.safeTransferFrom(msg.sender, address(this), amount);\n        rlBtrfly.lock(msg.sender, amount);\n\n        emit Relock(msg.sender, amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*///////////////////////////////////////////////////////////////\n                                  EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*///////////////////////////////////////////////////////////////\n                             METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*///////////////////////////////////////////////////////////////\n                             EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    bytes32 public constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                              EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v, r, s);\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\nlibrary SafeTransferLib {\n    /*///////////////////////////////////////////////////////////////\n                            ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool callStatus;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                           ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 100 because the calldata length is 4 + 32 * 3.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool callStatus;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata to memory piece by piece:\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\n\n            // Call the token and store if it succeeded or not.\n            // We use 68 because the calldata length is 4 + 32 * 2.\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\n        }\n\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                         INTERNAL HELPER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\n        assembly {\n            // Get how many bytes the call returned.\n            let returnDataSize := returndatasize()\n\n            // If the call reverted:\n            if iszero(callStatus) {\n                // Copy the revert message into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Revert with the same message.\n                revert(0, returnDataSize)\n            }\n\n            switch returnDataSize\n            case 32 {\n                // Copy the return data into memory.\n                returndatacopy(0, 0, returnDataSize)\n\n                // Set success to whether it returned true.\n                success := iszero(iszero(mload(0)))\n            }\n            case 0 {\n                // There was no return data.\n                success := 1\n            }\n            default {\n                // It returned some malformed input.\n                success := 0\n            }\n        }\n    }\n}\n"
    },
    "contracts/core/RLBTRFLY.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport {ReentrancyGuard} from \"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\";\nimport {ERC20} from \"@rari-capital/solmate/src/tokens/ERC20.sol\";\nimport {SafeTransferLib} from \"@rari-capital/solmate/src/utils/SafeTransferLib.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title RLBTRFLY\n/// @author ████\n\n/**\n    @notice\n    Partially adapted from Convex's CvxLockerV2 contract with some modifications and optimizations for the BTRFLY V2 requirements\n*/\n\ncontract RLBTRFLY is ReentrancyGuard, Ownable {\n    using SafeTransferLib for ERC20;\n\n    /**\n        @notice Lock balance details\n        @param  amount      uint224  Locked amount in the lock\n        @param  unlockTime  uint32   Unlock time of the lock\n     */\n    struct LockedBalance {\n        uint224 amount;\n        uint32 unlockTime;\n    }\n\n    /**\n        @notice Balance details\n        @param  locked           uint224          Overall locked amount\n        @param  nextUnlockIndex  uint32           Index of earliest next unlock\n        @param  lockedBalances   LockedBalance[]  List of locked balances data\n     */\n    struct Balance {\n        uint224 locked;\n        uint32 nextUnlockIndex;\n        LockedBalance[] lockedBalances;\n    }\n\n    // 1 epoch = 1 week\n    uint32 public constant EPOCH_DURATION = 1 weeks;\n    // Full lock duration = 16 epochs\n    uint256 public constant LOCK_DURATION = 16 * EPOCH_DURATION;\n\n    ERC20 public immutable btrflyV2;\n\n    uint256 public lockedSupply;\n\n    mapping(address => Balance) public balances;\n\n    bool public isShutdown;\n\n    string public constant name = \"Revenue-Locked BTRFLY\";\n    string public constant symbol = \"rlBTRFLY\";\n    uint8 public constant decimals = 18;\n\n    event Shutdown();\n    event Locked(\n        address indexed account,\n        uint256 indexed epoch,\n        uint256 amount\n    );\n    event Withdrawn(address indexed account, uint256 amount, bool relock);\n\n    error ZeroAddress();\n    error ZeroAmount();\n    error IsShutdown();\n    error InvalidNumber(uint256 value);\n\n    /**\n        @param  _btrflyV2  address  BTRFLYV2 token address\n     */\n    constructor(address _btrflyV2) {\n        if (_btrflyV2 == address(0)) revert ZeroAddress();\n        btrflyV2 = ERC20(_btrflyV2);\n    }\n\n    /**\n        @notice Emergency method to shutdown the current locker contract which also force-unlock all locked tokens\n     */\n    function shutdown() external onlyOwner {\n        if (isShutdown) revert IsShutdown();\n\n        isShutdown = true;\n\n        emit Shutdown();\n    }\n\n    /**\n        @notice Locked balance of the specified account including those with expired locks\n        @param  account  address  Account\n        @return amount   uint256  Amount\n     */\n    function lockedBalanceOf(address account)\n        external\n        view\n        returns (uint256 amount)\n    {\n        return balances[account].locked;\n    }\n\n    /**\n        @notice Balance of the specified account by only including tokens in active locks\n        @param  account  address  Account\n        @return amount   uint256  Amount\n     */\n    function balanceOf(address account) external view returns (uint256 amount) {\n        // Using storage as it's actually cheaper than allocating a new memory based variable\n        Balance storage userBalance = balances[account];\n        LockedBalance[] storage locks = userBalance.lockedBalances;\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\n\n        amount = balances[account].locked;\n\n        uint256 locksLength = locks.length;\n\n        // Skip all old records\n        for (uint256 i = nextUnlockIndex; i < locksLength; ++i) {\n            if (locks[i].unlockTime <= block.timestamp) {\n                amount -= locks[i].amount;\n            } else {\n                break;\n            }\n        }\n\n        // Remove amount locked in the next epoch\n        if (\n            locksLength > 0 &&\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\n            getCurrentEpoch()\n        ) {\n            amount -= locks[locksLength - 1].amount;\n        }\n\n        return amount;\n    }\n\n    /**\n        @notice Pending locked amount at the specified account\n        @param  account  address  Account\n        @return amount   uint256  Amount\n     */\n    function pendingLockOf(address account)\n        external\n        view\n        returns (uint256 amount)\n    {\n        LockedBalance[] storage locks = balances[account].lockedBalances;\n\n        uint256 locksLength = locks.length;\n\n        if (\n            locksLength > 0 &&\n            uint256(locks[locksLength - 1].unlockTime) - LOCK_DURATION >\n            getCurrentEpoch()\n        ) {\n            return locks[locksLength - 1].amount;\n        }\n\n        return 0;\n    }\n\n    /**\n        @notice Locked balances details for the specifed account\n        @param  account     address          Account\n        @return total       uint256          Total amount\n        @return unlockable  uint256          Unlockable amount\n        @return locked      uint256          Locked amount\n        @return lockData    LockedBalance[]  List of active locks\n     */\n    function lockedBalances(address account)\n        external\n        view\n        returns (\n            uint256 total,\n            uint256 unlockable,\n            uint256 locked,\n            LockedBalance[] memory lockData\n        )\n    {\n        Balance storage userBalance = balances[account];\n        LockedBalance[] storage locks = userBalance.lockedBalances;\n        uint256 nextUnlockIndex = userBalance.nextUnlockIndex;\n        uint256 idx;\n\n        for (uint256 i = nextUnlockIndex; i < locks.length; ++i) {\n            if (locks[i].unlockTime > block.timestamp) {\n                if (idx == 0) {\n                    lockData = new LockedBalance[](locks.length - i);\n                }\n\n                lockData[idx] = locks[i];\n                locked += lockData[idx].amount;\n                ++idx;\n            } else {\n                unlockable += locks[i].amount;\n            }\n        }\n\n        return (userBalance.locked, unlockable, locked, lockData);\n    }\n\n    /**\n        @notice Get current epoch\n        @return uint256  Current epoch\n     */\n    function getCurrentEpoch() public view returns (uint256) {\n        return (block.timestamp / EPOCH_DURATION) * EPOCH_DURATION;\n    }\n\n    /**\n        @notice Locked tokens cannot be withdrawn for the entire lock duration and are eligible to receive rewards\n        @param  account  address  Account\n        @param  amount   uint256  Amount\n     */\n    function lock(address account, uint256 amount) external nonReentrant {\n        if (account == address(0)) revert ZeroAddress();\n        if (amount == 0) revert ZeroAmount();\n\n        btrflyV2.safeTransferFrom(msg.sender, address(this), amount);\n\n        _lock(account, amount);\n    }\n\n    /**\n        @notice Perform the actual lock\n        @param  account  address  Account\n        @param  amount   uint256  Amount\n     */\n    function _lock(address account, uint256 amount) internal {\n        if (isShutdown) revert IsShutdown();\n\n        Balance storage balance = balances[account];\n\n        uint224 lockAmount = _toUint224(amount);\n\n        balance.locked += lockAmount;\n        lockedSupply += lockAmount;\n\n        uint256 lockEpoch = getCurrentEpoch() + EPOCH_DURATION;\n        uint256 unlockTime = lockEpoch + LOCK_DURATION;\n        LockedBalance[] storage locks = balance.lockedBalances;\n        uint256 idx = locks.length;\n\n        // If the latest user lock is smaller than this lock, add a new entry to the end of the list\n        // else, append it to the latest user lock\n        if (idx == 0 || locks[idx - 1].unlockTime < unlockTime) {\n            locks.push(\n                LockedBalance({\n                    amount: lockAmount,\n                    unlockTime: _toUint32(unlockTime)\n                })\n            );\n        } else {\n            locks[idx - 1].amount += lockAmount;\n        }\n\n        emit Locked(account, lockEpoch, amount);\n    }\n\n    /**\n        @notice Withdraw all currently locked tokens where the unlock time has passed\n        @param  account     address  Account\n        @param  relock      bool     Whether should relock\n        @param  withdrawTo  address  Target receiver\n     */\n    function _processExpiredLocks(\n        address account,\n        bool relock,\n        address withdrawTo\n    ) internal {\n        // Using storage as it's actually cheaper than allocating a new memory based variable\n        Balance storage userBalance = balances[account];\n        LockedBalance[] storage locks = userBalance.lockedBalances;\n        uint224 locked;\n        uint256 length = locks.length;\n\n        if (isShutdown || locks[length - 1].unlockTime <= block.timestamp) {\n            locked = userBalance.locked;\n            userBalance.nextUnlockIndex = _toUint32(length);\n        } else {\n            // Using nextUnlockIndex to reduce the number of loops\n            uint32 nextUnlockIndex = userBalance.nextUnlockIndex;\n\n            for (uint256 i = nextUnlockIndex; i < length; ++i) {\n                // Unlock time must be less or equal to time\n                if (locks[i].unlockTime > block.timestamp) break;\n\n                // Add to cumulative amounts\n                locked += locks[i].amount;\n                ++nextUnlockIndex;\n            }\n\n            // Update the account's next unlock index\n            userBalance.nextUnlockIndex = nextUnlockIndex;\n        }\n\n        if (locked == 0) revert ZeroAmount();\n\n        // Update user balances and total supplies\n        userBalance.locked -= locked;\n        lockedSupply -= locked;\n\n        emit Withdrawn(account, locked, relock);\n\n        // Relock or return to user\n        if (relock) {\n            _lock(withdrawTo, locked);\n        } else {\n            btrflyV2.safeTransfer(withdrawTo, locked);\n        }\n    }\n\n    /**\n        @notice Withdraw expired locks to a different address\n        @param  to  address  Target receiver\n     */\n    function withdrawExpiredLocksTo(address to) external nonReentrant {\n        if (to == address(0)) revert ZeroAddress();\n\n        _processExpiredLocks(msg.sender, false, to);\n    }\n\n    /**\n        @notice Withdraw/relock all currently locked tokens where the unlock time has passed\n        @param  relock  bool  Whether should relock\n     */\n    function processExpiredLocks(bool relock) external nonReentrant {\n        _processExpiredLocks(msg.sender, relock, msg.sender);\n    }\n\n    /**\n        @notice Validate and cast a uint256 integer to uint224\n        @param  value  uint256  Value\n        @return        uint224  Casted value\n     */\n    function _toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) revert InvalidNumber(value);\n\n        return uint224(value);\n    }\n\n    /**\n        @notice Validate and cast a uint256 integer to uint32\n        @param  value  uint256  Value\n        @return        uint32   Casted value\n     */\n    function _toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) revert InvalidNumber(value);\n\n        return uint32(value);\n    }\n}\n"
    },
    "@rari-capital/solmate/src/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private reentrancyStatus = 1;\n\n    modifier nonReentrant() {\n        require(reentrancyStatus == 1, \"REENTRANCY\");\n\n        reentrancyStatus = 2;\n\n        _;\n\n        reentrancyStatus = 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}