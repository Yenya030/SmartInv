{{
  "language": "Solidity",
  "sources": {
    "contracts/SwoleMice.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\r\nimport \"./TinyERC721.sol\";\r\n\r\n//  _________             .__            _____  .__              \r\n// /   _____/_  _  ______ |  |   ____   /     \\ |__| ____  ____  \r\n// \\_____  \\\\ \\/ \\/ /  _ \\|  | _/ __ \\ /  \\ /  \\|  |/ ___\\/ __ \\ \r\n// /        \\\\     (  <_> )  |_\\  ___//    Y    \\  \\  \\__\\  ___/ \r\n///_______  / \\/\\_/ \\____/|____/\\___  >____|__  /__|\\___  >___  >\r\n//        \\/                        \\/        \\/        \\/    \\/ \r\n//\r\n// Made by @nft_ved\r\n\r\ncontract SwoleMice is TinyERC721, Ownable {\r\n\r\n    uint256 public constant MAX_SUPPLY = 3333;\r\n    uint256 public maxPer = 6;\r\n    bool public isPublicActive = false;\r\n\r\n    mapping(address => uint256) private _minted;\r\n\r\n    constructor() TinyERC721(\"SwoleMice\", \"SWOLEM\", 3) {\r\n        _safeMint(_msgSender(), 1);\r\n    }\r\n\r\n    // View\r\n    function _calculateAux(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes12 current\r\n    ) internal view virtual override returns (bytes12) {\r\n        return\r\n            from == address(0)\r\n                ? bytes12(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            tokenId,\r\n                            to,\r\n                            block.difficulty,\r\n                            block.timestamp\r\n                        )\r\n                    )\r\n                )\r\n                : current;\r\n    }\r\n\r\n    function colorHash(uint256 tokenId) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(tokenId, _tokenData(tokenId).aux));\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n\r\n        return(\r\n            string(\r\n                abi.encodePacked(\r\n                    \"data:application/json;base64,\",\r\n                    Base64.encode(bytes(\r\n                                abi.encodePacked(\r\n                                    '{\"name\": \"SwoleMouse #',\r\n                                    Strings.toString(tokenId),\r\n                                    '\", \"description\": \"SwoleMice are a 100% on-chain swole collection. Arm days only.\", \"image\": \"data:image/svg+xml;base64,',\r\n                                    Base64.encode(bytes(hashToSVG(bytes32ToLiteralString(colorHash(tokenId))))),\r\n                                    '\"}'\r\n                                )\r\n                    ))\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // External\r\n    function mint(uint256 quantity) external {\r\n        require(isPublicActive, \"Minting is not open\");\r\n        require(quantity <= maxPer, \"Too many mints per tx\");\r\n        require(_minted[msg.sender] + quantity <= maxPer, \"Too many mints per wallet\");\r\n        require(\r\n            totalSupply() + quantity <= MAX_SUPPLY,\r\n            \"Not enough mints left\"\r\n        );\r\n        _safeMint(msg.sender, quantity);\r\n        _minted[msg.sender] += quantity;\r\n    }\r\n\r\n    // Owner\r\n    function setMaxPer(uint256 _maxPer) external onlyOwner {\r\n        maxPer = _maxPer;\r\n    }\r\n\r\n    function setIsPublicActive(bool _isPublicActive) external onlyOwner{\r\n        isPublicActive = _isPublicActive;\r\n    }\r\n\r\n    // Internal \r\n\r\n    function substring(\r\n        string memory str,\r\n        uint256 startIndex,\r\n        uint256 endIndex\r\n    ) internal pure returns (string memory) {\r\n        bytes memory strBytes = bytes(str);\r\n        bytes memory result = new bytes(endIndex - startIndex);\r\n        for (uint256 i = startIndex; i < endIndex; i++) {\r\n            result[i - startIndex] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function bytes32ToLiteralString(bytes32 data)\r\n        internal\r\n        pure\r\n        returns (string memory result)\r\n    {\r\n        bytes memory temp = new bytes(65);\r\n        uint256 count;\r\n\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            bytes1 currentByte = bytes1(data << (i * 8));\r\n\r\n            uint8 c1 = uint8(bytes1((currentByte << 4) >> 4));\r\n\r\n            uint8 c2 = uint8(bytes1((currentByte >> 4)));\r\n\r\n            if (c2 >= 0 && c2 <= 9) temp[++count] = bytes1(c2 + 48);\r\n            else temp[++count] = bytes1(c2 + 87);\r\n\r\n            if (c1 >= 0 && c1 <= 9) temp[++count] = bytes1(c1 + 48);\r\n            else temp[++count] = bytes1(c1 + 87);\r\n        }\r\n\r\n        result = string(temp);\r\n    }\r\n\r\n        function hashToSVG(string memory _hash)\r\n        internal\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        string memory svgString;\r\n\r\n        string memory backgroundColor = string.concat(string.concat('.c11{fill:#', substring(_hash, 1, 7)),'}');\r\n        string memory topColor = string.concat(string.concat('.c10{fill:#', substring(_hash, 7, 13)),'}');\r\n        string memory leftEye = string.concat(string.concat('.c06{fill:#', substring(_hash, 13, 19)),'}');\r\n        string memory rightEye = string.concat(string.concat('.c07{fill:#', substring(_hash, 19, 25)),'}');\r\n        string memory eyes = string.concat(leftEye, rightEye);\r\n        string memory backs = string.concat(topColor, backgroundColor);\r\n        string memory styleString = string.concat(string.concat(string.concat(string.concat('<style>#swol-mouse-svg{shape-rendering: crispedges;} .c00{fill:#8B93AF}.c01{fill:#DAE0EA}.c02{fill:#B3B9D1}.c03{fill:#F5A097}.c04{fill:#403353}.c05{fill:#6D758D}',eyes),'.c08{fill:#000000}.c09{fill:#4B1E0B}'),backs),'</style>');\r\n\r\n        string memory svgBody = '<svg id=\"swol-mouse-svg\" version=\"1.1\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"> <rect class=\"c11\" width=\"100%\" height=\"100%\" /> <rect class=\"c00\" x=\"8\" y=\"9\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"9\" y=\"9\" width=\"1\" height=\"1\"/> <rect class=\"c00\" x=\"13\" y=\"9\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"14\" y=\"9\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c03\" x=\"9\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"10\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"12\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"13\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"14\" y=\"10\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"9\" y=\"11\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"10\" y=\"11\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"11\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"12\" y=\"11\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"13\" y=\"11\" width=\"1\" height=\"1\"/> <rect class=\"c04\" x=\"8\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c05\" x=\"9\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c05\" x=\"10\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c06\" x=\"11\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c05\" x=\"12\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c07\" x=\"13\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c04\" x=\"15\" y=\"12\" width=\"1\" height=\"1\" /> <rect class=\"c04\" x=\"9\" y=\"13\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"10\" y=\"13\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"13\" width=\"1\" height=\"1\"/> <rect class=\"c08\" x=\"12\" y=\"13\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"13\" y=\"13\" width=\"1\" height=\"1\"/> <rect class=\"c04\" x=\"14\" y=\"13\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"9\" y=\"14\" width=\"1\" height=\"1\"/> <rect class=\"c04\" x=\"10\" y=\"14\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"11\" y=\"14\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"12\" y=\"14\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"13\" y=\"14\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"16\" y=\"14\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"17\" y=\"14\" width=\"1\" height=\"1\"/> <rect x=\"9\" y=\"15\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"10\" y=\"15\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"15\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"12\" y=\"15\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"13\" y=\"15\" width=\"1\" height=\"1\"/> <rect x=\"14\" y=\"15\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"16\" y=\"15\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"17\" y=\"15\" width=\"1\" height=\"1\"/> <rect x=\"8\" y=\"16\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"10\" y=\"16\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"16\" width=\"1\" height=\"1\"/> <rect x=\"15\" y=\"16\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"17\" y=\"16\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"17\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"10\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"12\" y=\"17\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"14\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"15\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"17\" y=\"17\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"7\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"8\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"18\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"10\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"11\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"12\" y=\"18\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"13\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"14\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"15\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"16\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"17\" y=\"18\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"7\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"8\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"19\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"10\" y=\"19\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"11\" y=\"19\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"12\" y=\"19\" width=\"1\" height=\"1\" /> <rect class=\"c02\" x=\"13\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"14\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"15\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"16\" y=\"19\" width=\"1\" height=\"1\"/> <rect class=\"c01\" x=\"7\" y=\"20\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"20\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"20\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"10\" y=\"20\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"11\" y=\"20\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"12\" y=\"20\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"7\" y=\"21\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"21\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"21\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"10\" y=\"21\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"11\" y=\"21\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"12\" y=\"21\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"7\" y=\"22\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"22\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"22\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"10\" y=\"22\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"11\" y=\"22\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"12\" y=\"22\" width=\"1\" height=\"1\" /> <rect class=\"c01\" x=\"7\" y=\"23\" width=\"1\" height=\"1\"/> <rect class=\"c02\" x=\"8\" y=\"23\" width=\"1\" height=\"1\"/> <rect class=\"c10\" x=\"9\" y=\"23\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"10\" y=\"23\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"11\" y=\"23\" width=\"1\" height=\"1\" /> <rect class=\"c10\" x=\"12\" y=\"23\" width=\"1\" height=\"1\" />';\r\n\r\n        svgString = string(\r\n            abi.encodePacked(\r\n                svgBody,\r\n                styleString,\r\n                '</svg>'\r\n            )\r\n        );\r\n\r\n        return svgString;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/TinyERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\nerror ApprovalCallerNotOwnerNorApproved();\r\nerror ApprovalQueryForNonexistentToken();\r\nerror ApproveToCaller();\r\nerror ApprovalToCurrentOwner();\r\nerror BalanceQueryForZeroAddress();\r\nerror MintToZeroAddress();\r\nerror MintZeroQuantity();\r\nerror TokenDataQueryForNonexistentToken();\r\nerror OwnerQueryForNonexistentToken();\r\nerror OperatorQueryForNonexistentToken();\r\nerror TransferCallerNotOwnerNorApproved();\r\nerror TransferFromIncorrectOwner();\r\nerror TransferToNonERC721ReceiverImplementer();\r\nerror TransferToZeroAddress();\r\nerror URIQueryForNonexistentToken();\r\n\r\ncontract TinyERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenData {\r\n        address owner;\r\n        bytes12 aux;\r\n    }\r\n\r\n    uint256 private immutable _maxBatchSize;\r\n\r\n    mapping(uint256 => TokenData) private _tokens;\r\n    uint256 private _mintCounter;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _maxBatchSize = maxBatchSize_;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _mintCounter;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n\r\n        uint256 total = totalSupply();\r\n        uint256 count;\r\n        address lastOwner;\r\n        for (uint256 i; i < total; ++i) {\r\n            address tokenOwner = _tokens[i].owner;\r\n            if (tokenOwner != address(0)) lastOwner = tokenOwner;\r\n            if (lastOwner == owner) ++count;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    function _tokenData(uint256 tokenId) internal view returns (TokenData storage) {\r\n        if (!_exists(tokenId)) revert TokenDataQueryForNonexistentToken();\r\n\r\n        TokenData storage token = _tokens[tokenId];\r\n        uint256 currentIndex = tokenId;\r\n        while (token.owner == address(0)) {\r\n            unchecked {\r\n                --currentIndex;\r\n            }\r\n            token = _tokens[currentIndex];\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert OwnerQueryForNonexistentToken();\r\n        return _tokenData(tokenId).owner;\r\n    }\r\n\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        address owner = token.owner;\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\r\n            revert ApprovalCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _approve(to, tokenId, token);\r\n    }\r\n\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSender()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId, token)) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        _transfer(from, to, tokenId, token);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        TokenData memory token = _tokenData(tokenId);\r\n        if (!_isApprovedOrOwner(_msgSender(), tokenId, token)) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        _safeTransfer(from, to, tokenId, token, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId, token);\r\n\r\n        if (to.isContract() && !_checkOnERC721Received(from, to, tokenId, _data))\r\n            revert TransferToNonERC721ReceiverImplementer();\r\n    }\r\n\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return tokenId < _mintCounter;\r\n    }\r\n\r\n    function _isApprovedOrOwner(\r\n        address spender,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal view virtual returns (bool) {\r\n        address owner = token.owner;\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        uint256 startTokenId = _mintCounter;\r\n        _mint(to, quantity);\r\n\r\n        if (to.isContract()) {\r\n            unchecked {\r\n                for (uint256 i; i < quantity; ++i) {\r\n                    if (!_checkOnERC721Received(address(0), to, startTokenId + i, _data))\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        uint256 startTokenId = _mintCounter;\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        unchecked {\r\n            for (uint256 i; i < quantity; ++i) {\r\n                if (_maxBatchSize == 0 ? i == 0 : i % _maxBatchSize == 0) {\r\n                    TokenData storage token = _tokens[startTokenId + i];\r\n                    token.owner = to;\r\n                    token.aux = _calculateAux(address(0), to, startTokenId + i, 0);\r\n                }\r\n\r\n                emit Transfer(address(0), to, startTokenId + i);\r\n            }\r\n            _mintCounter += quantity;\r\n        }\r\n\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal virtual {\r\n        if (token.owner != from) revert TransferFromIncorrectOwner();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        _approve(address(0), tokenId, token);\r\n\r\n        unchecked {\r\n            uint256 nextTokenId = tokenId + 1;\r\n            if (_exists(nextTokenId)) {\r\n                TokenData storage nextToken = _tokens[nextTokenId];\r\n                if (nextToken.owner == address(0)) {\r\n                    nextToken.owner = token.owner;\r\n                    nextToken.aux = token.aux;\r\n                }\r\n            }\r\n        }\r\n\r\n        TokenData storage newToken = _tokens[tokenId];\r\n        newToken.owner = to;\r\n        newToken.aux = _calculateAux(from, to, tokenId, token.aux);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    function _calculateAux(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes12 current\r\n    ) internal view virtual returns (bytes12) {}\r\n\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        TokenData memory token\r\n    ) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(token.owner, to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n            return retval == IERC721Receiver.onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}