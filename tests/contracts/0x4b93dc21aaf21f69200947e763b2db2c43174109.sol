{{
  "language": "Solidity",
  "sources": {
    "contracts/Marketplace.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/\n/**\n * @dev: @brougkr\n */\npragma solidity 0.8.12;\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Marketplace is Ownable, ReentrancyGuard\n{\n    /***************************/\n    /********** STRUCT *********/\n    /***************************/\n\n    struct Sale\n    {\n        string Name;\n        uint PriceBrightList;\n        uint PricePublic;\n        uint StartingIndex;\n        uint EndingIndex;\n        uint PurchaseableAmountBrightList;\n        uint PurchaseableAmountPublic;\n        uint ERC_TYPE;\n        address ContractAddress;\n        address Operator;\n        bytes32 Root;\n        bool ActivePublic;\n        bool ActiveBrightList;\n        bool AllowMultiplePurchases;\n    }\n\n    /***************************/\n    /********* MAPPINGS ********/\n    /***************************/\n\n    mapping(uint => Sale) private Sales;\n    mapping(uint => uint) public SaleProceeds;\n    mapping(address => bytes32) public BRTOperators;\n    mapping(uint => mapping(address => bool)) public MarketplacePurchased;\n    mapping(uint => mapping(address => uint)) public PurchasedAmountBrightList;\n    mapping(uint => mapping(address => uint)) public PurchasedAmountPublic;\n\n    /***************************/\n    /********** EVENTS *********/\n    /***************************/\n\n    /**\n     * @dev Emitted When A BrightList Purchase Occurs\n     */\n    event MarketplacePurchaseEventBrightList(\n        address indexed recipientAddress, \n        uint indexed SaleIndex, \n        uint amount\n    );\n\n    /**\n     * @dev Emitted When A Public Purchase Occurs\n     */\n    event MarketplacePurchaseEvent(\n        address indexed recipientAddress, \n        uint indexed SaleIndex, \n        uint amount\n    );\n\n    /**\n     * @dev Emitted When A Sale Has Started\n     */\n    event SaleStarted(\n        string Name,\n        address ContractAddress, \n        bytes32 RootHash, \n        address Operator, \n        bool ActivePublic,\n        bool ActiveBrightList,\n        bool AllowMultiplePurchases\n    );\n\n    /**\n     * @dev Emitted When A Batch Of Sales Have Been Initialized\n     */\n    event SalesStarted(uint StartingSaleIndex, uint EndingSaleIndex);\n\n    /**\n     * @dev Emitted When Various State Variables Are Modified\n     */\n    event SaleEnded(uint SaleIndex);\n    event SaleChangedName(uint indexed SaleIndex, string OldName, string NewName);\n    event SaleChangedStartingIndex(uint indexed SaleIndex, uint OldStartingIndex, uint NewStartingIndex);\n    event SaleChangedEndingIndex(uint indexed SaleIndex, uint OldEndingIndex, uint NewEndingIndex);\n    event SaleChangedAllocationPublic(uint indexed SaleIndex, uint OldAllocation, uint NewAllocation);\n    event SaleChangedAllocationBrightList(uint indexed SaleIndex, uint OldAllocation, uint NewAllocation);\n    event SaleChangedPriceBrightList(uint indexed SaleIndex, uint OldPrice, uint NewPrice);\n    event SaleChangedPricePublic(uint indexed SaleIndex, uint OldPrice, uint NewPrice);\n    event SaleChangedERC_TYPE(uint indexed SaleIndex, uint OLD_ERC_TYPE, uint NEW_ERC_TYPE);\n    event SaleChangedContract(uint indexed SaleIndex, address OldContract, address NewContract);\n    event SaleChangedRoot(uint indexed SaleIndex, bytes32 OldRoot, bytes32 NewRoot);\n    event SaleChangedOperator(uint indexed SaleIndex, address OldOperator, address NewOperator);\n    event SaleChangedActiveState(uint indexed SaleIndex, bool OldState, bool NewState);\n    event SaleChangedActiveStateBrightList(uint indexed SaleIndex, bool OldState, bool NewState);\n    event SaleChangedActiveStatesPublic(uint[] SaleIndexes, bool[] States);\n    event SaleChangedActiveStatesBrightList(uint[] SaleIndexes, bool[] States);\n\n    /**\n     * @dev Emitted When BRT Multisig Adds Or Removes An Operator\n     */\n    event OperatorAdded(address Operator);\n    event OperatorRemoved(address Operator);\n\n    /**\n     * @dev Amount Of Unique Marketplace Sales\n     */\n    uint public UniqueSaleIndex;\n\n    /**\n     * @dev BRT Operator Roles\n     */\n    bytes32 private immutable _OPERATOR = keccak256(\"OPERATOR\");\n    bytes32 private immutable _DEACTIVATED = 0x0;\n\n    /**\n     * @dev Constructor\n     */\n    constructor() \n    { \n        BRTOperators[0x5778B0B140Fa7a62B96c193cC8621e6E96c088A5] = _OPERATOR; //brougkr\n        BRTOperators[0x18782E9d3fB2E8D17CBF7a1F72c5f4e09E263734] = _OPERATOR; //jesse.brightmoments.eth\n        BRTOperators[0x18B7511938FBe2EE08ADf3d4A24edB00A5C9B783] = _OPERATOR; //phil.brightmoments.eth\n        BRTOperators[0xbf001FF749b7E793bbb1A612d09124470b9179A7] = _OPERATOR; //future\n    } \n\n    /***************************/\n    /***** PUBLIC FUNCTIONS ****/\n    /***************************/\n\n    /**\n     * @dev Marketplace Purchase Public Sale\n     */\n    function MarketplacePurchase(uint SaleIndex, uint Amount) public payable nonReentrant\n    { \n        require(Sales[SaleIndex].ActivePublic, \"Requested Sale Is Not Available For Public Purchases\");\n        require(Sales[SaleIndex].StartingIndex <= Sales[SaleIndex].EndingIndex, \"Sold Out\");\n        require(\n            PurchasedAmountPublic[SaleIndex][msg.sender] + Amount <= Sales[SaleIndex].PurchaseableAmountPublic,\n            \"User Has Used Up All Of Public Allocation For This Sale Index\"\n        );\n        if(!Sales[SaleIndex].AllowMultiplePurchases) { require(!MarketplacePurchased[SaleIndex][msg.sender], \"User Has Already Purchased This Sale Index\"); }\n        require(msg.value == Sales[SaleIndex].PricePublic * Amount && Amount > 0, \"Incorrect Ether Amount Or Token Amount Sent For Purchase\");\n        if(!MarketplacePurchased[SaleIndex][msg.sender]) { MarketplacePurchased[SaleIndex][msg.sender] = true; }\n        PurchasedAmountPublic[SaleIndex][msg.sender] += Amount;\n        for(uint i; i < Amount; i++)\n        {\n            if(Sales[SaleIndex].ERC_TYPE == 721)\n            {\n                IERC721(Sales[SaleIndex].ContractAddress).transferFrom(\n                    Sales[SaleIndex].Operator, \n                    msg.sender, \n                    Sales[SaleIndex].StartingIndex\n                );\n            }\n            else if(Sales[SaleIndex].ERC_TYPE == 1155)\n            {\n                IERC1155(Sales[SaleIndex].ContractAddress).safeTransferFrom(\n                    Sales[SaleIndex].Operator, \n                    msg.sender, \n                    Sales[SaleIndex].StartingIndex, \n                    1, \n                    \"BRT\"\n                );\n            }\n            Sales[SaleIndex].StartingIndex++;\n        }\n        SaleProceeds[SaleIndex] += msg.value;\n        emit MarketplacePurchaseEvent(msg.sender, SaleIndex, Amount);\n    }\n\n    /**\n     * @dev Marketplace Purchase BrightList Sale\n     */\n    function MarketplacePurchaseBrightList(uint SaleIndex, uint Amount, bytes32[] calldata Proof) public payable nonReentrant\n    {\n        require(Sales[SaleIndex].ActiveBrightList, \"Requested Sale Is Not Available For BrightList Purchases\");\n        require(Sales[SaleIndex].StartingIndex <= Sales[SaleIndex].EndingIndex, \"Sold Out\");\n        require(msg.value == Sales[SaleIndex].PriceBrightList * Amount && Amount > 0, \"Incorrect Ether Amount Or Token Amount Sent For Purchase\");\n        require(viewBrightListAllocation(msg.sender, SaleIndex, Proof), \"User Is Not On BrightList\");\n        require(\n            PurchasedAmountBrightList[SaleIndex][msg.sender] + Amount <= Sales[SaleIndex].PurchaseableAmountBrightList,\n            \"User Has Used Up All BrightList Allocation For This Sale Index\"\n        );\n        if(!Sales[SaleIndex].AllowMultiplePurchases) { require(!MarketplacePurchased[SaleIndex][msg.sender], \"User Has Already Purchased This Sale Index\"); }\n        if(!MarketplacePurchased[SaleIndex][msg.sender]) { MarketplacePurchased[SaleIndex][msg.sender] = true; }\n        PurchasedAmountBrightList[SaleIndex][msg.sender] += Amount;    \n        for(uint i; i < Amount; i++)\n        {\n            if(Sales[SaleIndex].ERC_TYPE == 721)\n            {\n                IERC721(Sales[SaleIndex].ContractAddress).transferFrom(\n                    Sales[SaleIndex].Operator,\n                    msg.sender, \n                    Sales[SaleIndex].StartingIndex\n                );\n            }\n            else if(Sales[SaleIndex].ERC_TYPE == 1155)\n            {\n                IERC1155(Sales[SaleIndex].ContractAddress).safeTransferFrom(\n                    Sales[SaleIndex].Operator,\n                    msg.sender, \n                    Sales[SaleIndex].StartingIndex, \n                    1, \n                    \"BRT\"\n                );\n            }\n            Sales[SaleIndex].StartingIndex++;\n        }\n        SaleProceeds[SaleIndex] += msg.value;\n        emit MarketplacePurchaseEventBrightList(msg.sender, SaleIndex, Amount);\n    }\n\n    /***************************/\n    /**** _OPERATOR COMMANDS ****/\n    /***************************/\n\n    /**\n     * @dev Sets Up A New Sale\n     * note: `Price` Is Input In WEI Due To Ethereum EVM. For Example, 1 ETH = 1000000000000000000 WEI\n     * note: `ERC_TYPE` Is (`721` for ERC721) || (`1155` for ERC1155)\n     * note: `ContractAddress` Is The NFT Contract Address\n     * note: `RootHash` Is Merkle Root Hash\n     * note: `Operator` Is The Wallet Providing The NFTs For Sale. They Will Have To setApprovalForAll() On This Contract\n     * note: `Public` & `AllowMultiplePurchases` Are Either `true` or `false`\n     */\n    function _StartSale(Sale memory NewSaleInstance) external onlyBRTOperator\n    {\n        //Checks Passed Variables\n        require(\n            NewSaleInstance.ERC_TYPE == 721 || NewSaleInstance.ERC_TYPE == 1155,\n            \"Incorrect ERC Type. (721 for ERC721) or (1155 for ERC1155)\"\n        );\n\n        //Auto-Increments The Unique Sale Index\n        UniqueSaleIndex++; \n\n        //Assigns State Variables To The New Sale Instance\n        Sales[UniqueSaleIndex].Name = NewSaleInstance.Name;\n        Sales[UniqueSaleIndex].PriceBrightList = NewSaleInstance.PriceBrightList;\n        Sales[UniqueSaleIndex].PricePublic = NewSaleInstance.PricePublic;\n        Sales[UniqueSaleIndex].StartingIndex = NewSaleInstance.StartingIndex;\n        Sales[UniqueSaleIndex].EndingIndex = NewSaleInstance.EndingIndex;\n        Sales[UniqueSaleIndex].PurchaseableAmountBrightList = NewSaleInstance.PurchaseableAmountBrightList;\n        Sales[UniqueSaleIndex].PurchaseableAmountPublic = NewSaleInstance.PurchaseableAmountPublic;\n        Sales[UniqueSaleIndex].ERC_TYPE = NewSaleInstance.ERC_TYPE;\n        Sales[UniqueSaleIndex].ContractAddress = NewSaleInstance.ContractAddress;\n        Sales[UniqueSaleIndex].Operator = NewSaleInstance.Operator;\n        Sales[UniqueSaleIndex].Root = NewSaleInstance.Root;\n        Sales[UniqueSaleIndex].ActivePublic = NewSaleInstance.ActivePublic;\n        Sales[UniqueSaleIndex].ActiveBrightList = NewSaleInstance.ActiveBrightList;\n        Sales[UniqueSaleIndex].AllowMultiplePurchases = NewSaleInstance.AllowMultiplePurchases;\n        \n        //Emits Base Data Of The New Sale Instance\n        emit SaleStarted(\n            Sales[UniqueSaleIndex].Name,\n            Sales[UniqueSaleIndex].ContractAddress, \n            Sales[UniqueSaleIndex].Root, \n            Sales[UniqueSaleIndex].Operator, \n            Sales[UniqueSaleIndex].ActivePublic,\n            Sales[UniqueSaleIndex].ActiveBrightList,\n            Sales[UniqueSaleIndex].AllowMultiplePurchases\n        );\n    }\n\n    /**\n     * @dev Batch Startes Multiple Sales\n     */\n    function _StartSales(Sale[] memory NewSaleInstance) external onlyBRTOperator   \n    {\n        uint StartingSaleIndex = UniqueSaleIndex;\n        for(uint i; i < NewSaleInstance.length; i++)\n        {\n            //Checks Passed Variables\n            require(\n                NewSaleInstance[i].ERC_TYPE == 721 || NewSaleInstance[i].ERC_TYPE == 1155,\n                \"Please Enter Valid ERC-TYPE, (721 for ERC-721), (1155 for ERC-1155)\"\n            );        \n\n            //Auto Increments Index    \n            UniqueSaleIndex++; \n\n            //Assigns State Variables To The New Sale Instance\n            Sales[UniqueSaleIndex].Name = NewSaleInstance[i].Name;\n            Sales[UniqueSaleIndex].PriceBrightList = NewSaleInstance[i].PriceBrightList;\n            Sales[UniqueSaleIndex].PricePublic = NewSaleInstance[i].PricePublic;\n            Sales[UniqueSaleIndex].StartingIndex = NewSaleInstance[i].StartingIndex;\n            Sales[UniqueSaleIndex].EndingIndex = NewSaleInstance[i].EndingIndex;\n            Sales[UniqueSaleIndex].PurchaseableAmountBrightList = NewSaleInstance[i].PurchaseableAmountBrightList;\n            Sales[UniqueSaleIndex].PurchaseableAmountPublic = NewSaleInstance[i].PurchaseableAmountPublic;\n            Sales[UniqueSaleIndex].ERC_TYPE = NewSaleInstance[i].ERC_TYPE;\n            Sales[UniqueSaleIndex].ContractAddress = NewSaleInstance[i].ContractAddress;\n            Sales[UniqueSaleIndex].Operator = NewSaleInstance[i].Operator;\n            Sales[UniqueSaleIndex].Root = NewSaleInstance[i].Root;\n            Sales[UniqueSaleIndex].ActivePublic = NewSaleInstance[i].ActivePublic;\n            Sales[UniqueSaleIndex].ActiveBrightList = NewSaleInstance[i].ActiveBrightList;\n            Sales[UniqueSaleIndex].AllowMultiplePurchases = NewSaleInstance[i].AllowMultiplePurchases;\n        }\n        emit SalesStarted(StartingSaleIndex, UniqueSaleIndex);\n    }\n\n    /**\n     * @dev Changes BrightList Sale Name `Name` At Index `SaleIndex`\n     * note: This Is The Name Of The Sale\n     */\n    function _ChangeSaleName(uint SaleIndex, string memory Name) external onlyBRTOperator \n    { \n        string memory OldName = Sales[SaleIndex].Name;\n        Sales[SaleIndex].Name = Name; \n        emit SaleChangedName(SaleIndex, OldName, Name);\n    }\n    \n    /**\n     * @dev Changes BrightList StartingIndex `Index` At Index `SaleIndex`\n     * note: This Is The Starting Token ID\n     */\n    function _ChangeSaleStartingIndex(uint SaleIndex, uint Index) external onlyBRTOperator \n    { \n        uint OldStartingIndex = Sales[SaleIndex].StartingIndex;\n        Sales[SaleIndex].StartingIndex = Index; \n        emit SaleChangedStartingIndex(SaleIndex, OldStartingIndex, Index);\n    }\n\n    /**\n     * @dev Changes BrightList EndingIndex `Index` At Index `SaleIndex`\n     * note: This Is The Ending Token ID\n     */\n    function _ChangeSaleEndingIndex(uint SaleIndex, uint Index) external onlyBRTOperator \n    { \n        uint OldEndingIndex = Sales[SaleIndex].EndingIndex;\n        Sales[SaleIndex].EndingIndex = Index; \n        emit SaleChangedEndingIndex(SaleIndex, OldEndingIndex, Index);\n    }\n\n    /**\n     * @dev Changes Brightlist Public Purchasable Amount `Amount` At Index `SaleIndex`\n     * note: This Is The Public Allocation\n     */\n    function _ChangeSaleAllocationPublic(uint SaleIndex, uint Amount) external onlyBRTOperator \n    {\n        uint OldAllocation = Sales[SaleIndex].PurchaseableAmountBrightList; \n        Sales[SaleIndex].PurchaseableAmountPublic = Amount; \n        emit SaleChangedAllocationPublic(SaleIndex, OldAllocation, Amount);\n    }\n    \n    /**\n     * @dev Changes Brightlist Purchasable Amount `Amount` At Index `SaleIndex`\n     * note: This Is The BrightList Allocation\n     */\n    function _ChangeSaleAllocationBrightList(uint SaleIndex, uint Amount) external onlyBRTOperator \n    {\n        uint OldAllocation = Sales[SaleIndex].PurchaseableAmountBrightList; \n        Sales[SaleIndex].PurchaseableAmountBrightList = Amount; \n        emit SaleChangedAllocationBrightList(SaleIndex, OldAllocation, Amount);\n    }\n\n    /**\n     * @dev Changes Sale Price Public Amount `Price` At Index `SaleIndex`\n     * note: This Is Input In WEI Not In Ether. 1 ETH = 1000000000000000000 WEI\n     */\n    function _ChangeSalePricePublic(uint SaleIndex, uint Price) external onlyBRTOperator \n    { \n        uint OldPrice = Sales[SaleIndex].PriceBrightList; \n        Sales[SaleIndex].PricePublic = Price;\n        emit SaleChangedPricePublic(SaleIndex, OldPrice, Price);\n    }\n\n    /**\n     * @dev Changes Sale Price BrightList Amount `Price` At Index `SaleIndex`\n     * note: This Is Input In WEI Not In Ether. 1 ETH = 1000000000000000000 WEI\n     */\n    function _ChangeSalePriceBrightList(uint SaleIndex, uint Price) external onlyBRTOperator \n    {\n        uint OldPrice = Sales[SaleIndex].PriceBrightList; \n        Sales[SaleIndex].PriceBrightList = Price; \n        emit SaleChangedPriceBrightList(SaleIndex, OldPrice, Price);\n    }\n    \n    /**\n     * @dev Changes BrightList ERC Type `ERC_TYPE` At Index `SaleIndex`\n     * note: Possible Inputs Are:\n     * `721` - ERC721\n     * `1155` - ERC1155\n     */\n    function _ChangeSaleERC_TYPE(uint SaleIndex, uint ERC_TYPE) external onlyBRTOperator \n    {\n        require(ERC_TYPE == 721 || ERC_TYPE == 1155, \"Incorrect ERC_TYPE\"); \n        uint Old_ERC_TYPE = Sales[SaleIndex].ERC_TYPE;\n        Sales[SaleIndex].ERC_TYPE = ERC_TYPE; \n        emit SaleChangedERC_TYPE(SaleIndex, Old_ERC_TYPE, ERC_TYPE);\n    }\n\n    /**\n     * @dev Changes BrightList Contract Address `Contract` At Index `SaleIndex`\n     * note: This Is The NFT Address That Is Being Claimed\n     */\n    function _ChangeSaleContract(uint SaleIndex, address Contract) external onlyBRTOperator \n    { \n        address OldContract = Sales[SaleIndex].ContractAddress;\n        Sales[SaleIndex].ContractAddress = Contract; \n        emit SaleChangedContract(SaleIndex, OldContract, Contract);\n    }\n\n    /**\n     * @dev Changes BrightList Operator `operator` At Index `SaleIndex`\n     * note: This Is The Wallet / Address / EOA That The NFTs Are Pulling From\n     */\n    function _ChangeSaleOperator(uint SaleIndex, address Operator) external onlyBRTOperator \n    { \n        address OldOperator = Sales[SaleIndex].Operator;\n        Sales[SaleIndex].Operator = Operator; \n        emit SaleChangedOperator(SaleIndex, OldOperator, Operator);\n    }\n\n    /**\n     * @dev Changes BrightList Root `RootHash` At Index `SaleIndex`\n     * note: This Is The Merkle Root\n     */\n    function _ChangeSaleRoot(uint SaleIndex, bytes32 RootHash) external onlyBRTOperator \n    { \n        bytes32 OldRoot = Sales[SaleIndex].Root;\n        Sales[SaleIndex].Root = RootHash; \n        emit SaleChangedRoot(SaleIndex, OldRoot, RootHash);\n    }\n\n    /**\n     * @dev Changes Public Sale State `State` At Index `SaleIndex`\n     * note: Possible Inputs are `true` or `false`\n     */\n    function _ChangeSaleActiveStatePublic(uint SaleIndex, bool State) external onlyBRTOperator \n    { \n        bool OldState = Sales[SaleIndex].ActivePublic;\n        Sales[SaleIndex].ActivePublic = State; \n        emit SaleChangedActiveState(SaleIndex, OldState, State);\n    }\n\n    /**\n     * @dev Changes BrightList Sale State `State` At Index `SaleIndex`\n     * note: Possible Inputs are `true` or `false`\n     */\n    function _ChangeSaleActiveStateBrightList(uint SaleIndex, bool State) external onlyBRTOperator \n    { \n        bool OldState = Sales[SaleIndex].ActiveBrightList;\n        Sales[SaleIndex].ActiveBrightList = State; \n        emit SaleChangedActiveStateBrightList(SaleIndex, OldState, State);\n    }\n\n    /**\n     * @dev Changes BrightList Sale States `States` At Index `SaleIndex`\n     * note: Possible Inputs are array of `true` or `false`\n     */\n    function _ChangeSaleActiveStatesBrightList(uint[] calldata SaleIndexes, bool[] calldata States) external onlyBRTOperator \n    { \n        for(uint i; i < SaleIndexes.length; i++)\n        {\n            Sales[i].ActiveBrightList = States[i];\n        }\n        emit SaleChangedActiveStatesBrightList(SaleIndexes, States);\n    }\n\n    /**\n     * @dev Changes Public Sale State `State` At Index `SaleIndex`\n     * note: Possible Inputs are array of `true` or `false`\n     */\n    function _ChangeSaleActiveStatesPublic(uint[] calldata SaleIndexes, bool[] calldata States) external onlyBRTOperator \n    { \n        for(uint i; i < SaleIndexes.length; i++)\n        {\n            Sales[i].ActiveBrightList = States[i];\n        }\n        emit SaleChangedActiveStatesPublic(SaleIndexes, States);\n    }\n\n    /**\n     * @dev Ends Sale At Index `SaleIndex`\n     */\n    function _EndSale(uint SaleIndex) external onlyBRTOperator \n    { \n        Sales[SaleIndex].ActivePublic = false; \n        emit SaleEnded(SaleIndex);\n    }\n\n    /***************************/\n    /****** ADMIN COMMANDS *****/\n    /***************************/\n\n    /**\n     * @dev Adds Bright Moments Operator\n     * note: OnlyOwner\n     */\n    function __OperatorAdd(address Operator) external onlyOwner \n    { \n        BRTOperators[Operator] = _OPERATOR; \n        emit OperatorAdded(Operator);\n    }\n\n    /**\n     * @dev Removes Bright Moments Operator\n     * note: OnlyOwner\n     */\n    function __OperatorRemove(address Operator) external onlyOwner \n    { \n        BRTOperators[Operator] = _DEACTIVATED; \n        emit OperatorRemoved(Operator);    \n    }\n\n    /**\n     * @dev Withdraws All Ether From Contract To Owner\n     * note: OnlyOwner\n     */\n    function __Withdraw() external onlyOwner \n    {\n        uint balance = address(this).balance;\n        require(balance > 0, \"Insufficient Balance\"); \n        payable(owner()).transfer(balance); \n    }\n\n    /**\n     * @dev Withdraws Ether From Contract To Address\n     * note: OnlyOwner\n     */\n    function __WithdrawToAddress(address payable Recipient) external onlyOwner \n    {\n        uint balance = address(this).balance;\n        require(balance > 0, \"Insufficient Ether To Withdraw\");\n        (bool Success, ) = Recipient.call{value: balance}(\"\");\n        require(Success, \"Unable to Withdraw, Recipient May Have Reverted\");\n    }\n\n    /**\n     * @dev Withdraws Ether From Contract To Address With An Amount\n     * note: OnlyOwner\n     * note: `Amount` is Denoted In WEI ()\n     */\n    function __WithdrawAmountToAddress(address payable Recipient, uint Amount) external onlyOwner\n    {\n        require(Amount > 0 && Amount <= address(this).balance, \"Invalid Amount\");\n        (bool Success, ) = Recipient.call{value: Amount}(\"\");\n        require(Success, \"Unable to Withdraw, Recipient May Have Reverted\");\n    }\n\n    /**\n     * @dev Withdraws Ether From Sale Instance To Owner\n     * note: OnlyOwner\n     */\n    function __WithdrawSaleProceeds(uint SaleIndex) external onlyOwner\n    {\n        uint Amount = SaleProceeds[SaleIndex];\n        require(Amount > 0 && Amount <= address(this).balance, \"Insufficient Balance\");\n        SaleProceeds[SaleIndex] = 0;\n        (bool Success, ) = owner().call{value: Amount}(\"\");\n        require(Success, \"Unable to Withdraw, Recipient May Have Reverted\");\n    }\n\n    /**\n     * @dev Withdraws Ether From Sale Instance To Address\n     * note: OnlyOwner\n     */\n    function __WithdrawSaleProceedsToAddress(address payable Recipient, uint SaleIndex) external onlyOwner\n    {\n        uint Amount = SaleProceeds[SaleIndex];\n        require(Amount > 0 && Amount <= address(this).balance, \"Insufficient Balance\");\n        SaleProceeds[SaleIndex] = 0;\n        (bool Success, ) = Recipient.call{value: Amount}(\"\");\n        require(Success, \"Unable to Withdraw, Recipient May Have Reverted\");\n    }\n    \n    /**\n     * @dev Withdraws ERC20 From Contract To Address\n     * note: OnlyOwner\n     */\n    function __WithdrawERC20ToAddress(address Recipient, address ContractAddress) external onlyOwner\n    {\n        IERC20 ERC20 = IERC20(ContractAddress);\n        ERC20.transferFrom(address(this), Recipient, ERC20.balanceOf(address(this)));\n    }\n\n    /***************************/\n    /******* PUBLIC VIEW *******/\n    /***************************/\n    \n    /**\n     * @dev Checks BrightList Allocation\n     */\n    function viewBrightListAllocation(address Recipient, uint SaleIndex, bytes32[] memory Proof) public view returns(bool)\n    { \n        bytes32 Leaf = keccak256(abi.encodePacked(Recipient));\n        return MerkleProof.verify(Proof, Sales[SaleIndex].Root, Leaf);\n    }\n\n    /**\n     * @dev Returns State Variables Of `SaleIndex`\n     * note: `0. Name`\n     * note: `1. Price BrightList`\n     * note: `2. Price Public`\n     * note: `3. StartingIndex`\n     * note: `4. EndingIndex`\n     * note: `5. Purchaseable Amount BrightList`\n     * note: `6. Purchaseable Amount Public`\n     * note: `7. ERC_TYPE (721 for ERC721) || (1155 for ERC1155)`\n     * note: `8. ContractAddress` Of NFT\n     * note: `9. Operator`\n     * note: `10. Merkle Root` \n     * note: `11. Is Sale Public Active`\n     * note: `12. Is Sale BrightList Active`\n     * note: `13. Allow Multiple Purchases`\n     */\n    function viewSaleState(uint SaleIndex) public view returns(Sale memory) { return Sales[SaleIndex]; }\n\n    /**\n     * @dev Returns Multiple Sale Instances Of `SaleIndex`\n     * note: `0. Name`\n     * note: `1. Price BrightList`\n     * note: `2. Price Public`\n     * note: `3. StartingIndex`\n     * note: `4. EndingIndex`\n     * note: `5. Purchaseable Amount BrightList`\n     * note: `6. Purchaseable Amount Public`\n     * note: `7. ERC_TYPE (721 for ERC721) || (1155 for ERC1155)`\n     * note: `8. ContractAddress` Of NFT\n     * note: `9. Operator`\n     * note: `10. Merkle Root` \n     * note: `11. Is Sale Public Active`\n     * note: `12. Is Sale BrightList Active`\n     * note: `13. Allow Multiple Purchases`\n     */\n    function viewSaleStates(uint[] calldata SaleIndexes) public view returns(Sale[] memory) \n    {\n        Sale[] memory SaleStates = new Sale[](SaleIndexes.length);\n        for (uint i; i < SaleIndexes.length; i++) \n        {\n            Sale storage saleInstance = Sales[SaleIndexes[i]];\n            SaleStates[i] = saleInstance;\n        }\n        return SaleStates;\n    }\n\n    /***************************/\n    /******** MODIFIER *********/\n    /***************************/\n\n    /**\n     * @dev Restricts Certain Functions To Bright Moments Operators Only\n     */\n    modifier onlyBRTOperator\n    {\n        require(BRTOperators[msg.sender] == _OPERATOR, \"User Is Not A Valid BRT Operator\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}