{{
  "language": "Solidity",
  "sources": {
    "JellyDrop.sol": {
      "content": "pragma solidity 0.8.6;\n\n\nimport \"IJellyAccessControls.sol\";\nimport \"IERC20.sol\";\nimport \"IMerkleList.sol\";\nimport \"IJellyContract.sol\";\nimport \"SafeERC20.sol\";\nimport \"BoringMath.sol\";\nimport \"Documents.sol\";\n\n\n/**\n* @title Jelly Drop V1.3:\n*\n*              ,,,,\n*            g@@@@@@K\n*           l@@@@@@@@P\n*            $@@@@@@@\"                   l@@@  l@@@\n*             \"*NNM\"                     l@@@  l@@@\n*                                        l@@@  l@@@\n*             ,g@@@g        ,,gg@gg,     l@@@  l@@@ ,ggg          ,ggg\n*            @@@@@@@@p    g@@@EEEEE@@W   l@@@  l@@@  $@@g        ,@@@Y\n*           l@@@@@@@@@   @@@P      ]@@@  l@@@  l@@@   $@@g      ,@@@Y\n*           l@@@@@@@@@  $@@D,,,,,,,,]@@@ l@@@  l@@@   '@@@p     @@@Y\n*           l@@@@@@@@@  @@@@EEEEEEEEEEEE l@@@  l@@@    \"@@@p   @@@Y\n*           l@@@@@@@@@  l@@K             l@@@  l@@@     '@@@, @@@Y\n*            @@@@@@@@@   %@@@,    ,g@@@  l@@@  l@@@      ^@@@@@@Y\n*            \"@@@@@@@@    \"N@@@@@@@@E'   l@@@  l@@@       \"*@@@Y\n*             \"J@@@@@@        \"**\"\"       '''   '''        @@@Y\n*    ,gg@@g    \"J@@@P                                     @@@Y\n*   @@@@@@@@p    J@@'                                    @@@Y\n*   @@@@@@@@P    J@h                                    RNNY\n*   'B@@@@@@     $P\n*       \"JE@@@p\"'\n*\n*\n*/\n\n/**\n* @author ProfWobble \n* @dev\n*  - Allows for a group of users to claim tokens from a list.\n*  - Supports Merkle proofs using the Jelly List interface.\n*  - Token claim paused on deployment (Jelly not set yet!).\n*  - SetJelly() function allows tokens to be claimed when ready.\n*\n*/\n\ncontract JellyDrop is IJellyContract, Documents {\n\n    using BoringMath128 for uint128;\n    using SafeERC20 for OZIERC20;\n\n    /// @notice Jelly template type and id for the pool factory.\n    uint256 public constant override TEMPLATE_TYPE = 2;\n    bytes32 public constant override TEMPLATE_ID = keccak256(\"JELLY_DROP\");\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\n    uint256 private constant PERCENTAGE_PRECISION = 10000;\n    uint256 private constant TIMESTAMP_PRECISION = 10000000000;\n\n    /// @notice Address that manages approvals.\n    IJellyAccessControls public accessControls;\n\n    /// @notice Address that manages user list.\n    address public list;\n\n    /// @notice Reward token address.\n    address public rewardsToken;\n\n    /// @notice Currnt total rewards paid.\n    uint256 public rewardsPaid;\n\n    /// @notice Total tokens to be distributed.\n    uint256 public totalTokens;\n\n    struct UserInfo {\n        uint128 totalAmount;\n        uint128 rewardsReleased;\n    }\n\n    /// @notice Mapping from user address => rewards paid.\n    mapping (address => UserInfo) public userRewards;\n\n    struct RewardInfo {\n        /// @notice Sets the token to be claimable or not (cannot claim if it set to false).\n        bool tokensClaimable;\n        /// @notice Epoch unix timestamp in seconds when the airdrop starts to decay\n        uint48 startTimestamp;\n        /// @notice Jelly streaming period\n        uint32 streamDuration;\n        /// @notice Jelly claim period, 0 for unlimited\n        uint48 claimExpiry;\n        /// @notice Reward multiplier\n        uint128 multiplier;\n    }\n    RewardInfo public rewardInfo;\n\n    /// @notice Whether staking has been initialised or not.\n    bool private initialised;\n\n    /// @notice JellyVault is where fees are sent.\n    address private jellyVault;\n\n    /// @notice JellyVault is where fees are sent.\n    uint256 private feePercentage;\n\n    /**\n     * @notice Event emitted when a user claims rewards.\n     * @param user Address of the user.\n     * @param reward Reward amount.\n     */\n    event RewardPaid(address indexed user, uint256 reward);\n\n    /**\n     * @notice Event emitted when claimable status is updated.\n     * @param status True or False.\n     */\n    event ClaimableStatusUpdated(bool status);\n\n    /**\n     * @notice Event emitted when claimable status is updated.\n     * @param expiry Timestamp when tokens are no longer claimable.\n     */\n    event ClaimExpiryUpdated(uint256 expiry);\n\n    /**\n     * @notice Event emitted when rewards contract has been updated.\n     * @param oldRewardsToken Address of the old reward token contract.\n     * @param newRewardsToken Address of the new reward token contract.\n     */\n    event RewardsTokenUpdated(address indexed oldRewardsToken, address newRewardsToken);\n\n    /**\n     * @notice Event emitted when reward tokens have been added to the pool.\n     * @param amount Number of tokens added.\n     * @param fees Amount of fees.\n     */\n    event RewardsAdded(uint256 amount, uint256 fees);\n\n    /**\n     * @notice Event emitted when list contract has been updated.\n     * @param oldList Address of the old list contract.\n     * @param newList Address of the new list contract.\n     */\n    event ListUpdated(address indexed oldList, address newList);\n\n    /**\n     * @notice Event emitted for Jelly admin updates.\n     * @param vault Address of the new vault address.\n     * @param fee New fee percentage.\n     */\n    event JellyUpdated(address indexed vault, uint256 fee);\n\n    /**\n     * @notice Event emitted for when setJelly is called.\n     */\n    event JellySet();\n\n    /**\n     * @notice Event emitted for when tokens are recovered.\n     * @param token ERC20 token address.\n     * @param amount Token amount in wei.\n     */\n    event Recovered(address indexed token, uint256 amount);\n\n\n    constructor() {\n    }\n \n    //--------------------------------------------------------\n    // Setters\n    //--------------------------------------------------------\n\n    /**\n     * @notice Admin can change list contract through this function.\n     * @param _list Address of the new list contract.\n     */\n    function setList(address _list) external {\n        require(accessControls.hasAdminRole(msg.sender));\n        require(_list != address(0)); // dev: Address must be non zero\n        emit ListUpdated(list, _list);\n        list = _list;\n    }\n\n    /**\n     * @notice Admin can set reward tokens claimable through this function.\n     * @param _enabled True or False.\n     */\n    function setTokensClaimable(bool _enabled) external  {\n        require(accessControls.hasAdminRole(msg.sender), \"setTokensClaimable: Sender must be admin\");\n        rewardInfo.tokensClaimable = _enabled;\n        emit ClaimableStatusUpdated(_enabled);\n    }\n\n    /**\n     * @notice Admin can set token claim expiry through this function.\n     * @param _expiry Timestamp for when tokens are no longer able to be claimed.\n     */\n    function setClaimExpiry(uint256 _expiry) external  {\n        require(accessControls.hasAdminRole(msg.sender), \"setClaimExpiry: Sender must be admin\");\n        require(_expiry < TIMESTAMP_PRECISION, \"setClaimExpiry: enter claim expiry unix timestamp in seconds, not miliseconds\");\n        require((rewardInfo.startTimestamp < _expiry && _expiry > block.timestamp )|| _expiry == 0, \"setClaimExpiry: claim expiry incorrect\");\n        rewardInfo.claimExpiry =  BoringMath.to48(_expiry);\n        emit ClaimExpiryUpdated(_expiry);\n    }\n\n    /**\n     * @notice Add more tokens to the JellyDrop contract.\n     * @param _rewardAmount Amount of tokens to add, in wei. (18 decimal place format)\n     */\n    function addRewards(uint256 _rewardAmount) public {\n        require(accessControls.hasAdminRole(msg.sender));\n        OZIERC20(rewardsToken).safeTransferFrom(msg.sender, address(this), _rewardAmount);\n        uint256 tokensAdded = _rewardAmount * PERCENTAGE_PRECISION  / uint256(feePercentage + PERCENTAGE_PRECISION);\n        uint256 jellyFee =  _rewardAmount * uint256(feePercentage)  / uint256(feePercentage + PERCENTAGE_PRECISION);\n        totalTokens += tokensAdded ;\n        OZIERC20(rewardsToken).safeTransfer(jellyVault, jellyFee);\n        emit RewardsAdded(_rewardAmount, jellyFee);\n    }\n\n    /**\n     * @notice Jelly vault can update new vault and fee.\n     * @param _vault New vault address.\n     * @param _fee Fee percentage of tokens distributed.\n     */\n    function updateJelly(address _vault, uint256 _fee) external  {\n        require(jellyVault == msg.sender); // dev: updateJelly: Sender must be JellyVault\n        require(_vault != address(0)); // dev: Address must be non zero\n        require(_fee < PERCENTAGE_PRECISION); // dev: feePercentage greater than 10000 (100.00%)\n\n        jellyVault = _vault;\n        feePercentage = _fee;\n        emit JellyUpdated(_vault, _fee);\n    }\n\n    /**\n     * @notice To initialise the JellyDrop contracts once everything is ready.\n     * @param _startTimestamp Timestamp when the tokens rewards are set to begin.\n     * @param _streamDuration How long the tokens will drip, in seconds.\n     * @param _tokensClaimable Bool to determine if the airdrop is initially claimable.\n     */\n    function setJellyCustom(uint256 _startTimestamp, uint256 _streamDuration,  bool _tokensClaimable) public  {\n        require(accessControls.hasAdminRole(msg.sender), \"setJelly: Sender must be admin\");\n        require(_startTimestamp < TIMESTAMP_PRECISION, \"setJelly: enter start unix timestamp in seconds, not miliseconds\");\n        // require(_multiplier >= 100000000, \"setRewardMultiplier: Multiplier must be greater than 1e8 (10 decimals)\");\n\n        rewardInfo.tokensClaimable = _tokensClaimable;\n        rewardInfo.startTimestamp = BoringMath.to48(_startTimestamp);\n        rewardInfo.streamDuration = BoringMath.to32(_streamDuration);\n        rewardInfo.multiplier = BoringMath.to128(MULTIPLIER_PRECISION);\n        emit JellySet();\n    }\n\n    /**\n     * @notice To initialise the JellyDrop contracts with default values once everything is ready.\n     */\n    function setJellyAirdrop() external  {\n        setJellyCustom(block.timestamp, 0, false);\n    }\n\n    /**\n     * @notice To initialise the JellyDrip contracts with a stream duration.\n     */\n    function setJellyAirdrip(uint256 _streamDuration) external  {\n        setJellyCustom(block.timestamp, _streamDuration, false);\n    }\n\n\n    //--------------------------------------------------------\n    // Getters \n    //--------------------------------------------------------\n\n    function tokensClaimable() external view returns (bool)  {\n        return rewardInfo.tokensClaimable;\n    }\n\n    function startTimestamp() external view returns (uint256)  {\n        return uint256(rewardInfo.startTimestamp);\n    }\n\n    function streamDuration() external view returns (uint256)  {\n        return uint256(rewardInfo.streamDuration);\n    }\n\n    function claimExpiry() external view returns (uint256)  {\n        return uint256(rewardInfo.claimExpiry);\n    }\n\n    function calculateRewards(uint256 _newTotalAmount) external view returns (uint256)  {\n        if (_newTotalAmount <= totalTokens) return 0;\n        uint256 newTokens = _newTotalAmount - totalTokens;\n        uint256 fee = newTokens * uint256(feePercentage) / PERCENTAGE_PRECISION;\n        return newTokens + fee;\n    }\n\n    //--------------------------------------------------------\n    // Claim\n    //--------------------------------------------------------\n\n    /**\n     * @notice Claiming rewards for user.\n     * @param _merkleRoot List identifier.\n     * @param _index User index.\n     * @param _user User address.\n     * @param _amount Total amount of tokens claimable by user.\n     * @param _data Bytes array to send to the list contract.\n     */\n    function claim(bytes32 _merkleRoot, uint256 _index, address _user, uint256 _amount, bytes32[] calldata _data ) public {\n\n        UserInfo storage _userRewards =  userRewards[_user];\n\n        require(_amount > 0, \"Token amount must be greater than 0\");\n        require(_amount > uint256(_userRewards.rewardsReleased), \"Amount must exceed tokens already claimed\");\n\n        // uint256 rewardAmount = merkleAmount * rewardInfo.multiplier / MULTIPLIER_PRECISION;\n        if (_amount > uint256(_userRewards.totalAmount)) {\n            uint256 merkleAmount = IMerkleList(list).tokensClaimable(_merkleRoot, _index, _user, _amount, _data );\n            require(merkleAmount > 0, \"Incorrect merkle proof for amount.\");\n            _userRewards.totalAmount = BoringMath.to128(_amount);\n        }\n\n        _claimTokens(_user);\n    }\n\n    /**\n     * @notice Claiming rewards for a user who has already verified a merkle proof.\n     * @param _user User address.\n     */\n    function verifiedClaim(address _user) public {\n        _claimTokens(_user);\n    }\n\n    /**\n     * @notice Claiming rewards for user.\n     * @param _user User address.\n     */\n    function _claimTokens(address _user) internal {\n        UserInfo storage _userRewards =  userRewards[_user];\n\n        require(\n            rewardInfo.tokensClaimable == true,\n            \"Tokens cannnot be claimed yet\"\n        );\n\n        uint256 payableAmount = _earnedAmount(\n            uint256(_userRewards.totalAmount),\n            uint256(_userRewards.rewardsReleased)\n        );\n        require(payableAmount > 0, \"No tokens available to claim\");\n        /// @dev accounts for dust\n        uint256 rewardBal =  IERC20(rewardsToken).balanceOf(address(this));\n        require(rewardBal > 0, \"Airdrop has no tokens remaining\");\n\n        if (payableAmount > rewardBal) {\n            payableAmount = rewardBal;\n        }\n\n        _userRewards.rewardsReleased +=  BoringMath.to128(payableAmount);\n        rewardsPaid +=  payableAmount;\n        require(rewardsPaid <= totalTokens, \"Amount claimed exceeds total tokens\");\n\n        OZIERC20(rewardsToken).safeTransfer(_user, payableAmount);\n\n        emit RewardPaid(_user, payableAmount);\n    }\n\n    /**\n     * @notice Calculated the amount that has already earned but hasn't been released yet.\n     * @param _user Address to calculate the earned amount for\n     */\n    function earnedAmount(address _user) external view returns (uint256) {\n        return\n            _earnedAmount(\n                userRewards[_user].totalAmount,\n                userRewards[_user].rewardsReleased\n            );\n    }\n\n    /**\n     * @notice Calculates the amount that has already earned but hasn't been released yet.\n     */\n    function _earnedAmount(\n        uint256 total,\n        uint256 released\n\n    ) internal view returns (uint256) {\n        if (total <= released ) {\n            return 0;\n        }\n\n        RewardInfo memory _rewardInfo = rewardInfo;\n\n        // Rewards havent started yet\n        if (block.timestamp <= uint256(_rewardInfo.startTimestamp) || _rewardInfo.tokensClaimable == false) {\n            return 0;\n        }\n\n        uint256 expiry = uint256(_rewardInfo.claimExpiry);\n        // Expiry set and reward claim has expired\n        if (expiry > 0 && block.timestamp > expiry  ) {\n            return 0;\n        }\n\n        uint256 elapsedTime = block.timestamp - uint256(_rewardInfo.startTimestamp);\n        uint256 earned;\n        // Reward calculation if streamDuration set\n        if (elapsedTime >= uint256(_rewardInfo.streamDuration)) {\n            earned = total;\n        } else {\n            earned = (total * elapsedTime) / uint256(_rewardInfo.streamDuration);\n        }\n    \n        return earned - released;\n    }\n\n\n    //--------------------------------------------------------\n    // Admin Reclaim\n    //--------------------------------------------------------\n\n    /**\n     * @notice Admin can end token distribution and reclaim tokens.\n     * @notice Also allows for the recovery of incorrect ERC20 tokens sent to contract\n     * @param _vault Address where the reclaimed tokens will be sent.\n     */\n    function adminReclaimTokens(\n        address _tokenAddress,\n        address _vault\n    )\n        external\n    {\n        require(\n            accessControls.hasAdminRole(msg.sender),\n            \"recoverERC20: Sender must be admin\"\n        );\n        require(_vault != address(0)); // dev: Address must be non zero\n\n        uint256 tokenAmount =  IERC20(_tokenAddress).balanceOf(address(this));\n        if (_tokenAddress == rewardsToken) {\n            require(\n                rewardInfo.claimExpiry > 0 && block.timestamp > rewardInfo.claimExpiry,\n                \"recoverERC20: Airdrop not yet expired\"\n            );\n            totalTokens = rewardsPaid;\n            rewardInfo.tokensClaimable = false;\n        }\n        OZIERC20(_tokenAddress).safeTransfer(_vault, tokenAmount);\n        emit Recovered(_tokenAddress, tokenAmount);\n    }\n\n\n    //--------------------------------------------------------\n    // Documents\n    //--------------------------------------------------------\n\n    /**\n     * @notice Admin can set key value pairs for UI.\n     * @param _name Document key.\n     * @param _data Document value.\n     */\n    function setDocument(string calldata _name, string calldata _data) external {\n        require(accessControls.hasAdminRole(msg.sender) );\n        _setDocument( _name, _data);\n    }\n\n    function setDocuments(string[] calldata _name, string[] calldata _data) external {\n        require(accessControls.hasAdminRole(msg.sender) );\n        uint256 numDocs = _name.length;\n        for (uint256 i = 0; i < numDocs; i++) {\n            _setDocument( _name[i], _data[i]);\n        }\n    }\n\n    function removeDocument(string calldata _name) external {\n        require(accessControls.hasAdminRole(msg.sender));\n        _removeDocument(_name);\n    }\n\n\n    //--------------------------------------------------------\n    // Factory Init\n    //--------------------------------------------------------\n\n    /**\n     * @notice Initializes main contract variables.\n     * @dev Init function.\n     * @param _accessControls Access controls interface.\n     * @param _rewardsToken Address of the airdrop token.\n     * @param _rewardAmount Total amount of tokens to distribute.\n     * @param _list Address for the merkle list verifier contract.\n     * @param _jellyVault The Jelly vault address.\n     * @param _jellyFee Fee percentage for added tokens. To 2dp (10000 = 100.00%)\n     */\n    function initJellyAirdrop(\n        address _accessControls,\n        address _rewardsToken,\n        uint256 _rewardAmount,\n        address _list,\n        address _jellyVault,\n        uint256 _jellyFee\n    ) public \n    {\n        require(!initialised, \"Already initialised\");\n        require(_list != address(0), \"List address not set\");\n        require(_jellyVault != address(0), \"jellyVault not set\");\n        require(_jellyFee < PERCENTAGE_PRECISION , \"feePercentage greater than 10000 (100.00%)\");\n        require(_accessControls != address(0), \"Access controls not set\");\n\n        rewardsToken = _rewardsToken;\n        jellyVault = _jellyVault;\n        feePercentage = _jellyFee;\n        totalTokens = _rewardAmount;\n        if (_rewardAmount > 0) {\n            uint256 jellyFee = _rewardAmount * uint256(feePercentage) / PERCENTAGE_PRECISION;\n            OZIERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), _rewardAmount + jellyFee);\n            OZIERC20(_rewardsToken).safeTransfer(_jellyVault, jellyFee);\n        }\n        accessControls = IJellyAccessControls(_accessControls);\n        list = _list;\n        initialised = true;\n    }\n\n    /** \n     * @dev Used by the Jelly Factory. \n     */\n    function init(bytes calldata _data) external override payable {}\n\n    function initContract(\n        bytes calldata _data\n    ) public override {\n        (\n        address _accessControls,\n        address _rewardsToken,\n        uint256 _rewardAmount,\n        address _list,\n        address _jellyVault,\n        uint256 _jellyFee\n        ) = abi.decode(_data, (address, address,uint256, address,address,uint256));\n\n        initJellyAirdrop(\n                        _accessControls,\n                        _rewardsToken,\n                        _rewardAmount,\n                        _list,\n                        _jellyVault,\n                        _jellyFee\n                    );\n    }\n\n    /** \n     * @dev Generates init data for factory.\n     * @param _accessControls Access controls interface.\n     * @param _rewardsToken Address of the airdrop token.\n     * @param _rewardAmount Total amount of tokens to distribute.\n     * @param _list Address for the merkle list verifier contract.\n     * @param _jellyVault The Jelly vault address.\n     * @param _jellyFee Fee percentage for added tokens. To 2dp (10000 = 100.00%)\n     */\n    function getInitData(\n        address _accessControls,\n        address _rewardsToken,\n        uint256 _rewardAmount,\n        address _list,\n        address _jellyVault,\n        uint256 _jellyFee\n    )\n        external\n        pure\n        returns (bytes memory _data)\n    {\n        return abi.encode(\n                        _rewardsToken,\n                        _accessControls,\n                        _rewardAmount,\n                        _list,\n                        _jellyVault,\n                        _jellyFee\n                        );\n    }\n\n\n}"
    },
    "IJellyAccessControls.sol": {
      "content": "\npragma solidity 0.8.6;\n\ninterface IJellyAccessControls {\n    function hasAdminRole(address _address) external  view returns (bool);\n    function addAdminRole(address _address) external;\n    function removeAdminRole(address _address) external;\n    function hasMinterRole(address _address) external  view returns (bool);\n    function addMinterRole(address _address) external;\n    function removeMinterRole(address _address) external;\n    function hasOperatorRole(address _address) external  view returns (bool);\n    function addOperatorRole(address _address) external;\n    function removeOperatorRole(address _address) external;\n    function initAccessControls(address _admin) external ;\n\n}\n"
    },
    "IERC20.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IERC20 {\n\n    /// @notice ERC20 Functions \n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n}"
    },
    "IMerkleList.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IMerkleList {\n    function tokensClaimable(uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof ) external view returns (bool);\n    function tokensClaimable(bytes32 _merkleRoot, uint256 _index, address _account, uint256 _amount, bytes32[] calldata _merkleProof ) external view returns (uint256);\n    function currentMerkleURI() external view returns (string memory);\n\n    function initMerkleList(address accessControl) external ;\n\n}\n"
    },
    "IJellyContract.sol": {
      "content": "pragma solidity 0.8.6;\n\nimport \"IMasterContract.sol\";\n\ninterface IJellyContract is IMasterContract {\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\n    /// Also kown as the constructor for cloned contracts.\n\n    function TEMPLATE_ID() external view returns(bytes32);\n    function TEMPLATE_TYPE() external view returns(uint256);\n    function initContract( bytes calldata data ) external;\n\n}\n"
    },
    "IMasterContract.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IMasterContract {\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\n    /// Also kown as the constructor for cloned contracts.\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\n    /// @param data Can be abi encoded arguments or anything else.\n    function init(bytes calldata data) external payable;\n}\n"
    },
    "SafeERC20.sol": {
      "content": "\npragma solidity ^0.8.0;\n\nimport \"OZIERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        OZIERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        OZIERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        OZIERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        OZIERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        OZIERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(OZIERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "OZIERC20.sol": {
      "content": "\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface OZIERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "Address.sol": {
      "content": "\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "BoringMath.sol": {
      "content": "\npragma solidity 0.8.6;\n\n/// @notice A library for performing overflow-/underflow-safe math,\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\nlibrary BoringMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        require(b > 0, \"BoringMath: Div zero\");\n        c = a / b;\n    }\n\n    function to224(uint256 a) internal pure returns (uint224 c) {\n        require(a <= type(uint224).max, \"BoringMath: uint224 Overflow\");\n        c = uint224(a);\n    }\n\n    function to128(uint256 a) internal pure returns (uint128 c) {\n        require(a <= type(uint128).max, \"BoringMath: uint128 Overflow\");\n        c = uint128(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64 c) {\n        require(a <= type(uint64).max, \"BoringMath: uint64 Overflow\");\n        c = uint64(a);\n    }\n\n    function to48(uint256 a) internal pure returns (uint48 c) {\n        require(a <= type(uint48).max, \"BoringMath: uint48 Overflow\");\n        c = uint48(a);\n    }\n\n    function to32(uint256 a) internal pure returns (uint32 c) {\n        require(a <= type(uint32).max, \"BoringMath: uint32 Overflow\");\n        c = uint32(a);\n    }\n\n    function to16(uint256 a) internal pure returns (uint16 c) {\n        require(a <= type(uint16).max, \"BoringMath: uint16 Overflow\");\n        c = uint16(a);\n    }\n\n    function to8(uint256 a) internal pure returns (uint8 c) {\n        require(a <= type(uint8).max, \"BoringMath: uint8 Overflow\");\n        c = uint8(a);\n    }\n\n}\n\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint224.\nlibrary BoringMath224 {\n    function add(uint224 a, uint224 b) internal pure returns (uint224 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint224 a, uint224 b) internal pure returns (uint224 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\nlibrary BoringMath128 {\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\nlibrary BoringMath64 {\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint48.\nlibrary BoringMath48 {\n    function add(uint48 a, uint48 b) internal pure returns (uint48 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint48 a, uint48 b) internal pure returns (uint48 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\nlibrary BoringMath32 {\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\nlibrary BoringMath16 {\n    function add(uint16 a, uint16 b) internal pure returns (uint16 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint16 a, uint16 b) internal pure returns (uint16 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint8.\nlibrary BoringMath8 {\n    function add(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\n    }\n\n    function sub(uint8 a, uint8 b) internal pure returns (uint8 c) {\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\n    }\n}\n\n"
    },
    "Documents.sol": {
      "content": "pragma solidity 0.8.6;\n// pragma experimental ABIEncoderV2;\n\n\n/**\n * @title Standard implementation of ERC1643 Document management\n */\ncontract Documents {\n\n    struct Document {\n        uint32 docIndex;    // Store the document name indexes\n        uint64 lastModified; // Timestamp at which document details was last modified\n        string data; // data of the document that exist off-chain\n    }\n\n    // mapping to store the documents details in the document\n    mapping(string => Document) internal _documents;\n    // mapping to store the document name indexes\n    mapping(string => uint32) internal _docIndexes;\n    // Array use to store all the document name present in the contracts\n    string[] _docNames;\n\n    // Document Events\n    event DocumentRemoved(string indexed _name, string _data);\n    event DocumentUpdated(string indexed _name, string _data);\n\n    /**\n     * @notice Used to attach a new document to the contract, or update the data or hash of an existing attached document\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     * @param _data Off-chain data of the document from where it is accessible to investors/advisors to read.\n     */\n    function _setDocument(string calldata _name, string calldata _data) internal {\n        require(bytes(_name).length > 0, \"Zero name is not allowed\");\n        require(bytes(_data).length > 0, \"Should not be a empty data\");\n        // Document storage document = _documents[_name];\n        if (_documents[_name].lastModified == uint64(0)) {\n            _docNames.push(_name);\n            _documents[_name].docIndex = uint32(_docNames.length);\n        }\n        _documents[_name] = Document(_documents[_name].docIndex, uint64(block.timestamp), _data);\n        emit DocumentUpdated(_name, _data);\n    }\n\n    /**\n     * @notice Used to remove an existing document from the contract by giving the name of the document.\n     * @dev Can only be executed by the owner of the contract.\n     * @param _name Name of the document. It should be unique always\n     */\n\n    function _removeDocument(string calldata _name) internal {\n        require(_documents[_name].lastModified != uint64(0), \"Document should exist\");\n        uint32 index = _documents[_name].docIndex - 1;\n        if (index != _docNames.length - 1) {\n            _docNames[index] = _docNames[_docNames.length - 1];\n            _documents[_docNames[index]].docIndex = index + 1; \n        }\n        _docNames.pop();\n        emit DocumentRemoved(_name, _documents[_name].data);\n        delete _documents[_name];\n    }\n\n    /**\n     * @notice Used to return the details of a document with a known name (`string`).\n     * @param _name Name of the document\n     * @return string The data associated with the document.\n     * @return uint256 the timestamp at which the document was last modified.\n     */\n    function getDocument(string calldata _name) external view returns (string memory, uint256) {\n        return (\n            _documents[_name].data,\n            uint256(_documents[_name].lastModified)\n        );\n    }\n\n    /**\n     * @notice Used to retrieve a full list of documents attached to the smart contract.\n     * @return string List of all documents names present in the contract.\n     */\n    function getAllDocuments() external view returns (string[] memory) {\n        return _docNames;\n    }\n\n    /**\n     * @notice Used to retrieve the total documents in the smart contract.\n     * @return uint256 Count of the document names present in the contract.\n     */\n    function getDocumentCount() external view returns (uint256) {\n        return _docNames.length;\n    }\n\n    /**\n     * @notice Used to retrieve the document name from index in the smart contract.\n     * @return string Name of the document name.\n     */\n    function getDocumentName(uint256 _index) external view returns (string memory) {\n        require(_index < _docNames.length, \"Index out of bounds\");\n        return _docNames[_index];\n    }\n\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "libraries": {
      "JellyDrop.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}