{{
  "language": "Solidity",
  "sources": {
    "contracts/Vesting.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2022-06-02\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.14;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract VictoriaVRVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token = IERC20(0x7d5121505149065b562C789A0145eD750e6E8cdD);\r\n\r\n    address public owner;\r\n\r\n    uint256[] public unlockTimestamps = [1669989600, 1672668000, 1675346400, 1677765600, 1680444000, 1683036000, 1685714400, 1688306400, 1690984800, 1693663200, 1696255200, 1698933600];\r\n\r\n    struct UnlockInfo {\r\n        uint256 amount;\r\n        uint256 unlockTotal;\r\n    }\r\n\r\n    mapping(address => UnlockInfo) public userUnlockInfos;\r\n\r\n    event EventUnlockToken(address indexed _address, uint256 _amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner,\r\n            \"You don't have permission.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function addAddressInfos(address[] calldata _addresses, uint256[] calldata _amounts) public onlyOwner {\r\n        for (uint i; i < _addresses.length; i++) {\r\n            addAddressInfo(_addresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function addAddressInfosNoDecimals(address[] calldata _addresses, uint256[] calldata _amounts) public onlyOwner {\r\n        for (uint i; i < _addresses.length; i++) {\r\n            addAddressInfoNoDecimals(_addresses[i], _amounts[i]);\r\n        }\r\n    }\r\n\r\n    function tokenDecimals(uint256 _amount) public view returns(uint256) {\r\n        return _amount * (10 ** uint256(token.decimals()));\r\n    }\r\n\r\n    function tokenBalanceOf() public view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function addAddressInfoNoDecimals(address _address, uint256 _amount) public onlyOwner {\r\n        addAddressInfo(_address, tokenDecimals(_amount));\r\n    }\r\n\r\n    function addAddressInfo(address _address, uint256 _amount) public onlyOwner {\r\n        UnlockInfo storage ui = userUnlockInfos[_address];\r\n        require(\r\n            ui.amount == 0,\r\n            \"This wallet has been added to the unlock contract.\"\r\n        );\r\n        ui.amount = _amount;\r\n    }\r\n\r\n    function deleteAddressInfo(address _address) public onlyOwner {\r\n        UnlockInfo storage ui = userUnlockInfos[_address];\r\n        require(\r\n            ui.amount > 0,\r\n            \"This wallet is not in the current unlocking plan.\"\r\n        );\r\n        delete userUnlockInfos[_address];\r\n    }\r\n\r\n    function blockTimestamp() public virtual view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getAvailableMonth() public virtual view returns(uint256) {\r\n        uint i = 0;\r\n        while (i < unlockTimestamps.length && blockTimestamp() >= unlockTimestamps[i]) i++;\r\n        return i;\r\n    }\r\n\r\n    function unlockToken() public {\r\n        uint256 availableMonth = getAvailableMonth();\r\n        require(\r\n            availableMonth > 0,\r\n            \"Unlocking time has not started yet.\"\r\n        );\r\n        UnlockInfo storage ui = userUnlockInfos[msg.sender];\r\n        require(\r\n            ui.amount > 0,\r\n            \"This wallet is not in the current unlocking plan.\"\r\n        );\r\n        require(\r\n            ui.amount > ui.unlockTotal,\r\n            \"The user has no available unlocking limit.\"\r\n        );\r\n        uint256 availableAmount = availableMonth.mul(ui.amount.div(unlockTimestamps.length));\r\n        if(availableAmount > ui.amount) {\r\n            availableAmount = ui.amount;\r\n        }\r\n        availableAmount = availableAmount.sub(ui.unlockTotal);\r\n        require(\r\n            availableAmount > 0,\r\n            \"The user has no available unlocking limit.\"\r\n        );\r\n        ui.unlockTotal = ui.unlockTotal.add(availableAmount);\r\n        _safeTransfer(msg.sender, availableAmount);\r\n    }\r\n\r\n    function _safeTransfer(address _address, uint256 _amount) private {\r\n        token.transfer(_address, _amount);\r\n        emit EventUnlockToken(_address, _amount);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}