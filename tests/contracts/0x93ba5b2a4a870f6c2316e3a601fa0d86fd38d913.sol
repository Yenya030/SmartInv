{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/kit-bag/RedCard.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\ninterface IKitBag {\n    function mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external;\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes calldata data\n    ) external;\n}\n\ninterface IMPL {\n    function balanceOf(address account) external view returns (uint256);\n}\n\ninterface IDelegationRegistry {\n    function checkDelegateForContract(\n        address delegate,\n        address vault,\n        address contract_\n    ) external view returns (bool);\n}\n\nfunction getOneArray(uint256 length) pure returns (uint256[] memory arr) {\n    arr = new uint[](length);\n    for (uint i = 0; i < length; i++) {\n        arr[i] = 1;\n    }\n}\n\ncontract RedCard is Ownable, Pausable {\n    IKitBag public kitBag; // KitBag contract\n    IMPL public mpl; // MPL contract\n    IDelegationRegistry public dc; // Delegation contract\n\n    uint8[2] public cutoffs = [5, 11]; // MPL balance cutoffs to receive multiple comics (1 / 2 / 3)\n    uint8[2] public odds = [169, 225]; // Odds of receiving different comics. We use the same odds across comics\n    mapping(uint8 => bool) baseIds; // Base IDs of comic covers that can be minted (comic covers come in threes)\n    mapping(uint8 => mapping(address => bool)) public claimed; // Whether addresses have claimed different comics\n\n    bool public allowMultipleClaims = false; // Whether users can claim multiple comics\n\n    constructor(\n        address _kitBag,\n        address _mpl,\n        address _dc,\n        uint8[] memory _baseIds\n    ) {\n        kitBag = IKitBag(_kitBag);\n        mpl = IMPL(_mpl);\n        dc = IDelegationRegistry(_dc);\n\n        for (uint8 i = 0; i < _baseIds.length; i++) {\n            baseIds[_baseIds[i]] = true;\n        }\n    }\n\n    function setBaseId(uint8 _baseId, bool _setting) external onlyOwner {\n        baseIds[_baseId] = _setting;\n    }\n\n    function setCutoffs(uint8[2] memory _cutoffs) external onlyOwner {\n        require(_cutoffs[0] < _cutoffs[1], \"RedCard: invalid cutoffs\");\n        cutoffs = _cutoffs;\n    }\n\n    function setOdds(uint8[2] memory _odds) external onlyOwner {\n        require(_odds[0] < _odds[1], \"Redcard: invalid odds\");\n        odds = _odds;\n    }\n\n    function setAllowMultipleClaims(\n        bool _allowMultipleClaims\n    ) external onlyOwner {\n        allowMultipleClaims = _allowMultipleClaims;\n    }\n\n    function mint(uint8 baseId, address vault) public whenNotPaused {\n        address requester = msg.sender;\n\n        if (vault != address(0)) {\n            bool isDelegateValid = dc.checkDelegateForContract(\n                msg.sender,\n                vault,\n                address(mpl)\n            );\n            require(isDelegateValid, \"invalid delegate-vault pairing\");\n            requester = vault;\n        }\n\n        require(baseIds[baseId], \"RedCard: not a valid baseId\");\n        require(\n            !claimed[baseId][requester] || allowMultipleClaims,\n            \"RedCard: already claimed\"\n        );\n\n        uint256 balance = mpl.balanceOf(requester);\n        require(balance > 0, \"RedCard: no MPLs!\");\n\n        uint256 pseudoRandom = uint8(\n            uint256(\n                keccak256(\n                    abi.encode(\n                        blockhash(block.number - 1),\n                        address(this),\n                        requester\n                    )\n                )\n            )\n        );\n\n        uint256 randomId;\n\n        if (balance < cutoffs[0]) {\n            if (pseudoRandom < odds[0]) {\n                randomId = baseId;\n            } else if (pseudoRandom < odds[1]) {\n                randomId = baseId + 1;\n            } else {\n                randomId = baseId + 2;\n            }\n\n            kitBag.mint(requester, randomId, 1, \"0x\");\n        } else if (balance < cutoffs[1]) {\n            randomId = pseudoRandom < odds[0] ? baseId + 1 : baseId + 2;\n            uint[] memory ids = new uint[](2);\n            ids[0] = baseId;\n            ids[1] = randomId;\n            kitBag.mintBatch(requester, ids, getOneArray(2), \"0x\");\n        } else {\n            uint[] memory ids = new uint[](3);\n            ids[0] = baseId;\n            ids[1] = baseId + 1;\n            ids[2] = baseId + 2;\n            kitBag.mintBatch(requester, ids, getOneArray(3), \"0x\");\n        }\n\n        claimed[baseId][requester] = true;\n    }\n\n    function setPaused(bool _bPaused) external onlyOwner {\n        if (_bPaused) _pause();\n        else _unpause();\n    }\n}\n"
    }
  }
}}