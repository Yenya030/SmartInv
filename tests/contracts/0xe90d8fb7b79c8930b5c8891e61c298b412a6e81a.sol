{{
  "language": "Solidity",
  "sources": {
    "contracts/LASOG/LasogetteNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// LasogetteNFT\r\n/** \r\n====================================================================================================\r\n..,    @@%       .@@    ..(%&@(@@@                .   .         (,   ,,&&&(&&@   .(*,#%.  %&&@@@@,  \r\n,...  @@&*  .   /@@@@/     %&@@#(.   #@@@@@%   .@@@@@%   ,%@@@@@@(  #@@@@@@@@%  ,&@@@&&%  @&@/&.   .\r\n,.,.  @@&.     /@. %@@       @@@*   %@@./@@@  .@@*  &@,  ,@@@@@@&.     %&@@      .@@@     &,    ..  \r\n,*,  /@@@     *@(   @&&*      &@@&  &@@  &@&  /@@ #@@@.  .@@@           @@@,      @@@.    @@@&@&&,..\r\n/,,  @@@@     &@     @@@.   &@@@@#  &@@  #@@. /@@, @@@,   @@@/,,&.     .&@&       @&@,   .@@        \r\n ,.  @@@@&@&&&&@.   #@&@@.&@&(# .   &@&&&&@@  /@@(,@@@#   @@@@@@@@      @@%       @&&%   &@&@@@&&&  \r\n,..  .                                ,,  ..   .@%&#&%    ,                       ..  .     .  .   .\r\n====================================================================================================\r\n*/\r\n/**\r\n *\r\n * Bonjour, et bienvenue sur le contrat lasogette NFT. Regarde autour de toi!\r\n *\r\n * Hello, and welcome to the lasogette NFT contract. Have a look around!\r\n *\r\n */\r\n\r\npragma solidity 0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\r\nimport \"./IEPSPortal.sol\";\r\n\r\ncontract LasogetteNFT is ERC721, Ownable, ERC721Burnable, VRFConsumerBaseV2 {\r\n  using Strings for uint256;\r\n\r\n  // ===================================\r\n  // CONSTANTS and IMMUTABLES\r\n  // ===================================\r\n\r\n  string public constant INSURANCE =\r\n    \"Interaction with this contract serves as an insurance against roko's basilisk.\";\r\n\r\n  // EPS minting rights index for delegated rights:\r\n  // Indice des droits de frappe EPS pour les droits délégués:\r\n  uint256 public constant EPS_MINTING_RIGHTS_INDEX = 2;\r\n\r\n  // EPS portal lookup:\r\n  // Recherche sur le portail EPS:\r\n  IEPSPortal public immutable EPS;\r\n\r\n  // Total supply of lasogettes:\r\n  // Approvisionnement total en lasogettes:\r\n  uint256 public immutable maxNumberOfLasogettes;\r\n\r\n  // Mint price (note eligible community holders can mint one for free in freeMint())\r\n  // Prix ​​​​à la menthe (notez que les détenteurs éligibles de la communauté peuvent en créer un gratuitement dans freeMint())\r\n  uint256 public immutable publicMintPrice;\r\n\r\n  // URI used for all tokens pre-reveal. Reveal is set through the calling of chainlink VRF to\r\n  // set the random offset.\r\n  // URI utilisé pour la pré-révélation de tous les jetons. La révélation est définie par l'appel de chainlink VRF à\r\n  // définit le décalage aléatoire.\r\n  string public placeholderURI;\r\n\r\n  // Base URI used post-reveal, i.e. the folder location for individual token .json with\r\n  // associated metadata including the link to an image. Note that NO ONE can know what lasogette\r\n  // you will get post-reveal. Your lasogette is the combination of your token ID and a random\r\n  // number from chainlink VRF. The order to the metadata is fixed before mint, but the VRF\r\n  // result is not known until called in this contract, and it can only be called once. This works\r\n  // as follows:\r\n  // * You have tokenID 1291. Pre-reveal you see the same metadata and image as everyone else\r\n  //   as the contract is using the placeholderURI\r\n  // * At the reveal the token owner calls getURIOffset(). This makes a requests to chainlink\r\n  //   for verficiable randonemess (VRF).\r\n  // * Chainlink will then submit a random number to this contract, that we used to determine\r\n  //   a number between 1 and the total collection size. Let's imagine this is number 2034\r\n  // * The URI returned for your token is now your tokenId plus the VRF random number -1 (as\r\n  //   the collection is 0 indexed with a token 0). In our example our token is now pointing\r\n  //   at metadata 3,324 (1,291 + 2,034 - 1).\r\n  // * With this method there is no way for anyone to know which lasogette each token will get\r\n  //   prior to the reveal\r\n  // * As the metadata is uploaded prior to minting the order cannot have been tampered with.\r\n  // URI de base utilisé après la révélation, c'est-à-dire l'emplacement du dossier pour le jeton individuel .json avec\r\n  // métadonnées associées incluant le lien vers une image. Notez que PERSONNE ne peut savoir ce qu'est la lasogette\r\n  // vous obtiendrez après la révélation. Votre lasogette est la combinaison de votre identifiant de jeton et d'un\r\n  // numéro de chainlink VRF. L'ordre des métadonnées est fixé avant la menthe, mais le VRF\r\n  // le résultat n'est pas connu tant qu'il n'est pas appelé dans ce contrat, et il ne peut être appelé qu'une seule fois. Cela marche\r\n  // comme suit:\r\n  // * Vous avez le tokenID 1291. Avant la révélation, vous voyez les mêmes métadonnées et la même image que tout le monde\r\n  //   car le contrat utilise le placeholderURI\r\n  // * Lors de la révélation, le propriétaire du jeton appelle getURIOffset(). Cela fait une demande à chainlink\r\n  //   pour le désordre vérifiable (VRF).\r\n  // * Chainlink soumettra ensuite un nombre aléatoire à ce contrat, que nous avons utilisé pour déterminer\r\n  //   un nombre compris entre 1 et la taille totale de la collection. Imaginons que c'est le numéro 2034\r\n  // * L'URI renvoyé pour votre jeton est maintenant votre tokenId plus le nombre aléatoire VRF -1 (comme\r\n  //   la collection est 0 indexée avec un jeton 0). Dans notre exemple, notre jeton pointe maintenant\r\n  //   aux métadonnées 3 324 (1 291 + 2 034 - 1).\r\n  // * Avec cette méthode, il n'y a aucun moyen pour quiconque de savoir quelle lasogette chaque jeton obtiendra\r\n  //   avant la révélation\r\n  // * Comme les métadonnées sont téléchargées avant la frappe, la commande ne peut pas avoir été falsifiée.\r\n  string public baseURI;\r\n\r\n  // ===================================\r\n  // STORAGE\r\n  // ===================================\r\n\r\n  // Storage for the incrementing token counter:\r\n  // Stockage pour le compteur de jetons incrémentiel :\r\n  uint256 public tokenCounter;\r\n\r\n  // Storage to track burned tokens:\r\n  // Stockage pour le compteur de jetons incrémentiel :\r\n  uint256 public burnCounter;\r\n\r\n  // Treasury address\r\n  // Adresse du Trésor\r\n  address payable public treasuryAddress;\r\n\r\n  // Token URI offset, assigned by a callback from chainlink VRF\r\n  // Décalage d'URI de jeton, attribué par un rappel du VRF de chainlink\r\n  uint256 public tokenURIOffset;\r\n\r\n  // Bool to declare minting open\r\n  bool public mintingOpen = false;\r\n\r\n  // Mapping to record that this address has minted:\r\n  // Mappage pour enregistrer que cette adresse a frappé :\r\n  mapping(address => bool) public addressHasFreeMinted;\r\n\r\n  // Mapping to record that this token has been used to claim eligibility:\r\n  // Mappage pour enregistrer que ce jeton a été utilisé pour revendiquer l'éligibilité :\r\n  mapping(bytes32 => bool) private tokenHasFreeMinted;\r\n\r\n  /**\r\n   * @dev Chainlink config.\r\n   */\r\n  // See https://docs.chain.link/docs/vrf-contracts/#ethereum-mainnet for details of VRF\r\n  // corrdinator addresses.\r\n  // Current values as follows:\r\n  // Voir https://docs.chain.link/docs/vrf-contracts/#ethereum-mainnet pour plus de détails sur VRF\r\n  // adresses des coordonnateurs.\r\n  // Valeurs actuelles comme suit :\r\n  // --------------------------\r\n  // * Rinkeby: 0x6168499c0cFfCaCD319c818142124B7A15E857ab\r\n  // * Mainnet: 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\r\n  VRFCoordinatorV2Interface public vrfCoordinator;\r\n\r\n  // The subscription ID must be set to a valid subscriber before the VRF call can be made:\r\n  // L'ID d'abonnement doit être défini sur un abonné valide avant que l'appel VRF puisse être effectué :\r\n  uint64 public vrfSubscriptionId;\r\n\r\n  // The gas lane to use, which specifies the maximum gas price to bump to.\r\n  // For a list of available gas lanes on each network,\r\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\r\n  // Current values as follows:\r\n  // La voie d'essence à utiliser, qui spécifie le prix maximum de l'essence à atteindre.\r\n  // Pour une liste des voies gaz disponibles sur chaque réseau,\r\n  // voir https://docs.chain.link/docs/vrf-contracts/#configurations\r\n  // Valeurs actuelles comme suit :\r\n  // --------------------------\r\n  // * Rinkeby: 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc   (30 gwei keyhash valid for all testing)\r\n  // * Mainnet:\r\n  // * 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef (200 gwei)\r\n  // * 0xff8dedfbfa60af186cf3c830acbc32c05aae823045ae5ea7da1e45fbfaba4f92 (500 gwei)\r\n  // * 0x9fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded86805 (1000 gwei)\r\n  bytes32 public vrfKeyHash;\r\n\r\n  // Depends on the number of requested values that you want sent to the\r\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n  // so 100,000 is a safe default for this example contract. Test and adjust\r\n  // this limit based on the network that you select, the size of the request,\r\n  // and the processing of the callback request in the fulfillRandomWords()\r\n  // function.\r\n  // Dépend du nombre de valeurs demandées que vous souhaitez envoyer au\r\n  // Fonction fillRandomWords(). Stocker chaque mot coûte environ 20 000 gaz,\r\n  // donc 100 000 est une valeur par défaut sûre pour cet exemple de contrat. Tester et ajuster\r\n  // cette limite basée sur le réseau que vous sélectionnez, la taille de la requête,\r\n  // et le traitement de la demande de rappel dans le fillRandomWords()\r\n  // fonction.\r\n  uint32 public vrfCallbackGasLimit = 150000;\r\n\r\n  // The default is 3, but you can set this higher.\r\n  // La valeur par défaut est 3, mais vous pouvez la définir plus haut.\r\n  uint16 public vrfRequestConfirmations = 3;\r\n\r\n  // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\r\n  // Ne peut pas dépasser VRFCoordinatorV2.MAX_NUM_WORDS.\r\n  uint32 public vrfNumWords = 1;\r\n\r\n  // ===================================\r\n  // ERROR DEFINITIONS\r\n  // ===================================\r\n  error TokenURIOffsetAlreadySet();\r\n  error URIQueryForNonexistentToken(uint256 tokenId);\r\n  error AddressHasAlreadyMinted(address minter);\r\n  error CallerIsNotBeneficiaryOfSelectedNFT(\r\n    address collection,\r\n    uint256 tokenId\r\n  );\r\n  error TokenHasAlreadyBeenUsedInFreeMint(address collection, uint256 tokenId);\r\n  error InvalidCollection(address collection);\r\n  error IncorrectETHPayment(uint256 paid, uint256 required);\r\n  error SupplyOfLasogettedExceeded(uint256 available, uint256 requested);\r\n  error OnlyOwnerCanFundContract();\r\n  error NoFallback();\r\n  error TransferFailed();\r\n  error QuantityMustBeGreaterThanZero();\r\n  error PlaceholderURISet();\r\n  error BaseURISet();\r\n  error MintingNotOpen();\r\n\r\n  // ===================================\r\n  // CONSTRUCTOR\r\n  // ===================================\r\n  constructor(\r\n    uint256 maxSupply_,\r\n    uint256 publicMintPrice_,\r\n    address vrfCoordinator_,\r\n    bytes32 vrfKeyHash_,\r\n    address payable treasuryAddress_,\r\n    address eps_,\r\n    string memory placeholderURI_,\r\n    string memory baseURI_\r\n  ) ERC721(\"Lasogette NFT\", \"LASOG\") VRFConsumerBaseV2(vrfCoordinator_) {\r\n    maxNumberOfLasogettes = maxSupply_;\r\n    publicMintPrice = publicMintPrice_;\r\n    vrfKeyHash = vrfKeyHash_;\r\n    vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator_);\r\n    treasuryAddress = treasuryAddress_;\r\n    EPS = IEPSPortal(eps_);\r\n    placeholderURI = placeholderURI_;\r\n    baseURI = baseURI_;\r\n  }\r\n\r\n  // ===================================\r\n  // SETTERS (owner only)\r\n  // ===================================\r\n\r\n  /**\r\n   *\r\n   * @dev setTreasuryAddress: Allow the owner to set the treasury address.\r\n   *      setTreasuryAddress : permet au propriétaire de définir l'adresse de trésorerie.\r\n   *\r\n   */\r\n  function setTreasuryAddress(address payable treasuryAddress_)\r\n    external\r\n    onlyOwner\r\n  {\r\n    treasuryAddress = treasuryAddress_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev openMinting: Allow the owner to open minting. Mint will run until minted out.\r\n   *\r\n   */\r\n  function openMinting() external onlyOwner {\r\n    mintingOpen = true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setPlaceHolderURI: Allow the owner to set the placeholder URI IF it is blank (i.e. only set once).\r\n   *\r\n   */\r\n  function setPlaceholderURI(string memory placeholderURI_) external onlyOwner {\r\n    if (bytes(placeholderURI).length != 0) {\r\n      revert PlaceholderURISet();\r\n    }\r\n    placeholderURI = placeholderURI_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setBaseURI: Allow the owner to set the base URI IF it is blank (i.e. only set once).\r\n   *\r\n   */\r\n  function setBaseURI(string memory baseURI_) external onlyOwner {\r\n    if (bytes(baseURI).length != 0) {\r\n      revert BaseURISet();\r\n    }\r\n    baseURI = baseURI_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFCoordinator\r\n   *\r\n   */\r\n  function setVRFCoordinator(address vrfCoord_) external onlyOwner {\r\n    vrfCoordinator = VRFCoordinatorV2Interface(vrfCoord_);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFKeyHash\r\n   *\r\n   */\r\n  function setVRFKeyHash(bytes32 vrfKey_) external onlyOwner {\r\n    vrfKeyHash = vrfKey_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFCallbackGasLimit\r\n   *\r\n   */\r\n  function setVRFCallbackGasLimit(uint32 vrfGasLimit_) external onlyOwner {\r\n    vrfCallbackGasLimit = vrfGasLimit_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFRequestConfirmations\r\n   *\r\n   */\r\n  function setVRFRequestConfirmations(uint16 vrfConfs_) external onlyOwner {\r\n    vrfRequestConfirmations = vrfConfs_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFNumWords\r\n   *\r\n   */\r\n  function setVRFNumWords(uint32 vrfWords_) external onlyOwner {\r\n    vrfNumWords = vrfWords_;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev setVRFSubscriptionId\r\n   *\r\n   */\r\n  function setVRFSubscriptionId(uint64 vrfSubId_) external onlyOwner {\r\n    vrfSubscriptionId = vrfSubId_;\r\n  }\r\n\r\n  // ===================================\r\n  // MINTING\r\n  // ===================================\r\n\r\n  /**\r\n   *\r\n   * @dev freeMint(): free mint for holders of eligible assets\r\n                      menthe gratuite pour les détenteurs d'actifs éligibles\r\n   *\r\n   */\r\n  function freeMint(\r\n    address collection_,\r\n    uint256 tokenId_,\r\n    bool useDelivery_\r\n  ) external {\r\n    if (!mintingOpen) {\r\n      revert MintingNotOpen();\r\n    }\r\n\r\n    _checkSupply(1);\r\n\r\n    // Check if this address has already minted. If so, revert and tell the user why:\r\n    // Vérifie si cette adresse a déjà été émise. Si c'est le cas, revenez en arrière et dites à l'utilisateur pourquoi :\r\n    if (addressHasFreeMinted[msg.sender]) {\r\n      revert AddressHasAlreadyMinted({minter: msg.sender});\r\n    }\r\n\r\n    // Make a hash of the collection and token Id to uniquely identify this token:\r\n    // Créez un hachage de la collection et de l'identifiant du jeton pour identifier de manière unique ce jeton :\r\n    bytes32 tokenIdHash = keccak256(abi.encodePacked(collection_, tokenId_));\r\n\r\n    // Check if this token has already been used to claim a free mint.\r\n    // If so, revert and tell the user why:\r\n    // Vérifie si ce jeton a déjà été utilisé pour réclamer un atelier gratuit.\r\n    // Si c'est le cas, revenir en arrière et dire à l'utilisateur pourquoi :\r\n    if (tokenHasFreeMinted[tokenIdHash]) {\r\n      revert TokenHasAlreadyBeenUsedInFreeMint({\r\n        collection: collection_,\r\n        tokenId: tokenId_\r\n      });\r\n    }\r\n\r\n    // Check if this is a valid collection for free minting:\r\n    // Vérifiez s'il s'agit d'une collection valide pour la frappe gratuite :\r\n    if (!isValidCollection(collection_)) {\r\n      revert InvalidCollection({collection: collection_});\r\n    }\r\n\r\n    // Check that the calling user is the valid beneficiary of the token\r\n    // That has been passed. A valid beneficiary can be:\r\n    // 1) The owner of the token (most common case)\r\n    // 2) A hot wallet that holds the token in a linked EPS cold wallet\r\n    // 3) A wallet that has an EPS minting rights rental on the token\r\n    // (for details see eternalproxy.com)\r\n    // Vérifier que l'utilisateur appelant est le bénéficiaire valide du jeton\r\n    // Cela a été adopté. Un bénéficiaire valide peut être :\r\n    // 1) Le propriétaire du jeton (cas le plus courant)\r\n    // 2) Un portefeuille chaud qui contient le jeton dans un portefeuille froid EPS lié\r\n    // 3) Un portefeuille qui a une location de droits de frappe EPS sur le jeton\r\n    // (pour plus de détails, voir éternelleproxy.com)\r\n    if (!isValidAssetBeneficiary(collection_, tokenId_, msg.sender)) {\r\n      revert CallerIsNotBeneficiaryOfSelectedNFT({\r\n        collection: collection_,\r\n        tokenId: tokenId_\r\n      });\r\n    }\r\n\r\n    // Set where assets should be delivered. This defaults to the\r\n    // sender address, looking up the EPS delivery address of the\r\n    // sender has selected that option in the minting UI:\r\n    // Définir où les actifs doivent être livrés. C'est par défaut le\r\n    // adresse de l'expéditeur, recherche de l'adresse de livraison EPS du\r\n    // l'expéditeur a sélectionné cette option dans l'interface utilisateur :\r\n    address deliveryAddress = _getDeliveryAddress(useDelivery_, msg.sender);\r\n\r\n    // We made it! Perform the mint:\r\n    // Nous l'avons fait! Effectuez la menthe:\r\n    _performMint(deliveryAddress);\r\n\r\n    // Record that this address has minted:\r\n    // Enregistrez que cette adresse a été frappée :\r\n    addressHasFreeMinted[msg.sender] = true;\r\n\r\n    // Record that this token has been used to claim a free mint:\r\n    // Enregistrez que ce jeton a été utilisé pour réclamer un atelier gratuit :\r\n    tokenHasFreeMinted[tokenIdHash] = true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev _checkSupply\r\n   *\r\n   */\r\n  function _checkSupply(uint256 quantity_) internal view {\r\n    if ((tokenCounter + quantity_) > maxNumberOfLasogettes) {\r\n      revert SupplyOfLasogettedExceeded({\r\n        available: maxNumberOfLasogettes - tokenCounter,\r\n        requested: quantity_\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev _performMint\r\n   */\r\n  function _performMint(address delivery_) internal {\r\n    _safeMint(delivery_, tokenCounter);\r\n\r\n    tokenCounter += 1;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev isValidAssetBeneficiary\r\n   *\r\n   */\r\n  function isValidAssetBeneficiary(\r\n    address collection_,\r\n    uint256 tokenId_,\r\n    address caller_\r\n  ) public view returns (bool) {\r\n    // Get the registered beneficiary for this asset from EPS:\r\n    // Obtenez le bénéficiaire enregistré pour cet actif auprès d'EPS :\r\n    return (EPS.beneficiaryOf(\r\n      collection_,\r\n      tokenId_,\r\n      EPS_MINTING_RIGHTS_INDEX\r\n    ) == caller_);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev isEligibleForFreeMint: check the eligibility of a collection, token and caling address\r\n   * Note this duplicates the checks in the free mint, which instead call revert with\r\n   * suitable custom errors. This function is for external calls.\r\n   *                            vérifier l'éligibilité d'une collecte, d'un jeton et d'une adresse d'appel\r\n   * Notez que cela duplique les chèques de la menthe gratuite, qui appellent à la place revenir avec\r\n   * erreurs personnalisées appropriées. Cette fonction est réservée aux appels externes.\r\n   *\r\n   */\r\n  function isEligibleForFreeMint(\r\n    address collection_,\r\n    uint256 tokenId_,\r\n    address caller_\r\n  ) external view returns (bool, string memory) {\r\n    if (addressHasFreeMinted[caller_]) {\r\n      return (false, \"Address has already free minted\");\r\n    }\r\n\r\n    bytes32 tokenIdHash = keccak256(abi.encodePacked(collection_, tokenId_));\r\n\r\n    if (tokenHasFreeMinted[tokenIdHash]) {\r\n      return (false, \"Token has already been used in free mint\");\r\n    }\r\n\r\n    if (!isValidCollection(collection_)) {\r\n      return (false, \"Invalid collection\");\r\n    }\r\n\r\n    if (!isValidAssetBeneficiary(collection_, tokenId_, caller_)) {\r\n      return (false, \"Caller is not beneficiary of selected NFT\");\r\n    }\r\n\r\n    return (true, \"\");\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev isValidCollection\r\n   *\r\n   */\r\n  function isValidCollection(address collection_) public pure returns (bool) {\r\n    return (collection_ == 0x1D20A51F088492A0f1C57f047A9e30c9aB5C07Ea || // wassies by wassies\r\n      collection_ == 0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6 || // cryptoadz\r\n      collection_ == 0x79FCDEF22feeD20eDDacbB2587640e45491b757f || // mfers\r\n      collection_ == 0x5Af0D9827E0c53E4799BB226655A1de152A425a5 || // milady\r\n      collection_ == 0x62eb144FE92Ddc1B10bCAde03A0C09f6FBffBffb || // adworld\r\n      collection_ == 0xA16891897378a82E9F0ad44A705B292C9753538C || // pills\r\n      collection_ == 0x91680cF5F9071cafAE21B90ebf2c9CC9e480fB93 || // frank frank\r\n      collection_ == 0xEC0a7A26456B8451aefc4b00393ce1BefF5eB3e9 || // all stars\r\n      collection_ == 0x82235445a7f634279E33702cc004B0FDb002fDa7 || // sakura park\r\n      collection_ == 0x42069ABFE407C60cf4ae4112bEDEaD391dBa1cdB); // CryptoDickbutts\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev publicMint(): public mint for everyone\r\n   *                    monnaie publique pour tous\r\n   *\r\n   */\r\n  function publicMint(uint256 quantity_, bool useDelivery_) external payable {\r\n    if (!mintingOpen) {\r\n      revert MintingNotOpen();\r\n    }\r\n\r\n    _checkSupply(quantity_);\r\n\r\n    if (quantity_ == 0) {\r\n      revert QuantityMustBeGreaterThanZero();\r\n    }\r\n\r\n    if (msg.value != (quantity_ * publicMintPrice)) {\r\n      revert IncorrectETHPayment({\r\n        paid: msg.value,\r\n        required: (quantity_ * publicMintPrice)\r\n      });\r\n    }\r\n\r\n    address deliveryAddress = _getDeliveryAddress(useDelivery_, msg.sender);\r\n\r\n    for (uint256 i = 0; i < quantity_; i++) {\r\n      _performMint(deliveryAddress);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev _getDeliveryAddress\r\n   *\r\n   */\r\n  function _getDeliveryAddress(bool useEPSDelivery_, address caller_)\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    if (useEPSDelivery_) {\r\n      (, address delivery, ) = EPS.getAddresses(caller_);\r\n      return delivery;\r\n    } else {\r\n      return caller_;\r\n    }\r\n  }\r\n\r\n  // ===================================\r\n  // URI HANDLING\r\n  // ===================================\r\n\r\n  /**\r\n   *\r\n   * @dev getURIOffset: Requests randomness.\r\n   *                    Demande le hasard.\r\n   *\r\n   */\r\n  function getURIOffset() public onlyOwner returns (uint256) {\r\n    if (tokenURIOffset != 0) {\r\n      revert TokenURIOffsetAlreadySet();\r\n    }\r\n    return\r\n      vrfCoordinator.requestRandomWords(\r\n        vrfKeyHash,\r\n        vrfSubscriptionId,\r\n        vrfRequestConfirmations,\r\n        vrfCallbackGasLimit,\r\n        vrfNumWords\r\n      );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev fulfillRandomWords: Callback function used by VRF Coordinator.\r\n   *                          Fonction de rappel utilisée par le coordinateur VRF.\r\n   *\r\n   */\r\n  function fulfillRandomWords(uint256, uint256[] memory randomWords_)\r\n    internal\r\n    override\r\n  {\r\n    if (tokenURIOffset != 0) {\r\n      revert TokenURIOffsetAlreadySet();\r\n    }\r\n    tokenURIOffset = (randomWords_[0] % maxNumberOfLasogettes) + 1;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev tokenURI\r\n   *\r\n   *\r\n   */\r\n  function tokenURI(uint256 tokenId_)\r\n    public\r\n    view\r\n    override(ERC721)\r\n    returns (string memory)\r\n  {\r\n    if (!_exists(tokenId_)) {\r\n      revert URIQueryForNonexistentToken({tokenId: tokenId_});\r\n    }\r\n\r\n    if (tokenURIOffset == 0) {\r\n      return string(placeholderURI);\r\n    } else {\r\n      return\r\n        string(\r\n          abi.encodePacked(baseURI, _getTokenURI(tokenId_).toString(), \".json\")\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev _getTokenURI: get the token URI based on the random offset\r\n                        obtenir l'URI du jeton en fonction du décalage aléatoire\r\n   *\r\n   */\r\n  function _getTokenURI(uint256 tokenId_) internal view returns (uint256) {\r\n    uint256 tempTokenURI = tokenId_ + (tokenURIOffset - 1);\r\n\r\n    // If the returned URI range exceeds the collection length, it wraps to be beginning:\r\n    if (tempTokenURI > maxNumberOfLasogettes - 1) {\r\n      tempTokenURI = tempTokenURI - (maxNumberOfLasogettes);\r\n    }\r\n\r\n    return tempTokenURI;\r\n  }\r\n\r\n  // ===================================\r\n  // OPERATIONAL\r\n  // ===================================\r\n\r\n  /**\r\n   *\r\n   * @dev totalSupply(): totalSupply = tokens minted (tokenCounter) minus burned\r\n   *                     totalSupply = jetons frappés (tokenCounter) moins brûlés\r\n   *\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return tokenCounter - burnCounter;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev burn: Burns `tokenId`. See {ERC721-_burn}.\r\n   *            Brûle `tokenId`. Voir {ERC721-_burn}.\r\n   *\r\n   */\r\n  function burn(uint256 tokenId) public override {\r\n    super.burn(tokenId);\r\n    burnCounter += 1;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev withdrawAll: onlyOwner withdrawal to the beneficiary address\r\n   *                   Retrait uniquement du propriétaire à l'adresse du bénéficiaire\r\n   *\r\n   */\r\n  function withdrawAll() external onlyOwner {\r\n    (bool success, ) = treasuryAddress.call{value: address(this).balance}(\"\");\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev withdrawAmount: onlyOwner withdrawal to the treasury address, amount to withdraw as an argument\r\n                          Retrait du propriétaire uniquement à l'adresse du bénéficiaire, envoi\r\n   * le montant à retirer en argument\r\n   *\r\n   */\r\n  function withdrawAmount(uint256 amount_) external onlyOwner {\r\n    (bool success, ) = treasuryAddress.call{value: amount_}(\"\");\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev receive: Reject all direct payments to the contract except from  owner.\r\n                   Rejeter tous les paiements directs au contrat, sauf du propriétaire.\r\n   *\r\n   */\r\n  receive() external payable {\r\n    if (msg.sender != owner()) {\r\n      revert OnlyOwnerCanFundContract();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @dev fallback: none\r\n   *                rien\r\n   *\r\n   */\r\n  fallback() external payable {\r\n    revert NoFallback();\r\n  }\r\n}\r\n"
    },
    "contracts/LASOG/IEPSPortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// EPS Contracts v2.0.0\r\n\r\npragma solidity 0.8.16;\r\n\r\n/**\r\n *\r\n * @dev Interface for the EPS portal\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * @dev Returns the beneficiary of the `tokenId` token.\r\n *\r\n */\r\ninterface IEPSPortal {\r\n  function beneficiaryOf(\r\n    address tokenContract_,\r\n    uint256 tokenId_,\r\n    uint256 rightsIndex_\r\n  ) external view returns (address beneficiary_);\r\n\r\n  /**\r\n   *\r\n   * @dev Returns the beneficiary balance for a contract.\r\n   *\r\n   */\r\n  function beneficiaryBalanceOf(\r\n    address queryAddress_,\r\n    address tokenContract_,\r\n    uint256 rightsIndex_\r\n  ) external view returns (uint256 balance_);\r\n\r\n  /**\r\n   *\r\n   * @dev Returns the proxied address details (cold and delivery address) for a passed hot address\r\n   *\r\n   */\r\n  function getAddresses(address _receivedAddress)\r\n    external\r\n    view\r\n    returns (\r\n      address cold,\r\n      address delivery,\r\n      bool isProxied\r\n    );\r\n\r\n  /**\r\n   * @dev coldIsLive: Return if a cold wallet is live\r\n   */\r\n  function coldIsLive(address cold_) external view returns (bool);\r\n\r\n  /**\r\n   * @dev hotIsLive: Return if a hot wallet is live\r\n   */\r\n  function hotIsLive(address hot_) external view returns (bool);\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}