{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/BAYCSewerPassClaim.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./lib/Operator.sol\";\nimport \"./lib/IBAYCSewerPass.sol\";\nimport \"./lib/YugaVerify.sol\";\n\n//      |||||\\          |||||\\               |||||\\           |||||\\\n//      ||||| |         ||||| |              ||||| |          ||||| |\n//       \\__|||||\\  |||||\\___\\|               \\__|||||\\   |||||\\___\\|\n//          ||||| | ||||| |                      ||||| |  ||||| |\n//           \\__|||||\\___\\|       Y u g a         \\__|||||\\___\\|\n//              ||||| |             L a b s          ||||| |\n//          |||||\\___\\|          Sewer Pass      |||||\\___\\|\n//          ||||| |                 Claim        ||||| |\n//           \\__|||||||||||\\                      \\__|||||||||||\\\n//              ||||||||||| |                        ||||||||||| |\n//               \\_________\\|                         \\_________\\|\n\nerror ClaimIsNotActive();\nerror TokenAlreadyClaimed();\nerror UnauthorizedOwner();\n\n/**\n * @title BAYC Sewer Pass Claim Smart Contract\n */\ncontract BAYCSewerPassClaim is Operator, YugaVerify, ReentrancyGuard {\n    uint64 constant TIER_FOUR = 4;\n    uint64 constant TIER_THREE = 3;\n    uint64 constant TIER_TWO = 2;\n    uint64 constant TIER_ONE = 1;\n    uint256 constant NO_DOGGO = 10000;\n    address public immutable BAYC_CONTRACT;\n    address public immutable MAYC_CONTRACT;\n    address public immutable BAKC_CONTRACT;\n    bool public claimIsActive;\n    mapping(uint256 => bool) public baycClaimed;\n    mapping(uint256 => bool) public maycClaimed;\n    mapping(uint256 => bool) public bakcClaimed;\n    IBAYCSewerPass public immutable sewerPassContract;\n\n    event SewerPassMinted(\n        uint256 indexed sewerPassTokenId,\n        uint256 indexed tier,\n        uint256 indexed baycMaycTokenId,\n        uint256 bakcTokenId\n    );\n\n    modifier claimable() {\n        if (!claimIsActive) revert ClaimIsNotActive();\n        _;\n    }\n\n    constructor(\n        address _baycContract,\n        address _maycContract,\n        address _bakcContract,\n        address _warmContract,\n        address _delegateCashContract,\n        address _sewerPassContract,\n        address _operator\n    ) Operator(_operator) YugaVerify(_warmContract, _delegateCashContract) {\n        BAYC_CONTRACT = _baycContract;\n        MAYC_CONTRACT = _maycContract;\n        BAKC_CONTRACT = _bakcContract;\n        sewerPassContract = IBAYCSewerPass(_sewerPassContract);\n    }\n\n    /**\n     * @notice Claim Sewer Pass with BAYC and BAKC pair - TIER 4\n     * @param baycTokenId token id of the ape\n     * @param bakcTokenId token id of the dog\n     */\n    function claimBaycBakc(\n        uint256 baycTokenId,\n        uint256 bakcTokenId\n    ) external claimable nonReentrant {\n        _checkBaycClaim(baycTokenId);\n        _checkBakcClaim(bakcTokenId);\n        _mintSewerPass(TIER_FOUR, baycTokenId, bakcTokenId);\n    }\n\n    /**\n     * @notice Claim Sewer Pass with with BAYC - TIER 3\n     * @param baycTokenId token id of the ape\n     */\n    function claimBayc(uint256 baycTokenId) external claimable nonReentrant {\n        _checkBaycClaim(baycTokenId);\n        _mintSewerPass(TIER_THREE, baycTokenId, NO_DOGGO);\n    }\n\n    /**\n     * @notice Claim Sewer Pass with MAYC and BAKC pair - TIER 2\n     * @param maycTokenId token id of the mutant\n     * @param bakcTokenId token id of the dog\n     */\n    function claimMaycBakc(\n        uint256 maycTokenId,\n        uint256 bakcTokenId\n    ) external claimable nonReentrant {\n        _checkMaycClaim(maycTokenId);\n        _checkBakcClaim(bakcTokenId);\n        _mintSewerPass(TIER_TWO, maycTokenId, bakcTokenId);\n    }\n\n    /**\n     * @notice Claim Sewer Pass with MAYC - TIER 1\n     * @param maycTokenId token id of the mutant\n     */\n    function claimMayc(uint256 maycTokenId) external claimable nonReentrant {\n        _checkMaycClaim(maycTokenId);\n        _mintSewerPass(TIER_ONE, maycTokenId, NO_DOGGO);\n    }\n\n    // Manage token checks and claim status\n\n    function _checkBaycClaim(uint256 tokenId) private {\n        if (!verifyTokenOwner(BAYC_CONTRACT, tokenId))\n            revert UnauthorizedOwner();\n        if (baycClaimed[tokenId]) revert TokenAlreadyClaimed();\n        baycClaimed[tokenId] = true;\n    }\n\n    function _checkMaycClaim(uint256 tokenId) private {\n        if (!verifyTokenOwner(MAYC_CONTRACT, tokenId))\n            revert UnauthorizedOwner();\n        if (maycClaimed[tokenId]) revert TokenAlreadyClaimed();\n        maycClaimed[tokenId] = true;\n    }\n\n    function _checkBakcClaim(uint256 tokenId) private {\n        if (!verifyTokenOwner(BAKC_CONTRACT, tokenId))\n            revert UnauthorizedOwner();\n        if (bakcClaimed[tokenId]) revert TokenAlreadyClaimed();\n        bakcClaimed[tokenId] = true;\n    }\n\n    function _mintSewerPass(\n        uint64 tier,\n        uint256 baycMaycTokenId,\n        uint256 bakcTokenId\n    ) private {\n        // prepare mint data for storage\n        uint256 mintData = uint256(tier);\n        mintData |= baycMaycTokenId << 64;\n        mintData |= bakcTokenId << 128;\n\n        uint256 sewerPassTokenId = sewerPassContract.mintSewerPass(\n            _msgSender(),\n            mintData\n        );\n        emit SewerPassMinted(\n            sewerPassTokenId,\n            tier,\n            baycMaycTokenId,\n            bakcTokenId\n        );\n    }\n\n    /**\n     * @notice Check BAYC/MAYC/BAKC token claim status - bayc = 0, mayc = 1, bakc = 2\n     * @param collectionId id of the collection see above\n     * @param tokenId id of the ape, mutant or dog\n     */\n    function checkClaimed(\n        uint8 collectionId,\n        uint256 tokenId\n    ) external view returns (bool) {\n        if (collectionId == 0) {\n            return baycClaimed[tokenId];\n        } else if (collectionId == 1) {\n            return maycClaimed[tokenId];\n        } else if (collectionId == 2) {\n            return bakcClaimed[tokenId];\n        }\n        return false;\n    }\n\n    // Operator functions\n\n    /**\n     * @notice Flip the claim state\n     */\n    function flipClaimIsActiveState() external onlyOperator {\n        claimIsActive = !claimIsActive;\n    }\n\n    /**\n     * @notice Withdraw erc-20 tokens sent to the contract by error\n     * @param coinContract the erc-20 contract address\n     */\n    function withdraw(address coinContract) external onlyOperator {\n        uint256 balance = IERC20(coinContract).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(coinContract).transfer(operator, balance);\n        }\n    }\n}\n"
    },
    "contracts/lib/IBAYCSewerPass.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IBAYCSewerPass {\n    function mintSewerPass(\n        address to,\n        uint256 mintdata\n    ) external returns (uint256);\n}\n"
    },
    "contracts/lib/Operator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nerror OnlyOperatorError();\nerror OperatorZeroAddressCheck();\n\ncontract Operator is Ownable {\n    address public operator;\n\n    event OperatorChanged(address operator);\n\n    modifier onlyOperator() {\n        if (operator != _msgSender()) revert OnlyOperatorError();\n        _;\n    }\n\n    constructor(address _operator) {\n        if (_operator == address(0)) revert OperatorZeroAddressCheck();\n        operator = _operator;\n    }\n\n    /**\n     * @notice change operator\n     */\n    function setOperator(address _operator) external onlyOwner {\n        if (_operator == address(0)) revert OperatorZeroAddressCheck();\n\n        operator = _operator;\n        emit OperatorChanged(_operator);\n    }\n}\n"
    },
    "contracts/lib/YugaVerify.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface WarmInterface {\n    function ownerOf(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (address);\n}\n\ninterface DelegateCashInterface {\n    function checkDelegateForToken(\n        address delegate,\n        address vault,\n        address contract_,\n        uint256 tokenId\n    ) external view returns (bool);\n}\n\nerror ZeroAddressCheck();\n\n/**\n * @title YugaVerify - check for token ownership via contract, warm wallet and delegate cash\n * Warm Wallet https://github.com/wenewlabs/public/tree/main/HotWalletProxy\n * Delegate.cash https://github.com/delegatecash/delegation-registry\n */\ncontract YugaVerify {\n    address public immutable WARM_WALLET_CONTRACT;\n    address public immutable DELEGATE_CASH_CONTRACT;\n\n    constructor(address _warmWalletContract, address _delegateCashContract) {\n        if (\n            _warmWalletContract == address(0) ||\n            _delegateCashContract == address(0)\n        ) revert ZeroAddressCheck();\n        WARM_WALLET_CONTRACT = _warmWalletContract;\n        DELEGATE_CASH_CONTRACT = _delegateCashContract;\n    }\n\n    /**\n     * @notice verify contract token based claim using warm wallet and delegate cash\n     * @param tokenContract the smart contract address of the token\n     * @param tokenId the tokenId\n     */\n    function verifyTokenOwner(\n        address tokenContract,\n        uint256 tokenId\n    ) internal view returns (bool) {\n        address tokenOwner = IERC721(tokenContract).ownerOf(tokenId);\n\n        // 1. check contract token owner\n        // 2. check warm wallet delegation - ownerOf()\n        //      all delegation\n        //      is a mapping of token owner's wallet to hot wallet\n        //      coldWalletToHotWallet[owner].walletAddress\n        // 3. check delegate.cash delegation - checkDelegateForToken()\n        //      checks three forms of delegation all, contract, and contract/token id\n        return (msg.sender == tokenOwner ||\n            msg.sender ==\n            WarmInterface(WARM_WALLET_CONTRACT).ownerOf(\n                tokenContract,\n                tokenId\n            ) ||\n            DelegateCashInterface(DELEGATE_CASH_CONTRACT).checkDelegateForToken(\n                    msg.sender,\n                    tokenOwner,\n                    tokenContract,\n                    tokenId\n                ));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}