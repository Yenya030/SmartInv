{{
  "language": "Solidity",
  "sources": {
    "contracts/NFTMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.14;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./SignedAllowance.sol\";\n\ninterface INFT { \n    function mint(address to, uint256 qty) external;\n    function sweepNFT(address sweeper, uint256 tokenId) external; \n    function unclaimedSupply() external view returns (uint256);\n    function totalMinted() external view returns (uint256);\n    function MAX_ITEMS() external view returns (uint256);\n}\n\ninterface IWBMC { \n    function ownerOf(uint256 tokenId) external view returns (address); \n}\n\ncontract NFTMinter is Ownable, SignedAllowance{  \n\n    /*///////////////////////////////////////////////////////////////\n                            GENERAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    INFT private nftContract;\n    IWBMC private wbmcContract;\n\n    bool public presaleActive;\n    \n    bool public publicSaleActive;\n    uint256 public publicSalePrice;  // 0 ETH\n    uint256 public maxPerPublicMint = 1;\n\n    mapping (uint256 => bool) public claimed;\n\n    /*///////////////////////////////////////////////////////////////\n                              CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _nftContract, address _wbmcContract) {\n        setNFTContract(_nftContract);   \n        wbmcContract = IWBMC(_wbmcContract);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        MINTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function presaleOrder(address to, uint256 nonce, bytes memory signature) public {\n        require (presaleActive, \"Presale not active\");\n\n        //qty is stored in the middle 64 bytes\n        uint256 qty = uint256(uint64(nonce >> 128));\n\n        // this will throw if the allowance has already been used or is not valid\n        _useAllowance(to, nonce, signature);\n\n        nftContract.mint(to, qty); \n    }\n\n    function publicOrder(address to, uint256 qty) public payable {\n        \n        require(tx.origin == msg.sender, \"Only EOAs allowed\");\n        require (publicSaleActive, \"Public sale not active\");\n        require (qty <= maxPerPublicMint, \">Max per mint\");\n        require (msg.value >= publicSalePrice * qty, \"Minter: Not Enough Eth\");\n\n        nftContract.mint(to, qty); \n    }\n\n    function wbmcFreeMint(uint256[] calldata tokenIds) public {\n        require (presaleActive, \"Presale not active\");\n        \n        uint256 qty = 0;\n        \n        for (uint256 i=0; i<tokenIds.length; i++) {\n            uint256 curTokenId = tokenIds[i];\n            if (wbmcContract.ownerOf(curTokenId) == msg.sender && !claimed[curTokenId]) {\n                claimed[curTokenId] = true;\n                qty++;\n            }\n        }\n        nftContract.mint(msg.sender, qty); \n    }\n\n    function adminMint(address to, uint256 qty) public onlyOwner {\n        nftContract.mint(to, qty);\n    }\n\n    function donate() public payable {\n        //  Thank you!\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                        VIEWS\n    //////////////////////////////////////////////////////////////*/\n\n    function unclaimedSupply() public view returns (uint256) {\n        return nftContract.unclaimedSupply();\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       ADMIN FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function setNFTContract(address _newNFT) public onlyOwner {\n        nftContract = INFT(_newNFT);\n    }\n\n    function switchPresale() public onlyOwner {\n        presaleActive = !presaleActive;\n    }\n\n    function switchPublicSale() public onlyOwner {\n        publicSaleActive = !publicSaleActive;\n    }\n\n    function setPublicSalePrice(uint256 _newPublicSalePrice) public onlyOwner {\n        publicSalePrice = _newPublicSalePrice;\n    }\n\n    /// @notice sets allowance signer, this can be used to revoke all unused allowances already out there\n    /// @param newSigner the new signer\n    function setAllowancesSigner(address newSigner) external onlyOwner {\n        _setAllowancesSigner(newSigner);\n    }\n\n    function setMaxPerPublicMint(uint256 _newMaxPerMint) public onlyOwner {\n        maxPerPublicMint = _newMaxPerMint;\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       WITHDRAWALS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Withdraws funds from the contract to msg.sender who is always the owner.\n    /// @param amt amount to withdraw in wei\n    function withdraw(uint256 amt) public onlyOwner {\n        payable(msg.sender).transfer(amt);\n    }\n\n    /*///////////////////////////////////////////////////////////////\n                       ERC721Receiver interface compatibility\n    //////////////////////////////////////////////////////////////*/\n\n    function onERC721Received(\n    address, \n    address, \n    uint256, \n    bytes calldata\n    ) external pure returns(bytes4) {\n        return bytes4(keccak256(\"I do not receive ERC721\"));\n    } \n}\n\n//   That's all, folks!\n\n\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/SignedAllowance.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\n\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\n\n/// @title SignedAllowance\n/// @author Simon Fremaux (@dievardump)\ncontract SignedAllowance {\n    using ECDSA for bytes32;\n\n    // list of already used allowances\n    mapping(bytes32 => bool) public usedAllowances;\n\n    // address used to sign the allowances\n    address private _allowancesSigner;\n\n    /// @notice Helper to know allowancesSigner address\n    /// @return the allowance signer address\n    function allowancesSigner() public view virtual returns (address) {\n        return _allowancesSigner;\n    }\n\n    /// @notice Helper that creates the message that signer needs to sign to allow a mint\n    ///         this is usually also used when creating the allowances, to ensure \"message\"\n    ///         is the same\n    /// @param account the account to allow\n    /// @param nonce the nonce\n    /// @return the message to sign\n    function createMessage(address account, uint256 nonce)\n        public\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(account, nonce, address(this)));\n    }\n\n    /// @notice Helper that creates a list of messages that signer needs to sign to allow mintings\n    /// @param accounts the accounts to allow\n    /// @param nonces the corresponding nonces\n    /// @return messages the messages to sign\n  /*  \n    // function is commented out to save space in the contract\n    // to batch create message will need to use for loop with the createMessage function\n\n    function createMessages(address[] memory accounts, uint256[] memory nonces)\n        external\n        view\n        returns (bytes32[] memory messages)\n    {\n        require(accounts.length == nonces.length, '!LENGTH_MISMATCH!');\n        messages = new bytes32[](accounts.length);\n        for (uint256 i; i < accounts.length; i++) {\n            messages[i] = createMessage(accounts[i], nonces[i]);\n        }\n    } */\n\n    /// @notice This function verifies that the current request is valid\n    /// @dev It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))\n    ///      and that this message was not already used\n    /// @param account the account the allowance is associated to\n    /// @param nonce the nonce associated to this allowance\n    /// @param signature the signature by the allowance signer wallet\n    /// @return the message to mark as used\n    function validateSignature(\n        address account,\n        uint256 nonce,\n        bytes memory signature\n    ) public view returns (bytes32) {\n        return\n            _validateSignature(account, nonce, signature, allowancesSigner());\n    }\n\n    /// @dev It ensures that signer signed a message containing (account, nonce, address(this))\n    ///      and that this message was not already used\n    /// @param account the account the allowance is associated to\n    /// @param nonce the nonce associated to this allowance\n    /// @param signature the signature by the allowance signer wallet\n    /// @param signer the signer\n    /// @return the message to mark as used\n    function _validateSignature(\n        address account,\n        uint256 nonce,\n        bytes memory signature,\n        address signer\n    ) internal view returns (bytes32) {\n        bytes32 message = createMessage(account, nonce)\n            .toEthSignedMessageHash();\n\n        // verifies that the sha3(account, nonce, address(this)) has been signed by signer\n        require(message.recover(signature) == signer, '!INVALID_SIGNATURE!');\n\n        // verifies that the allowances was not already used\n        require(usedAllowances[message] == false, '!ALREADY_USED!');\n\n        return message;\n    }\n\n    /// @notice internal function that verifies an allowance and marks it as used\n    ///         this function throws if signature is wrong or this nonce for this user has already been used\n    /// @param account the account the allowance is associated to\n    /// @param nonce the nonce\n    /// @param signature the signature by the allowance wallet\n    function _useAllowance(\n        address account,\n        uint256 nonce,\n        bytes memory signature\n    ) internal {\n        bytes32 message = validateSignature(account, nonce, signature);\n        usedAllowances[message] = true;\n    }\n\n    /// @notice Allows to change the allowance signer. This can be used to revoke any signed allowance not already used\n    /// @param newSigner the new signer address\n    function _setAllowancesSigner(address newSigner) internal {\n        _allowancesSigner = newSigner;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}