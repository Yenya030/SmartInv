{{
  "language": "Solidity",
  "sources": {
    "contracts/CryptoKaisen.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.5;\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nabstract contract Ownable {\n    address internal owner;\n    constructor(address _owner) {\n        owner = _owner;\n    }\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\"); _;\n    }\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n    function renounceOwnership() public onlyOwner {\n        owner = address(0);\n        emit OwnershipTransferred(address(0));\n    }  \n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract CryptoKaisen is ERC20, Ownable {\n    using SafeMath for uint256;\n    address routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    string constant _name = \"Crypto Kaisen\";\n    string constant _symbol = \"KAISEN\";\n    uint8 constant _decimals = 9;\n\n    uint256 _totalSupply = 999_000_000 * (10 ** _decimals);\n    uint256 public _maxWalletAmount = _totalSupply.mul(1).div(100);\n    uint256 public _maxTx = _totalSupply.mul(1).div(100);\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) _allowances;\n\n    mapping (address => bool) isWhitelist;\n    mapping (address => bool) isFeeExempt;\n    mapping (address => bool) isTxLimitExempt;\n\n    uint256 marketingFee = 2;\n    uint256 developmentFee = 1;\n    uint256 totalFee = marketingFee + developmentFee;\n    uint256 feeDenominator = 100;\n\n    address public marketingFeeReceiver = 0xC01352E5CdEBEF96E28b2C982ed5fBD660Bf22E0;\n    address public developmentFeeReceiver = 0x536A1534912C6f5b161324176ecDF0AbbF821C37;\n\n    IDEXRouter public router;\n    address public pair;\n\n    bool public swapEnabled = false;\n    bool inSwap;\n    modifier swapping() { inSwap = true; _; inSwap = false; }\n\n    constructor () Ownable(msg.sender) {\n        router = IDEXRouter(routerAdress);\n        pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\n        _allowances[address(this)][address(router)] = type(uint256).max;\n\n        address _owner = owner;\n        isFeeExempt[_owner] = true;\n        isFeeExempt[marketingFeeReceiver] = true;\n        isFeeExempt[developmentFeeReceiver] = true;\n\n        isTxLimitExempt[_owner] = true;\n        isTxLimitExempt[DEAD] = true;\n\n        isTxLimitExempt[marketingFeeReceiver] = true;\n        isTxLimitExempt[developmentFeeReceiver] = true;\n\n        isWhitelist[_owner] = true;\n        isWhitelist[marketingFeeReceiver] = true;\n        isWhitelist[developmentFeeReceiver] = true;\n\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    receive() external payable { }\n\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\n    function decimals() external pure override returns (uint8) { return _decimals; }\n    function symbol() external pure override returns (string memory) { return _symbol; }\n    function name() external pure override returns (string memory) { return _name; }\n    function getOwner() external view override returns (address) { return owner; }\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function approveMax(address spender) external returns (bool) {\n        return approve(spender, type(uint256).max);\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowances[sender][msg.sender] != type(uint256).max){\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\n        \n        if (!swapEnabled && sender == pair && !isWhitelist[recipient]) {\n            return false;\n        }\n\n        if (!isTxLimitExempt[sender] && (recipient == pair || sender == pair)) {\n            require(amount <= _maxTx, \"Buy/Sell exceeds the max tx\");\n        }\n\n        if (recipient != pair && recipient != DEAD) {\n            require(isTxLimitExempt[recipient] || _balances[recipient] + amount <= _maxWalletAmount, \"Transfer amount exceeds the bag size.\");\n        }\n        \n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n\n        uint256 amountReceived = (shouldTakeFee(sender) && shouldTakeFee(recipient)) ? takeFee(sender, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n\n        emit Transfer(sender, recipient, amountReceived);\n        return true;\n    }\n    \n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function shouldTakeFee(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function setFeeExempt(address adr, bool _isFeeExempt) external onlyOwner{\n        isFeeExempt[adr] = _isFeeExempt; \n    }\n    \n    function setWhitelist(address[] memory adr, bool _isWhitelist) external onlyOwner{\n        for (uint256 i = 0; i < adr.length; i++) {\n            isWhitelist[adr[i]] = _isWhitelist; \n        }\n    }\n\n    function setMaxTx(uint256 amountPercent) external onlyOwner {\n        require(amountPercent >= 1, \"Max tx amount must not be less than 0.1% percent\");\n        _maxTx = _totalSupply.mul(amountPercent).div(1000);\n    }\n\n    function setTxLimitExempt(address adr, bool _isTxLimitExempt) external onlyOwner{\n        isTxLimitExempt[adr] = _isTxLimitExempt;\n    }\n\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\n        uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount);\n        return amount.sub(feeAmount);\n    }\n\n    function enableSwap() external onlyOwner{\n        swapEnabled = true;\n    }\n\n    function sendTaxToWallets() external {\n        require(_balances[address(this)] > 0,\"Insufficient Balance\");\n\n        uint256 contractTokenBalance = _balances[address(this)];\n        uint256 amountToMarketing = contractTokenBalance.mul(marketingFee).div(totalFee);\n        uint256 amountToDevelopment = contractTokenBalance.sub(amountToMarketing);\n\n        _balances[marketingFeeReceiver] = _balances[marketingFeeReceiver].add(amountToMarketing);\n        _balances[developmentFeeReceiver] = _balances[developmentFeeReceiver].add(amountToDevelopment);\n        _balances[address(this)] = 0;\n    }\n\n    function clearStuckBalance() external {\n        payable(marketingFeeReceiver).transfer(address(this).balance);\n    }\n\n    function setWalletLimit(uint256 amountPercent) external onlyOwner {\n        require(amountPercent >= 1,\"Wallet limit mush be not less than 0.1 percent\");\n        _maxWalletAmount = (_totalSupply * amountPercent ) / 1000;\n    }\n\n    function setFee(uint256 _marketingFee, uint256 _developmentFee) external onlyOwner {\n        require(_marketingFee + _developmentFee <= 10, \"Fee can not be greater than 10%\");\n        marketingFee = _marketingFee;\n        developmentFee = _developmentFee;\n        totalFee = marketingFee + developmentFee;\n    }    \n\n    function updateMarketingFeeReceiver(address _address) external onlyOwner {\n        marketingFeeReceiver = _address;\n    }\n\n    function updateDevelopmentFeeReceiver(address _address) external onlyOwner {\n        developmentFeeReceiver = _address;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}