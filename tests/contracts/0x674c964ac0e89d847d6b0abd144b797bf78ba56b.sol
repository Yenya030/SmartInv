{{
  "language": "Solidity",
  "sources": {
    "contracts/GreenWorldToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IPair.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./interfaces/IAgent.sol\";\nimport \"./interfaces/ICharity.sol\";\n\ncontract GreenWorld is ERC20, Ownable {\n    IFactory public immutable factory;\n    IAgent public immutable agent;\n    ICharity public charity;\n    address public immutable ecosystem;\n    address public staking;\n\n    uint256 public liquidityFeeSell;\n    uint256 public charityFeeSell;\n    uint256 public stakingRewardFeeSell;\n    uint256 public ecosystemFeeSell;\n\n    uint256 public liquidityFeeBuy;\n    uint256 public charityFeeBuy;\n    uint256 public stakingRewardFeeBuy;\n    uint256 public ecosystemFeeBuy;\n\n    uint256 private constant PERCENT = 1000;\n    uint256 private constant MAX_SUM_FEE_PERCENTS = 200;\n\n    mapping(address => bool) public isExcludedFromFee;\n\n    struct FeesAmount {\n        uint256 liquidity;\n        uint256 charity;\n        uint256 ecosystem;\n        uint256 stakingReward;\n    }\n\n    constructor(\n        address[] memory addresses,\n        uint256[] memory amounts,\n        uint256[] memory feesSell,\n        uint256[] memory feesBuy,\n        IFactory _factory,\n        IAgent _agent\n    ) ERC20(\"GreenWorld\", \"GWD\") {\n        require(addresses.length == amounts.length, \"Wrong inputs\");\n        for (uint256 i = 0; i < amounts.length; i++) {\n            isExcludedFromFee[addresses[i]] = true;\n            _mint(addresses[i], amounts[i] * 10**decimals());\n        }\n\n        liquidityFeeSell = feesSell[0];\n        charityFeeSell = feesSell[1];\n        stakingRewardFeeSell = feesSell[2];\n        ecosystemFeeSell = feesSell[3];\n\n        liquidityFeeBuy = feesBuy[0];\n        charityFeeBuy = feesBuy[1];\n        stakingRewardFeeBuy = feesBuy[2];\n        ecosystemFeeBuy = feesBuy[3];\n\n        factory = _factory;\n        agent = _agent;\n        ecosystem = addresses[5];\n        isExcludedFromFee[address(agent)] = true;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n\n    /** @dev Change isExcludedFromFee status\n     *  @param _account an address of account to change\n     */\n    function changeExcludedFromFee(address _account) external onlyOwner {\n        isExcludedFromFee[_account] = !isExcludedFromFee[_account];\n    }\n\n    /**\n     @dev Change liquidity sell and buy fee. Onle for owner\n     @param buy new liquidityFeeBuy. Enter as x * 10\n     @param sell new liquidityFeeSell. Enter as x * 10 \n     */\n    function changeLiquidityFee(uint256 buy, uint256 sell) external onlyOwner {\n        require(\n            buy + charityFeeBuy + ecosystemFeeBuy + stakingRewardFeeBuy <=\n                MAX_SUM_FEE_PERCENTS &&\n                sell +\n                    charityFeeSell +\n                    ecosystemFeeSell +\n                    stakingRewardFeeSell <=\n                MAX_SUM_FEE_PERCENTS,\n            \"Fees > 20%!\"\n        );\n        liquidityFeeBuy = buy;\n        liquidityFeeSell = sell;\n    }\n\n    /**\n     @dev Change charity sell and buy fee. Onle for owner\n     @param buy new charityFeeBuy. Enter as x * 10\n     @param sell new charityFeeSell. Enter as x * 10 \n     */\n    function changeCharityFee(uint256 buy, uint256 sell) external onlyOwner {\n        require(\n            buy + liquidityFeeBuy + ecosystemFeeBuy + stakingRewardFeeBuy <=\n                MAX_SUM_FEE_PERCENTS &&\n                sell +\n                    liquidityFeeSell +\n                    ecosystemFeeSell +\n                    stakingRewardFeeSell <=\n                MAX_SUM_FEE_PERCENTS,\n            \"Fees > 20%!\"\n        );\n        charityFeeBuy = buy;\n        charityFeeSell = sell;\n    }\n\n    /**\n     @dev Change ecosystem sell and buy fee. Onle for owner\n     @param buy new ecosystemFeeBuy. Enter as x * 10\n     @param sell new ecosystemFeeSell. Enter as x * 10 \n     */\n    function changeEcosystemFee(uint256 buy, uint256 sell) external onlyOwner {\n        require(\n            buy + charityFeeBuy + liquidityFeeBuy + stakingRewardFeeBuy <=\n                MAX_SUM_FEE_PERCENTS &&\n                sell +\n                    charityFeeSell +\n                    liquidityFeeSell +\n                    stakingRewardFeeSell <=\n                MAX_SUM_FEE_PERCENTS,\n            \"Fees > 20%!\"\n        );\n        ecosystemFeeBuy = buy;\n        ecosystemFeeSell = sell;\n    }\n\n    /**\n     @dev Change staking reward sell and buy fee. Onle for owner\n     @param buy new stakingRewardFeeBuy. Enter as x * 10\n     @param sell new stakingRewardFeeSell. Enter as x * 10 \n     */\n    function changeStakingRewardFee(uint256 buy, uint256 sell)\n        external\n        onlyOwner\n    {\n        require(\n            buy + charityFeeBuy + ecosystemFeeBuy + liquidityFeeBuy <=\n                MAX_SUM_FEE_PERCENTS &&\n                sell + charityFeeSell + ecosystemFeeSell + liquidityFeeSell <=\n                MAX_SUM_FEE_PERCENTS,\n            \"Fees > 20%!\"\n        );\n        stakingRewardFeeBuy = buy;\n        stakingRewardFeeSell = sell;\n    }\n\n    /**\n     @dev Sets staking address for sending reward. Only for owner\n     @param _staking staking address\n     */\n    function setStaking(address _staking) external onlyOwner {\n        require(\n            _staking != address(0) && staking == address(0),\n            \"Staking address is not 0\"\n        );\n        staking = _staking;\n        _mint(_staking, 75000000 * (10**decimals()));\n    }\n\n    /**\n     @dev Sets charity address for sending fee. Only for owner\n     @param _charity charity address\n     */\n    function setCharity(ICharity _charity) external onlyOwner {\n        charity = _charity;\n        isExcludedFromFee[address(_charity)] = true;\n    }\n\n    /**\n     @dev Overrided ERC20 transfer. If msg.sender address = pair => buy.\n     If buy and 'to' address is not excluded from fee => takes fee\n     */\n    function transfer(address to, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        address _owner = _msgSender();\n        bool isPair = _pairCheck(_owner);\n        if (isPair && !isExcludedFromFee[to]) {\n            FeesAmount memory fees;\n            if (liquidityFeeBuy > 0) {\n                fees.liquidity = (amount * liquidityFeeBuy) / PERCENT;\n                _transfer(_owner, address(agent), fees.liquidity);\n                agent.increaseStock(fees.liquidity);\n            }\n            if (charityFeeBuy > 0 && address(charity) != address(0)) {\n                fees.charity = (amount * charityFeeBuy) / PERCENT;\n                _transfer(_owner, address(charity), fees.charity);\n                charity.addToCharity(fees.charity, to);\n            }\n            if (ecosystemFeeBuy > 0) {\n                fees.ecosystem = (amount * ecosystemFeeBuy) / PERCENT;\n                _transfer(_owner, ecosystem, fees.ecosystem);\n            }\n            if (stakingRewardFeeBuy > 0 && staking != address(0)) {\n                fees.stakingReward = (amount * stakingRewardFeeBuy) / PERCENT;\n                _transfer(_owner, staking, fees.stakingReward);\n            }\n            uint256 amountWithFee = amount -\n                fees.liquidity -\n                fees.charity -\n                fees.ecosystem -\n                fees.stakingReward;\n            _transfer(_owner, to, amountWithFee);\n        } else {\n            _transfer(_owner, to, amount);\n            if (!isPair) {\n                charity.swapNow();\n                if (\n                    (agent.getStock() > agent.getThreshold()) &&\n                    (_owner != address(agent))\n                ) {\n                    agent.autoLiquidity();\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     @dev Overrided ERC20 transferFrom. If 'to' address = pair => sell.\n     If sell and 'from' address is not excluded from fee => takes fee\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public override returns (bool) {\n        _spendAllowance(from, _msgSender(), amount);\n        bool isPair = _pairCheck(to);\n        if (isPair && !isExcludedFromFee[from]) {\n            FeesAmount memory fees;\n            if (liquidityFeeSell > 0) {\n                fees.liquidity = (amount * liquidityFeeSell) / PERCENT;\n                _transfer(from, address(agent), fees.liquidity);\n                agent.increaseStock(fees.liquidity);\n            }\n            if (charityFeeSell > 0 && address(charity) != address(0)) {\n                fees.charity = (amount * charityFeeSell) / PERCENT;\n                _transfer(from, address(charity), fees.charity);\n                charity.addToCharity(fees.charity, from);\n            }\n            if (ecosystemFeeSell > 0) {\n                fees.ecosystem = (amount * ecosystemFeeSell) / PERCENT;\n                _transfer(from, ecosystem, fees.ecosystem);\n            }\n            if (stakingRewardFeeSell > 0 && staking != address(0)) {\n                fees.stakingReward = (amount * stakingRewardFeeSell) / PERCENT;\n                _transfer(from, staking, fees.stakingReward);\n            }\n            uint256 amountWithFee = amount -\n                fees.liquidity -\n                fees.charity -\n                fees.ecosystem -\n                fees.stakingReward;\n            _transfer(from, to, amountWithFee);\n        } else {\n            _transfer(from, to, amount);\n            if (!isPair) {\n                charity.swapNow();\n                if (\n                    (agent.getStock() > agent.getThreshold()) &&\n                    (from != address(agent))\n                ) {\n                    agent.autoLiquidity();\n                }\n            }\n        }\n        return true;\n    }\n\n    function _pairCheck(address _token) internal view returns (bool) {\n        address token0;\n        address token1;\n\n        if (isContract(_token)) {\n            try IPair(_token).token0() returns (address _token0) {\n                token0 = _token0;\n            } catch {\n                return false;\n            }\n\n            try IPair(_token).token1() returns (address _token1) {\n                token1 = _token1;\n            } catch {\n                return false;\n            }\n\n            address goodPair = factory.getPair(token0, token1);\n            if (goodPair != _token) {\n                return false;\n            }\n\n            if (token0 == address(this) || token1 == address(this)) return true;\n            else return false;\n        } else return false;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size > 0;\n    }\n}\n"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFactory {\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n"
    },
    "contracts/interfaces/ICharity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICharity {\n    function addToCharity(uint256 amount, address user) external; \n\n    function swapNow() external;\n}"
    },
    "contracts/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPair {\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n}\n"
    },
    "contracts/interfaces/IAgent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAgent {\n    function increaseStock(uint256 amount) external;\n\n    function autoLiquidity() external;\n\n    function getStock() external view returns (uint256);\n\n    function getThreshold() external view returns (uint256);\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}