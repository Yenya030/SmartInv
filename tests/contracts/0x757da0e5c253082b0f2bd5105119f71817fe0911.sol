{{
  "language": "Solidity",
  "sources": {
    "contracts/Vito.sol": {
      "content": "/**\n *Submitted for verification at Etherscan.io on 2022-12-10\n*/\n\npragma solidity ^0.8.17;\n// SPDX-License-Identifier: Unlicensed\ninterface IERC20 {\n\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract Context {\n    //function _msgSender() internal view virtual returns (address payable) {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this;\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {codehash := extcodehash(account)}\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success,) = recipient.call{value : amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function getPair(address token0, address token1) external view returns (address);\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external payable returns (uint[] memory amounts);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function WETH() external pure returns (address);\n}\n\ncontract Vito is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n    modifier lockTheSwap {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    event TokensBurned(uint256, uint256);\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    address public marketPair = address(0);\n    IUniswapV2Pair private v2Pair;\n    address private feeOne = 0xb4c31a2Cfc11f6493FA5E4B38c6a7EB1d95D9058;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    string private _name = \"Very Special Dragon\";\n    string private _symbol = \"Vito\";\n    uint8 private _decimals = 18;\n    uint256 private _tTotal = 1e8 * 1e18;\n    uint256 public _maxWalletAmount = (_tTotal * 3) / 100;\n    bool inSwapAndLiquify;\n    uint256 public buyFee = 5;\n    uint256 public sellFee = 5;\n    address public deployer;\n    uint256 public ethPriceToSwap = 0.01 ether; \n    bool public isBurnEnabled = true;\n    uint256 public burnFrequencynMinutes = 30;  \n    uint256 public burnRateInBasePoints = 100;  //100 = 1%\n    uint256 public tokensBurnedSinceLaunch = 0;\n    uint public nextLiquidityBurnTimeStamp;\n\n    uint256 totalShare = 50;\n    uint256 feeShare = 30;\n    uint256 lpShare = 20;\n   \n    constructor () {\n        address tokenOwner = 0xc50a2b5c1E57ff8f1A9321f8213a332711222255;\n         _balances[tokenOwner] = _tTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[msg.sender] = true;\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[tokenOwner] = true;\n        _isExcludedFromFee[feeOne] = true;\n\n        deployer = tokenOwner;\n        transferOwnership(deployer);\n        emit Transfer(address(0), tokenOwner, _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function setShares(uint256 _feeShar, uint256 _lpShare) public onlyOwner{\n        lpShare = _lpShare;\n        feeShare = _feeShar;\n        totalShare = _lpShare + _feeShar;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function setTaxFees(uint256 buy, uint256 sell) external onlyOwner {\n        buyFee = buy;\n        sellFee = sell;\n    }\n\n   function excludeIncludeFromFee(address[] calldata addresses, bool isExcludeFromFee) public onlyOwner {\n        addRemoveFee(addresses, isExcludeFromFee);\n    }\n\n   function setBurnSettings(uint256 frequencyInMinutes, uint256 burnBasePoints) external onlyOwner {\n        burnFrequencynMinutes = frequencyInMinutes;\n        burnRateInBasePoints = burnBasePoints;\n    }\n\n    function burnTokensFromLiquidityPool() private lockTheSwap {\n        uint liquidity = balanceOf(marketPair);\n        uint tokenBurnAmount = liquidity.div(burnRateInBasePoints);\n        if(tokenBurnAmount > 0) {\n            //burn tokens from LP and update liquidity pool price\n            _burn(marketPair, tokenBurnAmount);\n            v2Pair.sync();\n            tokensBurnedSinceLaunch = tokensBurnedSinceLaunch.add(tokenBurnAmount);\n            nextLiquidityBurnTimeStamp = block.timestamp.add(burnFrequencynMinutes.mul(60));\n            emit TokensBurned(tokenBurnAmount, nextLiquidityBurnTimeStamp);\n        }\n    }\n\n    function enableDisableBurnToken(bool _enabled) public onlyOwner {\n        isBurnEnabled = _enabled;\n    }\n\n    function burnTokens() external {\n        require(block.timestamp >= nextLiquidityBurnTimeStamp, \"Next burn time is not due yet, be patient\");\n        require(isBurnEnabled, \"Burning tokens is currently disabled\");\n        burnTokensFromLiquidityPool();\n    }\n\n    function addRemoveFee(address[] calldata addresses, bool flag) private {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            address addr = addresses[i];\n            _isExcludedFromFee[addr] = flag;\n        }\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _tTotal = _tTotal.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n    \n    function openTrading(address _pair) external onlyOwner() {\n        require(marketPair == address(0),\"UniswapV2Pair has already been set\");\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        marketPair = _pair; \n        v2Pair = IUniswapV2Pair(marketPair);\n        nextLiquidityBurnTimeStamp = block.timestamp;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function setMaxWalletAmount(uint256 maxWalletAmount) external onlyOwner() {\n        _maxWalletAmount = maxWalletAmount;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        uint256 taxAmount = 0;\n        bool takeFees = !_isExcludedFromFee[from] && !_isExcludedFromFee[to] && from != owner() && to != owner();\n        if(from != deployer && to != deployer && from != address(this) && to != address(this)) {\n            if(takeFees) {\n                if (from == marketPair) {\n                    taxAmount = amount.mul(buyFee).div(100);\n                    uint256 amountToHolder = amount.sub(taxAmount);\n                    uint256 holderBalance = balanceOf(to).add(amountToHolder);\n                    require(holderBalance <= _maxWalletAmount, \"Wallet cannot exceed max Wallet limit\");\n                }\n                if (from != marketPair && to == marketPair) {\n                    if(block.timestamp >= nextLiquidityBurnTimeStamp && isBurnEnabled) {\n                            burnTokensFromLiquidityPool();\n                    } else {\n                        uint256 contractTokenBalance = balanceOf(address(this));\n                        if (contractTokenBalance > 0) {\n                            \n                                uint256 tokenAmount = getTokenPrice();\n                                if (contractTokenBalance >= tokenAmount && !inSwapAndLiquify) {\n                                    swapTokensForEth(tokenAmount);\n                                }\n                            }\n                        }\n                }\n                if (from != marketPair && to != marketPair) {\n                    uint256 fromBalance = balanceOf(from);\n                    uint256 toBalance = balanceOf(to);\n                    require(fromBalance <= _maxWalletAmount && toBalance <= _maxWalletAmount, \"Wallet cannot exceed max Wallet limit\");\n                }\n            }\n        }       \n        uint256 transferAmount = amount.sub(taxAmount);\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(transferAmount);\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\n        emit Transfer(from, to, transferAmount);\n    }\n\n    function manualSwap() external {\n        uint256 contractTokenBalance = balanceOf(address(this));\n        if (contractTokenBalance > 0) {\n            if (!inSwapAndLiquify) {\n                swapTokensForEth(contractTokenBalance);\n            }\n        }\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n\n        uint256 lpTokens = (tokenAmount * lpShare) / totalShare;\n        uint256 feeTokens = (tokenAmount * feeShare) / totalShare;\n\n        uint256 beforeBalance;\n\n        if(lpTokens > 0){\n            uint256 firstHalf = lpTokens / 2;\n            uint256 secondHalf = lpTokens - firstHalf;\n            beforeBalance = address(this).balance;\n            swapToETH(firstHalf);\n            if(address(this).balance > beforeBalance){\n                addLiquidity(secondHalf, address(this).balance - beforeBalance);\n            }\n        }          \n\n        if(feeTokens > 0) {\n            swapToETH(feeTokens);\n            if(address(this).balance > 0) {\n                uint256 ethBalance = address(this).balance;\n                payable(feeOne).transfer(ethBalance);\n            }\n        }\n   }\n\n    function swapToETH(uint256 tokensAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokensAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokensAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n \n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function getTokenPrice() public view returns (uint256)  {\n        address[] memory path = new address[](2);\n        path[0] = uniswapV2Router.WETH();\n        path[1] = address(this);\n        return uniswapV2Router.getAmountsOut(ethPriceToSwap, path)[1];\n    }\n\n    function setEthPriceToSwap(uint256 ethPriceToSwap_) external onlyOwner {\n        ethPriceToSwap = ethPriceToSwap_;\n    }\n\n    receive() external payable {}\n\n    function sendEth() external onlyOwner {\n        uint256 ethBalance = address(this).balance;\n        payable(msg.sender).transfer(ethBalance);\n    }\n\n    function sendERC20Tokens(address contractAddress) external onlyOwner {\n        IERC20 erc20Token = IERC20(contractAddress);\n        uint256 balance = erc20Token.balanceOf(address(this));\n        erc20Token.transfer(msg.sender, balance);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}