{{
  "language": "Solidity",
  "sources": {
    "src/Yeet.sol": {
      "content": "/*                                                                                                                                                                          \n                                                                                                                                                                                                                                                                                            |   |                                                  \n #     # ####### ####### #######    ####### #######          # ####### ####### ####### \n  #   #  #       #          #            #  #                # #       #          #    \n   # #   #       #          #           #   #                # #       #          #    \n    #    #####   #####      #          #    #####            # #####   #####      #    \n    #    #       #          #         #     #          #     # #       #          #    \n    #    #       #          #        #      #          #     # #       #          #    \n    #    ####### #######    #       ####### #######     #####  ####### #######    #    \n                                                                                       \n\n An experimental protocol that purges jeets on every button push.\n\n WEBSITE: https://yeetzejeet.com\n TELEGRAM: https://t.me/YeetZeJeet\n TWITTER: https://twitter.com/YeetZeJeet\n\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\";\nimport \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\";\nimport \"interfaces/IUniswapV2Router02.sol\";\nimport \"interfaces/IUniswapV2Pair.sol\";\nimport \"interfaces/IUniswapV2Factory.sol\";\n\n\ncontract Yeet is IERC20, Ownable, ReentrancyGuard {\n    string public name = \"Yeet ze Jeet\";\n    string public symbol = \"YEET\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) public isExcludedFromTax;\n\n    bool public isTimeToYeet;\n    bool public isYeetReserve;\n    bool public tradingOpen;\n\n    uint256 public buyTax = 5;\n    uint256 public sellTax = 5;\n    uint256 public maxTaxSwap = 5_000e18;\n    \n    uint256 public lastYeetTimestamp;\n    uint256 public lastYeetReserve;\n    uint256 public yeetCooldown;\n\n    IUniswapV2Pair public immutable uniswapV2Pair;\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address payable public immutable taxWallet;\n\n    constructor() {\n        totalSupply = 1_000_000e18;\n        balanceOf[msg.sender] = totalSupply;\n\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Pair = IUniswapV2Pair(\n            IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH())\n        );\n\n        taxWallet = payable(0x9423Ffa556c9b538c8fd29C939Dc4335E1724836);\n        isYeetReserve = address(this) < uniswapV2Router.WETH();\n        yeetCooldown = 24 hours;\n\n        isExcludedFromTax[owner()] = true;\n        isExcludedFromTax[address(this)] = true;\n        isExcludedFromTax[taxWallet] = true;\n        isExcludedFromTax[0xF1A64C73e389404d43f1C4B9A37BC2d3517d782D] = true; // Presale addr\n        isExcludedFromTax[0x2c952eE289BbDB3aEbA329a4c41AE4C836bcc231] = true; // Wentokens addr\n    }\n\n    event Yeeted(uint256 prevYeetReserve, uint256 newYeetReserve, uint256 ethReserve, uint256 yeetBurned);\n    event FailedToYeet(uint256 prevYeetReserve, uint256 newYeetReserve);\n    event AddedLiquidity(uint256 yeetAmount, uint256 ethAmount);\n\n    bool inSwap = false;\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    receive() external payable {}\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) private {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n        _spendAllowance(sender, _msgSender(), amount);\n        _transfer(sender, recipient, amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        if (!tradingOpen) {\n            require(isExcludedFromTax[from], \"Can't trade yet\");\n        }\n\n        uint256 taxAmount = 0;\n\n        if (isTimeToYeet && !isExcludedFromTax[from] && !isExcludedFromTax[to]) {\n            if (from == address(uniswapV2Pair) && to != address(uniswapV2Router)) {\n                taxAmount = (amount * buyTax) / 100;\n            }\n\n            if (to == address(uniswapV2Pair) && from != address(this)) {\n                taxAmount = (amount * sellTax) / 100;\n            }\n\n            if (taxAmount > 0) {\n                balanceOf[address(this)] += taxAmount;\n                emit Transfer(from, address(this), taxAmount);\n            }\n\n            uint256 contractTokenBalance = balanceOf[address(this)];\n            bool canSwap = contractTokenBalance > 0;\n\n            if (canSwap && !inSwap && to == address(uniswapV2Pair)) {\n                swapAndLiquify(min(amount, min(contractTokenBalance, maxTaxSwap)));\n            }\n        }\n\n        balanceOf[from] -= amount;\n        balanceOf[to] += amount - taxAmount;\n    }\n    \n\n    function burnFrom(address account, uint256 amount) private {\n        address deadAddress = 0x000000000000000000000000000000000000dEaD;\n        balanceOf[account] -= amount;\n        balanceOf[deadAddress] += amount;\n        emit Transfer(account, deadAddress, amount);\n    }\n\n    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {\n        uint256 oneThird = tokenAmount / 3;\n        uint256 twoThirds = tokenAmount - oneThird;\n\n        uint256 initialBalance = address(this).balance;\n\n        swapTokensForEth(twoThirds);\n\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        addLiquidity(oneThird, newBalance);\n\n        emit AddedLiquidity(oneThird, newBalance);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uint256 ethBalBefore = address(this).balance;\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount, 0, path, address(this), block.timestamp\n        );\n\n        uint256 ethToOwner = address(this).balance - ((address(this).balance - ethBalBefore) / 3);\n\n        (bool success,) = taxWallet.call{value: ethToOwner}(\"\");\n        require(success);\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this), tokenAmount, 0, 0, owner(), block.timestamp);\n    }\n\n    function manualSwap() external {\n        require(_msgSender() == taxWallet, \"Not authorized\");\n        uint256 tokenBalance = balanceOf[address(this)];\n        if (tokenBalance > 0) {\n            swapAndLiquify(tokenBalance);\n        }\n    }\n\n    /**\n     * This function burns jeet tokens from lp, pumping the price.\n     */\n    function yeet() public nonReentrant {\n        require(isTimeToYeet, \"Yeet machine broke\");\n        require(lastYeetTimestamp + yeetCooldown <= block.timestamp, \"Yeet cooldown not met\");\n\n        // Get current liquidity pair reserves\n        (uint112 currentYeetReserve, ) = getReserves();\n\n        // Check if current reserve is higher since last yeet\n        // (meaning price is lower)\n        if (currentYeetReserve > lastYeetReserve) {\n            // Burn the difference from lp\n            uint256 toBurn = currentYeetReserve - lastYeetReserve;\n            burnFrom(address(uniswapV2Pair), toBurn);\n            uniswapV2Pair.sync();\n\n            (uint112 newYeetReserve, uint112 newEthReserve) = getReserves();\n\n            //Let them jeets know\n            emit Yeeted(currentYeetReserve, newYeetReserve, newEthReserve, toBurn);\n        } else {\n            emit FailedToYeet(currentYeetReserve, lastYeetReserve);\n        }\n\n        // Reset reserve and timestamp\n        (uint112 updatedYeetReserve,) = getReserves();\n        lastYeetReserve = updatedYeetReserve;\n        lastYeetTimestamp = block.timestamp;\n    }\n\n    /**\n     *  This function always returns currentYeetReserve at first slot of the tuple,\n     *  which is not always the case with calling pair for reserves\n     */\n    function getReserves() public view returns (uint112, uint112) {\n        (uint112 reserve0, uint112 reserve1,) = uniswapV2Pair.getReserves();\n        uint112 yeetReserve = isYeetReserve ? reserve0 : reserve1;\n        uint112 ethReserve = !isYeetReserve ? reserve0 : reserve1;\n        return (yeetReserve, ethReserve);\n    }\n\n    /**\n     * To get usd price: divide current eth price by returned values\n     */\n    function getPredictedPrice()\n        public\n        view\n        returns (uint256 _priceNow, uint256 _priceAfterYeet)\n    {\n        (uint112 currentYeetReserve, uint112 currentEthReserve) = getReserves();\n        uint256 priceNow = currentYeetReserve / currentEthReserve;\n        uint256 priceAfterYeet;\n\n        if (currentYeetReserve > lastYeetReserve) {\n            priceAfterYeet = lastYeetReserve / currentEthReserve;\n        } else {\n            priceAfterYeet = priceNow;\n        }\n\n        return (priceNow, priceAfterYeet);\n    }\n\n    /**\n     * Estimates burn amount from lp\n     */\n    function estimateBurn()\n        public\n        view\n        returns (uint256)\n    {\n        (uint112 currentYeetReserve,) = getReserves();\n        uint256 toBurn;\n\n        if (currentYeetReserve > lastYeetReserve) {\n            toBurn = currentYeetReserve - lastYeetReserve;\n        }\n\n        return toBurn;\n    }\n\n    /**\n     * Set how much time shoud pass between yeets\n     */\n    function setYeetCooldown(uint256 cooldown) public onlyOwner {\n        yeetCooldown = cooldown;\n    }\n\n    /**\n     * Start the protocol\n     */\n    function timeToYeet(bool isIt) public onlyOwner {\n        isTimeToYeet = isIt;\n    }\n\n    /**\n     * Add liquidity and set initial price\n     */\n    function addLiquidity(uint256 tokenAmount) public payable onlyOwner {\n        lastYeetReserve = tokenAmount;\n        lastYeetTimestamp = block.timestamp;\n        this.transferFrom(owner(), address(this), tokenAmount);\n        this.approve(address(uniswapV2Router), type(uint256).max);\n        uniswapV2Router.addLiquidityETH{value: msg.value}(address(this), tokenAmount, 0, 0, owner(), block.timestamp);\n    }\n\n    /**\n     * Open trading on Uniswap\n     */\n    function openTrading() public payable onlyOwner {\n        tradingOpen = true;\n    }\n\n    function addExcludedFromTax(address toBeExcluded) public payable onlyOwner {\n        isExcludedFromTax[toBeExcluded] = true;\n    }\n\n    function removeExcludedFromTax(address toBeRemoved) public payable onlyOwner {\n        isExcludedFromTax[toBeRemoved] = false;\n    }\n\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}