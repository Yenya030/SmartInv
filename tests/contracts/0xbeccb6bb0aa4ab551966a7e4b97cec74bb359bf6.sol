{{
  "language": "Solidity",
  "sources": {
    "contracts/token/GovernorMills.sol": {
      "content": "pragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\ninterface InvInterface {\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\n    function totalSupply() external view returns (uint256);\n}\n\ninterface XinvInterface {\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\n    function totalSupply() external view returns (uint256);\n    function exchangeRateCurrent() external returns (uint);\n}\n\ninterface TimelockInterface {\n    function delay() external view returns (uint);\n    function GRACE_PERIOD() external view returns (uint);\n    function setDelay(uint256 delay_) external;\n    function acceptAdmin() external;\n    function setPendingAdmin(address pendingAdmin_) external;\n    function queuedTransactions(bytes32 hash) external view returns (bool);\n    function queueTransaction(address target, uint256 value, string calldata signature, bytes calldata data, uint256 eta) external returns (bytes32);\n    function cancelTransaction(address target, uint256 value, string calldata signature, bytes calldata data, uint256 eta) external;\n    function executeTransaction(address target, uint256 value, string calldata signature, bytes calldata data, uint256 eta) external returns (bytes memory);\n}\n\ncontract GovernorMills {\n    /// @notice The name of this contract\n    string public constant name = \"Inverse Governor Mills\";\n\n    /// @notice The maximum number of actions that can be included in a proposal\n    function proposalMaxOperations() public pure returns (uint) { return 20; } // 20 actions\n\n    /// @notice The delay before voting on a proposal may take place, once proposed\n    function votingDelay() public pure returns (uint) { return 1; } // 1 block\n\n    /// @notice The duration of voting on a proposal, in blocks\n    function votingPeriod() public pure returns (uint) { return 17280; } // ~3 days in blocks (assuming 15s blocks)\n\n    /// @notice The address of the Protocol Timelock\n    TimelockInterface public timelock;\n\n    /// @notice The address of the governance token A\n    InvInterface public inv;\n\n    /// @notice The address of the governance token B\n    XinvInterface public xinv;\n\n    /// @notice The total number of proposals\n    uint256 public proposalCount;\n\n    /// @notice The guardian\n    address public guardian;\n\n    /// @notice proposal threshold\n    uint256 public proposalThreshold = 1000 ether; // 1k INV\n\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n    uint256 public quorumVotes = 4000 ether; // 4k INV\n\n    struct Proposal {\n        /// @notice Unique id for looking up a proposal\n        uint id;\n\n        /// @notice Creator of the proposal\n        address proposer;\n\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\n        uint eta;\n\n        /// @notice the ordered list of target addresses for calls to be made\n        address[] targets;\n\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n        uint[] values;\n\n        /// @notice The ordered list of function signatures to be called\n        string[] signatures;\n\n        /// @notice The ordered list of calldata to be passed to each call\n        bytes[] calldatas;\n\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\n        uint startBlock;\n\n        /// @notice The block at which voting ends: votes must be cast prior to this block\n        uint endBlock;\n\n        /// @notice Current number of votes in favor of this proposal\n        uint forVotes;\n\n        /// @notice Current number of votes in opposition to this proposal\n        uint againstVotes;\n\n        /// @notice Flag marking whether the proposal has been canceled\n        bool canceled;\n\n        /// @notice Flag marking whether the proposal has been executed\n        bool executed;\n\n        /// @notice Receipts of ballots for the entire set of voters\n        mapping (address => Receipt) receipts;\n    }\n\n    /// @notice Ballot receipt record for a voter\n    struct Receipt {\n        /// @notice Whether or not a vote has been cast\n        bool hasVoted;\n\n        /// @notice Whether or not the voter supports the proposal\n        bool support;\n\n        /// @notice The number of votes the voter had, which were cast\n        uint96 votes;\n    }\n\n    /// @notice Possible states that a proposal may be in\n    enum ProposalState {\n        Pending,\n        Active,\n        Canceled,\n        Defeated,\n        Succeeded,\n        Queued,\n        Expired,\n        Executed\n    }\n\n    /// @notice The official record of all proposals ever proposed\n    mapping (uint => Proposal) public proposals;\n\n    /// @notice The latest proposal for each proposer\n    mapping (address => uint) public latestProposalIds;\n\n    /// @notice Addresses that can propose without voting power\n    mapping (address => bool) public proposerWhitelist;\n\n    /// @notice proposal id => xinv.exchangeRateCurrent\n    mapping (uint => uint) public xinvExchangeRates;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,bool support)\");\n\n    /// @notice An event emitted when a new proposal is created\n    event ProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description);\n\n    /// @notice An event emitted when a vote has been cast on a proposal\n    event VoteCast(address voter, uint proposalId, bool support, uint votes);\n\n    /// @notice An event emitted when a proposal has been canceled\n    event ProposalCanceled(uint id);\n\n    /// @notice An event emitted when a proposal has been queued in the Timelock\n    event ProposalQueued(uint id, uint eta);\n\n    /// @notice An event emitted when a proposal has been executed in the Timelock\n    event ProposalExecuted(uint id);\n\n    /// @notice An event emitted when a new guardian has been set\n    event NewGuardian(address guardian);\n\n    /// @notice An event emitted when proposal threshold is updated\n    event ProposalThresholdUpdated(uint256 oldThreshold, uint256 newThreshold);\n\n    /// @notice An event emitted when proposal quorum is updated\n    event QuorumUpdated(uint256 oldQuorum, uint256 newQuorum);\n\n    /// @notice An event emitted when an address is added or removed from the proposer whitelist\n    event ProposerWhitelistUpdated(address proposer, bool value);\n\n    constructor(TimelockInterface timelock_, InvInterface inv_, XinvInterface xinv_) public {\n        timelock = timelock_;\n        inv = inv_;\n        xinv = xinv_;\n        guardian = msg.sender;\n    }\n\n    function _getPriorVotes(address _proposer, uint256 _blockNumber, uint256 _exchangeRate) internal view returns (uint96) {\n        uint96 invPriorVotes = inv.getPriorVotes(_proposer, _blockNumber);\n        uint96 xinvPriorVotes = uint96(\n            (\n                uint256(\n                    xinv.getPriorVotes(_proposer, _blockNumber)\n                ) * _exchangeRate\n            ) / 1 ether\n        );\n        \n        return add96(invPriorVotes, xinvPriorVotes);\n    }\n\n    function setGuardian(address _newGuardian) public {\n        require(msg.sender == guardian, \"GovernorMills::setGuardian: only guardian\");\n        guardian = _newGuardian;\n        \n        emit NewGuardian(guardian);\n    }\n\n    /**\n     * @notice Add new pending admin to queue\n     * @param newPendingAdmin The new admin\n     * @param eta ETA\n     */\n    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\n        require(msg.sender == guardian, \"GovernorMills::__queueSetTimelockPendingAdmin: only guardian\");\n        timelock.queueTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\n    }\n\n    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\n        require(msg.sender == guardian, \"GovernorMills::__executeSetTimelockPendingAdmin: only guardian\");\n        timelock.executeTransaction(address(timelock), 0, \"setPendingAdmin(address)\", abi.encode(newPendingAdmin), eta);\n    }\n\n    function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) public returns (uint) {\n        require(_getPriorVotes(msg.sender, sub256(block.number, 1), xinv.exchangeRateCurrent()) > proposalThreshold || proposerWhitelist[msg.sender], \"GovernorMills::propose: proposer votes below proposal threshold\");\n        require(targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length, \"GovernorMills::propose: proposal function information arity mismatch\");\n        require(targets.length != 0, \"GovernorMills::propose: must provide actions\");\n        require(targets.length <= proposalMaxOperations(), \"GovernorMills::propose: too many actions\");\n\n        uint latestProposalId = latestProposalIds[msg.sender];\n        if (latestProposalId != 0) {\n          ProposalState proposersLatestProposalState = state(latestProposalId);\n          require(proposersLatestProposalState != ProposalState.Active, \"GovernorMills::propose: one live proposal per proposer, found an already active proposal\");\n          require(proposersLatestProposalState != ProposalState.Pending, \"GovernorMills::propose: one live proposal per proposer, found an already pending proposal\");\n        }\n\n        uint startBlock = add256(block.number, votingDelay());\n        uint endBlock = add256(startBlock, votingPeriod());\n\n        proposalCount++;\n        Proposal memory newProposal = Proposal({\n            id: proposalCount,\n            proposer: msg.sender,\n            eta: 0,\n            targets: targets,\n            values: values,\n            signatures: signatures,\n            calldatas: calldatas,\n            startBlock: startBlock,\n            endBlock: endBlock,\n            forVotes: 0,\n            againstVotes: 0,\n            canceled: false,\n            executed: false\n        });\n\n        proposals[newProposal.id] = newProposal;\n        xinvExchangeRates[newProposal.id] = xinv.exchangeRateCurrent();\n        latestProposalIds[newProposal.proposer] = newProposal.id;\n\n        emit ProposalCreated(newProposal.id, msg.sender, targets, values, signatures, calldatas, startBlock, endBlock, description);\n        return newProposal.id;\n    }\n\n    function queue(uint proposalId) public {\n        require(state(proposalId) == ProposalState.Succeeded, \"GovernorMills::queue: proposal can only be queued if it is succeeded\");\n        Proposal storage proposal = proposals[proposalId];\n        uint eta = add256(block.timestamp, timelock.delay());\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            _queueOrRevert(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\n        }\n        proposal.eta = eta;\n        emit ProposalQueued(proposalId, eta);\n    }\n\n    function _queueOrRevert(address target, uint value, string memory signature, bytes memory data, uint eta) internal {\n        require(!timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))), \"GovernorMills::_queueOrRevert: proposal action already queued at eta\");\n        timelock.queueTransaction(target, value, signature, data, eta);\n    }\n\n    function execute(uint proposalId) public {\n        require(state(proposalId) == ProposalState.Queued, \"GovernorMills::execute: proposal can only be executed if it is queued\");\n        Proposal storage proposal = proposals[proposalId];\n        proposal.executed = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.executeTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n        emit ProposalExecuted(proposalId);\n    }\n\n    function cancel(uint proposalId) public {\n        ProposalState state = state(proposalId);\n        require(state != ProposalState.Executed, \"GovernorMills::cancel: cannot cancel executed proposal\");\n\n        Proposal storage proposal = proposals[proposalId];\n        require(msg.sender == guardian || (_getPriorVotes(proposal.proposer, sub256(block.number, 1), xinvExchangeRates[proposal.id]) < proposalThreshold && !proposerWhitelist[proposal.proposer]), \"GovernorMills::cancel: proposer above threshold\");\n\n        proposal.canceled = true;\n        for (uint i = 0; i < proposal.targets.length; i++) {\n            timelock.cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\n        }\n\n        emit ProposalCanceled(proposalId);\n    }\n\n    /**\n     * @notice Update the threshold value required to create a new proposal.\n     * @param newThreshold The new threshold to set.\n     */\n    function updateProposalThreshold(uint256 newThreshold) public {\n        require(msg.sender == guardian || msg.sender == address(timelock), \"GovernorMills::updateProposalThreshold: sender must be gov guardian or timelock\");\n        require(newThreshold <= inv.totalSupply(), \"GovernorMills::updateProposalThreshold: threshold too large\");\n        require(newThreshold != proposalThreshold, \"GovernorMills::updateProposalThreshold: no change in value\");\n\n        uint256 oldThreshold = proposalThreshold;\n        proposalThreshold = newThreshold;\n\n        emit ProposalThresholdUpdated(oldThreshold, newThreshold);\n    }\n\n    /**\n     * @notice Update the quorum value required to pass a proposal.\n     * @param newQuorum The new quorum to set.\n     */\n    function updateProposalQuorum(uint256 newQuorum) public {\n        require(msg.sender == guardian || msg.sender == address(timelock), \"GovernorMills::newQuorum: sender must be gov guardian or timelock\");\n        require(newQuorum <= inv.totalSupply(), \"GovernorMills::newQuorum: threshold too large\");\n        require(newQuorum != quorumVotes, \"GovernorMills::newQuorum: no change in value\");\n\n        uint256 oldQuorum = quorumVotes;\n        quorumVotes = newQuorum;\n\n        emit QuorumUpdated(oldQuorum, newQuorum);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == guardian, \"GovernorMills::acceptAdmin: sender must be gov guardian\");\n        timelock.acceptAdmin();\n    }\n\n    /**\n     * @notice Add or remove an address to the proposerWhitelist\n     * @param proposer address to be updated on the whitelist\n     * @param value true to add, false to remove\n     */\n    function updateProposerWhitelist(address proposer, bool value) public {\n        require(msg.sender == address(timelock), \"GovernorMills::updateProposerWhitelist: sender must be timelock\");\n\n        proposerWhitelist[proposer] = value;\n\n        emit ProposerWhitelistUpdated(proposer, value);\n    }\n\n    function getActions(uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas) {\n        Proposal storage p = proposals[proposalId];\n        return (p.targets, p.values, p.signatures, p.calldatas);\n    }\n\n    function getReceipt(uint proposalId, address voter) public view returns (Receipt memory) {\n        return proposals[proposalId].receipts[voter];\n    }\n\n    function state(uint proposalId) public view returns (ProposalState) {\n        require(proposalCount >= proposalId && proposalId > 0, \"GovernorMills::state: invalid proposal id\");\n        Proposal storage proposal = proposals[proposalId];\n        if (proposal.canceled) {\n            return ProposalState.Canceled;\n        } else if (block.number <= proposal.startBlock) {\n            return ProposalState.Pending;\n        } else if (block.number <= proposal.endBlock) {\n            return ProposalState.Active;\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\n            return ProposalState.Defeated;\n        } else if (proposal.eta == 0) {\n            return ProposalState.Succeeded;\n        } else if (proposal.executed) {\n            return ProposalState.Executed;\n        } else if (block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())) {\n            return ProposalState.Expired;\n        } else {\n            return ProposalState.Queued;\n        }\n    }\n\n    function castVote(uint proposalId, bool support) public {\n        return _castVote(msg.sender, proposalId, support);\n    }\n\n    function castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"GovernorMills::castVoteBySig: invalid signature\");\n        return _castVote(signatory, proposalId, support);\n    }\n\n    function _castVote(address voter, uint proposalId, bool support) internal {\n        require(state(proposalId) == ProposalState.Active, \"GovernorMills::_castVote: voting is closed\");\n        Proposal storage proposal = proposals[proposalId];\n        Receipt storage receipt = proposal.receipts[voter];\n        require(receipt.hasVoted == false, \"GovernorMills::_castVote: voter already voted\");\n        uint96 votes = _getPriorVotes(voter, proposal.startBlock, xinvExchangeRates[proposal.id]);\n\n        if (support) {\n            proposal.forVotes = add256(proposal.forVotes, votes);\n        } else {\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\n        }\n\n        receipt.hasVoted = true;\n        receipt.support = support;\n        receipt.votes = votes;\n\n        emit VoteCast(voter, proposalId, support, votes);\n    }\n\n    function add96(uint96 a, uint96 b) internal pure returns(uint96) {\n        uint96 c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"addition overflow\");\n        return c;\n    }\n\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\n        require(b <= a, \"subtraction underflow\");\n        return a - b;\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}