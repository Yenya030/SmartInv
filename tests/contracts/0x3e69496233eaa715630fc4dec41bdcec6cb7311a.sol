{{
  "language": "Solidity",
  "sources": {
    "contracts/STAKING.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Staking is Ownable {\r\n    uint256 public NFT_BASE_RATE = 1000000000000000000; // 1 per day\r\n\r\n    address public NFT_ADDRESS; //NFT Collection Address\r\n    address public TOKEN_ADDRESS;\r\n\r\n    bool public stakingLive = false;\r\n    bool public locked = false;\r\n\r\n    mapping(uint256 => uint256) internal NftTimeStaked;\r\n    mapping(uint256 => address) internal NftToStaker;\r\n    mapping(address => uint256[]) internal StakerToNft;\r\n\r\n    mapping(uint256 => uint256) private NftToType;\r\n    mapping(address => uint256) public claimable;\r\n\r\n    uint256 type1Multiplier = 3;\r\n    uint256 type2Multiplier = 5;\r\n    uint256 type3Multiplier = 5;\r\n\r\n    event ClaimVirtual(address indexed staker, uint256 amount);\r\n\r\n    IERC721Enumerable private nft;\r\n\r\n    constructor(address nft_address, address token_address) {\r\n        if (token_address != address(0)) {\r\n            TOKEN_ADDRESS = token_address;\r\n        }\r\n        NFT_ADDRESS = nft_address;\r\n        nft = IERC721Enumerable(NFT_ADDRESS);\r\n    }\r\n\r\n    function getTokenIDsStaked(address staker)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return StakerToNft[staker];\r\n    }\r\n\r\n    function stakeCount() public view returns (uint256) {\r\n        return nft.balanceOf(address(this));\r\n    }\r\n\r\n    function removeIdFromArray(uint256[] storage arr, uint256 tokenId)\r\n        internal\r\n    {\r\n        uint256 length = arr.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (arr[i] == tokenId) {\r\n                length--;\r\n                if (i < length) {\r\n                    arr[i] = arr[length];\r\n                }\r\n                arr.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // covers single staking and multiple\r\n    function stake(uint256[] calldata tokenIds) public {\r\n        require(stakingLive, \"Staking not Live!\");\r\n        uint256 id;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            id = tokenIds[i];\r\n            require(\r\n                nft.ownerOf(id) == msg.sender && NftToStaker[id] == address(0),\r\n                \"Token not owned by staker\"\r\n            );\r\n            // set trait type to default if not set\r\n            if (NftToType[id] == 0) {\r\n                NftToType[id] = 1;\r\n            }\r\n            //NFT transfer\r\n            nft.transferFrom(msg.sender, address(this), id);\r\n            //Track data\r\n            StakerToNft[msg.sender].push(id);\r\n            NftTimeStaked[id] = block.timestamp;\r\n            NftToStaker[id] = msg.sender;\r\n        }\r\n    }\r\n\r\n    function unstakeAll() public {\r\n        require(\r\n            StakerToNft[msg.sender].length > 0,\r\n            \"Need at least 1 staked to unstake\"\r\n        );\r\n        uint256 total = 0;\r\n\r\n        for (uint256 i = StakerToNft[msg.sender].length; i > 0; i--) {\r\n            uint256 tokenId = StakerToNft[msg.sender][i - 1];\r\n\r\n            nft.transferFrom(address(this), msg.sender, tokenId);\r\n            //append calcuated field\r\n            total += calculateRewardsByTokenId(tokenId);\r\n            // count from end\r\n            StakerToNft[msg.sender].pop();\r\n            NftToStaker[tokenId] = address(0);\r\n            // set total rewards to 0 , timestamp to 0\r\n            NftTimeStaked[tokenId] = 0;\r\n        }\r\n\r\n        claimable[msg.sender] += total;\r\n    }\r\n\r\n    function unstake(uint256[] calldata tokenIds) public {\r\n        uint256 total = 0;\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 id = tokenIds[i];\r\n            require(NftToStaker[id] == msg.sender, \"NOT the staker\");\r\n\r\n            nft.transferFrom(address(this), msg.sender, id);\r\n            //append calcuated field\r\n            total += calculateRewardsByTokenId(id);\r\n            // remove specific id from array\r\n            removeIdFromArray(StakerToNft[msg.sender], id);\r\n            NftToStaker[id] = address(0);\r\n            // set total rewards to 0 , timestamp to 0\r\n            NftTimeStaked[id] = 0;\r\n        }\r\n\r\n        claimable[msg.sender] += total;\r\n    }\r\n\r\n    function claim(uint256 tokenId) external {\r\n        require(NftToStaker[tokenId] == msg.sender, \"NOT the staker\");\r\n        require(TOKEN_ADDRESS != address(0), \"Token Withdraw disabled\");\r\n        //append calcuated field\r\n        uint256 total = calculateRewardsByTokenId(tokenId);\r\n        NftTimeStaked[tokenId] = block.timestamp;\r\n        // add claimable\r\n        if (claimable[msg.sender] > 0) {\r\n            total += claimable[msg.sender];\r\n            claimable[msg.sender] = 0;\r\n        }\r\n        IERC20(TOKEN_ADDRESS).transfer(msg.sender, total);\r\n    }\r\n\r\n    function claimAll() external {\r\n        require(TOKEN_ADDRESS != address(0), \"Token Withdraw disabled\");\r\n        uint256 total = 0;\r\n        uint256[] memory TokenIds = StakerToNft[msg.sender];\r\n        for (uint256 i = 0; i < TokenIds.length; i++) {\r\n            uint256 id = TokenIds[i];\r\n            require(NftToStaker[id] == msg.sender, \"Sender not staker\");\r\n            //append calcuated field\r\n            total += calculateRewardsByTokenId(id);\r\n            NftTimeStaked[id] = block.timestamp;\r\n        }\r\n        // add claimable\r\n        if (claimable[msg.sender] > 0) {\r\n            total += claimable[msg.sender];\r\n            claimable[msg.sender] = 0;\r\n        }\r\n        IERC20(TOKEN_ADDRESS).transfer(msg.sender, total);\r\n    }\r\n\r\n    // claims and burns all virtual tokens for shop use\r\n    function claimVirtual() external {\r\n        uint256 total = 0;\r\n        uint256[] memory TokenIds = StakerToNft[msg.sender];\r\n        for (uint256 i = 0; i < TokenIds.length; i++) {\r\n            uint256 id = TokenIds[i];\r\n            require(NftToStaker[id] == msg.sender, \"Sender not staker\");\r\n            //append calcuated field\r\n            total += calculateRewardsByTokenId(id);\r\n            //set timestamp , set current rewards to 0\r\n            NftTimeStaked[id] = block.timestamp;\r\n        }\r\n        // add claimable\r\n        if (claimable[msg.sender] > 0) {\r\n            total += claimable[msg.sender];\r\n            claimable[msg.sender] = 0;\r\n        }\r\n        emit ClaimVirtual(msg.sender, total);\r\n    }\r\n\r\n    //maps token id to staker address\r\n    function getNftStaker(uint256 tokenId) public view returns (address) {\r\n        return NftToStaker[tokenId];\r\n    }\r\n\r\n    //return public is token id staked in contract\r\n    function isStaked(uint256 tokenId) public view returns (bool) {\r\n        return (NftToStaker[tokenId] != address(0));\r\n    }\r\n\r\n    function getType(uint256 tokenId) public view returns (uint256) {\r\n        return NftToType[tokenId];\r\n    }\r\n\r\n    /* Calculate Reward functions */\r\n\r\n    // calculate the rewards for a specific token id\r\n    function calculateRewardsByTokenId(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256 _rewards)\r\n    {\r\n        uint256 total = 0;\r\n        // get the time staked for the token id\r\n        uint256 tempRewards = (block.timestamp - NftTimeStaked[tokenId]);\r\n        // calculate the rewards per time staked\r\n        if (NftToType[tokenId] == 1) {\r\n            tempRewards = (tempRewards * type1Multiplier);\r\n        }\r\n        if (NftToType[tokenId] == 2) {\r\n            tempRewards = (tempRewards * type2Multiplier);\r\n        }\r\n        if (NftToType[tokenId] == 3) {\r\n            tempRewards = (tempRewards * type3Multiplier);\r\n        }\r\n        // add the rewards to the total\r\n        total += (((tempRewards * NFT_BASE_RATE) / 86400));\r\n        return (total);\r\n    }\r\n\r\n    //total rewards for staker\r\n    function getAllRewards(address staker) public view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256[] memory tokenIds = StakerToNft[staker];\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            //append calcuated field\r\n            total += (calculateRewardsByTokenId(tokenIds[i]));\r\n        }\r\n        // add claimable\r\n        total += claimable[staker];\r\n        return total;\r\n    }\r\n\r\n    function getRewardsPerDay(uint256[] calldata tokenId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < tokenId.length; i++) {\r\n            if (NftToType[tokenId[i]] == 1) {\r\n                total += type1Multiplier;\r\n            }\r\n            if (NftToType[tokenId[i]] == 2) {\r\n                total += type2Multiplier;\r\n            }\r\n            if (NftToType[tokenId[i]] == 3) {\r\n                total += type3Multiplier;\r\n            }\r\n        }\r\n        return (total * (NFT_BASE_RATE / 1 ether));\r\n    }\r\n\r\n    /* Owner Functions */\r\n\r\n    //set type list for specific token id\r\n    function setTypeList(uint256 tokenId, uint256 typeNumber)\r\n        external\r\n        onlyOwner\r\n    {\r\n        NftToType[tokenId] = typeNumber;\r\n    }\r\n\r\n    // set full type list for specific token ids and override any previous type list\r\n    function setFullTypeList(uint256[] calldata idList, uint256 typeNumber)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < idList.length; i++) {\r\n            NftToType[idList[i]] = typeNumber;\r\n        }\r\n    }\r\n\r\n    // set multiplier for specific token id\r\n    function setTypeMultiplier(uint256 typeNumber, uint256 multiplier)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (typeNumber == 1) {\r\n            type1Multiplier = multiplier;\r\n        }\r\n        if (typeNumber == 2) {\r\n            type2Multiplier = multiplier;\r\n        }\r\n        if (typeNumber == 3) {\r\n            type3Multiplier = multiplier;\r\n        }\r\n    }\r\n\r\n    // set base rate\r\n    function setBaseRate(uint256 baseRate) external onlyOwner {\r\n        NFT_BASE_RATE = baseRate;\r\n    }\r\n\r\n    // set token address\r\n    function setTokenAddress(address tokenAddress) external onlyOwner {\r\n        TOKEN_ADDRESS = tokenAddress;\r\n    }\r\n\r\n    //unstake all tokens , used for emergency unstaking , requires deploying a new contract\r\n    //  NftTimeStaked , NftToStaker ,  StakerToNft , nftStaked still defined\r\n    function emergencyUnstake() external payable onlyOwner {\r\n        require(locked == true, \"lock is on\");\r\n        uint256 currSupply = nft.totalSupply();\r\n        for (uint256 i = 0; i < currSupply; i++) {\r\n            if (NftToStaker[i] != address(0)) {\r\n                address sendAddress = NftToStaker[i];\r\n                nft.transferFrom(address(this), sendAddress, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    //return lock change\r\n    function returnLockToggle() public onlyOwner {\r\n        locked = !locked;\r\n    }\r\n\r\n    // activate staking\r\n    function toggle() external onlyOwner {\r\n        stakingLive = !stakingLive;\r\n    }\r\n\r\n    //withdraw amount of tokens or all tokens\r\n    function withdraw(uint256 bal) external onlyOwner {\r\n        uint256 balance = bal;\r\n        if (balance == 0) {\r\n            balance = IERC20(TOKEN_ADDRESS).balanceOf(address(this));\r\n        }\r\n        IERC20(TOKEN_ADDRESS).transfer(msg.sender, balance);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}