{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DolzCrowdsale1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IDolzToken.sol\";\n\nstruct SaleSettings {\n    address token;\n    address wallet;\n    uint256 saleStart;\n    uint256 saleEnd;\n    uint256 withdrawalStart;\n    uint256 withdrawPeriodDuration;\n    uint256 withdrawPeriodNumber;\n    uint256 minBuyValue;\n    uint256 maxTokenAmountPerAddress;\n    uint256 exchangeRate;\n    uint256 referralRewardPercentage;\n    uint256 amountToSell;\n}\n\n/**\n * @notice ICO smart contract with start and end, vesting and referral reward.\n * Payments are meant to be made in ERC20 stable coins.\n * @dev Only the address of the token to be sold has to be set at deployment.\n * The rest is accessible via setters until the start of the sale.\n */\ncontract DolzCrowdsale1 is Ownable {\n    using SafeERC20 for IERC20;\n\n    // Token to be sold\n    address private immutable token;\n    // Wallet that receives the payment tokens\n    address private wallet;\n    // Timestamp in seconds of the start of the ICO\n    uint256 internal saleStart;\n    // Timestamp in seconds of the end of the ICO\n    uint256 internal saleEnd;\n    // Timestamp in seconds when users can start to withdraw\n    uint256 internal withdrawalStart;\n    // Duration in seconds of each vesting period\n    uint256 private withdrawPeriodDuration;\n    // Number of vesting period\n    uint256 private withdrawPeriodNumber;\n    // Minimum Mwei value to buy in dollars\n    uint256 private minBuyValue;\n    // Maximum token amount to be bought per address\n    uint256 private maxTokenAmountPerAddress;\n    // Exchange rate between stable coins and token\n    // E.g. 125 would mean you get 125 tokens for 1 dollar, so the price would be\n    // 0,8cts per token (1 dollar / 125 = 0.008)\n    uint256 private exchangeRate;\n    // Percentage of the tokens bought that referrals get\n    // E.g. for a 30 value, if a buyer buys 100 tokens the referral will get 30\n    uint256 private referralRewardPercentage;\n    // Total number of tokens sold (exculdes referral rewards)\n    uint256 internal soldAmount;\n    // Total number of tokens given to referral rewards\n    uint256 internal rewardsAmount;\n    // Amount of tokens available to buyers\n    uint256 private amountToSell;\n    // Burn remaining tokens already called\n    bool private burnCalled;\n\n    // Set the address of token authorized for payments to true\n    mapping(address => bool) private authorizedPaymentCurrencies;\n    // Map buyers and referrals addresses to the amount they can claim\n    mapping(address => uint256) private userToClaimableAmount;\n    // Map buyers and referrals addresses to the amount they already claimed\n    mapping(address => uint256) private userToWithdrewAmount;\n    // Track referral amounts\n    mapping(address => uint256) private userToReferralRewardAmount;\n\n    event WalletUpdated(address newWallet, address indexed updater);\n    event SaleStartUpdated(uint256 newSaleStart, address indexed updater);\n    event SaleEndUpdated(uint256 newSaleEnd, address indexed updater);\n    event WithdrawalStartUpdated(\n        uint256 newWithdrawalStart,\n        address indexed updater\n    );\n    event WithdrawPeriodDurationUpdated(\n        uint256 newWithdrawPeriodDuration,\n        address indexed updater\n    );\n    event WithdrawPeriodNumberUpdated(\n        uint256 newWithdrawPeriodNumber,\n        address indexed updater\n    );\n    event MinBuyValueUpdated(uint256 newMinBuyValue, address indexed updater);\n    event MaxTokenAmountPerAddressUpdated(\n        uint256 newMaxTokenAmountPerAddress,\n        address indexed updater\n    );\n    event ExchangeRateUpdated(uint256 newExchangeRate, address indexed updater);\n    event ReferralRewardPercentageUpdated(\n        uint256 newReferralRewardPercentage,\n        address indexed updater\n    );\n    event AmountToSellUpdated(uint256 newAmountToSell, address indexed updater);\n\n    event PaymentCurrenciesAuthorized(\n        address[] tokens,\n        address indexed updater\n    );\n    event PaymentCurrenciesRevoked(\n        address[] tokens,\n        address indexed updater\n    );\n\n    event ReferralRegistered(address newReferral);\n    event TokenBought(\n        address indexed account,\n        address indexed stableCoin,\n        uint256 value,\n        address indexed referral\n    );\n\n    event TokenWithdrew(address indexed account, uint256 amount);\n    event RemainingTokensBurnt(uint256 remainingBalance);\n\n    /**\n     * @dev Check if the sale has already started.\n     */\n    modifier onlyBeforeSaleStart() {\n        if (saleStart > 0) {\n            require(\n                block.timestamp < saleStart,\n                \"DolzCrowdsale: sale already started\"\n            );\n        }\n        _;\n    }\n\n    /// @dev Check if the withdrawal period has start\n    modifier withdrawalStarted(){\n        require(block.timestamp >= withdrawalStart);\n        _;\n    }\n    \n    constructor(\n        address _token,\n        address _wallet,\n        uint256 _saleStart,\n        uint256 _saleEnd,\n        uint256 _withdrawalStart,\n        uint256 _withdrawPeriodDuration,\n        uint256 _withdrawPeriodNumber,\n        uint256 _minBuyValue,\n        uint256 _maxTokenAmountPerAddress,\n        uint256 _exchangeRate,\n        uint256 _referralRewardPercentage,\n        uint256 _amountToSell\n    ) {\n        token = _token;\n        wallet = _wallet;\n        saleStart = _saleStart;\n        saleEnd = _saleEnd;\n        withdrawalStart = _withdrawalStart;\n        withdrawPeriodDuration = _withdrawPeriodDuration;\n        withdrawPeriodNumber = _withdrawPeriodNumber;\n        minBuyValue = _minBuyValue;\n        maxTokenAmountPerAddress = _maxTokenAmountPerAddress;\n        exchangeRate = _exchangeRate;\n        referralRewardPercentage = _referralRewardPercentage;\n        amountToSell = _amountToSell;\n        burnCalled = false;\n    }\n\n    /**\n     * @notice Enable to get all the infos about the sale.\n     * @return See state variables comments.\n     */\n    function getSaleSettings() external view returns (SaleSettings memory) {\n        return\n            SaleSettings(\n                token,\n                wallet,\n                saleStart,\n                saleEnd,\n                withdrawalStart,\n                withdrawPeriodDuration,\n                withdrawPeriodNumber,\n                minBuyValue,\n                maxTokenAmountPerAddress,\n                exchangeRate,\n                referralRewardPercentage,\n                amountToSell\n            );\n    }\n\n    function getSoldAmount() external view returns (uint256) {\n        return soldAmount;\n    }\n\n    /**\n     * @notice Returns the amount of token a user will be able to withdraw after withdrawal start,\n     * depending on vesting periods.\n     * @param account Address to get claimable amount of.\n     * @return Number of claimable tokens.\n     */\n    function getClaimableAmount(address account)\n        external\n        view\n        returns (uint256)\n    {\n        return userToClaimableAmount[account];\n    }\n\n    /**\n     * @notice Returns the amount earned as a referral,\n     *\n     * @param account Address to get referral amount.\n     * @return Number of rewards.\n     */\n    function getReferralRewardsAmount(address account)\n        external\n        view\n        returns (uint256)\n    {\n        return userToReferralRewardAmount[account];\n    }\n\n    /**\n     * @notice Returns the amount of token a user has already withdrew.\n     * @param account Address to get withdrew amount of.\n     * @return Number of withdrew tokens.\n     */\n    function getWithdrewAmount(address account)\n        external\n        view\n        returns (uint256)\n    {\n        return userToWithdrewAmount[account];\n    }\n\n    /**\n     * @notice Enable to know if a token is authorized to buy the ICO token.\n     * @param paymentCurrency Address of the token to check.\n     * @return True if the token is authorized, false if not.\n     */\n    function isAuthorizedPaymentCurrency(address paymentCurrency)\n        external\n        view\n        returns (bool)\n    {\n        return authorizedPaymentCurrencies[paymentCurrency];\n    }\n\n    /**\n     * @notice Enable to update the address that will receive the payments for token sales.\n     * @dev The wallet address can be updated at any time, even after the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newWallet Address of the account that will receive the payments.\n     */\n    function setWallet(address newWallet) external onlyOwner {\n        wallet = newWallet;\n        emit WalletUpdated(newWallet, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the start date of the sale.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newSaleStart Timestamp in seconds from when the users will be able to buy the tokens.\n     */\n    function setSaleStart(uint256 newSaleStart)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        saleStart = newSaleStart;\n        emit SaleStartUpdated(newSaleStart, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the end date of the sale.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newSaleEnd Timestamp in seconds from when the users will not be able to buy the tokens anymore.\n     */\n    function setSaleEnd(uint256 newSaleEnd)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        saleEnd = newSaleEnd;\n        emit SaleEndUpdated(newSaleEnd, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the start date of the withdrawal period.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newWithdrawalStart Timestamp in seconds from when the users will be able to withdraw their\n     * claimable amount, according to the vesting configuration.\n     */\n    function setWithdrawalStart(uint256 newWithdrawalStart)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        withdrawalStart = newWithdrawalStart;\n        emit WithdrawalStartUpdated(newWithdrawalStart, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the duration of each withdrawal period.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newWithdrawPeriodDuration Duration in seconds of 1 withdrawal period.\n     */\n    function setWithdrawPeriodDuration(uint256 newWithdrawPeriodDuration)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        withdrawPeriodDuration = newWithdrawPeriodDuration;\n        emit WithdrawPeriodDurationUpdated(\n            newWithdrawPeriodDuration,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Enable to update the number of withdrawal periods.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newWithdrawPeriodNumber Integer representing the number of withdrawal period. Also defines\n     * how much of the claimable amount will be withdrawal at each period.\n     * E.g. with 10 withdrawal periods, the claimable amount will be split into 10 parts, resulting in\n     * a 10% withdrawal for each period.\n     */\n    function setWithdrawPeriodNumber(uint256 newWithdrawPeriodNumber)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        withdrawPeriodNumber = newWithdrawPeriodNumber;\n        emit WithdrawPeriodNumberUpdated(newWithdrawPeriodNumber, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the minimum value in dollars to buy per sale.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newMinBuyValue Integer representing the minimum amount of stable coins to receive at\n     * each sale.\n     */\n    function setMinBuyValue(uint256 newMinBuyValue)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        minBuyValue = newMinBuyValue;\n        emit MinBuyValueUpdated(newMinBuyValue, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the maximum amount of tokens an address can buy.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newMaxTokenAmountPerAddress Integer representing the maximum amount of tokens buyable\n     * per address.\n     */\n    function setMaxTokenAmountPerAddress(uint256 newMaxTokenAmountPerAddress)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        maxTokenAmountPerAddress = newMaxTokenAmountPerAddress;\n        emit MaxTokenAmountPerAddressUpdated(\n            newMaxTokenAmountPerAddress,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Enable to update the exchange rate per token (tokens/USD).\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newExchangeRate Integer representing the exchange rate.\n     */\n    function setExchangeRate(uint256 newExchangeRate)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        exchangeRate = newExchangeRate;\n        emit ExchangeRateUpdated(newExchangeRate, msg.sender);\n    }\n\n    /**\n     * @notice Enable to update the referral reward percentage.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newReferralRewardPercentage Integer representing the reward percentage.\n     * E.g. 30 means the referral reward will be 30% of the amount of token bought by the sponsored user.\n     */\n    function setReferralRewardPercentage(uint256 newReferralRewardPercentage)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        referralRewardPercentage = newReferralRewardPercentage;\n        emit ReferralRewardPercentageUpdated(\n            newReferralRewardPercentage,\n            msg.sender\n        );\n    }\n\n    /**\n     * @notice Enable to update the amount of token available to sell.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param newAmountToSell Integer representing the amount of token to sell.\n     */\n    function setAmountToSell(uint256 newAmountToSell)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        amountToSell = newAmountToSell;\n        emit AmountToSellUpdated(newAmountToSell, msg.sender);\n    }\n\n    /**\n     * @notice Enable to authorize tokens to be used as payment during sales.\n     * @dev Only executable before the start of the sale.\n     * Only executable by the owner of the contract.\n     * @param tokens Array of addresses of the tokens to authorize. Meant to be stable coins.\n     */\n    function authorizePaymentCurrencies(address[] memory tokens)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        for (uint256 i = 0; i < tokens.length; i += 1) {\n            authorizedPaymentCurrencies[tokens[i]] = true;\n        }\n        emit PaymentCurrenciesAuthorized(tokens, msg.sender);\n    }\n\n    /// @notice Allow owner to revoke token's authorization to be used as payment during sales.\n    /// @dev Only executable before the start of the sale & by the contract owner.\n    /// @param tokens Array of addresses of the tokens to revoke authorization.\n    function revokeAuthorizationPaymentCurrencies(address[] memory tokens)\n        external\n        onlyBeforeSaleStart\n        onlyOwner\n    {\n        for (uint256 i = 0; i < tokens.length; i += 1) {\n            authorizedPaymentCurrencies[tokens[i]] = false;\n        }\n        emit PaymentCurrenciesRevoked(tokens, msg.sender);\n    }\n\n    /**\n     * @notice Enable users to buy tokens.\n     * @dev User needs to approve this contract to spend the `value` parameter on the `stableCoin`\n     * parameter.\n     * @param stableCoin Address of the token to be used as payment for the sale.\n     * @param value Amount of payment tokens to be spent.\n     * @param referral Address of the referral of the user. Use zero address if no referral.\n     */\n    function buyToken(\n        address stableCoin,\n        uint256 value,\n        address referral\n    ) external {\n        // Checks if the `stableCoin` address is authorized\n        require(\n            authorizedPaymentCurrencies[stableCoin],\n            \"DolzCrowdsale: unauthorized token\"\n        );\n        // Checks if the sale has started\n        require(\n            block.timestamp >= saleStart,\n            \"DolzCrowdsale: sale not started yet\"\n        );\n        // Checks if the sale has not ended\n        require(block.timestamp <= saleEnd, \"DolzCrowdsale: sale ended\");\n        // Checks if the minimum buy value is provided\n        require(value >= minBuyValue, \"DolzCrowdsale: under minimum buy value\");\n\n        // Computes the number of tokens the user will receive\n        uint256 claimableAmount = (value * exchangeRate) / 1e6;\n\n        // Checks if this sale will exceed the maximum token amount per address allowed\n        require(\n            userToClaimableAmount[msg.sender] + claimableAmount <=\n                maxTokenAmountPerAddress,\n            \"DolzCrowdsale: above maximum token amount per address\"\n        );\n        // Checks if this sale will exceed the number of tokens avaible to sell\n        require(\n            soldAmount + claimableAmount <= amountToSell,\n            \"DolzCrowdsale: not enough tokens available\"\n        );\n        userToClaimableAmount[msg.sender] += claimableAmount;\n        soldAmount += claimableAmount;\n\n        // If a referral is mentioned, adds the reward to its claimable balance\n        // Checks if the referral is not the buyer\n        if (referral != address(0) && referral != msg.sender) {\n            uint256 referralReward = (claimableAmount *\n                referralRewardPercentage) / 100;\n\n            userToClaimableAmount[referral] += referralReward;\n\n            //track referral amount\n            userToReferralRewardAmount[referral] += referralReward;\n\n            //total referral amount\n            rewardsAmount += referralReward;\n        }\n\n        emit TokenBought(msg.sender, stableCoin, value, referral);\n\n        IERC20(stableCoin).safeTransferFrom(msg.sender, wallet, value);\n    }\n\n    /**\n     * @notice Enable users to withdraw their tokens, depending on withdrawal start and vesting configuration.\n     */\n    function withdrawToken() external withdrawalStarted{\n        // Computes the number of withdrawal periods that have passed\n        // Reverts if before withdrawalStart, so there is no need to check for that\n        uint256 periodsElapsed = (block.timestamp - withdrawalStart) /\n            withdrawPeriodDuration +\n            1;\n\n        uint256 amountToSend;\n        // Checks if all the withdrawal periods have passed, to be able to delete claimable and withdrew\n        // balances if so and make substantial gas savings\n        if (periodsElapsed >= withdrawPeriodNumber) {\n            // All the withdrawal periods have passed, so we send all the remaining claimable balance\n            amountToSend =\n                userToClaimableAmount[msg.sender] -\n                userToWithdrewAmount[msg.sender];\n            delete userToClaimableAmount[msg.sender];\n            delete userToWithdrewAmount[msg.sender];\n        } else {\n            // Computes how many tokens the user can withdraw per period\n            uint256 withdrawableAmountPerPeriod = userToClaimableAmount[\n                msg.sender\n            ] / withdrawPeriodNumber;\n            // Computes how much the user can withdraw since the begining, minest the amount it already withdrew\n            amountToSend =\n                withdrawableAmountPerPeriod *\n                periodsElapsed -\n                userToWithdrewAmount[msg.sender];\n            userToWithdrewAmount[msg.sender] += amountToSend;\n        }\n\n        emit TokenWithdrew(msg.sender, amountToSend);\n\n        // We know our implementation returns true if success, so no need to use safeTransfer\n        require(\n            IERC20(token).transfer(msg.sender, amountToSend),\n            \"DolzCrowdsale: transfer failed\"\n        );\n    }\n\n    /**\n     * @notice Enable to burn all the unsold tokens after the end of the sale.\n     * @dev Anyone can call this function.\n     */\n    function burnRemainingTokens() external onlyOwner {\n        // Checks if the sale has ended\n        require(block.timestamp > saleEnd, \"DolzCrowdsale: sale not ended yet\");\n        // must be called before the withdrawal start\n        require(\n            block.timestamp < withdrawalStart,\n            \"Too late to burn, withdrawal already started\"\n        );\n        // avoid to be called several times\n        require(burnCalled == false, \"Burn already called!\");\n\n        uint256 balance = IERC20(token).balanceOf(address(this));\n\n        //sold out ?\n        require(balance - soldAmount - rewardsAmount > 0, \"Nothing to burn\");\n\n        emit RemainingTokensBurnt(balance - soldAmount - rewardsAmount);\n        IDolzToken(token).burn(balance - soldAmount - rewardsAmount);\n\n        burnCalled = true;\n    }\n}\n"
    },
    "contracts/IDolzToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDolzToken is IERC20 {\n    function mintFromBridge(address account, uint256 amount) external;\n\n    function burnFromBridge(address account, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    event BridgeUpdateLaunched(address indexed newBridge, uint256 endGracePeriod);\n\n    event BridgeUpdateExecuted(address indexed newBridge);\n}\n"
    }
  },
  "settings": {
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 5000
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}