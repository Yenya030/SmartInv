{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle trees (hash trees),\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        bytes32 computedHash = leaf;\n\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n\n        // Check if the computed hash (root) is equal to the provided root\n        return computedHash == root;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount exceeds allowance\");\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "/contracts/contract/RocketBase.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"../interface/RocketStorageInterface.sol\";\n\n/// @title Base settings / modifiers for each contract in Rocket Pool\n/// @author David Rugendyke\n\nabstract contract RocketBase {\n\n    // Calculate using this as the base\n    uint256 constant calcBase = 1 ether;\n\n    // Version of the contract\n    uint8 public version;\n\n    // The main storage contract where primary persistant storage is maintained\n    RocketStorageInterface rocketStorage = RocketStorageInterface(0);\n\n\n    /*** Modifiers **********************************************************/\n\n    /**\n    * @dev Throws if called by any sender that doesn't match a Rocket Pool network contract\n    */\n    modifier onlyLatestNetworkContract() {\n        require(getBool(keccak256(abi.encodePacked(\"contract.exists\", msg.sender))), \"Invalid or outdated network contract\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\n    */\n    modifier onlyLatestContract(string memory _contractName, address _contractAddress) {\n        require(_contractAddress == getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName))), \"Invalid or outdated contract\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered node\n    */\n    modifier onlyRegisteredNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"node.exists\", _nodeAddress))), \"Invalid node\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that isn't a trusted node DAO member\n    */\n    modifier onlyTrustedNode(address _nodeAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"dao.trustednodes.\", \"member\", _nodeAddress))), \"Invalid trusted node\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any sender that isn't a registered minipool\n    */\n    modifier onlyRegisteredMinipool(address _minipoolAddress) {\n        require(getBool(keccak256(abi.encodePacked(\"minipool.exists\", _minipoolAddress))), \"Invalid minipool\");\n        _;\n    }\n    \n\n    /**\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\n    */\n    modifier onlyGuardian() {\n        require(msg.sender == rocketStorage.getGuardian(), \"Account is not a temporary guardian\");\n        _;\n    }\n\n\n\n\n    /*** Methods **********************************************************/\n\n    /// @dev Set the main Rocket Storage address\n    constructor(RocketStorageInterface _rocketStorageAddress) {\n        // Update the contract address\n        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\n    }\n\n\n    /// @dev Get the address of a network contract by name\n    function getContractAddress(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Check it\n        require(contractAddress != address(0x0), \"Contract not found\");\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the address of a network contract by name (returns address(0x0) instead of reverting if contract does not exist)\n    function getContractAddressUnsafe(string memory _contractName) internal view returns (address) {\n        // Get the current contract address\n        address contractAddress = getAddress(keccak256(abi.encodePacked(\"contract.address\", _contractName)));\n        // Return\n        return contractAddress;\n    }\n\n\n    /// @dev Get the name of a network contract by address\n    function getContractName(address _contractAddress) internal view returns (string memory) {\n        // Get the contract name\n        string memory contractName = getString(keccak256(abi.encodePacked(\"contract.name\", _contractAddress)));\n        // Check it\n        require(bytes(contractName).length > 0, \"Contract not found\");\n        // Return\n        return contractName;\n    }\n\n    /// @dev Get revert error message from a .call method\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n\n\n    /*** Rocket Storage Methods ****************************************/\n\n    // Note: Unused helpers have been removed to keep contract sizes down\n\n    /// @dev Storage get methods\n    function getAddress(bytes32 _key) internal view returns (address) { return rocketStorage.getAddress(_key); }\n    function getUint(bytes32 _key) internal view returns (uint) { return rocketStorage.getUint(_key); }\n    function getString(bytes32 _key) internal view returns (string memory) { return rocketStorage.getString(_key); }\n    function getBytes(bytes32 _key) internal view returns (bytes memory) { return rocketStorage.getBytes(_key); }\n    function getBool(bytes32 _key) internal view returns (bool) { return rocketStorage.getBool(_key); }\n    function getInt(bytes32 _key) internal view returns (int) { return rocketStorage.getInt(_key); }\n    function getBytes32(bytes32 _key) internal view returns (bytes32) { return rocketStorage.getBytes32(_key); }\n\n    /// @dev Storage set methods\n    function setAddress(bytes32 _key, address _value) internal { rocketStorage.setAddress(_key, _value); }\n    function setUint(bytes32 _key, uint _value) internal { rocketStorage.setUint(_key, _value); }\n    function setString(bytes32 _key, string memory _value) internal { rocketStorage.setString(_key, _value); }\n    function setBytes(bytes32 _key, bytes memory _value) internal { rocketStorage.setBytes(_key, _value); }\n    function setBool(bytes32 _key, bool _value) internal { rocketStorage.setBool(_key, _value); }\n    function setInt(bytes32 _key, int _value) internal { rocketStorage.setInt(_key, _value); }\n    function setBytes32(bytes32 _key, bytes32 _value) internal { rocketStorage.setBytes32(_key, _value); }\n\n    /// @dev Storage delete methods\n    function deleteAddress(bytes32 _key) internal { rocketStorage.deleteAddress(_key); }\n    function deleteUint(bytes32 _key) internal { rocketStorage.deleteUint(_key); }\n    function deleteString(bytes32 _key) internal { rocketStorage.deleteString(_key); }\n    function deleteBytes(bytes32 _key) internal { rocketStorage.deleteBytes(_key); }\n    function deleteBool(bytes32 _key) internal { rocketStorage.deleteBool(_key); }\n    function deleteInt(bytes32 _key) internal { rocketStorage.deleteInt(_key); }\n    function deleteBytes32(bytes32 _key) internal { rocketStorage.deleteBytes32(_key); }\n\n    /// @dev Storage arithmetic methods\n    function addUint(bytes32 _key, uint256 _amount) internal { rocketStorage.addUint(_key, _amount); }\n    function subUint(bytes32 _key, uint256 _amount) internal { rocketStorage.subUint(_key, _amount); }\n}\n"
    },
    "/contracts/contract/rewards/RocketMerkleDistributorMainnet.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\n\r\nimport \"../RocketBase.sol\";\r\nimport \"../../interface/token/RocketTokenRPLInterface.sol\";\r\nimport \"../../interface/RocketVaultInterface.sol\";\r\nimport \"../../interface/node/RocketNodeStakingInterface.sol\";\r\nimport \"../../interface/rewards/RocketRewardsRelayInterface.sol\";\r\nimport \"../../interface/rewards/RocketSmoothingPoolInterface.sol\";\r\nimport \"../../interface/RocketVaultWithdrawerInterface.sol\";\r\n\r\nimport \"@openzeppelin/contracts/cryptography/MerkleProof.sol\";\r\n\r\n/*\r\n* On mainnet, the relay and the distributor are the same contract as there is no need for an intermediate contract to\r\n* handle cross-chain messaging.\r\n*/\r\n\r\ncontract RocketMerkleDistributorMainnet is RocketBase, RocketRewardsRelayInterface, RocketVaultWithdrawerInterface {\r\n\r\n    // Libs\r\n    using SafeMath for uint;\r\n\r\n    // Events\r\n    event RewardsClaimed(address indexed claimer, uint256[] rewardIndex, uint256[] amountRPL, uint256[] amountETH);\r\n\r\n    // Constants\r\n    uint256 constant network = 0;\r\n\r\n    // Immutables\r\n    bytes32 immutable rocketVaultKey;\r\n    bytes32 immutable rocketTokenRPLKey;\r\n\r\n    // Allow receiving ETH\r\n    receive() payable external {}\r\n\r\n    // Construct\r\n    constructor(RocketStorageInterface _rocketStorageAddress) RocketBase(_rocketStorageAddress) {\r\n        // Version\r\n        version = 1;\r\n        // Precompute keys\r\n        rocketVaultKey = keccak256(abi.encodePacked(\"contract.address\", \"rocketVault\"));\r\n        rocketTokenRPLKey = keccak256(abi.encodePacked(\"contract.address\", \"rocketTokenRPL\"));\r\n    }\r\n\r\n    // Called by RocketRewardsPool to include a snapshot into this distributor\r\n    function relayRewards(uint256 _rewardIndex, bytes32 _root, uint256 _rewardsRPL, uint256 _rewardsETH) external override onlyLatestContract(\"rocketMerkleDistributorMainnet\", address(this)) onlyLatestContract(\"rocketRewardsPool\", msg.sender) {\r\n        bytes32 key = keccak256(abi.encodePacked('rewards.merkle.root', _rewardIndex));\r\n        require(getBytes32(key) == bytes32(0));\r\n        setBytes32(key, _root);\r\n        // Send the ETH and RPL to the vault\r\n        RocketVaultInterface rocketVault = RocketVaultInterface(getAddress(rocketVaultKey));\r\n        if (_rewardsETH > 0) {\r\n            rocketVault.depositEther{value: _rewardsETH}();\r\n        }\r\n        if (_rewardsRPL > 0) {\r\n            IERC20 rocketTokenRPL = IERC20(getAddress(rocketTokenRPLKey));\r\n            rocketTokenRPL.approve(address(rocketVault), _rewardsRPL);\r\n            rocketVault.depositToken(\"rocketMerkleDistributorMainnet\", rocketTokenRPL, _rewardsRPL);\r\n        }\r\n    }\r\n\r\n    // Reward recipients can call this method with a merkle proof to claim rewards for one or more reward intervals\r\n    function claim(address _nodeAddress, uint256[] calldata _rewardIndex, uint256[] calldata _amountRPL, uint256[] calldata _amountETH, bytes32[][] calldata _merkleProof) external override {\r\n        claimAndStake(_nodeAddress, _rewardIndex, _amountRPL, _amountETH, _merkleProof, 0);\r\n    }\r\n\r\n    // Node operators can call this method to claim rewards for one or more reward intervals and specify an amount of RPL to stake at the same time\r\n    function claimAndStake(address _nodeAddress, uint256[] calldata _rewardIndex, uint256[] calldata _amountRPL, uint256[] calldata _amountETH, bytes32[][] calldata _merkleProof, uint256 _stakeAmount) public override {\r\n        // Get contracts\r\n        RocketVaultInterface rocketVault = RocketVaultInterface(getAddress(rocketVaultKey));\r\n        address rocketTokenRPLAddress = getAddress(rocketTokenRPLKey);\r\n        // Verify claims\r\n        _claim(_rewardIndex, _nodeAddress, _amountRPL, _amountETH, _merkleProof);\r\n        {\r\n            // Get withdrawal address\r\n            address withdrawalAddress = rocketStorage.getNodeWithdrawalAddress(_nodeAddress);\r\n            require(msg.sender == _nodeAddress || msg.sender == withdrawalAddress, \"Can only claim from node or withdrawal address\");\r\n            // Calculate totals\r\n            uint256 totalAmountRPL = 0;\r\n            uint256 totalAmountETH = 0;\r\n            for (uint256 i = 0; i < _rewardIndex.length; i++) {\r\n                totalAmountRPL = totalAmountRPL.add(_amountRPL[i]);\r\n                totalAmountETH = totalAmountETH.add(_amountETH[i]);\r\n            }\r\n            // Validate input\r\n            require(_stakeAmount <= totalAmountRPL, \"Invalid stake amount\");\r\n            // Distribute any remaining tokens to the node's withdrawal address\r\n            uint256 remaining = totalAmountRPL.sub(_stakeAmount);\r\n            if (remaining > 0) {\r\n                rocketVault.withdrawToken(withdrawalAddress, IERC20(rocketTokenRPLAddress), remaining);\r\n            }\r\n            // Distribute ETH\r\n            if (totalAmountETH > 0) {\r\n                rocketVault.withdrawEther(totalAmountETH);\r\n                (bool result,) = withdrawalAddress.call{value: totalAmountETH}(\"\");\r\n                require(result, \"Failed to claim ETH\");\r\n            }\r\n        }\r\n        // Restake requested amount\r\n        if (_stakeAmount > 0) {\r\n            RocketTokenRPLInterface rocketTokenRPL = RocketTokenRPLInterface(rocketTokenRPLAddress);\r\n            RocketNodeStakingInterface rocketNodeStaking = RocketNodeStakingInterface(getContractAddress(\"rocketNodeStaking\"));\r\n            rocketVault.withdrawToken(address(this), IERC20(rocketTokenRPLAddress), _stakeAmount);\r\n            rocketTokenRPL.approve(address(rocketNodeStaking), _stakeAmount);\r\n            rocketNodeStaking.stakeRPLFor(_nodeAddress, _stakeAmount);\r\n        }\r\n        // Emit event\r\n        emit RewardsClaimed(_nodeAddress, _rewardIndex, _amountRPL, _amountETH);\r\n    }\r\n\r\n    // Verifies the given data exists as a leaf nodes for the specified reward interval and marks them as claimed if they are valid\r\n    // Note: this function is optimised for gas when _rewardIndex is ordered numerically\r\n    function _claim(uint256[] calldata _rewardIndex, address _nodeAddress, uint256[] calldata _amountRPL, uint256[] calldata _amountETH, bytes32[][] calldata _merkleProof) internal {\r\n        // Set initial parameters to the first reward index in the array\r\n        uint256 indexWordIndex = _rewardIndex[0] / 256;\r\n        bytes32 claimedWordKey = keccak256(abi.encodePacked('rewards.interval.claimed', _nodeAddress, indexWordIndex));\r\n        uint256 claimedWord = getUint(claimedWordKey);\r\n        // Loop over every entry\r\n        for (uint256 i = 0; i < _rewardIndex.length; i++) {\r\n            // Prevent accidental claim of 0\r\n            require(_amountRPL[i] > 0 || _amountETH[i] > 0, \"Invalid amount\");\r\n            // Check if this entry has a different word index than the previous\r\n            if (indexWordIndex != _rewardIndex[i] / 256) {\r\n                // Store the previous word\r\n                setUint(claimedWordKey, claimedWord);\r\n                // Load the word for this entry\r\n                indexWordIndex = _rewardIndex[i] / 256;\r\n                claimedWordKey = keccak256(abi.encodePacked('rewards.interval.claimed', _nodeAddress, indexWordIndex));\r\n                claimedWord = getUint(claimedWordKey);\r\n            }\r\n            // Calculate the bit index for this entry\r\n            uint256 indexBitIndex = _rewardIndex[i] % 256;\r\n            // Ensure the bit is not yet set on this word\r\n            uint256 mask = (1 << indexBitIndex);\r\n            require(claimedWord & mask != mask, \"Already claimed\");\r\n            // Verify the merkle proof\r\n            require(_verifyProof(_rewardIndex[i], _nodeAddress, _amountRPL[i], _amountETH[i], _merkleProof[i]), \"Invalid proof\");\r\n            // Set the bit for the current reward index\r\n            claimedWord = claimedWord | (1 << indexBitIndex);\r\n        }\r\n        // Store the word\r\n        setUint(claimedWordKey, claimedWord);\r\n    }\r\n\r\n    // Verifies that the\r\n    function _verifyProof(uint256 _rewardIndex, address _nodeAddress, uint256 _amountRPL, uint256 _amountETH, bytes32[] calldata _merkleProof) internal view returns (bool) {\r\n        bytes32 node = keccak256(abi.encodePacked(_nodeAddress, network, _amountRPL, _amountETH));\r\n        bytes32 key = keccak256(abi.encodePacked('rewards.merkle.root', _rewardIndex));\r\n        bytes32 merkleRoot = getBytes32(key);\r\n        return MerkleProof.verify(_merkleProof, merkleRoot, node);\r\n    }\r\n\r\n    // Returns true if the given claimer has claimed for the given reward interval\r\n    function isClaimed(uint256 _rewardIndex, address _claimer) public override view returns (bool) {\r\n        uint256 indexWordIndex = _rewardIndex / 256;\r\n        uint256 indexBitIndex = _rewardIndex % 256;\r\n        uint256 claimedWord = getUint(keccak256(abi.encodePacked('rewards.interval.claimed', _claimer, indexWordIndex)));\r\n        uint256 mask = (1 << indexBitIndex);\r\n        return claimedWord & mask == mask;\r\n    }\r\n\r\n    // Allow receiving ETH from RocketVault, no action required\r\n    function receiveVaultWithdrawalETH() external override payable {}\r\n}\r\n"
    },
    "/contracts/interface/RocketStorageInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketStorageInterface {\n\n    // Deploy status\n    function getDeployedStatus() external view returns (bool);\n\n    // Guardian\n    function getGuardian() external view returns(address);\n    function setGuardian(address _newAddress) external;\n    function confirmGuardian() external;\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getString(bytes32 _key) external view returns (string memory);\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n    function getBool(bytes32 _key) external view returns (bool);\n    function getInt(bytes32 _key) external view returns (int);\n    function getBytes32(bytes32 _key) external view returns (bytes32);\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setString(bytes32 _key, string calldata _value) external;\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n    function setBool(bytes32 _key, bool _value) external;\n    function setInt(bytes32 _key, int _value) external;\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteString(bytes32 _key) external;\n    function deleteBytes(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;\n    function deleteInt(bytes32 _key) external;\n    function deleteBytes32(bytes32 _key) external;\n\n    // Arithmetic\n    function addUint(bytes32 _key, uint256 _amount) external;\n    function subUint(bytes32 _key, uint256 _amount) external;\n\n    // Protected storage\n    function getNodeWithdrawalAddress(address _nodeAddress) external view returns (address);\n    function getNodePendingWithdrawalAddress(address _nodeAddress) external view returns (address);\n    function setWithdrawalAddress(address _nodeAddress, address _newWithdrawalAddress, bool _confirm) external;\n    function confirmWithdrawalAddress(address _nodeAddress) external;\n}\n"
    },
    "/contracts/interface/RocketVaultInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\ninterface RocketVaultInterface {\n    function balanceOf(string memory _networkContractName) external view returns (uint256);\n    function depositEther() external payable;\n    function withdrawEther(uint256 _amount) external;\n    function depositToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;\n    function withdrawToken(address _withdrawalAddress, IERC20 _tokenAddress, uint256 _amount) external;\n    function balanceOfToken(string memory _networkContractName, IERC20 _tokenAddress) external view returns (uint256);\n    function transferToken(string memory _networkContractName, IERC20 _tokenAddress, uint256 _amount) external;\n    function burnToken(ERC20Burnable _tokenAddress, uint256 _amount) external;\n}\n"
    },
    "/contracts/interface/RocketVaultWithdrawerInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketVaultWithdrawerInterface {\n    function receiveVaultWithdrawalETH() external payable; \n}\n"
    },
    "/contracts/interface/node/RocketNodeStakingInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketNodeStakingInterface {\n    function getTotalRPLStake() external view returns (uint256);\n    function getNodeRPLStake(address _nodeAddress) external view returns (uint256);\n    function getNodeRPLStakedTime(address _nodeAddress) external view returns (uint256);\n    function getTotalEffectiveRPLStake() external view returns (uint256);\n    function calculateTotalEffectiveRPLStake(uint256 offset, uint256 limit, uint256 rplPrice) external view returns (uint256);\n    function getNodeEffectiveRPLStake(address _nodeAddress) external view returns (uint256);\n    function getNodeMinimumRPLStake(address _nodeAddress) external view returns (uint256);\n    function getNodeMaximumRPLStake(address _nodeAddress) external view returns (uint256);\n    function getNodeMinipoolLimit(address _nodeAddress) external view returns (uint256);\n    function stakeRPL(uint256 _amount) external;\n    function stakeRPLFor(address _nodeAddress, uint256 _amount) external;\n    function withdrawRPL(uint256 _amount) external;\n    function slashRPL(address _nodeAddress, uint256 _ethSlashAmount) external;\n}\n"
    },
    "/contracts/interface/rewards/RocketRewardsRelayInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketRewardsRelayInterface {\n    function relayRewards(uint256 _intervalIndex, bytes32 _merkleRoot, uint256 _rewardsRPL, uint256 _rewardsETH) external;\n    function claim(address _nodeAddress, uint256[] calldata _intervalIndex, uint256[] calldata _amountRPL, uint256[] calldata _amountETH, bytes32[][] calldata _merkleProof) external;\n    function claimAndStake(address _nodeAddress, uint256[] calldata _intervalIndex, uint256[] calldata _amountRPL, uint256[] calldata _amountETH, bytes32[][] calldata _merkleProof, uint256 _stakeAmount) external;\n    function isClaimed(uint256 _intervalIndex, address _claimer) external view returns (bool);\n}\n"
    },
    "/contracts/interface/rewards/RocketSmoothingPoolInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\npragma abicoder v2;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketSmoothingPoolInterface {\n    function withdrawEther(address _to, uint256 _amount) external;\n}\n"
    },
    "/contracts/interface/token/RocketTokenRPLInterface.sol": {
      "content": "/**\r\n  *       .\r\n  *      / \\\r\n  *     |.'.|\r\n  *     |'.'|\r\n  *   ,'|   |`.\r\n  *  |,-'-|-'-.|\r\n  *   __|_| |         _        _      _____           _\r\n  *  | ___ \\|        | |      | |    | ___ \\         | |\r\n  *  | |_/ /|__   ___| | _____| |_   | |_/ /__   ___ | |\r\n  *  |    // _ \\ / __| |/ / _ \\ __|  |  __/ _ \\ / _ \\| |\r\n  *  | |\\ \\ (_) | (__|   <  __/ |_   | | | (_) | (_) | |\r\n  *  \\_| \\_\\___/ \\___|_|\\_\\___|\\__|  \\_|  \\___/ \\___/|_|\r\n  * +---------------------------------------------------+\r\n  * |  DECENTRALISED STAKING PROTOCOL FOR ETHEREUM 2.0  |\r\n  * +---------------------------------------------------+\r\n  *\r\n  *  Rocket Pool is a first-of-its-kind ETH2 Proof of Stake protocol, designed to be community owned,\r\n  *  decentralised, trustless and compatible with staking in Ethereum 2.0.\r\n  *\r\n  *  For more information about Rocket Pool, visit https://rocketpool.net\r\n  *\r\n  *  Authors: David Rugendyke, Jake Pospischil, Kane Wallmann, Darren Langley, Joe Clapis, Nick Doherty\r\n  *\r\n  */\r\n\r\npragma solidity 0.7.6;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface RocketTokenRPLInterface is IERC20 {\n    function getInflationCalcTime() external view returns(uint256);\n    function getInflationIntervalTime() external view returns(uint256);\n    function getInflationIntervalRate() external view returns(uint256);\n    function getInflationIntervalsPassed() external view returns(uint256);\n    function getInflationIntervalStartTime() external view returns(uint256);\n    function getInflationRewardsContractAddress() external view returns(address);\n    function inflationCalculate() external view returns (uint256);\n    function inflationMintTokens() external returns (uint256);\n    function swapTokens(uint256 _amount) external;\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 15000
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}