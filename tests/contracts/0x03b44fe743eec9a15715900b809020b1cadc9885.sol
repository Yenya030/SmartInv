{{
  "language": "Solidity",
  "sources": {
    "/contracts/SxTCommunity.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./interfaces/ISxTCommunity.sol\";\r\n\r\ncontract SxTCommunity is ISxTCommunity, SxTCommunityStorage, ERC1155, Ownable, ReentrancyGuard, Pausable {\r\n    using Counters for Counters.Counter;\r\n\r\n    // Counter for maintaining TokenIDs\r\n    Counters.Counter public currentTokenIndex;\r\n    \r\n    /// @dev This is the constructor function to initialize the contract.\r\n    /// @param tokenName Name of the ERC1155 token\r\n    /// @param tokenSymbol Symbol of the ERC1155 token\r\n\r\n    constructor(string memory tokenName, string memory tokenSymbol) ERC1155(\"\") {\r\n        require(!compareStrings(tokenName, \"\"), \"SxTCommunity: Token name cannot be an empty string\");\r\n        require(!compareStrings(tokenSymbol, \"\"), \"SxTCommunity: Token symbol cannot be an empty string\");\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n    /// @dev This is the function to get the URI for an NFT token \r\n    /// @param id ID of NFT token for which URI needs to be fetched \r\n    /// @return tokenUri URI of the NFT with required id\r\n\r\n    function uri(uint id) public view override returns (string memory) {\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");\r\n        return tokenDetails[id].tokenUri;\r\n    }\r\n\r\n    /// @dev This is the function to get the list of available or sold-out NFTs in a paginated JSON string response  \r\n    /// @param pageNumber Page number of the response required\r\n    /// @param pageSize Size of each page of response required\r\n    /// @param isAvailable Category of NFTs to get, true for available to mint NFTs, and false for sold out NFTs \r\n    /// @return nftsResponseJSON Stringified JSON response having the list of NFT details according to page number, page size, isAvailable( Available for mint or sold-out) \r\n    /// @return allAcceptableNFTsCount Count of all available or sold-out ( depending on isAvailable param passed) NFTs that the contract has\r\n\r\n    function retrieveNFTs(uint256 pageNumber, uint256 pageSize, bool isAvailable) external override view returns(string memory, uint256) {\r\n        string memory nftsResponseJSON = \"[]\";\r\n        uint256 allAcceptableNFTsCount = 0;\r\n        Token [] memory resultTokens = new Token[](pageSize);\r\n        Token [] memory allAcceptableTokens = new Token[](currentTokenIndex.current());\r\n        for ( uint256 i = currentTokenIndex.current(); i > 0; i--){\r\n            if(isAvailable != checkMaxSupplyReached(i)){\r\n                Token storage tokenTemp = tokenDetails[i];\r\n                allAcceptableTokens[allAcceptableNFTsCount] = tokenTemp;\r\n                allAcceptableNFTsCount++;\r\n            }\r\n        }\r\n        if(pageNumber == 0 || pageSize == 0 ){\r\n            return (nftsResponseJSON, allAcceptableNFTsCount);\r\n        }\r\n        uint256 startIndex = ((pageNumber - 1) * pageSize);\r\n        uint256 endIndex = startIndex + pageSize;\r\n        if(startIndex >= currentTokenIndex.current()){\r\n            return (nftsResponseJSON, allAcceptableNFTsCount);\r\n        }\r\n        if(endIndex > currentTokenIndex.current()){\r\n            endIndex = currentTokenIndex.current();\r\n        }\r\n        for ( uint256 j = startIndex; j < endIndex; j++){\r\n            resultTokens[j - startIndex] = allAcceptableTokens[j];\r\n        }\r\n        nftsResponseJSON = getJSONResponse(resultTokens);\r\n        return (nftsResponseJSON, allAcceptableNFTsCount);\r\n    }\r\n    \r\n    /// @dev This is the function to set the price in ethers for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token price needs to be updated\r\n    /// @param newTokenEthPrice New price in ethers for the NFT token\r\n\r\n    function setTokenEthPrice(uint256 id, uint256 newTokenEthPrice) external override onlyOwner  {\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");\r\n        require(tokenDetails[id].ethPrice != newTokenEthPrice, \"SxTCommunity: New price same as old price\");\r\n        require(newTokenEthPrice > 0, \"SxTCommunity: New price cannot be zero\");\r\n        Token storage token = tokenDetails[id];\r\n        token.hasPrice = true;\r\n        token.ethPrice= newTokenEthPrice;\r\n        emit TokenEthPriceSet(id, token.ethPrice);\r\n    }\r\n\r\n    /// @dev This is the function to set the price in ERC20 tokens for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token price needs to be updated\r\n    /// @param newTokenERC20Price New price in ERC20 tokens for the NFT token\r\n\r\n    function setTokenERC20Price(uint256 id, uint256 newTokenERC20Price) external override onlyOwner  {\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");\r\n        require(tokenDetails[id].erc20Price != newTokenERC20Price, \"SxTCommunity: New price same as old price\");\r\n        require(newTokenERC20Price > 0, \"SxTCommunity: New price cannot be zero\");\r\n        Token storage token = tokenDetails[id];\r\n        token.hasPrice = true;\r\n        token.erc20Price= newTokenERC20Price;\r\n        emit TokenERC20PriceSet(id, token.erc20Price);\r\n    }\r\n\r\n    /// @dev This is the function to reset the prices for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token prices need to be updated\r\n\r\n    function resetTokenPrices(uint256 id) external override onlyOwner  {\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");\r\n        require(tokenDetails[id].hasPrice, \"SxTCommunity: This token is already available for free\");\r\n        Token storage token = tokenDetails[id];\r\n        token.hasPrice = false;\r\n        token.erc20Price = 0;\r\n        token.ethPrice = 0;\r\n        emit TokenPriceReset(id);\r\n    }\r\n    \r\n    /// @dev This is the function to set the ERC20 token for accepting price of NFTs \r\n    /// @dev Only the owner can call this function\r\n    /// @param newSxtToken Address of the particular ERC20 token, for accepting price of NFTs in ERC20 tokens\r\n\r\n    function setERC20Token(IERC20 newSxtToken) external override onlyOwner  {\r\n        require(address(newSxtToken) != ZERO_ADDRESS, \"SxTCommunity: Address Cannot be Zero Address\");\r\n        require(keccak256(abi.encodePacked(newSxtToken)) != keccak256(abi.encodePacked(sxtToken)), \"SxTCommunity: Current token is already what you have selected\");\r\n        sxtToken = newSxtToken;\r\n        emit Erc20TokenSet(newSxtToken);\r\n    }\r\n\r\n    /// @dev This is the function to mint a new NFT token which is available free of cost\r\n    /// @dev Only called when contract is unpaused\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFT(uint256 id, address to) external override whenNotPaused nonReentrant{   \r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");    \r\n        require(!tokenDetails[id].hasPrice, \"SxTCommunity: This token is not free\");\r\n        require(!checkMaxSupplyReached(id), \"SxTCommunity: Total supply exceeded maximum supply\");\r\n        require(!isPreviouslyMintedFrom[id][to], \"SxTCommunity: Already minted this NFT once to this account\");\r\n        isPreviouslyMintedFrom[id][to] = true;\r\n        Token storage currentToken = tokenDetails[id];\r\n        currentToken.currentTokenSupply += 1;\r\n        _mint(to, id, AMOUNT_BUYABLE, \"\");\r\n        emit NftMinted(id, to);\r\n    }\r\n\r\n    /// @dev This is the function to mint a new NFT token by depositing Ethers\r\n    /// @dev Only called when contract is unpaused\r\n    /// @dev If Token is buyable with Ether and ethPrice > 0, function will accept ethers\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFTUsingEth(uint256 id, address to) external override payable whenNotPaused nonReentrant{\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");  \r\n        require(tokenDetails[id].hasPrice && tokenDetails[id].ethPrice > 0, \"SxTCommunity: Token Eth Price not yet set\");     \r\n        require(!checkMaxSupplyReached(id), \"SxTCommunity: Total supply exceeded maximum supply\");\r\n        require(!isPreviouslyMintedFrom[id][to], \"SxTCommunity: Already minted this NFT once to this account\");\r\n        require(msg.value >= tokenDetails[id].ethPrice, \"SxTCommunity: Insufficient Ethers sent\");\r\n        isPreviouslyMintedFrom[id][to] = true;\r\n        Token storage currentToken = tokenDetails[id];\r\n        currentToken.currentTokenSupply += 1;\r\n        _mint(to, id, AMOUNT_BUYABLE, \"\");\r\n        emit NftMintedUsingEth(id, to, tokenDetails[id].ethPrice );\r\n    }\r\n\r\n    /// @dev This is the function to mint a new NFT token by depositing ERC20 Token\r\n    /// @dev Only called when contract is unpaused\r\n    /// @dev If Token is buyable with ERC20 token and erc20Price > 0, function will transfer ERC20 tokens to contract\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFTUsingERC20(uint256 id, address to) external override whenNotPaused nonReentrant{\r\n        require(address(sxtToken) != ZERO_ADDRESS, \"SxTCommunity: ERC20 Token not yet set by owner\");\r\n        require(!compareStrings(tokenDetails[id].tokenUri, \"\"), \"SxTCommunity: URI nonexistent token\");\r\n        require(tokenDetails[id].hasPrice && tokenDetails[id].erc20Price > 0, \"SxTCommunity: Token ERC20 Price not yet set\");     \r\n        require(!checkMaxSupplyReached(id), \"SxTCommunity: Total supply exceeded maximum supply\");\r\n        require(!isPreviouslyMintedFrom[id][to], \"SxTCommunity: Already minted this NFT once to this account\");\r\n        require(sxtToken.balanceOf(msg.sender) >= tokenDetails[id].erc20Price, \"SxTCommunity: Insufficient ERC20 token balance\");\r\n        isPreviouslyMintedFrom[id][to] = true;\r\n        bool sent = sxtToken.transferFrom(msg.sender, address(this), tokenDetails[id].erc20Price);\r\n        require(sent, \"SxTCommunity: Failed to send ERC20Token\");\r\n        Token storage currentToken = tokenDetails[id];\r\n        currentToken.currentTokenSupply += 1;\r\n        _mint(to, id, AMOUNT_BUYABLE, \"\");\r\n        emit NftMintedUsingERC20(id, to, tokenDetails[id].erc20Price);\r\n    }\r\n\r\n    /// @dev This is the function to add new NFT tokens in the contract\r\n    /// @dev Only the owner can call this function\r\n    /// @param newTokenURIs Array of URIs for NFTs to be added\r\n    /// @param hasPrices Array of boolean flags representing whether the NFT token has any price or not\r\n    /// @param newEthPrices Array of prices in Ethers for NFTs to be added\r\n    /// @param newERC20Prices Array of prices in ERC20 Tokens for NFTs to be added\r\n    /// @param maxNewTokenSupplies Array of maximum possible supplies for NFTs to be added\r\n\r\n    function addNewNFTs(string [] memory newTokenURIs, bool [] memory hasPrices, uint256 [] memory newEthPrices, uint256 [] memory newERC20Prices, uint256 [] memory maxNewTokenSupplies) external override onlyOwner {\r\n        require(newTokenURIs.length == maxNewTokenSupplies.length && maxNewTokenSupplies.length == hasPrices.length && hasPrices.length == newEthPrices.length && newEthPrices.length == newERC20Prices.length, \"SxTCommunity: Array lengths should be same\");\r\n        for(uint256 index = 0; index < maxNewTokenSupplies.length; index++){\r\n            Token memory newToken;\r\n            require(maxNewTokenSupplies[index] > 0, \"SxTCommunity: Maximum supply cannot be 0\");\r\n            require(!compareStrings(newTokenURIs[index], \"\"), \"SxTCommunity: URI cannot be empty string\");\r\n            currentTokenIndex.increment();\r\n            uint256 newTokenIndex = currentTokenIndex.current();\r\n            newToken.id = newTokenIndex;\r\n            newToken.tokenUri = newTokenURIs[index];\r\n            newToken.maxTokenSupply = maxNewTokenSupplies[index];\r\n            newToken.hasPrice = hasPrices[index];\r\n            if(hasPrices[index]) {\r\n                require(newEthPrices[index] > 0 || newERC20Prices[index] > 0, \"SxTCommunity: Both prices cannot be 0 since NFT hasPrice is true\");\r\n                newToken.ethPrice = newEthPrices[index];\r\n                newToken.erc20Price = newERC20Prices[index];\r\n            }\r\n            tokenDetails[newTokenIndex] = newToken;\r\n            emit NewNFTAdded(newTokenIndex);\r\n        }\r\n    }\r\n\r\n    /// @dev This is the internal function to check if maximum supply reached for an NFT\r\n    /// @dev This is called inside mintNFT, mintNFTUsingEth, mintNFTUsingERC20 functions\r\n    /// @param id ID of NFT token to be checked\r\n\r\n    function checkMaxSupplyReached(uint256 id) view internal returns(bool){\r\n        if(tokenDetails[id].currentTokenSupply < tokenDetails[id].maxTokenSupply)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    /// @dev This is the internal function to compare 2 strings\r\n    /// @param s1 First string for comparing value\r\n    /// @param s2 Second string for comparing value\r\n\r\n    function compareStrings(string memory s1, string memory s2) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2)));\r\n    }\r\n\r\n    /// @dev This is the function to withdraw ethers from contract\r\n    /// @dev Only the owner can call this function\r\n\r\n    function withdrawEth() external override onlyOwner nonReentrant {\r\n        uint256 amount = address(this).balance;\r\n        address payable to = payable(msg.sender);\r\n        require(amount > 0, \"SxTCommunity: Zero ether balance\");\r\n        to.transfer(amount);\r\n        emit EtherWithdrawn( amount, to);        \r\n    }\r\n\r\n    /// @dev This is the function to withdraw ERC20 Tokens from contract\r\n    /// @dev Only the owner can call this function    \r\n\r\n    function withdrawERC20() external override onlyOwner nonReentrant {\r\n        uint256 amount = sxtToken.balanceOf(address(this));\r\n        address to = msg.sender;\r\n        require(amount > 0, \"SxTCommunity: Zero ERC20 token balance\");\r\n        bool sent = sxtToken.transfer(to, amount);\r\n        require(sent, \"Failed to send ERC20Token\");\r\n        emit Erc20TokenWithdrawn(amount, to);\r\n    }\r\n\r\n    /// @dev This is the function to pause the contract\r\n\r\n    function pause() external override onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev This is the function to unpause the contract\r\n\r\n    function unpause() external override onlyOwner {\r\n        _unpause();\r\n    }\r\n}"
    },
    "/contracts/interfaces/ISxTCommunity.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../SxTCommunityStorage.sol\";\r\n\r\ninterface ISxTCommunity {\r\n\r\n    /// @dev This is the event to notify that price in ethers of an NFT is set\r\n    /// @param id ID of NFT token for which token price is updated\r\n    /// @param newTokenEthPrice New price in ethers set for the NFT token\r\n    \r\n    event TokenEthPriceSet(uint256 id, uint256 newTokenEthPrice);\r\n\r\n    /// @dev This is the event to notify that price in ERC20 tokens of an NFT is set\r\n    /// @param id ID of NFT token for which token price is updated\r\n    /// @param newTokenERC20Price New price in ERC20 tokens set for the NFT token\r\n    \r\n    event TokenERC20PriceSet(uint256 id, uint256 newTokenERC20Price);\r\n\r\n    /// @dev This is the event to notify that prices of an NFT are reset to zero\r\n    /// @param id ID of NFT token for which token pricse are updated\r\n    event TokenPriceReset(uint256 id);\r\n\r\n    /// @dev This is the event to notify that an ERC20 token for buying NFTs is set.\r\n    /// @param sXtToken Address of the ERC20 token set\r\n\r\n    event Erc20TokenSet(IERC20 sXtToken);\r\n\r\n    /// @dev This is the event to notify that an NFT token is bought free of cost.\r\n    /// @param id ID of NFT token bought\r\n    /// @param to Address of the NFT buyer  \r\n\r\n    event NftMinted(uint256 id, address to);\r\n\r\n    /// @dev This is the event to notify that an NFT token is bought using ethers.\r\n    /// @param id ID of NFT token bought\r\n    /// @param to Address of the NFT buyer  \r\n    /// @param tokenPrice Price for the NFT token bought\r\n\r\n    event NftMintedUsingEth(uint256 id, address to, uint256 tokenPrice);\r\n\r\n    /// @dev This is the event to notify that an NFT token is bought using ERC20 tokens.\r\n    /// @param id ID of NFT token bought\r\n    /// @param to Address of the NFT buyer  \r\n    /// @param tokenPrice Price for the NFT token bought\r\n\r\n    event NftMintedUsingERC20(uint256 id, address to, uint256 tokenPrice);\r\n\r\n    /// @dev This is the event to notify that a new NFT token has been added in contract\r\n    /// @param id ID of NFT token added\r\n\r\n    event NewNFTAdded(uint256 id);\r\n\r\n    /// @dev This is the event to notify that all ethers are withdrawn from contract by owner.\r\n    /// @param amount Amount of ethers withdrawn\r\n    /// @param to Address of the owner to which ethers are sent\r\n\r\n    event EtherWithdrawn(uint256 amount, address payable to);\r\n\r\n    /// @dev This is the event to notify that all ERC20 tokens are withdrawn from contract by owner.\r\n    /// @param amount Amount of tokens withdrawn\r\n    /// @param to Address of the owner to which ERC20 tokens are transferred\r\n\r\n    event Erc20TokenWithdrawn(uint256 amount, address to);\r\n\r\n    /// @dev This is the function to get the list of available or sold-out NFTs in a paginated JSON string response  \r\n    /// @param pageNumber Page number of the response required\r\n    /// @param pageSize Size of each page of response required\r\n    /// @param isAvailable Category of NFTs to get, true for available to mint NFTs, and false for sold out NFTs \r\n    /// @return nftsResponseJSON Stringified JSON response having the list of NFT details according to page number, page size, isAvailable( Available for mint or sold-out) \r\n    /// @return allAcceptableNFTsCount Count of all available or sold-out ( depending on isAvailable param passed) NFTs that the contract has\r\n\r\n    function retrieveNFTs(uint256 pageNumber, uint256 pageSize, bool isAvailable) external view returns(string memory nftsResponseJSON, uint256 allAcceptableNFTsCount);\r\n\r\n    /// @dev This is the function to set the price in ethers for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token price needs to be updated\r\n    /// @param newTokenEthPrice New price in ethers for the NFT token\r\n    \r\n    function setTokenEthPrice(uint256 id, uint256 newTokenEthPrice) external;\r\n\r\n    /// @dev This is the function to set the price in ERC20 tokens for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token price needs to be updated\r\n    /// @param newTokenERC20Price New price in ERC20 tokens for the NFT token\r\n    \r\n    function setTokenERC20Price(uint256 id, uint256 newTokenERC20Price) external;\r\n\r\n    /// @dev This is the function to reset the prices for an NFT token \r\n    /// @dev Only the owner can call this function\r\n    /// @param id ID of NFT token for which token prices need to be updated\r\n\r\n    function resetTokenPrices(uint256 id) external;\r\n\r\n    /// @dev This is the function to set the ERC20 token for accepting price of NFTs \r\n    /// @dev Only the owner can call this function\r\n    /// @param newSxtToken Address of the particular ERC20 token, for accepting price of NFTs in ERC20 tokens\r\n\r\n    function setERC20Token(IERC20 newSxtToken) external;\r\n\r\n    /// @dev This is the function to buy a new NFT token which is available free of cost\r\n    /// @dev Only called when contract is unpaused\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFT(uint256 id, address to) external;\r\n\r\n    /// @dev This is the function to buy a new NFT token using Ethers\r\n    /// @dev Only called when contract is unpaused\r\n    /// @dev If Token is buyable with Ether and ethPrice > 0, function will accept ethers\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFTUsingEth(uint256 id, address to) external payable;\r\n\r\n    /// @dev This is the function to buy a new NFT token using ERC20 Token\r\n    /// @dev Only called when contract is unpaused\r\n    /// @dev If Token is buyable with ERC20 token and erc20Price > 0, function will transfer ERC20 tokens to contract\r\n    /// @param id ID of NFT token to be bought\r\n    /// @param to Address to which NFT token should be minted to\r\n\r\n    function mintNFTUsingERC20(uint256 id, address to) external;\r\n\r\n    /// @dev This is the function to add new NFT tokens in the contract\r\n    /// @dev Only the owner can call this function\r\n    /// @param newTokenURIs Array of URIs for NFTs to be added\r\n    /// @param maxNewTokenSupplies Array of maximum possible supplies for NFTs to be added\r\n    /// @param hasPrices Array of boolean flags representing whether the NFT token has any price or not\r\n    /// @param newEthPrices Array of prices in Ethers for NFTs to be added\r\n    /// @param newERC20Prices Array of prices in ERC20 Tokens for NFTs to be added\r\n\r\n    function addNewNFTs(string [] memory newTokenURIs, bool [] memory hasPrices, uint256 [] memory newEthPrices, uint256 [] memory newERC20Prices, uint256 [] memory maxNewTokenSupplies) external;\r\n    \r\n    /// @dev This is the function to withdraw ethers from contract\r\n    /// @dev Only the owner can call this function\r\n\r\n    function withdrawEth() external;\r\n\r\n    /// @dev This is the function to withdraw ERC20 Tokens from contract\r\n    /// @dev Only the owner can call this function    \r\n\r\n    function withdrawERC20() external;\r\n\r\n    /// @dev This is the function to pause the contract\r\n\r\n    function pause() external;\r\n\r\n    /// @dev This is the function to unpause the contract\r\n\r\n    function unpause() external;\r\n  \r\n}"
    },
    "/contracts/SxTCommunityStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract SxTCommunityStorage {\r\n    using Strings for uint256;\r\n\r\n    // Constant denoting zero address\r\n    address constant ZERO_ADDRESS = address(0);\r\n\r\n    // Amount of tokens that can be bought at a time\r\n    uint8 constant AMOUNT_BUYABLE = 1;\r\n\r\n    // Name of ERC1155 token\r\n    string public name;\r\n\r\n    // Symbol of ERC1155 token\r\n    string public symbol;\r\n\r\n    // IERC20 token instance for accepting NFT token's price in ERC20 tokens\r\n    IERC20 public sxtToken;\r\n\r\n    // Structure of NFT token\r\n    struct Token {\r\n        string tokenUri;\r\n        bool hasPrice;\r\n        uint256 id;\r\n        uint256 ethPrice;\r\n        uint256 erc20Price;\r\n        uint256 maxTokenSupply;\r\n        uint256 currentTokenSupply;\r\n    }\r\n\r\n    /// @dev This function returns stringified JSON form of a struct  \r\n    /// @param nftToken Detailed structure instance of an NFT\r\n    /// @return nftJSONString Stringified JSON response generated from struct\r\n\r\n    function getJSONfromStruct(Token memory nftToken) internal pure returns (string memory) {\r\n        string memory hasPrice = nftToken.hasPrice ? \"true\": \"false\";\r\n        string memory nftJSONString = string(abi.encodePacked(\r\n            \"{\\\"tokenUri\\\":\\\"\",nftToken.tokenUri,\r\n            \"\\\",\\\"hasPrice\\\":\\\"\",hasPrice,\r\n            \"\\\",\\\"id\\\":\\\"\",nftToken.id.toString(),\r\n            \"\\\",\\\"erc20Price\\\":\\\"\",nftToken.erc20Price.toString(),\r\n            \"\\\",\\\"ethPrice\\\":\\\"\",nftToken.ethPrice.toString(),\r\n            \"\\\",\\\"maxTokenSupply\\\":\\\"\",nftToken.maxTokenSupply.toString(),\r\n            \"\\\",\\\"currentTokenSupply\\\":\\\"\",nftToken.currentTokenSupply.toString(),\r\n            \"\\\"}\"\r\n        ));\r\n        return string(abi.encodePacked(\r\n            bytes(nftJSONString)\r\n        ));\r\n    }  \r\n\r\n    /// @dev This function returns stringified JSON form of an array of structs  \r\n    /// @param nftTokens Array of structs of NFTs\r\n    /// @return nftsJSONString Stringified JSON response generated from struct array\r\n\r\n    function getJSONResponse(Token [] memory nftTokens) internal pure returns (string memory) {\r\n        string memory nftsJSONString;\r\n        for (uint256 index = 0; index < nftTokens.length; index++){\r\n            if(keccak256(abi.encodePacked(nftTokens[index].tokenUri)) != keccak256(abi.encodePacked(\"\")))\r\n            {\r\n                string memory nftJSONString = getJSONfromStruct(nftTokens[index]);\r\n                if(index != 0 )\r\n                    nftsJSONString = string(abi.encodePacked( nftsJSONString, \",\"));\r\n                nftsJSONString = string(abi.encodePacked(nftsJSONString, nftJSONString));                \r\n            }\r\n            else \r\n            {\r\n                break;\r\n            }\r\n        }\r\n        nftsJSONString = string(abi.encodePacked(\"[\", nftsJSONString, \"]\"));\r\n        return nftsJSONString;\r\n    }\r\n\r\n    // Mapping for maintaining NFT token ID\r\n    mapping(uint256 => Token) public tokenDetails;\r\n\r\n    // Mapping for maintaing whether an address had minted a particular NFT from the contract previously\r\n    mapping(uint256 => mapping(address => bool)) public isPreviouslyMintedFrom;\r\n}"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}