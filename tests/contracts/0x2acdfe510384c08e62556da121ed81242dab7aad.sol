{{
  "language": "Solidity",
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 669,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "evmVersion": "london"
  },
  "sources": {
    "contracts/CitizensOfOverworld.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.12 <0.9.0;\n\nimport \"./ERC721A.sol\";\nimport \"./IERC721A.sol\";\nimport \"./Base64.sol\";\nimport \"./Ownable.sol\";\nimport \"./AnonymiceLibrary.sol\";\nimport \"./Utility.sol\";\n\ncontract CitizensOfOverworld is ERC721A, Ownable {\n    /*\n\n    *******************************************************************************************************************\n    *                                                                                                                 *\n    *   ______   __    __      __                                                           ______                    *\n    *  /      \\ |  \\  |  \\    |  \\                                                         /      \\                   *\n    * |  000000\\ \\00 _| 00_    \\00 ________   ______   _______    _______         ______  |  000000\\                  *\n    * | 00   \\00|  \\|   00 \\  |  \\|        \\ /      \\ |       \\  /       \\       /      \\ | 00_  \\00                  *\n    * | 00      | 00 \\000000  | 00 \\00000000|  000000\\| 0000000\\|  0000000      |  000000\\| 00 \\                      *\n    * | 00   __ | 00  | 00 __ | 00  /    00 | 00    00| 00  | 00 \\00    \\       | 00  | 00| 0000                      *\n    * | 00__/  \\| 00  | 00|  \\| 00 /  0000_ | 00000000| 00  | 00 _\\000000\\      | 00__/ 00| 00                        *\n    *  \\00    00| 00   \\00  00| 00|  00    \\ \\00     \\| 00  | 00|       00       \\00    00| 00                        *\n    *   \\000000  \\00    \\0000  \\00 \\00000000  \\0000000 \\00   \\00 \\0000000         \\000000  \\00                        *\n    *                                                                                                                 *\n    *   ______                                                                    __        __         0000000000     *\n    *  /      \\                                                                  |  \\      |  \\      00000000000000   *\n    * |  000000\\ __     __   ______    ______   __   __   __   ______    ______  | 00  ____| 00      00000000000000   *\n    * | 00  | 00|  \\   /  \\ /      \\  /      \\ |  \\ |  \\ |  \\ /      \\  /      \\ | 00 /      00      00000000000000   *   \n    * | 00  | 00 \\00\\ /  00|  000000\\|  000000\\| 00 | 00 | 00|  000000\\|  000000\\| 00|  0000000        0000000000     *\n    * | 00  | 00  \\00\\  00 | 00    00| 00   \\00| 00 | 00 | 00| 00  | 00| 00   \\00| 00| 00  | 00       000000000000    *\n    * | 00__/ 00   \\00 00  | 00000000| 00      | 00_/ 00_/ 00| 00__/ 00| 00      | 00| 00__| 00      01000000000010   *\n    *  \\00    00    \\000    \\00     \\| 00       \\00   00   00 \\00    00| 00      | 00 \\00    00      01000000000010   *  \n    *   \\000000      \\0      \\0000000 \\00        \\00000\\0000   \\000000  \\00       \\00  \\0000000        0000  0000     *   \n    *                                                                                                                 *\n    *                                                                                                                 *\n    *  on-chain, animated digital collectibles                                                                        *\n    *                                                                                                                 *\n    *                                                                                                                 *\n    *   created by @0xMongoon ( ＾◡＾)っ ♡                                                                             *                                               \n    *                                                                                                                 *\n    *   with inspiration from all the devs & collections living on-chain                                              *\n    *******************************************************************************************************************\n                                                                                            \n\n\n\n     __     __                     __            __        __                     \n    |  \\   |  \\                   |  \\          |  \\      |  \\                    \n    | 00   | 00 ______    ______   \\00  ______  | 00____  | 00  ______    _______ \n    | 00   | 00|      \\  /      \\ |  \\ |      \\ | 00    \\ | 00 /      \\  /       \\\n     \\00\\ /  00 \\000000\\|  000000\\| 00  \\000000\\| 0000000\\| 00|  000000\\|  0000000\n      \\00\\  00 /      00| 00   \\00| 00 /      00| 00  | 00| 00| 00    00 \\00    \\ \n       \\00 00 |  0000000| 00      | 00|  0000000| 00__/ 00| 00| 00000000 _\\000000\\\n        \\000   \\00    00| 00      | 00 \\00    00| 00    00| 00 \\00     \\|       00\n         \\0     \\0000000 \\00       \\00  \\0000000 \\0000000  \\00  \\0000000 \\0000000 \n    */\n\n    //  **********  //\n    //  * ERC721 *  //\n    //  **********  //\n\n    // ERC721A values.\n    uint256 public MAX_SUPPLY;\n    uint256 public constant MAX_MINT_PER_WALLET = 4;\n    uint256 public constant MAX_MINT_OWNER = 30;\n    uint256 public constant PRICE_AFTER_FIRST_MINT = 0.005 ether;\n\n    //  ******************************  //\n    //  * Mint Tracking & Regulation *  //\n    //  ******************************  //\n\n    // Used to start/pause mint\n    bool public mintLive = false;\n\n    // Tracks last write and num minted for each address except owner\n    // Last write is used to prevent flashbots from reverting their mint after seeing traits they got (courtesy Circolors)\n    mapping(address => uint256) public mintedInfo;\n\n    // Tracks how many Citizens the owner has minted\n    uint256 public tokensMintedByOwner = 0;\n\n    // Used to add some more variability in pseudo-randomness\n    uint256 private seed_nonce;\n\n    //  ***********  //\n    //  * Utility *  //\n    //  ***********  //\n\n    // Used for converting small uints to strings with low gas\n    string[33] private lookup;\n\n    //  ************************************  //\n    //  * STORAGE OF COMPRESSED IMAGE DATA *  //\n    //  ************************************  //\n\n    // Used to store the compressed trait images as bytes\n    bytes[][] private compressedTraitImages;\n\n    // Used to store the compressed trait metadata as bytes32\n    bytes20[][] private compressedTraitMetadata;\n\n    // Used to store that background image data as strings\n    string[6] private backgrounds;\n\n    // Used to store the animation and gradient data for each legendary trait as bytes\n    bytes public legendaryAnimations;\n\n    // Used to store the pixels for each legendary trait as bytes\n    bytes private legendaryPixels;\n\n    // Used to store all possible colors as a single bytes object\n    bytes private hexColorPalette;\n\n    // Once the owner loads the data, this is set to true, and the data is locked\n    bool public compressedDataLoaded;\n\n    //  **************************************  //\n    //  * STORAGE OF DECOMPRESSED IMAGE DATA *  //\n    //  **************************************  //\n\n    // Used to store the bounds within the SVG coordinate system for each trait\n    struct Bounds {\n        uint8 minX;\n        uint8 maxX;\n        uint8 minY;\n        uint8 maxY;\n    }\n\n    // Used to store the color and length of each pixel of a trait\n    struct Pixel {\n        uint8 length;\n        uint8 colorIndex;\n    }\n\n    // Used to store the decompressed trait image\n    struct DecompressedTraitImage {\n        Bounds bounds;\n        Pixel[] draws;\n    }\n\n    //  ***************************  //\n    //  * RENDERING OF IMAGE DATA *  //\n    //  ***************************  //\n\n    // Constant values that will be used to build the SVG\n    // Some are only used if the Citizen has a 'rainbow' trait or is legendary\n    string private constant _SVG_PRE_STYLE_ATTRIBUTE =\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"citizen\" viewBox=\"-4.5 -5 42 42\" width=\"640\" height=\"640\" style=\"';\n    string private constant _SVG_DEF_TAGS =\n        ' shape-rendering: crispedges; image-rendering: -moz-crisp-edges; background-repeat: no-repeat;\"><defs><radialGradient id=\"i\"><stop offset=\"0%\" style=\"stop-color:#000000;stop-opacity:.9\"/><stop offset=\"100%\" style=\"stop-opacity:0\"/></radialGradient>';\n    string private constant _SVG_RAINBOW_ANIMATION_DEF_IF_RAINBOW =\n        '<animate xmlns=\"http://www.w3.org/2000/svg\" href=\"#r\" attributeName=\"fill\" values=\"red;orange;yellow;green;blue;violet;red;\" dur=\"1s\" repeatCount=\"indefinite\"/>';\n    string private constant _SVG_CLIP_DEF_IF_LEGENDARY =\n        '<clipPath id=\"c\"><rect x=\"11\" y=\"13\" width=\"11\" height=\"16\"/><rect x=\"10\" y=\"15\" width=\"1\" height=\"14\"/><rect x=\"22\" y=\"15\" width=\"1\" height=\"14\"/><rect x=\"12\" y=\"29\" width=\"4\" height=\"4\"/><rect x=\"17\" y=\"29\" width=\"4\" height=\"4\"/><rect x=\"16\" y=\"29\" width=\"1\" height=\"1\"/></clipPath>';\n    string private constant _SVG_TAG_PRE_ANIMATION_ID_REF =\n        '</defs><ellipse cx=\"16.5\" cy=\"33\" rx=\"6\" ry=\"2\" fill=\"url(#i)\"><animate attributeType=\"XML\" attributeName=\"rx\" dur=\"1.3s\" values=\"9;7;9\" repeatCount=\"indefinite\" calcMode=\"spline\" keyTimes=\"0; 0.5; 1\" keySplines=\"0.5 0 0.5 1; 0.5 0 0.5 1\"/></ellipse><g fill=\"url(#';\n    string private constant _SVG_FINAL_START_TAG =\n        ')\" clip-path=\"url(#c)\" id=\"r\"><animateTransform attributeType=\"XML\" attributeName=\"transform\" type=\"translate\" values=\"0,.5;0,-.5;0,.5\" repeatCount=\"indefinite\" dur=\"1.3s\" calcMode=\"spline\" keyTimes=\"0; 0.5; 1\" keySplines=\"0.5 0 0.5 1; 0.5 0 0.5 1\"/>';\n    string private constant _SVG_END_TAG = \"</g></svg>\";\n\n    // Used to store the DNA for each Citizen. This DNA is used to determine the traits of each Citizen upon rendering via tokenURI()\n    struct DNA {\n        uint256 Legendary;\n        uint256 Body;\n        uint256 Pants;\n        uint256 Shirt;\n        uint256 Eyes;\n        uint256 Hat;\n        uint256 Accessory;\n        uint256 Mouth;\n        uint256 Background;\n    }\n\n    // Contains the DNA for every Citizen, keyed by tokenId\n    mapping(uint256 => uint256) public tokenIdToSeed;\n\n    //  ******************  //\n    //  * TRAIT RARITIES *  //\n    //  ******************  //\n\n    uint256[] legendaryRarity = [uint256(9944), 7, 7, 7, 7, 7, 7, 7, 7];\n\n    uint256[] bodyRarity = [uint256(25), 25, 25, 25, 25, 25, 24, 24, 1];\n\n    uint256[] pantsRarity = [uint256(18), 16, 4, 16, 16, 17, 15, 10, 14, 4, 14, 14, 15, 16, 8, 2];\n\n    uint256[] shirtRarity = [uint256(19), 19, 19, 19, 19, 19, 17, 15, 6, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 6, 2];\n\n    uint256[] eyesRarity = [uint256(10), 5, 10, 10, 10, 5, 1, 4, 25, 1, 25, 4, 4, 2, 2, 2, 2, 22, 10, 10, 16, 3, 15, 2];\n\n    uint256[] hatRarity = [uint256(2), 12, 12, 12, 4, 5, 4, 12, 12, 12, 4, 12, 1, 4, 5, 2, 2, 13, 5, 2, 2, 2, 5, 13, 13, 4, 3, 3, 3, 3, 3, 8, 1];\n\n    uint256[] accessoryRarity = [uint256(10), 4, 20, 3, 12, 150, 1];\n\n    uint256[] mouthRarity = [uint256(2), 2, 2, 2, 2, 2, 2, 2, 4, 3, 4, 15, 24, 4, 4, 4, 3, 24, 3, 4, 11, 9, 3, 4, 11, 11, 11, 10, 10, 4, 4];\n\n    uint256[] backgroundRarity = [uint256(30), 30, 30, 30, 30, 30, 3, 3, 3, 3, 4, 4];\n\n    /*\n     ________                                 __      __                               \n    |        \\                               |  \\    |  \\                              \n    | 00000000__    __  _______    _______  _| 00_    \\00  ______   _______    _______ \n    | 00__   |  \\  |  \\|       \\  /       \\|   00 \\  |  \\ /      \\ |       \\  /       \\\n    | 00  \\  | 00  | 00| 0000000\\|  0000000 \\000000  | 00|  000000\\| 0000000\\|  0000000\n    | 00000  | 00  | 00| 00  | 00| 00        | 00 __ | 00| 00  | 00| 00  | 00 \\00    \\ \n    | 00     | 00__/ 00| 00  | 00| 00_____   | 00|  \\| 00| 00__/ 00| 00  | 00 _\\000000\\\n    | 00      \\00    00| 00  | 00 \\00     \\   \\00  00| 00 \\00    00| 00  | 00|       00\n     \\00       \\000000  \\00   \\00  \\0000000    \\0000  \\00  \\000000  \\00   \\00 \\0000000 \n    \n    */\n\n    constructor() ERC721A(\"Citizens of Overworld\", \"OVRWRLD\") {}\n\n    //  ***********************************  //\n    //  * FLASHBOT MINT REVERT PREVENTION *  //\n    //  ***********************************  //\n\n    // Prevents someone calling read functions the same block they mint (courtesy of Circolors)\n    modifier disallowIfStateIsChanging() {\n        require(\n            owner() == msg.sender ||\n                (mintedInfo[msg.sender] >> 8) < block.number,\n            \"pwnd\"\n        );\n        _;\n    }\n\n    //  *****************  //\n    //  * CUSTOM ERRORS *  //\n    //  ********/********  //\n\n    error MintNotLive();\n    error TooMany();\n    error SoldOut();\n    error DownOnly();\n    error BadPrice();\n    error BiggerSupplyPls();\n\n    /*\n\n    __       __  __             __     \n   |  \\     /  \\|  \\           |  \\                             _   _\n   | 00\\   /  00 \\00 _______  _| 00_                           ((\\o/))\n   | 000\\ /  000|  \\|       \\|   00 \\                     .-----//^\\\\-----.\n   | 0000\\  0000| 00| 0000000\\\\000000                     |    /`| |`\\    |\n   | 00\\00 00 00| 00| 00  | 00 | 00 __                    |      | |      |\n   | 00 \\000| 00| 00| 00  | 00 | 00|  \\                   |      | |      |\n   | 00  \\0 | 00| 00| 00  | 00  \\00  00                   |      | |      |\n    \\00      \\00 \\00 \\00   \\00   \\0000       ༼ つ ◕_◕ ༽つ  '------===------'\n\n    */\n\n    function mint(uint256 quantity) external payable {\n        if (!mintLive) revert MintNotLive();\n\n        uint256 walletMinted = mintedInfo[msg.sender] & 0xFF;\n        uint256 newWalletMinted = walletMinted + quantity;\n        if (newWalletMinted > MAX_MINT_PER_WALLET) revert TooMany();\n\n        uint256 totalminted = _totalMinted();\n        uint256 newSupply = totalminted + quantity;\n        if (newSupply + (MAX_MINT_OWNER - tokensMintedByOwner) > MAX_SUPPLY)\n            revert SoldOut();\n\n        uint256 totalFee = (quantity - (mintedInfo[msg.sender] != 0 ? 0 : 1)) *\n            PRICE_AFTER_FIRST_MINT;\n\n        if (msg.value != totalFee) revert BadPrice();\n        mintedInfo[msg.sender] = (block.number << 8) + newWalletMinted;\n        _safeMint(msg.sender, quantity);\n        for (; totalminted < newSupply; ++totalminted) {\n            uint256 seed = generateSeed(totalminted);\n            tokenIdToSeed[totalminted] = seed;\n            unchecked {\n                seed_nonce += seed;\n            }\n        }\n    }\n\n    /*\n       ______   __    __      __                                            \n      /      \\ |  \\  |  \\    |  \\                                                                       (=(   )=)\n     |  000000\\ \\00 _| 00_    \\00 ________   ______   _______                                            `.\\ /,'\n     | 00   \\00|  \\|   00 \\  |  \\|        \\ /      \\ |       \\                                             `\\.\n     | 00      | 00 \\000000  | 00 \\00000000|  000000\\| 0000000\\                                          ,'/ \\`.\n     | 00   __ | 00  | 00 __ | 00  /    00 | 00    00| 00  | 00                                         (=(   )=)\n     | 00__/  \\| 00  | 00|  \\| 00 /  0000_ | 00000000| 00  | 00                                          `.\\ /,'\n      \\00    00| 00   \\00  00| 00|  00    \\ \\00     \\| 00  | 00                                            ,/'\n       \\000000  \\00    \\0000  \\00 \\00000000  \\0000000 \\00   \\00                                          ,'/ \\`.\n       ______                                                     __      __                            (=(   )=)\n      /      \\                                                   |  \\    |  \\                            `.\\ /,'\n     |  000000\\  ______   _______    ______    ______   ______  _| 00_    \\00  ______   _______            `\\.\n     | 00 __\\00 /      \\ |       \\  /      \\  /      \\ |      \\|   00 \\  |  \\ /      \\ |       \\         ,'/ \\`.\n     | 00|    \\|  000000\\| 0000000\\|  000000\\|  000000\\ \\000000\\\\000000  | 00|  000000\\| 0000000\\       (=(   )=)\n     | 00 \\0000| 00    00| 00  | 00| 00    00| 00   \\00/      00 | 00 __ | 00| 00  | 00| 00  | 00        `.\\ /,'\n     | 00__| 00| 00000000| 00  | 00| 00000000| 00     |  0000000 | 00|  \\| 00| 00__/ 00| 00  | 00          ,/'\n      \\00    00 \\00     \\| 00  | 00 \\00     \\| 00      \\00    00  \\00  00| 00 \\00    00| 00  | 00        ,'/ \\`.\n       \\000000   \\0000000 \\00   \\00  \\0000000 \\00       \\0000000   \\0000  \\00  \\000000  \\00   \\00       (=(   )=)\n    */\n\n    /**\n     * Creates DNA object for Overworld's newest Citizen via pseudorandom trait generation.\n     */\n    function generateSeed(uint256 tokenId) private view returns (uint256) {\n        return\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        blockhash(block.number - 1),\n                        tokenId,\n                        msg.sender,\n                        block.timestamp,\n                        block.difficulty,\n                        seed_nonce\n                    )\n                )\n            );\n    }\n\n    /**\n     * Returns a random number between 0 and 200, weighted by rarity array.\n     */\n    function getRarity(int256 rand, uint256[] memory rarity)\n        private\n        pure\n        returns (uint256)\n    {\n        uint256 trait;\n        for (uint256 i; i < rarity.length; ++i) {\n            if (rand - int256(rarity[i]) < 0) {\n                trait = i;\n                break;\n            }\n            rand -= int256(rarity[i]);\n        }\n        return trait;\n    }\n\n    /*\n                                                                                                                              ▒▒\n                                                                                                                            ▒▒░░▒▒\n     ______   __    __      __                                                                                            ▒▒░░░░░░▒▒ \n    /      \\ |  \\  |  \\    |  \\                                                                                         ▒▒░░░░░░░░░░▒▒\n   |  000000\\ \\00 _| 00_    \\00 ________   ______   _______                                                           ▒▒░░░░░░░░░░░░░░▒▒\n   | 00   \\00|  \\|   00 \\  |  \\|        \\ /      \\ |       \\                                                        ▒▒░░▒▒░░░░░░░░░░░░░░▒▒ \n   | 00      | 00 \\000000  | 00 \\00000000|  000000\\| 0000000\\                                                     ░░  ▒▒░░▒▒░░░░░░░░░░░░░░▒▒\n   | 00   __ | 00  | 00 __ | 00  /    00 | 00    00| 00  | 00                                                   ░░  ██  ▒▒░░▒▒░░░░░░░░░░▒▒  \n   | 00__/  \\| 00  | 00|  \\| 00 /  0000_ | 00000000| 00  | 00                                                 ░░  ██      ▒▒░░▒▒░░░░░░▒▒    \n    \\00    00| 00   \\00  00| 00|  00    \\ \\00     \\| 00  | 00                                               ░░  ██      ██  ▒▒░░▒▒░░▒▒  \n     \\000000  \\00    \\0000  \\00 \\00000000  \\0000000 \\00   \\00                                             ░░  ██      ██      ▒▒░░▒▒   \n                                                                                                        ░░  ██      ██      ██  ▒▒    \n    _______                             __                      __                                    ░░  ██      ██      ██  ░░        \n   |       \\                           |  \\                    |  \\                                 ░░  ██      ██      ██  ░░    \n   | 0000000\\  ______   _______    ____| 00  ______    ______   \\00 _______    ______               ▒▒██      ██      ██  ░░  \n   | 00__| 00 /      \\ |       \\  /      00 /      \\  /      \\ |  \\|       \\  /      \\            ▒▒░░▒▒    ██      ██  ░░ \n   | 00    00|  000000\\| 0000000\\|  0000000|  000000\\|  000000\\| 00| 0000000\\|  000000\\           ▒▒░░░░▒▒██      ██  ░░    \n   | 0000000\\| 00    00| 00  | 00| 00  | 00| 00    00| 00   \\00| 00| 00  | 00| 00  | 00         ▒▒░░░░░░░░▒▒    ██  ░░    \n   | 00  | 00| 00000000| 00  | 00| 00__| 00| 00000000| 00      | 00| 00  | 00| 00__| 00         ▒▒░░░░░░░░░░▒▒██  ░░    \n   | 00  | 00 \\00     \\| 00  | 00 \\00    00 \\00     \\| 00      | 00| 00  | 00 \\00    00       ▒▒░░░░░░░░░░░░░░▒▒░░        \n    \\00   \\00  \\0000000 \\00   \\00  \\0000000  \\0000000 \\00       \\00 \\00   \\00 _\\0000000       ▒▒░░░░░░░░░░▒▒▒▒          \n                                                                             |  \\__| 00       ████░░░░▒▒▒▒              \n                                                                              \\00    00     ██████▒▒▒▒     \n                                                                              \\000000       ████                                  \n    */\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721A)\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        abi.encodePacked(\n                            '{\"name\": \"Citizen ',\n                            _toString(tokenId),\n                            '\", \"image\": \"data:image/svg+xml;base64,',\n                            Base64.encode(bytes(tokenIdToSVG(tokenId))),\n                            '\",\"attributes\":',\n                            tokenIdToMetadata(tokenId),\n                            \"}\"\n                        )\n                    )\n                )\n            );\n    }\n\n    /**\n     * Given a seed, returns a DNA struct containing all the traits.\n     */\n    function getDNA(uint256 seed)\n        public\n        view\n        disallowIfStateIsChanging\n        returns (DNA memory)\n    {\n        uint256 extractedRandomNum;\n        int256 rand;\n        uint256 mask = 0xFFFF;\n\n        uint256 traitLegendary;\n        uint256 traitBody;\n        uint256 traitPants;\n        uint256 traitShirt;\n        uint256 traitEyes;\n        uint256 traitHat;\n        uint256 traitAccessory;\n        uint256 traitMouth;\n        uint256 traitBackground;\n\n        // Calculate Legendary trait based on seed\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 10000);\n        traitLegendary = getRarity(rand, legendaryRarity);\n\n        // Calculate Body trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitBody = getRarity(rand, bodyRarity);\n\n        // Calculate Pants trait based on seed\n        seed >>= 1;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitPants = getRarity(rand, pantsRarity);\n\n        // Calculate Shirt trait based on seed\n        seed >>= 1;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitShirt = getRarity(rand, shirtRarity);\n\n        // Calculate Eyes trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitEyes = getRarity(rand, eyesRarity);\n\n        // Calculate Hat trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitHat = getRarity(rand, hatRarity);\n\n        // Calculate Accessory trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitAccessory = getRarity(rand, accessoryRarity);\n\n        // Calculate Mouth trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitMouth = getRarity(rand, mouthRarity);\n\n        // Calculate Background trait based on seed\n        seed >>= 4;\n        extractedRandomNum = seed & mask;\n        rand = int256(extractedRandomNum % 200);\n        traitBackground = getRarity(rand, backgroundRarity);\n\n        return\n            DNA({\n                Legendary: traitLegendary,\n                Body: traitBody,\n                Pants: traitPants,\n                Shirt: traitShirt,\n                Eyes: traitEyes,\n                Hat: traitHat,\n                Accessory: traitAccessory,\n                Mouth: traitMouth,\n                Background: traitBackground\n            });\n    }\n\n    /**\n     * Given a tokenId, returns its SVG.\n     */\n    function tokenIdToSVG(uint256 tokenId)\n        public\n        view\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        // Get the DNA derived from the tokenId's seed\n        DNA memory dna = getDNA(tokenIdToSeed[tokenId]);\n\n        // This will hold the SVG pixels (represented as SVG <rect> elements)\n        string memory svgRectTags;\n\n        if (dna.Legendary == 0) {\n            svgRectTags = string(\n                abi.encodePacked(\n                    svgRectTags,\n                    getRectTagsFromCompressedImageData(\n                        compressedTraitImages[4][dna.Body % 8],\n                        dna.Body == 8\n                    )\n                )\n            );\n\n            if (dna.Pants != 14) {\n                svgRectTags = string(\n                    abi.encodePacked(\n                        svgRectTags,\n                        getRectTagsFromCompressedImageData(\n                            compressedTraitImages[5][dna.Pants % 15],\n                            dna.Pants == 15\n                        )\n                    )\n                );\n            }\n\n            if (dna.Shirt != 19) {\n                svgRectTags = string(\n                    abi.encodePacked(\n                        svgRectTags,\n                        getRectTagsFromCompressedImageData(\n                            compressedTraitImages[6][\n                                dna.Mouth < 8\n                                    ? (dna.Shirt + dna.Pants) % 8\n                                    : dna.Shirt % 20\n                            ], // If mouth is beard, make shirt solid color\n                            dna.Shirt == 20\n                        )\n                    )\n                );\n            }\n\n            svgRectTags = string(\n                abi.encodePacked(\n                    svgRectTags,\n                    getRectTagsFromCompressedImageData(\n                        compressedTraitImages[0][dna.Eyes == 23 ? 1 : dna.Eyes],\n                        dna.Eyes == 23\n                    )\n                )\n            );\n\n            if (dna.Hat != 31) {\n                svgRectTags = string(\n                    abi.encodePacked(\n                        svgRectTags,\n                        getRectTagsFromCompressedImageData(\n                            compressedTraitImages[1][\n                                dna.Hat == 32\n                                    ? (dna.Hat + dna.Shirt + dna.Pants) % 20\n                                    : dna.Hat\n                            ],\n                            dna.Hat == 32\n                        )\n                    )\n                );\n            }\n\n            if (dna.Accessory != 5) {\n                svgRectTags = string(\n                    abi.encodePacked(\n                        svgRectTags,\n                        getRectTagsFromCompressedImageData(\n                            compressedTraitImages[2][dna.Accessory % 6],\n                            dna.Accessory == 6\n                        )\n                    )\n                );\n            }\n\n            svgRectTags = string(\n                abi.encodePacked(\n                    svgRectTags,\n                    getRectTagsFromCompressedImageData(\n                        compressedTraitImages[3][dna.Mouth],\n                        false\n                    )\n                )\n            );\n        } else {\n            svgRectTags = string(\n                abi.encodePacked(\n                    svgRectTags,\n                    parseLegendaryRects(legendaryPixels)\n                )\n            );\n        }\n\n        return\n            string(\n                abi.encodePacked(\n                    _SVG_PRE_STYLE_ATTRIBUTE,\n                    getBackgroundStyleFromDnaIndex(\n                        dna.Background,\n                        dna.Legendary > 0\n                    ),\n                    _SVG_DEF_TAGS,\n                    (dna.Legendary > 0)\n                        ? \"\"\n                        : _SVG_RAINBOW_ANIMATION_DEF_IF_RAINBOW,\n                    (dna.Legendary > 0) ? _SVG_CLIP_DEF_IF_LEGENDARY : \"\",\n                    (dna.Legendary > 0)\n                        ? parseLegendaryAnimations(dna.Legendary)\n                        : \"\",\n                    _SVG_TAG_PRE_ANIMATION_ID_REF,\n                    AnonymiceLibrary.toString(dna.Legendary),\n                    _SVG_FINAL_START_TAG,\n                    svgRectTags,\n                    _SVG_END_TAG\n                )\n            );\n    }\n\n    function tokenIdToMetadata(uint256 tokenId)\n        public\n        view\n        disallowIfStateIsChanging\n        returns (string memory)\n    {\n        unchecked {\n            DNA memory tokenDna = getDNA(tokenIdToSeed[tokenId]);\n            string memory metadataString;\n\n            if (tokenDna.Legendary > 0) {\n                metadataString = string(\n                    abi.encodePacked(\n                        '{\"trait_type\":\"',\n                        Utility.bytes20ToString(compressedTraitMetadata[8][0]),\n                        '\",\"value\":\"',\n                        Utility.bytes20ToString(\n                            compressedTraitMetadata[8][tokenDna.Legendary + 1]\n                        ),\n                        '\"}'\n                    )\n                );\n            } else {\n                for (uint256 i; i < 9; ++i) {\n                    uint256 traitValueIndex;\n\n                    if (i == 0) {\n                        traitValueIndex = tokenDna.Eyes;\n                    } else if (i == 1) {\n                        traitValueIndex = tokenDna.Hat;\n                    } else if (i == 2) {\n                        traitValueIndex = tokenDna.Accessory;\n                    } else if (i == 3) {\n                        traitValueIndex = tokenDna.Mouth;\n                    } else if (i == 4) {\n                        traitValueIndex = tokenDna.Body;\n                    } else if (i == 5) {\n                        traitValueIndex = tokenDna.Pants;\n                    } else if (i == 6) {\n                        traitValueIndex = tokenDna.Mouth < 8\n                            ? (tokenDna.Shirt + tokenDna.Pants) % 8\n                            : tokenDna.Shirt % 20;\n                    } else if (i == 7) {\n                        traitValueIndex = tokenDna.Background;\n                    } else if (i == 8) {\n                        traitValueIndex = tokenDna.Legendary;\n                    } else {\n                        traitValueIndex = uint256(69);\n                    }\n\n                    string memory traitName = Utility.bytes20ToString(\n                        compressedTraitMetadata[i][0]\n                    );\n                    string memory traitValue = Utility.bytes20ToString(\n                        compressedTraitMetadata[i][traitValueIndex + 1]\n                    );\n\n                    string memory startline;\n                    if (i != 0) startline = \",\";\n\n                    metadataString = string(\n                        abi.encodePacked(\n                            metadataString,\n                            startline,\n                            '{\"trait_type\":\"',\n                            traitName,\n                            '\",\"value\":\"',\n                            traitValue,\n                            '\"}'\n                        )\n                    );\n                }\n            }\n\n            return string.concat(\"[\", metadataString, \"]\");\n        }\n    }\n\n    /**\n     * Given a Run-Length Encoded image in 'bytes', decompress it into a more workable data structure.\n     */\n    function decompressTraitImageData(bytes memory image)\n        private\n        pure\n        returns (DecompressedTraitImage memory)\n    {\n        Bounds memory bounds = Bounds({\n            minX: uint8(image[0]),\n            maxX: uint8(image[1]),\n            minY: uint8(image[2]),\n            maxY: uint8(image[3])\n        });\n\n        uint256 pixelDataIndex;\n        Pixel[] memory draws = new Pixel[]((image.length - 4) / 2);\n        for (uint256 i = 4; i < image.length; i += 2) {\n            draws[pixelDataIndex] = Pixel({\n                length: uint8(image[i]),\n                colorIndex: uint8(image[i + 1])\n            });\n            ++pixelDataIndex;\n        }\n\n        return DecompressedTraitImage({bounds: bounds, draws: draws});\n    }\n\n    /**\n     * Given the compressed image data for a single trait, and whether or not it is of special type,\n     * return a string of rects that will be inserted into the final svg rendering.\n     */\n    function getRectTagsFromCompressedImageData(\n        bytes memory compressedImage,\n        bool isRainbow\n    ) private view returns (string memory) {\n        DecompressedTraitImage memory image = decompressTraitImageData(\n            compressedImage\n        );\n\n        Pixel memory pixel;\n\n        string[] memory cache = new string[](256);\n\n        uint256 currentX = 0;\n        uint256 currentY = image.bounds.minY;\n\n        // will hold data for 4 rects\n        string[16] memory buffer;\n\n        string memory part;\n\n        string memory rects;\n\n        uint256 cursor;\n\n        for (uint8 i = 0; i < image.draws.length; ++i) {\n            pixel = image.draws[i];\n            uint8 drawLength = pixel.length;\n\n            uint8 length = getRectLength(currentX, drawLength, 32);\n\n            if (pixel.colorIndex != 0) {\n                buffer[cursor] = lookup[length]; // width\n                buffer[cursor + 1] = lookup[currentX]; // x\n                buffer[cursor + 2] = lookup[currentY]; // y\n                buffer[cursor + 3] = getColorFromPalette(\n                    hexColorPalette,\n                    pixel.colorIndex,\n                    cache\n                ); // color\n\n                cursor += 4;\n\n                if (cursor > 15) {\n                    part = string(\n                        abi.encodePacked(\n                            part,\n                            getChunk(cursor, buffer, isRainbow)\n                        )\n                    );\n                    cursor = 0;\n                }\n            }\n\n            currentX += length;\n\n            if (currentX > 31) {\n                currentX = 0;\n                ++currentY;\n            }\n        }\n\n        if (cursor != 0) {\n            part = string(\n                abi.encodePacked(part, getChunk(cursor, buffer, isRainbow))\n            );\n        }\n\n        rects = string(abi.encodePacked(rects, part));\n\n        return rects;\n    }\n\n    /**\n     * Given an x-coordinate, Pixel length, and right bound, return the Pixel\n     * length for a single SVG rectangle.\n     */\n    function getRectLength(\n        uint256 currentX,\n        uint8 drawLength,\n        uint8 maxX\n    ) private pure returns (uint8) {\n        uint8 remainingPixelsInLine = maxX - uint8(currentX);\n        return\n            drawLength <= remainingPixelsInLine\n                ? drawLength\n                : remainingPixelsInLine;\n    }\n\n    /**\n     * Get the target hex color code from the cache. Populate the cache if\n     * the color code does not yet exist.\n     */\n    function getColorFromPalette(\n        bytes memory palette,\n        uint256 index,\n        string[] memory cache\n    ) private pure returns (string memory) {\n        if (bytes(cache[index]).length == 0) {\n            uint256 i = index * 3;\n            cache[index] = Utility._toHexString(\n                abi.encodePacked(palette[i], palette[i + 1], palette[i + 2])\n            );\n        }\n        return cache[index];\n    }\n\n    /**\n     * Builds up to 4 rects given a buffer (array of strings, each contiguous group of 4 strings belonging to a\n     * single rect.\n     */\n    function getChunk(\n        uint256 cursor,\n        string[16] memory buffer,\n        bool isRainbow\n    ) private pure returns (string memory) {\n        string memory chunk;\n\n        for (uint256 i = 0; i < cursor; i += 4) {\n            bool isRectBlackColor = (keccak256(\n                abi.encodePacked((buffer[i + 3]))\n            ) == keccak256(abi.encodePacked((\"000001\"))));\n            chunk = string(\n                abi.encodePacked(\n                    chunk,\n                    '<rect width=\"',\n                    buffer[i],\n                    '\" height=\"1\" x=\"',\n                    buffer[i + 1],\n                    '\" y=\"',\n                    buffer[i + 2],\n                    isRainbow && !isRectBlackColor ? \"\" : '\" fill=\"#',\n                    isRainbow && !isRectBlackColor ? \"\" : buffer[i + 3],\n                    '\"/>'\n                )\n            );\n        }\n        return chunk;\n    }\n\n    /**\n     * Given an index (derived from the Citizen's \"background\" trait), returns the html-styled background string,\n     * which will be inserted into the svg. If the Citizen is legendary, the background will be black & white.\n     */\n    function getBackgroundStyleFromDnaIndex(uint256 index, bool isLegendary)\n        private\n        view\n        returns (string memory)\n    {\n        if (isLegendary)\n            return \"background: radial-gradient(white 0%, black 120%);\";\n        else if (index > 5)\n            return\n                string.concat(\n                    \"background: linear-gradient(to bottom right, \",\n                    \"#\",\n                    backgrounds[index % 6],\n                    \", #\",\n                    backgrounds[(index + 1) % 6],\n                    \", #\",\n                    backgrounds[(index + 2) % 6],\n                    \", #\",\n                    backgrounds[(index + 3) % 6],\n                    \");\"\n                );\n        else\n            return\n                string.concat(\n                    \"background: radial-gradient(antiquewhite 0%, #\",\n                    backgrounds[index],\n                    \" 60%);\"\n                );\n    }\n\n    /**\n     * Given a legendary trait value (1-8), decodes the bytes at that index of the legendaryAnimations array and returns\n     * the SVG <linearGradient> and <animate> tags.\n     */\n    function parseLegendaryAnimations(uint256 legendaryTraitValue)\n        private\n        view\n        returns (string memory)\n    {\n        if (legendaryTraitValue == 8) {\n            return\n                string.concat(\n                    '<linearGradient id=\"8\">',\n                    _SVG_RAINBOW_ANIMATION_DEF_IF_RAINBOW,\n                    \"</linearGradient>\"\n                );\n        } else {\n            uint256 offset = 7;\n            uint256 index = (legendaryTraitValue - 1) * offset;\n\n            string memory color1 = string.concat(\n                Utility._toHexString(\n                    abi.encodePacked(\n                        legendaryAnimations[index + 1],\n                        legendaryAnimations[index + 2],\n                        legendaryAnimations[index + 3]\n                    )\n                )\n            );\n            string memory color2 = string.concat(\n                Utility._toHexString(\n                    abi.encodePacked(\n                        legendaryAnimations[index + 4],\n                        legendaryAnimations[index + 5],\n                        legendaryAnimations[index + 6]\n                    )\n                )\n            );\n\n            return\n                string.concat(\n                    '<linearGradient id=\"',\n                    lookup[uint8(legendaryAnimations[index])],\n                    '\"><stop offset=\"0%\" stop-color=\"#',\n                    color1,\n                    '\" stop-opacity=\"1\"></stop><stop offset=\"50%\" stop-color=\"#',\n                    color2,\n                    '\" stop-opacity=\"1\"><animate attributeName=\"offset\" values=\".20;.40;.60;.80;.90;.80;.60;.40;.20;\" dur=\"10s\" repeatCount=\"indefinite\"></animate></stop><stop offset=\"100%\" stop-color=\"#',\n                    color1,\n                    '\" stop-opacity=\"1\"></stop></linearGradient>'\n                );\n        }\n    }\n\n    /**\n     * Decodes the legendaryPixels array and returns the SVG <rect> tags to render a legendary Citizen.\n     */\n    function parseLegendaryRects(bytes memory _legendaryRects)\n        private\n        view\n        returns (string memory)\n    {\n        string memory rects;\n        for (uint256 i = 0; i < _legendaryRects.length; i += 5) {\n            rects = string(\n                abi.encodePacked(\n                    rects,\n                    string.concat(\n                        '<rect x=\"',\n                        lookup[uint8(_legendaryRects[i])],\n                        '\" y=\"',\n                        lookup[uint8(_legendaryRects[i + 1])],\n                        '\" width=\"',\n                        lookup[uint8(_legendaryRects[i + 2])],\n                        '\" height=\"',\n                        lookup[uint8(_legendaryRects[i + 3])],\n                        uint8(_legendaryRects[i + 4]) == 0\n                            ? '\"/>'\n                            : '\" fill=\"#000001\"/>'\n                    )\n                )\n            );\n        }\n        return rects;\n    }\n\n    /*\n     ______         __                __                         ██████       \n    /      \\       |  \\              |  \\                      ██      ██   \n   |  000000\\  ____| 00 ______ ____   \\00 _______              ██      ██ \n   | 00__| 00 /      00|      \\    \\ |  \\|       \\           ██████████████ \n   | 00    00|  0000000| 000000\\0000\\| 00| 0000000\\        ██              ██\n   | 00000000| 00  | 00| 00 | 00 | 00| 00| 00  | 00        ██      ██      ██\n   | 00  | 00| 00__| 00| 00 | 00 | 00| 00| 00  | 00        ██      ██      ██\n   | 00  | 00 \\00    00| 00 | 00 | 00| 00| 00  | 00        ██              ██  \n    \\00   \\00  \\0000000 \\00  \\00  \\00 \\00 \\00   \\00          ██████████████  \n    \n    */\n\n    /**\n     * Responsible for loading all of the data required to generate Citizens on-chain.\n\n     * To be used by the owner of the contract upon deployment.\n\n     * This function can only be called once to ensure immutability of the image data and your Citizen.\n     */\n    function loadCompressedData(\n        bytes[][] calldata _inputTraits,\n        bytes20[][] calldata _traitMetadata,\n        string[6] calldata _backgrounds,\n        bytes calldata _legendaryAnimations,\n        bytes calldata _legendaryRects,\n        bytes calldata _colorHexList,\n        string[33] calldata _lookup,\n        uint256 _MAX_SUPPLY\n    ) external onlyOwner {\n        require(!compressedDataLoaded, \"Loaded\");\n        compressedDataLoaded = true;\n        compressedTraitImages = _inputTraits;\n        compressedTraitMetadata = _traitMetadata;\n        backgrounds = _backgrounds;\n        legendaryAnimations = _legendaryAnimations;\n        legendaryPixels = _legendaryRects;\n        hexColorPalette = _colorHexList;\n        lookup = _lookup;\n        MAX_SUPPLY = _MAX_SUPPLY;\n    }\n\n    /**\n     * The owner (0xMongoon) is allowed to mint up to 30 custom Citizens.\n     * These will be reserved for giveaways || community ideas || memes.\n     */\n    function ownerMint(uint256[] calldata customSeeds) external onlyOwner {\n        uint256 quantity = customSeeds.length;\n        uint256 totalminted = _totalMinted();\n\n        unchecked {\n            if (tokensMintedByOwner + quantity > MAX_MINT_OWNER)\n                revert TooMany();\n            _safeMint(msg.sender, quantity);\n\n            for (uint256 i; i < quantity; ++i) {\n                tokenIdToSeed[totalminted + i] = customSeeds[i];\n            }\n            tokensMintedByOwner += quantity;\n        }\n    }\n\n    function flipMintStatus() external onlyOwner {\n        mintLive = !mintLive;\n    }\n\n    function cutSupply(uint256 _newSupply) external onlyOwner {\n        if (_newSupply >= MAX_SUPPLY) revert DownOnly();\n        if (_newSupply < _totalMinted()) revert BiggerSupplyPls();\n        MAX_SUPPLY = _newSupply;\n    }\n\n    function withdrawAll() public payable onlyOwner {\n        uint256 eighty = (address(this).balance / 100) * 80;\n        uint256 ten = (address(this).balance / 100) * 10;\n\n        (bool sentM, ) = payable(\n            address(0x5B5b71687e7cb013aE35ac9928DbD5393Ea36C63)\n        ).call{value: eighty}(\"\");\n        require(sentM, \"Failed to send\");\n\n        (bool sentI, ) = payable(\n            address(0x4533d1F65906368ebfd61259dAee561DF3f3559D)\n        ).call{value: ten}(\"\");\n        require(sentI, \"Failed to send\");\n\n        (bool sentT, ) = payable(\n            address(0xE4260Df86f5261A41D19c2066f1Eb2Eb4F009e84)\n        ).call{value: ten}(\"\");\n        require(sentT, \"Failed to send\");\n    }\n}\n"
    },
    "contracts/Utility.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary Utility {\n    /*                         \n                                                                         ▒▒▒▒ \n                                                                       ▒▒░░░░▒▒\n    __    __    __      __  __  __    __                             ▒▒░░░░░░░░▒▒                   \n    |  \\  |  \\  |  \\    |  \\|  \\|  \\  |  \\                         ▒▒░░░░▒▒░░░░░░▒▒                     \n    | 00  | 00 _| 00_    \\00| 00 \\00 _| 00_    __    __              ▒▒░░░░▒▒░░░░░░▒▒                 \n    | 00  | 00|   00 \\  |  \\| 00|  \\|   00 \\  |  \\  |  \\               ▒▒░░░░▒▒▒▒░░░░▒▒                 \n    | 00  | 00 \\000000  | 00| 00| 00 \\000000  | 00  | 00                 ▒▒░░▒▒▒▒░░░░░░▒▒               \n    | 00  | 00  | 00 __ | 00| 00| 00  | 00 __ | 00  | 00                 ██▒▒░░░░▒▒░░░░░░▒▒            \n    | 00__/ 00  | 00|  \\| 00| 00| 00  | 00|  \\| 00__/ 00               ██▓▓██░░░░░░▒▒░░░░▒▒                 \n     \\00    00   \\00  00| 00| 00| 00   \\00  00 \\00    00             ██▓▓██  ▒▒░░░░░░▒▒░░▒▒                      \n      \\000000     \\0000  \\00 \\00 \\00    \\0000  _\\0000000           ██▓▓██      ▒▒░░░░░░▒▒                      \n                                              |  \\__| 00         ██▓▓██          ▒▒▒▒▒▒                        \n                                               \\00    00       ██▓▓██                        \n                                                \\000000      ██▓▓██                                                               \n     ________                                 __      __     ██▓██                              \n    |        \\                               |  \\    |  \\                             \n    | 00000000__    __  _______    _______  _| 00_    \\00  ______   _______    _______ \n    | 00__   |  \\  |  \\|       \\  /       \\|   00 \\  |  \\ /      \\ |       \\  /       \\\n    | 00  \\  | 00  | 00| 0000000\\|  0000000 \\000000  | 00|  000000\\| 0000000\\|  0000000\n    | 00000  | 00  | 00| 00  | 00| 00        | 00 __ | 00| 00  | 00| 00  | 00 \\00    \\ \n    | 00     | 00__/ 00| 00  | 00| 00_____   | 00|  \\| 00| 00__/ 00| 00  | 00 _\\000000\\\n    | 00      \\00    00| 00  | 00 \\00     \\   \\00  00| 00 \\00    00| 00  | 00|       00\n     \\00       \\000000  \\00   \\00  \\0000000    \\0000  \\00  \\000000  \\00   \\00 \\0000000 \n                                                                                   \n    */\n\n    bytes16 private constant HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * Converts a bytes object to a 6 character ASCII `string` hexadecimal representation.\n     */\n    function _toHexString(bytes memory incomingBytes)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint24 value = uint24(bytes3(incomingBytes));\n\n        bytes memory buffer = new bytes(6);\n        buffer[5] = HEX_SYMBOLS[value & 0xf];\n        buffer[4] = HEX_SYMBOLS[(value >> 4) & 0xf];\n        buffer[3] = HEX_SYMBOLS[(value >> 8) & 0xf];\n        buffer[2] = HEX_SYMBOLS[(value >> 12) & 0xf];\n        buffer[1] = HEX_SYMBOLS[(value >> 16) & 0xf];\n        buffer[0] = HEX_SYMBOLS[(value >> 20) & 0xf];\n        return string(buffer);\n    }\n\n    /**\n     * Converts a bytes20 object into a string.\n     */\n    function bytes20ToString(bytes20 _bytes20)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint8 i = 0;\n        while (i < 20 && _bytes20[i] != 0) {\n            ++i;\n        }\n        bytes memory bytesArray = new bytes(i);\n        for (i = 0; i < 20 && _bytes20[i] != 0; ++i) {\n            bytesArray[i] = _bytes20[i];\n        }\n        return string(bytesArray);\n    }\n}"
    },
    "contracts/AnonymiceLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nlibrary AnonymiceLibrary {\n    string internal constant TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                dataPtr := add(dataPtr, 3)\n\n                // read 3 bytes\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore(\n                    resultPtr,\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\n                )\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function parseInt(string memory _a)\n        internal\n        pure\n        returns (uint8 _parsedInt)\n    {\n        bytes memory bresult = bytes(_a);\n        uint8 mint = 0;\n        for (uint8 i = 0; i < bresult.length; i++) {\n            if (\n                (uint8(uint8(bresult[i])) >= 48) &&\n                (uint8(uint8(bresult[i])) <= 57)\n            ) {\n                mint *= 10;\n                mint += uint8(bresult[i]) - 48;\n            }\n        }\n        return mint;\n    }\n\n    function substring(\n        string memory str,\n        uint256 startIndex,\n        uint256 endIndex\n    ) internal pure returns (string memory) {\n        bytes memory strBytes = bytes(str);\n        bytes memory result = new bytes(endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            result[i - startIndex] = strBytes[i];\n        }\n        return string(result);\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n        }\n\n        return result;\n    }\n\n    \n}\n"
    },
    "contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(\n        uint256 indexed fromTokenId,\n        uint256 toTokenId,\n        address indexed from,\n        address indexed to\n    );\n}\n"
    },
    "contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport \"./IERC721A.sol\";\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Reference type for token approval.\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) &\n            _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return\n            (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) &\n            _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed =\n            (packed & _BITMASK_AUX_COMPLEMENT) |\n            (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length != 0\n                ? string(abi.encodePacked(baseURI, _toString(tokenId)))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (TokenOwnership memory)\n    {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index)\n        internal\n        view\n        virtual\n        returns (TokenOwnership memory)\n    {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed)\n        private\n        pure\n        returns (TokenOwnership memory ownership)\n    {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags)\n        private\n        view\n        returns (uint256 result)\n    {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(\n                owner,\n                or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags)\n            )\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity)\n        private\n        pure\n        returns (uint256 result)\n    {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from)\n            revert TransferFromIncorrectOwner();\n\n        (\n            uint256 approvedAddressSlot,\n            address approvedAddress\n        ) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (\n            !_isSenderApprovedOrOwner(\n                approvedAddress,\n                from,\n                _msgSenderERC721A()\n            )\n        )\n            if (!isApprovedForAll(from, _msgSenderERC721A()))\n                revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED |\n                    _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n            ERC721A__IERC721Receiver(to).onERC721Received(\n                _msgSenderERC721A(),\n                from,\n                tokenId,\n                _data\n            )\n        returns (bytes4 retval) {\n            return\n                retval ==\n                ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] +=\n                quantity *\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) |\n                    _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT)\n            revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] +=\n                quantity *\n                ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) |\n                    _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(\n                startTokenId,\n                startTokenId + quantity - 1,\n                address(0),\n                to\n            );\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMintImp(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (\n                        !_checkContractOnERC721Received(\n                            address(0),\n                            to,\n                            index++,\n                            _data\n                        )\n                    ) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMintImp(to, quantity, \"\");\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (\n            uint256 approvedAddressSlot,\n            address approvedAddress\n        ) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (\n                !_isSenderApprovedOrOwner(\n                    approvedAddress,\n                    from,\n                    _msgSenderERC721A()\n                )\n            )\n                if (!isApprovedForAll(from, _msgSenderERC721A()))\n                    revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) |\n                    _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed =\n            (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) |\n            (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value)\n        internal\n        pure\n        virtual\n        returns (string memory str)\n    {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\n            str := add(mload(0x40), 0x80)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, str)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  }
}}