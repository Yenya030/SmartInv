{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/libraries/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nlibrary Common {\n    /**\n     * @param identifier  bytes32  Identifier of the distribution\n     * @param token       address  Address of the token to distribute\n     * @param merkleRoot  bytes32  Merkle root of the distribution\n     * @param proof       bytes32  Proof of the distribution\n     */\n    struct Distribution {\n        bytes32 identifier;\n        address token;\n        bytes32 merkleRoot;\n        bytes32 proof;\n    }\n\n    /**\n     * @param proposal          bytes32  Proposal to bribe\n     * @param token             address  Token to bribe with\n     * @param briber            address  Address of the briber\n     * @param amount            uint256  Amount of tokens to bribe with\n     * @param maxTokensPerVote  uint256  Maximum amount of tokens to use per vote\n     * @param periods           uint256  Number of periods to bribe for\n     * @param periodDuration    uint256  Duration of each period\n     * @param proposalDeadline  uint256  Deadline for the proposal\n     * @param permitDeadline    uint256  Deadline for the permit2 signature\n     * @param signature         bytes    Permit2 signature\n     */\n    struct DepositBribeParams {\n        bytes32 proposal;\n        address token;\n        address briber;\n        uint256 amount;\n        uint256 maxTokensPerVote;\n        uint256 periods;\n        uint256 periodDuration;\n        uint256 proposalDeadline;\n        uint256 permitDeadline;\n        bytes signature;\n    }\n\n    /**\n     * @param rwIdentifier      bytes32    Identifier for claiming reward\n     * @param fromToken         address    Address of token to swap from\n     * @param toToken           address    Address of token to swap to\n     * @param fromAmount        uint256    Amount of fromToken to swap\n     * @param toAmount          uint256    Amount of toToken to receive\n     * @param deadline          uint256    Timestamp until which swap may be fulfilled\n     * @param callees           address[]  Array of addresses to call (DEX addresses)\n     * @param callLengths       uint256[]  Index of the beginning of each call in exchangeData\n     * @param values            uint256[]  Array of encoded values for each call in exchangeData\n     * @param exchangeData      bytes      Calldata to execute on callees\n     * @param rwMerkleProof     bytes32[]  Merkle proof for the reward claim\n     */\n    struct ClaimAndSwapData {\n        bytes32 rwIdentifier;\n        address fromToken;\n        address toToken;\n        uint256 fromAmount;\n        uint256 toAmount;\n        uint256 deadline;\n        address[] callees;\n        uint256[] callLengths;\n        uint256[] values;\n        bytes exchangeData;\n        bytes32[] rwMerkleProof;\n    }\n\n    /**\n     * @param identifier   bytes32    Identifier for claiming reward\n     * @param account      address    Address of the account to claim for\n     * @param amount       uint256    Amount of tokens to claim\n     * @param merkleProof  bytes32[]  Merkle proof for the reward claim\n     */\n    struct Claim {\n        bytes32 identifier;\n        address account;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nlibrary Errors {\n    /**\n     * @notice max period 0 or greater than MAX_PERIODS\n     */\n    error InvalidMaxPeriod();\n\n    /**\n     * @notice period duration 0 or greater than MAX_PERIOD_DURATION\n     */\n    error InvalidPeriodDuration();\n\n    /**\n     * @notice address provided is not a contract\n     */\n    error NotAContract();\n\n    /**\n     * @notice not authorized\n     */\n    error NotAuthorized();\n\n    /**\n     * @notice contract already initialized\n     */\n    error AlreadyInitialized();\n\n    /**\n     * @notice address(0)\n     */\n    error InvalidAddress();\n\n    /**\n     * @notice empty bytes identifier\n     */\n    error InvalidIdentifier();\n\n    /**\n     * @notice invalid protocol name\n     */\n    error InvalidProtocol();\n\n    /**\n     * @notice invalid number of choices\n     */\n    error InvalidChoiceCount();\n\n    /**\n     * @notice invalid input amount\n     */\n    error InvalidAmount();\n\n    /**\n     * @notice not team member\n     */\n    error NotTeamMember();\n\n    /**\n     * @notice cannot whitelist BRIBE_VAULT\n     */\n    error NoWhitelistBribeVault();\n\n    /**\n     * @notice token already whitelisted\n     */\n    error TokenWhitelisted();\n\n    /**\n     * @notice token not whitelisted\n     */\n    error TokenNotWhitelisted();\n\n    /**\n     * @notice voter already blacklisted\n     */\n    error VoterBlacklisted();\n\n    /**\n     * @notice voter not blacklisted\n     */\n    error VoterNotBlacklisted();\n\n    /**\n     * @notice deadline has passed\n     */\n    error DeadlinePassed();\n\n    /**\n     * @notice invalid period\n     */\n    error InvalidPeriod();\n\n    /**\n     * @notice invalid deadline\n     */\n    error InvalidDeadline();\n\n    /**\n     * @notice invalid max fee\n     */\n    error InvalidMaxFee();\n\n    /**\n     * @notice invalid fee\n     */\n    error InvalidFee();\n\n    /**\n     * @notice invalid fee recipient\n     */\n    error InvalidFeeRecipient();\n\n    /**\n     * @notice invalid distributor\n     */\n    error InvalidDistributor();\n\n    /**\n     * @notice invalid briber\n     */\n    error InvalidBriber();\n\n    /**\n     * @notice address does not have DEPOSITOR_ROLE\n     */\n    error NotDepositor();\n\n    /**\n     * @notice no array given\n     */\n    error InvalidArray();\n\n    /**\n     * @notice invalid reward identifier\n     */\n    error InvalidRewardIdentifier();\n\n    /**\n     * @notice bribe has already been transferred\n     */\n    error BribeAlreadyTransferred();\n\n    /**\n     * @notice distribution does not exist\n     */\n    error InvalidDistribution();\n\n    /**\n     * @notice invalid merkle root\n     */\n    error InvalidMerkleRoot();\n\n    /**\n     * @notice token is address(0)\n     */\n    error InvalidToken();\n\n    /**\n     * @notice claim does not exist\n     */\n    error InvalidClaim();\n\n    /**\n     * @notice reward is not yet active for claiming\n     */\n    error RewardInactive();\n\n    /**\n     * @notice timer duration is invalid\n     */\n    error InvalidTimerDuration();\n\n    /**\n     * @notice merkle proof is invalid\n     */\n    error InvalidProof();\n\n    /**\n     * @notice ETH transfer failed\n     */\n    error ETHTransferFailed();\n\n    /**\n     * @notice Invalid operator address\n     */\n    error InvalidOperator();\n\n    /**\n     * @notice call to TokenTransferProxy contract\n     */\n    error TokenTransferProxyCall();\n\n    /**\n     * @notice calling TransferFrom\n     */\n    error TransferFromCall();\n\n    /**\n     * @notice external call failed\n     */\n    error ExternalCallFailure();\n\n    /**\n     * @notice returned tokens too few\n     */\n    error InsufficientReturn();\n\n    /**\n     * @notice swapDeadline expired\n     */\n    error DeadlineBreach();\n\n    /**\n     * @notice expected tokens returned are 0\n     */\n    error ZeroExpectedReturns();\n\n    /**\n     * @notice arrays in SwapData.exchangeData have wrong lengths\n     */\n    error ExchangeDataArrayMismatch();\n}\n"
    },
    "contracts/RewardHarvester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {Errors} from \"./libraries/Errors.sol\";\nimport {Common} from \"./libraries/Common.sol\";\n\ncontract RewardHarvester is Ownable2Step {\n    using SafeERC20 for IERC20;\n\n    struct Reward {\n        bytes32 merkleRoot;\n        bytes32 hashedData;\n        uint256 activeAt;\n    }\n\n    uint256 public constant FEE_BASIS = 1_000_000;\n    uint256 public constant MAX_FEE = 100_000;\n    uint256 public constant MINIMUM_ACTIVE_TIMER = 3 hours;\n\n    // Maps members\n    mapping(address => bool) public isMember;\n    // Maps fees collected for each token\n    mapping(address => uint256) public feesCollected;\n    // Maps each of the identifier to its reward metadata\n    mapping(address => Reward) public rewards;\n    // Tracks the amount of claimed reward for the specified token and account\n    mapping(address => mapping(address => uint256)) public claimed;\n    // Harvest default token\n    address public defaultToken;\n    // Operator address\n    address public operator;\n    // Claimer address\n    address public claimer;\n    // Reward swapper address\n    address public rewardSwapper;\n    // Used for calculating the timestamp on which rewards can be claimed after an update\n    uint256 public activeTimerDuration;\n\n    //-----------------------//\n    //        Events         //\n    //-----------------------//\n    event MemberJoined(address member);\n    event MemberLeft(address member);\n    event FeesCollected(address indexed token, uint256 amount);\n    event BribeTransferred(address indexed token, uint256 totalAmount);\n    event RewardClaimed(\n        address indexed token,\n        address indexed account,\n        uint256 amount,\n        uint256 postFeeAmount,\n        address receiver\n    );\n    event RewardMetadataUpdated(\n        address indexed token,\n        bytes32 merkleRoot,\n        bytes32 proof,\n        uint256 activeAt\n    );\n    event DefaultTokenUpdated(address indexed token);\n    event SetOperator(address indexed operator);\n    event SetClaimer(address indexed claimer);\n    event SetRewardSwapper(address indexed rewardSwapper);\n    event SetActiveTimerDuration(uint256 duration);\n\n    //-----------------------//\n    //       Modifiers       //\n    //-----------------------//\n    /**\n     * @notice Modifier to check caller is operator\n     */\n    modifier onlyOperatorOrOwner() {\n        if (msg.sender != operator && msg.sender != owner())\n            revert Errors.NotAuthorized();\n        _;\n    }\n\n    /**\n     * @notice Modifier to check caller is operator or reward swapper\n     */\n    modifier onlyOperatorOrRewardSwapper() {\n        if (msg.sender != operator && msg.sender != rewardSwapper)\n            revert Errors.NotAuthorized();\n        _;\n    }\n\n    //-----------------------//\n    //       Constructor     //\n    //-----------------------//\n    constructor(\n        address _rewardSwapper,\n        address _operator,\n        address _defaultToken\n    ) {\n        _setDefaultToken(_defaultToken);\n        _setOperator(_operator);\n        _setRewardSwapper(_rewardSwapper);\n        _setActiveTimerDuration(MINIMUM_ACTIVE_TIMER);\n    }\n\n    //-----------------------//\n    //   External Functions  //\n    //-----------------------//\n\n    /**\n        @notice Join the harvester to enable claiming rewards in default token\n     */\n    function join() external {\n        isMember[msg.sender] = true;\n\n        emit MemberJoined(msg.sender);\n    }\n\n    /**\n        @notice Leave harvester\n     */\n    function leave() external {\n        isMember[msg.sender] = false;\n\n        emit MemberLeft(msg.sender);\n    }\n\n    /**\n        @notice Claim rewards based on the specified metadata\n        @dev    Can only be called by the claimer contract\n        @param  _token        address    Token to claim rewards\n        @param  _account      address    Account to claim rewards\n        @param  _amount       uint256    Amount of rewards to claim\n        @param  _merkleProof  bytes32[]  Merkle proof of the claim\n        @param  _fee          uint256    Claim fee\n        @param  _receiver     address    Receiver of the rewards\n     */\n    function claim(\n        address _token,\n        address _account,\n        uint256 _amount,\n        bytes32[] calldata _merkleProof,\n        uint256 _fee,\n        address _receiver\n    ) external {\n        if (msg.sender != claimer) revert Errors.NotAuthorized();\n        if (_account == address(0)) revert Errors.InvalidClaim();\n        if (_amount == 0) revert Errors.InvalidAmount();\n        if (_fee > MAX_FEE) revert Errors.InvalidFee();\n\n        // Calculate amount after any fees\n        uint256 feeAmount = (_amount * _fee) / FEE_BASIS;\n        uint256 postFeeAmount = _amount - feeAmount;\n        feesCollected[_token] += feeAmount;\n\n        Reward memory reward = rewards[_token];\n        uint256 lifeTimeAmount = claimed[_token][_account] + _amount;\n\n        if (reward.merkleRoot == 0) revert Errors.InvalidDistribution();\n        if (reward.activeAt > block.timestamp) revert Errors.RewardInactive();\n\n        // Verify the merkle proof\n        if (\n            !MerkleProof.verifyCalldata(\n                _merkleProof,\n                reward.merkleRoot,\n                keccak256(abi.encodePacked(_account, lifeTimeAmount))\n            )\n        ) revert Errors.InvalidProof();\n\n        // Update the claimed amount to the current total\n        claimed[_token][_account] = lifeTimeAmount;\n\n        IERC20(_token).safeTransfer(_receiver, postFeeAmount);\n\n        emit RewardClaimed(_token, _account, _amount, postFeeAmount, _receiver);\n    }\n\n    /**\n        @notice Deposit `defaultToken` to this contract\n        @param  _amount  uint256  Amount of `defaultToken` to deposit\n     */\n    function depositReward(\n        uint256 _amount\n    ) external onlyOperatorOrRewardSwapper {\n        if (_amount == 0) revert Errors.InvalidAmount();\n\n        IERC20 token = IERC20(defaultToken);\n\n        uint256 initialAmount = token.balanceOf(address(this));\n\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit BribeTransferred(\n            defaultToken,\n            token.balanceOf(address(this)) - initialAmount\n        );\n    }\n\n    /**\n        @notice Update rewards metadata\n        @param  _token       address  Token to update rewards metadata\n        @param  _merkleRoot  bytes32  Merkle root of the rewards\n        @param  _hashedData  bytes32  Hashed data of the rewards\n     */\n    function updateRewardsMetadata(\n        address _token,\n        bytes32 _merkleRoot,\n        bytes32 _hashedData\n    ) external onlyOperatorOrOwner {\n        if (_token == address(0)) revert Errors.InvalidToken();\n        if (_merkleRoot == 0) revert Errors.InvalidMerkleRoot();\n\n        // Update the metadata and start the timer until the rewards will be active/claimable\n        uint256 activeAt = block.timestamp + activeTimerDuration;\n        Reward storage reward = rewards[_token];\n        reward.merkleRoot = _merkleRoot;\n        reward.hashedData = _hashedData;\n        reward.activeAt = activeAt;\n\n        emit RewardMetadataUpdated(_token, _merkleRoot, _hashedData, activeAt);\n    }\n\n    /**\n        @notice Collect fees\n        @param  _token  address  Token to collect fees\n     */\n    function collectFees(address _token) external onlyOwner {\n        uint256 amount = feesCollected[_token];\n        if (amount == 0) revert Errors.InvalidAmount();\n\n        feesCollected[_token] = 0;\n        IERC20(_token).safeTransfer(msg.sender, amount);\n\n        emit FeesCollected(_token, amount);\n    }\n\n    /**\n        @notice Change the operator\n        @param  _operator  address  New operator address\n     */\n    function changeOperator(address _operator) external onlyOwner {\n        _setOperator(_operator);\n    }\n\n    /**\n        @notice Change the `defaultToken`\n        @param  _newToken  address  New default token address\n     */\n    function changeDefaultToken(address _newToken) external onlyOwner {\n        _setDefaultToken(_newToken);\n    }\n\n    /**\n        @notice Change the RewardSwapper contract\n        @param  _newSwapper  address  New reward swapper address\n     */\n    function changeRewardSwapper(address _newSwapper) external onlyOwner {\n        _setRewardSwapper(_newSwapper);\n    }\n\n    /**\n        @notice Change claimer address\n        @param  _claimer  address  New claimer address\n     */\n    function changeClaimer(address _claimer) external onlyOwner {\n        if (_claimer == address(0)) revert Errors.InvalidAddress();\n\n        claimer = _claimer;\n\n        emit SetClaimer(_claimer);\n    }\n\n    /**\n        @notice Set the active timer duration\n        @param  _duration  uint256  Timer duration\n    */\n    function changeActiveTimerDuration(uint256 _duration) external onlyOwner {\n        _setActiveTimerDuration(_duration);\n    }\n\n    //-----------------------//\n    //   Internal Functions  //\n    //-----------------------//\n    /**\n        @dev    Internal to set the default token\n        @param  _newToken  address  Token address\n     */\n    function _setDefaultToken(address _newToken) internal {\n        if (_newToken == address(0)) revert Errors.InvalidToken();\n\n        defaultToken = _newToken;\n\n        emit DefaultTokenUpdated(_newToken);\n    }\n\n    /**\n        @dev    Internal to set the RewardSwapper contract\n        @param  _newSwapper  address  RewardSwapper address\n     */\n    function _setRewardSwapper(address _newSwapper) internal {\n        if (_newSwapper == address(0)) revert Errors.InvalidAddress();\n\n        rewardSwapper = _newSwapper;\n\n        emit SetRewardSwapper(_newSwapper);\n    }\n\n    /**\n        @dev    Internal to set the operator\n        @param  _operator  address  Token address\n     */\n    function _setOperator(address _operator) internal {\n        if (_operator == address(0)) revert Errors.InvalidOperator();\n\n        operator = _operator;\n\n        emit SetOperator(_operator);\n    }\n\n    /**\n        @dev    Internal to set the active timer duration\n        @param  _duration  uint256  Timer duration\n     */\n    function _setActiveTimerDuration(uint256 _duration) internal {\n        if (_duration < MINIMUM_ACTIVE_TIMER)\n            revert Errors.InvalidTimerDuration();\n\n        activeTimerDuration = _duration;\n\n        emit SetActiveTimerDuration(_duration);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yulDetails": {
          "optimizerSteps": "u"
        }
      }
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}