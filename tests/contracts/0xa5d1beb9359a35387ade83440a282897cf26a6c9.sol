{{
  "language": "Solidity",
  "sources": {
    "contracts/MetaTriadsStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport { MerkleProof } from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\nabstract contract ITria is IERC20 {\r\n    function mintRewardForUser(address user, uint256 amount) external {}\r\n}\r\n\r\ncontract MetaTriadsStaking is Ownable {\r\n\r\n    IERC721 public metatriads;\r\n    ITria public tria;\r\n\r\n    struct userStakeData {\r\n        uint64 lastActionTimeStamp;\r\n        uint64 stakedAmount;\r\n        uint128 pendingClaim;\r\n    }\r\n    \r\n    mapping(uint256 => address) public traidToOwner;\r\n    mapping(address => userStakeData) public userToStakeData;\r\n    mapping(address => uint256) public userToTotalEarned;\r\n\r\n    uint256 public dailyStakingReward = 9 ether;\r\n    uint256 public timePeriod = 1 days;\r\n\r\n    bytes32 public bonusMerkleRoot = \"\";\r\n    mapping(address => uint256) public addressToNonce;\r\n\r\n    event Stake(address indexed staker, uint256 indexed triad);\r\n    event Unstake(address indexed staker, uint256 indexed triad);\r\n    event Claim(address indexed claimer, uint256 indexed amount);\r\n\r\n    constructor(\r\n        address _metatriads,\r\n        address _tria\r\n    ) {\r\n        metatriads = IERC721(_metatriads);\r\n        tria = ITria(_tria);\r\n    }\r\n\r\n    function _getRewardFromPeriod(uint256 timestamp, uint256 stakedAmount) internal view returns (uint256) {\r\n        return (block.timestamp - timestamp) * stakedAmount * dailyStakingReward / timePeriod;\r\n    }\r\n\r\n    function stake(uint256 metatriad) external {        \r\n        require(traidToOwner[metatriad] == address(0), \"Metatriad already staked\");\r\n        require(metatriads.ownerOf(metatriad) == msg.sender, \"Sender does not own metatriad\");\r\n\r\n        traidToOwner[metatriad] = msg.sender;\r\n\r\n        userStakeData storage stakeData = userToStakeData[msg.sender];\r\n        stakeData.pendingClaim += uint128(_getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount));\r\n        stakeData.stakedAmount += 1;\r\n        stakeData.lastActionTimeStamp = uint64(block.timestamp);\r\n\r\n        metatriads.transferFrom(msg.sender, address(this), metatriad);\r\n        emit Stake(msg.sender, metatriad);\r\n    }\r\n\r\n    function unstake(uint256 metatriad) external {        \r\n        require(traidToOwner[metatriad] == msg.sender, \"Sender does not own metatriad\");\r\n        require(metatriads.ownerOf(metatriad) == address(this), \"Metatriad not staked\");\r\n\r\n        delete traidToOwner[metatriad];\r\n\r\n        userStakeData storage stakeData = userToStakeData[msg.sender];\r\n        stakeData.pendingClaim += uint128(_getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount));\r\n        stakeData.stakedAmount -= 1;\r\n        stakeData.lastActionTimeStamp = uint64(block.timestamp);\r\n\r\n        metatriads.transferFrom(address(this), msg.sender, metatriad);\r\n        emit Unstake(msg.sender, metatriad);\r\n    }\r\n\r\n    function stakeMany(uint256[] calldata manyMetatriads) external {\r\n        require(manyMetatriads.length > 0, \"No metatriads supplied\");\r\n\r\n        for (uint i = 0; i < manyMetatriads.length; i++) {\r\n            uint256 metatriad = manyMetatriads[i];\r\n            require(traidToOwner[metatriad] == address(0), \"Metatriad already staked\");\r\n            require(metatriads.ownerOf(metatriad) == msg.sender, \"Sender does not own metatriad\");\r\n\r\n            traidToOwner[metatriad] = msg.sender;\r\n            metatriads.transferFrom(msg.sender, address(this), metatriad);\r\n            emit Stake(msg.sender, metatriad);\r\n        }\r\n\r\n        userStakeData storage stakeData = userToStakeData[msg.sender];\r\n        stakeData.pendingClaim += uint128(_getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount));\r\n        stakeData.stakedAmount += uint64(manyMetatriads.length);\r\n        stakeData.lastActionTimeStamp = uint64(block.timestamp);       \r\n    }\r\n\r\n    function unstakeMany(uint256[] calldata manyMetatriads) external {\r\n        require(manyMetatriads.length > 0, \"No metatriads supplied\");\r\n\r\n        for (uint i = 0; i < manyMetatriads.length; i++) {\r\n            uint256 metatriad = manyMetatriads[i];\r\n            require(traidToOwner[metatriad] == msg.sender, \"Sender does not own metatriad\");\r\n            require(metatriads.ownerOf(metatriad) == address(this), \"Metatriad not staked\");\r\n\r\n            delete traidToOwner[metatriad];\r\n            metatriads.transferFrom(address(this), msg.sender, metatriad);\r\n            emit Unstake(msg.sender, metatriad);\r\n        }\r\n\r\n        userStakeData storage stakeData = userToStakeData[msg.sender];\r\n        stakeData.pendingClaim += uint128(_getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount));\r\n        stakeData.stakedAmount -= uint64(manyMetatriads.length);\r\n        stakeData.lastActionTimeStamp = uint64(block.timestamp);\r\n    }\r\n\r\n    function claimAllRewards(uint256 bonusAmount, uint256 nonce, bytes32[] memory proof) external {\r\n        userStakeData storage stakeData = userToStakeData[msg.sender];\r\n        uint256 pendingClaim = stakeData.pendingClaim + _getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount);\r\n\r\n        if (proof.length > 0) {\r\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender, bonusAmount, nonce));\r\n            if (MerkleProof.verify(proof, bonusMerkleRoot, leaf) && nonce == addressToNonce[msg.sender]) {\r\n                pendingClaim += bonusAmount;\r\n                addressToNonce[msg.sender] += 1;\r\n            }\r\n        }\r\n\r\n        stakeData.pendingClaim = 0;\r\n        stakeData.lastActionTimeStamp = uint64(block.timestamp);\r\n\r\n        userToTotalEarned[msg.sender] += pendingClaim;\r\n\r\n        tria.mintRewardForUser(msg.sender, pendingClaim);\r\n\r\n        emit Claim(msg.sender, pendingClaim);\r\n    }\r\n\r\n    function getTotalClaimableFromUser(address user, uint256 bonusAmount, uint256 nonce, bytes32[] memory proof) external view returns (uint256) {\r\n        userStakeData memory stakeData = userToStakeData[user];\r\n        uint256 pendingClaim = stakeData.pendingClaim + _getRewardFromPeriod(stakeData.lastActionTimeStamp, stakeData.stakedAmount);\r\n\r\n        if (proof.length > 0) {\r\n            bytes32 leaf = keccak256(abi.encodePacked(msg.sender, bonusAmount, nonce));\r\n            if (MerkleProof.verify(proof, bonusMerkleRoot, leaf) && nonce == addressToNonce[msg.sender]) {\r\n                pendingClaim += bonusAmount;\r\n            }\r\n        }\r\n\r\n        return pendingClaim;\r\n    }\r\n\r\n    function getStakedTraidsOfUser(address user) external view returns (uint256[] memory) {\r\n        userStakeData memory stakeData = userToStakeData[user];\r\n        uint256 amountStaked = stakeData.stakedAmount;\r\n\r\n        uint256[] memory ownedMetaTriads = new uint256[](amountStaked);\r\n        uint256 counter;\r\n\r\n        for (uint i = 0; i <= 2560; i++) {\r\n            address metatriadOwner = traidToOwner[i];\r\n\r\n            if (metatriadOwner == user) {\r\n                ownedMetaTriads[counter] = i;\r\n                counter++;\r\n            }        \r\n        }\r\n        return ownedMetaTriads;\r\n    }\r\n\r\n    function setContracts(address _metatriads, address _tria) external onlyOwner {\r\n        metatriads = IERC721(_metatriads);\r\n        tria = ITria(_tria);\r\n    }\r\n\r\n    function setMerkleRoot(bytes32 root) external onlyOwner {\r\n        bonusMerkleRoot = root;\r\n    }\r\n\r\n    function setDailyStakingReward(uint256 _dailyStakingReward) external onlyOwner {\r\n        dailyStakingReward = _dailyStakingReward;\r\n    }\r\n\r\n    function setTimePeriod(uint256 newPeriod) external onlyOwner {\r\n        timePeriod = newPeriod;\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external onlyOwner {\r\n        metatriads.setApprovalForAll(operator, _approved);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}