{{
  "language": "Solidity",
  "sources": {
    "contracts/ArchOfPeace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./MonuverseEpisode.sol\";\nimport \"erc721psi/contracts/extension/ERC721PsiBurnable.sol\";\nimport \"./ArchOfPeaceEntropy.sol\";\nimport \"./ArchOfPeaceWhitelist.sol\";\nimport \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\n\nimport \"fpe-map/contracts/FPEMap.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n                                /*░└╬┘░*\\\n             ░      ░█░┘────════════╩════════────└╩┘──\n                ▒  ▒█ ████████████████████████████████\n              ▒█  ═════════════╗░░▒▒▒▒▒░░╔═════════════\n            ▒   ▒ █▒▒▒░░░░▒▒▒░░╚═════════╝░░▒▒▒░░░░░░▒\n             ░ █▒  █ ███████████░░░▒▒▒░░░█████████████\n                █  ░╦░     ╦╦╦ ╚█████████╝ ╦╦╦     ╦╦╦\n                   │▒│░░▒▒▒│█│░▒▒▒░░ ░░▒▒▒░│█│▒▒▒░░│█│\n                 ▒ │█│─────│█│─═▒░╔═╩═╗░▒══│█│═════│█│═\n                   │█│░▒▒░░│█│▒░┌┘'   '╚╗░▒│█│░░▒▒░│█│\n                   │▒│▒▒░ ░│█│░┌┘ \\┌┴┐/ ╚╗░│█│░ ░▒▒│█│\n                     │▒░┌┴░│█│░│  ┘   └┐ ║░│█│╔╩╗░▒│█│\n                   │▒│▒┌┘\\ │█│░│       └┐║░│█│╝/╚╗▒│█│\n                 █ │█│▒│┌┘ │█│ │        │║▒│█│ └┐║▒│█│\n              █ ▒  ╩╩╩▒││  ╩╩╩░│    ░   │║▒╩╩╩  │║▒╩╩╩\n             ░  █ ▒███▒││ ████▒│   ░░░  │║▒████ │║▒████\n           ░  ▒█ ▒██▒█▒││ ████▒│  ░░░░░ │║▒████ │║▒████\n     __  __  ___ ▒█▒▒█▒││ ██▒░▒│ ░░░▒░░░│║▒████_│║▒████_____________________\n    |  \\/  |/ _ \\█ \\░▒ |│ ▒█ |\\ \\░░▒▒▒░░/ /__  ____/__  __ \\_  ___/__  ____/\n    | |\\/| | | | |  \\▒ |│ ░▒ | \\ ░▒▒▒▒▒░ /__  __/  __  /_/ /____ \\__  __/\n    | |  | | |_| | |\\  | \\_░ |  \\ ▒▒█▒▒ /__  /___  _  _, _/____/ /_  /___\n    |_|  |_|\\___/|_| \\_|\\___/    \\ ███ /  /_____/  /_/ |_| /____/ /_____/\n                                  \\ █ /\n        creativity by Ouchhh       \\*/\n\n/**\n * @title Monuverse Episode 1 ─ Arch Of Peace\n * @author Maxim Gaina\n *\n * @notice ArchOfPeace Collection Contract with\n * @notice On-chain programmable lifecycle and, regardless of collection size,\n * @notice O(1) fully decentralized and unpredictable reveal.\n *\n * @dev ArchOfPeace Collection is a Monuverse Episode;\n * @dev an Episode has a lifecycle that is composed of Chapters;\n * @dev each Chapter selectively enables contract features and emits Monumental Events;\n * @dev each Monumental Event can make the Episode transition into a new Chapter;\n * @dev each transition follows the onchain programmable story branching;\n * @dev episode branching is a configurable Deterministic Finite Automata.\n */\ncontract ArchOfPeace is\n    MonuverseEpisode,\n    ArchOfPeaceEntropy,\n    ArchOfPeaceWhitelist,\n    ERC721PsiBurnable,\n    PaymentSplitter\n{\n    using FPEMap for uint256;\n    using Strings for uint256;\n\n    uint256 private _maxSupply;\n\n    string private _archVeilURI;\n    string private _archBaseURI;\n\n    mapping(address => uint256) _mintCounter;\n\n    constructor(\n        uint256 maxSupply_,\n        string memory name_,\n        string memory symbol_,\n        string memory archVeilURI_,\n        string memory archBaseURI_,\n        string memory initialChapter_,\n        address vrfCoordinator_,\n        bytes32 vrfGasLane_,\n        uint64 vrfSubscriptionId_,\n        address[] memory payee_,\n        uint256[] memory shares_\n    )\n        MonuverseEpisode(initialChapter_)\n        ArchOfPeaceEntropy(vrfCoordinator_, vrfGasLane_, vrfSubscriptionId_)\n        ERC721Psi(name_, symbol_)\n        PaymentSplitter(payee_, shares_)\n    {\n        _maxSupply = maxSupply_;\n        _archVeilURI = archVeilURI_;\n        _archBaseURI = archBaseURI_;\n    }\n\n    function setWhitelistRoot(bytes32 newWhitelistRoot)\n        public\n        override\n        onlyWhitelistingChapter\n        onlyOwner\n    {\n        super.setWhitelistRoot(newWhitelistRoot);\n    }\n\n    function mint(\n        uint256 quantity,\n        uint256 limit,\n        bytes32 group,\n        bytes32[] memory proof\n    ) public payable whenNotPaused {\n        if (!_chapterAllowsOpenMint()) {\n            require(\n                isAccountWhitelisted(limit, group, proof),\n                \"ArchOfPeace: sender not whitelisted\"\n            );\n        }\n        require(entropy() == 0, \"ArchOfPeace: already revealed\");\n        require(\n            _isQuantityWhitelisted(_mintCounter[_msgSender()], quantity, limit),\n            \"ArchOfPeace: quantity not allowed\"\n        );\n        require(_chapterAllowsMint(quantity, _minted), \"ArchOfPeace: no mint chapter\");\n        require(_chapterAllowsMintGroup(group), \"ArchOfPeace: group not allowed\");\n        require(_chapterMatchesOffer(quantity, msg.value, group), \"ArchOfPeace: offer unmatched\");\n\n        _mintCounter[_msgSender()] += quantity;\n\n        _mint(_msgSender(), quantity);\n\n        if (_minted == chapterMintLimit()) {\n            _maxSupply == chapterMintLimit()\n                ? _emitMonumentalEvent(EpisodeMinted.selector)\n                : _emitMonumentalEvent(ChapterMinted.selector);\n        }\n    }\n\n    function mint(uint256 quantity) public payable {\n        mint(quantity, 3, currentChapter(), new bytes32[](0x00));\n    }\n\n    /**\n     * @notice Reveals the entire collection when call effects are successful.\n     *\n     * @dev Requests a random seed that will be fulfilled in the future;\n     * @dev seed will be used to randomly map token ids to metadata ids;\n     * @dev callable only once in the entire Episode (i.e. collection lifecycle),\n     * @dev that is, if seed is still default value and not waiting for any request;\n     * @dev callable by anyone at any moment only during Reveal Chapter.\n     */\n    function reveal() public onlyRevealChapter whenNotPaused {\n        require(entropy() == 0, \"ArchOfPeace: already revealed\");\n        require(!fulfilling(), \"ArchOfPeace: currently fulfilling\");\n\n        _requestRandomWord();\n    }\n\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\n        internal\n        override\n        onlyRevealChapter\n        emitsEpisodeRevealedEvent\n    {\n        super.fulfillRandomWords(0, randomWords);\n    }\n\n    function sealMinting() external onlyMintChapter onlyOwner {\n        require(_minted > 0, \"ArchOfPeace: no token minted\");\n\n        _emitMonumentalEvent(MintingSealed.selector);\n    }\n\n    function burn(uint256 tokenId) public {\n        require(_exists(tokenId), \"ArchOfPeace: non existent token\");\n        require(_msgSender() == ownerOf(tokenId), \"ArchOfPeace: sender not token owner\");\n\n        super._burn(tokenId);\n    }\n\n    /**\n     * @notice Obtains mapped URI for an existing token.\n     * @param tokenId existing token ID.\n     *\n     * @dev Pre-reveal all tokens are mapped to the same `_archVeilURI`;\n     * @dev post-reveal each token is unpredictably mapped to its own URI;\n     * @dev post-reveal is when VRFCoordinatorV2 has successfully fulfilled random word request;\n     * @dev more info https://mirror.xyz/ctor.xyz/ZEY5-wn-3EeHzkTUhACNJZVKc0-R6EsDwwHMr5YJEn0.\n     *\n     * @return tokenURI token URI string\n     */\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n        require(_exists(tokenId), \"ArchOfPeace: non existent token\");\n\n        return\n            entropy() == 0\n                ? _archVeilURI\n                : string(\n                    abi.encodePacked(\n                        _archBaseURI,\n                        tokenId.fpeMappingFeistelAuto(entropy(), _maxSupply).toString()\n                    )\n                );\n    }\n\n    function tokensMintedByUser(address minter) public view returns (uint256) {\n        return _mintCounter[minter];\n    }\n}\n"
    },
    "contracts/ArchOfPeaceEntropy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\ncontract ArchOfPeaceEntropy is VRFConsumerBaseV2, Ownable {\n    VRFCoordinatorV2Interface private immutable _coordinator;\n\n    struct VRFRequestParams {\n        bytes32 gasLane;\n        uint64 subscriptionId;\n        uint16 requestConfirmations;\n        uint32 callbackGasLimit;\n    }\n\n    VRFRequestParams private _vrfRequestParams;\n\n    bool private _fulfilling;\n\n    uint256 private _entropy;\n\n    event RandomnessRequested(uint256 requestId);\n\n    constructor(\n        address coordinator_,\n        bytes32 gasLane_,\n        uint64 subscriptionId_\n    ) VRFConsumerBaseV2(coordinator_) {\n        _coordinator = VRFCoordinatorV2Interface(coordinator_);\n        _vrfRequestParams = VRFRequestParams(gasLane_, subscriptionId_, 5, 300000);\n    }\n\n    /// @notice Assumes the subscription is set sufficiently funded\n    function _requestRandomWord() internal {\n        uint256 requestId = _coordinator.requestRandomWords(\n            _vrfRequestParams.gasLane,\n            _vrfRequestParams.subscriptionId,\n            _vrfRequestParams.requestConfirmations,\n            _vrfRequestParams.callbackGasLimit,\n            1\n        );\n\n        _fulfilling = true;\n\n        emit RandomnessRequested(requestId);\n    }\n\n    function fulfillRandomWords(\n        uint256, /* requestId */\n        uint256[] memory randomWords\n    ) internal virtual override {\n        _entropy = randomWords[0];\n\n        _fulfilling = false;\n    }\n\n    // TODO: cover\n    function updateVRFParams(VRFRequestParams calldata newParams) public onlyOwner {\n        _vrfRequestParams = newParams;\n    }\n\n    function fulfilling() public view returns (bool) {\n        return _fulfilling;\n    }\n\n    function entropy() public view returns (uint256) {\n        return _entropy;\n    }\n}\n"
    },
    "contracts/ArchOfPeaceWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// import \"./MonuverseEpisode.sol\";\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ArchOfPeaceWhitelist is Ownable {\n    bytes32 private _whitelistRoot;\n\n    function setWhitelistRoot(bytes32 newWhitelistRoot) public virtual onlyOwner {\n        _whitelistRoot = newWhitelistRoot;\n    }\n\n    function isAccountWhitelisted(\n        address account,\n        uint256 limit,\n        bytes32 birth,\n        bytes32[] memory proof\n    ) public view returns (bool) {\n        require(\n            owner() == _msgSender() || account == _msgSender(),\n            \"ArchOfPeaceWhitelist: account check forbidden\"\n        );\n\n        return\n            MerkleProof.verify(\n                proof,\n                _whitelistRoot,\n                _generateWhitelistLeaf(account, limit, birth)\n            );\n    }\n\n    function isAccountWhitelisted(\n        uint256 limit,\n        bytes32 birth,\n        bytes32[] memory proof\n    ) public view returns (bool) {\n        return isAccountWhitelisted(_msgSender(), limit, birth, proof);\n    }\n\n    function whitelistRoot() public view returns (bytes32) {\n        return _whitelistRoot;\n    }\n\n    function _generateWhitelistLeaf(\n        address account,\n        uint256 limit,\n        bytes32 birth\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(account, limit, birth));\n    }\n\n    function _isQuantityWhitelisted(\n        uint256 balance,\n        uint256 quantity,\n        uint256 limit\n    ) internal pure returns (bool) {\n        return balance + quantity <= limit;\n    }\n}\n"
    },
    "contracts/MonuverseEpisode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./IMonuverseEpisode.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"./DFA.sol\";\n\ncontract MonuverseEpisode is IMonuverseEpisode, Ownable, Pausable {\n    using DFA for DFA.Dfa;\n\n    /// @dev Episode Chapters\n    mapping(bytes32 => Chapter) private _chapters;\n\n    /// @dev Episode story Branching\n    DFA.Dfa private _branching;\n\n    /// @dev Current Chapter\n    bytes32 private _current;\n\n    modifier onlyInitialChapter() {\n        require(_current == _branching.initial(), \"MonuverseEpisode: updates forbidden\");\n        _;\n    }\n\n    modifier onlyWhitelistingChapter() {\n        require(_chapters[_current].whitelisting, \"MonuverseEpisode: whitelisting not allowed\");\n        _;\n    }\n\n    modifier onlyMintChapter() {\n        require(_chapters[_current].minting.limit > 0, \"MonuverseEpisode: mint not allowed\");\n        _;\n    }\n\n    modifier onlyRevealChapter() {\n        require(_chapters[_current].revealing, \"MonuverseEpisode: reveal not allowed\");\n        _;\n    }\n\n    modifier emitsEpisodeRevealedEvent() {\n        _;\n        _emitMonumentalEvent(EpisodeRevealed.selector);\n    }\n\n    constructor(string memory initial_) {\n        _current = writeChapter(initial_, false, 0, 0, false, false, false);\n        _branching.setInitial(_current);\n    }\n\n    /**\n     * @dev It's still possible to insert mint chapter after reveal chapter\n     * @dev since DFAs don't have state order guarantees: make mint function\n     * @dev check for occured reveal.\n     */\n    function writeChapter(\n        string memory label,\n        bool whitelisting,\n        uint256 mintAllocation,\n        uint256 mintPrice,\n        bool mintOpen,\n        bool revealing,\n        bool isConclusion\n    ) public onlyOwner onlyInitialChapter returns (bytes32) {\n        require(\n            /// @dev Logical conversion from `isConlusion => everything disabled`\n            !isConclusion || (!whitelisting && mintAllocation == 0 && !revealing),\n            \"MonuverseEpisode: features disabled during conclusion\"\n        );\n\n        require(\n            !(revealing && mintAllocation > 0),\n            \"MonuverseEpisode: reveal with mint forbidden\"\n        );\n\n        _chapters[_hash(label)].whitelisting = whitelisting;\n        _chapters[_hash(label)].minting.limit = mintAllocation;\n        _chapters[_hash(label)].minting.price = mintPrice;\n        _chapters[_hash(label)].minting.isOpen = mintOpen;\n        _chapters[_hash(label)].revealing = revealing;\n        _chapters[_hash(label)].exists = true;\n\n        isConclusion\n            ? _branching.addAccepting(_hash(label))\n            : _branching.removeAccepting(_hash(label));\n\n        emit ChapterWritten(\n            label,\n            whitelisting,\n            mintAllocation,\n            mintPrice,\n            mintOpen,\n            revealing,\n            isConclusion\n        );\n\n        return _hash(label);\n    }\n\n    /// @dev Chapter-related transitions should be separately removed before,\n    /// @dev MintGroupRules should be removed separately before.\n    function removeChapter(string calldata label) external onlyOwner onlyInitialChapter {\n        require(_branching.initial() != _hash(label), \"MonuverseEpisode: initial non deletable\");\n\n        delete _chapters[_hash(label)];\n\n        emit ChapterRemoved(label);\n    }\n\n    function writeMintGroup(\n        string calldata chapter,\n        string calldata group,\n        MintGroupRules calldata mintRules\n    ) external onlyOwner onlyInitialChapter {\n        require(_chapters[_hash(group)].exists, \"MonuverseEpisode: group non existent\");\n        require(\n            _chapters[_hash(chapter)].minting.limit > 0,\n            \"MonuverseEpisode: chapter mint disabled\"\n        );\n\n        _chapters[_hash(chapter)].minting.rules[_hash(group)] = mintRules;\n\n        emit MintGroupWritten(chapter, group, mintRules.fixedPrice);\n    }\n\n    function removeMintGroup(string calldata chapter, string calldata group)\n        external\n        onlyOwner\n        onlyInitialChapter\n    {\n        delete _chapters[_hash(chapter)].minting.rules[_hash(group)];\n\n        emit MintGroupRemoved(chapter, group);\n    }\n\n    function writeTransition(\n        string calldata from,\n        string calldata to,\n        string calldata monumentalEvent\n    ) external onlyOwner onlyInitialChapter {\n        require(_chapters[_hash(from)].exists, \"MonuverseEpisode: from not set\");\n        require(_chapters[_hash(to)].exists, \"MonuverseEpisode: to not set\");\n\n        _branching.addTransition(\n            _hash(from),\n            _hash(to),\n            keccak256(abi.encodePacked(monumentalEvent, \"(bytes32,bytes32)\"))\n        );\n\n        emit TransitionWritten(from, to, monumentalEvent);\n    }\n\n    function removeTransition(string calldata from, string calldata monumentalEvent)\n        external\n        onlyOwner\n        onlyInitialChapter\n    {\n        _branching.removeTransition(_hash(from), _hash(monumentalEvent));\n\n        emit TransitionRemoved(from, monumentalEvent);\n    }\n\n    function emitOnlifeEvent() public onlyOwner {\n        _emitMonumentalEvent(EpisodeProgressedOnlife.selector);\n    }\n\n    /**\n     * @dev `aux` equals `_current` when transition destination is same as origin,\n     * @dev `aux` equals `_current` also when no transition has been specified,\n     * @dev (to prevent user from seeing its tx reverted)\n     * @return aux previous state, 0x00 if no transition exists\n     * @return _current new current post-transition state\n     */\n    function _tryTransition(bytes32 symbol) private returns (bytes32, bytes32) {\n        bytes32 aux = _branching.transition(_current, symbol);\n\n        if (_current != aux && aux != 0x00) {\n            (_current, aux) = (aux, _current);\n        }\n\n        return (aux, _current);\n    }\n\n    function _emitMonumentalEvent(bytes32 selector) internal whenNotPaused {\n        (bytes32 prev, bytes32 current) = _tryTransition(selector);\n\n        if (selector == ChapterMinted.selector) {\n            emit ChapterMinted(prev, current);\n        } else if (selector == EpisodeProgressedOnlife.selector) {\n            emit EpisodeProgressedOnlife(prev, current);\n        } else if (selector == EpisodeMinted.selector) {\n            emit EpisodeMinted(prev, current);\n        } else if (selector == MintingSealed.selector) {\n            emit MintingSealed(prev, current);\n        } else if (selector == EpisodeRevealed.selector) {\n            emit EpisodeRevealed(prev, current);\n        } else {\n            revert(\"MonuverseEpisode: event non existent\");\n        }\n    }\n\n    function initialChapter() public view returns (bytes32) {\n        return _branching.initial();\n    }\n\n    function currentChapter() public view returns (bytes32) {\n        return _current;\n    }\n\n    function groupRule(string calldata label, string calldata group)\n        public\n        view\n        returns (bool, bool)\n    {\n        return (\n            _chapters[_hash(label)].minting.rules[_hash(group)].enabled,\n            _chapters[_hash(label)].minting.rules[_hash(group)].fixedPrice\n        );\n    }\n\n    function chapterMintLimit() public view returns (uint256) {\n        return _chapters[_current].minting.limit;\n    }\n\n    function currentDefaultPrice() public view returns (uint256) {\n        return _currentGroupPrice(_current);\n    }\n\n    function currentGroupPrice(string calldata group) public view returns (uint256) {\n        return _currentGroupPrice(_hash(group));\n    }\n\n    function offerMatchesGroupPrice(\n        string calldata group,\n        uint256 quantity,\n        uint256 offer\n    ) public view returns (bool) {\n        return _offerMatchesGroupPrice(_hash(group), quantity, offer);\n    }\n\n    function isFinal() public view returns (bool) {\n        return _branching.isAccepting(_current);\n    }\n\n    /**\n     * @notice Calculates current group price for minting.\n     *\n     * @dev Also works when minting is forbidden, but it doesn't matter\n     * @dev since `enabled` actually responds for allowing it or not.\n     *\n     * @param group for which current price has to be calculated\n     * @return price of minting.\n     */\n    function _currentGroupPrice(bytes32 group) internal view returns (uint256) {\n        uint256 price;\n\n        _chapters[_current].minting.rules[group].fixedPrice\n            ? price = _chapters[group].minting.price\n            : price = _chapters[_current].minting.price;\n\n        return price;\n    }\n\n    function _offerMatchesGroupPrice(\n        bytes32 group,\n        uint256 quantity,\n        uint256 offer\n    ) internal view returns (bool) {\n        return quantity * _currentGroupPrice(group) <= offer;\n    }\n\n    /**\n     * @notice Checks for two conditions at once:\n     * @notice (a) if minting allowed at all (current chapter allocation > 0), and\n     * @notice (b) if current available chapter allocation is not enough for quantity.\n     */\n    function _chapterAllowsMint(uint256 quantity, uint256 minted) internal view returns (bool) {\n        return minted + quantity <= _chapters[_current].minting.limit;\n    }\n\n    function _chapterAllowsOpenMint() internal view returns (bool) {\n        return _chapters[_current].minting.isOpen;\n    }\n\n    /**\n     * @param group of Minters.\n     * @return boolean true if group is current chapter, is open mint or enabled.\n     */\n    function _chapterAllowsMintGroup(bytes32 group) internal view returns (bool) {\n        return\n            group == _current ||\n            _chapters[_current].minting.isOpen ||\n            _chapters[_current].minting.rules[group].enabled;\n    }\n\n    function _chapterMatchesOffer(\n        uint256 quantity,\n        uint256 offer,\n        bytes32 group\n    ) internal view returns (bool) {\n        return quantity * _currentGroupPrice(group) <= offer;\n    }\n\n    function _hash(string memory str) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(str));\n    }\n}\n"
    },
    "fpe-map/contracts/FPEMap.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/**\n\n███████╗██████╗ ███████╗    ███╗   ███╗ █████╗ ██████╗ \n██╔════╝██╔══██╗██╔════╝    ████╗ ████║██╔══██╗██╔══██╗\n█████╗  ██████╔╝█████╗█████╗██╔████╔██║███████║██████╔╝\n██╔══╝  ██╔═══╝ ██╔══╝╚════╝██║╚██╔╝██║██╔══██║██╔═══╝ \n██║     ██║     ███████╗    ██║ ╚═╝ ██║██║  ██║██║     \n╚═╝     ╚═╝     ╚══════╝    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝     \n                                                       \ngithub: https://github.com/estarriolvetch/fpe-mapping\n\n */\n\npragma solidity ^0.8.0;\n\nimport \"solidity-bits/contracts/BitScan.sol\";\nimport \"./Feistel.sol\";\n\nlibrary FPEMap {\n    using Feistel for uint256;\n\n    string constant DOMAIN_ERROR_MSG = \"The FPE domain should be within the domain of the Fiestel network (domain <= 2 ** size)\";\n    string constant INPUT_OUTSIDE_DOMAIN_ERROR_MSG = \"input is not within the domain\";\n\n    uint256 constant DEFAULT_ROUND = 3;\n\n    function fpeMappingFeistel(uint256 input, uint256 key, uint256 round, uint256 size, uint256 domain) internal pure returns (uint256 output) {\n        require(input < domain, INPUT_OUTSIDE_DOMAIN_ERROR_MSG);\n        require(2 ** size >= domain, DOMAIN_ERROR_MSG);\n        while(true) {\n            output = input.feistel(key, round, size);\n            if(output < domain) {\n                break;\n            } else {\n                input = output;\n            }\n        }\n    }\n\n    function fpeMappingFeistelUnbalanced(uint256 input, uint256 key, uint256 round, uint256 size, uint256 domain) internal pure returns (uint256 output) {\n        require(input < domain, INPUT_OUTSIDE_DOMAIN_ERROR_MSG);\n        require(2 ** size >= domain, DOMAIN_ERROR_MSG);\n        while(true) {\n            output = input.feistelUnbalanced(key, round, size);\n            if(output < domain) {\n                break;\n            } else {\n                input = output;\n            }\n        }\n    }\n\n    function fpeMappingFeistelAuto(uint256 input, uint256 key, uint256 domain) internal pure returns (uint256 output) {\n        require(input < domain, INPUT_OUTSIDE_DOMAIN_ERROR_MSG);\n        uint256 size;\n\n        // Calculate the smallest required block size of the unbalanced Feistel network\n        unchecked {\n            size = BitScan.log2(domain) + 1;    \n        }\n        \n        while(true) {\n            output = input.feistelUnbalanced(key, DEFAULT_ROUND, size);\n            if(output < domain) {\n                break;\n            } else {\n                input = output;\n            }\n        }\n    }\n}"
    },
    "erc721psi/contracts/extension/ERC721PsiBurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n  ______ _____   _____ ______ ___  __ _  _  _ \n |  ____|  __ \\ / ____|____  |__ \\/_ | || || |\n | |__  | |__) | |        / /   ) || | \\| |/ |\n |  __| |  _  /| |       / /   / / | |\\_   _/ \n | |____| | \\ \\| |____  / /   / /_ | |  | |   \n |______|_|  \\_\\\\_____|/_/   |____||_|  |_|   \n                                              \n                                            \n */\npragma solidity ^0.8.0;\n\nimport \"solidity-bits/contracts/BitMaps.sol\";\nimport \"../ERC721Psi.sol\";\n\n\nabstract contract ERC721PsiBurnable is ERC721Psi {\n    using BitMaps for BitMaps.BitMap;\n    BitMaps.BitMap private _burnedToken;\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address from = ownerOf(tokenId);\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n        _burnedToken.set(tokenId);\n        \n        emit Transfer(from, address(0), tokenId);\n\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view override virtual returns (bool){\n        if(_burnedToken.get(tokenId)) {\n            return false;\n        } \n        return super._exists(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _minted - _burned();\n    }\n\n    /**\n     * @dev Returns number of token burned.\n     */\n    function _burned() internal view returns (uint256 burned){\n        uint256 totalBucket = (_minted >> 8) + 1;\n\n        for(uint256 i=0; i < totalBucket; i++) {\n            uint256 bucket = _burnedToken.getBucket(i);\n            burned += _popcount(bucket);\n        }\n    }\n\n    /**\n     * @dev Returns number of set bits.\n     */\n    function _popcount(uint256 x) private pure returns (uint256 count) {\n        unchecked{\n            for (count=0; x!=0; count++)\n                x &= x - 1;\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20 token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/IMonuverseEpisode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\ninterface IMonuverseEpisode {\n    struct MintGroupRules {\n        bool enabled;\n        bool fixedPrice;\n    }\n\n    struct Minting {\n        uint256 limit;\n        uint256 price;\n        mapping(bytes32 => MintGroupRules) rules;\n        bool isOpen;\n    }\n\n    struct Chapter {\n        Minting minting;\n        bool whitelisting;\n        bool revealing;\n        bool exists;\n    }\n\n    /// @notice Episode writing events\n    event ChapterWritten(\n        string label,\n        bool whitelisting,\n        uint256 mintAllocation,\n        uint256 mintPrice,\n        bool mintOpen,\n        bool revealing,\n        bool isConclusion\n    );\n    event ChapterRemoved(string label);\n    event TransitionWritten(string from, string to, string monumentalEvent);\n    event TransitionRemoved(string from, string monumentalEvent);\n    event MintGroupWritten(string chapter, string group, bool fixedPrice);\n    event MintGroupRemoved(string chapter, string group);\n\n    /// @notice Special Monumental Events\n    event ChapterMinted(bytes32 prev, bytes32 current);\n    event MintingSealed(bytes32 prev, bytes32 current);\n    event EpisodeMinted(bytes32 prev, bytes32 current);\n    event EpisodeRevealed(bytes32 prev, bytes32 current);\n    event EpisodeProgressedOnlife(bytes32 prev, bytes32 current);\n\n    function writeChapter(\n        string calldata label,\n        bool whitelisting,\n        uint256 mintAllocation,\n        uint256 mintPrice,\n        bool mintOpen,\n        bool revealing,\n        bool isConlusion\n    ) external returns (bytes32);\n\n    function removeChapter(string calldata label) external;\n\n    function writeMintGroup(\n        string calldata chapter,\n        string calldata group,\n        MintGroupRules calldata mintingRules\n    ) external;\n\n    function removeMintGroup(string calldata chapter, string calldata group) external;\n\n    function writeTransition(\n        string calldata from,\n        string calldata to,\n        string calldata storyEvent\n    ) external;\n\n    function removeTransition(string calldata from, string calldata storyEvent) external;\n}\n"
    },
    "contracts/DFA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev Each possible state except default value (0x00) is a valid state\n/// @dev Any valid state can only be reached if there is a transition allowing so\n/// @dev DFA correctness and minimization has to be evaluated offchain\n/// @dev DFA eventual runtime info must be kept into importing contract or offchain\nlibrary DFA {\n    struct Dfa {\n        bytes32 init;\n        mapping(bytes32 => bool) accepting;\n        mapping(bytes32 => mapping(bytes32 => bytes32)) transitions;\n    }\n\n    function addTransition(Dfa storage self, bytes32 from, bytes32 to, bytes32 symbol) internal {\n        require(from != 0x00, \"DFA: from invalid\");\n        require(to != 0x00, \"DFA: to invalid\");\n        require(self.transitions[from][symbol] == 0x00, \"DFA: existent transition\");\n\n        self.transitions[from][symbol] = to;\n    }\n\n    function removeTransition(Dfa storage self, bytes32 from, bytes32 symbol) internal {\n        delete self.transitions[from][symbol];\n    }\n\n    function setInitial(Dfa storage self, bytes32 state) internal {\n        self.init = state;\n    }\n\n    function addAccepting(Dfa storage self, bytes32 state) internal {\n        self.accepting[state] = true;\n    }\n\n    function removeAccepting(Dfa storage self, bytes32 state) internal {\n        delete self.accepting[state];\n    }\n\n    /// @dev Caller must handle non existing transition returning 0x00\n    function transition(Dfa storage self, bytes32 from, bytes32 symbol) internal view returns (bytes32) {\n        return self.transitions[from][symbol];\n    }\n\n    function isAccepting(Dfa storage self, bytes32 state) internal view returns (bool) {\n        return self.accepting[state];\n    }\n\n    function initial(Dfa storage self) internal view returns (bytes32) {\n        return self.init;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "fpe-map/contracts/Feistel.sol": {
      "content": "//SPDX-License-Identifier: MIT\n/**\n\n███████╗██████╗ ███████╗    ███╗   ███╗ █████╗ ██████╗ \n██╔════╝██╔══██╗██╔════╝    ████╗ ████║██╔══██╗██╔══██╗\n█████╗  ██████╔╝█████╗█████╗██╔████╔██║███████║██████╔╝\n██╔══╝  ██╔═══╝ ██╔══╝╚════╝██║╚██╔╝██║██╔══██║██╔═══╝ \n██║     ██║     ███████╗    ██║ ╚═╝ ██║██║  ██║██║     \n╚═╝     ╚═╝     ╚══════╝    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝     \n                                                       \ngithub: https://github.com/estarriolvetch/fpe-mapping\n\n */\npragma solidity ^0.8.0;\n\nlibrary Feistel {\n    /// Balanced Feistel network\n    function feistel(uint256 input, uint256 key, uint256 round, uint256 size) internal pure returns (uint256) {\n        unchecked {\n            uint256 halfSize = size / 2;\n            uint256 halfMap = (2 ** halfSize) - 1;\n                \n            uint256 left = (input >> halfSize) & halfMap;\n            uint256 right = (input & halfMap);\n            \n            for(uint256 i=0; i < round; i++) {\n                uint256 roundKey = uint256(keccak256(abi.encode(key, i)));\n                uint256 left_new = right;\n                uint256 right_new = left ^ (halfMap & uint256(keccak256(abi.encode(right, roundKey))));\n\n                left = left_new;\n                right = right_new;\n            }\n            return (left << halfSize) | right;\n        }\n    }\n\n    /// Unbalanced Feistel network\n    function feistelUnbalanced(uint256 input, uint256 key, uint256 round, uint256 size) internal pure returns (uint256) {\n        unchecked {\n            uint256 shortSize = size / 2;\n            uint256 longSize = size - shortSize;\n            \n            uint256 longMap = (1 << longSize) - 1;\n            uint256 shortMap = (1 << shortSize) - 1;\n            \n            uint256 left = (input >> shortSize) & longMap;\n            uint256 right = (input & shortMap);\n            \n            for(uint256 i=0; i < round; i++) {\n                uint256 roundKey = uint256(keccak256(abi.encode(key, i)));\n                uint256 left_new = right;\n                uint256 right_new;\n                if(i % 2 == 0){\n                    right_new = left ^ (longMap & uint256(keccak256(abi.encode(right, roundKey))));\n                } else {\n                    right_new = left ^ (shortMap & uint256(keccak256(abi.encode(right, roundKey))));\n                }\n                \n                left = left_new;\n                right = right_new;\n            }\n\n            if (round % 2 == 0) {\n                return (left << shortSize) | right;\n            } else {\n                return (left << longSize) | right;\n            }\n        }\n    }\n}"
    },
    "solidity-bits/contracts/BitScan.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n   _____       ___     ___ __           ____  _ __      \n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\n  \\__ \\/ __ \\/ / / __  / / __/ / / /  / __  / / __/ ___/\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \n/____/\\____/_/_/\\__,_/_/\\__/\\__, /  /_____/_/\\__/____/  \n                           /____/                        \n\n- npm: https://www.npmjs.com/package/solidity-bits\n- github: https://github.com/estarriolvetch/solidity-bits\n\n */\n\npragma solidity ^0.8.0;\n\n\nlibrary BitScan {\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\n    bytes constant private LOOKUP_TABLE_256 = hex\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\";\n\n    /**\n        @dev Isolate the least significant set bit.\n     */ \n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\n        require(bb > 0);\n        unchecked {\n            return bb & (0 - bb);\n        }\n    } \n\n    /**\n        @dev Isolate the most significant set bit.\n     */ \n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\n        require(bb > 0);\n        unchecked {\n            bb |= bb >> 128;\n            bb |= bb >> 64;\n            bb |= bb >> 32;\n            bb |= bb >> 16;\n            bb |= bb >> 8;\n            bb |= bb >> 4;\n            bb |= bb >> 2;\n            bb |= bb >> 1;\n            \n            return (bb >> 1) + 1;\n        }\n    } \n\n    /**\n        @dev Find the index of the lest significant set bit. (trailing zero count)\n     */ \n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\n        }   \n    }\n\n    /**\n        @dev Find the index of the most significant set bit.\n     */ \n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\n        }   \n    }\n\n    function log2(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return uint8(LOOKUP_TABLE_256[(isolateMS1B256(bb) * DEBRUIJN_256) >> 248]);\n        } \n    }\n}\n"
    },
    "solidity-bits/contracts/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n   _____       ___     ___ __           ____  _ __      \n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\n  \\__ \\/ __ \\/ / / __  / / __/ / / /  / __  / / __/ ___/\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \n/____/\\____/_/_/\\__,_/_/\\__/\\__, /  /_____/_/\\__/____/  \n                           /____/                        \n\n- npm: https://www.npmjs.com/package/solidity-bits\n- github: https://github.com/estarriolvetch/solidity-bits\n\n */\npragma solidity ^0.8.0;\n\nimport \"./BitScan.sol\";\n\n/**\n * @dev This Library is a modified version of Openzeppelin's BitMaps library.\n * Functions of finding the index of the closest set bit from a given index are added.\n * The indexing of each bucket is modifed to count from the MSB to the LSB instead of from the LSB to the MSB.\n * The modification of indexing makes finding the closest previous set bit more efficient in gas usage.\n*/\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\n\nlibrary BitMaps {\n    using BitScan for uint256;\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\n    uint256 private constant MASK_FULL = type(uint256).max;\n\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n\n\n    /**\n     * @dev Consecutively sets `amount` of bits starting from the bit at `startIndex`.\n     */    \n    function setBatch(BitMap storage bitmap, uint256 startIndex, uint256 amount) internal {\n        uint256 bucket = startIndex >> 8;\n\n        uint256 bucketStartIndex = (startIndex & 0xff);\n\n        unchecked {\n            if(bucketStartIndex + amount < 256) {\n                bitmap._data[bucket] |= MASK_FULL << (256 - amount) >> bucketStartIndex;\n            } else {\n                bitmap._data[bucket] |= MASK_FULL >> bucketStartIndex;\n                amount -= (256 - bucketStartIndex);\n                bucket++;\n\n                while(amount > 256) {\n                    bitmap._data[bucket] = MASK_FULL;\n                    amount -= 256;\n                    bucket++;\n                }\n\n                bitmap._data[bucket] |= MASK_FULL << (256 - amount);\n            }\n        }\n    }\n\n\n    /**\n     * @dev Consecutively unsets `amount` of bits starting from the bit at `startIndex`.\n     */    \n    function unsetBatch(BitMap storage bitmap, uint256 startIndex, uint256 amount) internal {\n        uint256 bucket = startIndex >> 8;\n\n        uint256 bucketStartIndex = (startIndex & 0xff);\n\n        unchecked {\n            if(bucketStartIndex + amount < 256) {\n                bitmap._data[bucket] &= ~(MASK_FULL << (256 - amount) >> bucketStartIndex);\n            } else {\n                bitmap._data[bucket] &= ~(MASK_FULL >> bucketStartIndex);\n                amount -= (256 - bucketStartIndex);\n                bucket++;\n\n                while(amount > 256) {\n                    bitmap._data[bucket] = 0;\n                    amount -= 256;\n                    bucket++;\n                }\n\n                bitmap._data[bucket] &= ~(MASK_FULL << (256 - amount));\n            }\n        }\n    }\n\n\n    /**\n     * @dev Find the closest index of the set bit before `index`.\n     */\n    function scanForward(BitMap storage bitmap, uint256 index) internal view returns (uint256 setBitIndex) {\n        uint256 bucket = index >> 8;\n\n        // index within the bucket\n        uint256 bucketIndex = (index & 0xff);\n\n        // load a bitboard from the bitmap.\n        uint256 bb = bitmap._data[bucket];\n\n        // offset the bitboard to scan from `bucketIndex`.\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\n        \n        if(bb > 0) {\n            unchecked {\n                setBitIndex = (bucket << 8) | (bucketIndex -  bb.bitScanForward256());    \n            }\n        } else {\n            while(true) {\n                require(bucket > 0, \"BitMaps: The set bit before the index doesn't exist.\");\n                unchecked {\n                    bucket--;\n                }\n                // No offset. Always scan from the least significiant bit now.\n                bb = bitmap._data[bucket];\n                \n                if(bb > 0) {\n                    unchecked {\n                        setBitIndex = (bucket << 8) | (255 -  bb.bitScanForward256());\n                        break;\n                    }\n                } \n            }\n        }\n    }\n\n    function getBucket(BitMap storage bitmap, uint256 bucket) internal view returns (uint256) {\n        return bitmap._data[bucket];\n    }\n}\n"
    },
    "erc721psi/contracts/ERC721Psi.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n  ______ _____   _____ ______ ___  __ _  _  _ \n |  ____|  __ \\ / ____|____  |__ \\/_ | || || |\n | |__  | |__) | |        / /   ) || | \\| |/ |\n |  __| |  _  /| |       / /   / / | |\\_   _/ \n | |____| | \\ \\| |____  / /   / /_ | |  | |   \n |______|_|  \\_\\\\_____|/_/   |____||_|  |_|   \n                                              \n                                            \n */\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"solidity-bits/contracts/BitMaps.sol\";\n\n\ncontract ERC721Psi is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using Address for address;\n    using Strings for uint256;\n    using BitMaps for BitMaps.BitMap;\n\n    BitMaps.BitMap private _batchHead;\n\n    string private _name;\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) internal _owners;\n    uint256 internal _minted;\n\n    mapping(uint256 => address) private _tokenApprovals;\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            interfaceId == type(IERC721Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) \n        public \n        view \n        virtual \n        override \n        returns (uint) \n    {\n        require(owner != address(0), \"ERC721Psi: balance query for the zero address\");\n\n        uint count;\n        for( uint i; i < _minted; ++i ){\n            if(_exists(i)){\n                if( owner == ownerOf(i)){\n                    ++count;\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        (address owner, ) = _ownerAndBatchHeadOf(tokenId);\n        return owner;\n    }\n\n    function _ownerAndBatchHeadOf(uint256 tokenId) internal view returns (address owner, uint256 tokenIdBatchHead){\n        require(_exists(tokenId), \"ERC721Psi: owner query for nonexistent token\");\n        tokenIdBatchHead = _getBatchHead(tokenId);\n        owner = _owners[tokenIdBatchHead];\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Psi: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721Psi: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721Psi: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Psi: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        require(operator != _msgSender(), \"ERC721Psi: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721Psi: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721Psi: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, 1,_data),\n            \"ERC721Psi: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return tokenId < _minted;\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Psi: operator query for nonexistent token\"\n        );\n        address owner = ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, \"\");\n    }\n\n    \n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        uint256 startTokenId = _minted;\n        _mint(to, quantity);\n        require(\n            _checkOnERC721Received(address(0), to, startTokenId, quantity, _data),\n            \"ERC721Psi: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n\n    function _mint(\n        address to,\n        uint256 quantity\n    ) internal virtual {\n        uint256 tokenIdBatchHead = _minted;\n        \n        require(quantity > 0, \"ERC721Psi: quantity must be greater 0\");\n        require(to != address(0), \"ERC721Psi: mint to the zero address\");\n        \n        _beforeTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\n        _minted += quantity;\n        _owners[tokenIdBatchHead] = to;\n        _batchHead.set(tokenIdBatchHead);\n        _afterTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\n        \n        // Emit events\n        for(uint256 tokenId=tokenIdBatchHead;tokenId < tokenIdBatchHead + quantity; tokenId++){\n            emit Transfer(address(0), to, tokenId);\n        } \n    }\n\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        (address owner, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\n\n        require(\n            owner == from,\n            \"ERC721Psi: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721Psi: transfer to the zero address\");\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);   \n\n        uint256 nextTokenId = tokenId + 1;\n\n        if(!_batchHead.get(nextTokenId) &&  \n            nextTokenId < _minted\n        ) {\n            _owners[nextTokenId] = from;\n            _batchHead.set(nextTokenId);\n        }\n\n        _owners[tokenId] = to;\n        if(tokenId != tokenIdBatchHead) {\n            _batchHead.set(tokenId);\n        }\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param startTokenId uint256 the first ID of the tokens to be transferred\n     * @param quantity uint256 amount of the tokens to be transfered.\n     * @param _data bytes optional data to send along with the call\n     * @return r bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity,\n        bytes memory _data\n    ) private returns (bool r) {\n        if (to.isContract()) {\n            r = true;\n            for(uint256 tokenId = startTokenId; tokenId < startTokenId + quantity; tokenId++){\n                try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                    r = r && retval == IERC721Receiver.onERC721Received.selector;\n                } catch (bytes memory reason) {\n                    if (reason.length == 0) {\n                        revert(\"ERC721Psi: transfer to non ERC721Receiver implementer\");\n                    } else {\n                        assembly {\n                            revert(add(32, reason), mload(reason))\n                        }\n                    }\n                }\n            }\n            return r;\n        } else {\n            return true;\n        }\n    }\n\n    function _getBatchHead(uint256 tokenId) internal view returns (uint256 tokenIdBatchHead) {\n        tokenIdBatchHead = _batchHead.scanForward(tokenId); \n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _minted;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256 tokenId) {\n        require(index < totalSupply(), \"ERC721Psi: global index out of bounds\");\n        \n        uint count;\n        for(uint i; i < _minted; i++){\n            if(_exists(i)){\n                if(count == index) return i;\n                else count++;\n            }\n        }\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256 tokenId) {\n        uint count;\n        for(uint i; i < _minted; i++){\n            if(_exists(i) && owner == ownerOf(i)){\n                if(count == index) return i;\n                else count++;\n            }\n        }\n\n        revert(\"ERC721Psi: owner index out of bounds\");\n    }\n\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}