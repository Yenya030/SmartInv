{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/DigiDaigakuMaskedVillains.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"limit-break-contracts/contracts/presets/BlacklistedTransferAdventureNFT.sol\";\nimport \"limit-break-contracts/contracts/utils/tokens/ClaimableHolderMint.sol\";\nimport \"limit-break-contracts/contracts/utils/tokens/MerkleWhitelistMint.sol\";\nimport \"limit-break-contracts/contracts/utils/tokens/SignedApprovalMint.sol\";\n\ncontract DigiDaigakuMaskedVillains is BlacklistedTransferAdventureNFT, ClaimableHolderMint, MerkleWhitelistMint, SignedApprovalMint {\n\n    constructor(address royaltyReceiver_, uint96 royaltyFeeNumerator_) ERC721(\"\", \"\") EIP712(\"DigiDaigakuMaskedVillains\", \"1\")  {\n        initializeERC721(\"DigiDaigakuMaskedVillains\", \"DIDMV\");\n        initializeURI(\"https://digidaigaku.com/masked-villains/metadata/\", \".json\");\n        initializeAdventureERC721(100);\n        initializeRoyalties(royaltyReceiver_, royaltyFeeNumerator_);\n        initializeOperatorFilterer(address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6), true);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AdventureNFT, IERC165) returns (bool) {\n        return\n        interfaceId == type(ISignedApprovalInitializer).interfaceId ||\n        interfaceId == type(IRootCollectionInitializer).interfaceId ||\n        interfaceId == type(IMerkleRootInitializer).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    function _safeMintToken(address to, uint256 tokenId) internal virtual override(ClaimableHolderMint, MerkleWhitelistMint, SignedApprovalMint) {\n        _safeMint(to, tokenId);\n    }\n}\n"
    },
    "limit-break-contracts/contracts/adventures/AdventureERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IAdventurous.sol\";\nimport \"./AdventureWhitelist.sol\";\nimport \"../initializable/IAdventureERC721Initializer.sol\";\nimport \"../utils/tokens/InitializableERC721.sol\";\n\nerror AdventureApprovalToCaller();\nerror AlreadyInitializedAdventureERC721();\nerror AlreadyOnQuest();\nerror AnActiveQuestIsPreventingTransfers();\nerror CallerNotApprovedForAdventure();\nerror CallerNotTokenOwner();\nerror MaxSimultaneousQuestsCannotBeZero();\nerror MaxSimultaneousQuestsExceeded();\nerror NotOnQuest();\nerror QuestIdOutOfRange();\nerror TooManyActiveQuests();\n\n/**\n * @title AdventureERC721\n * @author Limit Break, Inc.\n * @notice Implements the {IAdventurous} token standard for ERC721-compliant tokens.\n * Includes a user approval mechanism specific to {IAdventurous} functionality.\n * @dev Inherits {InitializableERC721} to provide the option to support EIP-1167.\n */\nabstract contract AdventureERC721 is InitializableERC721, AdventureWhitelist, IAdventurous, IAdventureERC721Initializer {\n\n    /// @notice Specifies an upper bound for the maximum number of simultaneous quests per adventure.\n    uint256 private constant MAX_CONCURRENT_QUESTS = 100;\n\n    /// @dev A value denoting a transfer originating from transferFrom or safeTransferFrom\n    uint256 internal constant TRANSFERRING_VIA_ERC721 = 1;\n\n    /// @dev A value denoting a transfer originating from adventureTransferFrom or adventureSafeTransferFrom\n    uint256 internal constant TRANSFERRING_VIA_ADVENTURE = 2;\n\n    /// @notice Specifies whether or not the contract is initialized\n    bool private initializedAdventureERC721;\n\n    /// @dev Specifies the type of transfer that is actively being used\n    uint256 internal transferType;\n\n    /// @dev The most simultaneous quests the token may participate in at a time\n    uint256 private _maxSimultaneousQuests;\n\n    /// @dev Maps each token id to the number of blocking quests it is currently entered into\n    mapping (uint256 => uint256) internal blockingQuestCounts;\n\n    /// @dev Mapping from owner to operator approvals for special gameplay behavior\n    mapping (address => mapping (address => bool)) private operatorAdventureApprovals;\n\n    /// @dev Maps each token id to a mapping that can enumerate all active quests within an adventure\n    mapping (uint256 => mapping (address => uint32[])) public activeQuestList;\n\n    /// @dev Maps each token id to a mapping from adventure address to a mapping of quest ids to quest details\n    mapping (uint256 => mapping (address => mapping (uint32 => Quest))) public activeQuestLookup;\n\n    /// @dev Initializes parameters of AdventureERC721 tokens.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    function initializeAdventureERC721(uint256 maxSimultaneousQuests_) public override onlyOwner {\n        if(initializedAdventureERC721) {\n            revert AlreadyInitializedAdventureERC721();\n        }\n\n        _validateMaxSimultaneousQuests(maxSimultaneousQuests_);\n        _maxSimultaneousQuests = maxSimultaneousQuests_;\n\n        initializedAdventureERC721 = true;\n        transferType = TRANSFERRING_VIA_ERC721;\n    }\n\n    /// @dev ERC-165 interface support\n    function supportsInterface(bytes4 interfaceId) public view virtual override (InitializableERC721, IERC165) returns (bool) {\n        return \n        interfaceId == type(IAdventurous).interfaceId || \n        interfaceId == type(IAdventureERC721Initializer).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Transfers a player's token if they have opted into an authorized, whitelisted adventure.\n    function adventureTransferFrom(address from, address to, uint256 tokenId) external override {\n        _requireCallerIsWhitelistedAdventure();\n        _requireCallerApprovedForAdventure(tokenId);\n        transferType = TRANSFERRING_VIA_ADVENTURE;\n        _transfer(from, to, tokenId);\n        transferType = TRANSFERRING_VIA_ERC721;\n    }\n\n    /// @notice Safe transfers a player's token if they have opted into an authorized, whitelisted adventure.\n    function adventureSafeTransferFrom(address from, address to, uint256 tokenId) external override {\n        _requireCallerIsWhitelistedAdventure();\n        _requireCallerApprovedForAdventure(tokenId);\n        transferType = TRANSFERRING_VIA_ADVENTURE;\n        _safeTransfer(from, to, tokenId, \"\");\n        transferType = TRANSFERRING_VIA_ERC721;\n    }\n\n    /// @notice Burns a player's token if they have opted into an authorized, whitelisted adventure.\n    function adventureBurn(uint256 tokenId) external override {\n        _requireCallerIsWhitelistedAdventure();\n        _requireCallerApprovedForAdventure(tokenId);\n        transferType = TRANSFERRING_VIA_ADVENTURE;\n        _burn(tokenId);\n        transferType = TRANSFERRING_VIA_ERC721;\n    }\n\n    /// @notice Enters a player's token into a quest if they have opted into an authorized, whitelisted adventure.\n    function enterQuest(uint256 tokenId, uint256 questId) external override {\n        _requireCallerIsWhitelistedAdventure();\n        _requireCallerApprovedForAdventure(tokenId);\n        _enterQuest(tokenId, _msgSender(), questId);\n    }\n\n    /// @notice Exits a player's token from a quest if they have opted into an authorized, whitelisted adventure.\n    /// For developers of adventure contracts that perform adventure burns, be aware that the adventure must exitQuest\n    /// before the adventure burn occurs, as _exitQuest emits the owner of the token, which would revert after burning.\n    function exitQuest(uint256 tokenId, uint256 questId) external override {\n        _requireCallerIsWhitelistedAdventure();\n        _requireCallerApprovedForAdventure(tokenId);\n        _exitQuest(tokenId, _msgSender(), questId);\n    }\n\n    /// @notice Admin-only ability to boot a token from all quests on an adventure.\n    /// This ability is only unlocked in the event that an adventure has been unwhitelisted, as early exiting\n    /// from quests can cause out of sync state between the ERC721 token contract and the adventure/quest.\n    function bootFromAllQuests(uint256 tokenId, address adventure) external onlyOwner {\n        _requireAdventureRemovedFromWhitelist(adventure);\n        _exitAllQuests(tokenId, adventure, true);\n    }\n\n    /// @notice Gives the player the ability to exit a quest without interacting directly with the approved, whitelisted adventure\n    /// This ability is only unlocked in the event that an adventure has been unwhitelisted, as early exiting\n    /// from quests can cause out of sync state between the ERC721 token contract and the adventure/quest.\n    function userExitQuest(uint256 tokenId, address adventure, uint256 questId) external {\n        _requireAdventureRemovedFromWhitelist(adventure);\n        _requireCallerOwnsToken(tokenId);\n        _exitQuest(tokenId, adventure, questId);\n    }\n\n    /// @notice Gives the player the ability to exit all quests on an adventure without interacting directly with the approved, whitelisted adventure\n    /// This ability is only unlocked in the event that an adventure has been unwhitelisted, as early exiting\n    /// from quests can cause out of sync state between the ERC721 token contract and the adventure/quest.\n    function userExitAllQuests(uint256 tokenId, address adventure) external {\n        _requireAdventureRemovedFromWhitelist(adventure);\n        _requireCallerOwnsToken(tokenId);\n        _exitAllQuests(tokenId, adventure, false);\n    }\n\n    /// @notice Similar to {IERC721-setApprovalForAll}, but for special in-game adventures only\n    function setAdventuresApprovedForAll(address operator, bool approved) external {\n        address tokenOwner = _msgSender();\n\n        if(tokenOwner == operator) {\n            revert AdventureApprovalToCaller();\n        }\n        operatorAdventureApprovals[tokenOwner][operator] = approved;\n        emit AdventureApprovalForAll(tokenOwner, operator, approved);\n    }\n\n    /// @notice Similar to {IERC721-isApprovedForAll}, but for special in-game adventures only\n    function areAdventuresApprovedForAll(address owner, address operator) public view returns (bool) {\n        return operatorAdventureApprovals[owner][operator];\n    }    \n    \n    /// @notice Returns the number of quests a token is actively participating in for a specified adventure\n    function getQuestCount(uint256 tokenId, address adventure) public override view returns (uint256) {\n        return activeQuestList[tokenId][adventure].length;\n    }\n\n    /// @notice Returns the amount of time a token has been participating in the specified quest\n    function getTimeOnQuest(uint256 tokenId, address adventure, uint256 questId) public override view returns (uint256) {\n        (bool participatingInQuest, uint256 startTimestamp,) = isParticipatingInQuest(tokenId, adventure, questId);\n        return participatingInQuest ? (block.timestamp - startTimestamp) : 0;\n    } \n\n    /// @notice Returns whether or not a token is currently participating in the specified quest as well as the time it was started and the quest index\n    function isParticipatingInQuest(uint256 tokenId, address adventure, uint256 questId) public override view returns (bool participatingInQuest, uint256 startTimestamp, uint256 index) {\n        if(questId > type(uint32).max) {\n            revert QuestIdOutOfRange();\n        }\n\n        Quest storage quest = activeQuestLookup[tokenId][adventure][uint32(questId)];\n        participatingInQuest = quest.isActive;\n        startTimestamp = quest.startTimestamp;\n        index = quest.arrayIndex;\n        return (participatingInQuest, startTimestamp, index);\n    }\n\n    /// @notice Returns a list of all active quests for the specified token id and adventure\n    function getActiveQuests(uint256 tokenId, address adventure) public override view returns (Quest[] memory activeQuests) {\n        uint256 questCount = getQuestCount(tokenId, adventure);\n        activeQuests = new Quest[](questCount);\n        uint32[] memory activeQuestIdList = activeQuestList[tokenId][adventure];\n\n        for(uint256 i = 0; i < questCount; ++i) {\n            activeQuests[i] = activeQuestLookup[tokenId][adventure][activeQuestIdList[i]];\n        }\n\n        return activeQuests;\n    }\n\n    /// @notice Returns the maximum number of simultaneous quests the token can be in per adventure.\n    function maxSimultaneousQuests() public view returns (uint256) {\n        return _maxSimultaneousQuests;\n    }\n\n    /// @dev Enters the specified quest for a token id.\n    /// Throws if the token is already participating in the specified quest.\n    /// Throws if the number of active quests exceeds the max allowable for the given adventure.\n    /// Emits a QuestUpdated event for off-chain processing.\n    function _enterQuest(uint256 tokenId, address adventure, uint256 questId) internal {\n        (bool participatingInQuest,,) = isParticipatingInQuest(tokenId, adventure, questId);\n        if(participatingInQuest) {\n            revert AlreadyOnQuest();\n        }\n\n        uint256 currentQuestCount = getQuestCount(tokenId, adventure);\n        if(currentQuestCount >= _maxSimultaneousQuests) {\n            revert TooManyActiveQuests();\n        }\n\n        uint32 castedQuestId = uint32(questId);\n        activeQuestList[tokenId][adventure].push(castedQuestId);\n        activeQuestLookup[tokenId][adventure][castedQuestId].isActive = true;\n        activeQuestLookup[tokenId][adventure][castedQuestId].startTimestamp = uint64(block.timestamp);\n        activeQuestLookup[tokenId][adventure][castedQuestId].questId = castedQuestId;\n        activeQuestLookup[tokenId][adventure][castedQuestId].arrayIndex = uint32(currentQuestCount);\n\n        address ownerOfToken = ownerOf(tokenId);\n        emit QuestUpdated(tokenId, ownerOfToken, adventure, questId, true, false);\n\n        if(IAdventure(adventure).questsLockTokens()) {\n            unchecked {\n                ++blockingQuestCounts[tokenId];\n            }\n        }\n\n        // Invoke callback to the adventure to facilitate state synchronization as needed\n        IAdventure(adventure).onQuestEntered(ownerOfToken, tokenId, questId);\n    }\n\n    /// @dev Exits the specified quest for a token id.\n    /// Throws if the token is not currently participating on the specified quest.\n    /// Emits a QuestUpdated event for off-chain processing.\n    function _exitQuest(uint256 tokenId, address adventure, uint256 questId) internal {\n        (bool participatingInQuest, uint256 startTimestamp, uint256 index) = isParticipatingInQuest(tokenId, adventure, questId);\n        if(!participatingInQuest) {\n            revert NotOnQuest();\n        }\n\n        uint32 castedQuestId = uint32(questId);\n        uint256 lastArrayIndex = getQuestCount(tokenId, adventure) - 1;\n        if(index != lastArrayIndex) {\n            activeQuestList[tokenId][adventure][index] = activeQuestList[tokenId][adventure][lastArrayIndex];\n            activeQuestLookup[tokenId][adventure][activeQuestList[tokenId][adventure][lastArrayIndex]].arrayIndex = uint32(index);\n        }\n\n        activeQuestList[tokenId][adventure].pop();\n        delete activeQuestLookup[tokenId][adventure][castedQuestId];\n\n        address ownerOfToken = ownerOf(tokenId);\n        emit QuestUpdated(tokenId, ownerOfToken, adventure, questId, false, false);\n\n        if(IAdventure(adventure).questsLockTokens()) {\n            --blockingQuestCounts[tokenId];\n        }\n\n        // Invoke callback to the adventure to facilitate state synchronization as needed\n        IAdventure(adventure).onQuestExited(ownerOfToken, tokenId, questId, startTimestamp);\n    }\n\n    /// @dev Removes the specified token id from all quests on the specified adventure\n    function _exitAllQuests(uint256 tokenId, address adventure, bool booted) internal {\n        address tokenOwner = ownerOf(tokenId);\n        uint256 questCount = getQuestCount(tokenId, adventure);\n\n        if(IAdventure(adventure).questsLockTokens()) {\n            blockingQuestCounts[tokenId] -= questCount;\n        }\n\n        for(uint256 i = 0; i < questCount;) {\n            uint32 questId = activeQuestList[tokenId][adventure][i];\n\n            Quest memory quest = activeQuestLookup[tokenId][adventure][questId];\n            uint256 startTimestamp = quest.startTimestamp;\n\n            emit QuestUpdated(tokenId, tokenOwner, adventure, questId, false, booted);\n            delete activeQuestLookup[tokenId][adventure][questId];\n            \n            // Invoke callback to the adventure to facilitate state synchronization as needed\n            IAdventure(adventure).onQuestExited(tokenOwner, tokenId, questId, startTimestamp);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        delete activeQuestList[tokenId][adventure];\n    }\n\n    /// @dev By default, tokens that are participating in quests are transferrable.  However, if a token is participating\n    /// in a quest on an adventure that was designated as a token locker, the transfer will revert and keep the token\n    /// locked.\n    function _beforeTokenTransfer(address /*from*/, address /*to*/, uint256 tokenId) internal virtual override {\n        if(blockingQuestCounts[tokenId] > 0) {\n            revert AnActiveQuestIsPreventingTransfers();\n        }\n    }\n\n    /// @dev Validates that the caller is approved for adventure on the specified token id\n    /// Throws when the caller has not been approved by the user.\n    function _requireCallerApprovedForAdventure(uint256 tokenId) internal view {\n        if(!areAdventuresApprovedForAll(ownerOf(tokenId), _msgSender())) {\n            revert CallerNotApprovedForAdventure();\n        }\n    }\n\n    /// @dev Validates that the caller owns the specified token\n    /// Throws when the caller does not own the specified token.\n    function _requireCallerOwnsToken(uint256 tokenId) internal view {\n        if(ownerOf(tokenId) != _msgSender()) {\n            revert CallerNotTokenOwner();\n        }\n    }\n\n    /// @dev Validates that the specified value of max simultaneous quests is in range [1-MAX_CONCURRENT_QUESTS]\n    /// Throws when `maxSimultaneousQuests_` is zero.\n    /// Throws when `maxSimultaneousQuests_` is more than MAX_CONCURRENT_QUESTS.\n    function _validateMaxSimultaneousQuests(uint256 maxSimultaneousQuests_) internal pure {\n        if(maxSimultaneousQuests_ == 0) {\n            revert MaxSimultaneousQuestsCannotBeZero();\n        }\n\n        if(maxSimultaneousQuests_ > MAX_CONCURRENT_QUESTS) {\n            revert MaxSimultaneousQuestsExceeded();\n        }\n    }\n}\n"
    },
    "limit-break-contracts/contracts/adventures/AdventureNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./AdventureERC721.sol\";\nimport \"../initializable/IRoyaltiesInitializer.sol\";\nimport \"../initializable/IURIInitializer.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\n\nerror AlreadyInitializedRoyalties();\nerror AlreadyInitializedURI();\nerror ExceedsMaxRoyaltyFee();\nerror NonexistentToken();\n\n/**\n * @title AdventureNFT\n * @author Limit Break, Inc.\n * @notice Standardizes commonly shared boilerplate code that adds base/suffix URI and EIP-2981 royalties to {AdventureERC721} contracts.\n */\nabstract contract AdventureNFT is AdventureERC721, ERC2981, IRoyaltiesInitializer, IURIInitializer {\n    using Strings for uint256;\n\n    /// @dev The maximum allowable royalty fee is 100%\n    uint96 private constant MAX_ROYALTY_FEE_NUMERATOR = 10000;\n\n    /// @notice Specifies whether or not the contract is initialized\n    bool private initializedRoyalties;\n\n    /// @notice Specifies whether or not the contract is initialized\n    bool private initializedURI;\n\n    /// @dev Base token uri\n    string public baseTokenURI;\n\n    /// @dev Token uri suffix/extension\n    string public suffixURI = \".json\";\n\n    /// @dev Emitted when base URI is set.\n    event BaseURISet(string baseTokenURI);\n\n    /// @dev Emitted when suffix URI is set.\n    event SuffixURISet(string suffixURI);\n\n    /// @dev Emitted when royalty is set.\n    event RoyaltySet(address receiver, uint96 feeNumerator);\n\n    /// @dev Initializes parameters of tokens with royalties.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    function initializeRoyalties(address receiver, uint96 feeNumerator) public override onlyOwner {\n        if(initializedRoyalties) {\n            revert AlreadyInitializedRoyalties();\n        }\n\n        setRoyaltyInfo(receiver, feeNumerator);\n\n        initializedRoyalties = true;\n    }\n\n    /// @dev Initializes parameters of tokens with uri values.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    function initializeURI(string memory baseURI_, string memory suffixURI_) public override onlyOwner {\n        if(initializedURI) {\n            revert AlreadyInitializedURI();\n        }\n\n        setBaseURI(baseURI_);\n        setSuffixURI(suffixURI_);\n\n        initializedURI = true;\n    }\n\n    /// @dev Required to return baseTokenURI for tokenURI\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenURI;\n    }\n\n    /// @notice Sets base URI\n    function setBaseURI(string memory baseTokenURI_) public onlyOwner {\n        baseTokenURI = baseTokenURI_;\n\n        emit BaseURISet(baseTokenURI_);\n    }\n\n    /// @notice Sets suffix URI\n    function setSuffixURI(string memory suffixURI_) public onlyOwner {\n        suffixURI = suffixURI_;\n\n        emit SuffixURISet(suffixURI_);\n    }\n\n    /// @notice Sets royalty information\n    function setRoyaltyInfo(address receiver, uint96 feeNumerator) public onlyOwner {\n        if(feeNumerator > MAX_ROYALTY_FEE_NUMERATOR) {\n            revert ExceedsMaxRoyaltyFee();\n        }\n        _setDefaultRoyalty(receiver, feeNumerator);\n\n        emit RoyaltySet(receiver, feeNumerator);\n    }\n\n    /// @notice Returns tokenURI if baseURI is set\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if(!_exists(tokenId)) {\n            revert NonexistentToken();\n        }\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0\n            ? string(abi.encodePacked(baseURI, tokenId.toString(), suffixURI))\n            : \"\";\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override (AdventureERC721, ERC2981, IERC165) returns (bool) {\n        return\n        interfaceId == type(IRoyaltiesInitializer).interfaceId ||\n        interfaceId == type(IURIInitializer).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n}"
    },
    "limit-break-contracts/contracts/adventures/AdventureWhitelist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IAdventure.sol\";\nimport \"../utils/access/InitializableOwnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nerror AdventureIsStillWhitelisted();\nerror AlreadyWhitelisted();\nerror ArrayIndexOverflowsUint128();\nerror CallerNotAWhitelistedAdventure();\nerror InvalidAdventureContract();\nerror NotWhitelisted();\n\n/**\n * @title AdventureWhitelist\n * @author Limit Break, Inc.\n * @notice Implements the basic security features of the {IAdventurous} token standard for ERC721-compliant tokens.\n * This includes a whitelist for trusted Adventure contracts designed to interoperate with this token.\n */\nabstract contract AdventureWhitelist is InitializableOwnable {\n\n    struct AdventureDetails {\n        bool isWhitelisted;\n        uint128 arrayIndex;\n    }\n\n    /// @dev Emitted when the adventure whitelist is updated\n    event AdventureWhitelistUpdated(address indexed adventure, bool whitelisted);\n    \n    /// @dev Whitelist array for iteration\n    address[] public whitelistedAdventureList;\n\n    /// @dev Whitelist mapping\n    mapping (address => AdventureDetails) public whitelistedAdventures;\n\n    /// @notice Returns whether the specified account is a whitelisted adventure\n    function isAdventureWhitelisted(address account) public view returns (bool) {\n        return whitelistedAdventures[account].isWhitelisted;\n    }\n\n    /// @notice Whitelists an adventure and specifies whether or not the quests in that adventure lock token transfers\n    /// Throws when the adventure is already in the whitelist.\n    /// Throws when the specified address does not implement the IAdventure interface.\n    ///\n    /// Postconditions:\n    /// The specified adventure contract is in the whitelist.\n    /// An `AdventureWhitelistUpdate` event has been emitted.\n    function whitelistAdventure(address adventure) external onlyOwner {\n        if(isAdventureWhitelisted(adventure)) {\n            revert AlreadyWhitelisted();\n        }\n\n        if(!IERC165(adventure).supportsInterface(type(IAdventure).interfaceId)) {\n            revert InvalidAdventureContract();\n        }\n\n        uint256 arrayIndex = whitelistedAdventureList.length;\n        if(arrayIndex > type(uint128).max) {\n            revert ArrayIndexOverflowsUint128();\n        }\n\n        whitelistedAdventures[adventure].isWhitelisted = true;\n        whitelistedAdventures[adventure].arrayIndex = uint128(arrayIndex);\n        whitelistedAdventureList.push(adventure);\n\n        emit AdventureWhitelistUpdated(adventure, true);\n    }\n\n    /// @notice Removes an adventure from the whitelist\n    /// Throws when the adventure is not in the whitelist.\n    ///\n    /// Postconditions:\n    /// The specified adventure contract is no longer in the whitelist.\n    /// An `AdventureWhitelistUpdate` event has been emitted.\n    function unwhitelistAdventure(address adventure) external onlyOwner {\n        if(!isAdventureWhitelisted(adventure)) {\n            revert NotWhitelisted();\n        }\n        \n        uint128 itemPositionToDelete = whitelistedAdventures[adventure].arrayIndex;\n        uint256 arrayEndIndex = whitelistedAdventureList.length - 1;\n        if(itemPositionToDelete != arrayEndIndex) {\n            whitelistedAdventureList[itemPositionToDelete] = whitelistedAdventureList[arrayEndIndex];\n            whitelistedAdventures[whitelistedAdventureList[itemPositionToDelete]].arrayIndex = itemPositionToDelete;\n        }\n\n        whitelistedAdventureList.pop();\n        delete whitelistedAdventures[adventure];\n\n        emit AdventureWhitelistUpdated(adventure, false);\n    }\n\n    /// @dev Validates that the caller is a whitelisted adventure\n    /// Throws when the caller is not in the adventure whitelist.\n    function _requireCallerIsWhitelistedAdventure() internal view {\n        if(!isAdventureWhitelisted(_msgSender())) {\n            revert CallerNotAWhitelistedAdventure();\n        }\n    }\n\n    /// @dev Validates that the specified adventure has been removed from the whitelist\n    /// to prevent early backdoor exiting from adventures.\n    /// Throws when specified adventure is still whitelisted.\n    function _requireAdventureRemovedFromWhitelist(address adventure) internal view {\n        if(isAdventureWhitelisted(adventure)) {\n            revert AdventureIsStillWhitelisted();\n        }\n    }\n}\n"
    },
    "limit-break-contracts/contracts/adventures/IAdventure.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventure\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventure` contracts must conform to.\n * @dev All contracts that implement the adventure/quest system and interact with an {IAdventurous} token are required to implement this interface.\n */\ninterface IAdventure is IERC165 {\n\n    /**\n     * @dev Returns whether or not quests on this adventure lock tokens.\n     * Developers of adventure contract should ensure that this is immutable \n     * after deployment of the adventure contract.  Failure to do so\n     * can lead to error that deadlock token transfers.\n     */\n    function questsLockTokens() external view returns (bool);\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully entered.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestEntered(address adventurer, uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @dev A callback function that AdventureERC721 must invoke when a quest has been successfully exited.\n     * Throws if the caller is not an expected AdventureERC721 contract designed to work with the Adventure.\n     * Not permitted to throw in any other case, as this could lead to tokens being locked in quests.\n     */\n    function onQuestExited(address adventurer, uint256 tokenId, uint256 questId, uint256 questStartTimestamp) external;\n}\n"
    },
    "limit-break-contracts/contracts/adventures/IAdventurous.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Quest.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventurous\n * @author Limit Break, Inc.\n * @notice The base interface that all `Adventurous` token contracts must conform to in order to support adventures and quests.\n * @dev All contracts that support adventures and quests are required to implement this interface.\n */\ninterface IAdventurous is IERC165 {\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets, for special in-game adventures.\n     */ \n    event AdventureApprovalForAll(address indexed tokenOwner, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when a token enters or exits a quest\n     */\n    event QuestUpdated(uint256 indexed tokenId, address indexed tokenOwner, address indexed adventure, uint256 questId, bool active, bool booted);\n\n    /**\n     * @notice Transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Safe transfers a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureSafeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @notice Burns a player's token if they have opted into an authorized, whitelisted adventure.\n     */\n    function adventureBurn(uint256 tokenId) external;\n\n    /**\n     * @notice Enters a player's token into a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function enterQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Exits a player's token from a quest if they have opted into an authorized, whitelisted adventure.\n     */\n    function exitQuest(uint256 tokenId, uint256 questId) external;\n\n    /**\n     * @notice Returns the number of quests a token is actively participating in for a specified adventure\n     */\n    function getQuestCount(uint256 tokenId, address adventure) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of time a token has been participating in the specified quest\n     */\n    function getTimeOnQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (uint256);\n\n    /**\n     * @notice Returns whether or not a token is currently participating in the specified quest as well as the time it was started and the quest index\n     */\n    function isParticipatingInQuest(uint256 tokenId, address adventure, uint256 questId) external view returns (bool participatingInQuest, uint256 startTimestamp, uint256 index);\n\n    /**\n     * @notice Returns a list of all active quests for the specified token id and adventure\n     */\n    function getActiveQuests(uint256 tokenId, address adventure) external view returns (Quest[] memory activeQuests);\n}\n"
    },
    "limit-break-contracts/contracts/adventures/Quest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title Quest\n * @author Limit Break, Inc.\n * @notice Quest data structure for {IAdventurous} contracts.\n */\nstruct Quest {\n    bool isActive;\n    uint32 questId;\n    uint64 startTimestamp;\n    uint32 arrayIndex;\n}"
    },
    "limit-break-contracts/contracts/initializable/IAdventureERC721Initializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IAdventureERC721Initializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include Adventure ERC721 functionality.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IAdventureERC721Initializer is IERC165 {\n\n    /**\n     * @notice Initializes parameters of {AdventureERC721} contracts\n     */\n    function initializeAdventureERC721(uint256 maxSimultaneousQuests_) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IERC721Initializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IERC721Initializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include OpenZeppelin ERC721 functionality.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IERC721Initializer is IERC721 {\n\n    /**\n     * @notice Initializes parameters of {ERC721} contracts\n     */\n    function initializeERC721(string memory name_, string memory symbol_) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IMerkleRootInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IMerkleRootInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include a merkle root.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IMerkleRootInitializer is IERC165 {\n\n    /**\n     * @notice Initializes root collection parameters\n     */\n    function initializeMerkleRoot(bytes32 merkleRoot_) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IOperatorFiltererInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title IOperatorFiltererInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include OpenSea's OperatorFilterer functionality.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IOperatorFiltererInitializer {\n\n    /**\n     * @notice Initializes parameters of OperatorFilterer contracts\n     */\n    function initializeOperatorFilterer(address subscriptionOrRegistrantToCopy, bool subscribe) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IOwnableInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IOwnableInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include OpenZeppelin Ownable functionality.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IOwnableInitializer is IERC165 {\n\n    /**\n     * @notice Initializes the contract owner to the specified address\n     */\n    function initializeOwner(address owner_) external;\n\n    /**\n     * @notice Transfers ownership of the contract to the specified owner\n     */\n    function transferOwnership(address newOwner) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IRootCollectionInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IRootCollectionInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to be tied to a root ERC-721 collection.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IRootCollectionInitializer is IERC165 {\n\n    /**\n     * @notice Initializes root collection parameters\n     */\n    function initializeRootCollections(address[] memory rootCollection_, uint256[] memory rootCollectionMaxSupply_, uint256[] memory tokensPerClaim_) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IRoyaltiesInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IRoyaltiesInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include OpenZeppelin ERC2981 functionality.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IRoyaltiesInitializer is IERC165 {\n\n    /**\n     * @notice Initializes royalty parameters\n     */\n    function initializeRoyalties(address receiver, uint96 feeNumerator) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/ISignedApprovalInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title ISignedApprovalInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to be assigned an approver to sign transactions allowing mints.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface ISignedApprovalInitializer is IERC165 {\n\n    /**\n     * @notice Initializes approver.\n     */\n    function initializeSigner(address signer, uint256 maxQuantity) external;\n}"
    },
    "limit-break-contracts/contracts/initializable/IURIInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title IURIInitializer\n * @author Limit Break, Inc.\n * @notice Allows cloneable contracts to include a base uri and suffix uri.\n * @dev See https://eips.ethereum.org/EIPS/eip-1167 for details.\n */\ninterface IURIInitializer is IERC165 {\n\n    /**\n     * @notice Initializes uri parameters\n     */\n    function initializeURI(string memory baseURI_, string memory suffixURI_) external;\n}"
    },
    "limit-break-contracts/contracts/opensea/operator-filter-registry/InitializableDefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {InitializableOperatorFilterer} from \"./InitializableOperatorFilterer.sol\";\n\n/**\n * @title  InitializableDefaultOperatorFilterer\n * @notice Inherits from InitializableOperatorFilterer and automatically subscribes to the default OpenSea subscription during initialization.\n */\nabstract contract InitializableDefaultOperatorFilterer is InitializableOperatorFilterer {\n    \n    /// @dev The default subscription address\n    address internal constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    /// @dev The parameters are ignored, and the default subscription values are used instead.\n    function initializeOperatorFilterer(address /*subscriptionOrRegistrantToCopy*/, bool /*subscribe*/) public virtual override {\n        super.initializeOperatorFilterer(DEFAULT_SUBSCRIPTION, true);\n    }\n}\n"
    },
    "limit-break-contracts/contracts/opensea/operator-filter-registry/InitializableOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {IOperatorFiltererInitializer} from \"../../initializable/IOperatorFiltererInitializer.sol\";\n\n/**\n * @title  InitializableOperatorFilterer\n * @notice Abstract contract whose initializer function automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         This is safe for use in EIP-1167 clones\n */\nabstract contract InitializableOperatorFilterer is IOperatorFiltererInitializer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY = IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function initializeOperatorFilterer(address subscriptionOrRegistrantToCopy, bool subscribe) public virtual override {\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    },
    "limit-break-contracts/contracts/opensea/operator-filter-registry/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    },
    "limit-break-contracts/contracts/presets/BlacklistedTransferAdventureNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../adventures/AdventureNFT.sol\";\nimport \"../opensea/operator-filter-registry/InitializableDefaultOperatorFilterer.sol\";\n\n/**\n * @title BlacklistedTransferAdventureNFT\n * @author Limit Break, Inc.\n * @notice Extends AdventureNFT, adding whitelisted transfer mechanisms.\n */\nabstract contract BlacklistedTransferAdventureNFT is AdventureNFT, InitializableDefaultOperatorFilterer {\n\n    function setApprovalForAll(address operator, bool approved) public virtual override onlyAllowedOperatorApproval(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    function approve(address operator, uint256 tokenId) public virtual override onlyAllowedOperatorApproval(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override onlyAllowedOperator(from) {\n        super.transferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override onlyAllowedOperator(from) {\n        super.safeTransferFrom(from, to, tokenId, data);\n    }\n}"
    },
    "limit-break-contracts/contracts/utils/access/InitializableOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../../initializable/IOwnableInitializer.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nerror CallerIsNotTheContractOwner();\nerror NewOwnerIsTheZeroAddress();\nerror OwnerAlreadyInitialized();\n\n/**\n * @title InitializableOwnable\n * @author Limit Break, Inc. and OpenZeppelin\n * @notice A tailored version of the {Ownable}  permissions component from OpenZeppelin that is compatible with EIP-1167.\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * Based on OpenZeppelin contracts commit hash 3dac7bbed7b4c0dbf504180c33e8ed8e350b93eb.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This version adds an `initializeOwner` call for use with EIP-1167, \n * as the constructor will not be called during an EIP-1167 operation.\n * Because initializeOwner should only be called once and requires that \n * the owner is not assigned, the `renounceOwnership` function has been removed to avoid\n * a scenario where a contract could be left without an owner to perform admin protected functions.\n */\nabstract contract InitializableOwnable is Context, IOwnableInitializer {\n    address private _owner;\n\n    /// @dev Emitted when contract ownership has been transferred.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev When EIP-1167 is used to clone a contract that inherits Ownable permissions,\n     * this is required to assign the initial contract owner, as the constructor is\n     * not called during the cloning process.\n     */\n    function initializeOwner(address owner_) public override {\n      if(_owner != address(0)) {\n          revert OwnerAlreadyInitialized();\n      }\n\n      _transferOwnership(owner_);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if(owner() != _msgSender()) {\n            revert CallerIsNotTheContractOwner();\n        }\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        if(newOwner == address(0)) {\n            revert NewOwnerIsTheZeroAddress();\n        }\n\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "limit-break-contracts/contracts/utils/tokens/ClaimableHolderMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./SequentialMintBase.sol\";\nimport \"./ClaimPeriodBase.sol\";\nimport \"../access/InitializableOwnable.sol\";\nimport \"../../initializable/IRootCollectionInitializer.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nerror CallerDoesNotOwnRootTokenId();\nerror CollectionAddressIsNotAnERC721Token();\nerror InputArrayLengthMismatch();\nerror InvalidRootCollectionAddress();\nerror InvalidRootCollectionTokenId();\nerror MaxSupplyOfRootTokenCannotBeZero();\nerror MustSpecifyAtLeastOneRootCollection();\nerror RootCollectionsAlreadyInitialized();\nerror RootCollectionHasNotBeenInitialized();\nerror TokenIdAlreadyClaimed();\nerror TokensPerClaimMustBeBetweenOneAndTen();\nerror MaxNumberOfRootCollectionsExceeded();\nerror BatchSizeMustBeGreaterThanZero();\nerror BatchSizeGreaterThanMaximum();\n\n/**\n * @title ClaimableHolderMint\n * @author Limit Break, Inc.\n * @notice A contract mix-in that may optionally be used with extend ERC-721 tokens with sequential role-based minting capabilities.\n * @dev Inheriting contracts must implement `_mintToken` and implement EIP-165 support as shown:\n *\n * function supportsInterface(bytes4 interfaceId) public view virtual override(AdventureNFT, IERC165) returns (bool) {\n *     return\n *     interfaceId == type(IRootCollectionInitializer).interfaceId ||\n *     super.supportsInterface(interfaceId);\n *  }\n *\n */\nabstract contract ClaimableHolderMint is InitializableOwnable, ClaimPeriodBase, SequentialMintBase, ReentrancyGuard, IRootCollectionInitializer {\n\n    struct ClaimableRootCollection {\n        /// @dev Indicates whether or not this is a root collection\n        bool isRootCollection;\n\n        /// @dev This is the root ERC-721 contract from which claims can be made\n        IERC721 rootCollection;\n\n        /// @dev Max supply of the root collection\n        uint256 maxSupply;\n\n        /// @dev Number of tokens each user should get per token id claim\n        uint256 tokensPerClaim;\n\n        /// @dev Bitmap that helps determine if a token was ever claimed previously\n        uint256[] claimedTokenTracker;\n    }\n\n    /// @dev The maximum amount of minted tokens from one batch submission.\n    uint256 private constant MAX_MINTS_PER_TRANSACTION = 300;\n\n    /// @dev The maximum amount of Root Collections permitted\n    uint256 private constant MAX_ROOT_COLLECTIONS = 25;\n\n    /// @dev True if root collections have been initialized, false otherwise.\n    bool private initializedRootCollections;\n\n    /// @dev Mapping from root collection address to claim details\n    mapping (address => ClaimableRootCollection) private rootCollectionLookup;\n\n    /// @dev Emitted when a holder claims a mint\n    event ClaimMinted(address indexed rootCollection, uint256 indexed rootCollectionTokenId, uint256 startTokenId, uint256 endTokenId);\n\n    /// @dev Initializes root collection parameters that determine how the claims will work.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    /// Params are memory to allow for initialization within constructors.\n    /// The sum of all root collections max supplies cannot exceed 256,000 tokens.\n    ///\n    /// Throws when called by non-owner of contract.\n    /// Throws when the root collection has already been initialized.\n    /// Throws when the specified root collection is not an ERC721 token.\n    /// Throws when the number of tokens per claim is not between 1 and 10.\n    function initializeRootCollections(address[] memory rootCollections_, uint256[] memory rootCollectionMaxSupplies_, uint256[] memory tokensPerClaimArray_) public override onlyOwner {\n        if(initializedRootCollections) {\n            revert RootCollectionsAlreadyInitialized();\n        }\n\n        uint256 rootCollectionsArrayLength = rootCollections_.length;\n\n        _requireInputArrayLengthsMatch(rootCollectionsArrayLength, rootCollectionMaxSupplies_.length);\n        _requireInputArrayLengthsMatch(rootCollectionsArrayLength, tokensPerClaimArray_.length);\n\n        if(rootCollectionsArrayLength == 0) {\n            revert MustSpecifyAtLeastOneRootCollection();\n        }\n        if(rootCollectionsArrayLength > MAX_ROOT_COLLECTIONS) {\n            revert MaxNumberOfRootCollectionsExceeded();\n        }\n\n        for(uint256 i = 0; i < rootCollectionsArrayLength;) {\n            address rootCollection_ = rootCollections_[i];\n            uint256 rootCollectionMaxSupply_ = rootCollectionMaxSupplies_[i];\n            uint256 tokensPerClaim_ = tokensPerClaimArray_[i];\n            if(!IERC165(rootCollection_).supportsInterface(type(IERC721).interfaceId)) {\n                revert CollectionAddressIsNotAnERC721Token();\n            }\n\n            if(tokensPerClaim_ == 0 || tokensPerClaim_ > 10) {\n                revert TokensPerClaimMustBeBetweenOneAndTen();\n            }\n\n            if(rootCollectionMaxSupply_ == 0) {\n                revert MaxSupplyOfRootTokenCannotBeZero();\n            }\n\n            rootCollectionLookup[rootCollection_].isRootCollection = true;\n            rootCollectionLookup[rootCollection_].rootCollection = IERC721(rootCollection_);\n            rootCollectionLookup[rootCollection_].maxSupply = rootCollectionMaxSupply_;\n            rootCollectionLookup[rootCollection_].tokensPerClaim = tokensPerClaim_;\n\n            unchecked {\n                // Initialize memory to use for tracking token ids that have been minted\n                // The bit corresponding to token id defaults to 1 when unminted,\n                // and will be set to 0 upon mint.\n                uint256 numberOfTokenTrackerSlots = _getNumberOfTokenTrackerSlots(rootCollectionMaxSupply_);\n                for(uint256 j = 0; j < numberOfTokenTrackerSlots; ++j) {\n                    rootCollectionLookup[rootCollection_].claimedTokenTracker.push(type(uint256).max);\n                }\n\n                ++i;\n            }\n        }\n\n        _initializeNextTokenIdCounter();\n        initializedRootCollections = true;\n    }\n\n    /// @notice Allows a user to claim/mint one or more tokens pegged to their ownership of a list of specified token ids\n    ///\n    /// Throws when an empty array of root collection token ids is provided.\n    /// Throws when the amount of claimed tokens exceeds the max claimable amount.\n    /// Throws when the claim period has not opened.\n    /// Throws when the claim period has closed.\n    /// Throws when the caller does not own the specified token id from the root collection.\n    /// Throws when the root token id has already been claimed.\n    /// Throws if safe mint receiver is not an EOA or a contract that can receive tokens.\n    /// Postconditions:\n    /// ---------------\n    /// The root collection and token ID combinations are marked as claimed in the root collection's claimed token tracker.\n    /// `quantity` tokens are minted to the msg.sender, where `quantity` is the amount of tokens per claim * length of the rootCollectionTokenIds array.\n    /// `quantity` ClaimMinted events have been emitted, where `quantity` is the amount of tokens per claim * length of the rootCollectionTokenIds array.\n    function claimBatch(address rootCollectionAddress, uint256[] calldata rootCollectionTokenIds) external nonReentrant {\n        _requireClaimsOpen();\n\n        if(!initializedRootCollections) {\n            revert RootCollectionHasNotBeenInitialized();\n        }\n\n        if (rootCollectionTokenIds.length == 0) {\n            revert BatchSizeMustBeGreaterThanZero();\n        }\n\n        ClaimableRootCollection storage rootCollectionDetails = _getRootCollectionDetailsSafe(rootCollectionAddress);\n\n        uint256 maxBatchSize = MAX_MINTS_PER_TRANSACTION / rootCollectionDetails.tokensPerClaim;\n\n        if (rootCollectionTokenIds.length > maxBatchSize) {\n            revert BatchSizeGreaterThanMaximum();\n        }\n\n        for(uint256 i = 0; i < rootCollectionTokenIds.length;) {\n            _claim(rootCollectionDetails, rootCollectionTokenIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @dev Processes a claim for a Root Collection + Root Collection Token ID Combination\n    ///\n    /// Throws when the caller does not own the specified token id from the root collection.\n    /// Throws when the root token id has already been claimed.\n    /// Throws if safe mint receiver is not an EOA or a contract that can receive tokens.\n    /// Postconditions:\n    /// ---------------\n    /// The root collection and tokenID combination are marked as claimed in the root collection's claimed token tracker.\n    /// `quantity` tokens are minted to the msg.sender, where `quantity` is the amount of tokens per claim.\n    /// The nextTokenId counter is advanced by the `quantity` of tokens minted.\n    /// `quantity` ClaimMinted events have been emitted, where `quantity` is the amount of tokens per claim.\n    function _claim(ClaimableRootCollection storage rootCollectionDetails, uint256 rootCollectionTokenId) internal {\n        if(rootCollectionDetails.rootCollection.ownerOf(rootCollectionTokenId) != _msgSender()) {\n            revert CallerDoesNotOwnRootTokenId();\n        }\n\n        (bool claimed, uint256 slot, uint256 offset, uint256 slotValue) = _isClaimed(rootCollectionDetails, rootCollectionTokenId);\n        if(claimed) {\n            revert TokenIdAlreadyClaimed();\n        }\n\n        uint256 claimedTokenId = getNextTokenId();\n        uint256 tokensPerClaim_ = rootCollectionDetails.tokensPerClaim;\n        emit ClaimMinted(address(rootCollectionDetails.rootCollection), rootCollectionTokenId, claimedTokenId, claimedTokenId + tokensPerClaim_ - 1);\n\n        rootCollectionDetails.claimedTokenTracker[slot] = slotValue & ~(uint256(1) << offset);\n\n        unchecked {\n            _advanceNextTokenIdCounter(tokensPerClaim_);\n\n            for(uint256 i = 0; i < tokensPerClaim_; ++i) {\n                _safeMintToken(_msgSender(), claimedTokenId + i);\n            }\n        }\n    }\n\n    /// @notice Returns true if the specified token id has been claimed\n    function isClaimed(address rootCollectionAddress, uint256 tokenId) public view returns (bool) {\n        ClaimableRootCollection storage rootCollectionDetails = _getRootCollectionDetailsSafe(rootCollectionAddress);\n        \n        if(tokenId > rootCollectionDetails.maxSupply) {\n            revert InvalidRootCollectionTokenId();\n        }\n\n        (bool claimed,,,) = _isClaimed(rootCollectionDetails, tokenId);\n        return claimed;\n    }\n\n    /// @dev Returns whether or not the specified token id has been claimed/minted as well as the bitmap slot/offset/slot value of the token id\n    function _isClaimed(ClaimableRootCollection storage rootCollectionDetails, uint256 tokenId) internal view returns (bool claimed, uint256 slot, uint256 offset, uint256 slotValue) {\n        unchecked {\n            slot = tokenId / 256;\n            offset = tokenId % 256;\n            slotValue = rootCollectionDetails.claimedTokenTracker[slot];\n            claimed = ((slotValue >> offset) & uint256(1)) == 0;\n        }\n        \n        return (claimed, slot, offset, slotValue);\n    }\n\n    /// @dev Determines number of slots required to track minted tokens across the max supply\n    function _getNumberOfTokenTrackerSlots(uint256 maxSupply_) internal pure returns (uint256 tokenTrackerSlotsRequired) {\n        unchecked {\n            // Add 1 because we are starting valid token id range at 1 instead of 0\n            uint256 maxSupplyPlusOne = 1 + maxSupply_;\n            tokenTrackerSlotsRequired = maxSupplyPlusOne / 256;\n            if(maxSupplyPlusOne % 256 > 0) {\n                ++tokenTrackerSlotsRequired;\n            }\n        }\n\n        return tokenTrackerSlotsRequired;\n    }\n\n    /// @dev Validates that the length of two input arrays matched.\n    /// Throws if the array lengths are mismatched.\n    function _requireInputArrayLengthsMatch(uint256 inputArray1Length, uint256 inputArray2Length) internal pure {\n        if(inputArray1Length != inputArray2Length) {\n            revert InputArrayLengthMismatch();\n        }\n    }\n\n    /// @dev Inheriting contracts must implement the token minting logic - inheriting contract should use safe mint, or something equivalent\n    /// The minting function should throw if `to` is address(0) or `to` is a contract that does not implement IERC721Receiver.\n    function _safeMintToken(address to, uint256 tokenId) internal virtual;\n\n    /// @dev Safely gets a storage pointer to the details of a root collection.  Performs validation and throws if the value is not present in the mapping, preventing\n    /// the possibility of overwriting an unexpected storage slot.\n    ///\n    /// Throws when the specified root collection address has not been explicitly set as a key in the mapping.\n    function _getRootCollectionDetailsSafe(address rootCollectionAddress) private view returns (ClaimableRootCollection storage) {\n        ClaimableRootCollection storage rootCollectionDetails = rootCollectionLookup[rootCollectionAddress];\n\n        if(!rootCollectionDetails.isRootCollection) {\n            revert InvalidRootCollectionAddress();\n        }\n\n        return rootCollectionDetails;\n    }\n}"
    },
    "limit-break-contracts/contracts/utils/tokens/ClaimPeriodBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../access/InitializableOwnable.sol\";\n\n\nerror ClaimsMustBeClosedToReopen();\nerror ClaimPeriodAlreadyInitialized();\nerror ClaimPeriodIsNotOpen();\nerror ClaimPeriodMustBeClosedInTheFuture();\nerror ClaimPeriodMustBeInitialized();\n\n/**\n * @title ClaimPeriodController\n * @author Limit Break, Inc.\n * @notice In order to support multiple contracts with enforced claim periods, the claim period has been moved to this base contract.\n *\n */\nabstract contract ClaimPeriodBase is InitializableOwnable {\n\n    /// @dev True if claims have been initalized, false otherwise.\n    bool private claimPeriodInitialized;\n\n    /// @dev The timestamp when the claim period closes - when this value is zero and claims are open, the claim period is open indefinitely\n    uint256 private claimPeriodClosingTimestamp;\n\n    /// @dev Emitted when a claim period is scheduled to be closed.\n    event ClaimPeriodClosing(uint256 claimPeriodClosingTimestamp);\n\n    /// @dev Emitted when a claim period is scheduled to be opened.\n    event ClaimPeriodOpened(uint256 claimPeriodClosingTimestamp);\n\n    /// @dev Opens the claim period.  Claims can be closed with a custom amount of warning time using the closeClaims function.\n    /// Accepts a claimPeriodClosingTimestamp_ timestamp which will open the period ending at that time (in seconds)\n    /// NOTE: Use as high a window as possible to prevent gas wars for claiming\n    /// For an unbounded claim window, pass in type(uint256).max\n    function openClaims(uint256 claimPeriodClosingTimestamp_) external onlyOwner {\n        if(claimPeriodClosingTimestamp_ <= block.timestamp) {\n            revert ClaimPeriodMustBeClosedInTheFuture();\n        }\n\n        if(claimPeriodInitialized) {\n            if(block.timestamp < claimPeriodClosingTimestamp) {\n                revert ClaimsMustBeClosedToReopen();\n            }\n        } else {\n            claimPeriodInitialized = true;\n        }\n\n        claimPeriodClosingTimestamp = claimPeriodClosingTimestamp_;\n\n        emit ClaimPeriodOpened(claimPeriodClosingTimestamp_);\n    }\n\n    /// @dev Closes claims at a specified timestamp.\n    ///\n    /// Throws when the specified timestamp is not in the future.\n    function closeClaims(uint256 claimPeriodClosingTimestamp_) external onlyOwner {\n        _requireClaimsOpen();\n\n        if(claimPeriodClosingTimestamp_ <= block.timestamp) {\n            revert ClaimPeriodMustBeClosedInTheFuture();\n        }\n\n        claimPeriodClosingTimestamp = claimPeriodClosingTimestamp_;\n        \n        emit ClaimPeriodClosing(claimPeriodClosingTimestamp_);\n    }\n\n    /// @dev Returns the Claim Period Timestamp\n    function getClaimPeriodClosingTimestamp() external view returns (uint256) {\n        return claimPeriodClosingTimestamp;\n    }\n\n    /// @notice Returns true if the claim period has been opened, false otherwise\n    function isClaimPeriodOpen() external view returns (bool) {\n        return _isClaimPeriodOpen();\n    }\n\n    /// @dev Returns true if claim period is open, false otherwise.\n    function _isClaimPeriodOpen() internal view returns (bool) {\n        return claimPeriodInitialized && block.timestamp < claimPeriodClosingTimestamp;\n    }\n\n    /// @dev Validates that the claim period is open.\n    /// Throws if claims are not open.\n    function _requireClaimsOpen() internal view {\n        if(!_isClaimPeriodOpen()) {\n            revert ClaimPeriodIsNotOpen();\n        }\n    }\n\n}"
    },
    "limit-break-contracts/contracts/utils/tokens/InitializableERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../access/InitializableOwnable.sol\";\nimport \"../../initializable/IERC721Initializer.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nerror AlreadyInitializedERC721();\n\n/**\n * @title InitializableERC721\n * @author Limit Break, Inc.\n * @notice Wraps OpenZeppelin ERC721 implementation and makes it compatible with EIP-1167.\n * @dev Because OpenZeppelin's `_name` and `_symbol` storage variables are private and inaccessible, \n * this contract defines two new storage variables `_contractName` and `_contractSymbol` and returns them\n * from the `name()` and `symbol()` functions instead.\n */\nabstract contract InitializableERC721 is InitializableOwnable, ERC721, IERC721Initializer {\n\n    /// @notice Specifies whether or not the contract is initialized\n    bool private initializedERC721;\n\n    // Token name\n    string internal _contractName;\n\n    // Token symbol\n    string internal _contractSymbol;\n\n    /// @dev Initializes parameters of ERC721 tokens.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    function initializeERC721(string memory name_, string memory symbol_) public override onlyOwner {\n        if(initializedERC721) {\n            revert AlreadyInitializedERC721();\n        }\n\n        _contractName = name_;\n        _contractSymbol = symbol_;\n\n        initializedERC721 = true;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721Initializer).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _contractName;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _contractSymbol;\n    }\n}\n"
    },
    "limit-break-contracts/contracts/utils/tokens/MerkleWhitelistMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./SequentialMintBase.sol\";\nimport \"./ClaimPeriodBase.sol\";\nimport \"../access/InitializableOwnable.sol\";\nimport \"../../initializable/IMerkleRootInitializer.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nerror AddressHasAlreadyClaimed();\nerror InvalidProof();\nerror MerkleRootAlreadyInitialized();\nerror MerkleRootHasNotBeenInitialized();\nerror MerkleRootCannotBeZero();\nerror MintedQuantityMustBeGreaterThanZero();\n\n/**\n * @title MerkleWhitelistMint\n * @author Limit Break, Inc.\n * @notice A contract mix-in that may optionally be used with extend ERC-721 tokens with merkle-proof based whitelist minting capabilities.\n * @dev Inheriting contracts must implement `_safeMintToken` and implement EIP-165 support as shown:\n *\n * function supportsInterface(bytes4 interfaceId) public view virtual override(AdventureNFT, IERC165) returns (bool) {\n *     return\n *     interfaceId == type(IMerkleRootInitializer).interfaceId ||\n *     super.supportsInterface(interfaceId);\n *  }\n *\n */\nabstract contract MerkleWhitelistMint is InitializableOwnable, ClaimPeriodBase, SequentialMintBase, ReentrancyGuard, IMerkleRootInitializer {\n\n    /// @dev This is the root ERC-721 contract from which claims can be made\n    bytes32 private merkleRoot;\n\n    /// @dev Mapping that tracks whether or not an address has claimed their whitelist mint\n    mapping (address => bool) private whitelistClaimed;\n\n    /// @dev Initializes the merkle root containing the whitelist.\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    ///\n    /// Throws when called by non-owner of contract.\n    /// Throws when the merkle root has already been initialized.\n    /// Throws when the specified merkle root is zero.\n    function initializeMerkleRoot(bytes32 merkleRoot_) public override onlyOwner {\n        if(merkleRoot != bytes32(0)) {\n            revert MerkleRootAlreadyInitialized();\n        }\n\n        if(merkleRoot_ == bytes32(0)) {\n            revert MerkleRootCannotBeZero();\n        }\n\n        merkleRoot = merkleRoot_;\n        _initializeNextTokenIdCounter();\n    }\n\n    /// @notice Mints the specified quantity to the calling address if the submitted merkle proof successfully verifies the reserved quantity for the caller in the whitelist.\n    ///\n    /// Throws when the claim period has not opened.\n    /// Throws when the claim period has closed.\n    /// Throws if a merkle root has not been set.\n    /// Throws if the caller has already successfully claimed.\n    /// Throws if the submitted merkle proof does not successfully verify the reserved quantity for the caller.\n    function whitelistMint(uint256 quantity, bytes32[] calldata merkleProof_) external nonReentrant {\n        _requireClaimsOpen();\n\n        bytes32 merkleRootCache = merkleRoot;\n\n        if(merkleRootCache == bytes32(0)) {\n            revert MerkleRootHasNotBeenInitialized();\n        }\n\n        if(whitelistClaimed[_msgSender()]) {\n            revert AddressHasAlreadyClaimed();\n        }\n\n        if(!MerkleProof.verify(merkleProof_, merkleRootCache, keccak256(abi.encodePacked(_msgSender(), quantity)))) {\n            revert InvalidProof();\n        }\n\n        whitelistClaimed[_msgSender()] = true;\n        _mintBatch(_msgSender(), quantity);\n    }\n\n    /// @notice Returns the merkle root\n    function getMerkleRoot() external view returns (bytes32) {\n        return merkleRoot;\n    }\n\n    /// @notice Returns true if the account already claimed their whitelist mint, false otherwise\n    function isWhitelistClaimed(address account) external view returns (bool) {\n        return whitelistClaimed[account];\n    }\n\n    /// @dev Batch mints the specified quantity to the specified address.\n    /// Throws if quantity is zero.\n    /// Throws if `to` is a smart contract that does not implement IERC721 receiver.\n    function _mintBatch(address to, uint256 quantity) private {\n\n        if(quantity == 0) {\n            revert MintedQuantityMustBeGreaterThanZero();\n        }\n\n        uint256 tokenIdToMint = getNextTokenId();\n        unchecked {\n            _advanceNextTokenIdCounter(quantity);\n\n            for(uint256 i = 0; i < quantity; ++i) {\n                _safeMintToken(to, tokenIdToMint + i);\n            }\n        }\n    }\n\n    /// @dev Inheriting contracts must implement the token minting logic - inheriting contract should use safe mint, or something equivalent\n    /// The minting function should throw if `to` is address(0) or `to` is a contract that does not implement IERC721Receiver.\n    function _safeMintToken(address to, uint256 tokenId) internal virtual;\n}"
    },
    "limit-break-contracts/contracts/utils/tokens/SequentialMintBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../access/InitializableOwnable.sol\";\nimport \"../../initializable/IRootCollectionInitializer.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @title SequentialMintBase\n * @author Limit Break, Inc.\n * @dev In order to support multiple sequential mint mix-ins in a single contract, the token id counter has been moved to this based contract.\n */\nabstract contract SequentialMintBase {\n\n    /// @dev The next token id that will be minted - if zero, the next minted token id will be 1\n    uint256 private nextTokenIdCounter;\n\n    /// @dev Minting mixins must use this function to advance the next token id counter.\n    function _initializeNextTokenIdCounter() internal {\n        if(nextTokenIdCounter == 0) {\n            nextTokenIdCounter = 1;\n        }\n    }\n\n    /// @dev Minting mixins must use this function to advance the next token id counter.\n    function _advanceNextTokenIdCounter(uint256 amount) internal {\n        nextTokenIdCounter += amount;\n    }\n\n    /// @dev Returns the next token id counter value\n    function getNextTokenId() public view returns (uint256) {\n        return nextTokenIdCounter;\n    }\n}"
    },
    "limit-break-contracts/contracts/utils/tokens/SignedApprovalMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./SequentialMintBase.sol\";\nimport \"../access/InitializableOwnable.sol\";\nimport \"../../initializable/ISignedApprovalInitializer.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nerror AddressAlreadyMinted();\nerror InvalidSignature();\nerror MaxQuantityMustBeGreaterThanZero();\nerror MintExceedsMaximumAmountBySignedApproval();\nerror SignedClaimsAreDecommissioned();\nerror SignerAlreadyInitialized();\nerror SignerCannotBeInitializedAsAddressZero();\nerror SignerIsAddressZero();\n\n\n/**\n* @title SignedApprovalMint\n* @author Limit Break, Inc.\n* @notice A contract mix-in that may optionally be used with extend ERC-721 tokens with Signed Approval minting capabilities, allowing an approved signer to issue a limited amount of mints.\n* @dev Inheriting contracts must implement `_mintToken` and implement EIP-165 support as shown:\n*\n* function supportsInterface(bytes4 interfaceId) public view virtual override(AdventureNFT, IERC165) returns (bool) {\n*     return\n*     interfaceId == type(ISignedApproverInitializer).interfaceId ||\n*     super.supportsInterface(interfaceId);\n*  }\n*\n*/\nabstract contract SignedApprovalMint is InitializableOwnable, SequentialMintBase, ReentrancyGuard, EIP712, ISignedApprovalInitializer {\n\n    /// @dev Returns true if signed claims have been decommissioned, false otherwise.\n    bool private _signedClaimsDecommissioned;\n\n    /// @dev The address of the signer for approved mints.\n    address private _approvalSigner;\n\n    /// @dev The maximum amount of mints done by the approval signer\n    /// NOTE: This is an aggregate of all signers, updating signer will not reset or modify this amount.\n    uint256 private _maxQuantityMintable;\n\n    /// @dev The amount minted by all signers.\n    /// NOTE: This is an aggregate of all signers, updating signer will not reset or modify this amount.\n    uint256 private _mintedAmount;\n\n    /// @dev Mapping of addresses who have already minted \n    mapping(address => bool) private addressMinted;\n\n    /// @dev Emitted when signatures are decommissioned\n    event SignedClaimsDecommissioned();\n\n    /// @dev Emitted when a signer is updated\n    event SignerUpdated(address oldSigner, address newSigner); \n\n    /// @notice Allows a user to claim/mint one or more tokens as approved by the approved signer\n    ///\n    /// Throws when a signature is invalid.\n    /// Throws when the quantity provided does not match the quantity on the signature provided.\n    /// Throws when the address has already claimed a token.\n    /// Throws if safe mint receiver is not an EOA or a contract that can receive tokens.\n    function claimSignedMint(bytes calldata signature, uint256 quantity) external nonReentrant {\n        if (addressMinted[_msgSender()]) {\n            revert AddressAlreadyMinted();\n        }\n\n        if (_approvalSigner == address(0)) { \n            revert SignerIsAddressZero();\n        }\n\n        _requireSignedClaimsActive();\n\n        uint256 newTotal = _mintedAmount + quantity;\n        if (newTotal > _maxQuantityMintable) {\n            revert MintExceedsMaximumAmountBySignedApproval();\n        }\n\n        _mintedAmount = newTotal;\n\n        bytes32 hash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    keccak256(\"Approved(address wallet,uint256 quantity)\"),\n                    _msgSender(),\n                    quantity\n                )\n            )\n        );\n\n        if (_approvalSigner != ECDSA.recover(hash, signature)) {\n            revert InvalidSignature();\n        }\n\n        addressMinted[_msgSender()] = true;\n\n        uint256 tokenIdToMint = getNextTokenId();\n        unchecked {\n            _advanceNextTokenIdCounter(quantity);\n\n            for(uint256 i = 0; i < quantity; ++i) {\n                _safeMintToken(_msgSender(), tokenIdToMint + i);\n            }\n        }\n    }\n\n    /// @notice Decommissions signed approvals\n    /// This is a permanent decommissioning, once this is set, no further signatures can be claimed\n    ///\n    /// Throws if caller is not owner\n    /// Throws if already decommissioned\n    function decommissionSignedApprovals() external onlyOwner {\n        _requireSignedClaimsActive();\n        _signedClaimsDecommissioned = true;\n        emit SignedClaimsDecommissioned();\n    }\n\n    /// @dev Initializes the signer address for signed approvals\n    /// This cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\n    ///\n    /// Throws when called by non-owner of contract.\n    /// Throws when the signer has already been initialized.\n    /// Throws when the provided signer is address(0).\n    /// Throws when maxQuantity = 0\n    function initializeSigner(address signer, uint256 maxQuantity) public override onlyOwner {\n        if(_approvalSigner != address(0)) {\n            revert SignerAlreadyInitialized();\n        }\n        if(signer == address(0)) {\n            revert SignerCannotBeInitializedAsAddressZero();\n        }\n        if(maxQuantity == 0) {\n            revert MaxQuantityMustBeGreaterThanZero();\n        }\n        _initializeNextTokenIdCounter();\n        _approvalSigner = signer;\n        _maxQuantityMintable = maxQuantity;\n    }\n\n    /// @dev Allows signer to update the signer address\n    /// This allows the signer to set new signer to address(0) to prevent future allowed mints\n    /// NOTE: Setting signer to address(0) is irreversible - approvals will be disabled permanently and all outstanding signatures will be invalid.\n    ///\n    /// Throws when caller is not owner\n    /// Throws when current signer is address(0)\n    function setSigner(address newSigner) public onlyOwner {\n        if(_signedClaimsDecommissioned) {\n            revert SignedClaimsAreDecommissioned();\n        }\n\n        emit SignerUpdated(_approvalSigner, newSigner);\n        _approvalSigner = newSigner;\n    }\n\n    /// @notice Returns true if the provided account has already minted, false otherwise\n    function hasMintedBySignedApproval(address account) public view returns (bool) {\n        return addressMinted[account];\n    }\n\n    /// @notice Returns the address of the approved signer\n    function approvalSigner() public view returns (address) {\n        return _approvalSigner;\n    }\n\n    /// @notice Returns the maximum amount mintable by approved signers\n    function maxQuantityMintable() public view returns (uint256) {\n        return _maxQuantityMintable;\n    }\n\n    /// @notice Returns the current amount minted by approved signers\n    function mintedAmount() public view returns (uint256) {\n        return _mintedAmount;\n    }\n\n    /// @notice Returns true if signed claims have been decommissioned, false otherwise\n    function signedClaimsDecommissioned() public view returns (bool) {\n        return _signedClaimsDecommissioned;\n    }\n\n    /// @dev Internal function used to revert if signed claims are decommissioned.\n    function _requireSignedClaimsActive() internal view {\n        if(_signedClaimsDecommissioned) {\n            revert SignedClaimsAreDecommissioned();\n        }\n    }\n\n    /// @dev Inheriting contracts must implement the token minting logic - inheriting contract should use safe mint, or something equivalent\n    /// The minting function should throw if `to` is address(0) or `to` is a contract that does not implement IERC721Receiver.\n    function _safeMintToken(address to, uint256 tokenId) internal virtual;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1500
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}