{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\n\nimport \"./EIP712.sol\";\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "lib/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "src/CrabNetting.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.13;\n\n// interface\nimport {IERC20} from \"openzeppelin/token/ERC20/IERC20.sol\";\nimport {IWETH} from \"../src/interfaces/IWETH.sol\";\nimport {IOracle} from \"../src/interfaces/IOracle.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport {ICrabStrategyV2} from \"../src/interfaces/ICrabStrategyV2.sol\";\nimport {IController} from \"../src/interfaces/IController.sol\";\n\n// contract\nimport {Ownable} from \"openzeppelin/access/Ownable.sol\";\nimport {EIP712} from \"openzeppelin/utils/cryptography/draft-EIP712.sol\";\nimport {ECDSA} from \"openzeppelin/utils/cryptography/ECDSA.sol\";\n\n/// @dev order struct for a signed order from market maker\nstruct Order {\n    uint256 bidId;\n    address trader;\n    uint256 quantity;\n    uint256 price;\n    bool isBuying;\n    uint256 expiry;\n    uint256 nonce;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n\n/// @dev struct to store proportional amounts of erc20s (received or to send)\nstruct Portion {\n    uint256 crab;\n    uint256 eth;\n    uint256 sqth;\n}\n\n/// @dev params for deposit auction\nstruct DepositAuctionParams {\n    /// @dev USDC to deposit\n    uint256 depositsQueued;\n    /// @dev minETH equivalent to get from uniswap of the USDC to deposit\n    uint256 minEth;\n    /// @dev total ETH to deposit after selling the minted SQTH\n    uint256 totalDeposit;\n    /// @dev orders to buy sqth\n    Order[] orders;\n    /// @dev price from the auction to sell sqth\n    uint256 clearingPrice;\n    /// @dev remaining ETH to flashDeposit\n    uint256 ethToFlashDeposit;\n    /// @dev fee to pay uniswap for ethUSD swap\n    uint24 ethUSDFee;\n    /// @dev fee to pay uniswap for sqthETH swap\n    uint24 flashDepositFee;\n}\n\n/// @dev params for withdraw auction\nstruct WithdrawAuctionParams {\n    /// @dev amont of crab to queue for withdrawal\n    uint256 crabToWithdraw;\n    /// @dev orders that sell sqth to the auction\n    Order[] orders;\n    /// @dev price that the auction pays for the purchased sqth\n    uint256 clearingPrice;\n    /// @dev minUSDC to receive from swapping the ETH obtained by withdrawing\n    uint256 minUSDC;\n    /// @dev uniswap fee for swapping eth to USD;\n    uint24 ethUSDFee;\n}\n\n/// @dev receipt used to store deposits and withdraws\nstruct Receipt {\n    /// @dev address of the depositor or withdrawer\n    address sender;\n    /// @dev usdc amount to queue for deposit or crab amount to queue for withdrawal\n    uint256 amount;\n    /// @dev time of deposit\n    uint256 timestamp;\n}\n\n/**\n * Crab netting error codes\n * N1: deposit amount smaller than minimum OTC amount\n * N2: auction is live\n * N3: remaining amount smaller than minimum, consider removing full balance\n * N4: force withdraw after 1 week from deposit\n * N5: withdraw amount smaller than minimum OTC amount\n * N6: remaining amount smaller than minimum, consider removing full balance\n * N7: Not enough deposits to net\n * N8: Not enough withdrawals to net\n * N9: signature incorrect\n * N10: order expired\n * N11: Min ETH out too low\n * N12: auction order not buying sqth\n * N13: buy order price less than clearing\n * N14: not enough buy orders for sqth\n * N15: auction order is not selling\n * N16: sell order price greater than clearing\n * N17: min USDC out too low\n * N18: twap period cannot be less than 180\n * N19: Price tolerance has to be less than 20%\n * N20: Nonce already used\n * N21: Price too high relative to Uniswap twap.\n * N22: Price too low relative to Uniswap twap.\n * N23: Crab Price too high\n * N24: Crab Price too low\n * N25: only weth and crab can send me monies\n */\n\n/**\n * @dev CrabNetting contract\n * @notice Contract for Netting Deposits and Withdrawals\n * @author Opyn team\n */\ncontract CrabNetting is Ownable, EIP712 {\n    /// @dev typehash for signed orders\n    bytes32 private constant _CRAB_NETTING_TYPEHASH = keccak256(\n        \"Order(uint256 bidId,address trader,uint256 quantity,uint256 price,bool isBuying,uint256 expiry,uint256 nonce)\"\n    );\n    /// @dev owner sets to true when starting auction\n    bool public isAuctionLive;\n\n    /// @dev sqth twap period\n    uint32 public immutable sqthTwapPeriod;\n    /// @dev twap period to use for auction calculations\n    uint32 public auctionTwapPeriod = 420 seconds;\n\n    /// @dev min USDC amounts to withdraw or deposit via netting\n    uint256 public minUSDCAmount;\n\n    /// @dev min CRAB amounts to withdraw or deposit via netting\n    uint256 public minCrabAmount;\n\n    // @dev OTC price must be within this distance of the uniswap twap price\n    uint256 public otcPriceTolerance = 5e16; // 5%\n    // @dev OTC price tolerance cannot exceed 20%\n    uint256 public constant MAX_OTC_PRICE_TOLERANCE = 2e17; // 20%\n\n    /// @dev address for ERC20 tokens\n    address public immutable usdc;\n    address public immutable crab;\n    address public immutable weth;\n    address public immutable sqth;\n\n    /// @dev address for uniswap router\n    ISwapRouter public immutable swapRouter;\n\n    /// @dev address for uniswap oracle\n    address public immutable oracle;\n\n    /// @dev address for sqth eth pool\n    address public immutable ethSqueethPool;\n\n    /// @dev address for usdc eth pool\n    address public immutable ethUsdcPool;\n\n    /// @dev address for sqth controller\n    address public immutable sqthController;\n\n    /// @dev array index of last processed deposits\n    uint256 public depositsIndex;\n\n    /// @dev array index of last processed withdraws\n    uint256 public withdrawsIndex;\n\n    /// @dev array of deposit receipts\n    Receipt[] public deposits;\n    /// @dev array of withdrawal receipts\n    Receipt[] public withdraws;\n\n    /// @dev usd amount to deposit for an address\n    mapping(address => uint256) public usdBalance;\n\n    /// @dev crab amount to withdraw for an address\n    mapping(address => uint256) public crabBalance;\n\n    /// @dev indexes of deposit receipts of an address\n    mapping(address => uint256[]) public userDepositsIndex;\n\n    /// @dev indexes of withdraw receipts of an address\n    mapping(address => uint256[]) public userWithdrawsIndex;\n\n    /// @dev store the used flag for a nonce for each address\n    mapping(address => mapping(uint256 => bool)) public nonces;\n\n    event USDCQueued(\n        address indexed depositor, uint256 amount, uint256 depositorsBalance, uint256 indexed receiptIndex\n    );\n\n    event USDCDeQueued(address indexed depositor, uint256 amount, uint256 depositorsBalance);\n\n    event CrabQueued(\n        address indexed withdrawer, uint256 amount, uint256 withdrawersBalance, uint256 indexed receiptIndex\n    );\n\n    event CrabDeQueued(address indexed withdrawer, uint256 amount, uint256 withdrawersBalance);\n\n    event USDCDeposited(\n        address indexed depositor,\n        uint256 usdcAmount,\n        uint256 crabAmount,\n        uint256 indexed receiptIndex,\n        uint256 refundedETH\n    );\n\n    event CrabWithdrawn(\n        address indexed withdrawer, uint256 crabAmount, uint256 usdcAmount, uint256 indexed receiptIndex\n    );\n\n    event WithdrawRejected(address indexed withdrawer, uint256 crabAmount, uint256 index);\n\n    event BidTraded(uint256 indexed bidId, address indexed trader, uint256 quantity, uint256 price, bool isBuying);\n\n    event SetAuctionTwapPeriod(uint32 previousTwap, uint32 newTwap);\n    event SetOTCPriceTolerance(uint256 previousTolerance, uint256 newOtcPriceTolerance);\n    event SetMinCrab(uint256 amount);\n    event SetMinUSDC(uint256 amount);\n    event SetDepositsIndex(uint256 newDepositsIndex);\n    event SetWithdrawsIndex(uint256 newWithdrawsIndex);\n    event NonceTrue(address sender, uint256 nonce);\n    event ToggledAuctionLive(bool isAuctionLive);\n\n    /**\n     * @notice netting contract constructor\n     * @dev initializes the erc20 address, uniswap router and approves them\n     * @param _crab address of crab contract token\n     * @param _swapRouter address of uniswap swap router\n     */\n    constructor(address _crab, address _swapRouter) EIP712(\"CRABNetting\", \"1\") {\n        crab = _crab;\n        swapRouter = ISwapRouter(_swapRouter);\n\n        sqthController = ICrabStrategyV2(_crab).powerTokenController();\n        usdc = IController(sqthController).quoteCurrency();\n        weth = ICrabStrategyV2(_crab).weth();\n        sqth = ICrabStrategyV2(_crab).wPowerPerp();\n        oracle = ICrabStrategyV2(_crab).oracle();\n        ethSqueethPool = ICrabStrategyV2(_crab).ethWSqueethPool();\n        ethUsdcPool = IController(sqthController).ethQuoteCurrencyPool();\n        sqthTwapPeriod = IController(sqthController).TWAP_PERIOD();\n\n        // approve crab and sqth so withdraw can happen\n        IERC20(sqth).approve(crab, type(uint256).max);\n\n        IERC20(weth).approve(address(swapRouter), type(uint256).max);\n        IERC20(usdc).approve(address(swapRouter), type(uint256).max);\n    }\n\n    /**\n     * @dev view function to get the domain seperator used in signing\n     */\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev toggles the value of isAuctionLive\n     */\n    function toggleAuctionLive() external onlyOwner {\n        isAuctionLive = !isAuctionLive;\n        emit ToggledAuctionLive(isAuctionLive);\n    }\n\n    /**\n     * @notice set nonce to true\n     * @param _nonce the number to be set true\n     */\n    function setNonceTrue(uint256 _nonce) external {\n        nonces[msg.sender][_nonce] = true;\n        emit NonceTrue(msg.sender, _nonce);\n    }\n\n    /**\n     * @notice set minUSDCAmount\n     * @param _amount the number to be set as minUSDC\n     */\n    function setMinUSDC(uint256 _amount) external onlyOwner {\n        minUSDCAmount = _amount;\n        emit SetMinUSDC(_amount);\n    }\n\n    /**\n     * @notice set minCrabAmount\n     * @param _amount the number to be set as minCrab\n     */\n    function setMinCrab(uint256 _amount) external onlyOwner {\n        minCrabAmount = _amount;\n        emit SetMinCrab(_amount);\n    }\n\n    /**\n     * @notice set the depositIndex so that we want to skip processing some deposits\n     * @param _newDepositsIndex the new deposits index\n     */\n    function setDepositsIndex(uint256 _newDepositsIndex) external onlyOwner {\n        depositsIndex = _newDepositsIndex;\n        emit SetDepositsIndex(_newDepositsIndex);\n    }\n\n    /**\n     * @notice set the withdraw index so that we want to skip processing some withdraws\n     * @param _newWithdrawsIndex the new withdraw index\n     */\n    function setWithdrawsIndex(uint256 _newWithdrawsIndex) external onlyOwner {\n        withdrawsIndex = _newWithdrawsIndex;\n        emit SetWithdrawsIndex(_newWithdrawsIndex);\n    }\n\n    /**\n     * @notice queue USDC for deposit into crab strategy\n     * @param _amount USDC amount to deposit\n     */\n    function depositUSDC(uint256 _amount) external {\n        require(_amount >= minUSDCAmount, \"N1\");\n\n        IERC20(usdc).transferFrom(msg.sender, address(this), _amount);\n\n        // update usd balance of user, add their receipt, and receipt index to user deposits index\n        usdBalance[msg.sender] = usdBalance[msg.sender] + _amount;\n        deposits.push(Receipt(msg.sender, _amount, block.timestamp));\n        userDepositsIndex[msg.sender].push(deposits.length - 1);\n\n        emit USDCQueued(msg.sender, _amount, usdBalance[msg.sender], deposits.length - 1);\n    }\n\n    /**\n     * @notice withdraw USDC from queue\n     * @param _amount USDC amount to dequeue\n     * @param _force forceWithdraw if deposited more than a week ago\n     */\n    function withdrawUSDC(uint256 _amount, bool _force) external {\n        require(!isAuctionLive || _force, \"N2\");\n\n        usdBalance[msg.sender] = usdBalance[msg.sender] - _amount;\n        require(usdBalance[msg.sender] >= minUSDCAmount || usdBalance[msg.sender] == 0, \"N3\");\n\n        // start withdrawing from the users last deposit\n        uint256 toRemove = _amount;\n        uint256 lastIndexP1 = userDepositsIndex[msg.sender].length;\n        for (uint256 i = lastIndexP1; i > 0; i--) {\n            Receipt storage r = deposits[userDepositsIndex[msg.sender][i - 1]];\n            if (_force) {\n                require(block.timestamp > r.timestamp + 1 weeks, \"N4\");\n            }\n            if (r.amount > toRemove) {\n                r.amount -= toRemove;\n                toRemove = 0;\n                break;\n            } else {\n                toRemove -= r.amount;\n                delete deposits[userDepositsIndex[msg.sender][i - 1]];\n                userDepositsIndex[msg.sender].pop();\n            }\n        }\n        IERC20(usdc).transfer(msg.sender, _amount);\n\n        emit USDCDeQueued(msg.sender, _amount, usdBalance[msg.sender]);\n    }\n\n    /**\n     * @notice queue Crab for withdraw from crab strategy\n     * @param _amount crab amount to withdraw\n     */\n    function queueCrabForWithdrawal(uint256 _amount) external {\n        require(_amount >= minCrabAmount, \"N5\");\n        IERC20(crab).transferFrom(msg.sender, address(this), _amount);\n        crabBalance[msg.sender] = crabBalance[msg.sender] + _amount;\n        withdraws.push(Receipt(msg.sender, _amount, block.timestamp));\n        userWithdrawsIndex[msg.sender].push(withdraws.length - 1);\n        emit CrabQueued(msg.sender, _amount, crabBalance[msg.sender], withdraws.length - 1);\n    }\n\n    /**\n     * @notice withdraw Crab from queue\n     * @param _amount Crab amount to dequeue\n     * @param _force forceWithdraw if deposited more than a week ago\n     */\n    function dequeueCrab(uint256 _amount, bool _force) external {\n        require(!isAuctionLive || _force, \"N2\");\n        crabBalance[msg.sender] = crabBalance[msg.sender] - _amount;\n        require(crabBalance[msg.sender] >= minCrabAmount || crabBalance[msg.sender] == 0, \"N6\");\n        // deQueue crab from the last, last in first out\n        uint256 toRemove = _amount;\n        uint256 lastIndexP1 = userWithdrawsIndex[msg.sender].length;\n        for (uint256 i = lastIndexP1; i > 0; i--) {\n            Receipt storage r = withdraws[userWithdrawsIndex[msg.sender][i - 1]];\n            if (_force) {\n                require(block.timestamp > r.timestamp + 1 weeks, \"N4\");\n            }\n            if (r.amount > toRemove) {\n                r.amount -= toRemove;\n                toRemove = 0;\n                break;\n            } else {\n                toRemove -= r.amount;\n                delete withdraws[userWithdrawsIndex[msg.sender][i - 1]];\n                userWithdrawsIndex[msg.sender].pop();\n            }\n        }\n        IERC20(crab).transfer(msg.sender, _amount);\n        emit CrabDeQueued(msg.sender, _amount, crabBalance[msg.sender]);\n    }\n\n    /**\n     * @dev swaps _quantity amount of usdc for crab at _price\n     * @param _price price of crab in usdc\n     * @param _quantity amount of USDC to net\n     */\n    function netAtPrice(uint256 _price, uint256 _quantity) external onlyOwner {\n        _checkCrabPrice(_price);\n        uint256 crabQuantity = (_quantity * 1e18) / _price;\n        require(_quantity <= IERC20(usdc).balanceOf(address(this)), \"N7\");\n        require(crabQuantity <= IERC20(crab).balanceOf(address(this)), \"N8\");\n\n        // process deposits and send crab\n        uint256 i = depositsIndex;\n        uint256 amountToSend;\n        while (_quantity > 0) {\n            Receipt memory deposit = deposits[i];\n            if (deposit.amount == 0) {\n                i++;\n                continue;\n            }\n            if (deposit.amount <= _quantity) {\n                // deposit amount is lesser than quantity use it fully\n                _quantity = _quantity - deposit.amount;\n                usdBalance[deposit.sender] -= deposit.amount;\n                amountToSend = (deposit.amount * 1e18) / _price;\n                IERC20(crab).transfer(deposit.sender, amountToSend);\n                emit USDCDeposited(deposit.sender, deposit.amount, amountToSend, i, 0);\n                delete deposits[i];\n                i++;\n            } else {\n                // deposit amount is greater than quantity; use it partially\n                deposits[i].amount = deposit.amount - _quantity;\n                usdBalance[deposit.sender] -= _quantity;\n                amountToSend = (_quantity * 1e18) / _price;\n                IERC20(crab).transfer(deposit.sender, amountToSend);\n                emit USDCDeposited(deposit.sender, _quantity, amountToSend, i, 0);\n                _quantity = 0;\n            }\n        }\n        depositsIndex = i;\n\n        // process withdraws and send usdc\n        i = withdrawsIndex;\n        while (crabQuantity > 0) {\n            Receipt memory withdraw = withdraws[i];\n            if (withdraw.amount == 0) {\n                i++;\n                continue;\n            }\n            if (withdraw.amount <= crabQuantity) {\n                crabQuantity = crabQuantity - withdraw.amount;\n                crabBalance[withdraw.sender] -= withdraw.amount;\n                amountToSend = (withdraw.amount * _price) / 1e18;\n                IERC20(usdc).transfer(withdraw.sender, amountToSend);\n\n                emit CrabWithdrawn(withdraw.sender, withdraw.amount, amountToSend, i);\n\n                delete withdraws[i];\n                i++;\n            } else {\n                withdraws[i].amount = withdraw.amount - crabQuantity;\n                crabBalance[withdraw.sender] -= crabQuantity;\n                amountToSend = (crabQuantity * _price) / 1e18;\n                IERC20(usdc).transfer(withdraw.sender, amountToSend);\n\n                emit CrabWithdrawn(withdraw.sender, withdraw.amount, amountToSend, i);\n\n                crabQuantity = 0;\n            }\n        }\n        withdrawsIndex = i;\n    }\n\n    /**\n     * @return sum usdc amount in queue\n     */\n    function depositsQueued() external view returns (uint256) {\n        uint256 j = depositsIndex;\n        uint256 sum;\n        while (j < deposits.length) {\n            sum = sum + deposits[j].amount;\n            j++;\n        }\n        return sum;\n    }\n\n    /**\n     * @return sum crab amount in queue\n     */\n    function withdrawsQueued() external view returns (uint256) {\n        uint256 j = withdrawsIndex;\n        uint256 sum;\n        while (j < withdraws.length) {\n            sum = sum + withdraws[j].amount;\n            j++;\n        }\n        return sum;\n    }\n\n    function checkOrder(Order memory _order) external view {\n        return _checkOrder(_order);\n    }\n\n    /**\n     * @dev checks the expiry nonce and signer of an order\n     * @param _order is the Order struct\n     */\n    function _checkOrder(Order memory _order) internal view {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                _CRAB_NETTING_TYPEHASH,\n                _order.bidId,\n                _order.trader,\n                _order.quantity,\n                _order.price,\n                _order.isBuying,\n                _order.expiry,\n                _order.nonce\n            )\n        );\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n        address offerSigner = ECDSA.recover(hash, _order.v, _order.r, _order.s);\n        require(offerSigner == _order.trader, \"N9\");\n        require(_order.expiry >= block.timestamp, \"N10\");\n    }\n\n    /**\n     * @dev calculates wSqueeth minted when amount is deposited\n     * @param _amount to deposit into crab\n     */\n    function _debtToMint(uint256 _amount) internal view returns (uint256) {\n        uint256 feeAdjustment = _calcFeeAdjustment();\n        (,, uint256 collateral, uint256 debt) = ICrabStrategyV2(crab).getVaultDetails();\n        uint256 wSqueethToMint = (_amount * debt) / (collateral + (debt * feeAdjustment) / 1e18);\n        return wSqueethToMint;\n    }\n\n    /**\n     * @dev takes in orders from mm's to buy sqth and deposits the usd amount from the depositQueue into crab along with the eth from selling sqth\n     * @param _p DepositAuction Params that contain orders, usdToDeposit, uniswap min amount and fee\n     */\n    function depositAuction(DepositAuctionParams calldata _p) external onlyOwner {\n        _checkOTCPrice(_p.clearingPrice, false);\n        uint256 ethUSDCPrice = IOracle(oracle).getTwap(ethUsdcPool, weth, usdc, auctionTwapPeriod, true);\n        require((_p.depositsQueued * (1e18 - otcPriceTolerance) * 1e12 / ethUSDCPrice) < _p.minEth, \"N11\");\n        /**\n         * step 1: get eth from mm\n         *     step 2: get eth from deposit usdc\n         *     step 3: crab deposit\n         *     step 4: flash deposit\n         *     step 5: send sqth to mms\n         *     step 6: send crab to depositors\n         */\n        uint256 initCrabBalance = IERC20(crab).balanceOf(address(this));\n        uint256 initEthBalance = address(this).balance;\n\n        uint256 sqthToSell = _debtToMint(_p.totalDeposit);\n        // step 1 get all the eth in\n        uint256 remainingToSell = sqthToSell;\n        for (uint256 i = 0; i < _p.orders.length; i++) {\n            require(_p.orders[i].isBuying, \"N12\");\n            require(_p.orders[i].price >= _p.clearingPrice, \"N13\");\n            _checkOrder(_p.orders[i]);\n            _useNonce(_p.orders[i].trader, _p.orders[i].nonce);\n            if (_p.orders[i].quantity >= remainingToSell) {\n                IWETH(weth).transferFrom(\n                    _p.orders[i].trader, address(this), (remainingToSell * _p.clearingPrice) / 1e18\n                );\n                remainingToSell = 0;\n                break;\n            } else {\n                IWETH(weth).transferFrom(\n                    _p.orders[i].trader, address(this), (_p.orders[i].quantity * _p.clearingPrice) / 1e18\n                );\n                remainingToSell -= _p.orders[i].quantity;\n            }\n        }\n        require(remainingToSell == 0, \"N14\");\n\n        // step 2\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: usdc,\n            tokenOut: weth,\n            fee: _p.ethUSDFee,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: _p.depositsQueued,\n            amountOutMinimum: _p.minEth,\n            sqrtPriceLimitX96: 0\n        });\n        swapRouter.exactInputSingle(params);\n\n        // step 3\n        IWETH(weth).withdraw(IWETH(weth).balanceOf(address(this)));\n        ICrabStrategyV2(crab).deposit{value: _p.totalDeposit}();\n\n        // step 4\n        Portion memory to_send;\n        to_send.eth = address(this).balance - initEthBalance;\n        if (to_send.eth > 0 && _p.ethToFlashDeposit > 0) {\n            if (to_send.eth <= _p.ethToFlashDeposit) {\n                // we cant send more than the flashDeposit\n                ICrabStrategyV2(crab).flashDeposit{value: to_send.eth}(_p.ethToFlashDeposit, _p.flashDepositFee);\n            }\n        }\n\n        // step 5\n        to_send.sqth = IERC20(sqth).balanceOf(address(this));\n        remainingToSell = to_send.sqth;\n        for (uint256 j = 0; j < _p.orders.length; j++) {\n            if (_p.orders[j].quantity < remainingToSell) {\n                IERC20(sqth).transfer(_p.orders[j].trader, _p.orders[j].quantity);\n                remainingToSell -= _p.orders[j].quantity;\n                emit BidTraded(_p.orders[j].bidId, _p.orders[j].trader, _p.orders[j].quantity, _p.clearingPrice, true);\n            } else {\n                IERC20(sqth).transfer(_p.orders[j].trader, remainingToSell);\n                emit BidTraded(_p.orders[j].bidId, _p.orders[j].trader, remainingToSell, _p.clearingPrice, true);\n                break;\n            }\n        }\n\n        // step 6 send crab to depositors\n        uint256 remainingDeposits = _p.depositsQueued;\n        uint256 k = depositsIndex;\n\n        to_send.crab = IERC20(crab).balanceOf(address(this)) - initCrabBalance;\n        // get the balance between start and now\n        to_send.eth = address(this).balance - initEthBalance;\n        IWETH(weth).deposit{value: to_send.eth}();\n\n        while (remainingDeposits > 0) {\n            uint256 queuedAmount = deposits[k].amount;\n            Portion memory portion;\n            if (queuedAmount == 0) {\n                k++;\n                continue;\n            }\n            if (queuedAmount <= remainingDeposits) {\n                remainingDeposits = remainingDeposits - queuedAmount;\n                usdBalance[deposits[k].sender] -= queuedAmount;\n\n                portion.crab = queuedAmount * to_send.crab / _p.depositsQueued;\n\n                IERC20(crab).transfer(deposits[k].sender, portion.crab);\n\n                portion.eth = queuedAmount * to_send.eth / _p.depositsQueued;\n                if (portion.eth > 1e12) {\n                    IWETH(weth).transfer(deposits[k].sender, portion.eth);\n                } else {\n                    portion.eth = 0;\n                }\n                emit USDCDeposited(deposits[k].sender, queuedAmount, portion.crab, k, portion.eth);\n\n                delete deposits[k];\n                k++;\n            } else {\n                usdBalance[deposits[k].sender] -= remainingDeposits;\n\n                portion.crab = remainingDeposits * to_send.crab / _p.depositsQueued;\n                IERC20(crab).transfer(deposits[k].sender, portion.crab);\n\n                portion.eth = remainingDeposits * to_send.eth / _p.depositsQueued;\n                if (portion.eth > 1e12) {\n                    IWETH(weth).transfer(deposits[k].sender, portion.eth);\n                } else {\n                    portion.eth = 0;\n                }\n                emit USDCDeposited(deposits[k].sender, remainingDeposits, portion.crab, k, portion.eth);\n\n                deposits[k].amount -= remainingDeposits;\n                remainingDeposits = 0;\n            }\n        }\n        depositsIndex = k;\n        isAuctionLive = false;\n    }\n\n    /**\n     * @dev takes in orders from mm's to sell sqth and withdraws the crab amount in q\n     * @param _p Withdraw Params that contain orders, crabToWithdraw, uniswap min amount and fee\n     */\n    function withdrawAuction(WithdrawAuctionParams calldata _p) public onlyOwner {\n        _checkOTCPrice(_p.clearingPrice, true);\n        uint256 initWethBalance = IERC20(weth).balanceOf(address(this));\n        uint256 initEthBalance = address(this).balance;\n        /**\n         * step 1: get sqth from mms\n         *     step 2: withdraw from crab\n         *     step 3: send eth to mms\n         *     step 4: convert eth to usdc\n         *     step 5: send usdc to withdrawers\n         */\n\n        // step 1 get sqth from mms\n        uint256 sqthRequired = ICrabStrategyV2(crab).getWsqueethFromCrabAmount(_p.crabToWithdraw);\n        uint256 toPull = sqthRequired;\n        for (uint256 i = 0; i < _p.orders.length && toPull > 0; i++) {\n            _checkOrder(_p.orders[i]);\n            _useNonce(_p.orders[i].trader, _p.orders[i].nonce);\n            require(!_p.orders[i].isBuying, \"N15\");\n            require(_p.orders[i].price <= _p.clearingPrice, \"N16\");\n            if (_p.orders[i].quantity < toPull) {\n                toPull -= _p.orders[i].quantity;\n                IERC20(sqth).transferFrom(_p.orders[i].trader, address(this), _p.orders[i].quantity);\n            } else {\n                IERC20(sqth).transferFrom(_p.orders[i].trader, address(this), toPull);\n                toPull = 0;\n            }\n        }\n\n        // step 2 withdraw from crab\n        ICrabStrategyV2(crab).withdraw(_p.crabToWithdraw);\n\n        // step 3 pay all mms\n        IWETH(weth).deposit{value: address(this).balance - initEthBalance}();\n        toPull = sqthRequired;\n        uint256 sqthQuantity;\n        for (uint256 i = 0; i < _p.orders.length && toPull > 0; i++) {\n            if (_p.orders[i].quantity < toPull) {\n                sqthQuantity = _p.orders[i].quantity;\n            } else {\n                sqthQuantity = toPull;\n            }\n            IERC20(weth).transfer(_p.orders[i].trader, (sqthQuantity * _p.clearingPrice) / 1e18);\n            toPull -= sqthQuantity;\n            emit BidTraded(_p.orders[i].bidId, _p.orders[i].trader, sqthQuantity, _p.clearingPrice, false);\n        }\n\n        // step 4 convert to USDC\n        uint256 ethUSDCPrice = IOracle(oracle).getTwap(ethUsdcPool, weth, usdc, auctionTwapPeriod, true);\n        uint256 amountIn = (IERC20(weth).balanceOf(address(this)) - initWethBalance);\n        require((amountIn * ethUSDCPrice * (1e18 - otcPriceTolerance) / 1e36 / 1e12) < _p.minUSDC, \"N17\");\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn: address(weth),\n            tokenOut: address(usdc),\n            fee: _p.ethUSDFee,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: amountIn,\n            amountOutMinimum: _p.minUSDC,\n            sqrtPriceLimitX96: 0\n        });\n        uint256 usdcReceived = swapRouter.exactInputSingle(params);\n\n        // step 5 pay all withdrawers and mark their withdraws as done\n        uint256 remainingWithdraws = _p.crabToWithdraw;\n        uint256 j = withdrawsIndex;\n        uint256 usdcAmount;\n        while (remainingWithdraws > 0) {\n            Receipt memory withdraw = withdraws[j];\n            if (withdraw.amount == 0) {\n                j++;\n                continue;\n            }\n            if (withdraw.amount <= remainingWithdraws) {\n                // full usage\n                remainingWithdraws -= withdraw.amount;\n                crabBalance[withdraw.sender] -= withdraw.amount;\n\n                // send proportional usdc\n                usdcAmount = withdraw.amount * usdcReceived / _p.crabToWithdraw;\n                IERC20(usdc).transfer(withdraw.sender, usdcAmount);\n                emit CrabWithdrawn(withdraw.sender, withdraw.amount, usdcAmount, j);\n                delete withdraws[j];\n                j++;\n            } else {\n                withdraws[j].amount -= remainingWithdraws;\n                crabBalance[withdraw.sender] -= remainingWithdraws;\n\n                // send proportional usdc\n                usdcAmount = remainingWithdraws * usdcReceived / _p.crabToWithdraw;\n                IERC20(usdc).transfer(withdraw.sender, usdcAmount);\n                emit CrabWithdrawn(withdraw.sender, remainingWithdraws, usdcAmount, j);\n\n                remainingWithdraws = 0;\n            }\n        }\n        withdrawsIndex = j;\n        isAuctionLive = false;\n    }\n\n    /**\n     * @dev owner rejects the withdraw at index i thereby sending the withdrawer their crab back\n     * @param i index of the Withdraw receipt to reject\n     */\n    function rejectWithdraw(uint256 i) external onlyOwner {\n        Receipt memory withdraw = withdraws[i];\n        crabBalance[withdraw.sender] -= withdraw.amount;\n        ICrabStrategyV2(crab).transfer(withdraw.sender, withdraw.amount);\n        delete withdraws[i];\n\n        emit WithdrawRejected(withdraw.sender, withdraw.amount, i);\n    }\n\n    /**\n     * @notice owner can set the twap period in seconds that is used for obtaining TWAP prices\n     * @param _auctionTwapPeriod the twap period, in seconds\n     */\n    function setAuctionTwapPeriod(uint32 _auctionTwapPeriod) external onlyOwner {\n        require(_auctionTwapPeriod >= 180, \"N18\");\n        uint32 previousTwap = auctionTwapPeriod;\n\n        auctionTwapPeriod = _auctionTwapPeriod;\n\n        emit SetAuctionTwapPeriod(previousTwap, _auctionTwapPeriod);\n    }\n\n    /**\n     * @notice owner can set a threshold, scaled by 1e18 that determines the maximum discount of a clearing sale price to the current uniswap twap price\n     * @param _otcPriceTolerance the OTC price tolerance, in percent, scaled by 1e18\n     */\n    function setOTCPriceTolerance(uint256 _otcPriceTolerance) external onlyOwner {\n        // Tolerance cannot be more than 20%\n        require(_otcPriceTolerance <= MAX_OTC_PRICE_TOLERANCE, \"N19\");\n        uint256 previousOtcTolerance = otcPriceTolerance;\n\n        otcPriceTolerance = _otcPriceTolerance;\n\n        emit SetOTCPriceTolerance(previousOtcTolerance, _otcPriceTolerance);\n    }\n\n    /**\n     * @dev set nonce flag of the trader to true\n     * @param _trader address of the signer\n     * @param _nonce number that is to be traded only once\n     */\n    function _useNonce(address _trader, uint256 _nonce) internal {\n        require(!nonces[_trader][_nonce], \"N20\");\n        nonces[_trader][_nonce] = true;\n    }\n\n    /**\n     * @notice check that the proposed sale price is within a tolerance of the current Uniswap twap\n     * @param _price clearing price provided by manager\n     * @param _isAuctionBuying is crab buying or selling oSQTH\n     */\n    function _checkOTCPrice(uint256 _price, bool _isAuctionBuying) internal view {\n        // Get twap\n        uint256 squeethEthPrice = IOracle(oracle).getTwap(ethSqueethPool, sqth, weth, auctionTwapPeriod, true);\n\n        if (_isAuctionBuying) {\n            require(_price <= (squeethEthPrice * (1e18 + otcPriceTolerance)) / 1e18, \"N21\");\n        } else {\n            require(_price >= (squeethEthPrice * (1e18 - otcPriceTolerance)) / 1e18, \"N22\");\n        }\n    }\n\n    function _checkCrabPrice(uint256 _price) internal view {\n        // Get twap\n        uint256 squeethEthPrice = IOracle(oracle).getTwap(ethSqueethPool, sqth, weth, auctionTwapPeriod, true);\n        uint256 usdcEthPrice = IOracle(oracle).getTwap(ethUsdcPool, weth, usdc, auctionTwapPeriod, true);\n        (,, uint256 collateral, uint256 debt) = ICrabStrategyV2(crab).getVaultDetails();\n        uint256 crabFairPrice =\n            ((collateral - ((debt * squeethEthPrice) / 1e18)) * usdcEthPrice) / ICrabStrategyV2(crab).totalSupply();\n        crabFairPrice = crabFairPrice / 1e12; //converting from units of 18 to 6\n        require(_price <= (crabFairPrice * (1e18 + otcPriceTolerance)) / 1e18, \"N23\");\n        require(_price >= (crabFairPrice * (1e18 - otcPriceTolerance)) / 1e18, \"N24\");\n    }\n\n    function _calcFeeAdjustment() internal view returns (uint256) {\n        uint256 feeRate = IController(sqthController).feeRate();\n        if (feeRate == 0) return 0;\n        uint256 squeethEthPrice = IOracle(oracle).getTwap(ethSqueethPool, sqth, weth, sqthTwapPeriod, true);\n        return (squeethEthPrice * feeRate) / 10000;\n    }\n\n    receive() external payable {\n        require(msg.sender == weth || msg.sender == crab, \"N25\");\n    }\n}\n"
    },
    "src/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\ninterface IController {\n    function feeRate() external view returns (uint256);\n\n    function TWAP_PERIOD() external view returns (uint32);\n\n    function quoteCurrency() external view returns (address);\n\n    function ethQuoteCurrencyPool() external view returns (address);\n\n    function setFeeRate(uint256 _newFeeRate) external;\n\n    function setFeeRecipient(address _newFeeRecipient) external;\n}\n"
    },
    "src/interfaces/ICrabStrategyV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"openzeppelin/interfaces/IERC20.sol\";\n\ninterface ICrabStrategyV2 is IERC20 {\n    function getVaultDetails() external view returns (address, uint256, uint256, uint256);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 _crabAmount) external;\n\n    function flashDeposit(uint256 _ethToDeposit, uint24 _poolFee) external payable;\n\n    function getWsqueethFromCrabAmount(uint256 _crabAmount) external view returns (uint256);\n\n    function powerTokenController() external view returns (address);\n\n    function weth() external view returns (address);\n\n    function wPowerPerp() external view returns (address);\n\n    function oracle() external view returns (address);\n\n    function ethWSqueethPool() external view returns (address);\n}\n"
    },
    "src/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOracle {\n    function getTwap(address _pool, address _base, address _quote, uint32 _period, bool _checkPeriod)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "src/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC20} from \"openzeppelin/interfaces/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@uniswap/v3-core/=lib/v3-core/",
      "@uniswap/v3-periphery/=lib/v3-periphery/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/contracts/",
      "squeeth-monorepo/=lib/squeeth-monorepo/packages/hardhat/contracts/",
      "v3-core/=lib/v3-core/",
      "v3-periphery/=lib/v3-periphery/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}