{{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ChimpzeePresale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/**    ______  ____  ____  _____  ____    ____  _______   ________  ________  ________  \r\n *   .' ___  ||_   ||   _||_   _||_   \\  /   _||_   __ \\ |  __   _||_   __  ||_   __  | \r\n *  / .'   \\_|  | |__| |    | |    |   \\/   |    | |__) ||_/  / /    | |_ \\_|  | |_ \\_| \r\n *  | |         |  __  |    | |    | |\\  /| |    |  ___/    .'.' _   |  _| _   |  _| _  \r\n *  \\ `.___.'\\ _| |  | |_  _| |_  _| |_\\/_| |_  _| |_     _/ /__/ | _| |__/ | _| |__/ | \r\n *   `.____ .'|____||____||_____||_____||_____||_____|   |________||________||________| \r\n */\r\n\r\npragma solidity 0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract ChimpzeePresale is Ownable, Pausable, ReentrancyGuard {\r\n    uint256 public totalTokensSold = 0;\r\n    uint256 public totalTokensSoldWithBonus = 0;\r\n    uint256 public totalUsdRaised = 0;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    uint256 public claimStart;\r\n    uint256 public baseDecimals = (10**18);\r\n    uint256 public maxTokensToBuy = 50_000_000;\r\n    uint256 public minUsdAmountToBuy = 24900000000000000000; \r\n    uint256 public currentStage = 0;\r\n    uint256 public checkPoint = 0;\r\n\r\n    uint256[][3] public stages;\r\n    uint256[][2] public bonuses = [[uint256(75), 150, 250, 500], [uint256(25), 50, 75, 100]];\r\n\r\n    address public saleTokenAdress;\r\n\r\n    IERC20 public USDTInterface = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    AggregatorV3Interface internal priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n\r\n    mapping(address => uint256) public userDeposits;\r\n    mapping(address => bool) public hasClaimed;\r\n    mapping(address => uint256) public userStage;\r\n\r\n    event SaleTimeSet(uint256 _start, uint256 _end, uint256 timestamp);\r\n    event SaleTimeUpdated(bytes32 indexed key, uint256 prevValue, uint256 newValue, uint256 timestamp);\r\n    event TokensBought(address indexed user, uint256 indexed tokensBought, uint256 bonusTokens, uint256 totalTokens, address indexed purchaseToken, uint256 amountPaid, uint256 usdEq, uint256 timestamp);\r\n    event TokensAdded(address indexed token, uint256 noOfTokens, uint256 timestamp);\r\n    event TokensClaimed(address indexed user, uint256 amount, uint256 timestamp);\r\n    event ClaimStartUpdated(uint256 prevValue, uint256 newValue, uint256 timestamp);\r\n\r\n     /**\r\n     * @dev Initializes the contract and sets key parameters\r\n     * @param _startTime start time of the presale\r\n     * @param _endTime end time of the presale\r\n     * @param _stages stage data\r\n     */\r\n    constructor (uint256 _startTime, uint256 _endTime, uint256[][3] memory _stages) {\r\n        require(_startTime > block.timestamp && _endTime > _startTime, \"Invalid time\");\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        stages = _stages;\r\n        emit SaleTimeSet(startTime, endTime, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev To pause the presale\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev To unpause the presale\r\n     */\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev To change maxTokensToBuy amount\r\n     * @param _maxTokensToBuy New max token amount\r\n     */\r\n    function changeMaxTokensToBuy(uint256 _maxTokensToBuy) external onlyOwner {\r\n        require(_maxTokensToBuy > 0, 'Zero max tokens to buy value');\r\n        maxTokensToBuy = _maxTokensToBuy;\r\n    }\r\n\r\n    /**\r\n     * @dev To change minUsdAmountToBuy. If zero, there is no min limit.\r\n     * @param _minUsdAmount New min USD amount\r\n     */\r\n    function changeMinUsdAmountToBuy(uint256 _minUsdAmount) external onlyOwner {\r\n        minUsdAmountToBuy = _minUsdAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev To change stages data\r\n     * @param _stages New stage data\r\n     */\r\n    function changeStages(uint256[][3] memory _stages) external onlyOwner {\r\n        stages = _stages;\r\n    }\r\n\r\n    /**\r\n     * @dev To change bonus data\r\n     * @param _bonuses New bonus data\r\n     */\r\n    function changeBonuses(uint256[][2] memory _bonuses) external onlyOwner {\r\n        bonuses = _bonuses;\r\n    }\r\n\r\n    /**\r\n     * @dev To change USDT interface\r\n     * @param _address Address of the USDT interface\r\n     */\r\n    function changeUSDTInterface(address _address) external onlyOwner {\r\n        USDTInterface = IERC20(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev To change aggregator interface\r\n     * @param _address Address of the aggregator interface\r\n     */\r\n    function changeAggregatorInterface(address _address) external onlyOwner {\r\n        priceFeed = AggregatorV3Interface(_address);\r\n    }\r\n\r\n    modifier checkSaleState(uint256 amount) {\r\n        require(\r\n            block.timestamp >= startTime && block.timestamp <= endTime,\r\n            \"Invalid time for buying\"\r\n        );\r\n        require(amount > 0, \"Invalid sale amount\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev To calculate the price in USD for given amount of tokens.\r\n     * @param _amount No of tokens\r\n     */\r\n    function calculatePrice(uint256 _amount) public view returns (uint256) {\r\n        uint256 USDTAmount;\r\n        uint256 total = checkPoint == 0 ? totalTokensSold : checkPoint;\r\n        require(_amount <= maxTokensToBuy, 'Amount exceeds max tokens to buy');\r\n        if (_amount + total > stages[0][currentStage] || block.timestamp >= stages[2][currentStage]) {\r\n            require(currentStage < (stages[0].length - 1), 'Not valid');\r\n            if (block.timestamp >= stages[2][currentStage]) {\r\n                require(stages[0][currentStage] + _amount <= stages[0][currentStage + 1], '');\r\n                USDTAmount = _amount * stages[1][currentStage + 1];\r\n            } else {\r\n                uint256 tokenAmountForCurrentPrice = stages[0][currentStage] - total;\r\n                USDTAmount = tokenAmountForCurrentPrice * stages[1][currentStage] + (_amount - tokenAmountForCurrentPrice) * stages[1][currentStage + 1];\r\n            }\r\n        } else USDTAmount = _amount * stages[1][currentStage];\r\n        return USDTAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev To calculate rewards in CHMPZ coin for given amount of tokens and usd price.\r\n     * @param _amount No of tokens\r\n     * @param _usdAmount usd price\r\n     */\r\n    function calculateBonus(uint256 _amount, uint256 _usdAmount) public view returns (uint256) {\r\n        uint256 bonusCoins;\r\n        require(_usdAmount >= minUsdAmountToBuy, 'Min usd not reached');\r\n        for (uint i = bonuses[0].length; i > 0; i--) {\r\n            if (_usdAmount >= (bonuses[0][i - 1] * baseDecimals)) {\r\n                bonusCoins = ((bonuses[1][i - 1] * 100) * _amount) / 10_000;\r\n                break;\r\n            } else bonusCoins = 0;\r\n        }\r\n        return bonusCoins;\r\n    }\r\n\r\n    /**\r\n     * @dev To update the sale times\r\n     * @param _startTime New start time\r\n     * @param _endTime New end time\r\n     */\r\n    function changeSaleTimes(uint256 _startTime, uint256 _endTime) external onlyOwner {\r\n        require(_startTime > 0 || _endTime > 0, 'Invalid parameters');\r\n        if (_startTime > 0) {\r\n            uint256 prevValue = startTime;\r\n            startTime = _startTime;\r\n            emit SaleTimeUpdated(bytes32('START'), prevValue, _startTime, block.timestamp);\r\n        }\r\n\r\n        if (_endTime > 0) {\r\n            uint256 prevValue = endTime;\r\n            endTime = _endTime;\r\n            emit SaleTimeUpdated(bytes32('END'), prevValue, _endTime, block.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev To get latest ETH price in 10**18 format\r\n     */\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    /**\r\n     * @dev To buy into a presale using USDT\r\n     * @param amount No of tokens to buy\r\n     */\r\n    function buyWithUSDT(uint256 amount) external checkSaleState(amount) whenNotPaused returns (bool) {\r\n        uint256 usdPrice = calculatePrice(amount);\r\n        uint256 bonusCoins = calculateBonus(amount, usdPrice);\r\n        uint256 newAmount = amount + bonusCoins;\r\n        totalTokensSold += amount;\r\n        totalTokensSoldWithBonus += newAmount;\r\n        if (usdPrice >= (bonuses[0][0] * baseDecimals) && userStage[_msgSender()] == 0) userStage[_msgSender()] = currentStage + 1;\r\n        if (checkPoint != 0) checkPoint += amount;\r\n        uint256 total = totalTokensSold > checkPoint ? totalTokensSold : checkPoint;\r\n        if (total > stages[0][currentStage] || block.timestamp >= stages[2][currentStage]) {\r\n            if (block.timestamp >= stages[2][currentStage]) {\r\n                 checkPoint = stages[0][currentStage] + amount;\r\n            }\r\n            currentStage += 1;\r\n        }\r\n        userDeposits[_msgSender()] += (newAmount * baseDecimals);\r\n        totalUsdRaised += usdPrice;\r\n        uint256 ourAllowance = USDTInterface.allowance(_msgSender(), address(this));\r\n        uint256 price = usdPrice / (10 ** 12);\r\n        require(price <= ourAllowance, 'Not enough allowance');\r\n        (bool success, ) = address(USDTInterface).call(abi.encodeWithSignature('transferFrom(address,address,uint256)', _msgSender(), owner(), price));\r\n        require(success, 'Token payment failed');\r\n        emit TokensBought(_msgSender(), amount, bonusCoins, newAmount, address(USDTInterface), usdPrice, usdPrice, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To buy into a presale using ETH\r\n     * @param amount No of tokens to buy\r\n     */\r\n    function buyWithEth(uint256 amount) external payable checkSaleState(amount) whenNotPaused nonReentrant returns (bool) {\r\n        uint256 usdPrice = calculatePrice(amount);\r\n        uint256 ethAmount = (usdPrice * baseDecimals) / getLatestPrice();\r\n        require(msg.value >= ethAmount, 'Less payment');\r\n        uint256 bonusCoins = calculateBonus(amount, usdPrice);\r\n        uint256 newAmount = amount + bonusCoins;\r\n        uint256 excess = msg.value - ethAmount;\r\n        totalTokensSold += amount;\r\n        totalTokensSoldWithBonus += newAmount;\r\n        if (usdPrice >= (bonuses[0][0] * baseDecimals) && userStage[_msgSender()] == 0) userStage[_msgSender()] = currentStage + 1;\r\n        if (checkPoint != 0) checkPoint += amount;\r\n        uint256 total = totalTokensSold > checkPoint ? totalTokensSold : checkPoint;\r\n        if (total > stages[0][currentStage] || block.timestamp >= stages[2][currentStage]) {\r\n            if (block.timestamp >= stages[2][currentStage]) {\r\n                checkPoint = stages[0][currentStage] + amount;\r\n            }\r\n            currentStage += 1;\r\n        }\r\n        userDeposits[_msgSender()] += (newAmount * baseDecimals);\r\n        totalUsdRaised += usdPrice;\r\n        sendValue(payable(owner()), ethAmount);\r\n        if (excess > 0) sendValue(payable(_msgSender()), excess);\r\n        emit TokensBought(_msgSender(), amount, bonusCoins, newAmount, address(0), ethAmount, usdPrice, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev To set the claim start time and sale token address by the owner\r\n     * @param _claimStart claim start time\r\n     * @param noOfTokens Number of tokens to add to the contract\r\n     * @param _saleTokenAdress sale token address\r\n     */\r\n    function startClaim(uint256 _claimStart, uint256 noOfTokens, address _saleTokenAdress) external onlyOwner returns (bool) {\r\n        require(_claimStart > endTime && _claimStart > block.timestamp, \"Invalid claim start time\");\r\n        require(noOfTokens >= (totalTokensSoldWithBonus * baseDecimals), \"Tokens less than sold\");\r\n        require(_saleTokenAdress != address(0), \"Zero token address\");\r\n        require(claimStart == 0, \"Claim already set\");\r\n        claimStart = _claimStart;\r\n        saleTokenAdress = _saleTokenAdress;\r\n        bool success = IERC20(_saleTokenAdress).transferFrom(_msgSender(), address(this), noOfTokens);\r\n        require(success, \"Token transfer failed\");\r\n        emit TokensAdded(saleTokenAdress, noOfTokens, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To change the claim start time by the owner\r\n     * @param _claimStart new claim start time\r\n     */\r\n    function changeClaimStartTime(uint256 _claimStart) external onlyOwner returns (bool) {\r\n        require(claimStart > 0, \"Initial claim data not set\");\r\n        require(_claimStart > endTime, \"Sale in progress\");\r\n        require(_claimStart > block.timestamp, \"Claim start in past\");\r\n        uint256 prevValue = claimStart;\r\n        claimStart = _claimStart;\r\n        emit ClaimStartUpdated(prevValue, _claimStart, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To claim tokens after claiming starts\r\n     */\r\n    function claim() external whenNotPaused returns (bool) {\r\n        require(saleTokenAdress != address(0), \"Sale token not added\");\r\n        require(block.timestamp >= claimStart, \"Claim has not started yet\");\r\n        require(!hasClaimed[_msgSender()], \"Already claimed\");\r\n        hasClaimed[_msgSender()] = true;\r\n        uint256 amount = userDeposits[_msgSender()];\r\n        require(amount > 0, \"Nothing to claim\");\r\n        delete userDeposits[_msgSender()];\r\n        bool success = IERC20(saleTokenAdress).transfer(_msgSender(), amount);\r\n        require(success, \"Token transfer failed\");\r\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev To manualy increment stage\r\n     */\r\n    function incrementCurrentStage() external onlyOwner {\r\n        currentStage++;\r\n        checkPoint = stages[0][currentStage];\r\n    }\r\n\r\n    /**\r\n     * @dev Helper funtion to get stage information\r\n     */\r\n    function getStages() external view returns (uint256[][3] memory) {\r\n        return stages;\r\n    }\r\n    \r\n    /**\r\n     * @dev Helper funtion to get bonus information\r\n     */\r\n    function getBonuses() external view returns (uint256[][2] memory) {\r\n        return bonuses;\r\n    }\r\n\r\n    function manualBuy(address _to, uint256 amount) external onlyOwner {\r\n        uint256 usdPrice = calculatePrice(amount);\r\n        uint256 bonusCoins = calculateBonus(amount, usdPrice);\r\n        uint256 newAmount = amount + bonusCoins;\r\n        totalTokensSold += amount;\r\n        totalTokensSoldWithBonus += newAmount;\r\n        if (usdPrice >= (bonuses[0][0] * baseDecimals) && userStage[_to] == 0) userStage[_to] = currentStage + 1;\r\n        userDeposits[_to] += (newAmount * baseDecimals);\r\n        totalUsdRaised += usdPrice;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}