{{
  "language": "Solidity",
  "sources": {
    "/contracts/NewDawnPaymentForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV // Deprecated in v4.8\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n}\r\n\r\ncontract NewDawnPaymentForwarder {\r\n\r\n    mapping(bytes32 => bool) public verifiedOffer;\r\n    mapping(address => uint) userNonce;\r\n    \r\n    address public admin;\r\n    address payable public treasury;\r\n    bool public tradingToggle;\r\n    bool initialized;\r\n\r\n    uint internal _directOfferPrice;\r\n    uint internal _directAcceptancePrice;\r\n    uint internal _globalOfferPrice;\r\n    uint internal _globalAcceptancePrice;\r\n\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n    event NewTreasury(address oldTreasury, address newTreasury);\r\n    event UpdatedTradingStatus(bool status);\r\n    event PriceChange(string indexed _type, uint newPrice);\r\n    event NewNonce(address indexed user, uint nonce);\r\n    event DirectOffer(uint indexed txnId, address indexed to, address indexed from_poster);\r\n    event DirectOfferAcceptance(uint indexed txnId, address indexed to_accepter, address indexed from);\r\n    event GlobalOffer(uint indexed txnId, address indexed from_poster);\r\n    event GlobalOfferAcceptance(uint indexed txnId, address indexed from, address indexed caller);\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"Only Admin\");\r\n        _;\r\n    }\r\n\r\n    // requires `tradingToggle` to be true\r\n    modifier tradingEnabled {\r\n        require(tradingToggle, \"Trading is disabled\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address payable treasuryAddress,\r\n        address _admin,\r\n        uint directOfferPriceInWei,\r\n        uint directAcceptancePriceInWei,\r\n        uint globalOfferPriceInWei,\r\n        uint globalAcceptancePriceInWei\r\n    ) external {\r\n        require(!initialized, \"Already initialized\");\r\n        admin = _admin;\r\n        require(treasuryAddress != address(0), \"treasury cannot be set to zero\");\r\n        treasury = treasuryAddress;\r\n        initialized = true;\r\n        _setAllPrices(directOfferPriceInWei, directAcceptancePriceInWei, globalOfferPriceInWei, globalAcceptancePriceInWei);\r\n    }\r\n\r\n    function makeDirectOffer(uint txnId, uint nftId, address to, bytes calldata sig) external payable tradingEnabled {\r\n        bytes32 ethSignedMsgHash = getHashDirect(txnId, nftId, to, msg.sender);\r\n        require(ECDSA.recover(ethSignedMsgHash, sig) == msg.sender, \"Signer not transaction sender\");\r\n        require(msg.value == _directOfferPrice, \"Invalid Eth Amount\");\r\n        verifiedOffer[ethSignedMsgHash] = true;\r\n        emit DirectOffer(txnId, to, msg.sender);\r\n        _transferMsgValueToTreasury();\r\n    }\r\n\r\n    function acceptDirectOffer(uint txnId, uint nftId, address from, bytes calldata sig) external payable tradingEnabled {\r\n        bytes32 ethSignedMsgHash = getHashDirect(txnId, nftId, msg.sender, from);\r\n        require(ECDSA.recover(ethSignedMsgHash, sig) == from, \"Signer is not the from address\");\r\n        require(verifiedOffer[ethSignedMsgHash], \"Offer not verified!\");\r\n        require(msg.value == _directAcceptancePrice, \"Invalid Eth Amount\");\r\n        verifiedOffer[ethSignedMsgHash] = false;\r\n        emit DirectOfferAcceptance(txnId, msg.sender, from);\r\n        _transferMsgValueToTreasury();\r\n    }\r\n\r\n    function makeGlobalOffer(uint txnId, uint nftId, bytes calldata sig) external payable tradingEnabled {\r\n        bytes32 ethSignedMsgHash = getHashGlobal(txnId, nftId, msg.sender);\r\n        require(ECDSA.recover(ethSignedMsgHash, sig) == msg.sender, \"Invalid signature!\");\r\n        require(msg.value == _globalOfferPrice, \"Invalid Eth Amount\");\r\n        verifiedOffer[ethSignedMsgHash] = true;\r\n        emit GlobalOffer(txnId, msg.sender);\r\n        _transferMsgValueToTreasury();\r\n    }\r\n\r\n    function acceptGlobalOffer(uint txnId, uint nftId, address from, bytes calldata sig) external payable tradingEnabled {\r\n        bytes32 ethSignedMsgHash = getHashGlobal(txnId, nftId, from);\r\n        require(ECDSA.recover(ethSignedMsgHash, sig) == from, \"Signer is not the from address\");\r\n        require(verifiedOffer[ethSignedMsgHash], \"Offer not verified!\");\r\n        require(msg.value == _globalAcceptancePrice, \"Invalid Eth Amount\");\r\n        verifiedOffer[ethSignedMsgHash] = false;\r\n        emit GlobalOfferAcceptance(txnId, from, msg.sender);\r\n        _transferMsgValueToTreasury();\r\n    }\r\n\r\n    function cancelOffer(bytes32 ethSignedMsgHash, bytes calldata signature) external {\r\n        require(ECDSA.recover(ethSignedMsgHash, signature) == msg.sender, \"Signer is not the from address\");\r\n        verifiedOffer[ethSignedMsgHash] = false;\r\n    }\r\n\r\n    function cancelAllActiveOfferes() external {\r\n        emit NewNonce(msg.sender, ++userNonce[msg.sender]);\r\n    }\r\n\r\n    // ADMIN FUNCTIONS\r\n    \r\n    function changeAdmin(address newAdmin) external onlyAdmin {\r\n        require(newAdmin != address(0), \"Admin cannot be set to zero\");\r\n        address oldAdmin = admin;\r\n        admin = newAdmin;\r\n        emit NewAdmin(oldAdmin, newAdmin);\r\n    }\r\n\r\n    function setTreasuryAddress(address payable newAddress) external onlyAdmin {\r\n        require(newAddress != address(0), \"Treasury cannot be set to zero\");\r\n        address oldTreasury = treasury;\r\n        treasury = newAddress;\r\n        emit NewTreasury(oldTreasury, newAddress);\r\n    }\r\n\r\n    // switch for trading toggle\r\n    function toggleTrading() external onlyAdmin {\r\n        tradingToggle = !tradingToggle;\r\n        emit UpdatedTradingStatus(tradingToggle);\r\n    }\r\n\r\n    function changeDirectOfferPrice(uint priceInWei) external onlyAdmin {\r\n        _directOfferPrice = priceInWei;\r\n        emit PriceChange(\"Direct Offer\", priceInWei);\r\n    }\r\n\r\n    function changeDirectAcceptancePrice(uint priceInWei) external onlyAdmin {\r\n        _directAcceptancePrice = priceInWei;\r\n        emit PriceChange(\"Direct Acceptance\", priceInWei);\r\n    }\r\n\r\n    function changeGlobalOfferPrice(uint priceInWei) external onlyAdmin {\r\n        _globalOfferPrice = priceInWei;\r\n        emit PriceChange(\"Global Offer\", priceInWei);\r\n    }\r\n\r\n    function changeGlobalAcceptancePrice(uint priceInWei) external onlyAdmin {\r\n        _globalAcceptancePrice = priceInWei;\r\n        emit PriceChange(\"Global Acceptance\", priceInWei);\r\n    }\r\n\r\n    function changeAllPrices(\r\n        uint directOfferPriceInWei,\r\n        uint directAcceptancePriceInWei,\r\n        uint globalOfferPriceInWei,\r\n        uint globalAcceptancePriceInWei\r\n    ) external onlyAdmin {\r\n        _setAllPrices(directOfferPriceInWei, directAcceptancePriceInWei, globalOfferPriceInWei, globalAcceptancePriceInWei);\r\n        emit PriceChange(\"Direct Offer\", directOfferPriceInWei);\r\n        emit PriceChange(\"Direct Acceptance\", directAcceptancePriceInWei);\r\n        emit PriceChange(\"Global Offer\", globalOfferPriceInWei);\r\n        emit PriceChange(\"Global Acceptance\", globalAcceptancePriceInWei);\r\n    }\r\n\r\n    \r\n    // GETTERS\r\n    /*\r\n     * @dev returns all price values\r\n     */\r\n    function returnPrices() external view returns(uint directOffer, uint directAcceptance, uint globalOffer, uint globalAcceptance) {\r\n        directOffer = _directOfferPrice;\r\n        directAcceptance = _directAcceptancePrice;\r\n        globalOffer = _globalOfferPrice;\r\n        globalAcceptance = _globalAcceptancePrice;\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    function _transferMsgValueToTreasury() private {\r\n        (bool success, ) = treasury.call{value: msg.value, gas: 3000}(\"\");\r\n        require(success, \"Transfer to treasury failed\");\r\n    }\r\n\r\n    function getHashDirect(uint txnId, uint nftId, address to, address signer) private view returns(bytes32) {\r\n        return ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(txnId, nftId, to, userNonce[signer])));\r\n    }\r\n\r\n    function getHashGlobal(uint txnId, uint nftId, address signer) private view returns(bytes32) {\r\n        return ECDSA.toEthSignedMessageHash(keccak256(abi.encodePacked(txnId, nftId, userNonce[signer])));\r\n    }\r\n\r\n    function _setAllPrices(\r\n        uint directOfferPriceInWei,\r\n        uint directAcceptancePriceInWei,\r\n        uint globalOfferPriceInWei,\r\n        uint globalAcceptancePriceInWei\r\n    ) private {\r\n        _directOfferPrice = directOfferPriceInWei;\r\n        _directAcceptancePrice = directAcceptancePriceInWei;\r\n        _globalOfferPrice = globalOfferPriceInWei;\r\n        _globalAcceptancePrice = globalAcceptancePriceInWei;\r\n    }\r\n\r\n    // UTILS\r\n    function getMsgDirect(uint txnId, uint nftId, address to, address signer) external view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(txnId, nftId, to, userNonce[signer]));\r\n    }\r\n\r\n    function getMsgGlobal(uint txnId, uint nftId, address signer) external view returns(bytes32) {\r\n        return keccak256(abi.encodePacked(txnId, nftId, userNonce[signer]));\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}