{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/interface/ICoolERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ICoolERC721A {\n  /// @notice Mint an amount of tokens to the given address\n  /// @dev Can only be called by an account with the MINTER_ROLE\n  ///      Will revert if called when paused, see _beforeTokenTransfer\n  /// @param to The address to mint the token to\n  /// @param amount The amount of tokens to mint\n  function mint(address to, uint256 amount) external;\n\n  /// @notice Externally exposes the _nextTokenId function\n  /// @dev used for referencing when burning fractures\n  /// @return The next token id\n  function nextTokenId() external view returns (uint256);\n}\n"
    },
    "contracts/interface/IFractures.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IFractures {\n  /// @dev Burns `tokenId`. See {ERC721A-_burn}.\n  ///      Requirements:\n  ///      - The caller must own `tokenId` or be an approved operator.\n  function burn(uint256 tokenId) external;\n\n  /// @dev Returns the owner of the `tokenId` token.\n  ///      Requirements:\n  ///      - `tokenId` must exist.\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /// @dev Returns the account approved for `tokenId` token.\n  ///      Requirements:\n  ///      - `tokenId` must exist.\n  function getApproved(uint256 tokenId) external view returns (address operator);\n\n  /// @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "contracts/minting/IntoTheFracture.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\nimport '../utils/IDelegationRegistry.sol';\nimport '../interface/ICoolERC721A.sol';\nimport '../interface/IFractures.sol';\n\n/// @title Into The Fracture\n/// @author Adam Goodman\n/// @notice This contract allows the burning of Cool Cats Fractures for Shadow Wolves\ncontract IntoTheFracture is Ownable, Pausable {\n  IFractures public _fractures;\n  ICoolERC721A public _shadowWolves;\n  IDelegationRegistry public _delegationRegistry;\n\n  bytes32 public _merkleRoot;\n  bool public _allowlistEnabled;\n\n  uint256 public _burnWindowStart;\n  uint256 public _burnWindowEnd;\n\n  uint256 public _maxBurnAmount = 100;\n\n  // Mapping to only allow a merkle proof array to be used once.\n  // Merkle proofs are not guaranteed to be unique to a specific Merkle root. So store them by root.\n  mapping(bytes32 => mapping(bytes32 => bool)) public _usedMerkleProofs;\n\n  error AllowlistEnabled();\n  error MaxBurnExceeded();\n  error BurnWindowNotStarted();\n  error BurnWindowEnded();\n  error InvalidBurnWindow();\n  error InvalidMerkleProof();\n  error MaxBurnAmountZero();\n  error NullMerkleRoot();\n  error NotFractureOwnerNorApproved(address account, uint256 fractureId);\n\n  event AllowlistEnabledSet(bool allowlistEnabled);\n  event BurnWindowSet(uint256 burnWindowStart, uint256 burnWindowEnd);\n  event DelegateRegistryAddressSet(address delegationRegistry);\n  event FractureAddressSet(address fractures);\n  event FractureEntered(uint256[] fractureIds, uint256 firstId);\n  event MaxBurnAmountSet(uint256 maxBurnAmount);\n  event MerkleRootSet(bytes32 merkleRoot);\n  event ShadowWolvesAddressSet(address shadowWolves);\n\n  /// @dev Set merkleRoot to the null bytes32 to disable the allowlist\n  ///      Any other value will enable the allowlist by default\n  constructor(\n    address fractures,\n    address shadowWolves,\n    address delegationRegistry,\n    uint64 burnWindowStart,\n    uint64 burnWindowEnd,\n    bytes32 merkleRoot\n  ) {\n    _fractures = IFractures(fractures);\n    _shadowWolves = ICoolERC721A(shadowWolves);\n    _delegationRegistry = IDelegationRegistry(delegationRegistry);\n\n    setBurnWindow(burnWindowStart, burnWindowEnd);\n\n    if (merkleRoot != bytes32(0)) {\n      _merkleRoot = merkleRoot;\n      _allowlistEnabled = true;\n    }\n\n    _pause();\n  }\n\n  /// @notice Modifier to check if the burn window is open, otherwise revert\n  modifier withinBurnWindow() {\n    if (block.timestamp < _burnWindowStart) {\n      revert BurnWindowNotStarted();\n    }\n\n    if (block.timestamp > _burnWindowEnd) {\n      revert BurnWindowEnded();\n    }\n    _;\n  }\n\n  /// @notice Verify merkleProof submitted by a sender\n  /// @param sender The account being verified\n  /// @param merkleProof Merkle data to verify against\n  modifier hasValidMerkleProof(address sender, bytes32[] calldata merkleProof) {\n    if (_allowlistEnabled) {\n      if (!isValidMerkleProof(sender, merkleProof)) {\n        revert InvalidMerkleProof();\n      }\n\n      // bytes32 unique identifier for each merkle proof\n      bytes32 node = keccak256(abi.encodePacked(sender));\n      if (_usedMerkleProofs[_merkleRoot][node]) {\n        revert InvalidMerkleProof();\n      }\n      _usedMerkleProofs[_merkleRoot][node] = true;\n    }\n    _;\n  }\n\n  /// @notice Burns given Fractures and mints Shadow Wolves\n  /// @param fractureIds The Fractures to burn\n  /// @param merkleProof The merkle proof for the given address\n  /// @dev If the allowlist is enabled, the merkle proof must be valid, otherwise it will revert\n  ///      if the allowlist is disabled, the merkle proof will be ignored, so it can be an empty array.\n  ///      To avoid reentrancy attacks, the fractures are burned before the Shadow Wolves are minted.\n  function enterFracture(\n    uint256[] calldata fractureIds,\n    bytes32[] calldata merkleProof\n  ) external whenNotPaused withinBurnWindow hasValidMerkleProof(msg.sender, merkleProof) {\n    uint256 len = fractureIds.length;\n    // Prevent gas out for large burns\n    if (len > _maxBurnAmount) revert MaxBurnExceeded();\n\n    uint256 nextTokenId = _shadowWolves.nextTokenId();\n\n    address owner;\n    uint256 i;\n    unchecked {\n      do {\n        // Check that the fracture owner is the sender or the sender is approved, otherwise revert. If a user approves\n        // another account to manage their fractures, the owner of the fracture will receive the Shadow Wolf.\n        // - the `_getOwnerIfApproved` function either returns an address or reverts\n        owner = _getOwnerIfApproved(fractureIds[i]);\n        _fractures.burn(fractureIds[i]);\n\n        _shadowWolves.mint(owner, 1);\n      } while (++i < len);\n    }\n\n    emit FractureEntered(fractureIds, nextTokenId);\n  }\n\n  /// @notice Sets the merkle root for the allowlist\n  /// @dev Only the owner can call this function, setting the merkle root does not change\n  ///      whether the allowlist is enabled or not\n  /// @param merkleRoot The new merkle root\n  function setMerkleRoot(bytes32 merkleRoot) external onlyOwner {\n    if (_allowlistEnabled && merkleRoot == bytes32(0)) {\n      revert AllowlistEnabled();\n    }\n\n    _merkleRoot = merkleRoot;\n\n    emit MerkleRootSet(merkleRoot);\n  }\n\n  /// @notice Sets whether the allowlist is enabled or not\n  /// @dev Only the owner can call this function\n  /// @param allowlistEnabled Whether the allowlist is enabled or not\n  function setAllowlistEnabled(bool allowlistEnabled) external onlyOwner {\n    if (allowlistEnabled && _merkleRoot == bytes32(0)) {\n      revert NullMerkleRoot();\n    }\n\n    _allowlistEnabled = allowlistEnabled;\n\n    emit AllowlistEnabledSet(allowlistEnabled);\n  }\n\n  /// @notice Sets the maximum number of tokens that can be burned in a single transaction\n  /// @dev Only the owner can call this function\n  /// @param maxBurnAmount The maximum number of tokens that can be burned in a single transaction\n  function setMaxBurnAmount(uint256 maxBurnAmount) external onlyOwner {\n    // Can't set max burn amount to zero, we have pause to stop minting\n    if (maxBurnAmount == 0) revert MaxBurnAmountZero();\n\n    _maxBurnAmount = maxBurnAmount;\n\n    emit MaxBurnAmountSet(maxBurnAmount);\n  }\n\n  /// @notice Pauses the contract - stopping minting via the public mint function\n  /// @dev Only the owner can call this function\n  ///      Emit handled by {OpenZepplin Pausable}\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /// @notice Unpauses the contract - allowing minting via the public mint function\n  /// @dev Only the owner can call this function\n  ///      Emit handled by {OpenZepplin Pausable}\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /// @notice Sets the address of the Fractures contract\n  /// @dev Only the owner can call this function\n  /// @param fractures The address of the Fractures contract\n  function setFracturesAddress(address fractures) external onlyOwner {\n    _fractures = IFractures(fractures);\n\n    emit FractureAddressSet(fractures);\n  }\n\n  /// @notice Sets the address of the Shadow Wolves contract\n  /// @dev Only the owner can call this function\n  /// @param shadowWolves The address of the Shadow Wolves contract\n  function setShadowWolvesAddress(address shadowWolves) external onlyOwner {\n    _shadowWolves = ICoolERC721A(shadowWolves);\n\n    emit ShadowWolvesAddressSet(shadowWolves);\n  }\n\n  /// @notice Sets the address of the Delegation Registry contract\n  /// @dev Only the owner can call this function\n  /// @param delegateRegistry The address of the Delegation Registry contract\n  function setDelegateRegistryAddress(address delegateRegistry) external onlyOwner {\n    _delegationRegistry = IDelegationRegistry(delegateRegistry);\n\n    emit DelegateRegistryAddressSet(delegateRegistry);\n  }\n\n  /// @notice Sets the burn window, start and end times are in seconds since unix epoch\n  /// @dev Only the owner can call this function\n  /// @param burnWindowStart The start time of the burn window\n  /// @param burnWindowEnd The end time of the burn window\n  function setBurnWindow(uint256 burnWindowStart, uint256 burnWindowEnd) public onlyOwner {\n    if (burnWindowEnd < burnWindowStart) {\n      revert InvalidBurnWindow();\n    }\n\n    _burnWindowStart = burnWindowStart;\n    _burnWindowEnd = burnWindowEnd;\n\n    emit BurnWindowSet(burnWindowStart, burnWindowEnd);\n  }\n\n  /// @notice Checks if a given address is on the merkle tree allowlist\n  /// @dev Merkle trees can be generated using https://github.com/OpenZeppelin/merkle-tree\n  /// @param account The address to check\n  /// @param merkleProof The merkle proof to check\n  /// @return Whether the address is on the allowlist or not\n  function isValidMerkleProof(\n    address account,\n    bytes32[] calldata merkleProof\n  ) public view virtual returns (bool) {\n    return\n      MerkleProof.verifyCalldata(\n        merkleProof,\n        _merkleRoot,\n        keccak256(bytes.concat(keccak256(abi.encode(account))))\n      );\n  }\n\n  /// @notice Checks if a given Fracture is owned by or approved for the sender\n  /// @dev This can be used to stop users from being able to burn Fractures someone else owns without their permission\n  /// @param tokenId The Fracture to check\n  /// @return The owner of the token\n  function _getOwnerIfApproved(uint256 tokenId) internal view returns (address) {\n    address owner = _fractures.ownerOf(tokenId);\n\n    if (owner == msg.sender) {\n      return owner;\n    }\n\n    if (\n      _delegationRegistry.checkDelegateForToken(msg.sender, owner, address(_fractures), tokenId)\n    ) {\n      return owner;\n    }\n\n    if (_fractures.isApprovedForAll(owner, msg.sender)) {\n      return owner;\n    }\n\n    if (_fractures.getApproved(tokenId) == msg.sender) {\n      return owner;\n    }\n\n    revert NotFractureOwnerNorApproved(msg.sender, tokenId);\n  }\n}\n"
    },
    "contracts/utils/IDelegationRegistry.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.17;\n\n/**\n * @title An immutable registry contract to be deployed as a standalone primitive\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\n * from here and integrate those permissions into their flow\n */\ninterface IDelegationRegistry {\n  /// @notice Delegation type\n  enum DelegationType {\n    NONE,\n    ALL,\n    CONTRACT,\n    TOKEN\n  }\n\n  /// @notice Info about a single delegation, used for onchain enumeration\n  struct DelegationInfo {\n    DelegationType type_;\n    address vault;\n    address delegate;\n    address contract_;\n    uint256 tokenId;\n  }\n\n  /// @notice Info about a single contract-level delegation\n  struct ContractDelegation {\n    address contract_;\n    address delegate;\n  }\n\n  /// @notice Info about a single token-level delegation\n  struct TokenDelegation {\n    address contract_;\n    uint256 tokenId;\n    address delegate;\n  }\n\n  /// @notice Emitted when a user delegates their entire wallet\n  event DelegateForAll(address vault, address delegate, bool value);\n\n  /// @notice Emitted when a user delegates a specific contract\n  event DelegateForContract(address vault, address delegate, address contract_, bool value);\n\n  /// @notice Emitted when a user delegates a specific token\n  event DelegateForToken(\n    address vault,\n    address delegate,\n    address contract_,\n    uint256 tokenId,\n    bool value\n  );\n\n  /// @notice Emitted when a user revokes all delegations\n  event RevokeAllDelegates(address vault);\n\n  /// @notice Emitted when a user revoes all delegations for a given delegate\n  event RevokeDelegate(address vault, address delegate);\n\n  /**\n   * -----------  WRITE -----------\n   */\n\n  /**\n   * @notice Allow the delegate to act on your behalf for all contracts\n   * @param delegate The hotwallet to act on your behalf\n   * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n   */\n  function delegateForAll(address delegate, bool value) external;\n\n  /**\n   * @notice Allow the delegate to act on your behalf for a specific contract\n   * @param delegate The hotwallet to act on your behalf\n   * @param contract_ The address for the contract you're delegating\n   * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n   */\n  function delegateForContract(address delegate, address contract_, bool value) external;\n\n  /**\n   * @notice Allow the delegate to act on your behalf for a specific token\n   * @param delegate The hotwallet to act on your behalf\n   * @param contract_ The address for the contract you're delegating\n   * @param tokenId The token id for the token you're delegating\n   * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\n   */\n  function delegateForToken(\n    address delegate,\n    address contract_,\n    uint256 tokenId,\n    bool value\n  ) external;\n\n  /**\n   * @notice Revoke all delegates\n   */\n  function revokeAllDelegates() external;\n\n  /**\n   * @notice Revoke a specific delegate for all their permissions\n   * @param delegate The hotwallet to revoke\n   */\n  function revokeDelegate(address delegate) external;\n\n  /**\n   * @notice Remove yourself as a delegate for a specific vault\n   * @param vault The vault which delegated to the msg.sender, and should be removed\n   */\n  function revokeSelf(address vault) external;\n\n  /**\n   * -----------  READ -----------\n   */\n\n  /**\n   * @notice Returns all active delegations a given delegate is able to claim on behalf of\n   * @param delegate The delegate that you would like to retrieve delegations for\n   * @return info Array of DelegationInfo structs\n   */\n  function getDelegationsByDelegate(\n    address delegate\n  ) external view returns (DelegationInfo[] memory);\n\n  /**\n   * @notice Returns an array of wallet-level delegates for a given vault\n   * @param vault The cold wallet who issued the delegation\n   * @return addresses Array of wallet-level delegates for a given vault\n   */\n  function getDelegatesForAll(address vault) external view returns (address[] memory);\n\n  /**\n   * @notice Returns an array of contract-level delegates for a given vault and contract\n   * @param vault The cold wallet who issued the delegation\n   * @param contract_ The address for the contract you're delegating\n   * @return addresses Array of contract-level delegates for a given vault and contract\n   */\n  function getDelegatesForContract(\n    address vault,\n    address contract_\n  ) external view returns (address[] memory);\n\n  /**\n   * @notice Returns an array of contract-level delegates for a given vault's token\n   * @param vault The cold wallet who issued the delegation\n   * @param contract_ The address for the contract holding the token\n   * @param tokenId The token id for the token you're delegating\n   * @return addresses Array of contract-level delegates for a given vault's token\n   */\n  function getDelegatesForToken(\n    address vault,\n    address contract_,\n    uint256 tokenId\n  ) external view returns (address[] memory);\n\n  /**\n   * @notice Returns all contract-level delegations for a given vault\n   * @param vault The cold wallet who issued the delegations\n   * @return delegations Array of ContractDelegation structs\n   */\n  function getContractLevelDelegations(\n    address vault\n  ) external view returns (ContractDelegation[] memory delegations);\n\n  /**\n   * @notice Returns all token-level delegations for a given vault\n   * @param vault The cold wallet who issued the delegations\n   * @return delegations Array of TokenDelegation structs\n   */\n  function getTokenLevelDelegations(\n    address vault\n  ) external view returns (TokenDelegation[] memory delegations);\n\n  /**\n   * @notice Returns true if the address is delegated to act on the entire vault\n   * @param delegate The hotwallet to act on your behalf\n   * @param vault The cold wallet who issued the delegation\n   */\n  function checkDelegateForAll(address delegate, address vault) external view returns (bool);\n\n  /**\n   * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\n   * @param delegate The hotwallet to act on your behalf\n   * @param contract_ The address for the contract you're delegating\n   * @param vault The cold wallet who issued the delegation\n   */\n  function checkDelegateForContract(\n    address delegate,\n    address vault,\n    address contract_\n  ) external view returns (bool);\n\n  /**\n   * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\n   * @param delegate The hotwallet to act on your behalf\n   * @param contract_ The address for the contract you're delegating\n   * @param tokenId The token id for the token you're delegating\n   * @param vault The cold wallet who issued the delegation\n   */\n  function checkDelegateForToken(\n    address delegate,\n    address vault,\n    address contract_,\n    uint256 tokenId\n  ) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}