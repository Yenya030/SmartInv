{{
  "language": "Solidity",
  "sources": {
    "src/v2/NTMigrator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ReentrancyGuard} from \"openzeppelin/security/ReentrancyGuard.sol\";\nimport {Ownable} from \"openzeppelin/access/Ownable.sol\";\n\nimport {IMigrateable} from \"../interfaces/IMigrateable.sol\";\nimport {NTConfig, NTComponent} from \"./NTConfig.sol\";\n\ncontract NTMigrator is ReentrancyGuard, Ownable {\n    NTConfig config;\n    bool migrationOpen;\n\n    function migrateAssets(NTComponent[] memory contracts, uint256[] memory tokenIds) public nonReentrant {\n        require(migrationOpen, \"Migration is not open\");\n        require(contracts.length == tokenIds.length, \"Arrays must be of equal length.\");\n\n        for (uint256 i = 0; i < contracts.length; ++i) {\n            IMigrateable migrator = IMigrateable(config.findMigrator(contracts[i]));\n            migrator.migrateAsset(_msgSender(), tokenIds[i]);\n        }\n    }\n\n    constructor(address config_) Ownable() {\n        config = NTConfig(config_);\n    }\n\n    function setMigrationOpen(bool isOpen) external onlyOwner {\n        migrationOpen = isOpen;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/interfaces/IMigrateable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IMigrateable {\n    function migrateAsset(address sender, uint256 tokenId) external;\n}\n"
    },
    "src/v2/NTConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {OwnableUpgradeable} from \"openzeppelin-upgradeable/access/OwnableUpgradeable.sol\";\nimport {Initializable} from \"openzeppelin-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC721Metadata} from \"openzeppelin/token/ERC721/extensions/IERC721Metadata.sol\";\nimport {IERC721} from \"openzeppelin/token/ERC721/IERC721.sol\";\n\ninterface ICitizen {\n    function getGenderOfTokenId(uint256 citizenId) external view returns (bool);\n}\n\nenum NTComponent {\n    S1_IDENTITY,\n    S1_BOUGHT_IDENTITY,\n    S1_VAULT,\n    S1_ITEM,\n    S1_LAND,\n    S1_CITIZEN,\n    S2_IDENTITY,\n    S2_ITEM,\n    S2_LAND,\n    S2_CITIZEN,\n    CHAMPION_CHIP\n}\n\nenum NTSecondaryComponent {\n    S1_IDENTITY_RARE_MINT,\n    S1_IDENTITY_HAND_MINT,\n    S1_CITIZEN_FEMALE,\n    S2_CITIZEN_FEMALE\n}\n\nenum NTSeason {\n    INVALID,\n    NO_SEASON,\n    SEASON_1,\n    SEASON_2\n}\n\nstruct NTComponents {\n    address s1Identity;\n    address s1BoughtIdentity;\n    address s1Vault;\n    address s1Item;\n    address s1Land;\n    address s1Citizen;\n    address s2Identity;\n    address s2Item;\n    address s2Land;\n    address s2Citizen;\n    address championChips;\n}\n\nstruct NTSecondaryComponents {\n    address s1IdentityRareMint;\n    address s1IdentityHandMint;\n    address s1CitizenFemale;\n    address s2CitizenFemale;\n}\n\nstruct FallbackThresholds {\n    uint16 s1Identity;\n    uint16 s1BoughtIdentity;\n    uint16 s1Vault;\n    uint16 s1Item;\n    uint16 s1Land;\n    uint16 s1Citizen;\n    uint16 s2Identity;\n    uint16 s2Item;\n    uint16 s2Land;\n    uint16 s2Citizen;\n    uint16 championChips;\n}\n\nerror ComponentNotFound();\nerror AddressNotConfigured();\nerror TokenNotFound();\n\ncontract NTConfig is OwnableUpgradeable {\n    bool constant V1 = false;\n    bool constant V2 = true;\n\n    address public migrator;\n    address public bytesContract;\n\n    FallbackThresholds fallbackThresholds;\n\n    // maps `isV2` => `addresses`\n    mapping(bool => NTComponents) _components;\n\n    NTComponents _metadataContracts;\n    NTSecondaryComponents _secondaryMetadataContracts;\n\n    function initialize() external initializer {\n        __Ownable_init();\n    } \n\n    function findMigrator(\n        NTComponent component\n    ) external view returns (address) {\n        return findComponent(component, true);\n    }\n\n    /**\n     * @notice Finds the `component` in the version defined by `isV2`.\n     *\n     * @param component `NTComponent`encoding of the component\n     * @param isV2 defines whether V1 or V2 addresses are to be overridden\n     */\n    function findComponent(\n        NTComponent component,\n        bool isV2\n    ) public view returns (address) {\n        NTComponents storage components = _components[isV2];\n        if (component == NTComponent.S1_IDENTITY) {\n            return components.s1Identity;\n        } else if (component == NTComponent.S1_BOUGHT_IDENTITY) {\n            return components.s1BoughtIdentity;\n        } else if (component == NTComponent.S1_VAULT) {\n            return components.s1Vault;\n        } else if (component == NTComponent.S1_ITEM) {\n            return components.s1Item;\n        } else if (component == NTComponent.S1_LAND) {\n            return components.s1Land;\n        } else if (component == NTComponent.S1_CITIZEN) {\n            return components.s1Citizen;\n        } else if (component == NTComponent.S2_IDENTITY) {\n            return components.s2Identity;\n        } else if (component == NTComponent.S2_ITEM) {\n            return components.s2Item;\n        } else if (component == NTComponent.S2_LAND) {\n            return components.s2Land;\n        } else if (component == NTComponent.S2_CITIZEN) {\n            return components.s2Citizen;\n        } else if (component == NTComponent.CHAMPION_CHIP) {\n            return components.championChips;\n        }\n        revert ComponentNotFound();\n    }\n\n    /**\n     * @notice Decodes the `components` into a `NTComponents` struct and\n     * overrides all the fields relating to the provided version defined by\n     * `isV2`.\n     *\n     * @param components encoded struct of addresses to each NT component\n     * @param isV2 defines whether V1 or V2 addresses are to be overridden\n     */\n    function enlist(bytes calldata components, bool isV2) public onlyOwner {\n        NTComponents memory components_ = abi.decode(\n            components,\n            (NTComponents)\n        );\n        _components[isV2] = components_;\n    }\n\n    /**\n     * @notice Sets the provided `component` to `addr`. `isV2` defines\n     * which version is being overridden.\n     *\n     * @param component enum encoding from `NTComponent`\n     * @param addr address to `component`\n     * @param isV2 defines whether V1 or V2 addresses are to be overridden\n     */\n    function enlist(\n        NTComponent component,\n        address addr,\n        bool isV2\n    ) external onlyOwner {\n        NTComponents storage components = _components[isV2];\n        if (component == NTComponent.S1_IDENTITY) {\n            components.s1Identity = addr;\n        } else if (component == NTComponent.S1_BOUGHT_IDENTITY) {\n            components.s1BoughtIdentity = addr;\n        } else if (component == NTComponent.S1_VAULT) {\n            components.s1Vault = addr;\n        } else if (component == NTComponent.S1_ITEM) {\n            components.s1Item = addr;\n        } else if (component == NTComponent.S1_LAND) {\n            components.s1Land = addr;\n        } else if (component == NTComponent.S1_CITIZEN) {\n            components.s1Citizen = addr;\n        } else if (component == NTComponent.S2_IDENTITY) {\n            components.s2Identity = addr;\n        } else if (component == NTComponent.S2_ITEM) {\n            components.s2Item = addr;\n        } else if (component == NTComponent.S2_LAND) {\n            components.s2Land = addr;\n        } else if (component == NTComponent.S2_CITIZEN) {\n            components.s2Citizen = addr;\n        } else if (component == NTComponent.CHAMPION_CHIP) {\n            components.championChips = addr;\n        }\n    }\n\n    /**\n     * @notice Decodes the `metadata` into a `NTComponents` struct\n     *\n     * @param metadata encoded struct of addresses to each NT metadata contract\n     */\n    function enlistMetadata(bytes calldata metadata) public onlyOwner {\n        NTComponents memory metadataContracts = abi.decode(\n            metadata,\n            (NTComponents)\n        );\n        _metadataContracts = metadataContracts;\n    }\n\n    function enlistMetadata(\n        NTComponent metadata,\n        address addr\n    ) external onlyOwner {\n        if (metadata == NTComponent.S1_IDENTITY) {\n            _metadataContracts.s1Identity = addr;\n        } else if (metadata == NTComponent.S1_BOUGHT_IDENTITY) {\n            _metadataContracts.s1BoughtIdentity = addr;\n        } else if (metadata == NTComponent.S1_VAULT) {\n            _metadataContracts.s1Vault = addr;\n        } else if (metadata == NTComponent.S1_ITEM) {\n            _metadataContracts.s1Item = addr;\n        } else if (metadata == NTComponent.S1_LAND) {\n            _metadataContracts.s1Land = addr;\n        } else if (metadata == NTComponent.S1_CITIZEN) {\n            _metadataContracts.s1Citizen = addr;\n        } else if (metadata == NTComponent.S2_IDENTITY) {\n            _metadataContracts.s2Identity = addr;\n        } else if (metadata == NTComponent.S2_ITEM) {\n            _metadataContracts.s2Item = addr;\n        } else if (metadata == NTComponent.S2_LAND) {\n            _metadataContracts.s2Land = addr;\n        } else if (metadata == NTComponent.S2_CITIZEN) {\n            _metadataContracts.s2Citizen = addr;\n        } else if (metadata == NTComponent.CHAMPION_CHIP) {\n            _metadataContracts.championChips = addr;\n        }\n    }\n\n    /**\n     * @notice Decodes the `metadata` into a `NTSecondaryMetadata` struct\n     *\n     * @param metadata encoded struct of addresses to each NT secondary metadata contract\n     */\n    function enlistSecondaryMetadata(bytes calldata metadata) public onlyOwner {\n        NTSecondaryComponents memory metadataContracts = abi.decode(\n            metadata,\n            (NTSecondaryComponents)\n        );\n        _secondaryMetadataContracts = metadataContracts;\n    }\n\n    function enlistSecondaryMetadata(\n        NTSecondaryComponent metadata,\n        address addr\n    ) external onlyOwner {\n        if (metadata == NTSecondaryComponent.S1_IDENTITY_RARE_MINT) {\n            _secondaryMetadataContracts.s1IdentityRareMint = addr;\n        } else if (metadata == NTSecondaryComponent.S1_IDENTITY_HAND_MINT) {\n            _secondaryMetadataContracts.s1IdentityHandMint = addr;\n        } else if (metadata == NTSecondaryComponent.S1_CITIZEN_FEMALE) {\n            _secondaryMetadataContracts.s1CitizenFemale = addr;\n        } else if (metadata == NTSecondaryComponent.S2_CITIZEN_FEMALE) {\n            _secondaryMetadataContracts.s2CitizenFemale = addr;\n        }\n    }\n\n    function setBytesContract(address addr) external onlyOwner {\n        bytesContract = addr;\n    }\n\n    function setFallbackThreshold(\n        NTComponent component,\n        uint16 threshold\n    ) external onlyOwner {\n        if (component == NTComponent.S1_IDENTITY) {\n            fallbackThresholds.s1Identity = threshold;\n        } else if (component == NTComponent.S1_BOUGHT_IDENTITY) {\n            fallbackThresholds.s1BoughtIdentity = threshold;\n        } else if (component == NTComponent.S1_VAULT) {\n            fallbackThresholds.s1Vault = threshold;\n        } else if (component == NTComponent.S1_ITEM) {\n            fallbackThresholds.s1Item = threshold;\n        } else if (component == NTComponent.S1_LAND) {\n            fallbackThresholds.s1Land = threshold;\n        } else if (component == NTComponent.S1_CITIZEN) {\n            fallbackThresholds.s1Citizen = threshold;\n        } else if (component == NTComponent.S2_IDENTITY) {\n            fallbackThresholds.s2Identity = threshold;\n        } else if (component == NTComponent.S2_ITEM) {\n            fallbackThresholds.s2Item = threshold;\n        } else if (component == NTComponent.S2_LAND) {\n            fallbackThresholds.s2Land = threshold;\n        } else if (component == NTComponent.S2_CITIZEN) {\n            fallbackThresholds.s2Citizen = threshold;\n        } else if (component == NTComponent.CHAMPION_CHIP) {\n            fallbackThresholds.championChips = threshold;\n        }\n    }\n\n    function setMigrator(address addr) external onlyOwner {\n        migrator = addr;\n    }\n\n    function tokenExists(uint256 tokenId) external view returns (bool) {\n        if (msg.sender == _metadataContracts.s1BoughtIdentity) {\n            if (tokenId > fallbackThresholds.s1BoughtIdentity) {\n                try\n                    IERC721(_components[V2].s1Identity).ownerOf(tokenId)\n                returns (address) {\n                    return true;\n                } catch {\n                    return false;\n                }\n            } else if (\n                IERC721(_components[V1].s1BoughtIdentity).ownerOf(tokenId) !=\n                address(0)\n            ) {\n                return true;\n            }\n            return false;\n        }\n        revert TokenNotFound();\n    }\n\n    /**\n     * @notice metadata contract will call parent to see who owns the token.\n     * Based on metadata contract that's calling we will look at v1 and v2 a specific nft collection\n     * if it exists in v2 we return v2 ownerOf else we return v1 ownerOf\n     */\n    function ownerOf(uint256 tokenId) external view returns (address) {\n        if (msg.sender == _metadataContracts.s1Identity) {\n            return\n                IERC721(\n                    _components[tokenId > fallbackThresholds.s1Identity]\n                        .s1Identity\n                ).ownerOf(tokenId);\n        } else if (msg.sender == _metadataContracts.s1Item) {\n            return\n                IERC721(_components[tokenId > fallbackThresholds.s1Item].s1Item)\n                    .ownerOf(tokenId);\n        } else if (msg.sender == _metadataContracts.s1Land) {\n            return\n                IERC721(_components[tokenId > fallbackThresholds.s1Land].s1Land)\n                    .ownerOf(tokenId);\n        } else if (msg.sender == _metadataContracts.s2Identity) {\n            return\n                IERC721(\n                    _components[tokenId > fallbackThresholds.s2Identity]\n                        .s2Identity\n                ).ownerOf(tokenId);\n        } else if (msg.sender == _metadataContracts.s2Item) {\n            return\n                IERC721(_components[tokenId > fallbackThresholds.s2Item].s2Item)\n                    .ownerOf(tokenId);\n        } else if (msg.sender == _metadataContracts.s2Land) {\n            return\n                IERC721(_components[tokenId > fallbackThresholds.s2Land].s2Land)\n                    .ownerOf(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getAbility(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getAbility(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getAbility(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getAllocation(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_2) {\n            return\n                NTConfig(_metadataContracts.s2Identity).getAllocation(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getApparel(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return NTConfig(_metadataContracts.s1Item).getApparel(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Item).getApparel(tokenId);\n        } else {\n            revert AddressNotConfigured();\n        }\n    }\n\n    function getClass(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getClass(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getClass(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getExpression(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_2) {\n            return\n                NTConfig(_metadataContracts.s2Identity).getExpression(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getEyes(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getEyes(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getEyes(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getGender(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getGender(\n                    tokenId\n                );\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getHair(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getHair(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getHelm(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return NTConfig(_metadataContracts.s1Item).getHelm(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Item).getHelm(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getLocation(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return NTConfig(_metadataContracts.s1Land).getLocation(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Land).getLocation(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getNose(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getNose(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getRace(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getRace(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getRace(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getVehicle(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return NTConfig(_metadataContracts.s1Item).getVehicle(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Item).getVehicle(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getWeapon(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return NTConfig(_metadataContracts.s1Item).getWeapon(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Item).getWeapon(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getAdditionalItem(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_metadataContracts.s1Vault).getAdditionalItem(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getAttractiveness(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId))\n                    .getAttractiveness(tokenId);\n        } else if (season == NTSeason.SEASON_2) {\n            return\n                NTConfig(_metadataContracts.s2Identity).getAttractiveness(\n                    tokenId\n                );\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getCool(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getCool(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getCool(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getIntelligence(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId))\n                    .getIntelligence(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getStrength(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getStrength(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return NTConfig(_metadataContracts.s2Identity).getStrength(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getTechSkill(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getTechSkill(\n                    tokenId\n                );\n        } else if (season == NTSeason.SEASON_2) {\n            return\n                NTConfig(_metadataContracts.s2Identity).getTechSkill(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getCreditYield(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId))\n                    .getCreditYield(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getCredits(uint256 tokenId) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_findS1IdentityMetadataContract(tokenId)).getCredits(\n                    tokenId\n                );\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getCreditProportionOfTotalSupply(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_metadataContracts.s1Vault)\n                    .getCreditProportionOfTotalSupply(tokenId);\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getCreditMultiplier(\n        uint256 tokenId\n    ) public view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            return\n                NTConfig(_metadataContracts.s1Vault).getCreditMultiplier(\n                    tokenId\n                );\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getIdentityIdOfTokenId(\n        uint256 citizenId\n    ) external view returns (uint256) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen).getIdentityIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen).getIdentityIdOfTokenId(\n                        citizenId\n                    );\n            }\n        } else if (season == NTSeason.SEASON_2) {\n            if (citizenId > fallbackThresholds.s2Citizen) {\n                return\n                    NTConfig(_components[V2].s2Citizen).getIdentityIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s2Citizen).getIdentityIdOfTokenId(\n                        citizenId\n                    );\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getVaultIdOfTokenId(\n        uint256 citizenId\n    ) external view returns (uint256) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen).getVaultIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen).getVaultIdOfTokenId(\n                        citizenId\n                    );\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getItemCacheIdOfTokenId(\n        uint256 citizenId\n    ) external view returns (uint256) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen).getItemCacheIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen).getItemCacheIdOfTokenId(\n                        citizenId\n                    );\n            }\n        } else if (season == NTSeason.SEASON_2) {\n            if (citizenId > fallbackThresholds.s2Citizen) {\n                return\n                    NTConfig(_components[V2].s2Citizen).getItemCacheIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s2Citizen).getItemCacheIdOfTokenId(\n                        citizenId\n                    );\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getLandDeedIdOfTokenId(\n        uint256 citizenId\n    ) external view returns (uint256) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen).getLandDeedIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen).getLandDeedIdOfTokenId(\n                        citizenId\n                    );\n            }\n        } else if (season == NTSeason.SEASON_2) {\n            if (citizenId > fallbackThresholds.s2Citizen) {\n                return\n                    NTConfig(_components[V2].s2Citizen).getLandDeedIdOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s2Citizen).getLandDeedIdOfTokenId(\n                        citizenId\n                    );\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getRewardRateOfTokenId(\n        uint256 citizenId\n    ) external view returns (uint256) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen).getRewardRateOfTokenId(\n                        citizenId\n                    );\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen).getRewardRateOfTokenId(\n                        citizenId\n                    );\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function getSpecialMessageOfTokenId(\n        uint256 citizenId\n    ) external view returns (string memory) {\n        NTSeason season = _seasonChecker(msg.sender);\n        if (season == NTSeason.SEASON_1) {\n            if (citizenId > fallbackThresholds.s1Citizen) {\n                return\n                    NTConfig(_components[V2].s1Citizen)\n                        .getSpecialMessageOfTokenId(citizenId);\n            } else {\n                return\n                    NTConfig(_components[V1].s1Citizen)\n                        .getSpecialMessageOfTokenId(citizenId);\n            }\n        } else if (season == NTSeason.SEASON_2) {\n            if (citizenId > fallbackThresholds.s2Citizen) {\n                return\n                    NTConfig(_components[V2].s2Citizen)\n                        .getSpecialMessageOfTokenId(citizenId);\n            } else {\n                return\n                    NTConfig(_components[V1].s2Citizen)\n                        .getSpecialMessageOfTokenId(citizenId);\n            }\n        }\n        revert AddressNotConfigured();\n    }\n\n    function calculateRewardRate(\n        uint256 identityId,\n        uint256 vaultId\n    ) external returns (uint256) {\n        return\n            NTConfig(_metadataContracts.s1Citizen).calculateRewardRate(\n                identityId,\n                vaultId\n            );\n    }\n\n    function checkSpecialItems(uint256 tokenId) external view returns (string memory) {\n        return NTConfig(_components[V1].s1Item).checkSpecialItems(tokenId);\n    }\n\n    function generateURI(\n        uint256 tokenId\n    ) external view returns (string memory) {\n        (bool isValid, , ) = _validateCaller(msg.sender);\n        require(isValid, \"generateURI: not configured address\");\n        NTConfig tokenContract = NTConfig(\n            _selectTokenContract(msg.sender, tokenId)\n        );\n        return tokenContract.generateURI(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\n        (bool isValid, , ) = _validateCaller(msg.sender);\n        require(isValid, \"tokenURI: not configured address\");\n        NTConfig tokenContract = NTConfig(\n            _selectTokenContract(msg.sender, tokenId)\n        );\n        if (\n            msg.sender == _components[V1].s1Citizen ||\n            msg.sender == _components[V2].s1Citizen ||\n            msg.sender == _components[V1].s2Citizen ||\n            msg.sender == _components[V2].s2Citizen\n        ) {\n            return tokenContract.generateURI(tokenId);\n        }\n        return tokenContract.tokenURI(tokenId);\n    }\n\n    function _findThreshold(\n        NTComponent component\n    ) internal view returns (uint256) {\n        if (component == NTComponent.S1_IDENTITY) {\n            return fallbackThresholds.s1Identity;\n        } else if (component == NTComponent.S1_BOUGHT_IDENTITY) {\n            return fallbackThresholds.s1BoughtIdentity;\n        } else if (component == NTComponent.S1_VAULT) {\n            return fallbackThresholds.s1Vault;\n        } else if (component == NTComponent.S1_ITEM) {\n            return fallbackThresholds.s1Item;\n        } else if (component == NTComponent.S1_LAND) {\n            return fallbackThresholds.s1Land;\n        } else if (component == NTComponent.S1_CITIZEN) {\n            return fallbackThresholds.s1Citizen;\n        } else if (component == NTComponent.S2_IDENTITY) {\n            return fallbackThresholds.s2Identity;\n        } else if (component == NTComponent.S2_ITEM) {\n            return fallbackThresholds.s2Item;\n        } else if (component == NTComponent.S2_LAND) {\n            return fallbackThresholds.s2Land;\n        } else if (component == NTComponent.S2_CITIZEN) {\n            return fallbackThresholds.s2Citizen;\n        } else if (component == NTComponent.CHAMPION_CHIP) {\n            return fallbackThresholds.championChips;\n        }\n        revert ComponentNotFound();\n    }\n\n    function _seasonChecker(address addr) internal view returns (NTSeason) {\n        if (\n            addr == _components[V1].s1Identity ||\n            addr == _components[V2].s1Identity ||\n            addr == _metadataContracts.s1Identity ||\n            addr == _secondaryMetadataContracts.s1IdentityRareMint ||\n            addr == _secondaryMetadataContracts.s1IdentityHandMint\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s1BoughtIdentity ||\n            addr == _components[V2].s1BoughtIdentity ||\n            addr == _metadataContracts.s1BoughtIdentity\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s1Vault ||\n            addr == _components[V2].s1Vault ||\n            addr == _metadataContracts.s1Vault\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s1Item ||\n            addr == _components[V2].s1Item ||\n            addr == _metadataContracts.s1Item\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s1Land ||\n            addr == _components[V2].s1Land ||\n            addr == _metadataContracts.s1Land\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s1Citizen ||\n            addr == _components[V2].s1Citizen ||\n            addr == _metadataContracts.s1Citizen ||\n            addr == _secondaryMetadataContracts.s1CitizenFemale\n        ) {\n            return NTSeason.SEASON_1;\n        } else if (\n            addr == _components[V1].s2Identity ||\n            addr == _components[V2].s2Identity ||\n            addr == _metadataContracts.s2Identity\n        ) {\n            return NTSeason.SEASON_2;\n        } else if (\n            addr == _components[V1].s2Item ||\n            addr == _components[V2].s2Item ||\n            addr == _metadataContracts.s2Item\n        ) {\n            return NTSeason.SEASON_2;\n        } else if (\n            addr == _components[V1].s2Land ||\n            addr == _components[V2].s2Land ||\n            addr == _metadataContracts.s2Land\n        ) {\n            return NTSeason.SEASON_2;\n        } else if (\n            addr == _components[V1].s2Citizen ||\n            addr == _components[V2].s2Citizen ||\n            addr == _metadataContracts.s2Citizen ||\n            addr == _secondaryMetadataContracts.s2CitizenFemale\n        ) {\n            return NTSeason.SEASON_2;\n        } else if (\n            addr == _components[V1].championChips ||\n            addr == _components[V2].championChips ||\n            addr == _metadataContracts.championChips\n        ) {\n            return NTSeason.NO_SEASON;\n        } else {\n            return NTSeason.INVALID;\n        }\n    }\n\n    function _findS1IdentityMetadataContract(\n        uint256 tokenId\n    ) internal view returns (address) {\n        if (tokenId < 2251) {\n            return _metadataContracts.s1Identity;\n        } else if (tokenId < 2281) {\n            return _secondaryMetadataContracts.s1IdentityRareMint;\n        } else if (tokenId < 2288) {\n            return _secondaryMetadataContracts.s1IdentityHandMint;\n        } else {\n            return _metadataContracts.s1BoughtIdentity;\n        }\n    }\n\n    function _validateAddress(\n        address addr,\n        bool isV2\n    ) internal view returns (bool) {\n        NTComponents storage components = _components[isV2];\n        if (addr == components.s1Identity) {\n            return true;\n        } else if (addr == components.s1BoughtIdentity) {\n            return true;\n        } else if (addr == components.s1Vault) {\n            return true;\n        } else if (addr == components.s1Vault) {\n            return true;\n        } else if (addr == components.s1Item) {\n            return true;\n        } else if (addr == components.s1Land) {\n            return true;\n        } else if (addr == components.s1Citizen) {\n            return true;\n        } else if (addr == components.s2Identity) {\n            return true;\n        } else if (addr == components.s2Item) {\n            return true;\n        } else if (addr == components.s2Land) {\n            return true;\n        } else if (addr == components.s2Citizen) {\n            return true;\n        } else if (addr == components.championChips) {\n            return true;\n        }\n        revert ComponentNotFound();\n    }\n\n    /**\n     * @notice Validates the `caller` address under the assumption\n     * of it being from the `V2` set of addresses. If no address is found,\n     * it gracefully returns a `false` success-state and all following tuple\n     * arguments are invalid.\n     *\n     * @param caller the address of the caller (usually `msg.sender`)\n     */\n    function _validateCaller(\n        address caller\n    ) internal view returns (bool, address, NTComponent) {\n        NTComponents storage v1Components = _components[V1];\n        NTComponents storage v2Components = _components[V2];\n        address fallbackAddr;\n        NTComponent callingComponent;\n\n        if (caller == v2Components.s1Identity || caller == v1Components.s1Identity) {\n            fallbackAddr = v1Components.s1Identity;\n            callingComponent = NTComponent.S1_IDENTITY;\n        } else if (caller == v1Components.s1BoughtIdentity) {\n            fallbackAddr = v1Components.s1BoughtIdentity;\n            callingComponent = NTComponent.S1_BOUGHT_IDENTITY;\n        } else if (caller == v2Components.s1Vault || caller == v1Components.s1Vault) {\n            fallbackAddr = v1Components.s1Vault;\n            callingComponent = NTComponent.S1_VAULT;\n        } else if (caller == v2Components.s1Item || caller == v1Components.s1Item) {\n            fallbackAddr = v1Components.s1Item;\n            callingComponent = NTComponent.S1_ITEM;\n        } else if (caller == v2Components.s1Land || caller == v1Components.s1Land) {\n            fallbackAddr = v1Components.s1Land;\n            callingComponent = NTComponent.S1_LAND;\n        } else if (caller == v2Components.s1Citizen || caller == v1Components.s1Citizen) {\n            fallbackAddr = v1Components.s1Citizen;\n            callingComponent = NTComponent.S1_CITIZEN;\n        } else if (caller == v2Components.s2Identity || caller == v1Components.s2Identity) {\n            fallbackAddr = v1Components.s2Identity;\n            callingComponent = NTComponent.S2_IDENTITY;\n        } else if (caller == v2Components.s2Item || caller == v1Components.s2Item) {\n            fallbackAddr = v1Components.s2Item;\n            callingComponent = NTComponent.S2_ITEM;\n        } else if (caller == v2Components.s2Land || caller == v1Components.s2Land) {\n            fallbackAddr = v1Components.s2Land;\n            callingComponent = NTComponent.S2_LAND;\n        } else if (caller == v2Components.s2Citizen || caller == v1Components.s2Citizen) {\n            fallbackAddr = v1Components.s2Citizen;\n            callingComponent = NTComponent.S2_CITIZEN;\n        } else if (caller == v2Components.championChips) {\n            fallbackAddr = v1Components.championChips;\n            callingComponent = NTComponent.CHAMPION_CHIP;\n        } else {\n            return (false, fallbackAddr, callingComponent);\n        }\n        return (true, fallbackAddr, callingComponent);\n    }\n\n    function _selectTokenContract(\n        address component,\n        uint256 tokenId\n    ) internal view returns (address) {\n        if (component == _components[V2].s1Identity) {\n            if (tokenId > fallbackThresholds.s1Identity) {\n                return _metadataContracts.s1BoughtIdentity;\n            } else {\n                //TODO: remove magic numbers probably with some new thresholds mapping\n                if (tokenId < 2251) {\n                    return _metadataContracts.s1Identity;\n                } else if (tokenId < 2281) {\n                    return _secondaryMetadataContracts.s1IdentityRareMint;\n                } else {\n                    return _secondaryMetadataContracts.s1IdentityHandMint;\n                }\n            }\n        } else if (component == _components[V1].s1Identity) {\n            return _metadataContracts.s1Identity;\n        } else if (component == _components[V1].s1BoughtIdentity) {\n            return _metadataContracts.s1BoughtIdentity;\n        } else if (\n            component == _components[V2].s1Vault ||\n            component == _components[V1].s1Vault\n        ) {\n            return _metadataContracts.s1Vault;\n        } else if (\n            component == _components[V2].s1Item ||\n            component == _components[V1].s1Item\n        ) {\n            return _metadataContracts.s1Item;\n        } else if (\n            component == _components[V2].s1Land ||\n            component == _components[V1].s1Land\n        ) {\n            return _metadataContracts.s1Land;\n        } else if (\n            component == _components[V2].s1Citizen ||\n            component == _components[V1].s1Citizen\n        ) {\n            if (ICitizen(component).getGenderOfTokenId(tokenId)) {\n                return _secondaryMetadataContracts.s1CitizenFemale;\n            }\n            return _metadataContracts.s1Citizen;\n        } else if (\n            component == _components[V2].s2Identity ||\n            component == _components[V1].s2Identity\n        ) {\n            return _metadataContracts.s2Identity;\n        } else if (\n            component == _components[V2].s2Item ||\n            component == _components[V1].s2Item\n        ) {\n            return _metadataContracts.s2Item;\n        } else if (\n            component == _components[V2].s2Land ||\n            component == _components[V1].s2Land\n        ) {\n            return _metadataContracts.s2Land;\n        } else if (\n            component == _components[V2].s2Citizen ||\n            component == _components[V1].s2Citizen\n        ) {\n            if (ICitizen(component).getGenderOfTokenId(tokenId)) {\n                return _secondaryMetadataContracts.s2CitizenFemale;\n            }\n            return _metadataContracts.s2Citizen;\n        } else if (\n            component == _components[V2].championChips ||\n            component == _components[V1].championChips\n        ) {\n            return _metadataContracts.championChips;\n        }\n        revert ComponentNotFound();\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "Bytes2.0/=lib/Bytes2.0/contracts/",
      "bytes/=lib/Bytes2.0/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "nt-with-oracle/=lib/nt-with-oracle/contracts/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/contracts/",
      "operator-filter-registry/=lib/operator-filter-registry/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 20
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}}