{{
  "language": "Solidity",
  "sources": {
    "/contracts/IdoNftNew.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILGGNFT {\r\n    function safeMintBlindBox(address to) external;\r\n}\r\n\r\ncontract IdoNftNew is Ownable {\r\n\r\n    bool public open;\r\n    bool public done;\r\n    bool public publicSell;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => bool) public doneAddress;\r\n    uint256 public sellcount = 388;\r\n    uint256 public sales;\r\n    uint256 public boxTokenPrices = 8 * 10 ** 16;\r\n    ILGGNFT public token;\r\n    address public beneficiary = address(0xB02ae6be01E1920798561C21eb26952Af7549e69);\r\n    uint256 public whitelistCount = 200;\r\n    uint256 public whitelistSales;\r\n\r\n    constructor(ILGGNFT _token){\r\n        token = _token;\r\n    }\r\n\r\n    function buyBox() external payable {\r\n        uint256 _boxesLength = 1;\r\n        require(publicSell, \"No launch\");\r\n        require(!done, \"Finish\");\r\n        require(_boxesLength > 0, \"Boxes length must > 0\");\r\n        address sender = msg.sender;\r\n        require(!doneAddress[sender], \"Purchase only once\");\r\n        uint256 price = _boxesLength * boxTokenPrices;\r\n        uint256 amount = msg.value;\r\n        require(amount >= price, \"Transfer amount error\");\r\n        doneAddress[sender] = true;\r\n        \r\n        for (uint256 i = 0; i < _boxesLength; i++) {\r\n            require(sales < sellcount, \"Sell out\");\r\n            sales += 1;\r\n            if(sales >= sellcount){\r\n                done = true;\r\n            }\r\n            token.safeMintBlindBox(sender);\r\n        }\r\n            \r\n        payable(beneficiary).transfer(price);  \r\n        emit Buy(sender, beneficiary, price);\r\n    }\r\n\r\n    function whitelistBuy() external payable {\r\n        require(whitelistSales < whitelistCount, \"Sell out...\");\r\n        require(open, \"No launch\");\r\n        address sender = msg.sender;\r\n        uint256 price = boxTokenPrices;\r\n        uint256 amount = msg.value;\r\n        require(amount >= price, \"Transfer amount error\");\r\n        require(whitelist[sender], \"Account is not already whitelist\");\r\n        whitelist[sender] = false;\r\n        whitelistSales += 1;\r\n        token.safeMintBlindBox(sender);\r\n        payable(beneficiary).transfer(price);\r\n    }\r\n\r\n    function setWhitelist(address[] memory _accounts) public onlyOwner {\r\n        for (uint i = 0; i < _accounts.length; i+=1) {\r\n            whitelist[_accounts[i]] = true;\r\n        }\r\n    }\r\n    function delWhitelist(address[] memory _accounts) public onlyOwner {\r\n        for (uint i = 0; i < _accounts.length; i+=1) {\r\n            whitelist[_accounts[i]] = false;\r\n        }\r\n    }\r\n\r\n    function setSellcount(uint256 _count) public onlyOwner {\r\n        sellcount = _count;\r\n    }\r\n\r\n    function setWhitelistCount(uint256 _whitelistCount) public onlyOwner {\r\n        whitelistCount = _whitelistCount;\r\n    }\r\n\r\n    function setBoxTokenPrices(uint256 _boxTokenPrices) public onlyOwner {\r\n        boxTokenPrices = _boxTokenPrices;\r\n    }\r\n\r\n    function setOpen(bool _open) public onlyOwner {\r\n        open = _open;\r\n    }\r\n\r\n    function setDone(bool _done) public onlyOwner {\r\n        done = _done;\r\n    }\r\n\r\n    function setPublicSell(bool _publicSell) public onlyOwner {\r\n        publicSell = _publicSell;\r\n    }\r\n\r\n    function setToken(ILGGNFT _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /* ========== EMERGENCY ========== */\r\n    /*\r\n        Users make mistake by transferring usdt/busd ... to contract address.\r\n        This function allows contract owner to withdraw those tokens and send back to users.\r\n    */\r\n    function rescueStuckToken(address _token) external onlyOwner {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(owner(), amount);\r\n    }\r\n\r\n    function refund(address _addr, uint256 _amount) external onlyOwner {\r\n        payable(_addr).transfer(_amount);\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n    event Buy(address indexed user, address indexed beneficiary, uint256 amount);\r\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}