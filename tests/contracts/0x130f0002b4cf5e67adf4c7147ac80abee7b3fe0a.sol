{{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/JayMart.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IJAY {\n    function sell(uint256 value) external;\n\n    function buy(address reciever) external payable;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function ETHtoJAY(uint256 value) external view returns (uint256);\n}\n\ncontract JayMart is Ownable, ReentrancyGuard {\n    // Define our price feed interface\n    AggregatorV3Interface internal priceFeed;\n\n    // Create variable to hold the team wallet address\n    address payable private TEAM_WALLET;\n\n    // Create variable to hold contract address\n    address payable private immutable JAY_ADDRESS;\n\n    // Define new IJAY interface\n    IJAY private immutable JAY;\n\n    // Define some constant variables\n    uint256 private constant SELL_NFT_PAYOUT = 2;\n    uint256 private constant SELL_NFT_FEE_VAULT = 4;\n    uint256 private constant SELL_NFT_FEE_TEAM = 4;\n\n    uint256 private constant BUY_NFT_FEE_TEAM = 2;\n    uint256 private constant USD_PRICE_SELL = 2 * 10 ** 18;\n    uint256 private constant USD_PRICE_BUY = 10 * 10 ** 18;\n\n    // Define variables for amount of NFTs bought/sold\n    uint256 private nftsBought;\n    uint256 private nftsSold;\n\n    // Create variables for gas fee calculation\n    uint256 private buyNftFeeEth = 0.01 * 10 ** 18;\n    uint256 private buyNftFeeJay = 10 * 10 ** 18;\n    uint256 private sellNftFeeEth = 0.001 * 10 ** 18;\n\n    // Create variable to hold when the next fee update can occur\n    uint256 private nextFeeUpdate = block.timestamp + (7 days);\n\n    // Constructor\n    constructor(address _jayAddress) {\n        JAY = IJAY(_jayAddress);\n        JAY_ADDRESS = payable(_jayAddress);\n        setTEAMWallet(0x985B6B9064212091B4b325F68746B77262801BcB);\n        priceFeed = AggregatorV3Interface(\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n        ); //main\n    }\n\n    function setTEAMWallet(address _address) public onlyOwner {\n        TEAM_WALLET = payable(_address);\n    }\n\n    /*\n     * Name: sendEth\n     * Purpose: Tranfer ETH tokens\n     * Parameters:\n     *    - @param 1: Address\n     *    - @param 2: Value\n     * Return: n/a\n     */\n    function sendEth(address _address, uint256 _value) private {\n        (bool success, ) = _address.call{value: _value}(\"\");\n        require(success, \"ETH Transfer failed.\");\n    }\n\n    /*\n     * Name: buyNFTs\n     * Purpose: Purchase NFTs with ETH\n     * Parameters:\n     *    - @param 1: ERC721 Token Address\n     *    - @param 2: ERC721 IDs\n     *    - @param 3: ERC1155 Token Address\n     *    - @param 4: ERC1155 IDs\n     *    - @param 5: ERC1155 Amounts\n     * Return: n/a\n     */\n    function buyNFTs(\n        address[] calldata erc721TokenAddress,\n        uint256[] calldata erc721Ids,\n        address[] calldata erc1155TokenAddress,\n        uint256[] calldata erc1155Ids,\n        uint256[] calldata erc1155Amounts\n    ) external payable nonReentrant {\n        // Calculate total\n        require(\n            erc721TokenAddress.length + erc1155TokenAddress.length <= 500,\n            \"Max is 500\"\n        );\n        uint256 total = erc721TokenAddress.length;\n\n        // Transfer ERC721 NFTs\n        buyERC721(erc721TokenAddress, erc721Ids);\n\n        // Transfer ERC1155 NFTs\n        total += buyERC1155(erc1155TokenAddress, erc1155Ids, erc1155Amounts);\n\n        // Increase NFTs bought\n        nftsBought += total;\n\n        // Calculate Jay fee\n        uint256 _fee = total * (buyNftFeeEth);\n\n        // Make sure enough ETH is present\n        require(msg.value >= _fee, \"You need to pay more ETH.\");\n\n        // Send fees to designated wallets\n        sendEth(TEAM_WALLET, msg.value / (BUY_NFT_FEE_TEAM));\n        sendEth(JAY_ADDRESS, address(this).balance);\n\n        // Initiate burn method\n        JAY.burnFrom(msg.sender, total * (buyNftFeeJay));\n    }\n\n    /*\n     * Name: buyJay\n     * Purpose: Purchase JAY tokens by selling NFTs\n     * Parameters:\n     *    - @param 1: ERC721 Token Address\n     *    - @param 2: ERC721 IDs\n     *    - @param 3: ERC1155 Token Address\n     *    - @param 4: ERC1155 IDs\n     *    - @param 5: ERC1155 Amounts\n     * Return: n/a\n     */\n    function buyJay(\n        address[] calldata erc721TokenAddress,\n        uint256[] calldata erc721Ids,\n        address[] calldata erc1155TokenAddress,\n        uint256[] calldata erc1155Ids,\n        uint256[] calldata erc1155Amounts\n    ) external payable nonReentrant {\n        require(\n            erc721TokenAddress.length + erc1155TokenAddress.length <= 500,\n            \"Max is 500\"\n        );\n        uint256 teamFee = msg.value / (SELL_NFT_FEE_TEAM);\n        uint256 jayFee = msg.value / (SELL_NFT_FEE_VAULT);\n        uint256 userValue = msg.value / (SELL_NFT_PAYOUT);\n\n        uint256 total = erc721TokenAddress.length;\n\n        // Transfer ERC721 NFTs\n        buyJayWithERC721(erc721TokenAddress, erc721Ids);\n\n        // Transfer ERC1155 NFTs\n        total += buyJayWithERC1155(\n            erc1155TokenAddress,\n            erc1155Ids,\n            erc1155Amounts\n        );\n\n        // Increase nftsSold variable\n\n        nftsSold += total;\n\n        // Calculate fee\n        uint256 _fee = total >= 100\n            ? ((total) * (sellNftFeeEth)) / (2)\n            : (total) * (sellNftFeeEth);\n\n        // Make sure enough ETH is present\n        require(msg.value >= _fee, \"You need to pay more ETH.\");\n\n        // Send fees to their designated wallets\n        sendEth(TEAM_WALLET, teamFee);\n        sendEth(JAY_ADDRESS, jayFee);\n\n        // buy JAY\n        JAY.buy{value: userValue}(msg.sender);\n    }\n\n    /*\n     * Name: buyERC721\n     * Purpose: Transfer ERC721 NFTs\n     * Parameters:\n     *    - @param 1: ERC721 Token Address\n     *    - @param 2: ERC721 IDs\n     * Return: n/a\n     */\n    function buyERC721(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids\n    ) internal {\n        for (uint256 id = 0; id < ids.length; id++) {\n            IERC721(_tokenAddress[id]).safeTransferFrom(\n                address(this),\n                msg.sender,\n                ids[id]\n            );\n        }\n    }\n\n    /*\n     * Name: buyERC1155\n     * Purpose: Transfer ERC1155 NFTs\n     * Parameters:\n     *    - @param 1: ERC1155 Token Address\n     *    - @param 2: ERC1155 IDs\n     *    - @param 3: ERC1155 Amounts\n     * Return: Amount of NFTs bought\n     */\n    function buyERC1155(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) internal returns (uint256) {\n        uint256 amount = 0;\n        for (uint256 id = 0; id < ids.length; id++) {\n            amount = amount + (amounts[id]);\n            IERC1155(_tokenAddress[id]).safeTransferFrom(\n                address(this),\n                msg.sender,\n                ids[id],\n                amounts[id],\n                \"\"\n            );\n        }\n        return amount;\n    }\n\n    /*\n     * Name: buyJayWithERC721\n     * Purpose: Buy JAY from selling ERC721 NFTs\n     * Parameters:\n     *    - @param 1: ERC721 Token Address\n     *    - @param 2: ERC721 IDs\n     *\n     * Return: n/a\n     */\n    function buyJayWithERC721(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids\n    ) internal {\n        for (uint256 id = 0; id < ids.length; id++) {\n            IERC721(_tokenAddress[id]).safeTransferFrom(\n                msg.sender,\n                address(this),\n                ids[id]\n            );\n        }\n    }\n\n    /*\n     * Name: buyJayWithERC1155\n     * Purpose: Buy JAY from selling ERC1155 NFTs\n     * Parameters:\n     *    - @param 1: ERC1155 Token Address\n     *    - @param 2: ERC1155 IDs\n     *    - @param 3: ERC1155 Amounts\n     *\n     * Return: Number of NFTs sold\n     */\n    function buyJayWithERC1155(\n        address[] calldata _tokenAddress,\n        uint256[] calldata ids,\n        uint256[] calldata amounts\n    ) internal returns (uint256) {\n        uint256 amount = 0;\n        for (uint256 id = 0; id < ids.length; id++) {\n            amount = amount + (amounts[id]);\n            IERC1155(_tokenAddress[id]).safeTransferFrom(\n                msg.sender,\n                address(this),\n                ids[id],\n                amounts[id],\n                \"\"\n            );\n        }\n        return amount;\n    }\n\n    function getPriceSell(uint256 total) public view returns (uint256) {\n        return total * sellNftFeeEth;\n    }\n\n    function getPriceBuy(uint256 total) public view returns (uint256) {\n        return total * buyNftFeeEth;\n    }\n\n    function getFees()\n        public\n        view\n        returns (uint256, uint256, uint256, uint256)\n    {\n        return (sellNftFeeEth, buyNftFeeEth, buyNftFeeJay, nextFeeUpdate);\n    }\n\n    function getTotals() public view returns (uint256, uint256) {\n        return (nftsBought, nftsSold);\n    }\n\n    /*\n     * Name: updateFees\n     * Purpose: Update the NFT sales fees\n     * Parameters: n/a\n     * Return: Array of uint256: NFT Sell Fee (ETH), NFT Buy Fee (ETH), NFT Buy Fee (JAY), time of next update\n     */\n    function updateFees()\n        external\n        nonReentrant\n        returns (uint256, uint256, uint256, uint256)\n    {\n        // Get latest price feed\n        (\n            uint80 roundID,\n            int256 price,\n            ,\n            uint256 timestamp,\n            uint80 answeredInRound\n        ) = priceFeed.latestRoundData();\n\n        require(price > 0, \"Chainlink price <= 0\");\n        require(answeredInRound >= roundID, \"Stale price\");\n        require(timestamp != 0, \"Round not complete\");\n\n        uint256 _price = uint256(price) * (1 * 10 ** 10);\n        require(timestamp > nextFeeUpdate, \"Fee update every 24 hrs\");\n\n        uint256 _sellNftFeeEth;\n        if (_price > USD_PRICE_SELL) {\n            uint256 _p = _price / (USD_PRICE_SELL);\n            _sellNftFeeEth = uint256(1 * 10 ** 18) / (_p);\n        } else {\n            _sellNftFeeEth = USD_PRICE_SELL / (_price);\n        }\n\n        require(\n            owner() == msg.sender ||\n                (sellNftFeeEth / (2) < _sellNftFeeEth &&\n                    sellNftFeeEth * (150) > _sellNftFeeEth),\n            \"Fee swing too high\"\n        );\n\n        sellNftFeeEth = _sellNftFeeEth;\n\n        if (_price > USD_PRICE_BUY) {\n            uint256 _p = _price / (USD_PRICE_BUY);\n            buyNftFeeEth = uint256(1 * 10 ** 18) / (_p);\n        } else {\n            buyNftFeeEth = USD_PRICE_BUY / (_price);\n        }\n        buyNftFeeJay = JAY.ETHtoJAY(buyNftFeeEth);\n\n        nextFeeUpdate = timestamp + (24 hours);\n        return (sellNftFeeEth, buyNftFeeEth, buyNftFeeJay, nextFeeUpdate);\n    }\n\n    function getLatestPrice() public view returns (int256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return price;\n    }\n\n    receive() external payable {}\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}