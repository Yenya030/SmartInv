{{
  "language": "Solidity",
  "sources": {
    "contracts/Funga.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./ERC721AQueryable.sol\";\n\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⠿⠟⠋⠁⠀⠀⠀⠀⠀⢀⣀⣤⣤⣀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⣤⣤⣶⣾⣷⡀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣧⠀⠀\n// ⠀⠀⣴⣿⣷⣦⣄⠀⠀⠀⠀⣿⣿⣿⣿⣿⣷⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀\n// ⠀⣸⣿⣿⣿⣿⡿⠆⠀⠀⠀⢿⣿⣿⣿⣿⣿⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⡿⠀\n// ⠀⢻⡿⠟⢉⣀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠋⠁⠀⠀⠀⠀⢰⣦⣄⣈⣉⠉⠉⠀⠀\n// ⠀⠀⠀⠀⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⡟⠀⠀⠀⠀\n// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀\ncontract Funga is ERC721AQueryable, Ownable, ReentrancyGuard {\n\tusing Address for address;\n\tusing Strings for uint256;\n\tusing MerkleProof for bytes32[];\n\n\tbytes32 public root = 0x7c692400d56fcdbe35a9ab6933326ccdf822412b680833be042823276f31ed97;\n\tbytes32 public root2 = 0x36f1900eacdb519374318bda0cec0eaeeda00af629e66d8dd58c5965e0bc0996;\n\n\tstring public _contractBaseURI = \"https://funga-backend.funga.io/contract_uri\";\n\tstring public _contractURI = \"https://funga-backend.funga.io/metadata/\";\n\n\tuint256 public maxSupply = 3333;\n\tuint256 public preSaleSupply = 1500;\n\n\tuint256 public presale1StartTime = 1659196800;\n\tuint256 public presale2StartTime = 1659198600;\n\tuint256 public publicStartTime = 1659200400;\n\n\tmapping(address => uint256) public usedAddresses;\n\n\tmodifier notContract() {\n\t\trequire(!_isContract(msg.sender), \"not allowed\");\n\t\trequire(msg.sender == tx.origin, \"proxy not allowed\");\n\t\t_;\n\t}\n\n\tconstructor() ERC721A(\"Funga\", \"FUNGA\") {}\n\n\t/**\n\t @dev only whitelisted can get one\n\t @param proof - merkle proof\n\t  */\n\tfunction presale1Get(bytes32[] calldata proof) external nonReentrant notContract {\n\t\trequire(usedAddresses[msg.sender] + 1 <= 1, \"wallet limit reached\");\n\t\trequire(block.timestamp >= presale1StartTime, \"not live\");\n\t\trequire(totalSupply() + 1 <= preSaleSupply, \"out of stock\");\n\t\trequire(isProofValid(msg.sender, 1, proof), \"invalid proof\");\n\n\t\tusedAddresses[msg.sender] += 1;\n\t\t_mint(msg.sender, 1);\n\t}\n\n\t/**\n\t @dev only whitelisted (part 2) can get one\n\t @param proof - merkle proof\n\t  */\n\tfunction presale2Get(bytes32[] calldata proof) external nonReentrant notContract {\n\t\trequire(usedAddresses[msg.sender] + 1 <= 1, \"wallet limit reached\");\n\t\trequire(block.timestamp >= presale2StartTime, \"not live\");\n\t\trequire(totalSupply() + 1 <= maxSupply, \"out of stock\");\n\t\trequire(isProofValid2(msg.sender, 1, proof), \"invalid proof\");\n\n\t\tusedAddresses[msg.sender] += 1;\n\t\t_mint(msg.sender, 1);\n\t}\n\n\t/**\n\t @dev everyone can get one even if you're not whitelisted\n\t  */\n\tfunction publicGet() external nonReentrant notContract {\n\t\trequire(block.timestamp >= publicStartTime, \"not live\");\n\t\trequire(totalSupply() + 1 <= maxSupply, \"out of stock\");\n\t\trequire(usedAddresses[msg.sender] + 1 <= 1, \"wallet limit reached\");\n\n\t\tusedAddresses[msg.sender] += 1;\n\t\t_mint(msg.sender, 1);\n\t}\n\n\t/**\n\t @dev admin mint\n\t @param to - destination\n\t @param qty - quantity\n\t  */\n\tfunction adminMint(address to, uint16 qty) external onlyOwner {\n\t\trequire(qty < 21, \"max 20 at once\");\n\t\t_mint(to, qty);\n\t}\n\n\t/**\n\t * READ FUNCTIONS\n\t */\n\tfunction exists(uint256 _tokenId) external view returns (bool) {\n\t\treturn _exists(_tokenId);\n\t}\n\n\t// function tokenURI(uint256 _tokenId) public view override returns (string memory) {\n\t// \trequire(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n\t// }\n\n\tfunction tokenURI(uint256 _tokenId)\n\t\tpublic\n\t\tview\n\t\toverride(ERC721A, IERC721A)\n\t\treturns (string memory)\n\t{\n\t\trequire(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\t\treturn string(abi.encodePacked(_contractBaseURI, _tokenId.toString(), \".json\"));\n\t}\n\n\tfunction contractURI() public view returns (string memory) {\n\t\treturn _contractURI;\n\t}\n\n\t//merkle root check\n\tfunction isProofValid(\n\t\taddress to,\n\t\tuint256 limit,\n\t\tbytes32[] memory proof\n\t) public view returns (bool) {\n\t\tbytes32 leaf = keccak256(abi.encodePacked(to, limit));\n\t\treturn proof.verify(root, leaf);\n\t}\n\n\t//merkle root check\n\tfunction isProofValid2(\n\t\taddress to,\n\t\tuint256 limit,\n\t\tbytes32[] memory proof\n\t) public view returns (bool) {\n\t\tbytes32 leaf = keccak256(abi.encodePacked(to, limit));\n\t\treturn proof.verify(root2, leaf);\n\t}\n\n\t/**\n\t * ADMIN FUNCTIONS\n\t */\n\tfunction setImportantURIs(\n\t\tstring memory newBaseURI,\n\t\tstring memory newContractURI,\n\t\tstring memory newUnrevealed\n\t) external onlyOwner {\n\t\t_contractBaseURI = newBaseURI;\n\t\t_contractURI = newContractURI;\n\t}\n\n\t//recover lost erc20. getting them back chance: very low\n\tfunction reclaimERC20Token(address erc20Token) external onlyOwner {\n\t\tIERC20(erc20Token).transfer(msg.sender, IERC20(erc20Token).balanceOf(address(this)));\n\t}\n\n\t//recover lost nfts. getting them back chance: very low\n\tfunction reclaimERC721(address erc721Token, uint256 id) external onlyOwner {\n\t\tIERC721(erc721Token).safeTransferFrom(address(this), msg.sender, id);\n\t}\n\n\t//contract doesn't accept eth, so this is not used\n\tfunction withdrawETH() public onlyOwner {\n\t\tpayable(msg.sender).transfer(address(this).balance);\n\t}\n\n\t//change the presale start time\n\tfunction setStartTimes(\n\t\tuint256 presale1,\n\t\tuint256 presale2,\n\t\tuint256 publicSale\n\t) external onlyOwner {\n\t\tpresale1StartTime = presale1;\n\t\tpresale2StartTime = presale2;\n\t\tpublicStartTime = publicSale;\n\t}\n\n\t//999 = sold out, 0 = not started, 1 = whitelist 1, 2 = whitelist 2, 3 = public\n\tfunction getStage() public view returns (uint256) {\n\t\tif (totalSupply() >= maxSupply) {\n\t\t\treturn 999;\n\t\t}\n\t\tif (block.timestamp >= publicStartTime) {\n\t\t\treturn 3;\n\t\t}\n\t\tif (block.timestamp >= presale2StartTime) {\n\t\t\treturn 2;\n\t\t}\n\t\tif (block.timestamp >= presale1StartTime) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t//only decrease it, no funky stuff\n\tfunction decreaseMaxSupply(uint256 newMaxSupply) external onlyOwner {\n\t\trequire(newMaxSupply < maxSupply, \"decrease only\");\n\t\tmaxSupply = newMaxSupply;\n\t}\n\n\t//call this to reveal the jpegs\n\tfunction setBaseURI(string memory newBaseURI) external onlyOwner {\n\t\t_contractBaseURI = newBaseURI;\n\t}\n\n\tfunction setMerkleRoot(bytes32 _root, bytes32 _root2) external onlyOwner {\n\t\troot = _root;\n\t\troot2 = _root2;\n\t}\n\n\t//anti-bot\n\tfunction _isContract(address _addr) private view returns (bool) {\n\t\tuint256 size;\n\t\tassembly {\n\t\t\tsize := extcodesize(_addr)\n\t\t}\n\t\treturn size > 0;\n\t}\n\n\tfunction _startTokenId() internal view virtual override returns (uint256) {\n\t\treturn 1;\n\t}\n\n\tfunction buildNumber4() internal view {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/ERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.15;\n\nimport \"./ERC721A.sol\";\n\ninterface IERC721AQueryable is IERC721A {\n\t/**\n\t * Invalid query range (`start` >= `stop`).\n\t */\n\terror InvalidQueryRange();\n\n\t/**\n\t * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n\t *\n\t * If the `tokenId` is out of bounds:\n\t *   - `addr` = `address(0)`\n\t *   - `startTimestamp` = `0`\n\t *   - `burned` = `false`\n\t *\n\t * If the `tokenId` is burned:\n\t *   - `addr` = `<Address of owner before token was burned>`\n\t *   - `startTimestamp` = `<Timestamp when token was burned>`\n\t *   - `burned = `true`\n\t *\n\t * Otherwise:\n\t *   - `addr` = `<Address of owner>`\n\t *   - `startTimestamp` = `<Timestamp of start of ownership>`\n\t *   - `burned = `false`\n\t */\n\tfunction explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n\t/**\n\t * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n\t * See {ERC721AQueryable-explicitOwnershipOf}\n\t */\n\tfunction explicitOwnershipsOf(uint256[] memory tokenIds)\n\t\texternal\n\t\tview\n\t\treturns (TokenOwnership[] memory);\n\n\t/**\n\t * @dev Returns an array of token IDs owned by `owner`,\n\t * in the range [`start`, `stop`)\n\t * (i.e. `start <= tokenId < stop`).\n\t *\n\t * This function allows for tokens to be queried if the collection\n\t * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n\t *\n\t * Requirements:\n\t *\n\t * - `start` < `stop`\n\t */\n\tfunction tokensOfOwnerIn(\n\t\taddress owner,\n\t\tuint256 start,\n\t\tuint256 stop\n\t) external view returns (uint256[] memory);\n\n\t/**\n\t * @dev Returns an array of token IDs owned by `owner`.\n\t *\n\t * This function scans the ownership mapping and is O(totalSupply) in complexity.\n\t * It is meant to be called off-chain.\n\t *\n\t * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n\t * multiple smaller scans if the collection is large enough to cause\n\t * an out-of-gas error (10K pfp collections should be fine).\n\t */\n\tfunction tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n\n/**\n * @title ERC721A Queryable\n * @dev ERC721A subclass with convenience query functions.\n */\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\n\t/**\n\t * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n\t *\n\t * If the `tokenId` is out of bounds:\n\t *   - `addr` = `address(0)`\n\t *   - `startTimestamp` = `0`\n\t *   - `burned` = `false`\n\t *   - `extraData` = `0`\n\t *\n\t * If the `tokenId` is burned:\n\t *   - `addr` = `<Address of owner before token was burned>`\n\t *   - `startTimestamp` = `<Timestamp when token was burned>`\n\t *   - `burned = `true`\n\t *   - `extraData` = `<Extra data when token was burned>`\n\t *\n\t * Otherwise:\n\t *   - `addr` = `<Address of owner>`\n\t *   - `startTimestamp` = `<Timestamp of start of ownership>`\n\t *   - `burned = `false`\n\t *   - `extraData` = `<Extra data at start of ownership>`\n\t */\n\tfunction explicitOwnershipOf(uint256 tokenId)\n\t\tpublic\n\t\tview\n\t\toverride\n\t\treturns (TokenOwnership memory)\n\t{\n\t\tTokenOwnership memory ownership;\n\t\tif (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\n\t\t\treturn ownership;\n\t\t}\n\t\townership = _ownershipAt(tokenId);\n\t\tif (ownership.burned) {\n\t\t\treturn ownership;\n\t\t}\n\t\treturn _ownershipOf(tokenId);\n\t}\n\n\t/**\n\t * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n\t * See {ERC721AQueryable-explicitOwnershipOf}\n\t */\n\tfunction explicitOwnershipsOf(uint256[] memory tokenIds)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (TokenOwnership[] memory)\n\t{\n\t\tunchecked {\n\t\t\tuint256 tokenIdsLength = tokenIds.length;\n\t\t\tTokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\n\t\t\tfor (uint256 i; i != tokenIdsLength; ++i) {\n\t\t\t\townerships[i] = explicitOwnershipOf(tokenIds[i]);\n\t\t\t}\n\t\t\treturn ownerships;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns an array of token IDs owned by `owner`,\n\t * in the range [`start`, `stop`)\n\t * (i.e. `start <= tokenId < stop`).\n\t *\n\t * This function allows for tokens to be queried if the collection\n\t * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n\t *\n\t * Requirements:\n\t *\n\t * - `start` < `stop`\n\t */\n\tfunction tokensOfOwnerIn(\n\t\taddress owner,\n\t\tuint256 start,\n\t\tuint256 stop\n\t) external view override returns (uint256[] memory) {\n\t\tunchecked {\n\t\t\tif (start >= stop) revert InvalidQueryRange();\n\t\t\tuint256 tokenIdsIdx;\n\t\t\tuint256 stopLimit = _nextTokenId();\n\t\t\t// Set `start = max(start, _startTokenId())`.\n\t\t\tif (start < _startTokenId()) {\n\t\t\t\tstart = _startTokenId();\n\t\t\t}\n\t\t\t// Set `stop = min(stop, stopLimit)`.\n\t\t\tif (stop > stopLimit) {\n\t\t\t\tstop = stopLimit;\n\t\t\t}\n\t\t\tuint256 tokenIdsMaxLength = balanceOf(owner);\n\t\t\t// Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n\t\t\t// to cater for cases where `balanceOf(owner)` is too big.\n\t\t\tif (start < stop) {\n\t\t\t\tuint256 rangeLength = stop - start;\n\t\t\t\tif (rangeLength < tokenIdsMaxLength) {\n\t\t\t\t\ttokenIdsMaxLength = rangeLength;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttokenIdsMaxLength = 0;\n\t\t\t}\n\t\t\tuint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\n\t\t\tif (tokenIdsMaxLength == 0) {\n\t\t\t\treturn tokenIds;\n\t\t\t}\n\t\t\t// We need to call `explicitOwnershipOf(start)`,\n\t\t\t// because the slot at `start` may not be initialized.\n\t\t\tTokenOwnership memory ownership = explicitOwnershipOf(start);\n\t\t\taddress currOwnershipAddr;\n\t\t\t// If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\n\t\t\t// `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\n\t\t\tif (!ownership.burned) {\n\t\t\t\tcurrOwnershipAddr = ownership.addr;\n\t\t\t}\n\t\t\tfor (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\n\t\t\t\townership = _ownershipAt(i);\n\t\t\t\tif (ownership.burned) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\t\tcurrOwnershipAddr = ownership.addr;\n\t\t\t\t}\n\t\t\t\tif (currOwnershipAddr == owner) {\n\t\t\t\t\ttokenIds[tokenIdsIdx++] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Downsize the array to fit.\n\t\t\tassembly {\n\t\t\t\tmstore(tokenIds, tokenIdsIdx)\n\t\t\t}\n\t\t\treturn tokenIds;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns an array of token IDs owned by `owner`.\n\t *\n\t * This function scans the ownership mapping and is O(totalSupply) in complexity.\n\t * It is meant to be called off-chain.\n\t *\n\t * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n\t * multiple smaller scans if the collection is large enough to cause\n\t * an out-of-gas error (10K pfp collections should be fine).\n\t */\n\tfunction tokensOfOwner(address owner) external view override returns (uint256[] memory) {\n\t\tunchecked {\n\t\t\tuint256 tokenIdsIdx;\n\t\t\taddress currOwnershipAddr;\n\t\t\tuint256 tokenIdsLength = balanceOf(owner);\n\t\t\tuint256[] memory tokenIds = new uint256[](tokenIdsLength);\n\t\t\tTokenOwnership memory ownership;\n\t\t\tfor (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\n\t\t\t\townership = _ownershipAt(i);\n\t\t\t\tif (ownership.burned) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (ownership.addr != address(0)) {\n\t\t\t\t\tcurrOwnershipAddr = ownership.addr;\n\t\t\t\t}\n\t\t\t\tif (currOwnershipAddr == owner) {\n\t\t\t\t\ttokenIds[tokenIdsIdx++] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenIds;\n\t\t}\n\t}\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A {\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror ApprovalCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror ApprovalQueryForNonexistentToken();\n\n\t/**\n\t * The caller cannot approve to their own address.\n\t */\n\terror ApproveToCaller();\n\n\t/**\n\t * Cannot query the balance for the zero address.\n\t */\n\terror BalanceQueryForZeroAddress();\n\n\t/**\n\t * Cannot mint to the zero address.\n\t */\n\terror MintToZeroAddress();\n\n\t/**\n\t * The quantity of tokens minted must be more than zero.\n\t */\n\terror MintZeroQuantity();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror OwnerQueryForNonexistentToken();\n\n\t/**\n\t * The caller must own the token or be an approved operator.\n\t */\n\terror TransferCallerNotOwnerNorApproved();\n\n\t/**\n\t * The token must be owned by `from`.\n\t */\n\terror TransferFromIncorrectOwner();\n\n\t/**\n\t * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n\t */\n\terror TransferToNonERC721ReceiverImplementer();\n\n\t/**\n\t * Cannot transfer to the zero address.\n\t */\n\terror TransferToZeroAddress();\n\n\t/**\n\t * The token does not exist.\n\t */\n\terror URIQueryForNonexistentToken();\n\n\t/**\n\t * The `quantity` minted with ERC2309 exceeds the safety limit.\n\t */\n\terror MintERC2309QuantityExceedsLimit();\n\n\t/**\n\t * The `extraData` cannot be set on an unintialized ownership slot.\n\t */\n\terror OwnershipNotInitializedForExtraData();\n\n\tstruct TokenOwnership {\n\t\t// The address of the owner.\n\t\taddress addr;\n\t\t// Keeps track of the start time of ownership with minimal overhead for tokenomics.\n\t\tuint64 startTimestamp;\n\t\t// Whether the token has been burned.\n\t\tbool burned;\n\t\t// Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\n\t\tuint24 extraData;\n\t}\n\n\t/**\n\t * @dev Returns the total amount of tokens stored by the contract.\n\t *\n\t * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t// ==============================\n\t//            IERC165\n\t// ==============================\n\n\t/**\n\t * @dev Returns true if this contract implements the interface defined by\n\t * `interfaceId`. See the corresponding\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n\t * to learn more about how these ids are created.\n\t *\n\t * This function call must use less than 30 000 gas.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n\t// ==============================\n\t//            IERC721\n\t// ==============================\n\n\t/**\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n\t */\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n\t/**\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n\t */\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n\t/**\n\t * @dev Returns the number of tokens in ``owner``'s account.\n\t */\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\n\n\t/**\n\t * @dev Returns the owner of the `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external;\n\n\t/**\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must exist and be owned by `from`.\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) external;\n\n\t/**\n\t * @dev Transfers `tokenId` token from `from` to `to`.\n\t *\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n\t *\n\t * Requirements:\n\t *\n\t * - `from` cannot be the zero address.\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) external;\n\n\t/**\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n\t * The approval is cleared when the token is transferred.\n\t *\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n\t *\n\t * Requirements:\n\t *\n\t * - The caller must own the token or be an approved operator.\n\t * - `tokenId` must exist.\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address to, uint256 tokenId) external;\n\n\t/**\n\t * @dev Approve or remove `operator` as an operator for the caller.\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n\t *\n\t * Requirements:\n\t *\n\t * - The `operator` cannot be the caller.\n\t *\n\t * Emits an {ApprovalForAll} event.\n\t */\n\tfunction setApprovalForAll(address operator, bool _approved) external;\n\n\t/**\n\t * @dev Returns the account approved for `tokenId` token.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t */\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\n\n\t/**\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n\t *\n\t * See {setApprovalForAll}\n\t */\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\t// ==============================\n\t//        IERC721Metadata\n\t// ==============================\n\n\t/**\n\t * @dev Returns the token collection name.\n\t */\n\tfunction name() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the token collection symbol.\n\t */\n\tfunction symbol() external view returns (string memory);\n\n\t/**\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n\t */\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\n\n\t// ==============================\n\t//            IERC2309\n\t// ==============================\n\n\t/**\n\t * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\n\t * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\n\t */\n\tevent ConsecutiveTransfer(\n\t\tuint256 indexed fromTokenId,\n\t\tuint256 toTokenId,\n\t\taddress indexed from,\n\t\taddress indexed to\n\t);\n}\n\n/**\n * @dev ERC721 token receiver interface.\n */\ninterface ERC721A__IERC721Receiver {\n\tfunction onERC721Received(\n\t\taddress operator,\n\t\taddress from,\n\t\tuint256 tokenId,\n\t\tbytes calldata data\n\t) external returns (bytes4);\n}\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at `_startTokenId()`\n * (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n\t// Mask of an entry in packed address data.\n\tuint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n\t// The bit position of `numberMinted` in packed address data.\n\tuint256 private constant BITPOS_NUMBER_MINTED = 64;\n\n\t// The bit position of `numberBurned` in packed address data.\n\tuint256 private constant BITPOS_NUMBER_BURNED = 128;\n\n\t// The bit position of `aux` in packed address data.\n\tuint256 private constant BITPOS_AUX = 192;\n\n\t// Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n\tuint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n\t// The bit position of `startTimestamp` in packed ownership.\n\tuint256 private constant BITPOS_START_TIMESTAMP = 160;\n\n\t// The bit mask of the `burned` bit in packed ownership.\n\tuint256 private constant BITMASK_BURNED = 1 << 224;\n\n\t// The bit position of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant BITPOS_NEXT_INITIALIZED = 225;\n\n\t// The bit mask of the `nextInitialized` bit in packed ownership.\n\tuint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n\t// The bit position of `extraData` in packed ownership.\n\tuint256 private constant BITPOS_EXTRA_DATA = 232;\n\n\t// Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n\tuint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n\t// The mask of the lower 160 bits for addresses.\n\tuint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\n\n\t// The maximum `quantity` that can be minted with `_mintERC2309`.\n\t// This limit is to prevent overflows on the address data entries.\n\t// For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\n\t// is required to cause an overflow, which is unrealistic.\n\tuint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n\t// The tokenId of the next token to be minted.\n\tuint256 private _currentIndex;\n\n\t// The number of tokens burned.\n\tuint256 private _burnCounter;\n\n\t// Token name\n\tstring private _name;\n\n\t// Token symbol\n\tstring private _symbol;\n\n\t// Mapping from token ID to ownership details\n\t// An empty struct value does not necessarily mean the token is unowned.\n\t// See `_packedOwnershipOf` implementation for details.\n\t//\n\t// Bits Layout:\n\t// - [0..159]   `addr`\n\t// - [160..223] `startTimestamp`\n\t// - [224]      `burned`\n\t// - [225]      `nextInitialized`\n\t// - [232..255] `extraData`\n\tmapping(uint256 => uint256) private _packedOwnerships;\n\n\t// Mapping owner address to address data.\n\t//\n\t// Bits Layout:\n\t// - [0..63]    `balance`\n\t// - [64..127]  `numberMinted`\n\t// - [128..191] `numberBurned`\n\t// - [192..255] `aux`\n\tmapping(address => uint256) private _packedAddressData;\n\n\t// Mapping from token ID to approved address.\n\tmapping(uint256 => address) private _tokenApprovals;\n\n\t// Mapping from owner to operator approvals\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\n\n\tconstructor(string memory name_, string memory symbol_) {\n\t\t_name = name_;\n\t\t_symbol = symbol_;\n\t\t_currentIndex = _startTokenId();\n\t}\n\n\t/**\n\t * @dev Returns the starting token ID.\n\t * To change the starting token ID, please override this function.\n\t */\n\tfunction _startTokenId() internal view virtual returns (uint256) {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * @dev Returns the next token ID to be minted.\n\t */\n\tfunction _nextTokenId() internal view returns (uint256) {\n\t\treturn _currentIndex;\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens in existence.\n\t * Burned tokens will reduce the count.\n\t * To get the total number of tokens minted, please see `_totalMinted`.\n\t */\n\tfunction totalSupply() public view override returns (uint256) {\n\t\t// Counter underflow is impossible as _burnCounter cannot be incremented\n\t\t// more than `_currentIndex - _startTokenId()` times.\n\t\tunchecked {\n\t\t\treturn _currentIndex - _burnCounter - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total amount of tokens minted in the contract.\n\t */\n\tfunction _totalMinted() internal view returns (uint256) {\n\t\t// Counter underflow is impossible as _currentIndex does not decrement,\n\t\t// and it is initialized to `_startTokenId()`\n\t\tunchecked {\n\t\t\treturn _currentIndex - _startTokenId();\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns the total number of tokens burned.\n\t */\n\tfunction _totalBurned() internal view returns (uint256) {\n\t\treturn _burnCounter;\n\t}\n\n\t/**\n\t * @dev See {IERC165-supportsInterface}.\n\t */\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n\t\t// The interface IDs are constants representing the first 4 bytes of the XOR of\n\t\t// all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\n\t\t// e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\n\t\treturn\n\t\t\tinterfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n\t\t\tinterfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n\t\t\tinterfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n\t}\n\n\t/**\n\t * @dev See {IERC721-balanceOf}.\n\t */\n\tfunction balanceOf(address owner) public view override returns (uint256) {\n\t\tif (owner == address(0)) revert BalanceQueryForZeroAddress();\n\t\treturn _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens minted by `owner`.\n\t */\n\tfunction _numberMinted(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the number of tokens burned by or on behalf of `owner`.\n\t */\n\tfunction _numberBurned(address owner) internal view returns (uint256) {\n\t\treturn (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\n\t}\n\n\t/**\n\t * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n\t */\n\tfunction _getAux(address owner) internal view returns (uint64) {\n\t\treturn uint64(_packedAddressData[owner] >> BITPOS_AUX);\n\t}\n\n\t/**\n\t * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n\t * If there are multiple variables, please pack them into a uint64.\n\t */\n\tfunction _setAux(address owner, uint64 aux) internal {\n\t\tuint256 packed = _packedAddressData[owner];\n\t\tuint256 auxCasted;\n\t\t// Cast `aux` with assembly to avoid redundant masking.\n\t\tassembly {\n\t\t\tauxCasted := aux\n\t\t}\n\t\tpacked = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\n\t\t_packedAddressData[owner] = packed;\n\t}\n\n\t/**\n\t * Returns the packed ownership data of `tokenId`.\n\t */\n\tfunction _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n\t\tuint256 curr = tokenId;\n\n\t\tunchecked {\n\t\t\tif (_startTokenId() <= curr)\n\t\t\t\tif (curr < _currentIndex) {\n\t\t\t\t\tuint256 packed = _packedOwnerships[curr];\n\t\t\t\t\t// If not burned.\n\t\t\t\t\tif (packed & BITMASK_BURNED == 0) {\n\t\t\t\t\t\t// Invariant:\n\t\t\t\t\t\t// There will always be an ownership that has an address and is not burned\n\t\t\t\t\t\t// before an ownership that does not have an address and is not burned.\n\t\t\t\t\t\t// Hence, curr will not underflow.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// We can directly compare the packed value.\n\t\t\t\t\t\t// If the address is zero, packed is zero.\n\t\t\t\t\t\twhile (packed == 0) {\n\t\t\t\t\t\t\tpacked = _packedOwnerships[--curr];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn packed;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\trevert OwnerQueryForNonexistentToken();\n\t}\n\n\t/**\n\t * Returns the unpacked `TokenOwnership` struct from `packed`.\n\t */\n\tfunction _unpackedOwnership(uint256 packed)\n\t\tprivate\n\t\tpure\n\t\treturns (TokenOwnership memory ownership)\n\t{\n\t\townership.addr = address(uint160(packed));\n\t\townership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\n\t\townership.burned = packed & BITMASK_BURNED != 0;\n\t\townership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\n\t}\n\n\t/**\n\t * Returns the unpacked `TokenOwnership` struct at `index`.\n\t */\n\tfunction _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnerships[index]);\n\t}\n\n\t/**\n\t * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n\t */\n\tfunction _initializeOwnershipAt(uint256 index) internal {\n\t\tif (_packedOwnerships[index] == 0) {\n\t\t\t_packedOwnerships[index] = _packedOwnershipOf(index);\n\t\t}\n\t}\n\n\t/**\n\t * Gas spent here starts off proportional to the maximum mint batch size.\n\t * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n\t */\n\tfunction _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\n\t\treturn _unpackedOwnership(_packedOwnershipOf(tokenId));\n\t}\n\n\t/**\n\t * @dev Packs ownership data into a single uint256.\n\t */\n\tfunction _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n\t\tassembly {\n\t\t\t// Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\towner := and(owner, BITMASK_ADDRESS)\n\t\t\t// `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\n\t\t\tresult := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\n\t\t}\n\t}\n\n\t/**\n\t * @dev See {IERC721-ownerOf}.\n\t */\n\tfunction ownerOf(uint256 tokenId) public view override returns (address) {\n\t\treturn address(uint160(_packedOwnershipOf(tokenId)));\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-name}.\n\t */\n\tfunction name() public view virtual override returns (string memory) {\n\t\treturn _name;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-symbol}.\n\t */\n\tfunction symbol() public view virtual override returns (string memory) {\n\t\treturn _symbol;\n\t}\n\n\t/**\n\t * @dev See {IERC721Metadata-tokenURI}.\n\t */\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n\t\tif (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n\t\tstring memory baseURI = _baseURI();\n\t\treturn bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \"\";\n\t}\n\n\t/**\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n\t * by default, it can be overridden in child contracts.\n\t */\n\tfunction _baseURI() internal view virtual returns (string memory) {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n\t */\n\tfunction _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n\t\t// For branchless setting of the `nextInitialized` flag.\n\t\tassembly {\n\t\t\t// `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\n\t\t\tresult := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n\t\t}\n\t}\n\n\t/**\n\t * @dev See {IERC721-approve}.\n\t */\n\tfunction approve(address to, uint256 tokenId) public override {\n\t\taddress owner = ownerOf(tokenId);\n\n\t\tif (_msgSenderERC721A() != owner)\n\t\t\tif (!isApprovedForAll(owner, _msgSenderERC721A())) {\n\t\t\t\trevert ApprovalCallerNotOwnerNorApproved();\n\t\t\t}\n\n\t\t_tokenApprovals[tokenId] = to;\n\t\temit Approval(owner, to, tokenId);\n\t}\n\n\t/**\n\t * @dev See {IERC721-getApproved}.\n\t */\n\tfunction getApproved(uint256 tokenId) public view override returns (address) {\n\t\tif (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n\t\treturn _tokenApprovals[tokenId];\n\t}\n\n\t/**\n\t * @dev See {IERC721-setApprovalForAll}.\n\t */\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\n\t\tif (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n\t\t_operatorApprovals[_msgSenderERC721A()][operator] = approved;\n\t\temit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n\t}\n\n\t/**\n\t * @dev See {IERC721-isApprovedForAll}.\n\t */\n\tfunction isApprovedForAll(address owner, address operator)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (bool)\n\t{\n\t\treturn _operatorApprovals[owner][operator];\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\n\t}\n\n\t/**\n\t * @dev See {IERC721-safeTransferFrom}.\n\t */\n\tfunction safeTransferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) public virtual override {\n\t\ttransferFrom(from, to, tokenId);\n\t\tif (to.code.length != 0)\n\t\t\tif (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t}\n\t}\n\n\t/**\n\t * @dev Returns whether `tokenId` exists.\n\t *\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n\t *\n\t * Tokens start existing when they are minted (`_mint`),\n\t */\n\tfunction _exists(uint256 tokenId) internal view returns (bool) {\n\t\treturn\n\t\t\t_startTokenId() <= tokenId &&\n\t\t\ttokenId < _currentIndex && // If within bounds,\n\t\t\t_packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\n\t}\n\n\t/**\n\t * @dev Equivalent to `_safeMint(to, quantity, '')`.\n\t */\n\tfunction _safeMint(address to, uint256 quantity) internal {\n\t\t_safeMint(to, quantity, \"\");\n\t}\n\n\t/**\n\t * @dev Safely mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - If `to` refers to a smart contract, it must implement\n\t *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * See {_mint}.\n\t *\n\t * Emits a {Transfer} event for each mint.\n\t */\n\tfunction _safeMint(\n\t\taddress to,\n\t\tuint256 quantity,\n\t\tbytes memory _data\n\t) internal {\n\t\t_mint(to, quantity);\n\n\t\tunchecked {\n\t\t\tif (to.code.length != 0) {\n\t\t\t\tuint256 end = _currentIndex;\n\t\t\t\tuint256 index = end - quantity;\n\t\t\t\tdo {\n\t\t\t\t\tif (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n\t\t\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t\t\t}\n\t\t\t\t} while (index < end);\n\t\t\t\t// Reentrancy protection.\n\t\t\t\tif (_currentIndex != end) revert();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {Transfer} event for each mint.\n\t */\n\tfunction _mint(address to, uint256 quantity) internal {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are incredibly unrealistic.\n\t\t// `balance` and `numberMinted` have a maximum limit of 2**64.\n\t\t// `tokenId` has a maximum limit of 2**256.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the `balance` and `numberMinted`.\n\t\t\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\t_nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n\t\t\t);\n\n\t\t\tuint256 tokenId = startTokenId;\n\t\t\tuint256 end = startTokenId + quantity;\n\t\t\tdo {\n\t\t\t\temit Transfer(address(0), to, tokenId++);\n\t\t\t} while (tokenId < end);\n\n\t\t\t_currentIndex = end;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Mints `quantity` tokens and transfers them to `to`.\n\t *\n\t * This function is intended for efficient minting only during contract creation.\n\t *\n\t * It emits only one {ConsecutiveTransfer} as defined in\n\t * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n\t * instead of a sequence of {Transfer} event(s).\n\t *\n\t * Calling this function outside of contract creation WILL make your contract\n\t * non-compliant with the ERC721 standard.\n\t * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n\t * {ConsecutiveTransfer} event is only permissible during contract creation.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `quantity` must be greater than 0.\n\t *\n\t * Emits a {ConsecutiveTransfer} event.\n\t */\n\tfunction _mintERC2309(address to, uint256 quantity) internal {\n\t\tuint256 startTokenId = _currentIndex;\n\t\tif (to == address(0)) revert MintToZeroAddress();\n\t\tif (quantity == 0) revert MintZeroQuantity();\n\t\tif (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n\t\t_beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n\t\t// Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance += quantity`.\n\t\t\t// - `numberMinted += quantity`.\n\t\t\t//\n\t\t\t// We can directly add to the `balance` and `numberMinted`.\n\t\t\t_packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the owner.\n\t\t\t// - `startTimestamp` to the timestamp of minting.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `quantity == 1`.\n\t\t\t_packedOwnerships[startTokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\t_nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n\t\t\t);\n\n\t\t\temit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n\t\t\t_currentIndex = startTokenId + quantity;\n\t\t}\n\t\t_afterTokenTransfers(address(0), to, startTokenId, quantity);\n\t}\n\n\t/**\n\t * @dev Returns the storage slot and value for the approved address of `tokenId`.\n\t */\n\tfunction _getApprovedAddress(uint256 tokenId)\n\t\tprivate\n\t\tview\n\t\treturns (uint256 approvedAddressSlot, address approvedAddress)\n\t{\n\t\tmapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\n\t\t// The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n\t\tassembly {\n\t\t\t// Compute the slot.\n\t\t\tmstore(0x00, tokenId)\n\t\t\tmstore(0x20, tokenApprovalsPtr.slot)\n\t\t\tapprovedAddressSlot := keccak256(0x00, 0x40)\n\t\t\t// Load the slot's value from storage.\n\t\t\tapprovedAddress := sload(approvedAddressSlot)\n\t\t}\n\t}\n\n\t/**\n\t * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\n\t */\n\tfunction _isOwnerOrApproved(\n\t\taddress approvedAddress,\n\t\taddress from,\n\t\taddress msgSender\n\t) private pure returns (bool result) {\n\t\tassembly {\n\t\t\t// Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\tfrom := and(from, BITMASK_ADDRESS)\n\t\t\t// Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n\t\t\tmsgSender := and(msgSender, BITMASK_ADDRESS)\n\t\t\t// `msgSender == from || msgSender == approvedAddress`.\n\t\t\tresult := or(eq(msgSender, from), eq(msgSender, approvedAddress))\n\t\t}\n\t}\n\n\t/**\n\t * @dev Transfers `tokenId` from `from` to `to`.\n\t *\n\t * Requirements:\n\t *\n\t * - `to` cannot be the zero address.\n\t * - `tokenId` token must be owned by `from`.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId\n\t) public virtual override {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\tif (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n\t\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\n\n\t\t// The nested ifs save around 20+ gas over a compound boolean condition.\n\t\tif (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\n\t\t\tif (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n\t\tif (to == address(0)) revert TransferToZeroAddress();\n\n\t\t_beforeTokenTransfers(from, to, tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tassembly {\n\t\t\tif approvedAddress {\n\t\t\t\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\n\t\t\t\tsstore(approvedAddressSlot, 0)\n\t\t\t}\n\t\t}\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n\t\tunchecked {\n\t\t\t// We can directly increment and decrement the balances.\n\t\t\t--_packedAddressData[from]; // Updates: `balance -= 1`.\n\t\t\t++_packedAddressData[to]; // Updates: `balance += 1`.\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the next owner.\n\t\t\t// - `startTimestamp` to the timestamp of transfering.\n\t\t\t// - `burned` to `false`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] = _packOwnershipData(\n\t\t\t\tto,\n\t\t\t\tBITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n\t\t\t);\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, to, tokenId);\n\t\t_afterTokenTransfers(from, to, tokenId, 1);\n\t}\n\n\t/**\n\t * @dev Equivalent to `_burn(tokenId, false)`.\n\t */\n\tfunction _burn(uint256 tokenId) internal virtual {\n\t\t_burn(tokenId, false);\n\t}\n\n\t/**\n\t * @dev Destroys `tokenId`.\n\t * The approval is cleared when the token is burned.\n\t *\n\t * Requirements:\n\t *\n\t * - `tokenId` must exist.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n\t\tuint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n\t\taddress from = address(uint160(prevOwnershipPacked));\n\n\t\t(uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\n\n\t\tif (approvalCheck) {\n\t\t\t// The nested ifs save around 20+ gas over a compound boolean condition.\n\t\t\tif (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\n\t\t\t\tif (!isApprovedForAll(from, _msgSenderERC721A()))\n\t\t\t\t\trevert TransferCallerNotOwnerNorApproved();\n\t\t}\n\n\t\t_beforeTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Clear approvals from the previous owner.\n\t\tassembly {\n\t\t\tif approvedAddress {\n\t\t\t\t// This is equivalent to `delete _tokenApprovals[tokenId]`.\n\t\t\t\tsstore(approvedAddressSlot, 0)\n\t\t\t}\n\t\t}\n\n\t\t// Underflow of the sender's balance is impossible because we check for\n\t\t// ownership above and the recipient's balance can't realistically overflow.\n\t\t// Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n\t\tunchecked {\n\t\t\t// Updates:\n\t\t\t// - `balance -= 1`.\n\t\t\t// - `numberBurned += 1`.\n\t\t\t//\n\t\t\t// We can directly decrement the balance, and increment the number burned.\n\t\t\t// This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\n\t\t\t_packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\n\n\t\t\t// Updates:\n\t\t\t// - `address` to the last owner.\n\t\t\t// - `startTimestamp` to the timestamp of burning.\n\t\t\t// - `burned` to `true`.\n\t\t\t// - `nextInitialized` to `true`.\n\t\t\t_packedOwnerships[tokenId] = _packOwnershipData(\n\t\t\t\tfrom,\n\t\t\t\t(BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) |\n\t\t\t\t\t_nextExtraData(from, address(0), prevOwnershipPacked)\n\t\t\t);\n\n\t\t\t// If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n\t\t\tif (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\n\t\t\t\tuint256 nextTokenId = tokenId + 1;\n\t\t\t\t// If the next slot's address is zero and not burned (i.e. packed value is zero).\n\t\t\t\tif (_packedOwnerships[nextTokenId] == 0) {\n\t\t\t\t\t// If the next slot is within bounds.\n\t\t\t\t\tif (nextTokenId != _currentIndex) {\n\t\t\t\t\t\t// Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n\t\t\t\t\t\t_packedOwnerships[nextTokenId] = prevOwnershipPacked;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit Transfer(from, address(0), tokenId);\n\t\t_afterTokenTransfers(from, address(0), tokenId, 1);\n\n\t\t// Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n\t\tunchecked {\n\t\t\t_burnCounter++;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n\t *\n\t * @param from address representing the previous owner of the given token ID\n\t * @param to target address that will receive the tokens\n\t * @param tokenId uint256 ID of the token to be transferred\n\t * @param _data bytes optional data to send along with the call\n\t * @return bool whether the call correctly returned the expected magic value\n\t */\n\tfunction _checkContractOnERC721Received(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 tokenId,\n\t\tbytes memory _data\n\t) private returns (bool) {\n\t\ttry\n\t\t\tERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data)\n\t\treturns (bytes4 retval) {\n\t\t\treturn retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n\t\t} catch (bytes memory reason) {\n\t\t\tif (reason.length == 0) {\n\t\t\t\trevert TransferToNonERC721ReceiverImplementer();\n\t\t\t} else {\n\t\t\t\tassembly {\n\t\t\t\t\trevert(add(32, reason), mload(reason))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @dev Directly sets the extra data for the ownership data `index`.\n\t */\n\tfunction _setExtraDataAt(uint256 index, uint24 extraData) internal {\n\t\tuint256 packed = _packedOwnerships[index];\n\t\tif (packed == 0) revert OwnershipNotInitializedForExtraData();\n\t\tuint256 extraDataCasted;\n\t\t// Cast `extraData` with assembly to avoid redundant masking.\n\t\tassembly {\n\t\t\textraDataCasted := extraData\n\t\t}\n\t\tpacked = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\n\t\t_packedOwnerships[index] = packed;\n\t}\n\n\t/**\n\t * @dev Returns the next extra data for the packed ownership data.\n\t * The returned result is shifted into position.\n\t */\n\tfunction _nextExtraData(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 prevOwnershipPacked\n\t) private view returns (uint256) {\n\t\tuint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\n\t\treturn uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\n\t}\n\n\t/**\n\t * @dev Called during each token transfer to set the 24bit `extraData` field.\n\t * Intended to be overridden by the cosumer contract.\n\t *\n\t * `previousExtraData` - the value of `extraData` before transfer.\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _extraData(\n\t\taddress from,\n\t\taddress to,\n\t\tuint24 previousExtraData\n\t) internal view virtual returns (uint24) {}\n\n\t/**\n\t * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\n\t * This includes minting.\n\t * And also called before burning one token.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\n\t * - When `to` is zero, `tokenId` will be burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _beforeTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\n\t * This includes minting.\n\t * And also called after one token has been burned.\n\t *\n\t * startTokenId - the first token id to be transferred\n\t * quantity - the amount to be transferred\n\t *\n\t * Calling conditions:\n\t *\n\t * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n\t * transferred to `to`.\n\t * - When `from` is zero, `tokenId` has been minted for `to`.\n\t * - When `to` is zero, `tokenId` has been burned by `from`.\n\t * - `from` and `to` are never both zero.\n\t */\n\tfunction _afterTokenTransfers(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 startTokenId,\n\t\tuint256 quantity\n\t) internal virtual {}\n\n\t/**\n\t * @dev Returns the message sender (defaults to `msg.sender`).\n\t *\n\t * If you are writing GSN compatible contracts, you need to override this function.\n\t */\n\tfunction _msgSenderERC721A() internal view virtual returns (address) {\n\t\treturn msg.sender;\n\t}\n\n\t/**\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n\t */\n\tfunction _toString(uint256 value) internal pure returns (string memory ptr) {\n\t\tassembly {\n\t\t\t// The maximum value of a uint256 contains 78 digits (1 byte per digit),\n\t\t\t// but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\n\t\t\t// We will need 1 32-byte word to store the length,\n\t\t\t// and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\n\t\t\tptr := add(mload(0x40), 128)\n\t\t\t// Update the free memory pointer to allocate.\n\t\t\tmstore(0x40, ptr)\n\n\t\t\t// Cache the end of the memory to calculate the length later.\n\t\t\tlet end := ptr\n\n\t\t\t// We write the string from the rightmost digit to the leftmost digit.\n\t\t\t// The following is essentially a do-while loop that also handles the zero case.\n\t\t\t// Costs a bit more than early returning for the zero case,\n\t\t\t// but cheaper in terms of deployment and overall runtime costs.\n\t\t\tfor {\n\t\t\t\t// Initialize and perform the first pass without check.\n\t\t\t\tlet temp := value\n\t\t\t\t// Move the pointer 1 byte leftwards to point to an empty character slot.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\t// Write the character to the pointer. 48 is the ASCII index of '0'.\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} temp {\n\t\t\t\t// Keep dividing `temp` until zero.\n\t\t\t\ttemp := div(temp, 10)\n\t\t\t} {\n\t\t\t\t// Body of the for loop.\n\t\t\t\tptr := sub(ptr, 1)\n\t\t\t\tmstore8(ptr, add(48, mod(temp, 10)))\n\t\t\t}\n\n\t\t\tlet length := sub(end, ptr)\n\t\t\t// Move the pointer 32 bytes leftwards to make room for the length.\n\t\t\tptr := sub(ptr, 32)\n\t\t\t// Store the length.\n\t\t\tmstore(ptr, length)\n\t\t}\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}