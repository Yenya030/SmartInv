{{
  "language": "Solidity",
  "sources": {
    "contracts/Tempura.sol": {
      "content": "///@author WOK\n///@dev This contract controls dripping and minting of TEMPURA.\n///@dev Dripping occurs via Yakuza Elite - Gen Yakuza must mint tokens due to lack of transfer hooks or staking.\n///@dev S/O to OxBeans for GIGADRIP\n\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./GIGADRIP.sol\";\n\ncontract Tempura is Ownable, GIGADRIP20, ReentrancyGuard {\n    uint256 public constant BASE_RATE = 2 ether;\n\n    address public yakuzaElite;\n\n    bool public claimAllowed;\n\n    uint256 public startTime;\n    uint256 public endTime;\n\n    mapping(uint256 => uint256) public lastClaim;\n    mapping(address => uint256) private userIndex;\n\n    address[] public accruers;\n\n    IERC721 public constant YAKUZA_GEN = IERC721(0x0EE1448F200e6e65E9bad7A335E3FFb674c0f68C);\n\n    constructor() GIGADRIP20(\"Tempura\", \"TEMPURA\", 18, 167000000000000) {\n        startTime = block.timestamp + 100 days;\n    }\n\n    /*==============================================================\n    ==                    Dripping Functions                      ==\n    ==============================================================*/\n\n    function startDripping(address addr, uint128 multiplier) external {\n        require(\n            msg.sender == yakuzaElite || msg.sender == owner(),\n            \"Dripping can only be modified by Yakuza Elite contract or owner\"\n        );\n        if (_accruers[addr].multiplier == 0) {\n            userIndex[addr] = accruers.length;\n            accruers.push(addr);\n        }\n        if (block.timestamp < endTime) _startDripping(addr, multiplier);\n    }\n\n    function stopDripping(address addr, uint128 multiplier) external {\n        require(\n            msg.sender == yakuzaElite || msg.sender == owner(),\n            \"Dripping can only be modified by Yakuza Elite contract or owner\"\n        );\n        if (block.timestamp < endTime) _stopDripping(addr, multiplier);\n        if (_accruers[addr].multiplier == 0) {\n            accruers[userIndex[addr]] = accruers[accruers.length - 1];\n            accruers.pop();\n        }\n    }\n\n    function burn(address from, uint256 value) external {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - value;\n\n        _burn(from, value);\n    }\n\n    /*==============================================================\n    ==                    Gen Yield Functions                     ==\n    ==============================================================*/\n\n    function claimReward(uint256 _tokenId) external nonReentrant {\n        require(claimAllowed, \"Claiming is not live.\");\n        require(\n            YAKUZA_GEN.ownerOf(_tokenId) == msg.sender,\n            \"Caller does not own the token being claimed for.\"\n        );\n        uint256 unclaimedReward = computeUnclaimedReward(_tokenId);\n        lastClaim[_tokenId] = block.timestamp;\n        _mint(msg.sender, unclaimedReward);\n    }\n\n    function claimRewards(uint256[] calldata _tokenIds) external nonReentrant {\n        require(claimAllowed, \"Claiming is not live.\");\n        uint256 totalUnclaimedRewards = 0;\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            uint256 _tokenId = _tokenIds[i];\n            require(\n                YAKUZA_GEN.ownerOf(_tokenId) == msg.sender,\n                \"Caller does not own the token being claimed for.\"\n            );\n            uint256 unclaimedReward = computeUnclaimedReward(_tokenId);\n            totalUnclaimedRewards = totalUnclaimedRewards + unclaimedReward;\n            lastClaim[_tokenId] = block.timestamp;\n        }\n        _mint(msg.sender, totalUnclaimedRewards);\n    }\n\n    function getUnclaimedRewardAmount(uint256 _tokenId) public view returns (uint256) {\n        uint256 unclaimedReward = computeUnclaimedReward(_tokenId);\n        return unclaimedReward;\n    }\n\n    function getUnclaimedRewardsAmount(uint256[] calldata _tokenIds)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 totalUnclaimedRewards = 0;\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            totalUnclaimedRewards += computeUnclaimedReward(_tokenIds[i]);\n        }\n        return totalUnclaimedRewards;\n    }\n\n    function getLastClaimedTime(uint256 _tokenId) public view returns (uint256) {\n        return lastClaim[_tokenId];\n    }\n\n    function computeAccumulatedReward(\n        uint256 _lastClaimDate,\n        uint256 _baseRate,\n        uint256 currentTime\n    ) internal pure returns (uint256) {\n        require(\n            currentTime > _lastClaimDate,\n            \"Last claim date must be smaller than block timestamp\"\n        );\n\n        uint256 secondsElapsed = currentTime - _lastClaimDate;\n        uint256 accumulatedReward = (secondsElapsed * _baseRate) / 1 days;\n\n        return accumulatedReward;\n    }\n\n    function computeUnclaimedReward(uint256 _tokenId) internal view returns (uint256) {\n        YAKUZA_GEN.ownerOf(_tokenId);\n\n        uint256 lastClaimDate = lastClaim[_tokenId];\n\n        if (lastClaimDate != uint256(0)) {\n            return computeAccumulatedReward(lastClaimDate, BASE_RATE, block.timestamp);\n        } else if (block.timestamp < endTime) {\n            uint256 totalReward = computeAccumulatedReward(startTime, BASE_RATE, block.timestamp);\n            return totalReward;\n        } else {\n            uint256 totalReward = computeAccumulatedReward(lastClaimDate, BASE_RATE, endTime);\n            return totalReward;\n        }\n    }\n\n    /*==============================================================\n    ==                    Only Owner Functions                    ==\n    ==============================================================*/\n\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n\n    function setYakuzaElite(address yakuzaEliteAddress) external onlyOwner {\n        yakuzaElite = yakuzaEliteAddress;\n    }\n\n    function startYield() external onlyOwner {\n        startTime = block.timestamp;\n        endTime = block.timestamp + 730 days;\n    }\n\n    function stopAllDrips() external onlyOwner {\n        require(block.timestamp > endTime, \"Cannot stop the drip yet.\");\n        for (uint256 i; i < accruers.length; i++) {\n            address _addr = accruers[i];\n            _stopDripping(_addr, _accruers[_addr].multiplier);\n        }\n    }\n\n    function toggleClaim() external onlyOwner {\n        claimAllowed = !claimAllowed;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "contracts/GIGADRIP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n///@author 0xBeans\n///@notice This is a beefed up ERC20 implementation of DRIP20 that supports emission multipliers.\n///@notice Multipliers are useful when certain users should accrue larger emissions. For example,\n///@notice if an NFT drips 10 tokens per block to a user, and the user has 3 NFTs, then the user\n///@notice should accrue 3 times as many tokens per block. This user would have a multiplier of 3.\n///@notice shout out to solmate (@t11s) for the slim and efficient ERC20 implementation!\n///@notice shout out to superfluid and UBI for the dripping inspiration!\nabstract contract GIGADRIP20 {\n    /*==============================================================\n    ==                            ERRORS                          ==\n    ==============================================================*/\n\n    error UserNotAccruing();\n    error ERC20_TransferToZeroAddress();\n\n    /*==============================================================\n    ==                            EVENTS                          ==\n    ==============================================================*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /*==============================================================\n    ==                      METADATA STORAGE                      ==\n    ==============================================================*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*==============================================================\n    ==                       ERC20 STORAGE                        ==\n    ==============================================================*/\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*==============================================================\n    ==                        DRIP STORAGE                        ==\n    ==============================================================*/\n\n    struct Accruer {\n        uint256 balance;\n        uint128 accrualStartBlock;\n        uint128 multiplier;\n    }\n\n    // immutable token emission rate per block\n    uint256 public immutable emissionRatePerBlock;\n\n    // wallets currently getting dripped tokens\n    mapping(address => Accruer) public _accruers;\n\n    // these are all for calculating totalSupply()\n    uint256 private _currAccrued;\n    uint128 private _currEmissionBlockNum;\n    uint128 private _currEmissionMultiple;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        uint256 _emissionRatePerBlock\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        emissionRatePerBlock = _emissionRatePerBlock;\n    }\n\n    /*==============================================================\n    ==                        ERC20 IMPL                          ==\n    ==============================================================*/\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount)\n        public\n        virtual\n        returns (bool)\n    {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender];\n\n        if (allowed != type(uint256).max)\n            allowance[from][msg.sender] = allowed - amount;\n\n        _transfer(from, to, amount);\n\n        return true;\n    }\n\n    function balanceOf(address addr) public view returns (uint256) {\n        Accruer memory accruer = _accruers[addr];\n\n        if (accruer.accrualStartBlock == 0) {\n            return accruer.balance;\n        }\n\n        return\n            ((block.number - accruer.accrualStartBlock) *\n                emissionRatePerBlock) *\n            accruer.multiplier +\n            accruer.balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return\n            _currAccrued +\n            (block.number - _currEmissionBlockNum) *\n            emissionRatePerBlock *\n            _currEmissionMultiple;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if (to == address(0)) revert ERC20_TransferToZeroAddress();\n\n        Accruer storage fromAccruer = _accruers[from];\n        Accruer storage toAccruer = _accruers[to];\n\n        fromAccruer.balance = balanceOf(from) - amount;\n\n        unchecked {\n            toAccruer.balance += amount;\n        }\n\n        if (fromAccruer.accrualStartBlock != 0) {\n            fromAccruer.accrualStartBlock = uint128(block.number);\n        }\n\n        emit Transfer(from, to, amount);\n    }\n\n    /*==============================================================\n    ==                        DRIP LOGIC                          ==\n    ==============================================================*/\n\n    /**\n     * @dev Add an address to start dripping tokens to.\n     * @dev We need to update _currAccrued whenever we add a new dripper or INCREASE a dripper multiplier to properly update totalSupply()\n     * @dev IMPORTANT: Everytime you call this with an addr already getting dripped to, it will INCREASE the multiplier\n     * @param addr address to drip to\n     * @param multiplier used to increase token drip. ie if 1 NFT drips 10 tokens per block and this address has 3 NFTs,\n     * the user would need to get dripped 30 tokens per block - multipler would multiply emissions by 3\n     */\n    function _startDripping(address addr, uint128 multiplier) internal virtual {\n        Accruer storage accruer = _accruers[addr];\n\n        // need to update the balance if wallet was already accruing\n        if (accruer.accrualStartBlock != 0) {\n            accruer.balance = balanceOf(addr);\n        } else {\n            // emit Transfer event when new address starts dripping\n            emit Transfer(address(0), addr, 0);\n        }\n\n        _currAccrued = totalSupply();\n        _currEmissionBlockNum = uint128(block.number);\n        accruer.accrualStartBlock = uint128(block.number);\n\n        // should not overflow unless you have >2**256-1 items...\n        unchecked {\n            _currEmissionMultiple += multiplier;\n            accruer.multiplier += multiplier;\n        }\n    }\n\n    /**\n     * @dev Add an address to stop dripping tokens to.\n     * @dev We need to update _currAccrued whenever we remove a dripper or DECREASE a dripper multiplier to properly update totalSupply()\n     * @dev IMPORTANT: Everytime you call this with an addr already getting dripped to, it will DECREASE the multiplier\n     * @dev IMPORTANT: Decrease the multiplier to 0 to completely stop the address from getting dripped to\n     * @param addr address to stop dripping to\n     * @param multiplier used to decrease token drip. ie if addr has a multiplier of 3 already, passing in a value of 1 would decrease\n     * the multiplier to 2\n     */\n    function _stopDripping(address addr, uint128 multiplier) internal virtual {\n        Accruer storage accruer = _accruers[addr];\n\n        // should I check for 0 multiplier too\n        if (accruer.accrualStartBlock == 0) revert UserNotAccruing();\n\n        accruer.balance = balanceOf(addr);\n        _currAccrued = totalSupply();\n        _currEmissionBlockNum = uint128(block.number);\n\n        // will revert if underflow occurs\n        _currEmissionMultiple -= multiplier;\n        accruer.multiplier -= multiplier;\n\n        if (accruer.multiplier == 0) {\n            accruer.accrualStartBlock = 0;\n        } else {\n            accruer.accrualStartBlock = uint128(block.number);\n        }\n    }\n\n    /*==============================================================\n    ==                         MINT/BURN                          ==\n    ==============================================================*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        Accruer storage accruer = _accruers[to];\n\n        unchecked {\n            _currAccrued += amount;\n            accruer.balance += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        Accruer storage accruer = _accruers[from];\n\n        // have to update supply before burning\n        _currAccrued = totalSupply();\n        _currEmissionBlockNum = uint128(block.number);\n\n        accruer.balance = balanceOf(from) - amount;\n\n        // Cannot underflow because amount can\n        // never be greater than the totalSupply()\n        unchecked {\n            _currAccrued -= amount;\n        }\n\n        // update accruers block number if user was accruing\n        if (accruer.accrualStartBlock != 0) {\n            accruer.accrualStartBlock = uint128(block.number);\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}