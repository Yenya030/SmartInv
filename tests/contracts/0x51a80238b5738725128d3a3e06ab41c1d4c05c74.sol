{{
  "language": "Solidity",
  "sources": {
    "lib/communal/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11 <0.9.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
    },
    "lib/communal/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"
    },
    "lib/communal/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n"
    },
    "lib/communal/Owned.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.6.11;\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor (address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}"
    },
    "lib/communal/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"
    },
    "lib/communal/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\nimport \"./Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "lib/communal/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}"
    },
    "lib/communal/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}"
    },
    "src/LSDVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.11;\r\n\r\nimport \"communal/ReentrancyGuard.sol\";\r\nimport \"communal/Owned.sol\";\r\nimport \"communal/SafeERC20.sol\";\r\nimport \"communal/TransferHelper.sol\";\r\n//import \"forge-std/console.sol\";\r\n\r\n/*\r\n* LSD Vault Contract:\r\n* This contract is responsible for holding and managing the deposited LSDs. It mints unshETH to depositors.\r\n*/\r\n\r\n//Access control hierarchy\r\n//owner = multisig: used for initial setup + admin functions + unlocking timelocked functions\r\n//admin = team eoa: used for emergency functions and low level configs\r\n//timelock = multisig can propose unlock + 72 hr delay: used for functions that affect user funds\r\n\r\ninterface IunshETH {\r\n    function minter_mint(address m_address, uint256 m_amount) external;\r\n    function minter_burn_from(address b_address, uint256 b_amount) external;\r\n    function timelock_address() external returns (address);\r\n    function addMinter(address minter_address) external;\r\n    function setTimelock(address _timelock_address) external;\r\n    function removeMinter(address minter_address) external;\r\n}\r\n\r\ninterface ILSDVault {\r\n    function balanceInUnderlying() external view returns (uint256);\r\n    function exit(uint256 amount) external;\r\n    function shanghaiTime() external returns(uint256);\r\n}\r\n\r\ninterface IDarknet {\r\n    function checkPrice(address lsd) external view returns (uint256);\r\n}\r\n\r\ncontract LSDVault is Owned, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    /*\r\n    ============================================================================\r\n    State Variables\r\n    ============================================================================\r\n    */\r\n    // address public admin;\r\n    uint256 public shanghaiTime = 1682007600; //timestamp for April 20, 2023 4:20:00PM UTC (~1 wk after ETH network upgrade)\r\n    address public constant v1VaultAddress = address(0xE76Ffee8722c21b390eebe71b67D95602f58237F);\r\n    address public unshETHAddress;\r\n    address public unshethZapAddress;\r\n    address public swapperAddress;\r\n    address public admin;\r\n    address public darknetAddress;\r\n\r\n    address[] public supportedLSDs;\r\n    mapping(address => uint256) public lsdIndex; //keep track of reverse mapping of supportedLSDs indices for fast lookup\r\n\r\n    struct LSDConfig {\r\n        uint256 targetWeightBps;\r\n        uint256 weightCapBps;\r\n        uint256 absoluteCapEth;\r\n    }\r\n\r\n    mapping(address => LSDConfig) public lsdConfigs;\r\n    bool public useWeightCaps;\r\n    bool public useAbsoluteCaps;\r\n    bool public includeV1VaultAssets;\r\n    mapping(address => bool) public isEnabled;\r\n\r\n    uint256 public constant _TIMELOCK = 3 days;\r\n    enum TimelockFunctions { MIGRATE, AMM, DARKNET, ZAP }\r\n\r\n    struct TimelockProposal {\r\n        address proposedAddress;\r\n        uint256 unlockTime;\r\n    }\r\n\r\n    mapping(TimelockFunctions => TimelockProposal) public timelock;\r\n\r\n    //Redeem fees in basis points, configurable by multisig\r\n    uint256 public redeemFee = 0;\r\n    uint256 public constant maxRedeemFee = 200; //max 200 basis points = 2% fee\r\n\r\n    bool public depositsPaused;\r\n    bool public migrated = false;\r\n    bool public ammEnabled = false;\r\n\r\n    bool public withdrawalsPaused = false;\r\n    uint256 public withdrawalUnpauseTime;\r\n\r\n    /*\r\n    ============================================================================\r\n    Events\r\n    ============================================================================\r\n    */\r\n    event DepositPauseToggled(bool paused);\r\n    event ShanghaiTimeUpdated(uint256 newTime);\r\n    event UnshethAddressSet(address unshethAddress);\r\n    event UnshethZapAddressSet(address unshethZapAddress);\r\n    event AdminSet(address admin);\r\n\r\n    event LSDAdded(address lsd);\r\n    event LSDConfigSet(address lsd, LSDConfig config);\r\n    event LSDDisabled(address lsd);\r\n    event LSDEnabled(address lsd);\r\n\r\n    event AbsoluteCapsToggled(bool useAbsoluteCaps);\r\n    event WeightCapsToggled(bool useWeightCaps);\r\n    event IncludeV1VaultAssetsToggled(bool includeV1Assets);\r\n    event RedeemFeeUpdated(uint256 redeemFee);\r\n\r\n    event TimelockUpdateProposed(TimelockFunctions _fn, address _newAddress, uint256 _unlockTime);\r\n    event TimelockUpdateCanceled(TimelockFunctions _fn);\r\n    event TimelockUpdateCompleted(TimelockFunctions _fn);\r\n\r\n    event VdAmmDisabled(address swapper);\r\n\r\n    event WithdrawalsPaused(uint256 withdrawalUnpauseTime);\r\n    event WithdrawalsUnpaused();\r\n\r\n    /*\r\n    ============================================================================\r\n    Constructor\r\n    ============================================================================\r\n    */\r\n    constructor(address _owner, address _darknetAddress, address _unshethAddress, address[] memory _lsds) Owned(_owner){\r\n        darknetAddress = _darknetAddress;\r\n        unshETHAddress = _unshethAddress;\r\n        depositsPaused = true;\r\n        for(uint256 i=0; i < _lsds.length; i = unchkIncr(i)) {\r\n            addLSD(_lsds[i]);\r\n            setLSDConfigs(_lsds[i], 2500, 5000, 2500e18); //initialize with 25% target, 50% max, 2500ETH absolute max\r\n        }\r\n        useWeightCaps = false;\r\n        useAbsoluteCaps = false;\r\n        includeV1VaultAssets = false;\r\n    }\r\n    /*\r\n    ============================================================================\r\n    Function Modifiers\r\n    ============================================================================\r\n    */\r\n    modifier onlyZap {\r\n        require(msg.sender == unshethZapAddress, \"Only the unsheth Zap contract may perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin {\r\n        require(msg.sender == owner || msg.sender == admin, \"Only the owner or admin may perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier postShanghai {\r\n        require(block.timestamp >= shanghaiTime + _TIMELOCK, \"ShanghaiTime + Timelock has not passed\" );\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenPaused {\r\n        require(depositsPaused, \"Deposits must be paused before performing this action\" );\r\n        _;\r\n    }\r\n\r\n    modifier timelockUnlocked(TimelockFunctions _fn) {\r\n        require(timelock[_fn].unlockTime != 0 && timelock[_fn].unlockTime <= block.timestamp, \"Function is timelocked\");\r\n        require(timelock[_fn].proposedAddress != address(0), \"Cannot set zero address\");\r\n        _;\r\n    }\r\n\r\n    //helper to perform lower gas unchecked increment in for loops\r\n    function unchkIncr(uint256 i) private pure returns(uint256) {\r\n        unchecked { return i+1; }\r\n    }\r\n\r\n    /*\r\n    ============================================================================\r\n    Setup functions\r\n    ============================================================================\r\n    */\r\n    function setUnshethZap(address _unshethZapAddress) external onlyOwner {\r\n        require(unshethZapAddress == address(0), \"UnshETH zap address already set\" );\r\n        unshethZapAddress = _unshethZapAddress;\r\n        emit UnshethZapAddressSet(unshethZapAddress);\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyOwner {\r\n        admin = _admin;\r\n        emit AdminSet(admin);\r\n    }\r\n\r\n    /*\r\n    ============================================================================\r\n    LSD configuration functions\r\n    ============================================================================\r\n    */\r\n\r\n    //Workflow to add new LSD: First addLSD, then setLSDConfigs, then configure it in darknet, then enableLSD\r\n    //New LSD is always added with zero weight and disabled\r\n    //Deposits must be paused before configuring, and should be enabled when done\r\n\r\n    function addLSD(address _lsd) public onlyOwner onlyWhenPaused {\r\n        require(lsdIndex[_lsd] == 0, \"Lsd has already been added\"); //fyi fails on the first lsd being duplicated since it has actual index 0\r\n        supportedLSDs.push(_lsd);\r\n        lsdIndex[_lsd] = supportedLSDs.length-1; //reverse mapping of supportedLSDs indices\r\n        isEnabled[_lsd] = false;\r\n        lsdConfigs[_lsd] = LSDConfig(0, 0, 0);\r\n        emit LSDAdded(_lsd);\r\n    }\r\n\r\n    function setLSDConfigs(address _lsd, uint256 _targetWeightBps, uint256 _maxWeightBps, uint256 _maxEthCap) public onlyOwner onlyWhenPaused {\r\n        require(_targetWeightBps <= _maxWeightBps, \"Cannot set target above max weight\");\r\n        require(_targetWeightBps <= 10000 && _maxWeightBps <= 10000, \"Cannot set weight above 1\");\r\n        lsdConfigs[_lsd] = LSDConfig(_targetWeightBps, _maxWeightBps, _maxEthCap);\r\n        emit LSDConfigSet(_lsd, lsdConfigs[_lsd]);\r\n    }\r\n\r\n    function enableLSD(address _lsd) public onlyOwner onlyWhenPaused {\r\n        require(IDarknet(darknetAddress).checkPrice(_lsd) > 0, \"Configure lsd in darknet before enabling\");\r\n        require(lsdConfigs[_lsd].targetWeightBps > 0 && lsdConfigs[_lsd].weightCapBps > 0 && lsdConfigs[_lsd].absoluteCapEth > 0, \"Set weights before enabling\");\r\n        isEnabled[_lsd] = true;\r\n        emit LSDEnabled(_lsd);\r\n    }\r\n\r\n    function enableAllLSDs() external onlyOwner onlyWhenPaused {\r\n        for(uint256 i=0; i<supportedLSDs.length; i=unchkIncr(i)) {\r\n            enableLSD(supportedLSDs[i]);\r\n        }\r\n    }\r\n\r\n    //Disabling resets configs to zero, need to set before re-enabling\r\n    function disableLSD(address _lsd) external onlyOwner onlyWhenPaused {\r\n        lsdConfigs[_lsd] = LSDConfig(0, 0, 0);\r\n        isEnabled[_lsd] = false;\r\n        emit LSDDisabled(_lsd);\r\n    }\r\n\r\n    function toggleWeightCaps() external onlyOwner {\r\n        useWeightCaps = !useWeightCaps;\r\n        emit WeightCapsToggled(useWeightCaps);\r\n    }\r\n\r\n    function toggleAbsoluteCaps() external onlyOwner {\r\n        useAbsoluteCaps = !useAbsoluteCaps;\r\n        emit AbsoluteCapsToggled(useAbsoluteCaps);\r\n    }\r\n\r\n    function toggleV1VaultAssetsForCaps() external onlyOwner {\r\n        includeV1VaultAssets = !includeV1VaultAssets;\r\n        emit IncludeV1VaultAssetsToggled(includeV1VaultAssets);\r\n    }\r\n\r\n    function unpauseDeposits() external onlyOwner onlyWhenPaused {\r\n        uint256 totalTargetWeightBps = 0;\r\n        for(uint256 i=0; i < supportedLSDs.length; i = unchkIncr(i)) {\r\n            uint256 targetWeightBps = lsdConfigs[supportedLSDs[i]].targetWeightBps;\r\n            if(targetWeightBps > 0) {\r\n                require(isEnabled[supportedLSDs[i]], \"Need to enable LSD with non-zero target weight\");\r\n            }\r\n            totalTargetWeightBps += targetWeightBps;\r\n        }\r\n        require(totalTargetWeightBps == 10000, \"Total target weight should equal 1\");\r\n        depositsPaused = false;\r\n        emit DepositPauseToggled(depositsPaused);\r\n    }\r\n\r\n    function isLsdEnabled(address lsd) public view returns(bool) {\r\n        return isEnabled[lsd];\r\n    }\r\n\r\n    function getLsdIndex(address lsd) public view returns(uint256) {\r\n        return lsdIndex[lsd];\r\n    }\r\n\r\n    //============================================================================\r\n    //Minting unshETH\r\n    //============================================================================\r\n\r\n    function deposit(address lsd, uint256 amount) external onlyZap nonReentrant {\r\n        _deposit(lsd, amount, true);\r\n    }\r\n\r\n    //Gas efficient function to mint unshETH while skipping cap checks\r\n    function depositNoCapCheck(address lsd, uint256 amount) external onlyZap nonReentrant {\r\n        _deposit(lsd, amount, false);\r\n    }\r\n\r\n    //takes a supported LSD and mints unshETH to the user in proportion\r\n    //this is an internal function, only callable by the approved ETH zap contract\r\n    function _deposit(address lsd, uint256 amount, bool checkAgainstCaps) private {\r\n        require(depositsPaused == false, \"Deposits are paused\");\r\n        require(migrated == false, \"Already migrated, deposit to new vault\");\r\n        require(isEnabled[lsd], \"LSD is disabled\");\r\n        if(checkAgainstCaps) {\r\n            uint256 balance = getCombinedVaultBalance(lsd);\r\n            if(useAbsoluteCaps) {\r\n                require(balance + amount <= getAbsoluteCap(lsd), \"Deposit exceeds absolute cap\");\r\n            }\r\n            if(useWeightCaps) {\r\n                require(balance + amount <= getWeightCap(lsd, amount), \"Deposit exceeds weight based cap\");\r\n            }\r\n        }\r\n        uint256 price = getPrice(lsd);\r\n        TransferHelper.safeTransferFrom(lsd, msg.sender, address(this), amount);\r\n        IunshETH(unshETHAddress).minter_mint(msg.sender, price*amount/1e18);\r\n    }\r\n\r\n    function getEthConversionRate(address lsd) public view returns(uint256) {\r\n        return IDarknet(darknetAddress).checkPrice(lsd);\r\n    }\r\n\r\n    function getPrice(address lsd) public view returns(uint256) {\r\n        uint256 rate = getEthConversionRate(lsd);\r\n        if(IERC20(unshETHAddress).totalSupply() == 0){\r\n            return rate;\r\n        }\r\n        else {\r\n            return 1e18* rate /stakedETHperunshETH();\r\n        }\r\n    }\r\n\r\n    function stakedETHperunshETH() public view returns (uint256) {\r\n        return 1e18*balanceInUnderlying()/IERC20(unshETHAddress).totalSupply();\r\n    }\r\n\r\n    function balanceInUnderlying() public view returns (uint256) {\r\n        uint256 underlyingBalance = 0;\r\n        for (uint256 i = 0; i < supportedLSDs.length; i = unchkIncr(i)) {\r\n            uint256 rate = getEthConversionRate(supportedLSDs[i]);\r\n            underlyingBalance += rate *IERC20(supportedLSDs[i]).balanceOf(address(this))/1e18;\r\n        }\r\n        return underlyingBalance;\r\n    }\r\n\r\n    function getAbsoluteCap(address lsd) public view returns(uint256) {\r\n        if(!useAbsoluteCaps) {\r\n            return type(uint256).max;\r\n        }\r\n        uint256 absoluteCap = 1e18*lsdConfigs[lsd].absoluteCapEth/getEthConversionRate(lsd);\r\n        return absoluteCap;\r\n    }\r\n\r\n    function getWeightCap(address lsd, uint256 marginalDeposit) public view returns(uint256) {\r\n        if(!useWeightCaps) {\r\n            return type(uint256).max;\r\n        }\r\n        uint256 weightCapBps = lsdConfigs[lsd].weightCapBps;\r\n        uint256 rate = getEthConversionRate(lsd);\r\n        uint256 marginalDepositInEth = marginalDeposit*rate/1e18;\r\n        uint256 v1VaultEthBalance = _getV1VaultEthBalance();\r\n        uint256 totalEthBalance = balanceInUnderlying() + v1VaultEthBalance + marginalDepositInEth;\r\n        uint256 weightCapInEth = totalEthBalance*weightCapBps/10000;\r\n        return 1e18*weightCapInEth/rate;\r\n    }\r\n\r\n    function getEffectiveCap(address lsd, uint256 marginalDeposit) public view returns(uint256) {\r\n        uint256 absoluteCap = getAbsoluteCap(lsd);\r\n        uint256 weightCap = getWeightCap(lsd, marginalDeposit);\r\n        if(weightCap < absoluteCap) {\r\n            return weightCap;\r\n        } else {\r\n            return absoluteCap;\r\n        }\r\n    }\r\n\r\n    function getTargetAmount(address lsd, uint256 marginalDeposit) public view returns(uint256) {\r\n        uint256 targetWeightBps = lsdConfigs[lsd].targetWeightBps;\r\n        uint256 rate = getEthConversionRate(lsd);\r\n        uint256 marginalDepositInEth = marginalDeposit*rate/1e18;\r\n        uint256 v1VaultEthBalance = _getV1VaultEthBalance();\r\n        uint256 totalEthBalance = balanceInUnderlying() + v1VaultEthBalance + marginalDepositInEth;\r\n        uint256 targetInEth = totalEthBalance* targetWeightBps /10000;\r\n        return 1e18*targetInEth/rate;\r\n    }\r\n\r\n    function _getV1VaultBalance(address lsd) internal view returns(uint256) {\r\n        uint256 v1VaultBalance = 0;\r\n        if(includeV1VaultAssets) {\r\n            v1VaultBalance = IERC20(lsd).balanceOf(v1VaultAddress);\r\n        }\r\n        return v1VaultBalance;\r\n    }\r\n\r\n    function _getV1VaultEthBalance() internal view returns(uint256) {\r\n        uint256 v1VaultEthBalance = 0;\r\n        if(includeV1VaultAssets) {\r\n            v1VaultEthBalance = ILSDVault(v1VaultAddress).balanceInUnderlying();\r\n        }\r\n        return v1VaultEthBalance;\r\n    }\r\n\r\n    function getCombinedVaultBalance(address lsd) public view returns(uint256) {\r\n        uint256 balance = IERC20(lsd).balanceOf(address(this));\r\n        return balance + _getV1VaultBalance(lsd);\r\n    }\r\n\r\n\r\n    //============================================================================\r\n    //Helper functions for UI / Zap / AMM\r\n    //============================================================================\r\n    function remainingRoomToCap(address lsd, uint256 marginalDeposit) public view returns(uint256) {\r\n        uint256 combinedBalance = getCombinedVaultBalance(lsd);\r\n        uint256 effectiveCap = getEffectiveCap(lsd, marginalDeposit);\r\n        if(combinedBalance > effectiveCap) {\r\n            return 0;\r\n        } else {\r\n            return (effectiveCap - combinedBalance);\r\n        }\r\n    }\r\n\r\n    function remainingRoomToCapInEthTerms(address lsd, uint256 marginalDepositEth) public view returns(uint256) {\r\n        uint256 rate = getEthConversionRate(lsd);\r\n        uint256 marginalDeposit = 1e18*marginalDepositEth/rate;\r\n        return remainingRoomToCap(lsd,marginalDeposit)*getEthConversionRate(lsd)/1e18;\r\n    }\r\n\r\n    function remainingRoomToTarget(address lsd, uint256 marginalDeposit) public view returns(uint256) {\r\n        uint256 combinedBalance = getCombinedVaultBalance(lsd);\r\n        uint256 target = getTargetAmount(lsd, marginalDeposit);\r\n        if(combinedBalance > target) {\r\n            return 0;\r\n        } else {\r\n            return (target - combinedBalance);\r\n        }\r\n    }\r\n\r\n    function remainingRoomToTargetInEthTerms(address lsd, uint256 marginalDepositEth) public view returns(uint256) {\r\n        uint256 rate = getEthConversionRate(lsd);\r\n        uint256 marginalDeposit = 1e18*marginalDepositEth/rate;\r\n        return remainingRoomToTarget(lsd,marginalDeposit)*rate/1e18;\r\n    }\r\n\r\n    //============================================================================\r\n    //Redeeming unshETH\r\n    //============================================================================\r\n    function setRedeemFee(uint256 _redeemFee) external onlyOwner {\r\n        require(_redeemFee <= maxRedeemFee, \"Redeem fee too high\");\r\n        redeemFee = _redeemFee;\r\n        emit RedeemFeeUpdated(redeemFee);\r\n    }\r\n\r\n    function exit(uint256 amount) external nonReentrant {\r\n        require(migrated == false, \"Already migrated, use new vault to exit\");\r\n        require(block.timestamp > shanghaiTime, \"Cannot exit until shanghaiTime\");\r\n        require(!withdrawalsPaused || block.timestamp > withdrawalUnpauseTime, \"Withdrawals are paused\");\r\n        require(IERC20(unshETHAddress).balanceOf(msg.sender) >= amount,  \"Insufficient unshETH\");\r\n        uint256 shareOfUnsheth = 1e18*amount/IERC20(unshETHAddress).totalSupply();\r\n        uint256 fee = shareOfUnsheth*redeemFee/10000; //redeem fees are 100% retained by remaining unshETH holders\r\n        IunshETH(unshETHAddress).minter_burn_from(msg.sender, amount);\r\n        for (uint256 i = 0; i < supportedLSDs.length; i = unchkIncr(i)) {\r\n            uint256 lsdBalance = IERC20(supportedLSDs[i]).balanceOf(address(this));\r\n            uint256 amountPerLsd = (shareOfUnsheth-fee)*lsdBalance/1e18;\r\n            IERC20(supportedLSDs[i]).safeTransfer(msg.sender, amountPerLsd);\r\n        }\r\n    }\r\n\r\n    //============================================================================\r\n    //Timelock functions\r\n    //============================================================================\r\n    function createTimelockProposal(TimelockFunctions _fn, address _proposedAddress) public onlyOwner {\r\n        require(_proposedAddress != address(0), \"Cannot propose zero address\");\r\n        uint256 unlockTime = block.timestamp + _TIMELOCK;\r\n        timelock[_fn] = TimelockProposal(_proposedAddress, unlockTime);\r\n        emit TimelockUpdateProposed(_fn, _proposedAddress, unlockTime);\r\n    }\r\n\r\n    function cancelTimelockProposal(TimelockFunctions _fn) public onlyOwner {\r\n        timelock[_fn] = TimelockProposal(address(0), 0);\r\n        emit TimelockUpdateCanceled(_fn);\r\n    }\r\n\r\n    function _completeTimelockProposal(TimelockFunctions _fn) internal onlyOwner {\r\n        timelock[_fn] = TimelockProposal(address(0), 0);\r\n        emit TimelockUpdateCompleted(_fn);\r\n    }\r\n\r\n    function updateUnshethZapAddress() external onlyOwner timelockUnlocked(TimelockFunctions.ZAP) {\r\n        unshethZapAddress = timelock[TimelockFunctions.ZAP].proposedAddress;\r\n        _completeTimelockProposal(TimelockFunctions.ZAP);\r\n    }\r\n\r\n    function updateDarknetAddress() external onlyOwner timelockUnlocked(TimelockFunctions.DARKNET) {\r\n        darknetAddress = timelock[TimelockFunctions.DARKNET].proposedAddress;\r\n        _completeTimelockProposal(TimelockFunctions.DARKNET);\r\n    }\r\n\r\n    function migrateVault() external onlyOwner postShanghai timelockUnlocked(TimelockFunctions.MIGRATE) {\r\n        require(IunshETH(unshETHAddress).timelock_address() == address(this), \"LSDVault cannot change unshETH minter\");\r\n        address proposedVaultAddress = timelock[TimelockFunctions.MIGRATE].proposedAddress;\r\n        for (uint256 i = 0; i < supportedLSDs.length; i = unchkIncr(i)) {\r\n            uint256 balance = IERC20(supportedLSDs[i]).balanceOf(address(this));\r\n            IERC20(supportedLSDs[i]).safeTransfer(proposedVaultAddress, balance);\r\n        }\r\n        IunshETH unshETH = IunshETH(unshETHAddress);\r\n        unshETH.addMinter(proposedVaultAddress);\r\n        unshETH.setTimelock(proposedVaultAddress);\r\n        unshETH.removeMinter(address(this));\r\n        migrated = true;\r\n        _completeTimelockProposal(TimelockFunctions.MIGRATE);\r\n    }\r\n\r\n    function setVdAmm() external onlyOwner postShanghai timelockUnlocked(TimelockFunctions.AMM) {\r\n        //revoke approvals to current swapper\r\n        if(swapperAddress != address(0)) {\r\n            _setApprovals(swapperAddress, 0);\r\n        }\r\n        //give max approvals to proposed swapper\r\n        address proposedSwapper = timelock[TimelockFunctions.AMM].proposedAddress;\r\n        _setApprovals(proposedSwapper, type(uint256).max);\r\n        swapperAddress = proposedSwapper;\r\n        ammEnabled = true;\r\n        _completeTimelockProposal(TimelockFunctions.AMM);\r\n    }\r\n\r\n    function _setApprovals(address spender, uint256 limit) internal {\r\n        for (uint256 i = 0; i < supportedLSDs.length; i = unchkIncr(i)) {\r\n            TransferHelper.safeApprove(supportedLSDs[i], spender, limit);\r\n        }\r\n    }\r\n\r\n    //============================================================================\r\n    //Admin and emergency functions\r\n    //============================================================================\r\n    function updateShanghaiTime(uint256 _newTime) external onlyOwnerOrAdmin {\r\n        require(_newTime < shanghaiTime + 4 weeks, \"Cannot extend more than 4 weeks\" );\r\n        require(_newTime > block.timestamp, \"Cannot set shanghaiTime in the past\" );\r\n        shanghaiTime = _newTime;\r\n        emit ShanghaiTimeUpdated(shanghaiTime);\r\n    }\r\n\r\n    function pauseDeposits() external onlyOwnerOrAdmin {\r\n        require(depositsPaused == false, \"Already paused\" );\r\n        depositsPaused = true;\r\n        emit DepositPauseToggled(depositsPaused);\r\n    }\r\n    \r\n    function pauseWithdrawals(uint256 _unpauseTime) external onlyOwnerOrAdmin {\r\n        //Max admin withdrawal pause is 1 day less than timelock (2 days), can't unpause again for 1 day after prev pause ends\r\n        require(_unpauseTime <= block.timestamp + _TIMELOCK - 1 days, \"Cannot pause withdrawals too long\");\r\n        require(block.timestamp >= withdrawalUnpauseTime + 1 days, \"Need 1 day cooldown before pausing again\");\r\n        withdrawalUnpauseTime = _unpauseTime;\r\n        withdrawalsPaused = true;\r\n        emit WithdrawalsPaused(withdrawalUnpauseTime);\r\n    }\r\n\r\n    function unpauseWithdrawals() external onlyOwnerOrAdmin {\r\n        withdrawalsPaused = false;\r\n        emit WithdrawalsUnpaused();\r\n    }\r\n\r\n    function disableVdAmm() external onlyOwnerOrAdmin {\r\n        require(swapperAddress != address(0), \"Vdamm is not set\");\r\n        _setApprovals(swapperAddress, 0);\r\n        emit VdAmmDisabled(swapperAddress);\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "remappings": [
      "@prb/math/=lib/prb-math/src/",
      "@prb/test/=lib/prb-test/src/",
      "Common/=lib/Common/",
      "ERC20/=lib/ERC20/",
      "Governance/=lib/Governance/",
      "Math/=lib/Math/",
      "Staking/=lib/Staking/",
      "Utils/=lib/Utils/",
      "communal/=lib/communal/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "layerzerolabs/=lib/solidity-examples/",
      "local/=src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin/",
      "prb-math/=lib/prb-math/src/",
      "prb-test/=lib/prb-math/lib/prb-test/src/",
      "solidity-examples/=lib/solidity-examples/contracts/",
      "solmate/=lib/solmate/src/",
      "src/=lib/prb-math/src/"
    ],
    "libraries": {}
  }
}}