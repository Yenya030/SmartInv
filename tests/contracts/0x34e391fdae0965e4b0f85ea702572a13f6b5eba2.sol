{{
  "language": "Solidity",
  "sources": {
    "MoonStakingS2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(\n        uint256 tokenId\n    ) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: MoonStakingS2.sol\n\npragma solidity ^0.8.17;\n\ninterface IMoonStaking {\n    function getTokenYield(\n        address contractAddress,\n        uint256 tokenId\n    ) external view returns (uint256);\n\n    function getStakerNFT(\n        address staker\n    )\n        external\n        view\n        returns (\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory\n        );\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n\ncontract MoonStakingS2 is ERC721Holder, Ownable, ReentrancyGuard {\n    IERC721 public GenesisNFT;\n    IERC721 public MutantNFT;\n    IERC721 public DekuNFT;\n    IMoonStaking public MoonStakingS1;\n\n    uint256 public constant SECONDS_IN_DAY = 86400;\n    uint256 public startTimestamp;\n    bool public stakingLaunched;\n    bool public depositPaused;\n    bool public genesisOwnershipRequired;\n\n    struct Staker {\n        uint256 accumulatedAmount; // DO need this\n        uint256 lastCheckpoint; // AND his\n        uint256[] stakedGENESIS;\n        uint256[] stakedMUTANT;\n        uint256[] stakedDEKU;\n    }\n\n    mapping(address => Staker) private _stakers;\n    mapping(uint256 => uint256) private _yieldmapping;\n\n    enum ContractTypes {\n        GENESIS,\n        MUTANT,\n        DEKU\n    }\n\n    mapping(address => ContractTypes) private _contractTypes;\n\n    mapping(address => uint256) public _baseRates;\n    mapping(address => mapping(uint256 => uint256)) private _rarityMultiplyer;\n    mapping(address => mapping(uint256 => address)) private _ownerOfToken;\n    uint256[] private _mutantRewards;\n\n    mapping(address => bool) private _authorised;\n    address[] public authorisedLog;\n\n    event Stake721(\n        address indexed staker,\n        address contractAddress,\n        uint256 tokensAmount\n    );\n\n    event Unstake721(\n        address indexed staker,\n        address contractAddress,\n        uint256 tokensAmount\n    );\n\n    event ForceWithdraw721(\n        address indexed receiver,\n        address indexed tokenAddress,\n        uint256 indexed tokenId\n    );\n\n    constructor(address _genesis, address _mooonstakings1) {\n        GenesisNFT = IERC721(_genesis);\n        _contractTypes[_genesis] = ContractTypes.GENESIS;\n        _baseRates[_genesis] = 250 ether;\n        MoonStakingS1 = IMoonStaking(_mooonstakings1);\n        _yieldmapping[150000000000000000000] = 250000000000000000000;\n        _yieldmapping[180000000000000000000] = 300000000000000000000;\n        _yieldmapping[210000000000000000000] = 350000000000000000000;\n        _yieldmapping[240000000000000000000] = 425000000000000000000;\n        _yieldmapping[300000000000000000000] = 550000000000000000000;\n        genesisOwnershipRequired = true;\n    }\n\n    modifier authorised() {\n        require(\n            _authorised[_msgSender()],\n            \"The token contract is not authorised\"\n        );\n        _;\n    }\n\n    function _validateGenesisOwnership(\n        address user\n    ) internal view returns (bool) {\n        if (!genesisOwnershipRequired) return true;\n        if (balanceOf(user) > 0) {\n            return true;\n        }\n        return GenesisNFT.balanceOf(user) > 0;\n    }\n\n    function stake721(\n        address contractAddress,\n        uint256[] memory tokenIds\n    ) public nonReentrant {\n        require(!depositPaused, \"Deposit paused\");\n        require(stakingLaunched, \"Staking is not launched yet\");\n        require(\n            (contractAddress != address(0) &&\n                contractAddress == address(GenesisNFT)) ||\n                contractAddress == address(MutantNFT) ||\n                contractAddress == address(DekuNFT),\n            \"Unknown contract or staking is not yet enabled for this NFT\"\n        );\n        if (contractAddress == address(MutantNFT) && genesisOwnershipRequired) {\n            require(\n                _validateGenesisOwnership(_msgSender()),\n                \"You do not have any Genesis NFTs\"\n            );\n        }\n        ContractTypes contractType = _contractTypes[contractAddress];\n\n        Staker storage user = _stakers[_msgSender()];\n\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                IERC721(contractAddress).ownerOf(tokenIds[i]) == _msgSender(),\n                \"Not the owner of staking NFT\"\n            );\n            IERC721(contractAddress).safeTransferFrom(\n                _msgSender(),\n                address(this),\n                tokenIds[i]\n            );\n\n            _ownerOfToken[contractAddress][tokenIds[i]] = _msgSender();\n\n            if (contractType == ContractTypes.GENESIS) {\n                user.stakedGENESIS.push(tokenIds[i]);\n            }\n            if (contractType == ContractTypes.MUTANT) {\n                user.stakedMUTANT.push(tokenIds[i]);\n            }\n            if (contractType == ContractTypes.DEKU) {\n                user.stakedDEKU.push(tokenIds[i]);\n            }\n        }\n\n        accumulate(_msgSender());\n\n        emit Stake721(_msgSender(), contractAddress, tokenIds.length);\n    }\n\n    function unstake721(\n        address contractAddress,\n        uint256[] memory tokenIds\n    ) public nonReentrant {\n        require(\n            (contractAddress != address(0) &&\n                contractAddress == address(GenesisNFT)) ||\n                contractAddress == address(MutantNFT) ||\n                contractAddress == address(DekuNFT),\n            \"Unknown contract or staking is not yet enabled for this NFT\"\n        );\n        ContractTypes contractType = _contractTypes[contractAddress];\n        Staker storage user = _stakers[_msgSender()];\n\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                IERC721(contractAddress).ownerOf(tokenIds[i]) == address(this),\n                \"Not the owner\"\n            );\n\n            _ownerOfToken[contractAddress][tokenIds[i]] = address(0);\n\n            if (contractType == ContractTypes.GENESIS) {\n                user.stakedGENESIS = _prepareForDeletion(\n                    user.stakedGENESIS,\n                    tokenIds[i]\n                );\n                user.stakedGENESIS.pop();\n            }\n            if (contractType == ContractTypes.MUTANT) {\n                user.stakedMUTANT = _prepareForDeletion(\n                    user.stakedMUTANT,\n                    tokenIds[i]\n                );\n                user.stakedMUTANT.pop();\n            }\n            if (contractType == ContractTypes.DEKU) {\n                user.stakedDEKU = _prepareForDeletion(\n                    user.stakedDEKU,\n                    tokenIds[i]\n                );\n                user.stakedDEKU.pop();\n            }\n\n            IERC721(contractAddress).safeTransferFrom(\n                address(this),\n                _msgSender(),\n                tokenIds[i]\n            );\n        }\n\n        accumulate(_msgSender()); // TODO make sure this is up to date\n\n        emit Unstake721(_msgSender(), contractAddress, tokenIds.length);\n    }\n\n    function getTokenYield(\n        address contractAddress,\n        uint256 tokenId\n    ) public view returns (uint256) {\n        if (contractAddress == address(GenesisNFT)) {\n            return getGenesisYield(tokenId);\n        } else if (contractAddress == address(MutantNFT)) {\n            return getMutantsYield(tokenId);\n        } else if (contractAddress == address(DekuNFT)) {\n            return getDekuYield(tokenId);\n        } else {\n            return 0;\n        }\n    }\n\n    function getGenesisYield(uint genesisId) public view returns (uint256) {\n        uint s1Yield = MoonStakingS1.getTokenYield(\n            address(GenesisNFT),\n            genesisId\n        );\n        return _yieldmapping[s1Yield];\n    }\n\n    function getMutantsYield(uint mutantId) public view returns (uint256) {\n        if (mutantId > 16000) {\n            return _mutantRewards[2];\n        } else if (mutantId > 10000) {\n            return _mutantRewards[1];\n        } else {\n            return _mutantRewards[0];\n        }\n    }\n\n    function getDekuYield(uint dekuId) public view returns (uint256) {\n        uint256 tokenYield = _rarityMultiplyer[address(DekuNFT)][dekuId] *\n            _baseRates[address(DekuNFT)];\n        if (tokenYield == 0) {\n            tokenYield = _baseRates[address(DekuNFT)];\n        }\n\n        return tokenYield;\n    }\n\n    function getStakerYield(address staker) public view returns (uint256) {\n        // return _stakers[staker].currentYield;\n        uint256[] memory remoteGenesis;\n        (remoteGenesis, , , , ) = MoonStakingS1.getStakerNFT(staker);\n        uint256 yield = 0;\n        for (uint256 i = 0; i < remoteGenesis.length; i++) {\n            yield += getGenesisYield(remoteGenesis[i]);\n        }\n\n        // uint256[] localGenesis = _stakers[staker].stakedGENESIS;\n        for (uint256 i = 0; i < _stakers[staker].stakedGENESIS.length; i++) {\n            yield += getGenesisYield(_stakers[staker].stakedGENESIS[i]);\n        }\n\n        uint256[] memory localMutant = _stakers[staker].stakedMUTANT;\n        for (uint256 i = 0; i < localMutant.length; i++) {\n            yield += getMutantsYield(localMutant[i]);\n        }\n\n        uint256[] memory localDeku = _stakers[staker].stakedDEKU;\n        for (uint256 i = 0; i < localDeku.length; i++) {\n            yield += getMutantsYield(localDeku[i]);\n        }\n\n        return yield;\n    }\n\n    function getStakerNFT(\n        address staker\n    )\n        public\n        view\n        returns (\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory,\n            uint256[] memory\n        )\n    {\n        uint256[] memory remoteGenesis;\n        (remoteGenesis, , , , ) = MoonStakingS1.getStakerNFT(staker);\n        return (\n            _stakers[staker].stakedGENESIS,\n            _stakers[staker].stakedMUTANT,\n            _stakers[staker].stakedDEKU,\n            remoteGenesis\n        );\n    }\n\n    /* Moving the token last in list */\n    function _prepareForDeletion(\n        uint256[] memory list,\n        uint256 tokenId\n    ) internal pure returns (uint256[] memory) {\n        bool inlist = false;\n        for (uint256 i = 0; i < list.length; i++) {\n            if (list[i] == tokenId) {\n                list[i] = list[list.length - 1];\n                list[list.length - 1] = tokenId;\n                inlist = true;\n                break;\n            }\n        }\n        require(inlist, \"Not the owner or duplicate NFT in list\");\n        return list;\n    }\n\n    function getCurrentReward(address staker) public view returns (uint256) {\n        require(stakingLaunched, \"Staking not launched\");\n        Staker memory user = _stakers[staker];\n        uint256 userYield = getStakerYield(staker);\n        if (user.lastCheckpoint == 0) {\n            if (userYield != 0) {\n                return\n                    ((block.timestamp - startTimestamp) * userYield) /\n                    SECONDS_IN_DAY;\n            }\n            return 0;\n        }\n        return\n            ((block.timestamp - user.lastCheckpoint) * userYield) /\n            SECONDS_IN_DAY;\n    }\n\n    function getAccumulatedAmount(\n        address staker\n    ) external view returns (uint256) {\n        return _stakers[staker].accumulatedAmount + getCurrentReward(staker);\n    }\n\n    function accumulate(address staker) internal {\n        _stakers[staker].accumulatedAmount += getCurrentReward(staker);\n        _stakers[staker].lastCheckpoint = block.timestamp;\n    }\n\n    function updateAccumulatedAmount(address staker) public {\n        accumulate(staker);\n    }\n\n    /**\n     * CONTRACTS\n     */\n    function ownerOf(\n        address contractAddress,\n        uint256 tokenId\n    ) public view returns (address) {\n        return _ownerOfToken[contractAddress][tokenId];\n    }\n\n    function balanceOf(address user) public view returns (uint256) {\n        uint oldBalanceOf = MoonStakingS1.balanceOf(user);\n        return _stakers[user].stakedGENESIS.length + oldBalanceOf;\n    }\n\n    function setDEKUContract(\n        address _deku,\n        uint256 _baseReward\n    ) public onlyOwner {\n        DekuNFT = IERC721(_deku);\n        _contractTypes[_deku] = ContractTypes.DEKU;\n        _baseRates[_deku] = _baseReward;\n    }\n\n    function setMUTANTContract(\n        address _mutant,\n        uint256[] memory _mutantrewards\n    ) public onlyOwner {\n        require(_mutantrewards.length == 3, \"wrong number of rewards\");\n        MutantNFT = IERC721(_mutant);\n        _contractTypes[_mutant] = ContractTypes.MUTANT;\n        _mutantRewards = _mutantrewards;\n    }\n\n    /**\n     * ADMIN\n     */\n    function authorise(address toAuth) public onlyOwner {\n        _authorised[toAuth] = true;\n        authorisedLog.push(toAuth);\n    }\n\n    function unauthorise(address addressToUnAuth) public onlyOwner {\n        _authorised[addressToUnAuth] = false;\n    }\n\n    function forceWithdraw721(\n        address tokenAddress,\n        uint256[] memory tokenIds\n    ) public onlyOwner {\n        require(tokenIds.length <= 50, \"50 is max per tx\");\n        pauseDeposit(true);\n        for (uint256 i; i < tokenIds.length; i++) {\n            address receiver = _ownerOfToken[tokenAddress][tokenIds[i]];\n            if (\n                receiver != address(0) &&\n                IERC721(tokenAddress).ownerOf(tokenIds[i]) == address(this)\n            ) {\n                IERC721(tokenAddress).transferFrom(\n                    address(this),\n                    receiver,\n                    tokenIds[i]\n                );\n                emit ForceWithdraw721(receiver, tokenAddress, tokenIds[i]);\n            }\n        }\n    }\n\n    function pauseDeposit(bool _pause) public onlyOwner {\n        depositPaused = _pause;\n    }\n\n    function launchStaking() public onlyOwner {\n        require(!stakingLaunched, \"Staking has been launched already\");\n        stakingLaunched = true;\n        startTimestamp = block.timestamp;\n    }\n\n    function updateBaseYield(\n        address _contract,\n        uint256 _yield\n    ) public onlyOwner {\n        _baseRates[_contract] = _yield;\n    }\n\n    function setIndividualRates(\n        address contractAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory rates\n    ) public onlyOwner {\n        // TODO redo this for Deku only?\n        require(\n            (contractAddress != address(0) &&\n                contractAddress == address(GenesisNFT)) ||\n                contractAddress == address(MutantNFT) ||\n                contractAddress == address(DekuNFT),\n            \"Unknown contract\"\n        );\n        require(tokenIds.length == rates.length, \"Lists not same length\");\n        for (uint256 i; i < tokenIds.length; i++) {\n            _rarityMultiplyer[contractAddress][tokenIds[i]] = rates[i];\n        }\n    }\n\n    function setGenesisOwnershipRequired(bool _newvalue) public onlyOwner {\n        genesisOwnershipRequired = _newvalue;\n    }\n\n    function withdrawETH() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}