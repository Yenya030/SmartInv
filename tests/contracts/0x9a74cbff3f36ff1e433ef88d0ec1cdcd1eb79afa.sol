{{
  "language": "Solidity",
  "sources": {
    "contracts/CopperProxyV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport {TransferHelper} from \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\nenum SwapKind { GIVEN_IN, GIVEN_OUT }\n\nstruct SingleSwap {\n    bytes32 poolId;\n    SwapKind kind;\n    IAsset assetIn;\n    IAsset assetOut;\n    uint256 amount;\n    bytes userData;\n}\n\nstruct FundManagement {\n    address sender;\n    bool fromInternalBalance;\n    address payable recipient;\n    bool toInternalBalance;\n}\n\ninterface LBPFactory {\n    function create(\n        string memory name,\n        string memory symbol,\n        address[] memory tokens,\n        uint256[] memory weights,\n        uint256 swapFeePercentage,\n        address owner,\n        bool swapEnabledOnStart\n    ) external returns (address);\n}\n\ninterface Vault {\n    struct JoinPoolRequest {\n        address[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    struct ExitPoolRequest {\n        address[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external;\n\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            address[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n    \n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountCalculated);\n}\n\ninterface LBP {\n    function updateWeightsGradually(\n        uint256 startTime,\n        uint256 endTime,\n        uint256[] memory endWeights\n    ) external;\n\n    function setSwapEnabled(bool swapEnabled) external;\n\n    function getPoolId() external returns (bytes32 poolID);\n}\n\ninterface Blocklist {\n    function isNotBlocked(address _address) external view returns(bool);\n}\n\n/// @title CopperProxyV2\n/// @notice This contract allows for simplified creation and management of Balancer LBPs\n/// It currently supports:\n/// - LBPs with 2 tokens\n/// - Withdrawl of the full liquidity at once\n/// - Having multiple fee recipients\ncontract CopperProxyV2 is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    struct PoolData {\n        address owner;\n        bool isCorrectOrder;\n        uint256 fundTokenInputAmount;\n    }\n\n    mapping(address => PoolData) private _poolData;\n    EnumerableSet.AddressSet private _pools;\n    mapping(address => uint256) private _feeRecipientsBPS;\n    EnumerableSet.AddressSet private _recipientAddresses;\n\n\n    address public constant VAULT = address(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\n    uint256 private constant _TEN_THOUSAND_BPS = 10_000;\n    address public immutable LBPFactoryAddress;\n    uint256 public immutable platformAccessFeeBPS;\n    address public blockListAddress;\n\n    constructor(\n        uint256 _platformAccessFeeBPS,\n        address _LBPFactoryAddress\n    ) {\n        platformAccessFeeBPS = _platformAccessFeeBPS;\n        LBPFactoryAddress = _LBPFactoryAddress;\n        // set initial fee recipient to owner of contract\n        _recipientAddresses.add(owner());\n        _feeRecipientsBPS[owner()] = _TEN_THOUSAND_BPS;\n    }\n\n    // Events\n    event PoolCreated(\n        address indexed pool,\n        bytes32 poolId,\n        string  name,\n        string  symbol,\n        address[]  tokens,\n        uint256[]  weights,\n        uint256 swapFeePercentage,\n        address owner,\n        bool swapEnabledOnStart\n    );\n\n    event JoinedPool(address indexed pool, address[] tokens, uint256[] amounts, bytes userData);\n\n    event GradualWeightUpdateScheduled(address indexed pool, uint256 startTime, uint256 endTime, uint256[] endWeights);\n\n    event SwapEnabledSet(address indexed pool, bool swapEnabled);\n\n    event TransferredPoolOwnership(address indexed pool, address previousOwner, address newOwner);\n\n    event TransferredFee(address indexed pool, address token, address feeRecipient, uint256 feeAmount);\n\n    event TransferredToken(address indexed pool, address token, address to, uint256 amount);\n\n    event RecipientsUpdated(address[] recipients, uint256[] recipientShareBPS);\n\n    event Skimmed(address token, address to, uint256 balance);\n\n    // Pool access control\n    modifier onlyPoolOwner(address pool) {\n        require(msg.sender == _poolData[pool].owner, \"!owner\");\n        _;\n    }\n\n    /**\n     * @dev Checks if the pool address was created in this smart contract\n     */\n    function isPool(address pool) external view returns (bool valid) {\n        return _pools.contains(pool);\n    }\n\n    /**\n     * @dev Returns the total amount of pools created in the contract\n     */\n    function poolCount() external view returns (uint256 count) {\n        return _pools.length();\n    }\n\n    /**\n     * @dev Returns a pool for a specific index\n     */\n    function getPoolAt(uint256 index) external view returns (address pool) {\n        return _pools.at(index);\n    }\n\n    /**\n     * @dev Returns all the pool values\n     */\n    function getPools() external view returns (address[] memory pools) {\n        return _pools.values();\n    }\n\n    /**\n     * @dev Returns the pool's data saved during creation\n     */\n    function getPoolData(address pool) external view returns (PoolData memory poolData) {\n        return _poolData[pool];\n    }\n\n    /**\n     * @dev Returns the total amount of LBP Tokens for a pool. These tokens are burned when exit\n     */\n    function getBPTTokenBalance(address pool) external view returns (uint256 bptBalance) {\n        return IERC20(pool).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns all the fee recipients\n     */\n    function getFeeRecipients() external view returns (address[] memory recipients) {\n        return _recipientAddresses.values();\n    }\n\n    /**\n     * @dev Returns the fee share percentage in BPS for a fee recipient\n     */\n    function getRecipientShareBPS(address recipientAddress) external view returns (uint256 shareSize) {\n        if (_recipientAddresses.contains(recipientAddress)) {\n            return _feeRecipientsBPS[recipientAddress];\n        }\n        return uint256(0);\n    }\n\n    struct PoolConfig {\n        string name;\n        string symbol;\n        address[] tokens;\n        uint256[] amounts;\n        uint256[] weights;\n        uint256[] endWeights;\n        bool isCorrectOrder;\n        uint256 swapFeePercentage;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /**\n     * @dev Creates a pool and return the contract address of the new pool\n     */\n    function createLBP(PoolConfig memory poolConfig) external returns (address) {\n        // 1: deposit tokens and approve vault\n        require(poolConfig.tokens.length == 2, \"Copper LBPs must have exactly two tokens\");\n        require(poolConfig.tokens[0] != poolConfig.tokens[1], \"LBP tokens must be unique\");\n        require(poolConfig.startTime > block.timestamp, \"LBP start time must be in the future\");\n        require(poolConfig.endTime > poolConfig.startTime, \"LBP end time must be greater than start time\");\n        require(blockListAddress != address(0), \"no blocklist address set\");\n        bool msgSenderIsNotBlocked = Blocklist(blockListAddress).isNotBlocked(msg.sender);\n        require(msgSenderIsNotBlocked, \"msg.sender is blocked\");\n        TransferHelper.safeTransferFrom(poolConfig.tokens[0], msg.sender, address(this), poolConfig.amounts[0]);\n        TransferHelper.safeTransferFrom(poolConfig.tokens[1], msg.sender, address(this), poolConfig.amounts[1]);\n        TransferHelper.safeApprove(poolConfig.tokens[0], VAULT, poolConfig.amounts[0]);\n        TransferHelper.safeApprove(poolConfig.tokens[1], VAULT, poolConfig.amounts[1]);\n\n        // 2: pool creation\n        address pool = LBPFactory(LBPFactoryAddress).create(\n            poolConfig.name,\n            poolConfig.symbol,\n            poolConfig.tokens,\n            poolConfig.weights,\n            poolConfig.swapFeePercentage,\n            address(this), // owner set to this proxy\n            false // swaps disabled on start\n        );\n\n        bytes32 poolId = LBP(pool).getPoolId();\n        emit PoolCreated(\n            pool,\n            poolId,\n            poolConfig.name,\n            poolConfig.symbol,\n            poolConfig.tokens,\n            poolConfig.weights,\n            poolConfig.swapFeePercentage,\n            address(this),\n            false    \n        );\n\n        // 3: store pool data\n        _poolData[pool] = PoolData(\n            msg.sender,\n            poolConfig.isCorrectOrder,\n            poolConfig.amounts[poolConfig.isCorrectOrder ? 0 : 1]\n        );\n        require(_pools.add(pool), \"exists already\");\n\n        bytes memory userData = abi.encode(0, poolConfig.amounts); // JOIN_KIND_INIT = 0\n        // 4: deposit tokens into pool\n        Vault(VAULT).joinPool(\n            poolId,\n            address(this), // sender\n            address(this), // recipient\n            Vault.JoinPoolRequest(\n                poolConfig.tokens,\n                poolConfig.amounts,\n                userData,\n                false)\n        );\n        emit JoinedPool(pool, poolConfig.tokens, poolConfig.amounts, userData);\n\n        // 5: configure weights\n        LBP(pool).updateWeightsGradually(poolConfig.startTime, poolConfig.endTime, poolConfig.endWeights);\n        emit GradualWeightUpdateScheduled(pool, poolConfig.startTime, poolConfig.endTime, poolConfig.endWeights);\n\n        return pool;\n    }\n\n    /**\n     * @dev Enable or disables swaps.\n     * Note: LBPs are created with trading disabled by default.\n     */\n    function setSwapEnabled(address pool, bool swapEnabled) external onlyPoolOwner(pool) {\n        LBP(pool).setSwapEnabled(swapEnabled);\n        emit SwapEnabledSet(pool, swapEnabled);\n    }\n\n    /**\n     * @dev Transfer ownership of the pool to a new owner\n     */\n    function transferPoolOwnership(address pool, address newOwner) external onlyPoolOwner(pool) {\n        require(blockListAddress != address(0), \"no blocklist address set\");\n        bool newOwnerIsNotBlocked = Blocklist(blockListAddress).isNotBlocked(msg.sender);\n        require(newOwnerIsNotBlocked, \"newOwner is blocked\");\n\n        address previousOwner = _poolData[pool].owner;\n        _poolData[pool].owner = newOwner;\n        emit TransferredPoolOwnership(pool, previousOwner, newOwner);\n    }\n\n    enum ExitKind {\n        EXACT_BPT_IN_FOR_ONE_TOKEN_OUT,\n        EXACT_BPT_IN_FOR_TOKENS_OUT,\n        BPT_IN_FOR_EXACT_TOKENS_OUT\n    }\n\n    /**\n     * @dev calculate the amount of BPToken to burn.\n     * - if maxBPTTokenOut is 0, everything will be burned\n     * - else it will burn only the amount passed\n     */\n    function _calcBPTokenToBurn(address pool, uint256 maxBPTTokenOut) internal view returns(uint256) {\n        uint256 bptBalance = IERC20(pool).balanceOf(address(this));\n        require(maxBPTTokenOut <= bptBalance, \"Specifed BPT out amount out exceeds owner balance\");\n        require(bptBalance > 0, \"Pool owner BPT balance is less than zero\");\n        return maxBPTTokenOut == 0 ? bptBalance : maxBPTTokenOut;\n    }\n\n    /**\n     * @dev Exit a pool, burn the BPT token and transfer back the tokens.\n     * - If maxBPTTokenOut is passed as 0, the function will use the total balance available for the BPT token.\n     * - If maxBPTTokenOut is between 0 and the total of BPT available, that will be the amount used to burn.\n     * maxBPTTokenOut must be greater than or equal to 0\n     * - isStandardFee value should be true unless there is an issue with safeTransfer, in which case it can be passed\n     * as false, and the fee will stay in the contract and later on distributed manualy to mitigate errors\n     */\n    function exitPool(address pool, uint256 maxBPTTokenOut, bool isStandardFee) external onlyPoolOwner(pool) {\n        uint256[]  memory minAmountsOut = new uint256[](2);\n        minAmountsOut[0] = uint256(0);\n        minAmountsOut[1] = uint256(0);\n\n        // 1. Get pool data\n        bytes32 poolId = LBP(pool).getPoolId();\n        (address[] memory poolTokens, uint256[] memory balances, ) = Vault(VAULT).getPoolTokens(poolId);\n        require(poolTokens.length == minAmountsOut.length, \"invalid input length\");\n        PoolData memory poolData = _poolData[pool];\n\n        // 2. Specify the exact BPT amount to burn\n        uint256 bptToBurn = _calcBPTokenToBurn(pool, maxBPTTokenOut);\n        \n        // 3. Exit pool and keep tokens in contract\n        Vault(VAULT).exitPool(\n            poolId,\n            address(this),\n            payable(address(this)),\n            Vault.ExitPoolRequest(\n                poolTokens,\n                minAmountsOut, \n                abi.encode(ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT, bptToBurn),\n                false\n            ) \n        );\n\n        // 4. Get the amount of Fund token from the pool that was left behind after exit (dust)\n        ( ,uint256[] memory balancesAfterExit, ) = Vault(VAULT).getPoolTokens(poolId);\n        uint256 fundTokenIndex = poolData.isCorrectOrder ? 0 : 1;\n\n        // 5. Distribute tokens and fees\n        _distributeTokens(\n            pool,\n            poolTokens,\n            poolData,\n            balances[fundTokenIndex] - balancesAfterExit[fundTokenIndex],\n            isStandardFee\n        );\n    }\n\n    /**\n     * @dev Distributes the tokens to the owner and the fee to the fee recipients\n     */\n    function _distributeTokens(\n        address pool,\n        address[] memory poolTokens,\n        PoolData memory poolData,\n        uint256 fundTokenFromPool,\n        bool isStandardFee) internal {\n\n        address mainToken = poolTokens[poolData.isCorrectOrder ? 1 : 0];\n        address fundToken = poolTokens[poolData.isCorrectOrder ? 0 : 1];\n        uint256 mainTokenBalance = IERC20(mainToken).balanceOf(address(this));\n        uint256 remainingFundBalance = fundTokenFromPool;\n\n        // if the amount of fund token increased during the LBP\n        if (fundTokenFromPool > poolData.fundTokenInputAmount) { \n            uint256 totalPlatformAccessFeeAmount = ((fundTokenFromPool - poolData.fundTokenInputAmount) * platformAccessFeeBPS)\n                / _TEN_THOUSAND_BPS;\n            // Fund amount after substracting the fee\n            remainingFundBalance = fundTokenFromPool - totalPlatformAccessFeeAmount;\n\n            if (isStandardFee == true ) {\n                _distributePlatformAccessFee(pool, fundToken, totalPlatformAccessFeeAmount);\n            } else {\n                _distributeSafeFee(pool, fundToken, totalPlatformAccessFeeAmount);\n            }\n        }\n\n        // Transfer the balance of the main token\n        _transferTokenToPoolOwner(pool, mainToken, mainTokenBalance);\n        // Transfer the balanace of fund token excluding the platform access fee\n        _transferTokenToPoolOwner(pool, fundToken, remainingFundBalance);\n    }\n\n    /**\n     * @dev Transfer token to pool owner\n     */\n    function _transferTokenToPoolOwner(address pool, address token, uint256 amount) private {\n        TransferHelper.safeTransfer(\n            token,\n            msg.sender,\n            amount\n        );\n        emit TransferredToken(pool, token, msg.sender, amount);\n    }\n\n    /**\n     * @dev Send fee to owner of contract.\n     *      Only used for exits where there was a transfer error between fee recipients\n     */\n    function _distributeSafeFee(address pool, address fundToken, uint256 totalFeeAmount) private {\n        TransferHelper.safeTransfer(fundToken, owner(), totalFeeAmount);\n        emit TransferredFee(pool, fundToken, owner(), totalFeeAmount);\n    }\n\n    /**\n     * @dev Distribute fee between recipients\n     */\n    function _distributePlatformAccessFee(address pool, address fundToken, uint256 totalFeeAmount) private {\n        uint256 recipientsLength = _recipientAddresses.length();\n        for (uint256 i = 0; i < recipientsLength; i++) {\n            address recipientAddress =  _recipientAddresses.at(i);\n            // calculate amount for each recipient based on the their _feeRecipientsBPS\n            uint256 proportionalAmount = (totalFeeAmount * _feeRecipientsBPS[recipientAddress]) / _TEN_THOUSAND_BPS;\n            TransferHelper.safeTransfer(fundToken, recipientAddress, proportionalAmount);\n            emit TransferredFee(pool, fundToken, recipientAddress, proportionalAmount);\n        }\n    }\n\n    /**\n     * @dev Resets _recipientAddresses mapping and _feeRecipientsBPS.\n     * Note this should only be used in updateRecipients.\n     *      None of these mapping/array should be empty\n     */\n    function _resetRecipients() private {\n        uint256 recipientsLength = _recipientAddresses.length();\n        address[] memory recipientValues = _recipientAddresses.values();\n        for (uint i=0; i < recipientsLength; i++) {\n            address recipientAddress = recipientValues[i];\n            delete _feeRecipientsBPS[recipientAddress];\n            _recipientAddresses.remove(recipientAddress);\n        }\n    }\n\n    /**\n     * @dev Updates recipients and share.\n     * NOTE: the first recipient will be the one used for emergency safeDistributeFee\n     */\n    function updateRecipients(\n        address[] calldata recipients,\n        uint256[] calldata recipientShareBPS\n    ) external onlyOwner {\n        require(recipients.length > 0,  \"recipients must have values\");\n        require(recipientShareBPS.length > 0,  \"recipientShareBPS must have values\");\n        require(recipients.length == recipientShareBPS.length,\n            \"'recipients' and 'recipientShareBPS' arrays must have the same length\");\n        _resetRecipients();\n        require(blockListAddress != address(0), \"no blocklist address set\");\n        uint256 sumBPS = 0;\n        uint256 arraysLength = recipientShareBPS.length;\n        for (uint256 i = 0; i < arraysLength; i++) {\n            require(recipientShareBPS[i] > uint256(0), \"Share BPS size must be greater than 0\");\n            bool recipientIsNotBlocked = Blocklist(blockListAddress).isNotBlocked(recipients[i]);\n            require(recipientIsNotBlocked, \"recipient is blocked\");\n            sumBPS += recipientShareBPS[i];\n            _recipientAddresses.add(recipients[i]);\n            _feeRecipientsBPS[recipients[i]] = recipientShareBPS[i];\n        }\n        require(sumBPS == _TEN_THOUSAND_BPS, \"Invalid recipients BPS sum\");\n        require(_recipientAddresses.length() == recipientShareBPS.length, \"Fee recipient address must be unique\");\n        // emit event\n        emit RecipientsUpdated(recipients, recipientShareBPS);\n    }\n\n    /**\n     * @dev Transfer any token that is not LBPT to the given address\n     */\n    function skim(address token, address recipient) external onlyOwner {\n        require(!_pools.contains(token), \"can't skim BPT tokens\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        TransferHelper.safeTransfer(token, recipient, balance);\n        emit Skimmed(token, recipient, balance);\n    }\n\n    function updateBlocklistAddress(address contractAddress) external onlyOwner {\n        blockListAddress = contractAddress;\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}