{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ISAN.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./SANSoulbindable.sol\";\n\ninterface ISAN is SANSoulbindable {\n    function tokenLevel(uint256 _tokenId)\n        external\n        view\n        returns (SoulboundLevel _level);\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n}\n"
    },
    "contracts/ISANGA.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface ISANGA {\n    enum SaleState {\n        Paused, // 0\n        Open    // 1\n    }\n\n    event SaleStateChanged(\n        SaleState newSaleState\n    );\n\n    error EpochIsNotMintable(uint256 epoch);\n    error ExceedsMaxRoyaltiesPercentage();\n    error SalePhaseNotActive();\n    error TokenAlreadyUsedThisEpoch(uint256 tokenId);\n    error TokenIsNotGold(uint256 tokenId);\n    error TokenIsNotSoulbound(uint256 tokenId);\n    error TokenIsNotOwned(uint256 tokenId);\n}\n"
    },
    "contracts/SAN1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Based on OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract SAN1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n        interfaceId == type(IERC1155).interfaceId ||\n        interfaceId == type(IERC1155MetadataURI).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n    public\n    view\n    virtual\n    override\n    returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n    unchecked {\n        _balances[id][from] = fromBalance - amount;\n    }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     */\n    function _mintSimple(\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        _balances[id][_msgSender()] += amount;\n        emit TransferSingle(_msgSender(), address(0), _msgSender(), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _mintBatchSimple(\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        for (uint256 i = 0; i < ids.length; ++i) {\n            _balances[ids[i]][_msgSender()] += amounts[i];\n        }\n        emit TransferBatch(_msgSender(), address(0), _msgSender(), ids, amounts);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n    unchecked {\n        _balances[id][from] = fromBalance - amount;\n    }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "contracts/SANGA.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n/***\n *    ███████╗ █████╗ ███╗   ██╗ ██████╗  █████╗\n *    ██╔════╝██╔══██╗████╗  ██║██╔════╝ ██╔══██╗\n *    ███████╗███████║██╔██╗ ██║██║  ███╗███████║\n *    ╚════██║██╔══██║██║╚██╗██║██║   ██║██╔══██║\n *    ███████║██║  ██║██║ ╚████║╚██████╔╝██║  ██║\n *    ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝\n *\n * cromagnus the name\n * mystery in his brush strokes\n * art must always flow\n */\n\nimport \"./SAN1155.sol\";\nimport \"./token/ERC2981ContractWideRoyalties.sol\";\nimport \"./token/TokenRescuer.sol\";\nimport \"./ISAN.sol\";\nimport \"./SANSoulbindable.sol\";\nimport \"./ISANGA.sol\";\n\n/**\n * @title SANGA by Cromagnus\n * @author Aaron Hanson <coffee.becomes.code@gmail.com> @CoffeeConverter\n */\ncontract SANGA is\n    ISANGA,\n    SAN1155,\n    ERC2981ContractWideRoyalties,\n    TokenRescuer,\n    SANSoulbindable\n{\n    /// The maximum ERC-2981 royalties percentage (two decimals).\n    uint256 public constant MAX_ROYALTIES_PCT = 333; // 3.33%\n\n    /// The SAN contract.\n    ISAN public immutable SAN;\n\n    /// The start time of the first minting epoch.\n    uint256 immutable public FLOW_ORIGINATION_TIME;\n\n    /// The length of a minting epoch.\n    uint256 immutable public FLOW_RATE;\n\n    /// The token name.\n    string public name;\n\n    /// The token symbol.\n    string public symbol;\n\n    /// The contract URI for contract-level metadata.\n    string public contractURI;\n\n    /// The token sale state (0=Paused, 1=Open).\n    SaleState public saleState = SaleState.Open;\n\n    /// Tracks which minting epochs have been skipped.\n    mapping(uint256 => bool) private epochSkipped;\n\n    /// Tracks which SAN tokens have been used to mint in this epoch.\n    /// epoch => bitfield array\n    mapping(uint256 => uint256[40]) private epochSanUsed;\n\n    uint256[40] private sanGoldTokenBitfield = [\n        36893488147419103232,\n        11150373928493307355683732040131241033334784,\n        2305843009213693952,\n        1606938044258990275541962092341162602522202993782792835301376,\n        55213970774324510299478046898216203619608871796705905555134260602470400,\n        21267647932558658688827395834130726912,\n        205688069665150755269371147819668813122841983204197482918576128,\n        1725438232202198268064731120538439917384279064465366950225789614817280,\n        0,\n        441711766194596180475538996311607334714920236071836368927967390581391360,\n        28269553036454155550626057352616065595456100367924597067487529538800320512,\n        452312848583266388373324160190187140051835877600177796092245021597705961472,\n        784637716923424298460267800393524444885885024004028235776,\n        11692013098647223345629478661730264157247460343808,\n        187437584987688299259622580400326207078187935989760,\n        514220174162876888173427869550470107021738738992833002368795136,\n        1461501648222607500259002564945408316080753213440,\n        102844034834071955311312418498074979830122465414226416383295488,\n        10889077279844899109449015681787216527362,\n        27606985387162267410077494795375679823640796408330383623876468071727104,\n        79228162514264337593543950336,\n        57896044618658097711785492504343953926634992332820282019728792003956564819968,\n        6277101735386680763835789423207666416102355444466181996545,\n        40728227292489011044181186969600,\n        2147549184,\n        13164036483089576991093975194192356474276505269525381895124156416,\n        12855504354071922204335696738729300820187068683228081972838912,\n        21778071482940216404160885548167527923712,\n        2722258935525964032735525534641233608740,\n        862718704724959803824391304722084463551968387438819483148461178617856,\n        3369993333394596315640628243330772752694576644254665679320626757633,\n        36028938752884736,\n        0,\n        2993155353253689176481146537402947624255349864792064,\n        411376139330488582748320651213029957181100864178446488307761664,\n        14474011154717180573780651719434947495500583299404132133890181186165372092416,\n        365380984519025362206706592108638917004359630848,\n        10385861367669883486462489361645568,\n        383123885216472214589749016064406509268076358556188672,\n        0\n    ];\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        string memory _contractURI,\n        string memory _baseURI,\n        address _royaltiesReceiver,\n        uint256 _royaltiesPercent,\n        uint256 _flowOriginationTime,\n        uint256 _flowRate,\n        address _sanContract\n    )\n        SAN1155(_baseURI)\n    {\n        name = _name;\n        symbol = _symbol;\n        contractURI = _contractURI;\n        setRoyalties(\n            _royaltiesReceiver,\n            _royaltiesPercent\n        );\n        FLOW_ORIGINATION_TIME = _flowOriginationTime;\n        FLOW_RATE = _flowRate;\n        SAN = ISAN(_sanContract);\n    }\n\n    /**\n     * @notice Mints SANGA tokens.\n     * @param _sanIdsForGold SAN token IDs to be used to mint gold SANGA.\n     * @param _sanIdsForColor SAN token IDs to be used to mint color SANGA.\n     * @param _sanIdsForMono SAN token IDs to be used to mint monochrome SANGA.\n     */\n    function mint(\n        uint256[] calldata _sanIdsForGold,\n        uint256[] calldata _sanIdsForColor,\n        uint256[] calldata _sanIdsForMono\n    )\n        external\n    {\n        if (saleState == SaleState.Paused) revert SalePhaseNotActive();\n\n        uint256 epoch = _currentEpoch();\n        if (epochIsMintable(epoch) == false) revert EpochIsNotMintable(epoch);\n\n        unchecked {\n            for (uint i = 0; i < _sanIdsForGold.length; ++i) {\n                uint256 tokenId = _sanIdsForGold[i];\n\n                if (!sanTokenIsGold(tokenId))\n                    revert TokenIsNotGold(tokenId);\n\n                if (tokenWasUsedInEpoch(epoch, tokenId))\n                    revert TokenAlreadyUsedThisEpoch(tokenId);\n\n                if (SAN.ownerOf(tokenId) != _msgSender())\n                    revert TokenIsNotOwned(tokenId);\n\n                _setTokenUsedThisEpoch(tokenId);\n            }\n\n            for (uint i = 0; i < _sanIdsForColor.length; ++i) {\n                uint256 tokenId = _sanIdsForColor[i];\n\n                if (tokenWasUsedInEpoch(epoch, tokenId))\n                    revert TokenAlreadyUsedThisEpoch(tokenId);\n\n                if (SAN.ownerOf(tokenId) != _msgSender())\n                    revert TokenIsNotOwned(tokenId);\n\n                if (SAN.tokenLevel(tokenId) == SoulboundLevel.Unbound)\n                    revert TokenIsNotSoulbound(tokenId);\n\n                _setTokenUsedThisEpoch(tokenId);\n            }\n\n            for (uint i = 0; i < _sanIdsForMono.length; ++i) {\n                uint256 tokenId = _sanIdsForMono[i];\n\n                if (tokenWasUsedInEpoch(epoch, tokenId))\n                    revert TokenAlreadyUsedThisEpoch(tokenId);\n\n                if (SAN.ownerOf(tokenId) != _msgSender())\n                    revert TokenIsNotOwned(tokenId);\n\n                _setTokenUsedThisEpoch(tokenId);\n            }\n\n            uint256 idCount;\n            if (_sanIdsForMono.length > 0) ++idCount;\n            if (_sanIdsForColor.length > 0) ++idCount;\n            if (_sanIdsForGold.length > 0) ++idCount;\n\n            if (idCount == 1) {\n                if (_sanIdsForMono.length > 0) {\n                    _mintSimple(currentMonoTokenId(), _sanIdsForMono.length);\n                }\n                else if (_sanIdsForColor.length > 0) {\n                    _mintSimple(currentColorTokenId(), _sanIdsForColor.length);\n                }\n                else {\n                    _mintSimple(currentGoldTokenId(), _sanIdsForGold.length);\n                }\n            }\n            else {\n                uint256[] memory ids = new uint256[](idCount);\n                uint256[] memory amounts = new uint256[](idCount);\n                uint256 curIndex;\n\n                if (_sanIdsForMono.length > 0) {\n                    ids[curIndex] = currentMonoTokenId();\n                    amounts[curIndex] = _sanIdsForMono.length;\n                    ++curIndex;\n                }\n                if (_sanIdsForColor.length > 0) {\n                    ids[curIndex] = currentColorTokenId();\n                    amounts[curIndex] = _sanIdsForColor.length;\n                    ++curIndex;\n                }\n                if (_sanIdsForGold.length > 0) {\n                    ids[curIndex] = currentGoldTokenId();\n                    amounts[curIndex] = _sanIdsForGold.length;\n                }\n\n                _mintBatchSimple(ids, amounts);\n            }\n        }\n    }\n\n    /**\n     * @notice (only owner) Sets the contract URI for contract metadata.\n     * @param _newContractURI The new contract URI.\n     */\n    function setContractURI(\n        string calldata _newContractURI\n    )\n        external\n        onlyOwner\n    {\n        contractURI = _newContractURI;\n    }\n\n    /**\n     * @notice (only owner) Sets if an epoch should be skipped (non-mintable).\n     * @param _epoch The epoch.\n     * @param _isSkipped Whether or not the epoch should be skipped.\n     */\n    function setEpochSkipped(\n        uint256 _epoch,\n        bool _isSkipped\n    )\n        external\n        onlyOwner\n    {\n        epochSkipped[_epoch] = _isSkipped;\n    }\n\n\n    /**\n     * @notice (only owner) Sets the saleState to `_newSaleState`.\n     * @param _newSaleState The new sale state\n     * (0=Paused, 1=Open).\n     */\n    function setSaleState(\n        SaleState _newSaleState\n    )\n        external\n        onlyOwner\n    {\n        saleState = _newSaleState;\n        emit SaleStateChanged(_newSaleState);\n    }\n\n    /**\n     * @notice (only owner) Sets the token URI for token metadata.\n     * @param _newURI The new URI.\n     */\n    function setURI(\n        string calldata _newURI\n    )\n        external\n        onlyOwner\n    {\n        _setURI(_newURI);\n    }\n\n    /**\n     * @notice Returns the current minting epoch number.\n     * @return epoch_ The current minting epoch number.\n     */\n    function currentEpoch()\n        external\n        view\n        returns (uint256 epoch_)\n    {\n        epoch_ = _currentEpoch();\n    }\n\n    /**\n     * @notice Zeroes out token IDs user already minted with this epoch.\n     * @param _sanTokenIds The list of SAN token IDs to check.\n     * @return unusedTokenIds_ The token ID list with used ones zeroed out.\n     */\n    function tokensUnusedThisEpoch(\n        uint256[] calldata _sanTokenIds\n    )\n        external\n        view\n        returns (uint256[] memory unusedTokenIds_)\n    {\n        uint256 epoch = _currentEpoch();\n        unusedTokenIds_ = new uint256[](_sanTokenIds.length);\n        unchecked {\n            for(uint i = 0; i < _sanTokenIds.length; ++i) {\n                uint256 tokenId = _sanTokenIds[i];\n                if (tokenWasUsedInEpoch(epoch, tokenId) == false) {\n                    unusedTokenIds_[i] = tokenId;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice (only owner) Sets ERC-2981 royalties recipient and percentage.\n     * @param _recipient The address to which to send royalties.\n     * @param _value The royalties percentage (two decimals, e.g. 1000 = 10%).\n     */\n    function setRoyalties(\n        address _recipient,\n        uint256 _value\n    )\n        public\n        onlyOwner\n    {\n        if (_value > MAX_ROYALTIES_PCT) revert ExceedsMaxRoyaltiesPercentage();\n\n        _setRoyalties(\n            _recipient,\n            _value\n        );\n    }\n\n    /**\n     * @notice Gets the current Gold SANGA token ID.\n     * @return _tokenId The current Gold SANGA token ID.\n     */\n    function currentGoldTokenId()\n        public\n        view\n        returns (uint256 _tokenId)\n    {\n        unchecked {\n            return 3 + _currentEpoch() * 10;\n        }\n    }\n\n    /**\n     * @notice Gets the current Color SANGA token ID.\n     * @return _tokenId The current Color SANGA token ID.\n     */\n    function currentColorTokenId()\n        public\n        view\n        returns (uint256 _tokenId)\n    {\n        unchecked {\n            return 2 + _currentEpoch() * 10;\n        }\n    }\n\n    /**\n     * @notice Gets the current Mono SANGA token ID.\n     * @return _tokenId The current Mono SANGA token ID.\n     */\n    function currentMonoTokenId()\n        public\n        view\n        returns (uint256 _tokenId)\n    {\n        unchecked {\n            return 1 + _currentEpoch() * 10;\n        }\n    }\n\n    /**\n     * @notice Checks if the current epoch is mintable.\n     * @return isMintable_ True if the current epoch is mintable.\n     */\n    function currentEpochIsMintable()\n        public\n        view\n        returns (bool isMintable_)\n    {\n        uint256 epoch = _currentEpoch();\n        isMintable_ = epochIsMintable(epoch);\n    }\n\n    /**\n     * @notice Checks if an epoch is mintable.\n     * @param _epoch The epoch number to check.\n     * @return isMintable_ True if the epoch is mintable.\n     */\n    function epochIsMintable(\n        uint256 _epoch\n    )\n        public\n        view\n        returns (bool isMintable_)\n    {\n        isMintable_ = _epoch > 0 && epochSkipped[_epoch] == false;\n    }\n\n    /**\n     * @notice Checks if a SAN token ID is a gold character.\n     * @param _sanTokenId The SAN token ID to check.\n     * @return isGold_ True if the SAN token ID is a gold character.\n     */\n    function sanTokenIsGold(\n        uint256 _sanTokenId\n    )\n        public\n        view\n        returns (bool isGold_)\n    {\n        uint256 bucket = _sanTokenId >> 8;\n        uint256 mask = 1 << (_sanTokenId & 0xff);\n        isGold_ = sanGoldTokenBitfield[bucket] & mask > 0;\n    }\n\n    /**\n     * @notice Checks if a SAN token ID has been used to mint in some epoch.\n     * @param _epoch The epoch number.\n     * @param _sanTokenId The SAN token ID.\n     * @return hasBeenUsed_ True if this SAN token ID has minted in the epoch.\n     */\n    function tokenWasUsedInEpoch(\n        uint256 _epoch,\n        uint256 _sanTokenId\n    )\n        public\n        view\n        returns (bool hasBeenUsed_)\n    {\n        uint256 bucket = _sanTokenId >> 8;\n        uint256 mask = 1 << (_sanTokenId & 0xff);\n        hasBeenUsed_ = epochSanUsed[_epoch][bucket] & mask > 0;\n    }\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(\n        bytes4 _interfaceId\n    )\n        public\n        view\n        override (SAN1155, ERC2981Base)\n        returns (bool)\n    {\n        return super.supportsInterface(_interfaceId);\n    }\n\n    function _setTokenUsedThisEpoch(\n        uint256 _sanTokenId\n    )\n        private\n    {\n        uint256 bucket = _sanTokenId >> 8;\n        uint256 mask = 1 << (_sanTokenId & 0xff);\n        epochSanUsed[_currentEpoch()][bucket] |= mask;\n    }\n\n    function _currentEpoch()\n        private\n        view\n        returns (uint256 epoch_)\n    {\n        if (block.timestamp < FLOW_ORIGINATION_TIME) {\n            epoch_ = 0;\n        }\n        else {\n            unchecked {\n                epoch_ = 1 + (block.timestamp - FLOW_ORIGINATION_TIME) / FLOW_RATE;\n            }\n        }\n    }\n\n    function ___ART_MUST_FLOW___()\n        external\n        pure\n        returns (string memory haiku_)\n    {\n        haiku_ =\n            \"cromagnus the name ||| \"\n            \"mystery in his brush strokes ||| \"\n            \"art must always flow\";\n    }\n\n}\n"
    },
    "contracts/SANSoulbindable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface SANSoulbindable {\n    enum SoulboundLevel { Unbound, One, Two, Three, Four }\n}\n"
    },
    "contracts/token/ERC2981Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC2981Royalties.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\nabstract contract ERC2981Base is ERC165, IERC2981Royalties {\n\tstruct RoyaltyInfo {\n\t\taddress recipient;\n\t\tuint24 amount;\n\t}\n\n\t/// @inheritdoc\tERC165\n\tfunction supportsInterface(bytes4 interfaceId)\n\t\tpublic\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (bool)\n\t{\n\t\treturn\n\t\t\tinterfaceId == type(IERC2981Royalties).interfaceId ||\n\t\t\tsuper.supportsInterface(interfaceId);\n\t}\n}"
    },
    "contracts/token/ERC2981ContractWideRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./ERC2981Base.sol\";\n\n/// @dev This is a contract used to add ERC2981 support to ERC721 and 1155\n/// @dev This implementation has the same royalties for each and every tokens\nabstract contract ERC2981ContractWideRoyalties is ERC2981Base {\n\tRoyaltyInfo private _royalties;\n\n\t/// @dev Sets token royalties\n\t/// @param _recipient recipient of the royalties\n\t/// @param _value percentage (using 2 decimals - 10000 = 100, 0 = 0)\n\tfunction _setRoyalties(\n\t\taddress _recipient,\n\t\tuint256 _value\n\t)\n\t\tinternal\n\t{\n\t\t// unneeded since the derived contract has a lower _value limit\n\t\t// require(_value <= 10000, \"ERC2981Royalties: Too high\");\n\t\t_royalties = RoyaltyInfo(_recipient, uint24(_value));\n\t}\n\n\t/// @inheritdoc\tIERC2981Royalties\n\tfunction royaltyInfo(\n\t\tuint256,\n\t\tuint256 _value\n\t)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (address receiver, uint256 royaltyAmount)\n\t{\n\t\tRoyaltyInfo memory royalties = _royalties;\n\t\treceiver = royalties.recipient;\n\t\troyaltyAmount = (_value * royalties.amount) / 10000;\n\t}\n}"
    },
    "contracts/token/IERC2981Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title IERC2981Royalties\n/// @dev Interface for the ERC2981 - Token Royalty standard\ninterface IERC2981Royalties {\n\t/// @notice Called with the sale price to determine how much royalty\n\t///         is owed and to whom.\n\t/// @param _tokenId - the NFT asset queried for royalty information\n\t/// @param _value - the sale price of the NFT asset specified by _tokenId\n\t/// @return _receiver - address of who should be sent the royalty payment\n\t/// @return _royaltyAmount - the royalty payment amount for value sale price\n\tfunction royaltyInfo(uint256 _tokenId, uint256 _value)\n\t\texternal\n\t\tview\n\t\treturns (address _receiver, uint256 _royaltyAmount);\n}\n"
    },
    "contracts/token/IStuckTokens.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\ninterface IStuckERC20 {\n    function transfer(\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IStuckERC721 {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}"
    },
    "contracts/token/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IStuckTokens.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IStuckERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IStuckERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/token/TokenRescuer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"./IStuckTokens.sol\";\nimport \"./SafeERC20.sol\";\nimport \"../utils/Ownable.sol\";\n\nerror ArrayLengthMismatch();\n\ncontract TokenRescuer is Ownable {\n    using SafeERC20 for IStuckERC20;\n\n    function rescueBatchERC20(\n        address _token,\n        address[] calldata _receivers,\n        uint256[] calldata _amounts\n    )\n        external\n        onlyOwner\n    {\n        if (_receivers.length != _amounts.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _receivers.length; i += 1) {\n                _rescueERC20(_token, _receivers[i], _amounts[i]);\n            }\n        }\n    }\n\n    function rescueERC20(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    )\n        external\n        onlyOwner\n    {\n        _rescueERC20(_token, _receiver, _amount);\n    }\n\n    function rescueBatchERC721(\n        address _token,\n        address[] calldata _receivers,\n        uint256[][] calldata _tokenIDs\n    )\n        external\n        onlyOwner\n    {\n        if (_receivers.length != _tokenIDs.length) revert ArrayLengthMismatch();\n        unchecked {\n            for (uint i; i < _receivers.length; i += 1) {\n                uint256[] memory tokenIDs = _tokenIDs[i];\n                for (uint j; j < tokenIDs.length; j += 1) {\n                    _rescueERC721(_token, _receivers[i], tokenIDs[j]);\n                }\n            }\n        }\n    }\n\n    function rescueERC721(\n        address _token,\n        address _receiver,\n        uint256 _tokenID\n    )\n        external\n        onlyOwner\n    {\n        _rescueERC721(_token, _receiver, _tokenID);\n    }\n\n    function _rescueERC20(\n        address _token,\n        address _receiver,\n        uint256 _amount\n    )\n        private\n    {\n        IStuckERC20(_token).safeTransfer(_receiver, _amount);\n    }\n\n    function _rescueERC721(\n        address _token,\n        address _receiver,\n        uint256 _tokenID\n    )\n        private\n    {\n        IStuckERC721(_token).safeTransferFrom(\n            address(this),\n            _receiver,\n            _tokenID\n        );\n    }\n}"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Based on OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n// With renounceOwnership() removed\n\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 33333
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}