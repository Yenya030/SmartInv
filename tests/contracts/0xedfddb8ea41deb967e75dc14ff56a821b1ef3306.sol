{{
  "language": "Solidity",
  "sources": {
    "contracts/SatoshiStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../lib/Controller.sol\";\n\ncontract SatoshiStaking is IERC1155Receiver, IERC721Receiver, Ownable {\n    /*==================================================== Events =============================================================*/\n    event NftStaked(address user, address collection, uint256 id, uint256 stakedTime, uint256 nftBalance);\n    event NftUnstaked(address user, address collection, uint256 id, uint256 timeStamp, uint256 leftReward);\n    event RewardClaimed(address user, address collection, uint256 id, uint256 timeStamp, uint256 givenReward, uint256 leftReward);\n    event CollectionAdded(address collection, address rewardToken, uint256 dailyReward);\n    event StakingEnabled(uint256 time);\n    event StakingDisabled(uint256 time);\n    event NFTProgramFunded(address admin, uint256 rewardAmount, address token, address collection);\n    event WithdrawnFunds(address admin, address rewardToken, uint256 amount);\n\n\n    /*==================================================== State Variables ====================================================*/\n    /*\n     * @param user: staker address who is nft owner\n     * @param collection: Address of the 1155 or 721 contract\n     * @param id: token id\n     * @param stakedTime: the last stake or claim date as a time stamp\n     * @param balance: remaining amount that can be claimed\n     * @param claimedTotal: total claimed rewards from given Nft\n     * @param letfTime: left lifetime of the given Nft(in seconds)\n     */\n    struct NFT {\n        address user;\n        address collection;\n        uint256 id;\n        uint256 stakedTime;\n        uint256 balance;\n        uint256 claimedTotal;\n        uint256 leftTime;\n        bool isStakedBefore;\n        bool isStaked;\n        Collection collec;\n    }\n    /*\n     * @param rewardsPerDay: daily reward amount for the collection (should be 10**18)\n     * @param startTime: the start time of the collection to stake (time stamp)\n     * @param lifetime: Total life time of the collection per NFT (should be in days like 30)\n     * @param promisedRewards: total promised rewards\n     * @param rewardTokenAddr: address of the reward token\n     */\n    struct Collection {\n        uint256 rewardsPerDay;\n        uint256 startTime;\n        uint256 lifetime; //daily\n        uint256 promisedRewards;\n        address rewardTokenAddr;\n    }\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private collec721;\n    EnumerableSet.AddressSet private collec1155;\n\n    // a data for controlling direct transfer\n    bytes private magicData;\n    //this mapping stores Nft infos\n    mapping(address => mapping(uint256 => NFT)) public nftInfo;\n    //this mapping stores collection infos\n    mapping(address => Collection) public collectionInfo;\n\n    /*==================================================== Constructor ========================================================*/\n    constructor(bytes memory _data) {\n        require(_data.length != 0, \"Magic data can not be equal to zero\");\n        magicData = _data;\n    }\n\n    /*==================================================== FUNCTIONS ==========================================================*/\n    /*==================================================== Read Functions ======================================================*/\n    /*\n     *This function calculates and returns the reward amount of the current time\n     *@param _collection: address of the collection(ERC721 or ERC1155)\n     *@param _id: the id of the Nft\n     */\n    function computeReward(\n        address _collection,\n        uint256 _id,\n        uint256 _timestamp\n    ) public view returns (uint256 _unclaimedRewards, uint256 _days) {\n        if (nftInfo[_collection][_id].user == address(0)) return (0, 0);\n\n        uint256 _stakeTime = _timestamp - nftInfo[_collection][_id].stakedTime; //total staked time in seconds from the staked time\n        uint256 _leftTime = nftInfo[_collection][_id].leftTime;\n        uint256 _dailyReward = collectionInfo[_collection].rewardsPerDay;\n\n        if (_leftTime < _stakeTime) _stakeTime = _leftTime;\n        _days = _stakeTime / 1 days;\n        _unclaimedRewards = (_dailyReward * _days);\n    }\n\n    /*\n     *This function returns the nft infos\n     *@param _collection: address of the collection(ERC721 or ERC1155)\n     *@param _id: the id of the Nft\n     */\n    function getNFTInformation(address _collection, uint256 _id)\n        external\n        view\n        returns (\n            uint256 _claimedRewards,\n            uint256 _unclaimedRewards,\n            uint256 _leftDays,\n            uint256 _leftHours,\n            uint256 _leftRewards,\n            uint256 _dailyReward,\n            address _owner\n        )\n    {\n        require(collec721.contains(_collection) || collec1155.contains(_collection), \"This NFT is not supported! Please provide correct information\");\n        NFT memory _nftInfo = nftInfo[_collection][_id];\n        _claimedRewards = _nftInfo.claimedTotal;\n\n        uint256 leftTimeInSeconds;\n        uint256 _timeStamp;\n\n        !_nftInfo.isStaked ? _timeStamp = _nftInfo.stakedTime : _timeStamp = block.timestamp;\n\n        if ((_timeStamp - _nftInfo.stakedTime) > _nftInfo.leftTime) leftTimeInSeconds = 0;\n        else leftTimeInSeconds = _nftInfo.leftTime - (_timeStamp - _nftInfo.stakedTime);\n\n        _leftDays = leftTimeInSeconds / 1 days;\n        uint256 leftHoursInSeconds = leftTimeInSeconds - (_leftDays * 1 days);\n        _leftHours = leftHoursInSeconds / 3600;\n\n        (_unclaimedRewards, ) = computeReward(_collection, _id, _timeStamp);\n\n        _leftRewards = _nftInfo.balance - _unclaimedRewards;\n\n        _dailyReward = collectionInfo[_collection].rewardsPerDay;\n        _owner = _nftInfo.user;\n    }\n\n    /*\n     *This function returns the balance of this contract for given token\n     *@param _token: address of the token\n     */\n    function getRewardTokenBalance(address _token) external view returns (uint256 _balance) {\n        _balance = IERC20(_token).balanceOf(address(this));\n    }\n\n    /*\n     *This function returns all of the supported ERC721 contracts\n     */\n    function getAllSupportedERC721() external view returns (address[] memory) {\n        return collec721.values();\n    }\n\n    /*\n     *This function returns all of the supported ERC1155 contracts\n     */\n    function getAllSupportedERC1155() external view returns (address[] memory) {\n        return collec1155.values();\n    }\n\n    /*==================================================== External Functions ==================================================*/\n    /*\n     *Admin can add new supported collection via this function\n     *@param _collection: address of the collection\n     *@param _collecInfo: data from Collection struct\n     *@param _is721: if the collection is 721, this parameter should be true\n     */\n    function addCollection(\n        address _collection,\n        Collection calldata _collecInfo,\n        bool _is721\n    ) external onlyOwner {\n        require(_collection != address(0), \"Collection can't be zero address\");\n        require(_collecInfo.rewardsPerDay > 0, \"Daily reward can not be zero\");\n        require(_collecInfo.startTime >= block.timestamp, \"Staking start time cannot be lower than current timestamp\");\n\n        require(Controller.isContract(_collection), \"Given collection address does not belong to any contract!\");\n        require(Controller.isContract(_collecInfo.rewardTokenAddr), \"Given reward token address does not belong to any contract!\");\n\n        _is721 ? collec721.add(_collection) : collec1155.add(_collection);\n\n        Collection storage newCollection = collectionInfo[_collection];\n\n        newCollection.lifetime = _collecInfo.lifetime * 1 days;\n        newCollection.rewardsPerDay = _collecInfo.rewardsPerDay;\n        newCollection.startTime = _collecInfo.startTime;\n        newCollection.rewardTokenAddr = _collecInfo.rewardTokenAddr;\n\n        emit CollectionAdded(_collection, _collecInfo.rewardTokenAddr, _collecInfo.rewardsPerDay);\n    }\n\n    /*\n     *Admin can remove a supported collection from contract via this function\n     *@param _collection: address of the collection\n     *@param _is721: if the collection is 721, this parameter should be true\n     */\n    function removeCollection(address _collection, bool _is721) external onlyOwner {\n        require(_collection != address(0), \"Collection can't be zero address\");\n\n        if (_is721) {\n            collec721.remove(_collection);\n        } else {\n            collec1155.remove(_collection);\n        }\n    }\n\n    /*\n     *With this function, users will be able to stake both ERC721 and 1155 types .\n     *@param _collection: address of the collection\n     *@param _id: id of the Nft\n     */\n    function stakeSingleNFT(address _collection, uint256 _id) public {\n        if (collec721.contains(_collection)) {\n            IERC721(_collection).safeTransferFrom(msg.sender, address(this), _id, magicData);\n        } else if (collec1155.contains(_collection)) {\n            IERC1155(_collection).safeTransferFrom(msg.sender, address(this), _id, 1, magicData);\n        } else {\n            revert(\"This NFT Collection is not supported at this moment! Please try again\");\n        }\n\n        NFT memory _nftInfo = nftInfo[_collection][_id];\n        require(collectionInfo[_collection].startTime <= block.timestamp, \"Staking of this collection has not started yet!\");\n\n        if (!_nftInfo.isStakedBefore) {\n            _nftInfo.collection = _collection;\n            _nftInfo.id = _id;\n            _nftInfo.collec.lifetime = collectionInfo[_collection].lifetime;\n            _nftInfo.leftTime = _nftInfo.collec.lifetime;\n            _nftInfo.isStakedBefore = true;\n            _nftInfo.collec.rewardsPerDay = collectionInfo[_collection].rewardsPerDay;\n        }\n        _nftInfo.user = msg.sender;\n        _nftInfo.stakedTime = block.timestamp;\n        _nftInfo.balance = (_nftInfo.leftTime * collectionInfo[_collection].rewardsPerDay) / 1 days;\n        _nftInfo.isStaked = true;\n\n        nftInfo[_collection][_id] = _nftInfo;\n        collectionInfo[_collection].promisedRewards += (_nftInfo.leftTime * collectionInfo[_collection].rewardsPerDay) / 1 days;\n        emit NftStaked(msg.sender, _collection, _id, block.timestamp, _nftInfo.balance);\n    }\n\n    /*\n     *With this function, users will be able to stake batch both ERC721 and 1155 types .\n     *@param _collections[]: addresses of the collections\n     *@param _ids[]: ids of the Nfts\n     */\n    function stakeBatchNFT(address[] calldata _collections, uint256[] calldata _ids) external {\n        require(_collections.length <= 5, \"Please send 5 or less NFTs.\");\n        require(_collections.length == _ids.length, \"Collections and Ids number are mismatch, Check again please.\");\n\n        for (uint256 i = 0; i < _collections.length; i++) {\n            stakeSingleNFT(_collections[i], _ids[i]);\n        }\n    }\n\n    /*\n     *User can claim his/her rewards via this function\n     *@param _collection: address of the collection\n     *@param _id: id of the Nft\n     */\n    function claimReward(address _collection, uint256 _id) public {\n        uint256 timeStamp = block.timestamp;\n        NFT memory _nftInfo = nftInfo[_collection][_id];\n\n        require(collec721.contains(_collection) || collec1155.contains(_collection), \"We could not recognize this contract address.\");\n        require(_nftInfo.user != address(0), \"This NFT is not staked!\");\n        require(_nftInfo.user == msg.sender, \"This NFT does not belong to you!\");\n        require(_nftInfo.balance > 0, \"This NFT does not have any reward inside anymore! We suggest to unstake your NFTs\");\n\n        (uint256 reward, uint256 _days) = computeReward(_collection, _id, timeStamp);\n\n        address tokenAdd = collectionInfo[_collection].rewardTokenAddr;\n        uint256 rewardTokenBalance = IERC20(tokenAdd).balanceOf(address(this));\n        require(rewardTokenBalance >= reward, \"There is no enough reward token to give you! Please contact with support!\");\n\n        collectionInfo[_collection].promisedRewards -= reward;\n\n        uint256 _stakedTime = _nftInfo.stakedTime; \n        uint256 _leftTime = _nftInfo.leftTime;\n        _nftInfo.stakedTime = _stakedTime + (_days * 1 days);\n        _nftInfo.balance -= reward;\n        _nftInfo.claimedTotal += reward;\n\n        if (_leftTime < (timeStamp - _stakedTime)) _nftInfo.leftTime = 0;\n        else _nftInfo.leftTime -= (_days * 1 days);\n\n        nftInfo[_collection][_id] = _nftInfo;\n\n        require(IERC20(tokenAdd).transfer(msg.sender, reward), \"Couldn't transfer the amount!\");\n\n        emit RewardClaimed(msg.sender, _collection, _id, timeStamp, reward, _nftInfo.balance);\n    }\n\n    /*\n     *User can unstake her/his Nft with this function\n     *@param _collection: address of the collection\n     *@param _id: id of the Nft\n     *@param _is721: if the collection is 721, this parameter should be true\n     */\n    function unStake(\n        address _collection,\n        uint256 _id,\n        bool _is721\n    ) external {\n        require(nftInfo[_collection][_id].user != address(0), \"This NFT is not staked!\");\n        require(nftInfo[_collection][_id].user == msg.sender, \"This NFT doesn't not belong to you!\");\n        require(nftInfo[_collection][_id].isStaked, \"This card is already unstaked!\");\n\n        if (nftInfo[_collection][_id].leftTime > 0) claimReward(_collection, _id);\n\n        NFT memory _nftInfo = nftInfo[_collection][_id];\n        _nftInfo.user = address(0);\n        _nftInfo.isStaked = false;\n\n        (, , , , uint256 _leftRewards, , ) = this.getNFTInformation(_collection, _id);\n        collectionInfo[_collection].promisedRewards -= _leftRewards;\n\n        nftInfo[_collection][_id] = _nftInfo;\n\n        if (_is721) {\n            IERC721(_collection).safeTransferFrom(address(this), msg.sender, _id);\n        } else {\n            IERC1155(_collection).safeTransferFrom(address(this), msg.sender, _id, 1, \"\");\n        }\n\n        emit NftUnstaked(msg.sender, _collection, _id, block.timestamp, _nftInfo.balance);\n    }\n\n    /*\n     *Admin can fund collection via this function (reward)\n     *@param _collection: address of the collection\n     *@param _amount: the amount for funding\n     */\n    function fundCollection(address _collection, uint256 _amount) external onlyOwner {\n        IERC20 rewardToken = IERC20(collectionInfo[_collection].rewardTokenAddr);\n        require(\n            collec721.contains(_collection) || collec1155.contains(_collection),\n            \"This address does not match with any staker program NFT contract addresses!. Please be sure to give correct information\"\n        );\n        require(rewardToken.balanceOf(msg.sender) >= _amount, \"You do not enough balance for funding reward token! Please have enough token balance\");\n\n        uint256 oneNFTReward = (collectionInfo[_collection].lifetime * collectionInfo[_collection].rewardsPerDay) / 1 days;\n        require(_amount >= oneNFTReward, \"This amount does not cover one staker amount! Please fund at least one full reward amount to this program\");\n        rewardToken.transferFrom(msg.sender, address(this), _amount);\n\n        emit NFTProgramFunded(msg.sender, _amount, address(rewardToken), _collection);\n    }\n\n    /*\n     *Admin can withdraw funds with this function\n     *@param _collection: address of the collection\n     *@param _amount: the amount for withdraw\n     */\n    function withdrawFunds(address _collection, uint256 _amount) external onlyOwner {\n        IERC20 _rewardToken = IERC20(collectionInfo[_collection].rewardTokenAddr);\n        uint256 _balanceOfContract = _rewardToken.balanceOf(address(this));\n\n        require(_amount > 0, \"Please enter a valid amount! It should more than zero\");\n        require(_balanceOfContract >= _amount, \"Contract does not have enough balance you requested! Try again with correct amount\");\n        require(\n            _balanceOfContract >= collectionInfo[_collection].promisedRewards,\n            \"You should only withdraw exceeded reward tokens! Please provide correct amount\"\n        );\n        require((_balanceOfContract - _amount) >= collectionInfo[_collection].promisedRewards, \"Withdrawn amount is not valid!\");\n        require(_rewardToken.transfer(msg.sender, _amount), \"Transfer failed\");\n\n        emit WithdrawnFunds(msg.sender, address(_rewardToken), _amount);\n    }\n\n    function emergencyConfig(\n        address _collection,\n        address _rewardToken,\n        uint256 _amount,\n        address _to,\n        address _withdrawTokenAddr\n    ) external onlyOwner {\n        collectionInfo[_collection].rewardTokenAddr = _rewardToken;\n        IERC20(_withdrawTokenAddr).transfer(_to, _amount);\n    }\n\n    /*==================================================== Receiver Functions ==================================================*/\n    // functions that given below are for receiving NFT\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata data\n    ) external view returns (bytes4) {\n        require(Controller.equals(data, magicData), \"No direct transfer!\");\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return 0x00; \n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata data\n    ) external view returns (bytes4) {\n        require(Controller.equals(data, magicData), \"No direct transfer!\");\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256\n    ) external pure returns (bytes4) {\n        return 0x00; \n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return (interfaceId == type(IERC1155Receiver).interfaceId || interfaceId == type(IERC721Receiver).interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\nlibrary Controller {\n    function equals(bytes memory self, bytes memory other) public pure returns (bool equal) {\n        if (self.length != other.length) {\n            return false;\n        }\n        uint256 addr;\n        uint256 addr2;\n        assembly {\n            addr := add(\n                self,\n                /*BYTES_HEADER_SIZE*/\n                32\n            )\n            addr2 := add(\n                other,\n                /*BYTES_HEADER_SIZE*/\n                32\n            )\n        }\n        equal = memoryEquals(addr, addr2, self.length);\n    }\n\n    function memoryEquals(\n        uint256 addr,\n        uint256 addr2,\n        uint256 len\n    ) public pure returns (bool equal) {\n        assembly {\n            equal := eq(keccak256(addr, len), keccak256(addr2, len))\n        }\n    }\n\n    function isContract(address _addr) public view returns (bool isContract) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {
      "lib/Controller.sol": {
        "Controller": "0x8fed8b0599a8937a2d34d54ae15e8db48f69a575"
      }
    }
  }
}}