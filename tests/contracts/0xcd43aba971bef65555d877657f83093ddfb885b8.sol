{{
  "language": "Solidity",
  "sources": {
    "contracts/TWAMM.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nimport \"./interfaces/ITWAMM.sol\";\nimport \"./interfaces/IPair.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/Library.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract TWAMM is ITWAMM {\n    using Library for address;\n    using SafeERC20 for IERC20;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"TWAMM: Expired\");\n        _;\n    }\n\n    constructor(address _factory, address _WETH) {\n        factory = _factory;\n        WETH = _WETH;\n        IFactory(factory).initialize(address(this));\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    function obtainReserves(\n        address token0,\n        address token1\n    ) external view override returns (uint256 reserve0, uint256 reserve1) {\n        (reserve0, reserve1) = Library.getReserves(factory, token0, token1);\n    }\n\n    function obtainTotalSupply(\n        address token0,\n        address token1\n    ) external view override returns (uint256) {\n        if (IFactory(factory).getPair(token0, token1) == address(0)) {\n            return 0;\n        } else {\n            address pair = IFactory(factory).getPair(token0, token1);\n            return IPair(pair).getTotalSupply();\n        }\n    }\n\n    function obtainPairAddress(\n        address token0,\n        address token1\n    ) external view override returns (address) {\n        return Library.pairFor(factory, token0, token1);\n    }\n\n    function createPairWrapper(\n        address token0,\n        address token1,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (address pair) {\n        require(\n            IFactory(factory).getPair(token0, token1) == address(0),\n            \"Pair Existing Already!\"\n        );\n        pair = IFactory(factory).createPair(token0, token1);\n    }\n\n    function addInitialLiquidity(\n        address token0,\n        address token1,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 lpTokenAmount)\n    {\n        // create the pair if it doesn't exist yet\n        if (IFactory(factory).getPair(token0, token1) == address(0)) {\n            IFactory(factory).createPair(token0, token1);\n        }\n\n        address pair = Library.pairFor(factory, token0, token1);\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amount0);\n        IERC20(token1).safeTransferFrom(msg.sender, pair, amount1);\n\n        (uint256 amountA, uint256 amountB) = Library.sortAmounts(\n            token0,\n            token1,\n            amount0,\n            amount1\n        );\n        lpTokenAmount = IPair(pair).provideInitialLiquidity(\n            msg.sender,\n            amountA,\n            amountB\n        );\n    }\n\n    function addInitialLiquidityETH(\n        address token,\n        uint256 amountToken,\n        uint256 amountETH,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 lpTokenAmount)\n    {\n        // create the pair if it doesn't exist yet\n        if (IFactory(factory).getPair(token, WETH) == address(0)) {\n            IFactory(factory).createPair(token, WETH);\n        }\n\n        address pair = Library.pairFor(factory, token, WETH);\n        IERC20(token).safeTransferFrom(msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        IERC20(WETH).safeTransfer(pair, amountETH);\n\n        (uint256 amountA, uint256 amountB) = Library.sortAmounts(\n            token,\n            WETH,\n            amountToken,\n            amountETH\n        );\n        lpTokenAmount = IPair(pair).provideInitialLiquidity(\n            msg.sender,\n            amountA,\n            amountB\n        );\n\n        // refund dust eth, if any\n        if (msg.value > amountETH) {\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n        }\n    }\n\n    function addLiquidity(\n        address token0,\n        address token1,\n        uint256 lpTokenAmount,\n        uint256 amountIn0Max,\n        uint256 amountIn1Max,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountIn0, uint256 amountIn1)\n    {\n        address pair = Library.pairFor(factory, token0, token1);\n        IPair(pair).executeVirtualOrders(block.number);\n        {\n            // scope to avoid stack too deep errors\n            (uint256 reserve0, uint256 reserve1) = Library.getReserves(\n                factory,\n                token0,\n                token1\n            );\n            uint256 totalSupplyLP = IPair(pair).getTotalSupply();\n            amountIn0 = (lpTokenAmount * reserve0) / totalSupplyLP;\n            amountIn1 = (lpTokenAmount * reserve1) / totalSupplyLP;\n        }\n\n        require(\n            amountIn0 <= amountIn0Max && amountIn1 <= amountIn1Max,\n            \"Excessive Input Amount\"\n        );\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amountIn0);\n        IERC20(token1).safeTransferFrom(msg.sender, pair, amountIn1);\n        IPair(pair).provideLiquidity(msg.sender, lpTokenAmount);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 lpTokenAmount,\n        uint256 amountTokenInMax,\n        uint256 amountETHInMax,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountTokenIn, uint256 amountETHIn)\n    {\n        address pair = Library.pairFor(factory, token, WETH);\n        IPair(pair).executeVirtualOrders(block.number);\n        {\n            // scope to avoid stack too deep errors\n            (uint256 reserveToken, uint256 reserveETH) = Library.getReserves(\n                factory,\n                token,\n                WETH\n            );\n            uint256 totalSupplyLP = IPair(pair).getTotalSupply();\n            amountTokenIn = (lpTokenAmount * reserveToken) / totalSupplyLP;\n            amountETHIn = (lpTokenAmount * reserveETH) / totalSupplyLP;\n        }\n\n        require(\n            amountTokenIn <= amountTokenInMax && amountETHIn <= amountETHInMax,\n            \"Excessive Input Amount\"\n        );\n        IERC20(token).safeTransferFrom(msg.sender, pair, amountTokenIn);\n        IWETH(WETH).deposit{value: amountETHIn}();\n        IERC20(WETH).safeTransfer(pair, amountETHIn);\n        IPair(pair).provideLiquidity(msg.sender, lpTokenAmount);\n\n        // refund dust eth, if any\n        if (msg.value > amountETHIn)\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETHIn);\n    }\n\n    function withdrawLiquidity(\n        address token0,\n        address token1,\n        uint256 lpTokenAmount,\n        uint256 amountOut0Min,\n        uint256 amountOut1Min,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountOut0, uint256 amountOut1)\n    {\n        address pair = Library.pairFor(factory, token0, token1);\n        {\n            // scope to avoid stack too deep errors\n            (uint256 amountOutA, uint256 amountOutB) = IPair(pair)\n                .removeLiquidity(msg.sender, lpTokenAmount);\n            (amountOut0, amountOut1) = Library.sortAmounts(\n                token0,\n                token1,\n                amountOutA,\n                amountOutB\n            );\n        }\n\n        require(\n            amountOut0 >= amountOut0Min && amountOut1 >= amountOut1Min,\n            \"Insufficient Output Amount\"\n        );\n        require(\n            IERC20(token0).balanceOf(address(this)) >= amountOut0 &&\n                IERC20(token1).balanceOf(address(this)) >= amountOut1,\n            \"Inaccurate Amount for Tokens.\"\n        );\n        IERC20(token0).safeTransfer(msg.sender, amountOut0);\n        IERC20(token1).safeTransfer(msg.sender, amountOut1);\n    }\n\n    function withdrawLiquidityETH(\n        address token,\n        uint256 lpTokenAmount,\n        uint256 amountTokenOutMin,\n        uint256 amountETHOutMin,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountTokenOut, uint256 amountETHOut)\n    {\n        address pair = Library.pairFor(factory, token, WETH);\n        {\n            // scope to avoid stack too deep errors\n            (uint256 amountOutA, uint256 amountOutB) = IPair(pair)\n                .removeLiquidity(msg.sender, lpTokenAmount);\n            (amountTokenOut, amountETHOut) = Library.sortAmounts(\n                token,\n                WETH,\n                amountOutA,\n                amountOutB\n            );\n        }\n\n        require(\n            amountTokenOut >= amountTokenOutMin &&\n                amountETHOut >= amountETHOutMin,\n            \"Insufficient Output Amount\"\n        );\n        require(\n            IERC20(token).balanceOf(address(this)) >= amountTokenOut &&\n                IWETH(WETH).balanceOf(address(this)) >= amountETHOut,\n            \"Inaccurate Amount for Tokens.\"\n        );\n        IERC20(token).safeTransfer(msg.sender, amountTokenOut);\n        IWETH(WETH).withdraw(amountETHOut);\n        TransferHelper.safeTransferETH(msg.sender, amountETHOut);\n    }\n\n    function instantSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256 amountOut) {\n        address pair = Library.pairFor(factory, token0, token1);\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amountIn);\n        (address tokenA, ) = Library.sortTokens(token0, token1);\n\n        if (tokenA == token0) {\n            amountOut = IPair(pair).instantSwapFromAToB(msg.sender, amountIn);\n        } else {\n            amountOut = IPair(pair).instantSwapFromBToA(msg.sender, amountIn);\n        }\n\n        require(amountOut >= amountOutMin, \"Insufficient Output Amount\");\n        require(\n            IERC20(token1).balanceOf(address(this)) >= amountOut,\n            \"Inaccurate Amount for Token.\"\n        );\n        IERC20(token1).safeTransfer(msg.sender, amountOut);\n    }\n\n    function instantSwapTokenToETH(\n        address token,\n        uint256 amountTokenIn,\n        uint256 amountETHOutMin,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountETHOut)\n    {\n        address pair = Library.pairFor(factory, token, WETH);\n        IERC20(token).safeTransferFrom(msg.sender, pair, amountTokenIn);\n        (address tokenA, ) = Library.sortTokens(token, WETH);\n\n        if (tokenA == token) {\n            amountETHOut = IPair(pair).instantSwapFromAToB(\n                msg.sender,\n                amountTokenIn\n            );\n        } else {\n            amountETHOut = IPair(pair).instantSwapFromBToA(\n                msg.sender,\n                amountTokenIn\n            );\n        }\n\n        require(amountETHOut >= amountETHOutMin, \"Insufficient Output Amount\");\n        require(\n            IWETH(WETH).balanceOf(address(this)) >= amountETHOut,\n            \"Inaccurate Amount for WETH.\"\n        );\n        IWETH(WETH).withdraw(amountETHOut);\n        TransferHelper.safeTransferETH(msg.sender, amountETHOut);\n    }\n\n    function instantSwapETHToToken(\n        address token,\n        uint256 amountETHIn,\n        uint256 amountTokenOutMin,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 amountTokenOut)\n    {\n        address pair = Library.pairFor(factory, WETH, token);\n        IWETH(WETH).deposit{value: amountETHIn}();\n        IERC20(WETH).safeTransfer(pair, amountETHIn);\n        (address tokenA, ) = Library.sortTokens(WETH, token);\n\n        if (tokenA == WETH) {\n            amountTokenOut = IPair(pair).instantSwapFromAToB(\n                msg.sender,\n                amountETHIn\n            );\n        } else {\n            amountTokenOut = IPair(pair).instantSwapFromBToA(\n                msg.sender,\n                amountETHIn\n            );\n        }\n\n        require(\n            amountTokenOut >= amountTokenOutMin,\n            \"Insufficient Output Amount\"\n        );\n        require(\n            IERC20(token).balanceOf(address(this)) >= amountTokenOut,\n            \"Inaccurate Amount for Token.\"\n        );\n        IERC20(token).safeTransfer(msg.sender, amountTokenOut);\n\n        // refund dust eth, if any\n        if (msg.value > amountETHIn)\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETHIn);\n    }\n\n    function longTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 amountIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256 orderId) {\n        address pair = Library.pairFor(factory, token0, token1);\n        IERC20(token0).safeTransferFrom(msg.sender, pair, amountIn);\n        (address tokenA, ) = Library.sortTokens(token0, token1);\n\n        if (tokenA == token0) {\n            orderId = IPair(pair).longTermSwapFromAToB(\n                msg.sender,\n                amountIn,\n                numberOfBlockIntervals\n            );\n        } else {\n            orderId = IPair(pair).longTermSwapFromBToA(\n                msg.sender,\n                amountIn,\n                numberOfBlockIntervals\n            );\n        }\n    }\n\n    function longTermSwapTokenToETH(\n        address token,\n        uint256 amountTokenIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256 orderId) {\n        address pair = Library.pairFor(factory, token, WETH);\n        IERC20(token).safeTransferFrom(msg.sender, pair, amountTokenIn);\n        (address tokenA, ) = Library.sortTokens(token, WETH);\n\n        if (tokenA == token) {\n            orderId = IPair(pair).longTermSwapFromAToB(\n                msg.sender,\n                amountTokenIn,\n                numberOfBlockIntervals\n            );\n        } else {\n            orderId = IPair(pair).longTermSwapFromBToA(\n                msg.sender,\n                amountTokenIn,\n                numberOfBlockIntervals\n            );\n        }\n    }\n\n    function longTermSwapETHToToken(\n        address token,\n        uint256 amountETHIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 orderId)\n    {\n        address pair = Library.pairFor(factory, WETH, token);\n        IWETH(WETH).deposit{value: amountETHIn}();\n        IERC20(WETH).safeTransfer(pair, amountETHIn);\n        (address tokenA, ) = Library.sortTokens(WETH, token);\n\n        if (tokenA == WETH) {\n            orderId = IPair(pair).longTermSwapFromAToB(\n                msg.sender,\n                amountETHIn,\n                numberOfBlockIntervals\n            );\n        } else {\n            orderId = IPair(pair).longTermSwapFromBToA(\n                msg.sender,\n                amountETHIn,\n                numberOfBlockIntervals\n            );\n        }\n\n        // refund dust eth, if any\n        if (msg.value > amountETHIn)\n            TransferHelper.safeTransferETH(msg.sender, msg.value - amountETHIn);\n    }\n\n    function cancelTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 orderId,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 unsoldAmount, uint256 purchasedAmount)\n    {\n        address pair = Library.pairFor(factory, token0, token1);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == token0 && tokenBuy == token1,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        (unsoldAmount, purchasedAmount) = IPair(pair).cancelLongTermSwap(\n            msg.sender,\n            orderId\n        );\n\n        require(\n            IERC20(token0).balanceOf(address(this)) >= unsoldAmount &&\n                IERC20(token1).balanceOf(address(this)) >= purchasedAmount,\n            \"Inaccurate Amount for Tokens.\"\n        );\n        IERC20(token0).safeTransfer(msg.sender, unsoldAmount);\n        IERC20(token1).safeTransfer(msg.sender, purchasedAmount);\n    }\n\n    function cancelTermSwapTokenToETH(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 unsoldTokenAmount, uint256 purchasedETHAmount)\n    {\n        address pair = Library.pairFor(factory, token, WETH);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == token && tokenBuy == WETH,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        (unsoldTokenAmount, purchasedETHAmount) = IPair(pair)\n            .cancelLongTermSwap(msg.sender, orderId);\n\n        require(\n            IERC20(token).balanceOf(address(this)) >= unsoldTokenAmount &&\n                IWETH(WETH).balanceOf(address(this)) >= purchasedETHAmount,\n            \"Inaccurate Amount for Tokens.\"\n        );\n        IERC20(token).safeTransfer(msg.sender, unsoldTokenAmount);\n        IWETH(WETH).withdraw(purchasedETHAmount);\n        TransferHelper.safeTransferETH(msg.sender, purchasedETHAmount);\n    }\n\n    function cancelTermSwapETHToToken(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 unsoldETHAmount, uint256 purchasedTokenAmount)\n    {\n        address pair = Library.pairFor(factory, WETH, token);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == WETH && tokenBuy == token,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        (unsoldETHAmount, purchasedTokenAmount) = IPair(pair)\n            .cancelLongTermSwap(msg.sender, orderId);\n\n        require(\n            IERC20(token).balanceOf(address(this)) >= purchasedTokenAmount &&\n                IWETH(WETH).balanceOf(address(this)) >= unsoldETHAmount,\n            \"Inaccurate Amount for Tokens.\"\n        );\n        IERC20(token).safeTransfer(msg.sender, purchasedTokenAmount);\n        IWETH(WETH).withdraw(unsoldETHAmount);\n        TransferHelper.safeTransferETH(msg.sender, unsoldETHAmount);\n    }\n\n    function withdrawProceedsFromTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 orderId,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256 proceeds) {\n        address pair = Library.pairFor(factory, token0, token1);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == token0 && tokenBuy == token1,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        proceeds = IPair(pair).withdrawProceedsFromLongTermSwap(\n            msg.sender,\n            orderId\n        );\n\n        require(\n            IERC20(token1).balanceOf(address(this)) >= proceeds,\n            \"Inaccurate Amount for Token.\"\n        );\n        IERC20(token1).safeTransfer(msg.sender, proceeds);\n    }\n\n    function withdrawProceedsFromTermSwapTokenToETH(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256 proceedsETH) {\n        address pair = Library.pairFor(factory, token, WETH);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == token && tokenBuy == WETH,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        proceedsETH = IPair(pair).withdrawProceedsFromLongTermSwap(\n            msg.sender,\n            orderId\n        );\n\n        require(\n            IWETH(WETH).balanceOf(address(this)) >= proceedsETH,\n            \"Inaccurate Amount for WETH.\"\n        );\n        IWETH(WETH).withdraw(proceedsETH);\n        TransferHelper.safeTransferETH(msg.sender, proceedsETH);\n    }\n\n    function withdrawProceedsFromTermSwapETHToToken(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (uint256 proceedsToken)\n    {\n        address pair = Library.pairFor(factory, WETH, token);\n        address tokenSell = IPair(pair).getOrderDetails(orderId).sellTokenId;\n        address tokenBuy = IPair(pair).getOrderDetails(orderId).buyTokenId;\n        require(\n            tokenSell == WETH && tokenBuy == token,\n            \"Wrong Sell Or Buy Token\"\n        );\n\n        proceedsToken = IPair(pair).withdrawProceedsFromLongTermSwap(\n            msg.sender,\n            orderId\n        );\n\n        require(\n            IERC20(token).balanceOf(address(this)) >= proceedsToken,\n            \"Inaccurate Amount for Token.\"\n        );\n        IERC20(token).safeTransfer(msg.sender, proceedsToken);\n    }\n\n    function executeVirtualOrdersWrapper(\n        address pair,\n        uint256 blockNumber\n    ) external virtual override {\n        IPair(pair).executeVirtualOrders(blockNumber);\n    }\n}\n"
    },
    "contracts/interfaces/ITWAMM.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\ninterface ITWAMM {\n    function factory() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function obtainReserves(\n        address token0,\n        address token1\n    ) external view returns (uint256 reserve0, uint256 reserve1);\n\n    function obtainTotalSupply(\n        address token0,\n        address token1\n    ) external view returns (uint256);\n\n    function obtainPairAddress(\n        address token0,\n        address token1\n    ) external view returns (address);\n\n    function createPairWrapper(\n        address token0,\n        address token1,\n        uint256 deadline\n    ) external returns (address pair);\n\n    function addInitialLiquidity(\n        address token0,\n        address token1,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 deadline\n    ) external returns (uint256 lpTokenAmount);\n\n    function addInitialLiquidityETH(\n        address token,\n        uint256 amountToken,\n        uint256 amountETH,\n        uint256 deadline\n    ) external payable returns (uint256 lpTokenAmount);\n\n    function addLiquidity(\n        address token0,\n        address token1,\n        uint256 lpTokenAmount,\n        uint256 amountIn0Max,\n        uint256 amountIn1Max,\n        uint256 deadline\n    ) external returns (uint256 amountIn0, uint256 amountIn1);\n\n    function addLiquidityETH(\n        address token,\n        uint256 lpTokenAmount,\n        uint256 amountTokenInMax,\n        uint256 amountETHInMax,\n        uint256 deadline\n    ) external payable returns (uint256 amountTokenIn, uint256 amountETHIn);\n\n    function withdrawLiquidity(\n        address token0,\n        address token1,\n        uint256 lpTokenAmount,\n        uint256 amountOut0Min,\n        uint256 amountOut1Min,\n        uint256 deadline\n    ) external returns (uint256 amountOut0, uint256 amountOut1);\n\n    function withdrawLiquidityETH(\n        address token,\n        uint256 lpTokenAmount,\n        uint256 amountTokenOutMin,\n        uint256 amountETHOutMin,\n        uint256 deadline\n    ) external returns (uint256 amountTokenOut, uint256 amountETHOut);\n\n    function instantSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function instantSwapTokenToETH(\n        address token,\n        uint256 amountTokenIn,\n        uint256 amountETHOutMin,\n        uint256 deadline\n    ) external returns (uint256 amountETHOut);\n\n    function instantSwapETHToToken(\n        address token,\n        uint256 amountETHIn,\n        uint256 amountTokenOutMin,\n        uint256 deadline\n    ) external payable returns (uint256 amountTokenOut);\n\n    function longTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 amountIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    ) external returns (uint256 orderId);\n\n    function longTermSwapTokenToETH(\n        address token,\n        uint256 amountTokenIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    ) external returns (uint256 orderId);\n\n    function longTermSwapETHToToken(\n        address token,\n        uint256 amountETHIn,\n        uint256 numberOfBlockIntervals,\n        uint256 deadline\n    ) external payable returns (uint256 orderId);\n\n    function cancelTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 unsoldAmount, uint256 purchasedAmount);\n\n    function cancelTermSwapTokenToETH(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 unsoldTokenAmount, uint256 purchasedETHAmount);\n\n    function cancelTermSwapETHToToken(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 unsoldETHAmount, uint256 purchasedTokenAmount);\n\n    function withdrawProceedsFromTermSwapTokenToToken(\n        address token0,\n        address token1,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 proceeds);\n\n    function withdrawProceedsFromTermSwapTokenToETH(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 proceedsETH);\n\n    function withdrawProceedsFromTermSwapETHToToken(\n        address token,\n        uint256 orderId,\n        uint256 deadline\n    ) external returns (uint256 proceedsToken);\n\n    function executeVirtualOrdersWrapper(\n        address pair,\n        uint256 blockNumber\n    ) external;\n}\n"
    },
    "contracts/interfaces/IPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nimport \"../libraries/LongTermOrders.sol\";\n\ninterface IPair {\n    function factory() external view returns (address);\n\n    function tokenA() external view returns (address);\n\n    function tokenB() external view returns (address);\n\n    function rootKLast() external view returns (uint256);\n\n    function LP_FEE() external pure returns (uint256);\n\n    function orderBlockInterval() external pure returns (uint256);\n\n    function reserveMap(address) external view returns (uint256);\n\n    function tokenAReserves() external view returns (uint256);\n\n    function tokenBReserves() external view returns (uint256);\n\n    function getTotalSupply() external view returns (uint256);\n\n    event InitialLiquidityProvided(\n        address indexed addr,\n        uint256 lpTokenAmount,\n        uint256 amountA,\n        uint256 amountB\n    );\n    event LiquidityProvided(\n        address indexed addr,\n        uint256 lpTokenAmount,\n        uint256 amountAIn,\n        uint256 amountBIn\n    );\n    event LiquidityRemoved(\n        address indexed addr,\n        uint256 lpTokenAmount,\n        uint256 amountAOut,\n        uint256 amountBOut\n    );\n    event InstantSwapAToB(\n        address indexed addr,\n        uint256 amountAIn,\n        uint256 amountBOut\n    );\n    event InstantSwapBToA(\n        address indexed addr,\n        uint256 amountBIn,\n        uint256 amountAOut\n    );\n    event LongTermSwapAToB(\n        address indexed addr,\n        uint256 amountAIn,\n        uint256 orderId\n    );\n    event LongTermSwapBToA(\n        address indexed addr,\n        uint256 amountBIn,\n        uint256 orderId\n    );\n    event CancelLongTermOrder(\n        address indexed addr,\n        uint256 orderId,\n        uint256 unsoldAmount,\n        uint256 purchasedAmount\n    );\n    event WithdrawProceedsFromLongTermOrder(\n        address indexed addr,\n        uint256 orderId,\n        uint256 proceeds\n    );\n\n    function provideInitialLiquidity(\n        address to,\n        uint256 amountA,\n        uint256 amountB\n    ) external returns (uint256 lpTokenAmount);\n\n    function provideLiquidity(\n        address to,\n        uint256 lpTokenAmount\n    ) external returns (uint256 amountAIn, uint256 amountBIn);\n\n    function removeLiquidity(\n        address to,\n        uint256 lpTokenAmount\n    ) external returns (uint256 amountAOut, uint256 amountBOut);\n\n    function instantSwapFromAToB(\n        address sender,\n        uint256 amountAIn\n    ) external returns (uint256 amountBOut);\n\n    function longTermSwapFromAToB(\n        address sender,\n        uint256 amountAIn,\n        uint256 numberOfBlockIntervals\n    ) external returns (uint256 orderId);\n\n    function instantSwapFromBToA(\n        address sender,\n        uint256 amountBIn\n    ) external returns (uint256 amountAOut);\n\n    function longTermSwapFromBToA(\n        address sender,\n        uint256 amountBIn,\n        uint256 numberOfBlockIntervals\n    ) external returns (uint256 orderId);\n\n    function cancelLongTermSwap(\n        address sender,\n        uint256 orderId\n    ) external returns (uint256 unsoldAmount, uint256 purchasedAmount);\n\n    function withdrawProceedsFromLongTermSwap(\n        address sender,\n        uint256 orderId\n    ) external returns (uint256 proceeds);\n\n    function getPairOrdersAmount() external view returns (uint256);\n\n    function getOrderDetails(\n        uint256 orderId\n    ) external view returns (LongTermOrdersLib.Order memory);\n\n    function getOrderRewardFactor(\n        uint256 orderId\n    )\n        external\n        view\n        returns (\n            uint256 orderRewardFactorAtSubmission,\n            uint256 orderRewardFactorAtExpiring\n        );\n\n    function getTWAMMState()\n        external\n        view\n        returns (\n            uint256 lastVirtualOrderBlock,\n            uint256 tokenASalesRate,\n            uint256 tokenBSalesRate,\n            uint256 orderPoolARewardFactor,\n            uint256 orderPoolBRewardFactor\n        );\n\n    function getTWAMMSalesRateEnding(\n        uint256 blockNumber\n    )\n        external\n        view\n        returns (\n            uint256 orderPoolASalesRateEnding,\n            uint256 orderPoolBSalesRateEnding\n        );\n\n    function getExpiriesSinceLastExecuted()\n        external\n        view\n        returns (uint256[] memory);\n\n    function userIdsCheck(\n        address userAddress\n    ) external view returns (uint256[] memory);\n\n    function orderIdStatusCheck(uint256 orderId) external view returns (bool);\n\n    function executeVirtualOrders(uint256 blockNumber) external;\n}\n"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\ninterface IFactory {\n    event PairCreated(\n        address indexed tokenA,\n        address indexed tokenB,\n        address pair,\n        uint256\n    );\n\n    function getPair(\n        address token0,\n        address token1\n    ) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function feeArg() external view returns (uint32);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function allPairsLength() external view returns (uint256);\n\n    function initialize(address _twammAdd) external;\n\n    function twammAdd() external view returns (address);\n\n    function createPair(\n        address token0,\n        address token1\n    ) external returns (address pair);\n\n    function setFeeArg(uint32) external;\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address) external returns (uint256);\n}\n"
    },
    "contracts/libraries/Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IFactory.sol\";\nimport \"../Pair.sol\";\n\nlibrary Library {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(\n        address token0,\n        address token1\n    ) public pure returns (address tokenA, address tokenB) {\n        require(token0 != token1, \"Library: Identical Addresses\");\n        (tokenA, tokenB) = token0 < token1\n            ? (token0, token1)\n            : (token1, token0);\n        require(tokenA != address(0), \"Library: Zero Address\");\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address factory,\n        address token0,\n        address token1\n    ) public view returns (address pair) {\n        (address tokenA, address tokenB) = sortTokens(token0, token1);\n        bytes memory bytecode = type(Pair).creationCode;\n        bytes memory bytecodeArg = abi.encodePacked(\n            bytecode,\n            abi.encode(tokenA, tokenB, IFactory(factory).twammAdd())\n        );\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            bytes1(0xff),\n                            factory,\n                            keccak256(abi.encodePacked(tokenA, tokenB)),\n                            keccak256(bytecodeArg)\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address token0,\n        address token1\n    ) public view returns (uint256 reserve0, uint256 reserve1) {\n        (address tokenA, ) = sortTokens(token0, token1);\n        uint256 reserveA = IPair(pairFor(factory, token0, token1))\n            .tokenAReserves();\n        uint256 reserveB = IPair(pairFor(factory, token0, token1))\n            .tokenBReserves();\n        (reserve0, reserve1) = token0 == tokenA\n            ? (reserveA, reserveB)\n            : (reserveB, reserveA);\n    }\n\n    // sorts the amounts for tokens\n    function sortAmounts(\n        address token0,\n        address token1,\n        uint256 amount0,\n        uint256 amount1\n    ) public pure returns (uint256 amountA, uint256 amountB) {\n        (address tokenA, ) = sortTokens(token0, token1);\n        (amountA, amountB) = token0 == tokenA\n            ? (amount0, amount1)\n            : (amount1, amount0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amount0,\n        uint256 reserve0,\n        uint256 reserve1\n    ) public pure returns (uint256 amount1) {\n        require(amount0 > 0, \"Library: Insufficient Amount\");\n        require(\n            reserve0 > 0 && reserve1 > 0,\n            \"Library: Insufficient_Liquidity\"\n        );\n        amount1 = (amount0 * reserve1) / reserve0;\n    }\n}\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint256 value) public {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) public {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) public {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(\n            success,\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/libraries/LongTermOrders.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n// import \"prb-math/contracts/PRBMathSD59x18.sol\";\nimport \"./OrderPool.sol\";\nimport \"./BinarySearchTree.sol\";\n\n///@notice This library handles the state and execution of long term orders.\nlibrary LongTermOrdersLib {\n    //using PRBMathSD59x18 for int256;\n    using OrderPoolLib for OrderPoolLib.OrderPool;\n    using BinarySearchTreeLib for BinarySearchTreeLib.Tree;\n    using SafeERC20 for IERC20;\n\n    ///@notice fee for LP providers, 4 decimal places, i.e. 30 = 0.3%\n    uint256 public constant LP_FEE = 30;\n\n    ///@notice information associated with a long term order\n    struct Order {\n        uint256 id;\n        uint256 submitBlock;\n        uint256 expirationBlock;\n        uint256 saleRate;\n        uint256 sellAmount;\n        uint256 buyAmount;\n        address owner;\n        address sellTokenId;\n        address buyTokenId;\n    }\n\n    ///@notice structure contains full state related to long term orders\n    struct LongTermOrders {\n        ///@notice minimum block interval between order expiries\n        uint256 orderBlockInterval;\n        ///@notice last virtual orders were executed immediately before this block\n        uint256 lastVirtualOrderBlock;\n        ///@notice token pair being traded in embedded amm\n        address tokenA;\n        address tokenB;\n        ///@notice useful addresses for TWAMM transactions\n        address refTWAMM;\n        ///@notice mapping from token address to pool that is selling that token\n        ///we maintain two order pools, one for each token that is tradable in the AMM\n        mapping(address => OrderPoolLib.OrderPool) OrderPoolMap;\n        ///@notice incrementing counter for order ids\n        uint256 orderId;\n        ///@notice mapping from order ids to Orders\n        mapping(uint256 => Order) orderMap;\n        ///@notice mapping from account address to its corresponding list of order ids\n        mapping(address => uint256[]) orderIdMap;\n        ///@notice mapping from order id to its status (false for nonactive true for active)\n        mapping(uint256 => bool) orderIdStatusMap;\n        ///@notice record all expiry blocks since the latest executed block\n        BinarySearchTreeLib.Tree expiryBlockTreeSinceLastExecution;\n    }\n\n    ///@notice initialize state\n    function initialize(\n        LongTermOrders storage self,\n        address tokenA,\n        address tokenB,\n        address refTWAMM,\n        uint256 lastVirtualOrderBlock,\n        uint256 orderBlockInterval\n    ) public {\n        self.tokenA = tokenA;\n        self.tokenB = tokenB;\n        self.refTWAMM = refTWAMM;\n        self.lastVirtualOrderBlock = lastVirtualOrderBlock;\n        self.orderBlockInterval = orderBlockInterval;\n        self.expiryBlockTreeSinceLastExecution.insert(\n            lastVirtualOrderBlock - (lastVirtualOrderBlock % orderBlockInterval)\n        );\n    }\n\n    ///@notice long term swap token A for token B. Amount represents total amount being sold, numberOfBlockIntervals determines when order expires\n    function longTermSwapFromAToB(\n        LongTermOrders storage self,\n        address sender,\n        uint256 amountA,\n        uint256 numberOfBlockIntervals,\n        mapping(address => uint256) storage reserveMap\n    ) public returns (uint256) {\n        return\n            performLongTermSwap(\n                self,\n                self.tokenA,\n                self.tokenB,\n                sender,\n                amountA,\n                numberOfBlockIntervals,\n                reserveMap\n            );\n    }\n\n    ///@notice long term swap token B for token A. Amount represents total amount being sold, numberOfBlockIntervals determines when order expires\n    function longTermSwapFromBToA(\n        LongTermOrders storage self,\n        address sender,\n        uint256 amountB,\n        uint256 numberOfBlockIntervals,\n        mapping(address => uint256) storage reserveMap\n    ) public returns (uint256) {\n        return\n            performLongTermSwap(\n                self,\n                self.tokenB,\n                self.tokenA,\n                sender,\n                amountB,\n                numberOfBlockIntervals,\n                reserveMap\n            );\n    }\n\n    ///@notice adds long term swap to order pool\n    function performLongTermSwap(\n        LongTermOrders storage self,\n        address from,\n        address to,\n        address sender,\n        uint256 amount,\n        uint256 numberOfBlockIntervals,\n        mapping(address => uint256) storage reserveMap\n    ) private returns (uint256) {\n        //determine the selling rate based on number of blocks to expiry and total amount\n        uint256 currentBlock = block.number;\n        uint256 lastExpiryBlock = currentBlock -\n            (currentBlock % self.orderBlockInterval);\n        uint256 orderExpiry = self.orderBlockInterval *\n            (numberOfBlockIntervals + 1) +\n            lastExpiryBlock;\n        uint256 sellingRate = (amount * 10000) / (orderExpiry - currentBlock); //multiply by 10000 to reduce precision loss\n\n        //insert order expiry and update virtual order state\n        self.expiryBlockTreeSinceLastExecution.insert(orderExpiry);\n        executeVirtualOrdersUntilSpecifiedBlock(self, reserveMap, block.number);\n\n        //add order to correct pool\n        OrderPoolLib.OrderPool storage OrderPool = self.OrderPoolMap[from];\n        OrderPool.depositOrder(self.orderId, sellingRate, orderExpiry);\n\n        //add to order map\n        self.orderMap[self.orderId] = Order(\n            self.orderId,\n            currentBlock,\n            orderExpiry,\n            sellingRate,\n            0,\n            0,\n            sender,\n            from,\n            to\n        );\n\n        // add user's corresponding orderId to orderId mapping list content\n        self.orderIdMap[sender].push(self.orderId);\n\n        self.orderIdStatusMap[self.orderId] = true;\n\n        return self.orderId++;\n    }\n\n    ///@notice cancel long term swap, pay out unsold tokens and well as purchased tokens\n    function cancelLongTermSwap(\n        LongTermOrders storage self,\n        address sender,\n        uint256 orderId,\n        mapping(address => uint256) storage reserveMap\n    ) public returns (uint256, uint256) {\n        //update virtual order state\n        executeVirtualOrdersUntilSpecifiedBlock(self, reserveMap, block.number);\n\n        Order storage order = self.orderMap[orderId];\n\n        require(self.orderIdStatusMap[orderId] == true, \"Order Invalid\");\n        require(order.owner == sender, \"Sender Must Be Order Owner\");\n\n        OrderPoolLib.OrderPool storage OrderPoolSell = self.OrderPoolMap[\n            order.sellTokenId\n        ];\n        OrderPoolLib.OrderPool storage OrderPoolBuy = self.OrderPoolMap[\n            order.buyTokenId\n        ];\n\n        (uint256 unsoldAmount, uint256 purchasedAmount) = OrderPoolSell\n            .cancelOrder(orderId);\n        require(\n            unsoldAmount > 0 || purchasedAmount > 0,\n            \"No Proceeds To Withdraw\"\n        );\n\n        order.sellAmount =\n            ((block.number - order.submitBlock) * order.saleRate) /\n            10000;\n        order.buyAmount += purchasedAmount;\n\n        if (\n            OrderPoolSell.salesRateEndingPerBlock[order.expirationBlock] == 0 &&\n            OrderPoolBuy.salesRateEndingPerBlock[order.expirationBlock] == 0\n        ) {\n            self.expiryBlockTreeSinceLastExecution.deleteNode(\n                order.expirationBlock\n            );\n        }\n\n        // delete orderId from account list\n        self.orderIdStatusMap[orderId] = false;\n\n        //transfer to owner\n        IERC20(order.buyTokenId).safeTransfer(self.refTWAMM, purchasedAmount);\n        IERC20(order.sellTokenId).safeTransfer(self.refTWAMM, unsoldAmount);\n\n        return (unsoldAmount, purchasedAmount);\n    }\n\n    ///@notice withdraw proceeds from a long term swap (can be expired or ongoing)\n    function withdrawProceedsFromLongTermSwap(\n        LongTermOrders storage self,\n        address sender,\n        uint256 orderId,\n        mapping(address => uint256) storage reserveMap\n    ) public returns (uint256) {\n        //update virtual order state\n        executeVirtualOrdersUntilSpecifiedBlock(self, reserveMap, block.number);\n\n        Order storage order = self.orderMap[orderId];\n\n        require(self.orderIdStatusMap[orderId] == true, \"Order Invalid\");\n        require(order.owner == sender, \"Sender Must Be Order Owner\");\n\n        OrderPoolLib.OrderPool storage OrderPool = self.OrderPoolMap[\n            order.sellTokenId\n        ];\n        uint256 proceeds = OrderPool.withdrawProceeds(orderId);\n        require(proceeds > 0, \"No Proceeds To Withdraw\");\n\n        order.buyAmount += proceeds;\n\n        if (order.expirationBlock <= block.number) {\n            // delete orderId from account list\n            self.orderIdStatusMap[orderId] = false;\n            order.sellAmount =\n                ((order.expirationBlock - order.submitBlock) * order.saleRate) /\n                10000;\n        } else {\n            order.sellAmount =\n                ((block.number - order.submitBlock) * order.saleRate) /\n                10000;\n        }\n\n        //transfer to owner\n        IERC20(order.buyTokenId).safeTransfer(self.refTWAMM, proceeds);\n\n        return proceeds;\n    }\n\n    ///@notice executes all virtual orders between current lastVirtualOrderBlock and blockNumber\n    //also handles orders that expire at end of final block. This assumes that no orders expire inside the given interval\n    function executeVirtualTradesAndOrderExpiries(\n        LongTermOrders storage self,\n        mapping(address => uint256) storage reserveMap,\n        uint256 blockNumber\n    ) private {\n        //amount sold from virtual trades\n        uint256 blockNumberIncrement = blockNumber - self.lastVirtualOrderBlock;\n        uint256 tokenASellAmount = (self\n            .OrderPoolMap[self.tokenA]\n            .currentSalesRate * blockNumberIncrement) / 10000;\n        uint256 tokenBSellAmount = (self\n            .OrderPoolMap[self.tokenB]\n            .currentSalesRate * blockNumberIncrement) / 10000;\n\n        //initial amm balance\n        uint256 tokenAStart = reserveMap[self.tokenA];\n        uint256 tokenBStart = reserveMap[self.tokenB];\n\n        //updated balances from sales\n        (\n            uint256 tokenAOut,\n            uint256 tokenBOut,\n            uint256 ammEndTokenA,\n            uint256 ammEndTokenB\n        ) = computeVirtualBalances(\n                tokenAStart,\n                tokenBStart,\n                tokenASellAmount,\n                tokenBSellAmount\n            );\n\n        //charge LP fee\n        ammEndTokenA += (tokenAOut * LP_FEE) / 10000;\n        ammEndTokenB += (tokenBOut * LP_FEE) / 10000;\n\n        tokenAOut = (tokenAOut * (10000 - LP_FEE)) / 10000;\n        tokenBOut = (tokenBOut * (10000 - LP_FEE)) / 10000;\n\n        //update balances reserves\n        reserveMap[self.tokenA] = ammEndTokenA;\n        reserveMap[self.tokenB] = ammEndTokenB;\n\n        //distribute proceeds to pools\n        OrderPoolLib.OrderPool storage OrderPoolA = self.OrderPoolMap[\n            self.tokenA\n        ];\n        OrderPoolLib.OrderPool storage OrderPoolB = self.OrderPoolMap[\n            self.tokenB\n        ];\n\n        OrderPoolA.distributePayment(tokenBOut);\n        OrderPoolB.distributePayment(tokenAOut);\n\n        //handle orders expiring at end of interval\n        OrderPoolA.updateStateFromBlockExpiry(blockNumber);\n        OrderPoolB.updateStateFromBlockExpiry(blockNumber);\n\n        //update last virtual trade block\n        self.lastVirtualOrderBlock = blockNumber;\n    }\n\n    ///@notice executes all virtual orders until specified block, includ current block.\n    function executeVirtualOrdersUntilSpecifiedBlock(\n        LongTermOrders storage self,\n        mapping(address => uint256) storage reserveMap,\n        uint256 blockNumber\n    ) public {\n        require(\n            blockNumber <= block.number &&\n                blockNumber >= self.lastVirtualOrderBlock,\n            \"Specified Block Number Invalid!\"\n        );\n\n        OrderPoolLib.OrderPool storage OrderPoolA = self.OrderPoolMap[\n            self.tokenA\n        ];\n        OrderPoolLib.OrderPool storage OrderPoolB = self.OrderPoolMap[\n            self.tokenB\n        ];\n\n        // get list of expiryBlocks given points that are divisible by int blockInterval\n        // then trim the tree to have root tree to be node correponding to the last argument (%5=0)\n        self.expiryBlockTreeSinceLastExecution.processExpiriesListNTrimTree(\n            self.lastVirtualOrderBlock -\n                (self.lastVirtualOrderBlock % self.orderBlockInterval),\n            blockNumber - (blockNumber % self.orderBlockInterval)\n        );\n        uint256[] storage expiriesList = self\n            .expiryBlockTreeSinceLastExecution\n            .getExpiriesList();\n\n        for (uint256 i = 0; i < expiriesList.length; i++) {\n            if (\n                (OrderPoolA.salesRateEndingPerBlock[expiriesList[i]] > 0 ||\n                    OrderPoolB.salesRateEndingPerBlock[expiriesList[i]] > 0) &&\n                (expiriesList[i] > self.lastVirtualOrderBlock &&\n                    expiriesList[i] < blockNumber)\n            ) {\n                executeVirtualTradesAndOrderExpiries(\n                    self,\n                    reserveMap,\n                    expiriesList[i]\n                );\n            }\n        }\n\n        executeVirtualTradesAndOrderExpiries(self, reserveMap, blockNumber);\n    }\n\n    ///@notice computes the result of virtual trades by the token pools\n    function computeVirtualBalances(\n        uint256 tokenAStart,\n        uint256 tokenBStart,\n        uint256 tokenAIn,\n        uint256 tokenBIn\n    )\n        private\n        pure\n        returns (\n            uint256 tokenAOut,\n            uint256 tokenBOut,\n            uint256 ammEndTokenA,\n            uint256 ammEndTokenB\n        )\n    {\n        // if (\n        //     tokenAStart == 0 ||\n        //     tokenBStart == 0 ||\n        //     tokenAIn == 0 ||\n        //     tokenBIn == 0\n        // ) {\n        //     //in the case where only one pool is selling, we just perform a normal swap\n        //constant product formula\n        tokenAOut =\n            ((tokenAStart + tokenAIn) * tokenBIn) /\n            (tokenBStart + tokenBIn);\n        tokenBOut =\n            ((tokenBStart + tokenBIn) * tokenAIn) /\n            (tokenAStart + tokenAIn);\n        ammEndTokenA = tokenAStart + tokenAIn - tokenAOut;\n        ammEndTokenB = tokenBStart + tokenBIn - tokenBOut;\n    }\n    //     //when both pools sell, we use the TWAMM formula\n    //     else {\n    //         //signed, fixed point arithmetic\n    //         int256 aIn = int256(tokenAIn).fromInt();\n    //         int256 bIn = int256(tokenBIn).fromInt();\n    //         int256 aStart = int256(tokenAStart).fromInt();\n    //         int256 bStart = int256(tokenBStart).fromInt();\n    //         int256 k = aStart.mul(bStart);\n\n    //         int256 c = computeC(aStart, bStart, aIn, bIn);\n    //         int256 endA = computeAmmEndTokenA(aIn, bIn, c, k, aStart, bStart);\n    //         int256 endB = aStart.div(endA).mul(bStart);\n\n    //         int256 outA = aStart + aIn - endA;\n    //         int256 outB = bStart + bIn - endB;\n    //         require(outA >= 0 && outB >= 0, \"Invalid Amount\");\n\n    //         return (\n    //             uint256(outA.toInt()),\n    //             uint256(outB.toInt()),\n    //             uint256(endA.toInt()),\n    //             uint256(endB.toInt())\n    //         );\n    //     }\n    // }\n\n    // //helper function for TWAMM formula computation, helps avoid stack depth errors\n    // function computeC(\n    //     int256 tokenAStart,\n    //     int256 tokenBStart,\n    //     int256 tokenAIn,\n    //     int256 tokenBIn\n    // ) private pure returns (int256 c) {\n    //     int256 c1 = tokenAStart.sqrt().mul(tokenBIn.sqrt());\n    //     int256 c2 = tokenBStart.sqrt().mul(tokenAIn.sqrt());\n    //     int256 cNumerator = c1 - c2;\n    //     int256 cDenominator = c1 + c2;\n    //     c = cNumerator.div(cDenominator);\n    // }\n\n    // //helper function for TWAMM formula computation, helps avoid stack depth errors\n    // function computeAmmEndTokenA(\n    //     int256 tokenAIn,\n    //     int256 tokenBIn,\n    //     int256 c,\n    //     int256 k,\n    //     int256 aStart,\n    //     int256 bStart\n    // ) private pure returns (int256 ammEndTokenA) {\n    //     //rearranged for numerical stability\n    //     int256 eNumerator = PRBMathSD59x18.fromInt(4).mul(tokenAIn).sqrt().mul(\n    //         tokenBIn.sqrt()\n    //     );\n    //     int256 eDenominator = aStart.sqrt().mul(bStart.sqrt()).inv();\n    //     int256 exponent = eNumerator.mul(eDenominator).exp();\n    //     require(exponent > PRBMathSD59x18.abs(c), \"Invalid Amount\");\n    //     int256 fraction = (exponent + c).div(exponent - c);\n    //     int256 scaling = k.div(tokenBIn).sqrt().mul(tokenAIn.sqrt());\n    //     ammEndTokenA = fraction.mul(scaling);\n    // }\n}\n"
    },
    "contracts/libraries/OrderPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nimport \"prb-math/contracts/PRBMathUD60x18.sol\";\n\n///@notice An Order Pool is an abstraction for a pool of long term orders that sells a token at a constant rate to the embedded AMM.\n///the order pool handles the logic for distributing the proceeds from these sales to the owners of the long term orders through a modified\n///version of the staking algorithm from  https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf\nlibrary OrderPoolLib {\n    using PRBMathUD60x18 for uint256;\n\n    ///@notice you can think of this as a staking pool where all long term orders are staked.\n    /// The pool is paid when virtual long term orders are executed, and each order is paid proportionally\n    /// by the order's sale rate per block\n    struct OrderPool {\n        ///@notice current rate that tokens are being sold (per block)\n        uint256 currentSalesRate;\n        ///@notice sum of (salesProceeds_k / salesRate_k) over every period k. Stored as a fixed precision floating point number\n        uint256 rewardFactor;\n        ///@notice this maps block numbers to the cumulative sales rate of orders that expire on that block\n        mapping(uint256 => uint256) salesRateEndingPerBlock;\n        ///@notice map order ids to the block in which they expire\n        mapping(uint256 => uint256) orderExpiry;\n        ///@notice map order ids to their sales rate\n        mapping(uint256 => uint256) salesRate;\n        ///@notice reward factor per order at time of submission\n        mapping(uint256 => uint256) rewardFactorAtSubmission;\n        ///@notice reward factor at a specific block\n        mapping(uint256 => uint256) rewardFactorAtBlock;\n    }\n\n    ///@notice distribute payment amount to pool (in the case of TWAMM, proceeds from trades against amm)\n    function distributePayment(OrderPool storage self, uint256 amount) public {\n        if (self.currentSalesRate != 0) {\n            //floating point arithmetic\n            self.rewardFactor += amount\n                .fromUint()\n                .mul(PRBMathUD60x18.fromUint(10000))\n                .div(self.currentSalesRate.fromUint());\n        }\n    }\n\n    ///@notice deposit an order into the order pool.\n    function depositOrder(\n        OrderPool storage self,\n        uint256 orderId,\n        uint256 amountPerBlock,\n        uint256 orderExpiry\n    ) public {\n        self.currentSalesRate += amountPerBlock;\n        self.rewardFactorAtSubmission[orderId] = self.rewardFactor;\n        self.orderExpiry[orderId] = orderExpiry;\n        self.salesRate[orderId] = amountPerBlock;\n        self.salesRateEndingPerBlock[orderExpiry] += amountPerBlock;\n    }\n\n    ///@notice when orders expire after a given block, we need to update the state of the pool\n    function updateStateFromBlockExpiry(\n        OrderPool storage self,\n        uint256 blockNumber\n    ) public {\n        uint256 ordersExpiring = self.salesRateEndingPerBlock[blockNumber];\n        self.currentSalesRate -= ordersExpiring;\n        self.rewardFactorAtBlock[blockNumber] = self.rewardFactor;\n    }\n\n    ///@notice cancel order and remove from the order pool\n    function cancelOrder(\n        OrderPool storage self,\n        uint256 orderId\n    ) public returns (uint256 unsoldAmount, uint256 purchasedAmount) {\n        uint256 expiry = self.orderExpiry[orderId];\n        require(expiry > block.number, \"Order Already Finished\");\n\n        //calculate amount that wasn't sold, and needs to be returned\n        uint256 salesRate = self.salesRate[orderId];\n        uint256 blocksRemaining = expiry - block.number;\n        unsoldAmount = (blocksRemaining * salesRate) / 10000;\n\n        //calculate amount of other token that was purchased\n        uint256 rewardFactorAtSubmission = self.rewardFactorAtSubmission[\n            orderId\n        ];\n        purchasedAmount = (self.rewardFactor - rewardFactorAtSubmission)\n            .mul(salesRate.fromUint())\n            .div(PRBMathUD60x18.fromUint(10000))\n            .toUint();\n\n        //update state\n        self.currentSalesRate -= salesRate;\n        self.salesRate[orderId] = 0;\n        self.orderExpiry[orderId] = 0;\n        self.salesRateEndingPerBlock[expiry] -= salesRate;\n    }\n\n    ///@notice withdraw proceeds from pool for a given order. This can be done before or after the order has expired.\n    //If the order has expired, we calculate the reward factor at time of expiry. If order has not yet expired, we\n    //use current reward factor, and update the reward factor at time of staking (effectively creating a new order)\n    function withdrawProceeds(\n        OrderPool storage self,\n        uint256 orderId\n    ) public returns (uint256 totalReward) {\n        uint256 stakedAmount = self.salesRate[orderId];\n        require(stakedAmount > 0, \"Sales Rate Amount Must Be Positive\");\n        uint256 orderExpiry = self.orderExpiry[orderId];\n        uint256 rewardFactorAtSubmission = self.rewardFactorAtSubmission[\n            orderId\n        ];\n\n        //if order has expired, we need to calculate the reward factor at expiry\n        if (block.number >= orderExpiry) {\n            uint256 rewardFactorAtExpiry = self.rewardFactorAtBlock[\n                orderExpiry\n            ];\n            totalReward = (rewardFactorAtExpiry - rewardFactorAtSubmission)\n                .mul(stakedAmount.fromUint())\n                .div(PRBMathUD60x18.fromUint(10000))\n                .toUint();\n            //remove stake\n            self.salesRate[orderId] = 0;\n        }\n        //if order has not yet expired, we just adjust the start\n        else {\n            totalReward = (self.rewardFactor - rewardFactorAtSubmission)\n                .mul(stakedAmount.fromUint())\n                .div(PRBMathUD60x18.fromUint(10000))\n                .toUint();\n            self.rewardFactorAtSubmission[orderId] = self.rewardFactor;\n        }\n    }\n}\n"
    },
    "contracts/libraries/BinarySearchTree.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.9;\n\nlibrary BinarySearchTreeLib {\n    uint256 private constant TIME_EXTENSION = 50400;\n\n    struct Node {\n        uint256 parent;\n        uint256 value;\n        uint256 left;\n        uint256 right;\n    }\n\n    struct Tree {\n        uint256 root;\n        uint256 rootLast;\n        mapping(uint256 => Node) nodes;\n        mapping(uint256 => uint256[]) rootToList;\n        mapping(uint256 => uint256[]) futureExpiries; //map from last divisible root to a list of exipiries sine that root. not ordered\n    }\n\n    // helper function for insert\n    function insertHelper(\n        Tree storage self,\n        uint256 newValue,\n        uint256 nodeId\n    ) public {\n        // current node\n        Node memory curNode = self.nodes[nodeId];\n        // if value exists, no need to insert\n        if (newValue != curNode.value) {\n            if (newValue < curNode.value) {\n                if (curNode.left == 0) {\n                    self.nodes[curNode.value].left = newValue;\n                    self.nodes[newValue] = Node(curNode.value, newValue, 0, 0);\n                } else {\n                    insertHelper(self, newValue, curNode.left);\n                }\n            } else {\n                if (curNode.right == 0) {\n                    self.nodes[curNode.value].right = newValue;\n                    self.nodes[newValue] = Node(curNode.value, newValue, 0, 0);\n                } else {\n                    insertHelper(self, newValue, curNode.right);\n                }\n            }\n        }\n    }\n\n    function insert(Tree storage self, uint256 newValue) public {\n        // no tree exists\n        if (self.root == 0) {\n            self.root = newValue;\n            self.rootLast = newValue;\n            self.nodes[newValue] = Node(0, newValue, 0, 0);\n            self.futureExpiries[self.root].push(newValue);\n        } else {\n            insertHelper(self, newValue, self.root);\n        }\n    }\n\n    function returnListHelperEx(\n        Tree storage self,\n        uint256 start,\n        uint256 end,\n        uint256 nodeId,\n        uint256 extension\n    ) public {\n        if (start <= end && end < extension) {\n            // current node\n            Node memory curNode = self.nodes[nodeId];\n            if (curNode.value != 0) {\n                if (curNode.value > start) {\n                    returnListHelperEx(\n                        self,\n                        start,\n                        end,\n                        curNode.left,\n                        extension\n                    );\n                }\n\n                if (curNode.value <= end && curNode.value >= start) {\n                    if (\n                        self.rootToList[self.root].length == 0 ||\n                        (self.rootToList[self.root].length > 0 &&\n                            self.rootToList[self.root][\n                                self.rootToList[self.root].length - 1\n                            ] !=\n                            curNode.value)\n                    ) {\n                        self.rootToList[self.root].push(curNode.value);\n                    }\n                }\n\n                if (curNode.value <= extension && curNode.value > end) {\n                    if (\n                        self.futureExpiries[self.root].length == 0 ||\n                        (self.futureExpiries[self.root].length > 0 &&\n                            self.futureExpiries[self.root][\n                                self.futureExpiries[self.root].length - 1\n                            ] !=\n                            curNode.value)\n                    ) {\n                        self.futureExpiries[self.root].push(curNode.value);\n                    }\n                }\n\n                if (curNode.value < extension) {\n                    returnListHelperEx(\n                        self,\n                        start,\n                        end,\n                        curNode.right,\n                        extension\n                    );\n                }\n            }\n        }\n    }\n\n    function deleteNodeHelper(\n        Tree storage self,\n        uint256 deleteValue,\n        uint256 nodeId\n    ) public returns (uint256 newValue) {\n        Node memory curNode = self.nodes[nodeId];\n        if (curNode.value == deleteValue) {\n            newValue = deleteLeaf(self, curNode.value);\n        } else if (curNode.value < deleteValue) {\n            if (curNode.right == 0) {\n                newValue = 0;\n            } else {\n                newValue = deleteNodeHelper(self, deleteValue, curNode.right);\n            }\n        } else {\n            if (curNode.left == 0) {\n                newValue = 0;\n            } else {\n                newValue = deleteNodeHelper(self, deleteValue, curNode.left);\n            }\n        }\n    }\n\n    function deleteLeaf(\n        Tree storage self,\n        uint256 nodeId\n    ) public returns (uint256 newNodeId) {\n        Node memory curNode = self.nodes[nodeId];\n        if (curNode.left != 0) {\n            uint256 tempValue = curNode.left;\n            while (self.nodes[tempValue].right != 0) {\n                tempValue = self.nodes[tempValue].right;\n            }\n            if (tempValue != curNode.left) {\n                if (curNode.parent != 0) {\n                    if (curNode.value < curNode.parent) {\n                        self.nodes[curNode.parent].left = tempValue;\n                    } else {\n                        self.nodes[curNode.parent].right = tempValue;\n                    }\n                }\n\n                if (curNode.right != 0) {\n                    self.nodes[curNode.right].parent = tempValue;\n                }\n\n                self.nodes[curNode.left].parent = tempValue;\n                curNode.value = tempValue;\n\n                deleteNodeHelper(self, tempValue, curNode.left);\n                self.nodes[tempValue] = curNode;\n                self.nodes[nodeId] = Node(0, 0, 0, 0);\n            } else {\n                if (curNode.parent != 0) {\n                    if (curNode.value < curNode.parent) {\n                        self.nodes[curNode.parent].left = curNode.left;\n                    } else {\n                        self.nodes[curNode.parent].right = curNode.left;\n                    }\n                }\n\n                if (curNode.right != 0) {\n                    self.nodes[curNode.right].parent = curNode.left;\n                }\n\n                self.nodes[curNode.left].parent = curNode.parent;\n                self.nodes[curNode.left].right = curNode.right;\n                self.nodes[nodeId] = Node(0, 0, 0, 0);\n            }\n            newNodeId = tempValue;\n        } else if (curNode.left == 0 && curNode.right != 0) {\n            uint256 tempValue = curNode.right;\n            if (curNode.parent != 0) {\n                if (curNode.value < curNode.parent) {\n                    self.nodes[curNode.parent].left = tempValue;\n                } else {\n                    self.nodes[curNode.parent].right = tempValue;\n                }\n            }\n\n            self.nodes[curNode.right].parent = curNode.parent;\n            self.nodes[nodeId] = Node(0, 0, 0, 0);\n            newNodeId = tempValue;\n        } else {\n            if (curNode.parent != 0) {\n                if (curNode.value < curNode.parent) {\n                    self.nodes[curNode.parent].left = 0;\n                } else {\n                    self.nodes[curNode.parent].right = 0;\n                }\n            }\n            self.nodes[nodeId] = Node(0, 0, 0, 0);\n            newNodeId = 0;\n        }\n    }\n\n    function deleteNode(\n        Tree storage self,\n        uint256 deleteValue\n    ) public returns (uint256 newRoot) {\n        if (deleteValue != self.root) {\n            deleteNodeHelper(self, deleteValue, self.root);\n            newRoot = self.root;\n        } else {\n            newRoot = deleteLeaf(self, self.root);\n            self.root = newRoot;\n        }\n    }\n\n    function trimTreeHelper(\n        Tree storage self,\n        uint256 start,\n        uint256 end,\n        uint256 nodeId\n    ) public {\n        if (start <= end) {\n            // current node\n            Node memory curNode = self.nodes[nodeId];\n            if (curNode.value != 0) {\n                if (curNode.value < start) {\n                    trimTreeHelper(self, start, end, curNode.right);\n                } else if (curNode.value >= start && curNode.value <= end) {\n                    uint256 newNodeId = deleteLeaf(self, curNode.value);\n                    if (newNodeId != 0) {\n                        trimTreeHelper(self, start, end, newNodeId);\n                    }\n                } else {\n                    trimTreeHelper(self, start, end, curNode.left);\n                }\n            }\n        }\n    }\n\n    function trimTree(\n        Tree storage self,\n        uint256 start,\n        uint256 end\n    ) public returns (uint256 newRoot) {\n        if (start <= end) {\n            // current root\n            Node memory rootNode = self.nodes[self.root];\n            if (rootNode.value != 0) {\n                if (rootNode.value < start) {\n                    trimTreeHelper(self, start, end, rootNode.right);\n                    newRoot = self.root;\n                } else if (rootNode.value >= start && rootNode.value <= end) {\n                    newRoot = deleteNode(self, rootNode.value);\n                    if (newRoot != 0) {\n                        newRoot = trimTree(self, start, end);\n                    }\n                } else {\n                    trimTreeHelper(self, start, end, rootNode.left);\n                    newRoot = self.root;\n                }\n            }\n        }\n    }\n\n    function processExpiriesListNTrimTree(\n        Tree storage self,\n        uint256 start,\n        uint256 end\n    ) public {\n        if (self.root != 0) {\n            //must have a tree\n            delete self.futureExpiries[self.root];\n            self.futureExpiries[self.root].push(end);\n            if (self.root == self.rootLast) {\n                delete self.rootToList[self.root];\n            }\n            returnListHelperEx(\n                self,\n                start,\n                end,\n                self.root,\n                end + TIME_EXTENSION\n            );\n            self.rootLast = self.root;\n            trimTree(self, start, end);\n        }\n    }\n\n    function getExpiriesList(\n        Tree storage self\n    ) public view returns (uint256[] storage) {\n        return self.rootToList[self.rootLast];\n    }\n\n    function getFutureExpiriesList(\n        Tree storage self\n    ) public view returns (uint256[] storage) {\n        return self.futureExpiries[self.rootLast];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMathUD60x18.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\nimport \"./PRBMath.sol\";\n\n/// @title PRBMathUD60x18\n/// @author Paul Razvan Berg\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\n/// maximum values permitted by the Solidity type uint256.\nlibrary PRBMathUD60x18 {\n    /// @dev Half the SCALE number.\n    uint256 internal constant HALF_SCALE = 5e17;\n\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\n    uint256 internal constant LOG2_E = 1_442695040888963407;\n\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\n\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\n    uint256 internal constant MAX_WHOLE_UD60x18 =\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // The operations can never overflow.\n        unchecked {\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\n        }\n    }\n\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\n    ///\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    ///\n    /// Requirements:\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function ceil(uint256 x) internal pure returns (uint256 result) {\n        if (x > MAX_WHOLE_UD60x18) {\n            revert PRBMathUD60x18__CeilOverflow(x);\n        }\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"SCALE - remainder\" but faster.\n            let delta := sub(SCALE, remainder)\n\n            // Equivalent to \"x + delta * (remainder > 0 ? 1 : 0)\" but faster.\n            result := add(x, mul(delta, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\n    ///\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    ///\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDiv(x, SCALE, y);\n    }\n\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\n    function e() internal pure returns (uint256 result) {\n        result = 2_718281828459045235;\n    }\n\n    /// @notice Calculates the natural exponent of x.\n    ///\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    /// - x must be less than 133.084258667509499441.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp(uint256 x) internal pure returns (uint256 result) {\n        // Without this check, the value passed to \"exp2\" would be greater than 192.\n        if (x >= 133_084258667509499441) {\n            revert PRBMathUD60x18__ExpInputTooBig(x);\n        }\n\n        // Do the fixed-point multiplication inline to save gas.\n        unchecked {\n            uint256 doubleScaleProduct = x * LOG2_E;\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\n        }\n    }\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    ///\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\n    ///\n    /// Requirements:\n    /// - x must be 192 or less.\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\n        if (x >= 192e18) {\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\n        }\n\n        unchecked {\n            // Convert x to the 192.64-bit fixed-point format.\n            uint256 x192x64 = (x << 64) / SCALE;\n\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\n            result = PRBMath.exp2(x192x64);\n        }\n    }\n\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\n    function floor(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            // Equivalent to \"x % SCALE\" but faster.\n            let remainder := mod(x, SCALE)\n\n            // Equivalent to \"x - remainder * (remainder > 0 ? 1 : 0)\" but faster.\n            result := sub(x, mul(remainder, gt(remainder, 0)))\n        }\n    }\n\n    /// @notice Yields the excess beyond the floor of x.\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\n    function frac(uint256 x) internal pure returns (uint256 result) {\n        assembly {\n            result := mod(x, SCALE)\n        }\n    }\n\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\n    ///\n    /// @dev Requirements:\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\n    ///\n    /// @param x The basic integer to convert.\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__FromUintOverflow(x);\n            }\n            result = x * SCALE;\n        }\n    }\n\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\n    ///\n    /// @dev Requirements:\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\n    ///\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        unchecked {\n            // Checking for overflow this way is faster than letting Solidity do it.\n            uint256 xy = x * y;\n            if (xy / x != y) {\n                revert PRBMathUD60x18__GmOverflow(x, y);\n            }\n\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\n            // during multiplication. See the comments within the \"sqrt\" function.\n            result = PRBMath.sqrt(xy);\n        }\n    }\n\n    /// @notice Calculates 1 / x, rounding toward zero.\n    ///\n    /// @dev Requirements:\n    /// - x cannot be zero.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\n    function inv(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // 1e36 is SCALE * SCALE.\n            result = 1e36 / x;\n        }\n    }\n\n    /// @notice Calculates the natural logarithm of x.\n    ///\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\n    function ln(uint256 x) internal pure returns (uint256 result) {\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\n        // can return is 196205294292027477728.\n        unchecked {\n            result = (log2(x) * SCALE) / LOG2_E;\n        }\n    }\n\n    /// @notice Calculates the common logarithm of x.\n    ///\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\n    ///\n    /// Requirements:\n    /// - All from \"log2\".\n    ///\n    /// Caveats:\n    /// - All from \"log2\".\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log10(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n\n        // Note that the \"mul\" in this block is the assembly multiplication operation, not the \"mul\" function defined\n        // in this contract.\n        // prettier-ignore\n        assembly {\n            switch x\n            case 1 { result := mul(SCALE, sub(0, 18)) }\n            case 10 { result := mul(SCALE, sub(1, 18)) }\n            case 100 { result := mul(SCALE, sub(2, 18)) }\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\n            case 1000000000000000000 { result := 0 }\n            case 10000000000000000000 { result := SCALE }\n            case 100000000000000000000 { result := mul(SCALE, 2) }\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\n            default {\n                result := MAX_UD60x18\n            }\n        }\n\n        if (result == MAX_UD60x18) {\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\n            unchecked {\n                result = (log2(x) * SCALE) / 3_321928094887362347;\n            }\n        }\n    }\n\n    /// @notice Calculates the binary logarithm of x.\n    ///\n    /// @dev Based on the iterative approximation algorithm.\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n    ///\n    /// Requirements:\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\n    ///\n    /// Caveats:\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\n    function log2(uint256 x) internal pure returns (uint256 result) {\n        if (x < SCALE) {\n            revert PRBMathUD60x18__LogInputTooSmall(x);\n        }\n        unchecked {\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\n\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\n            // because n is maximum 255 and SCALE is 1e18.\n            result = n * SCALE;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y == SCALE) {\n                return result;\n            }\n\n            // Calculate the fractional part via the iterative approximation.\n            // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\n                y = (y * y) / SCALE;\n\n                // Is y^2 > 2 and so in the range [2,4)?\n                if (y >= 2 * SCALE) {\n                    // Add the 2^(-m) factor to the logarithm.\n                    result += delta;\n\n                    // Corresponds to z/2 on Wikipedia.\n                    y >>= 1;\n                }\n            }\n        }\n    }\n\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\n    /// fixed-point number.\n    /// @dev See the documentation for the \"PRBMath.mulDivFixedPoint\" function.\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        result = PRBMath.mulDivFixedPoint(x, y);\n    }\n\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\n    function pi() internal pure returns (uint256 result) {\n        result = 3_141592653589793238;\n    }\n\n    /// @notice Raises x to the power of y.\n    ///\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\n    ///\n    /// Requirements:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    ///\n    /// Caveats:\n    /// - All from \"exp2\", \"log2\" and \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        if (x == 0) {\n            result = y == 0 ? SCALE : uint256(0);\n        } else {\n            result = exp2(mul(log2(x), y));\n        }\n    }\n\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\n    /// famous algorithm \"exponentiation by squaring\".\n    ///\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\n    ///\n    /// Requirements:\n    /// - The result must fit within MAX_UD60x18.\n    ///\n    /// Caveats:\n    /// - All from \"mul\".\n    /// - Assumes 0^0 is 1.\n    ///\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The exponent as an uint256.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        // Calculate the first iteration of the loop in advance.\n        result = y & 1 > 0 ? x : SCALE;\n\n        // Equivalent to \"for(y /= 2; y > 0; y /= 2)\" but faster.\n        for (y >>= 1; y > 0; y >>= 1) {\n            x = PRBMath.mulDivFixedPoint(x, x);\n\n            // Equivalent to \"y % 2 == 1\" but faster.\n            if (y & 1 > 0) {\n                result = PRBMath.mulDivFixedPoint(result, x);\n            }\n        }\n    }\n\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\n    function scale() internal pure returns (uint256 result) {\n        result = SCALE;\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Requirements:\n    /// - x must be less than MAX_UD60x18 / SCALE.\n    ///\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            if (x > MAX_UD60x18 / SCALE) {\n                revert PRBMathUD60x18__SqrtOverflow(x);\n            }\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\n            result = PRBMath.sqrt(x * SCALE);\n        }\n    }\n\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\n    /// @return result The same number in basic integer form.\n    function toUint(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            result = x / SCALE;\n        }\n    }\n}\n"
    },
    "prb-math/contracts/PRBMath.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity >=0.8.4;\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\n\n/// @notice Emitted when the result overflows uint256.\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\n\n/// @notice Emitted when one of the inputs is type(int256).min.\nerror PRBMath__MulDivSignedInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows int256.\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is MIN_SD59x18.\nerror PRBMathSD59x18__AbsInputTooSmall();\n\n/// @notice Emitted when ceiling a number overflows SD59x18.\nerror PRBMathSD59x18__CeilOverflow(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__DivInputTooSmall();\n\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\n\n/// @notice Emitted when flooring a number underflows SD59x18.\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\n\n/// @notice Emitted when the product of the inputs is negative.\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\n\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\n\n/// @notice Emitted when the input is less than or equal to zero.\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\n\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\nerror PRBMathSD59x18__MulInputTooSmall();\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\n\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\n\n/// @notice Emitted when the input is negative.\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\n\n/// @notice Emitted when the calculating the square root overflows SD59x18.\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\n\n/// @notice Emitted when addition overflows UD60x18.\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when ceiling a number overflows UD60x18.\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\n\n/// @notice Emitted when the input is greater than 133.084258667509499441.\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\n\n/// @notice Emitted when the input is greater than 192.\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\n\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\n\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\n\n/// @notice Emitted when the input is less than 1.\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\n\n/// @notice Emitted when the calculating the square root overflows UD60x18.\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\n\n/// @notice Emitted when subtraction underflows UD60x18.\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\n\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\nlibrary PRBMath {\n    /// STRUCTS ///\n\n    struct SD59x18 {\n        int256 value;\n    }\n\n    struct UD60x18 {\n        uint256 value;\n    }\n\n    /// STORAGE ///\n\n    /// @dev How many trailing decimals can be represented.\n    uint256 internal constant SCALE = 1e18;\n\n    /// @dev Largest power of two divisor of SCALE.\n    uint256 internal constant SCALE_LPOTD = 262144;\n\n    /// @dev SCALE inverted mod 2^256.\n    uint256 internal constant SCALE_INVERSE =\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n    /// FUNCTIONS ///\n\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\n    /// @dev Has to use 192.64-bit fixed-point numbers.\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function exp2(uint256 x) internal pure returns (uint256 result) {\n        unchecked {\n            // Start from 0.5 in the 192.64-bit fixed-point format.\n            result = 0x800000000000000000000000000000000000000000000000;\n\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n\n            // We're doing two things at the same time:\n            //\n            //   1. Multiply the result by 2^n + 1, where \"2^n\" is the integer part and the one is added to account for\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\n            //      rather than 192.\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\n            //\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \"ip\" is the integer part \"2^n\".\n            result *= SCALE;\n            result >>= (191 - (x >> 64));\n        }\n    }\n\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\n    /// @dev See the note on msb in the \"Find First Set\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\n    /// @param x The uint256 number for which to find the index of the most significant bit.\n    /// @return msb The index of the most significant bit as an uint256.\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        if (x >= 2**128) {\n            x >>= 128;\n            msb += 128;\n        }\n        if (x >= 2**64) {\n            x >>= 64;\n            msb += 64;\n        }\n        if (x >= 2**32) {\n            x >>= 32;\n            msb += 32;\n        }\n        if (x >= 2**16) {\n            x >>= 16;\n            msb += 16;\n        }\n        if (x >= 2**8) {\n            x >>= 8;\n            msb += 8;\n        }\n        if (x >= 2**4) {\n            x >>= 4;\n            msb += 4;\n        }\n        if (x >= 2**2) {\n            x >>= 2;\n            msb += 2;\n        }\n        if (x >= 2**1) {\n            // No need to shift x any more.\n            msb += 1;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n    ///\n    /// Requirements:\n    /// - The denominator cannot be zero.\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The multiplicand as an uint256.\n    /// @param y The multiplier as an uint256.\n    /// @param denominator The divisor as an uint256.\n    /// @return result The result as an uint256.\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division.\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\n        if (prod1 >= denominator) {\n            revert PRBMath__MulDivOverflow(prod1, denominator);\n        }\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0].\n        uint256 remainder;\n        assembly {\n            // Compute remainder using mulmod.\n            remainder := mulmod(x, y, denominator)\n\n            // Subtract 256 bit number from 512 bit number.\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n        // See https://cs.stackexchange.com/q/138556/92363.\n        unchecked {\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷1e18) with full precision.\n    ///\n    /// @dev Variant of \"mulDiv\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\n    /// being rounded to 1e-18.  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717.\n    ///\n    /// Requirements:\n    /// - The result must fit within uint256.\n    ///\n    /// Caveats:\n    /// - The body is purposely left uncommented; see the NatSpec comments in \"PRBMath.mulDiv\" to understand how this works.\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\n    ///     1. x * y = type(uint256).max * SCALE\n    ///     2. (x * y) % SCALE >= SCALE / 2\n    ///\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        if (prod1 >= SCALE) {\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\n        }\n\n        uint256 remainder;\n        uint256 roundUpUnit;\n        assembly {\n            remainder := mulmod(x, y, SCALE)\n            roundUpUnit := gt(remainder, 499999999999999999)\n        }\n\n        if (prod1 == 0) {\n            unchecked {\n                result = (prod0 / SCALE) + roundUpUnit;\n                return result;\n            }\n        }\n\n        assembly {\n            result := add(\n                mul(\n                    or(\n                        div(sub(prod0, remainder), SCALE_LPOTD),\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\n                    ),\n                    SCALE_INVERSE\n                ),\n                roundUpUnit\n            )\n        }\n    }\n\n    /// @notice Calculates floor(x*y÷denominator) with full precision.\n    ///\n    /// @dev An extension of \"mulDiv\" for signed numbers. Works by computing the signs and the absolute values separately.\n    ///\n    /// Requirements:\n    /// - None of the inputs can be type(int256).min.\n    /// - The result must fit within int256.\n    ///\n    /// @param x The multiplicand as an int256.\n    /// @param y The multiplier as an int256.\n    /// @param denominator The divisor as an int256.\n    /// @return result The result as an int256.\n    function mulDivSigned(\n        int256 x,\n        int256 y,\n        int256 denominator\n    ) internal pure returns (int256 result) {\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n            revert PRBMath__MulDivSignedInputTooSmall();\n        }\n\n        // Get hold of the absolute values of x, y and the denominator.\n        uint256 ax;\n        uint256 ay;\n        uint256 ad;\n        unchecked {\n            ax = x < 0 ? uint256(-x) : uint256(x);\n            ay = y < 0 ? uint256(-y) : uint256(y);\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n        }\n\n        // Compute the absolute value of (x*y)÷denominator. The result must fit within int256.\n        uint256 rAbs = mulDiv(ax, ay, ad);\n        if (rAbs > uint256(type(int256).max)) {\n            revert PRBMath__MulDivSignedOverflow(rAbs);\n        }\n\n        // Get the signs of x, y and the denominator.\n        uint256 sx;\n        uint256 sy;\n        uint256 sd;\n        assembly {\n            sx := sgt(x, sub(0, 1))\n            sy := sgt(y, sub(0, 1))\n            sd := sgt(denominator, sub(0, 1))\n        }\n\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\n        // If yes, the result should be negative.\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\n    }\n\n    /// @notice Calculates the square root of x, rounding down.\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n    ///\n    /// Caveats:\n    /// - This function does not work with fixed-point numbers.\n    ///\n    /// @param x The uint256 number for which to calculate the square root.\n    /// @return result The result as an uint256.\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        if (x == 0) {\n            return 0;\n        }\n\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\n        uint256 xAux = uint256(x);\n        result = 1;\n        if (xAux >= 0x100000000000000000000000000000000) {\n            xAux >>= 128;\n            result <<= 64;\n        }\n        if (xAux >= 0x10000000000000000) {\n            xAux >>= 64;\n            result <<= 32;\n        }\n        if (xAux >= 0x100000000) {\n            xAux >>= 32;\n            result <<= 16;\n        }\n        if (xAux >= 0x10000) {\n            xAux >>= 16;\n            result <<= 8;\n        }\n        if (xAux >= 0x100) {\n            xAux >>= 8;\n            result <<= 4;\n        }\n        if (xAux >= 0x10) {\n            xAux >>= 4;\n            result <<= 2;\n        }\n        if (xAux >= 0x8) {\n            result <<= 1;\n        }\n\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\n        unchecked {\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1;\n            result = (result + x / result) >> 1; // Seven iterations should be enough\n            uint256 roundedDownResult = x / result;\n            return result >= roundedDownResult ? roundedDownResult : result;\n        }\n    }\n}\n"
    },
    "contracts/Pair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// Inspired by https://www.paradigm.xyz/2021/07/twamm\n// https://github.com/para-dave/twamm\n// FrankieIsLost MVP code implementation: https://github.com/FrankieIsLost/TWAMM\n\npragma solidity ^0.8.9;\n\nimport \"./interfaces/IPair.sol\";\nimport \"./interfaces/IFactory.sol\";\nimport \"./libraries/LongTermOrders.sol\";\nimport \"./libraries/BinarySearchTree.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\";\nimport \"prb-math/contracts/PRBMathUD60x18.sol\";\n\ncontract Pair is IPair, ERC20, ReentrancyGuard {\n    using LongTermOrdersLib for LongTermOrdersLib.LongTermOrders;\n    using BinarySearchTreeLib for BinarySearchTreeLib.Tree;\n    using SafeERC20 for IERC20;\n    using PRBMathUD60x18 for uint256;\n\n    address public override factory;\n    address public override tokenA;\n    address public override tokenB;\n    address private twamm;\n    uint256 public override rootKLast;\n\n    ///@notice fee for LP providers, 4 decimal places, i.e. 30 = 0.3%\n    uint256 public constant LP_FEE = 30;\n\n    ///@notice interval between blocks that are eligible for order expiry\n    uint256 public constant orderBlockInterval = 5;\n\n    ///@notice map token addresses to current amm reserves\n    mapping(address => uint256) public override reserveMap;\n\n    ///@notice data structure to handle long term orders\n    LongTermOrdersLib.LongTermOrders internal longTermOrders;\n\n    constructor(\n        address _tokenA,\n        address _tokenB,\n        address _twamm\n    ) ERC20(\"Pulsar-LP\", \"PUL-LP\") {\n        factory = msg.sender;\n        tokenA = _tokenA;\n        tokenB = _tokenB;\n        twamm = _twamm;\n        longTermOrders.initialize(\n            tokenA,\n            tokenB,\n            twamm,\n            block.number,\n            orderBlockInterval\n        );\n    }\n\n    ///@notice pair contract caller check\n    modifier checkCaller() {\n        require(msg.sender == twamm, \"Invalid Caller\");\n        _;\n    }\n\n    ///@notice get tokenA reserves\n    function tokenAReserves() public view override returns (uint256) {\n        return reserveMap[tokenA];\n    }\n\n    ///@notice get tokenB reserves\n    function tokenBReserves() public view override returns (uint256) {\n        return reserveMap[tokenB];\n    }\n\n    ///@notice get LP total supply\n    function getTotalSupply() public view override returns (uint256) {\n        return totalSupply();\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/(feeArg+1)th of the growth in sqrt(k)\n    function mintFee(\n        uint256 reserveA,\n        uint256 reserveB\n    ) private returns (bool feeOn) {\n        uint32 feeArg = IFactory(factory).feeArg();\n        address feeTo = IFactory(factory).feeTo();\n        feeOn = feeTo != address(0);\n\n        if (feeOn) {\n            if (rootKLast != 0) {\n                uint256 rootK = reserveA\n                    .fromUint()\n                    .sqrt()\n                    .mul(reserveB.fromUint().sqrt())\n                    .toUint();\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply() * (rootK - rootKLast);\n                    uint256 denominator = rootK * feeArg + rootKLast;\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (rootKLast != 0) {\n            rootKLast = 0;\n        }\n    }\n\n    ///@notice provide initial liquidity to the amm. This sets the relative price between tokens\n    function provideInitialLiquidity(\n        address to,\n        uint256 amountA,\n        uint256 amountB\n    )\n        external\n        override\n        checkCaller\n        nonReentrant\n        returns (uint256 lpTokenAmount)\n    {\n        require(amountA > 0 && amountB > 0, \"Invalid Amount\");\n        require(totalSupply() == 0, \"Liquidity Has Already Been Provided\");\n\n        reserveMap[tokenA] = amountA;\n        reserveMap[tokenB] = amountB;\n\n        //initial LP amount is the geometric mean of supplied tokens\n        lpTokenAmount = amountA\n            .fromUint()\n            .sqrt()\n            .mul(amountB.fromUint().sqrt())\n            .toUint();\n\n        bool feeOn = mintFee(0, 0);\n        _mint(to, lpTokenAmount);\n\n        if (feeOn) rootKLast = lpTokenAmount;\n        emit InitialLiquidityProvided(to, lpTokenAmount, amountA, amountB);\n    }\n\n    ///@notice provide liquidity to the AMM\n    ///@param lpTokenAmount number of lp tokens to mint with new liquidity\n    function provideLiquidity(\n        address to,\n        uint256 lpTokenAmount\n    )\n        external\n        override\n        checkCaller\n        nonReentrant\n        returns (uint256 amountAIn, uint256 amountBIn)\n    {\n        //execute virtual orders\n        longTermOrders.executeVirtualOrdersUntilSpecifiedBlock(\n            reserveMap,\n            block.number\n        );\n\n        require(lpTokenAmount > 0, \"Invalid Amount\");\n        require(totalSupply() != 0, \"No Liquidity Has Been Provided Yet\");\n\n        uint256 reserveA = reserveMap[tokenA];\n        uint256 reserveB = reserveMap[tokenB];\n\n        //the ratio between the number of underlying tokens and the number of lp tokens must remain invariant after mint\n        amountAIn = (lpTokenAmount * reserveA) / totalSupply();\n        amountBIn = (lpTokenAmount * reserveB) / totalSupply();\n\n        reserveMap[tokenA] += amountAIn;\n        reserveMap[tokenB] += amountBIn;\n\n        bool feeOn = mintFee(reserveA, reserveB);\n        _mint(to, lpTokenAmount);\n\n        if (feeOn)\n            rootKLast = reserveMap[tokenA]\n                .fromUint()\n                .sqrt()\n                .mul(reserveMap[tokenB].fromUint().sqrt())\n                .toUint();\n        emit LiquidityProvided(to, lpTokenAmount, amountAIn, amountBIn);\n    }\n\n    ///@notice remove liquidity to the AMM\n    ///@param lpTokenAmount number of lp tokens to burn\n    function removeLiquidity(\n        address to,\n        uint256 lpTokenAmount\n    )\n        external\n        override\n        checkCaller\n        nonReentrant\n        returns (uint256 amountAOut, uint256 amountBOut)\n    {\n        //execute virtual orders\n        longTermOrders.executeVirtualOrdersUntilSpecifiedBlock(\n            reserveMap,\n            block.number\n        );\n\n        require(lpTokenAmount > 0, \"Invalid Amount\");\n        require(\n            lpTokenAmount <= totalSupply(),\n            \"Not Enough Lp Tokens Available\"\n        );\n\n        uint256 reserveA = reserveMap[tokenA];\n        uint256 reserveB = reserveMap[tokenB];\n\n        //the ratio between the number of underlying tokens and the number of lp tokens must remain invariant after burn\n        amountAOut = (reserveA * lpTokenAmount) / totalSupply();\n        amountBOut = (reserveB * lpTokenAmount) / totalSupply();\n\n        reserveMap[tokenA] -= amountAOut;\n        reserveMap[tokenB] -= amountBOut;\n\n        bool feeOn = mintFee(reserveA, reserveB);\n        _burn(to, lpTokenAmount);\n\n        IERC20(tokenA).safeTransfer(twamm, amountAOut);\n        IERC20(tokenB).safeTransfer(twamm, amountBOut);\n\n        if (feeOn)\n            rootKLast = reserveMap[tokenA]\n                .fromUint()\n                .sqrt()\n                .mul(reserveMap[tokenB].fromUint().sqrt())\n                .toUint();\n        emit LiquidityRemoved(to, lpTokenAmount, amountAOut, amountBOut);\n    }\n\n    ///@notice instant swap a given amount of tokenA against embedded amm\n    function instantSwapFromAToB(\n        address sender,\n        uint256 amountAIn\n    ) external override checkCaller nonReentrant returns (uint256 amountBOut) {\n        require(\n            reserveMap[tokenA] > 0 && reserveMap[tokenB] > 0,\n            \"Insufficient Liquidity\"\n        );\n        require(amountAIn > 0, \"Invalid Amount\");\n        amountBOut = performInstantSwap(tokenA, tokenB, amountAIn);\n\n        emit InstantSwapAToB(sender, amountAIn, amountBOut);\n    }\n\n    ///@notice create a long term order to swap from tokenA\n    ///@param amountAIn total amount of token A to swap\n    ///@param numberOfBlockIntervals number of block intervals over which to execute long term order\n    function longTermSwapFromAToB(\n        address sender,\n        uint256 amountAIn,\n        uint256 numberOfBlockIntervals\n    ) external override checkCaller nonReentrant returns (uint256 orderId) {\n        require(\n            reserveMap[tokenA] > 0 && reserveMap[tokenB] > 0,\n            \"Insufficient Liquidity\"\n        );\n        require(amountAIn > 0, \"Invalid Amount\");\n        orderId = longTermOrders.longTermSwapFromAToB(\n            sender,\n            amountAIn,\n            numberOfBlockIntervals,\n            reserveMap\n        );\n\n        emit LongTermSwapAToB(sender, amountAIn, orderId);\n    }\n\n    ///@notice instant swap a given amount of tokenB against embedded amm\n    function instantSwapFromBToA(\n        address sender,\n        uint256 amountBIn\n    ) external override checkCaller nonReentrant returns (uint256 amountAOut) {\n        require(\n            reserveMap[tokenA] > 0 && reserveMap[tokenB] > 0,\n            \"Insufficient Liquidity\"\n        );\n        require(amountBIn > 0, \"Invalid Amount\");\n        amountAOut = performInstantSwap(tokenB, tokenA, amountBIn);\n\n        emit InstantSwapBToA(sender, amountBIn, amountAOut);\n    }\n\n    ///@notice create a long term order to swap from tokenB\n    ///@param amountBIn total amount of tokenB to swap\n    ///@param numberOfBlockIntervals number of block intervals over which to execute long term order\n    function longTermSwapFromBToA(\n        address sender,\n        uint256 amountBIn,\n        uint256 numberOfBlockIntervals\n    ) external override checkCaller nonReentrant returns (uint256 orderId) {\n        require(\n            reserveMap[tokenA] > 0 && reserveMap[tokenB] > 0,\n            \"Insufficient Liquidity\"\n        );\n        require(amountBIn > 0, \"Invalid Amount\");\n        orderId = longTermOrders.longTermSwapFromBToA(\n            sender,\n            amountBIn,\n            numberOfBlockIntervals,\n            reserveMap\n        );\n\n        emit LongTermSwapBToA(sender, amountBIn, orderId);\n    }\n\n    ///@notice stop the execution of a long term order\n    function cancelLongTermSwap(\n        address sender,\n        uint256 orderId\n    )\n        external\n        override\n        checkCaller\n        nonReentrant\n        returns (uint256 unsoldAmount, uint256 purchasedAmount)\n    {\n        (unsoldAmount, purchasedAmount) = longTermOrders.cancelLongTermSwap(\n            sender,\n            orderId,\n            reserveMap\n        );\n\n        emit CancelLongTermOrder(\n            sender,\n            orderId,\n            unsoldAmount,\n            purchasedAmount\n        );\n    }\n\n    ///@notice withdraw proceeds from a long term swap\n    function withdrawProceedsFromLongTermSwap(\n        address sender,\n        uint256 orderId\n    ) external override checkCaller nonReentrant returns (uint256 proceeds) {\n        proceeds = longTermOrders.withdrawProceedsFromLongTermSwap(\n            sender,\n            orderId,\n            reserveMap\n        );\n\n        emit WithdrawProceedsFromLongTermOrder(sender, orderId, proceeds);\n    }\n\n    ///@notice private function which implements instant swap logic\n    function performInstantSwap(\n        address from,\n        address to,\n        uint256 amountIn\n    ) private checkCaller returns (uint256 amountOutMinusFee) {\n        //execute virtual orders\n        longTermOrders.executeVirtualOrdersUntilSpecifiedBlock(\n            reserveMap,\n            block.number\n        );\n\n        uint256 reserveFrom = reserveMap[from];\n        uint256 reserveTo = reserveMap[to];\n        //constant product formula\n        uint256 amountOut = (reserveTo * amountIn) / (reserveFrom + amountIn);\n\n        //charge LP fee\n        amountOutMinusFee = (amountOut * (10000 - LP_FEE)) / 10000;\n\n        reserveMap[from] += amountIn;\n        reserveMap[to] -= amountOutMinusFee;\n\n        IERC20(to).safeTransfer(twamm, amountOutMinusFee);\n    }\n\n    ///@notice get pair orders total amount\n    function getPairOrdersAmount() external view override returns (uint256) {\n        return longTermOrders.orderId;\n    }\n\n    ///@notice get user order details\n    function getOrderDetails(\n        uint256 orderId\n    ) external view override returns (LongTermOrdersLib.Order memory) {\n        return longTermOrders.orderMap[orderId];\n    }\n\n    ///@notice returns the user order reward factor\n    function getOrderRewardFactor(\n        uint256 orderId\n    )\n        external\n        view\n        override\n        returns (\n            uint256 orderRewardFactorAtSubmission,\n            uint256 orderRewardFactorAtExpiring\n        )\n    {\n        address orderSellToken = longTermOrders.orderMap[orderId].sellTokenId;\n        uint256 orderExpirationBlock = longTermOrders\n            .orderMap[orderId]\n            .expirationBlock;\n        orderRewardFactorAtSubmission = longTermOrders\n            .OrderPoolMap[orderSellToken]\n            .rewardFactorAtSubmission[orderId];\n        orderRewardFactorAtExpiring = longTermOrders\n            .OrderPoolMap[orderSellToken]\n            .rewardFactorAtBlock[orderExpirationBlock];\n    }\n\n    ///@notice returns the current state of the twamm\n    function getTWAMMState()\n        external\n        view\n        override\n        returns (\n            uint256 lastVirtualOrderBlock,\n            uint256 tokenASalesRate,\n            uint256 tokenBSalesRate,\n            uint256 orderPoolARewardFactor,\n            uint256 orderPoolBRewardFactor\n        )\n    {\n        lastVirtualOrderBlock = longTermOrders.lastVirtualOrderBlock;\n        tokenASalesRate = longTermOrders.OrderPoolMap[tokenA].currentSalesRate;\n        tokenBSalesRate = longTermOrders.OrderPoolMap[tokenB].currentSalesRate;\n        orderPoolARewardFactor = longTermOrders\n            .OrderPoolMap[tokenA]\n            .rewardFactor;\n        orderPoolBRewardFactor = longTermOrders\n            .OrderPoolMap[tokenB]\n            .rewardFactor;\n    }\n\n    ///@notice returns cumulative sales rate of orders ending on this block number\n    function getTWAMMSalesRateEnding(\n        uint256 blockNumber\n    )\n        external\n        view\n        override\n        returns (\n            uint256 orderPoolASalesRateEnding,\n            uint256 orderPoolBSalesRateEnding\n        )\n    {\n        orderPoolASalesRateEnding = longTermOrders\n            .OrderPoolMap[tokenA]\n            .salesRateEndingPerBlock[blockNumber];\n        orderPoolBSalesRateEnding = longTermOrders\n            .OrderPoolMap[tokenB]\n            .salesRateEndingPerBlock[blockNumber];\n    }\n\n    ///@notice returns expiries list since last executed\n    function getExpiriesSinceLastExecuted()\n        external\n        view\n        override\n        returns (uint256[] memory)\n    {\n        return\n            longTermOrders\n                .expiryBlockTreeSinceLastExecution\n                .getFutureExpiriesList();\n    }\n\n    ///@notice get user orderIds\n    function userIdsCheck(\n        address userAddress\n    ) external view override returns (uint256[] memory) {\n        return longTermOrders.orderIdMap[userAddress];\n    }\n\n    ///@notice get user order status based on Ids\n    function orderIdStatusCheck(\n        uint256 orderId\n    ) external view override returns (bool) {\n        return longTermOrders.orderIdStatusMap[orderId];\n    }\n\n    ///@notice convenience function to execute virtual orders. Note that this already happens\n    ///before most interactions with the AMM\n    function executeVirtualOrders(uint256 blockNumber) public override {\n        longTermOrders.executeVirtualOrdersUntilSpecifiedBlock(\n            reserveMap,\n            blockNumber\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@rari-capital/solmate/src/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private reentrancyStatus = 1;\n\n    modifier nonReentrant() {\n        require(reentrancyStatus == 1, \"REENTRANCY\");\n\n        reentrancyStatus = 2;\n\n        _;\n\n        reentrancyStatus = 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "contracts/libraries/Library.sol": {
        "Library": "0x818bae51c49175d18acab069cb23b6c7ea62a619"
      },
      "contracts/libraries/TransferHelper.sol": {
        "TransferHelper": "0x44338b6e22bb6b1e97d218754b3d8d6a61f6a689"
      }
    }
  }
}}