{{
  "language": "Solidity",
  "sources": {
    "contracts/KudasaiMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n//  ___   _  __   __  ______   _______  _______  _______  ___  \r\n// |   | | ||  | |  ||      | |   _   ||       ||   _   ||   | \r\n// |   |_| ||  | |  ||  _    ||  |_|  ||  _____||  |_|  ||   | \r\n// |      _||  |_|  || | |   ||       || |_____ |       ||   | \r\n// |     |_ |       || |_|   ||       ||_____  ||       ||   | \r\n// |    _  ||       ||       ||   _   | _____| ||   _   ||   | \r\n// |___| |_||_______||______| |__| |__||_______||__| |__||___| \r\n//  __   __  ___   __    _  _______  _______  ______           \r\n// |  |_|  ||   | |  |  | ||       ||       ||    _ |          \r\n// |       ||   | |   |_| ||_     _||    ___||   | ||          \r\n// |       ||   | |       |  |   |  |   |___ |   |_||_         \r\n// |       ||   | |  _    |  |   |  |    ___||    __  |        \r\n// | ||_|| ||   | | | |   |  |   |  |   |___ |   |  | |        \r\n// |_|   |_||___| |_|  |__|  |___|  |_______||___|  |_|        \r\n\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface Kudasai {\r\n    function mintKudasai(address _to, uint256 _quantity) external;\r\n    function mintReserve(address _to, uint256[] memory _ids) external;\r\n}\r\ninterface Hidden {\r\n    function check(address _to, uint256 _quantity, bytes32 _code) external view returns (bool);\r\n}\r\n\r\ncontract KudasaiMinter is Ownable {\r\n    mapping(address => mapping(uint256 => uint256)) public kudasaiCounter;\r\n    uint256 public kantsuCounter;\r\n    mapping(uint256 => bool) public kudasaiHolderClaimed;\r\n    mapping(uint256 => bool) public ticketHolderClaimed;\r\n    uint256 private immutable _maxWalletPerToken;\r\n    address private immutable _onchainKudasai;\r\n    address private immutable _ticketNFT;\r\n    address private immutable _kudasaiNFT;\r\n    address private _hidden;\r\n    uint256 public proofRound;\r\n    bytes32 public kudasaiListMerkleRoot;\r\n    uint256 public mintCost = 0.1 ether;\r\n\r\n    constructor(uint256 maxWalletPerToken_, address onchainKudasai_, address kudasaiNFT_, address ticketNFT_, bytes32 kudasaiListMerkleRoot_) {\r\n        _maxWalletPerToken = maxWalletPerToken_;\r\n        _onchainKudasai = onchainKudasai_;\r\n        _kudasaiNFT = kudasaiNFT_;\r\n        _ticketNFT = ticketNFT_;\r\n        kudasaiListMerkleRoot = kudasaiListMerkleRoot_;\r\n    }\r\n\r\n    modifier validateKudasaiAddress(bytes32[] calldata _merkleProof) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n        require(MerkleProof.verify(_merkleProof, kudasaiListMerkleRoot, leaf), \"You are not a Kudasai list\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyKudasaiHolder(uint256[] memory _ids) {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            require(kudasaiHolderClaimed[_ids[i]] == false, \"Already claimed\");\r\n            require(IERC721(address(_onchainKudasai)).ownerOf(_ids[i]) == msg.sender, \"You do not have Kudasai NFTs\");\r\n            kudasaiHolderClaimed[_ids[i]] = true;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    modifier onlyTicketHolder(uint256[] memory _ids) {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            require(ticketHolderClaimed[_ids[i]] == false, \"Already claimed\");\r\n            require(IERC721(address(_ticketNFT)).ownerOf(_ids[i]) == msg.sender, \"You do not have Kudasai NFTs\");\r\n            ticketHolderClaimed[_ids[i]] = true;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isNotContract() {\r\n        require(tx.origin == msg.sender, \"Reentrancy Guard is watching\");\r\n        _;\r\n    }\r\n\r\n    function setKudasaiListMerkleRoot(bytes32 _merkleRoot, uint256 _round, uint256 _mintCost) external onlyOwner {\r\n        kudasaiListMerkleRoot = _merkleRoot;\r\n        mintCost = _mintCost;\r\n        proofRound = _round;\r\n    }\r\n\r\n    function setHidden(address _contract) external onlyOwner {\r\n        _hidden = _contract;\r\n    }\r\n\r\n    function refreshHidden() external onlyOwner {\r\n        _hidden = address(0);\r\n    }\r\n\r\n    function banbanban(uint256[] memory _ids) external onlyOwner {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            kudasaiHolderClaimed[_ids[i]] = true;\r\n        }\r\n    }\r\n\r\n    function agemasu(uint256[] memory _ids, uint256 _quantity) external onlyOwner {\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            address owner = IERC721(address(_onchainKudasai)).ownerOf(_ids[i]);\r\n            Kudasai(_kudasaiNFT).mintKudasai(owner, _quantity);\r\n        }\r\n    }\r\n\r\n    function kantsuEnable() view public returns(bool) {\r\n        if (kantsuCounter < 10) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function kantsu(uint256 _quantity, bytes32 _code) external payable isNotContract {\r\n        require(msg.value == mintCost * _quantity, \"Mint cost is insufficient\");\r\n        require(_hidden != address(0) && Hidden(_hidden).check(msg.sender, _quantity, _code), \"Your address is Blacklisted!\");\r\n        require(kudasaiCounter[msg.sender][proofRound] + _quantity <= _maxWalletPerToken, \"No More Kudasai\");\r\n        require(kantsuEnable(), \"No More Kantsu\");\r\n\r\n        kudasaiCounter[msg.sender][proofRound] += _quantity;\r\n        kantsuCounter++;\r\n        Kudasai(_kudasaiNFT).mintKudasai(msg.sender, _quantity);\r\n    }\r\n\r\n    function holderClaim(uint256[] memory _ids) external onlyKudasaiHolder(_ids) isNotContract {\r\n        Kudasai(_kudasaiNFT).mintReserve(msg.sender, _ids);\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            IERC721(address(_onchainKudasai)).safeTransferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), _ids[i]);\r\n        }\r\n    }\r\n\r\n    function ticketClaim(uint256[] memory _ids) external onlyTicketHolder(_ids) isNotContract {\r\n        Kudasai(_kudasaiNFT).mintKudasai(msg.sender, _ids.length);\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            IERC721(address(_ticketNFT)).safeTransferFrom(msg.sender, address(0x000000000000000000000000000000000000dEaD), _ids[i]);\r\n        }\r\n    }\r\n\r\n    function kudasai(uint256 _quantity, bytes32[] calldata _proof) external payable validateKudasaiAddress(_proof) isNotContract {\r\n        require(msg.value == mintCost * _quantity, \"Mint cost is insufficient\");\r\n        require(kudasaiCounter[msg.sender][proofRound] + _quantity <= _maxWalletPerToken, \"No More Kudasai\");\r\n\r\n        kudasaiCounter[msg.sender][proofRound] += _quantity;\r\n        Kudasai(_kudasaiNFT).mintKudasai(msg.sender, _quantity);\r\n    }\r\n\r\n    function ownerMint(uint256 _quantity) external onlyOwner {\r\n        Kudasai(_kudasaiNFT).mintKudasai(owner(), _quantity);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}