{{
  "language": "Solidity",
  "sources": {
    "contracts/EXZOsale.sol": {
      "content": "// File: contracts/WXZO.sol\n\n\n\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.4.2\n\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\n// Exzo, Wrapped XZO, Exzo Network and any affiliated abbreviations or names including but not limited to Exzo, WXZO, XZO, and so on are not in any form the sale of a security \n// or to be representing the form of a security or investment. It should not be viewed as a way to make profit or as an invesment of funds.\n// Exzo (XZO) is strictly for use within the Exzo Network ecosystem and is not an investment in a company or companies management.\n// Exzo (XZO) has managers but has no owner and is decentralized.\n// Anyone in unregulated countries or industries or reside in countries banned from the use of or purchase of cryptocurrencies are restricted from\n// purchasing Exzo(XZO). It is the users own duediligence to know if they are in a restricted territory or region and Exzo (XZO), Exzo Network, and any of their\n// affiliated names or abbreviations are not responsible for any unlawful actions or misrepresentations.\n// Exzo (XZO), Exzo Network, and any of their affiliated names or abbreviations or services are not responsible for any loss of funds or digital assets due to\n// any of it's services or technologies as they are published as is. \n// Whomever purchases Exzo (XZO) or any digital assets on the Exzo Network platform has undeniably agreed to these terms and conditions and cannot subject\n// Exzo Network, Exzo, XZO (or any affiliated name or abbreviation) to any wrong doings or unlawful practices.\n\n\n// This smart contract does NOT represent the sale of a security or shares in a company or ownership of a company or any form of investment and is not\n// to be viewed as such. There is no liability or expectations of profits or losses when purchasing Exzo (XZO) or its affiliated tokens Wrappeed Exzo (WXZO).\n// When purchasing Exzo (XZO) you fully and undeniably agree to the terms set forth that Exzo and any affiliated names, services, or abbreviations such as XZO, WXZO,\n// and Exzo Network but not limited to just those are not an investment of money, funds, or assets in a company, individual, management team. \n// Any participating party in purchasing Exzo (XZO) or Wrapped Exzo (XZO) also fully and undeniably agrees to all of the above terms and conditions.\n\n pragma solidity ^0.8.0;\n\n // CAUTION\n // This version of SafeMath should only be used with Solidity 0.8 or later,\n // because it relies on the compiler's built in overflow checks.\n\n /**\n  * @dev Wrappers over Solidity's arithmetic operations.\n  *\n  * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n  * now has built in overflow checking.\n  */\n library SafeMath {\n     /**\n      * @dev Returns the addition of two unsigned integers, with an overflow flag.\n      *\n      * _Available since v3.4._\n      */\n     function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n         unchecked {\n             uint256 c = a + b;\n             if (c < a) return (false, 0);\n             return (true, c);\n         }\n     }\n\n     /**\n      * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n      *\n      * _Available since v3.4._\n      */\n     function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n         unchecked {\n             if (b > a) return (false, 0);\n             return (true, a - b);\n         }\n     }\n\n     /**\n      * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n      *\n      * _Available since v3.4._\n      */\n     function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n         unchecked {\n             // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n             // benefit is lost if 'b' is also tested.\n             // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n             if (a == 0) return (true, 0);\n             uint256 c = a * b;\n             if (c / a != b) return (false, 0);\n             return (true, c);\n         }\n     }\n\n     /**\n      * @dev Returns the division of two unsigned integers, with a division by zero flag.\n      *\n      * _Available since v3.4._\n      */\n     function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n         unchecked {\n             if (b == 0) return (false, 0);\n             return (true, a / b);\n         }\n     }\n\n     /**\n      * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n      *\n      * _Available since v3.4._\n      */\n     function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n         unchecked {\n             if (b == 0) return (false, 0);\n             return (true, a % b);\n         }\n     }\n\n     /**\n      * @dev Returns the addition of two unsigned integers, reverting on\n      * overflow.\n      *\n      * Counterpart to Solidity's `+` operator.\n      *\n      * Requirements:\n      *\n      * - Addition cannot overflow.\n      */\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n         return a + b;\n     }\n\n     /**\n      * @dev Returns the subtraction of two unsigned integers, reverting on\n      * overflow (when the result is negative).\n      *\n      * Counterpart to Solidity's `-` operator.\n      *\n      * Requirements:\n      *\n      * - Subtraction cannot overflow.\n      */\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n         return a - b;\n     }\n\n     /**\n      * @dev Returns the multiplication of two unsigned integers, reverting on\n      * overflow.\n      *\n      * Counterpart to Solidity's `*` operator.\n      *\n      * Requirements:\n      *\n      * - Multiplication cannot overflow.\n      */\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n         return a * b;\n     }\n\n     /**\n      * @dev Returns the integer division of two unsigned integers, reverting on\n      * division by zero. The result is rounded towards zero.\n      *\n      * Counterpart to Solidity's `/` operator.\n      *\n      * Requirements:\n      *\n      * - The divisor cannot be zero.\n      */\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\n         return a / b;\n     }\n\n     /**\n      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n      * reverting when dividing by zero.\n      *\n      * Counterpart to Solidity's `%` operator. This function uses a `revert`\n      * opcode (which leaves remaining gas untouched) while Solidity uses an\n      * invalid opcode to revert (consuming all remaining gas).\n      *\n      * Requirements:\n      *\n      * - The divisor cannot be zero.\n      */\n     function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n         return a % b;\n     }\n\n     /**\n      * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n      * overflow (when the result is negative).\n      *\n      * CAUTION: This function is deprecated because it requires allocating memory for the error\n      * message unnecessarily. For custom revert reasons use {trySub}.\n      *\n      * Counterpart to Solidity's `-` operator.\n      *\n      * Requirements:\n      *\n      * - Subtraction cannot overflow.\n      */\n     function sub(\n         uint256 a,\n         uint256 b,\n         string memory errorMessage\n     ) internal pure returns (uint256) {\n         unchecked {\n             require(b <= a, errorMessage);\n             return a - b;\n         }\n     }\n\n     /**\n      * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n      * division by zero. The result is rounded towards zero.\n      *\n      * Counterpart to Solidity's `/` operator. Note: this function uses a\n      * `revert` opcode (which leaves remaining gas untouched) while Solidity\n      * uses an invalid opcode to revert (consuming all remaining gas).\n      *\n      * Requirements:\n      *\n      * - The divisor cannot be zero.\n      */\n     function div(\n         uint256 a,\n         uint256 b,\n         string memory errorMessage\n     ) internal pure returns (uint256) {\n         unchecked {\n             require(b > 0, errorMessage);\n             return a / b;\n         }\n     }\n\n     /**\n      * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n      * reverting with custom message when dividing by zero.\n      *\n      * CAUTION: This function is deprecated because it requires allocating memory for the error\n      * message unnecessarily. For custom revert reasons use {tryMod}.\n      *\n      * Counterpart to Solidity's `%` operator. This function uses a `revert`\n      * opcode (which leaves remaining gas untouched) while Solidity uses an\n      * invalid opcode to revert (consuming all remaining gas).\n      *\n      * Requirements:\n      *\n      * - The divisor cannot be zero.\n      */\n     function mod(\n         uint256 a,\n         uint256 b,\n         string memory errorMessage\n     ) internal pure returns (uint256) {\n         unchecked {\n             require(b > 0, errorMessage);\n             return a % b;\n         }\n     }\n }\n\n\n // File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\n pragma solidity ^0.8.0;\n\n /**\n  * @dev Interface of the ERC20 standard as defined in the EIP.\n  */\n interface IERC20 {\n     /**\n      * @dev Returns the amount of tokens in existence.\n      */\n     function totalSupply() external view returns (uint256);\n\n     /**\n      * @dev Returns the amount of tokens owned by `account`.\n      */\n     function balanceOf(address account) external view returns (uint256);\n\n     /**\n      * @dev Moves `amount` tokens from the caller's account to `recipient`.\n      *\n      * Returns a boolean value indicating whether the operation succeeded.\n      *\n      * Emits a {Transfer} event.\n      */\n     function transfer(address recipient, uint256 amount) external returns (bool);\n\n     /**\n      * @dev Returns the remaining number of tokens that `spender` will be\n      * allowed to spend on behalf of `owner` through {transferFrom}. This is\n      * zero by default.\n      *\n      * This value changes when {approve} or {transferFrom} are called.\n      */\n     function allowance(address owner, address spender) external view returns (uint256);\n\n     /**\n      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n      *\n      * Returns a boolean value indicating whether the operation succeeded.\n      *\n      * IMPORTANT: Beware that changing an allowance with this method brings the risk\n      * that someone may use both the old and the new allowance by unfortunate\n      * transaction ordering. One possible solution to mitigate this race\n      * condition is to first reduce the spender's allowance to 0 and set the\n      * desired value afterwards:\n      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n      *\n      * Emits an {Approval} event.\n      */\n     function approve(address spender, uint256 amount) external returns (bool);\n\n     /**\n      * @dev Moves `amount` tokens from `sender` to `recipient` using the\n      * allowance mechanism. `amount` is then deducted from the caller's\n      * allowance.\n      *\n      * Returns a boolean value indicating whether the operation succeeded.\n      *\n      * Emits a {Transfer} event.\n      */\n     function transferFrom(\n         address sender,\n         address recipient,\n         uint256 amount\n     ) external returns (bool);\n\n     /**\n      * @dev Emitted when `value` tokens are moved from one account (`from`) to\n      * another (`to`).\n      *\n      * Note that `value` may be zero.\n      */\n     event Transfer(address indexed from, address indexed to, uint256 value);\n\n     /**\n      * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n      * a call to {approve}. `value` is the new allowance.\n      */\n     event Approval(address indexed owner, address indexed spender, uint256 value);\n }\n\n\n // File @openzeppelin/contracts/utils/Context.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n pragma solidity ^0.8.0;\n\n /**\n  * @dev Provides information about the current execution context, including the\n  * sender of the transaction and its data. While these are generally available\n  * via msg.sender and msg.data, they should not be accessed in such a direct\n  * manner, since when dealing with meta-transactions the account sending and\n  * paying for execution may not be the actual sender (as far as an application\n  * is concerned).\n  *\n  * This contract is only required for intermediate, library-like contracts.\n  */\n abstract contract Context {\n     function _msgSender() internal view virtual returns (address) {\n         return msg.sender;\n     }\n\n     function _msgData() internal view virtual returns (bytes calldata) {\n         return msg.data;\n     }\n }\n\n\n // File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n pragma solidity ^0.8.0;\n\n /**\n  * @dev Contract module which provides a basic access control mechanism, where\n  * there is an account (an owner) that can be granted exclusive access to\n  * specific functions.\n  *\n  * By default, the owner account will be the one that deploys the contract. This\n  * can later be changed with {transferOwnership}.\n  *\n  * This module is used through inheritance. It will make available the modifier\n  * `onlyOwner`, which can be applied to your functions to restrict their use to\n  * the owner.\n  */\n abstract contract Ownable is Context {\n     address private _owner;\n\n     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n     /**\n      * @dev Initializes the contract setting the deployer as the initial owner.\n      */\n     constructor() {\n         _transferOwnership(_msgSender());\n     }\n\n     /**\n      * @dev Returns the address of the current owner.\n      */\n     function owner() public view virtual returns (address) {\n         return _owner;\n     }\n\n     /**\n      * @dev Throws if called by any account other than the owner.\n      */\n     modifier onlyOwner() {\n         require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n         _;\n     }\n\n     /**\n      * @dev Leaves the contract without owner. It will not be possible to call\n      * `onlyOwner` functions anymore. Can only be called by the current owner.\n      *\n      * NOTE: Renouncing ownership will leave the contract without an owner,\n      * thereby removing any functionality that is only available to the owner.\n      */\n     function renounceOwnership() public virtual onlyOwner {\n         _transferOwnership(address(0));\n     }\n\n     /**\n      * @dev Transfers ownership of the contract to a new account (`newOwner`).\n      * Can only be called by the current owner.\n      */\n     function transferOwnership(address newOwner) public virtual onlyOwner {\n         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n         _transferOwnership(newOwner);\n     }\n\n     /**\n      * @dev Transfers ownership of the contract to a new account (`newOwner`).\n      * Internal function without access restriction.\n      */\n     function _transferOwnership(address newOwner) internal virtual {\n         address oldOwner = _owner;\n         _owner = newOwner;\n         emit OwnershipTransferred(oldOwner, newOwner);\n     }\n }\n\n\n // File contracts/OwnerWithdrawable.sol\n\n pragma solidity ^0.8.0;\n\n\n\n contract OwnerWithdrawable is Ownable {\n     using SafeMath for uint256;\n\n     receive() external payable {}\n\n     fallback() external payable {}\n\n     function withdraw(address token, uint256 amt) public onlyOwner {\n         IERC20(token).transfer(msg.sender, amt);\n     }\n\n     function withdrawAll(address token) public onlyOwner {\n         uint256 amt = IERC20(token).balanceOf(address(this));\n         withdraw(token, amt);\n     }\n\n     function withdrawCurrency(uint256 amt) public onlyOwner {\n         payable(msg.sender).transfer(amt);\n     }\n\n     // function deposit(address token, uint256 amt) public onlyOwner {\n     //     uint256 allowance = IERC20(token).allowance(msg.sender, address(this));\n     //     require(allowance >= amt, \"Check the token allowance\");\n     //     IERC20(token).transferFrom(owner(), address(this), amt);\n     // }\n }\n\n\n // File @openzeppelin/contracts/utils/Address.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\n pragma solidity ^0.8.0;\n\n /**\n  * @dev Collection of functions related to the address type\n  */\n library Address {\n     /**\n      * @dev Returns true if `account` is a contract.\n      *\n      * [IMPORTANT]\n      * ====\n      * It is unsafe to assume that an address for which this function returns\n      * false is an externally-owned account (EOA) and not a contract.\n      *\n      * Among others, `isContract` will return false for the following\n      * types of addresses:\n      *\n      *  - an externally-owned account\n      *  - a contract in construction\n      *  - an address where a contract will be created\n      *  - an address where a contract lived, but was destroyed\n      * ====\n      */\n     function isContract(address account) internal view returns (bool) {\n         // This method relies on extcodesize, which returns 0 for contracts in\n         // construction, since the code is only stored at the end of the\n         // constructor execution.\n\n         uint256 size;\n         assembly {\n             size := extcodesize(account)\n         }\n         return size > 0;\n     }\n\n     /**\n      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n      * `recipient`, forwarding all available gas and reverting on errors.\n      *\n      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n      * of certain opcodes, possibly making contracts go over the 2300 gas limit\n      * imposed by `transfer`, making them unable to receive funds via\n      * `transfer`. {sendValue} removes this limitation.\n      *\n      * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n      *\n      * IMPORTANT: because control is transferred to `recipient`, care must be\n      * taken to not create reentrancy vulnerabilities. Consider using\n      * {ReentrancyGuard} or the\n      * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n      */\n     function sendValue(address payable recipient, uint256 amount) internal {\n         require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n         (bool success, ) = recipient.call{value: amount}(\"\");\n         require(success, \"Address: unable to send value, recipient may have reverted\");\n     }\n\n     /**\n      * @dev Performs a Solidity function call using a low level `call`. A\n      * plain `call` is an unsafe replacement for a function call: use this\n      * function instead.\n      *\n      * If `target` reverts with a revert reason, it is bubbled up by this\n      * function (like regular Solidity function calls).\n      *\n      * Returns the raw returned data. To convert to the expected return value,\n      * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n      *\n      * Requirements:\n      *\n      * - `target` must be a contract.\n      * - calling `target` with `data` must not revert.\n      *\n      * _Available since v3.1._\n      */\n     function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n         return functionCall(target, data, \"Address: low-level call failed\");\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n      * `errorMessage` as a fallback revert reason when `target` reverts.\n      *\n      * _Available since v3.1._\n      */\n     function functionCall(\n         address target,\n         bytes memory data,\n         string memory errorMessage\n     ) internal returns (bytes memory) {\n         return functionCallWithValue(target, data, 0, errorMessage);\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n      * but also transferring `value` wei to `target`.\n      *\n      * Requirements:\n      *\n      * - the calling contract must have an ETH balance of at least `value`.\n      * - the called Solidity function must be `payable`.\n      *\n      * _Available since v3.1._\n      */\n     function functionCallWithValue(\n         address target,\n         bytes memory data,\n         uint256 value\n     ) internal returns (bytes memory) {\n         return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n      * with `errorMessage` as a fallback revert reason when `target` reverts.\n      *\n      * _Available since v3.1._\n      */\n     function functionCallWithValue(\n         address target,\n         bytes memory data,\n         uint256 value,\n         string memory errorMessage\n     ) internal returns (bytes memory) {\n         require(address(this).balance >= value, \"Address: insufficient balance for call\");\n         require(isContract(target), \"Address: call to non-contract\");\n\n         (bool success, bytes memory returndata) = target.call{value: value}(data);\n         return verifyCallResult(success, returndata, errorMessage);\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n      * but performing a static call.\n      *\n      * _Available since v3.3._\n      */\n     function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n         return functionStaticCall(target, data, \"Address: low-level static call failed\");\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n      * but performing a static call.\n      *\n      * _Available since v3.3._\n      */\n     function functionStaticCall(\n         address target,\n         bytes memory data,\n         string memory errorMessage\n     ) internal view returns (bytes memory) {\n         require(isContract(target), \"Address: static call to non-contract\");\n\n         (bool success, bytes memory returndata) = target.staticcall(data);\n         return verifyCallResult(success, returndata, errorMessage);\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n      * but performing a delegate call.\n      *\n      * _Available since v3.4._\n      */\n     function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n         return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n     }\n\n     /**\n      * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n      * but performing a delegate call.\n      *\n      * _Available since v3.4._\n      */\n     function functionDelegateCall(\n         address target,\n         bytes memory data,\n         string memory errorMessage\n     ) internal returns (bytes memory) {\n         require(isContract(target), \"Address: delegate call to non-contract\");\n\n         (bool success, bytes memory returndata) = target.delegatecall(data);\n         return verifyCallResult(success, returndata, errorMessage);\n     }\n\n     /**\n      * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n      * revert reason using the provided one.\n      *\n      * _Available since v4.3._\n      */\n     function verifyCallResult(\n         bool success,\n         bytes memory returndata,\n         string memory errorMessage\n     ) internal pure returns (bytes memory) {\n         if (success) {\n             return returndata;\n         } else {\n             // Look for revert reason and bubble it up if present\n             if (returndata.length > 0) {\n                 // The easiest way to bubble the revert reason is using memory via assembly\n\n                 assembly {\n                     let returndata_size := mload(returndata)\n                     revert(add(32, returndata), returndata_size)\n                 }\n             } else {\n                 revert(errorMessage);\n             }\n         }\n     }\n }\n\n\n // File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n pragma solidity ^0.8.0;\n\n\n /**\n  * @title SafeERC20\n  * @dev Wrappers around ERC20 operations that throw on failure (when the token\n  * contract returns false). Tokens that return no value (and instead revert or\n  * throw on failure) are also supported, non-reverting calls are assumed to be\n  * successful.\n  * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n  * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n  */\n library SafeERC20 {\n     using Address for address;\n\n     function safeTransfer(\n         IERC20 token,\n         address to,\n         uint256 value\n     ) internal {\n         _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n     }\n\n     function safeTransferFrom(\n         IERC20 token,\n         address from,\n         address to,\n         uint256 value\n     ) internal {\n         _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n     }\n\n     /**\n      * @dev Deprecated. This function has issues similar to the ones found in\n      * {IERC20-approve}, and its usage is discouraged.\n      *\n      * Whenever possible, use {safeIncreaseAllowance} and\n      * {safeDecreaseAllowance} instead.\n      */\n     function safeApprove(\n         IERC20 token,\n         address spender,\n         uint256 value\n     ) internal {\n         // safeApprove should only be called when setting an initial allowance,\n         // or when resetting it to zero. To increase and decrease it, use\n         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n         require(\n             (value == 0) || (token.allowance(address(this), spender) == 0),\n             \"SafeERC20: approve from non-zero to non-zero allowance\"\n         );\n         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n     }\n\n     function safeIncreaseAllowance(\n         IERC20 token,\n         address spender,\n         uint256 value\n     ) internal {\n         uint256 newAllowance = token.allowance(address(this), spender) + value;\n         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n     }\n\n     function safeDecreaseAllowance(\n         IERC20 token,\n         address spender,\n         uint256 value\n     ) internal {\n         unchecked {\n             uint256 oldAllowance = token.allowance(address(this), spender);\n             require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n             uint256 newAllowance = oldAllowance - value;\n             _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n         }\n     }\n\n     /**\n      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n      * on the return value: the return value is optional (but if data is returned, it must not be false).\n      * @param token The token targeted by the call.\n      * @param data The call data (encoded using abi.encode or one of its variants).\n      */\n     function _callOptionalReturn(IERC20 token, bytes memory data) private {\n         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n         // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n         // the target address contains contract code and also asserts for success in the low-level call.\n\n         bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n         if (returndata.length > 0) {\n             // Return data is optional\n             require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n         }\n     }\n }\n\n\n // File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.2\n\n // OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\n pragma solidity ^0.8.0;\n\n /**\n  * @dev Interface for the optional metadata functions from the ERC20 standard.\n  *\n  * _Available since v4.1._\n  */\n interface IERC20Metadata is IERC20 {\n     /**\n      * @dev Returns the name of the token.\n      */\n     function name() external view returns (string memory);\n\n     /**\n      * @dev Returns the symbol of the token.\n      */\n     function symbol() external view returns (string memory);\n\n     /**\n      * @dev Returns the decimals places of the token.\n      */\n     function decimals() external view returns (uint8);\n }\n\n\n // File contracts/IRouter.sol\n\n pragma solidity ^0.8.0;\n\n interface IUniswapV2Router01 {\n     function factory() external pure returns (address);\n\n     function WETH() external pure returns (address);\n\n     function addLiquidity(\n         address tokenA,\n         address tokenB,\n         uint256 amountADesired,\n         uint256 amountBDesired,\n         uint256 amountAMin,\n         uint256 amountBMin,\n         address to,\n         uint256 deadline\n     )\n         external\n         returns (\n             uint256 amountA,\n             uint256 amountB,\n             uint256 liquidity\n         );\n\n     function addLiquidityETH(\n         address token,\n         uint256 amountTokenDesired,\n         uint256 amountTokenMin,\n         uint256 amountETHMin,\n         address to,\n         uint256 deadline\n     )\n         external\n         payable\n         returns (\n             uint256 amountToken,\n             uint256 amountETH,\n             uint256 liquidity\n         );\n\n     function removeLiquidity(\n         address tokenA,\n         address tokenB,\n         uint256 liquidity,\n         uint256 amountAMin,\n         uint256 amountBMin,\n         address to,\n         uint256 deadline\n     ) external returns (uint256 amountA, uint256 amountB);\n\n     function removeLiquidityETH(\n         address token,\n         uint256 liquidity,\n         uint256 amountTokenMin,\n         uint256 amountETHMin,\n         address to,\n         uint256 deadline\n     ) external returns (uint256 amountToken, uint256 amountETH);\n\n     function removeLiquidityWithPermit(\n         address tokenA,\n         address tokenB,\n         uint256 liquidity,\n         uint256 amountAMin,\n         uint256 amountBMin,\n         address to,\n         uint256 deadline,\n         bool approveMax,\n         uint8 v,\n         bytes32 r,\n         bytes32 s\n     ) external returns (uint256 amountA, uint256 amountB);\n\n     function removeLiquidityETHWithPermit(\n         address token,\n         uint256 liquidity,\n         uint256 amountTokenMin,\n         uint256 amountETHMin,\n         address to,\n         uint256 deadline,\n         bool approveMax,\n         uint8 v,\n         bytes32 r,\n         bytes32 s\n     ) external returns (uint256 amountToken, uint256 amountETH);\n\n     function swapExactTokensForTokens(\n         uint256 amountIn,\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external returns (uint256[] memory amounts);\n\n     function swapTokensForExactTokens(\n         uint256 amountOut,\n         uint256 amountInMax,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external returns (uint256[] memory amounts);\n\n     function swapExactETHForTokens(\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external payable returns (uint256[] memory amounts);\n\n     function swapTokensForExactETH(\n         uint256 amountOut,\n         uint256 amountInMax,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external returns (uint256[] memory amounts);\n\n     function swapExactTokensForETH(\n         uint256 amountIn,\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external returns (uint256[] memory amounts);\n\n     function swapETHForExactTokens(\n         uint256 amountOut,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external payable returns (uint256[] memory amounts);\n\n     function quote(\n         uint256 amountA,\n         uint256 reserveA,\n         uint256 reserveB\n     ) external pure returns (uint256 amountB);\n\n     function getAmountOut(\n         uint256 amountIn,\n         uint256 reserveIn,\n         uint256 reserveOut\n     ) external pure returns (uint256 amountOut);\n\n     function getAmountIn(\n         uint256 amountOut,\n         uint256 reserveIn,\n         uint256 reserveOut\n     ) external pure returns (uint256 amountIn);\n\n     function getAmountsOut(uint256 amountIn, address[] calldata path)\n         external\n         view\n         returns (uint256[] memory amounts);\n\n     function getAmountsIn(uint256 amountOut, address[] calldata path)\n         external\n         view\n         returns (uint256[] memory amounts);\n }\n\n // pragma solidity >=0.6.2;\n\n interface IRouter is IUniswapV2Router01 {\n     function removeLiquidityETHSupportingFeeOnTransferTokens(\n         address token,\n         uint256 liquidity,\n         uint256 amountTokenMin,\n         uint256 amountETHMin,\n         address to,\n         uint256 deadline\n     ) external returns (uint256 amountETH);\n\n     function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n         address token,\n         uint256 liquidity,\n         uint256 amountTokenMin,\n         uint256 amountETHMin,\n         address to,\n         uint256 deadline,\n         bool approveMax,\n         uint8 v,\n         bytes32 r,\n         bytes32 s\n     ) external returns (uint256 amountETH);\n\n     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n         uint256 amountIn,\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external;\n\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external payable;\n\n     function swapExactTokensForETHSupportingFeeOnTransferTokens(\n         uint256 amountIn,\n         uint256 amountOutMin,\n         address[] calldata path,\n         address to,\n         uint256 deadline\n     ) external;\n }\n\n\n // File contracts/Sale.sol\n\n\n pragma solidity ^0.8.0;\n\n contract XZOsale is OwnerWithdrawable {\n     using SafeMath for uint256;\n     using SafeERC20 for IERC20;\n     using SafeERC20 for IERC20Metadata;\n\n     // pancakeswpa router\n     IRouter public router;\n\n     //Rate wrt to Native Currency of the chain\n     uint256 public rate;\n\n     // Token for which sale is being done\n     address public saleToken;\n     uint public saleTokenDec;\n\n     //Total tokens to be sold in the presale\n     uint256 public totalTokensforSale;\n\n     // Whitelist of tokens to buy from\n     mapping(address => bool) public tokenWL;\n\n     // 1 Token price in terms of WL tokens\n     mapping(address => uint256) public tokenPrices;\n\n     //Time when Sale starts\n     uint256 public preSaleStartTime;\n\n     //Time when Sale ends\n     uint256 public preSaleEndTime;\n\n     uint256 public totalTokensSold;\n\n     constructor() {\n     }\n\n     //modifier to check if the sale has already started\n     modifier saleStarted(){\n         if(preSaleStartTime != 0){\n             require(block.timestamp < preSaleStartTime, \"Sale: Sale has already started. Cannot change Sale Params!\");\n         }\n         _;\n     }\n\n     //modifier to check if the sale has ended\n     modifier saleEnded(){\n         if(preSaleEndTime != 0){\n             require(block.timestamp < preSaleEndTime, \"Sale: Sale has already ended. Cannot change Sale Params!\");\n         }\n         _;\n     }\n\n     //modifier to check if the sale is active or not\n     modifier saleDuration(){\n         require(block.timestamp > preSaleStartTime, \"Sale: Sale hasn't started\");\n         require(block.timestamp < preSaleEndTime, \"Sale: Sale has already ended\");\n         _;\n     }\n\n     //modifier to check if the Sale Duration and Locking periods are valid or not\n     modifier saleValid(\n         uint256 _preSaleStartTime, uint256 _preSaleEndTime\n     ){\n         require(block.timestamp < _preSaleStartTime, \"Sale: Starting time is less than current TimeStamp!\");\n         require(_preSaleStartTime < _preSaleEndTime, \"Sale: Invalid Sale Dates!\");\n         _;\n     }\n\n     //function to set information of Token sold in Sale and its rate in Native currency\n     function setSaleTokenParams(\n         address _saleToken, uint256 _totalTokensforSale, uint256 _rate\n     )external onlyOwner saleStarted{\n         require(_rate != 0, \"PreSale: Invalid Native Currency rate!\");\n         rate = _rate;\n         saleToken = _saleToken;\n         saleTokenDec = IERC20Metadata(saleToken).decimals();\n         totalTokensforSale = _totalTokensforSale;\n         IERC20(saleToken).safeTransferFrom(msg.sender, address(this), totalTokensforSale);\n     }\n\n     //function to set Sale duration and locking periods\n     function setSalePeriodParams(\n         uint256 _preSaleStartTime,\n         uint256 _preSaleEndTime\n     )external onlyOwner saleStarted saleValid(_preSaleStartTime, _preSaleEndTime){\n\n         preSaleStartTime = _preSaleStartTime;\n         preSaleEndTime = _preSaleEndTime;\n\n     }\n\n     // Add a token to buy sale token from, with price\n     function addWhiteListedToken(\n         address[] memory _tokens,\n         uint256[] memory _prices\n     ) external onlyOwner saleEnded{\n         require(\n             _tokens.length == _prices.length,\n             \"Sale: tokens & prices arrays length mismatch\"\n         );\n\n         for (uint256 i = 0; i < _tokens.length; i++) {\n             require(_prices[i] != 0, \"Sale: Cannot set price to 0\");\n             tokenWL[_tokens[i]] = true;\n             tokenPrices[_tokens[i]] = _prices[i];\n         }\n     }\n\n     function updateTokenRate(\n         address[] memory _tokens,\n         uint256[] memory _prices,\n         uint256 _rate\n     )external onlyOwner{\n         require(\n             _tokens.length == _prices.length,\n             \"Sale: tokens & prices arrays length mismatch\"\n         );\n\n         if(_rate != 0){\n             rate = _rate;\n         }\n\n         for(uint256 i = 0; i < _tokens.length; i+=1){\n             require(tokenWL[_tokens[i]] == true, \"sale: Token not whitelisted\");\n             require(_prices[i] != 0, \"Sale: Cannot set rate as 0\");\n             tokenPrices[_tokens[i]] = _prices[i];\n         }\n     }\n\n\n     // Stop the Sale\n     function stopSale() external onlyOwner {\n         require(block.timestamp > preSaleStartTime, \"Sale: Sale hasn't started yet!\");\n         if(block.timestamp < preSaleEndTime){\n             preSaleEndTime = block.timestamp;\n         }\n     }\n\n     // Public view function to calculate amount of sale tokens returned if you buy using \"amount\" of \"token\"\n     function getTokenAmount(address token, uint256 amount)\n         public\n         view\n         returns (uint256)\n     {\n         uint256 amtOut;\n         if(token != address(0)){\n             require(tokenWL[token] == true, \"Sale: Token not whitelisted\");\n             // uint tokenDec = IERC20(token).decimals();\n             uint256 price = tokenPrices[token];\n             amtOut = amount.mul(10**saleTokenDec).div(price);\n         }\n         else{\n             amtOut = amount.mul(10**saleTokenDec).div(rate);\n         }\n         return amtOut;\n     }\n\n     // Public Function to buy tokens. APPROVAL needs to be done first\n     function buyToken(address _token, uint256 _amount) external payable saleDuration{\n         uint256 saleTokenAmt;\n         if(_token != address(0)){\n             require(_amount > 0, \"Purchase Cannot buy with zero amount\");\n             require(tokenWL[_token] == true, \"Purchase: Token not whitelisted\");\n\n             saleTokenAmt = getTokenAmount(_token, _amount);\n             IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n         }\n         else{\n             saleTokenAmt = getTokenAmount(address(0), msg.value);\n         }\n         require((totalTokensSold + saleTokenAmt) < totalTokensforSale, \"Sale: Total Token Sale Reached!\");\n         IERC20(saleToken).safeTransfer(msg.sender, saleTokenAmt);\n         // Update Stats\n         totalTokensSold += saleTokenAmt;\n     }\n\n }"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}