{{
  "language": "Solidity",
  "sources": {
    "/contracts/UtilitiesInteractions.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n// solhint-disable-next-line\npragma solidity 0.8.12;\n\nimport \"./interface/IMasterContract.sol\";\nimport \"./reduced_interfaces/BAPGenesisInterface.sol\";\nimport \"./reduced_interfaces/BAPTeenBullsInterface.sol\";\nimport \"./reduced_interfaces/BAPUtilitiesInterface.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/// @title Bulls and Apes Project - Utilities Interactions\n/// @author BAP Dev Team\n/// @notice Handle the use of the utilities inside BAP ecosystem\ncontract UtilitiesInteractions is Ownable, IERC721Receiver {\n    using Strings for uint256;\n    /// @notice Master contract instance\n    IMasterContract public masterContract;\n    /// @notice OG Bulls contract instance\n    BAPGenesisInterface public bapGenesis;\n    /// @notice Teen Bulls contract instance\n    BAPTeenBullsInterface public bapTeenBulls;\n    /// @notice Utility contract instance\n    BAPUtilitiesInterface public bapUtilities;\n\n    /// @notice Address of the wallet that signs messages\n    address public secret;\n\n    /// @notice Cooldown period for METH bank withdraw\n    uint256 public withdrawCoolDown = 1 hours;\n    /// @notice Max amount of Merger Orbs that can be purchased\n    uint256 public constant MERGER_ORB_AMOUNT = 1490;\n    /// @notice Utility ID for the Merger Orb\n    uint256 public constant MERGER_ORB = 2;\n    /// @notice counter for Merger Orbs purchased\n    uint256 public mergerOrbCounter = 0;\n    /// @notice Last token received, Used for resurrecting\n    uint256 private lastTokenReceived;\n\n    /// @notice Boolean to prevent Teens being sent to the contract, only allowed when reviving\n    bool private isReviving = false;\n\n    /// @notice Mapping of User last withdraw from METH bank\n    mapping(address => uint256) public lastWithdraw;\n\n    /// @notice Mapping to check if a Teen has been resurrected\n    mapping(uint256 => bool) public isResurrected;\n    /// @notice Mapping to identify God Bulls\n    mapping(uint256 => bool) public isGod;\n\n    /// @notice Mapping to check if a signature has been used\n    mapping(bytes => bool) public usedSignatures;\n\n    /// @notice Resurrection event\n    event TeenResurrected(\n        address user,\n        uint256 sacrificed,\n        uint256 resurrected,\n        uint256 newlyMinted,\n        uint256 offChainUtility\n    );\n\n    /// @notice Event emitted during on-chain Replenish\n    event BreedingReplenish(address user, uint256 tokenId, uint256 timestamp);\n\n    /// @notice Event emitted during on-chain Merger Orb purchase\n    event MergerOrbBought(address user, uint256 timestamp);\n\n    /// @notice Event for off chain payment for Merger Orb\n    event OffChainMethPayment(address user, uint256 amount, uint256 timestamp);\n\n    /// @notice Event for off chain minting of the Merger Orb\n    event MergerOrbOffChainMint(address user, uint256 timestamp);\n\n    /// @notice Event for Utility burned off chain\n    event UtilityBurnedOffChain(\n        address user,\n        uint256 utilityId,\n        uint256 timestamp\n    );\n\n    /// @notice Event for Utilities burned on chain as deposit\n    event UtilityBurnedOnChain(\n        address user,\n        uint256[] utilityIds,\n        uint256[] amounts,\n        uint256 timestamp\n    );\n\n    /// @notice Event for Utilities off chain being minted\n    event UtilitiesMinted(\n        address user,\n        uint256[] utilityIds,\n        uint256[] amounts,\n        uint256 timestamp\n    );\n\n    /// @notice Event for METH withdrawn from the bank\n    event MethWithdrawn(address user, uint256 amount, bytes signature, uint256  timestamp);\n\n    /// @notice Deploys the contract and sets the instances addresses\n    /// @param masterContractAddress: Address of the Master Contract\n    /// @param genesisAddress: Address of the OG Bulls contract\n    /// @param teensAddress: Address of the Teen Bulls contract\n    /// @param utilitiesAddress: Address of the Utilities contract\n    /// @dev Sets the God Bulls that IDs are less than 10000\n    constructor(\n        address masterContractAddress,\n        address genesisAddress,\n        address teensAddress,\n        address utilitiesAddress\n    ) {\n        masterContract = IMasterContract(masterContractAddress);\n        bapGenesis = BAPGenesisInterface(genesisAddress);\n        bapTeenBulls = BAPTeenBullsInterface(teensAddress);\n        bapUtilities = BAPUtilitiesInterface(utilitiesAddress);\n\n        isGod[2016] = true;\n        isGod[3622] = true;\n        isGod[3714] = true;\n        isGod[4473] = true;\n        isGod[4741] = true;\n        isGod[5843] = true;\n        isGod[6109] = true;\n        isGod[7977] = true;\n        isGod[8190] = true;\n        isGod[9690] = true;\n\n        mergerOrbCounter = bapUtilities.mergerOrbsPurchased();\n    }\n\n    /// @notice Handle the resurrection of a Teen Bull\n    /// @param utilityId: ID of the utility used to resurrect\n    /// @param sacrificed: ID of the Teen Bull sacrificed\n    /// @param resurrected: ID of the Teen Bull to resurrect\n    /// @param timeOut: Time out for the signature\n    /// @param offChainUtility: Boolean to check if the utility is on-chain or off-chain\n    /// @param signature: Signature to check above parameters\n    function teenResurrect(\n        uint256 utilityId,\n        uint256 sacrificed,\n        uint256 resurrected,\n        uint256 timeOut,\n        uint256 offChainUtility,\n        bytes memory signature\n    ) external {\n        require(\n            utilityId >= 30 && utilityId < 34,\n            \"teenResurrect: Wrong utilityId id\"\n        );\n        require(\n            timeOut > block.timestamp,\n            \"teenResurrect: Signature is expired\"\n        );\n        require(\n            _verifyHashSignature(\n                keccak256(\n                    abi.encode(\n                        msg.sender,\n                        utilityId,\n                        sacrificed,\n                        resurrected,\n                        timeOut,\n                        offChainUtility // 0 for on-chain, 1 for off-chain\n                    )\n                ),\n                signature\n            ),\n            \"teenResurrect: Signature is invalid\"\n        );\n        require(\n            !isResurrected[sacrificed],\n            \"teenResurrect: Can't sacrifice a resurrected Teen Bull\"\n        );\n        require(\n            !isResurrected[resurrected],\n            \"teenResurrect: Can't resurrect an already resurrected Teen Bull\"\n        );\n        if (offChainUtility == 0) {\n            masterContract.burn(utilityId, 1);\n        } else {\n            emit UtilityBurnedOffChain(msg.sender, utilityId, block.timestamp);\n        }\n\n        _burnTeen(sacrificed);\n\n        isReviving = true;\n\n        bapTeenBulls.airdrop(address(this), 1);\n\n        isReviving = false;\n\n        isResurrected[lastTokenReceived] = true;\n        isResurrected[resurrected] = true;\n\n        bapTeenBulls.safeTransferFrom(\n            address(this),\n            msg.sender,\n            lastTokenReceived\n        );\n\n        emit TeenResurrected(\n            msg.sender,\n            sacrificed,\n            resurrected,\n            lastTokenReceived,\n            offChainUtility\n        );\n\n        lastTokenReceived = 0;\n    }\n\n    /// @notice Handle the purchase of a Merger Orb\n    /// @param teen: ID of the Teen Bull to sacrifice\n    /// @dev Teen needs to be burned to be able to buy the Merger Orb\n    function buyMergeOrb(uint256 teen) external {\n        require(\n            mergerOrbCounter < MERGER_ORB_AMOUNT,\n            \"buyMergeOrb: Merger Orbs sold out\"\n        );\n\n        masterContract.pay(2400, 1200);\n\n        _burnTeen(teen);\n\n        masterContract.airdrop(msg.sender, 1, MERGER_ORB);\n\n        mergerOrbCounter++;\n\n        emit MergerOrbBought(msg.sender, block.timestamp);\n    }\n\n    /// @notice Handle the generation of Teen Bulls\n    /// @dev Needs to pay METH and burn an Incubator\n    function generateTeenBull() external {\n        masterContract.pay(600, 300);\n        masterContract.burn(1, 1);\n        masterContract.airdrop(msg.sender, 1);\n    }\n\n    /// @notice Handle the purchase of a Merger Orb using off-chain payment or minting off-chain\n    /// @param teen: ID of the Teen Bull to sacrifice\n    /// @param timeOut: Time out for the signature\n    /// @param offChainPayment: Boolean to check if the payment is on-chain or off-chain\n    /// @param offChainMint: Boolean to check if the minting is on-chain or off-chain\n    /// @param signature: Signature to check above parameters\n    /// @dev If payment or mint is off-chain, emit the corresponding event\n    function offChainMergeOrb(\n        uint256 teen,\n        uint256 timeOut,\n        bool offChainPayment,\n        bool offChainMint,\n        bytes memory signature\n    ) external {\n        require(\n            mergerOrbCounter < MERGER_ORB_AMOUNT,\n            \"offChainMergeOrb: Merger Orbs sold out\"\n        );\n        require(\n            timeOut > block.timestamp,\n            \"offChainMergeOrb: Signature is expired\"\n        );\n        require(\n            !usedSignatures[signature],\n            \"offChainMergeOrb: Signature already used\"\n        );\n        require(\n            _verifyHashSignature(\n                keccak256(\n                    abi.encode(msg.sender, teen, offChainPayment, offChainMint)\n                ),\n                signature\n            ),\n            \"offChainMergeOrb: Signature is invalid\"\n        );\n\n        usedSignatures[signature] = true;\n\n        if (!offChainPayment) {\n            masterContract.pay(2400, 1200);\n        } else {\n            emit OffChainMethPayment(msg.sender, 2400, block.timestamp);\n        }\n\n        _burnTeen(teen);\n\n        if (!offChainMint) {\n            masterContract.airdrop(msg.sender, 1, MERGER_ORB);\n\n            emit MergerOrbBought(msg.sender, block.timestamp);\n        } else {\n            emit MergerOrbOffChainMint(msg.sender, block.timestamp);\n        }\n\n        mergerOrbCounter++;\n    }\n\n    /// @notice Handle the breeding replenishment using on-chain utilities\n    /// @param utilityId: ID of the utility used to replenish\n    /// @param tokenId: ID of the Bull to replenish\n    /// @param signature: Signature to check above parameters\n    /// @dev Only the owner of the Bull can replenish and God Bulls cannot claim extra breeding\n    function replenishBreedings(\n        uint256 utilityId,\n        uint256 tokenId,\n        bytes memory signature\n    ) external {\n        require(\n            utilityId >= 40 && utilityId < 45,\n            \"replenishBreedings: Wrong utilityId id\"\n        );\n        require(\n            _verifyHashSignature(\n                keccak256(abi.encode(msg.sender, utilityId, tokenId)),\n                signature\n            ),\n            \"replenishBreedings: Signature is invalid\"\n        );\n        require(\n            bapGenesis.ownerOf(tokenId) == msg.sender,\n            \"replenishBreedings: Only the owner can replenish\"\n        );\n        require(\n            !godBulls(tokenId),\n            \"replenishBreedings: God bulls cannot claim extra breeding\"\n        );\n\n        masterContract.burn(utilityId, 1);\n\n        emit BreedingReplenish(msg.sender, tokenId, block.timestamp);\n    }\n\n    /// @notice Handle the burning of Utilities as deposit to be used off-chain\n    /// @param utilityIds: IDs of the Utilities to burn\n    /// @param amounts: Amounts to burn for each Utility\n    function burnUtilities(\n        uint256[] memory utilityIds,\n        uint256[] memory amounts\n    ) external {\n        require(\n            utilityIds.length == amounts.length,\n            \"burnUtilities: Arrays length mismatch\"\n        );\n\n        for (uint256 i = 0; i < utilityIds.length; i++) {\n            masterContract.burn(utilityIds[i], amounts[i]);\n        }\n\n        emit UtilityBurnedOnChain(\n            msg.sender,\n            utilityIds,\n            amounts,\n            block.timestamp\n        );\n    }\n\n    /// @notice Handle the minting of Utilities held off-chain\n    /// @param utilityIds: IDs of the Utilities to mint\n    /// @param amounts: Amounts to mint for each Utility\n    /// @param timeOut: Time out for the signature\n    /// @param signature: Signature to check above parameters\n    function mintUtilities(\n        uint256[] memory utilityIds,\n        uint256[] memory amounts,\n        uint256 timeOut,\n        bytes memory signature\n    ) external {\n        require(\n            timeOut > block.timestamp,\n            \"mintUtilities: Signature is expired\"\n        );\n        require(\n            !usedSignatures[signature],\n            \"mintUtilities: Signature already used\"\n        );\n        require(\n            utilityIds.length == amounts.length,\n            \"mintUtilities: Arrays length mismatch\"\n        );\n\n        usedSignatures[signature] = true;\n\n        string memory mintCode;\n\n        for (uint256 i = 0; i < utilityIds.length; i++) {\n            mintCode = string.concat(mintCode, \"ID\", utilityIds[i].toString());\n            mintCode = string.concat(mintCode, \"A\", amounts[i].toString());\n\n            masterContract.airdrop(msg.sender, amounts[i], utilityIds[i]);\n        }\n\n        require(\n            _verifyHashSignature(\n                keccak256(abi.encode(msg.sender, mintCode, timeOut)),\n                signature\n            ),\n            \"mintUtilities: Signature is invalid\"\n        );\n\n        emit UtilitiesMinted(msg.sender, utilityIds, amounts, block.timestamp);\n    }\n\n    /// @notice Handle the withdrawal from user's METH bank\n    /// @param amount: Amount to withdraw\n    /// @param timeOut: Time out for the signature\n    /// @param signature: Signature to check above parameters\n    function withdrawFromBank(\n        uint256 amount,\n        uint256 timeOut,\n        bytes memory signature\n    ) external {\n        require(timeOut > block.timestamp, \"withdrawFromBank: Signature is expired\");\n        require(!usedSignatures[signature], \"withdrawFromBank: Signature already used\");\n        require(amount > 0, \"withdrawFromBank: Amount must be greater than 0\");        \n        require(\n            lastWithdraw[msg.sender] + withdrawCoolDown < block.timestamp,\n            \"withdrawFromBank: Withdrawal is too soon\"\n        );\n        require(\n            _verifyHashSignature(\n                keccak256(abi.encode(amount, msg.sender, timeOut )),\n                signature\n            ),\n            \"withdrawFromBank: Signature is invalid\"\n        );\n\n        usedSignatures[signature] = true;\n\n        lastWithdraw[msg.sender] = block.timestamp;\n\n        masterContract.claim(msg.sender, amount);\n\n        emit MethWithdrawn(msg.sender, amount, signature, block.timestamp);\n    }\n\n    /// @notice Internal function to burn a Teen Bull\n    /// @param tokenId: ID of the Teen Bull to burn\n    /// @dev Only the owner of the Teen Bull can burn it and resurrected Teen Bulls cannot be burned\n    function _burnTeen(uint256 tokenId) internal {\n        require(\n            bapTeenBulls.ownerOf(tokenId) == msg.sender,\n            \"Only the owner can burn\"\n        );\n        require(!isResurrected[tokenId], \"Can't burn resurrected teens\");\n\n        bapTeenBulls.burnTeenBull(tokenId);\n    }\n\n    /// @notice Internal function to set isResurrected status on previously resurrected Teen Bulls\n    /// @param tokenIds: Array of Teen Bull IDs to set isResurrected status\n    /// @param boolean: Boolean to set isResurrected status\n    /// @dev Only used to set isResurrected status on Teen Bulls resurrected before the contract deployment\n    function setIsResurrected(\n        uint256[] memory tokenIds,\n        bool boolean\n    ) external onlyOwner {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            isResurrected[tokenIds[i]] = boolean;\n        }\n    }\n\n    /// @notice Internal function to set a new signer\n    /// @param newSigner: Address of the new signer\n    /// @dev Only the owner can set a new signer\n    function setSigner(address newSigner) external onlyOwner {\n        require(newSigner != address(0), \"Invalid address\");\n        secret = newSigner;\n    }\n\n    /// @notice Internal function to set the withdraw cool down\n    /// @param newCoolDown: New withdraw cool down\n    /// @dev Only the owner can set the withdraw cool down\n    function setWithdrawCoolDown(uint256 newCoolDown) external onlyOwner {\n        withdrawCoolDown = newCoolDown;\n    }\n\n    /// @notice Internal function to check if a Bull is a God Bull\n    /// @param tokenId: ID of the Bull to check\n    function godBulls(uint256 tokenId) internal view returns (bool) {\n        return tokenId > 10010 || isGod[tokenId];\n    }\n\n    /// @notice Internal function to handle the transfer of a Teen Bull during the resurrection process\n    /// @param tokenId: ID of the Teen Bull to transfer\n    /// @dev Only accept transfers from BAP Teens and only while reviving\n    function onERC721Received(\n        address,\n        address,\n        uint256 tokenId,\n        bytes memory\n    ) external virtual override returns (bytes4) {\n        require(\n            msg.sender == address(bapTeenBulls),\n            \"Only receive from BAP Teens\"\n        );\n        require(isReviving, \"Only accept transfers while reviving\");\n        lastTokenReceived = tokenId;\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice Transfer ownership from external contracts owned by this contract\n    /// @param _contract Address of the external contract\n    /// @param _newOwner New owner\n    /// @dev Only contract owner can call this function\n    function transferOwnershipExternalContract(\n        address _contract,\n        address _newOwner\n    ) external onlyOwner {\n        Ownable(_contract).transferOwnership(_newOwner);\n    }\n\n    /// @notice Internal function to check if a signature is valid\n    /// @param freshHash: Hash to check\n    /// @param signature: Signature to check\n    function _verifyHashSignature(\n        bytes32 freshHash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", freshHash)\n        );\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (signature.length != 65) {\n            return false;\n        }\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := byte(0, mload(add(signature, 96)))\n        }\n\n        if (v < 27) {\n            v += 27;\n        }\n\n        address signer = address(0);\n        if (v == 27 || v == 28) {\n            // solium-disable-next-line arg-overflow\n            signer = ecrecover(hash, v, r, s);\n        }\n        return secret == signer;\n    }\n}\n"
    },
    "/contracts/reduced_interfaces/BAPUtilitiesInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface BAPUtilitiesInterface {\r\n    function burn(uint256, uint256) external;\r\n\r\n    function purchaseIncubator() external;\r\n\r\n    function purchaseMergerOrb() external;\r\n\r\n    function mergerOrbsPurchased() external view returns (uint256);\r\n\r\n    function transferOwnership(address) external;\r\n\r\n    function airdrop(\r\n        address,\r\n        uint256,\r\n        uint256\r\n    ) external;\r\n}\r\n"
    },
    "/contracts/reduced_interfaces/BAPTeenBullsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface BAPTeenBullsInterface {\r\n    function generateTeenBull() external;\r\n\r\n    function generateMergerOrb() external;\r\n\r\n    function ownerOf(uint256) external view returns (address);\r\n\r\n    function burnTeenBull(uint256) external;\r\n\r\n    function airdrop(address, uint256) external;\r\n\r\n    function safeTransferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n"
    },
    "/contracts/reduced_interfaces/BAPGenesisInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.12;\r\n\r\ninterface BAPGenesisInterface {\r\n    function minted() external view returns (uint256);\r\n\r\n    function mintingDatetime(uint256) external view returns (uint256);\r\n\r\n    function updateBullBreedings(uint256) external;\r\n\r\n    function ownerOf(uint256) external view returns (address);\r\n\r\n    function breedings(uint256) external view returns (uint256);\r\n\r\n    function maxBreedings() external view returns (uint256);\r\n\r\n    function generateGodBull() external;\r\n\r\n    function refund(address, uint256) external payable;\r\n\r\n    function safeTransferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function genesisTimestamp() external view returns (uint256);\r\n}\r\n"
    },
    "/contracts/interface/IMasterContract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IMasterContract {\r\n    // METH functions\r\n\r\n    function claim(address to, uint256 amount) external;\r\n\r\n    function pay(uint256 payment, uint256 fee) external;\r\n\r\n    // Teens functions\r\n\r\n    function airdrop(address to, uint256 amount) external;\r\n\r\n    function burnTeenBull(uint256 tokenId) external;\r\n\r\n    // Utilities functions\r\n\r\n    function burn(uint256 id, uint256 amount) external;\r\n\r\n    function airdrop(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 id\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}