{{
  "language": "Solidity",
  "sources": {
    "contracts/gateways/ConcentratorGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport \"../concentrator/interfaces/IAladdinConvexVault.sol\";\nimport \"../zap/TokenZapLogic.sol\";\nimport \"./ZapGatewayBase.sol\";\n\ncontract ConcentratorGateway is ZapGatewayBase {\n  using SafeERC20 for IERC20;\n\n  constructor(address _logic) {\n    logic = _logic;\n  }\n\n  /// @notice Deposit `_srcToken` into Concentrator vault with zap.\n  /// @param _vault The address of vault.\n  /// @param _pid The pool id to deposit.\n  /// @param _srcToken The address of start token. Use zero address, if you want deposit with ETH.\n  /// @param _lpToken The address of lp token of corresponding pool.\n  /// @param _amountIn The amount of `_srcToken` to deposit.\n  /// @param _routes The routes used to do zap.\n  /// @param _minShareOut The minimum amount of pool shares should receive.\n  /// @return The amount of pool shares received.\n  function deposit(\n    address _vault,\n    uint256 _pid,\n    address _srcToken,\n    address _lpToken,\n    uint256 _amountIn,\n    uint256[] calldata _routes,\n    uint256 _minShareOut\n  ) external payable returns (uint256) {\n    require(_amountIn > 0, \"deposit zero amount\");\n\n    // 1. transfer srcToken into this contract\n    _amountIn = _transferTokenIn(_srcToken, _amountIn);\n\n    // 2. zap srcToken to lp\n    uint256 _amountLP = _zap(_routes, _amountIn);\n    require(IERC20(_lpToken).balanceOf(address(this)) >= _amountLP, \"zap to lp token failed\");\n\n    // 3. deposit into Concentrator vault\n    IERC20(_lpToken).safeApprove(_vault, 0);\n    IERC20(_lpToken).safeApprove(_vault, _amountLP);\n    uint256 _sharesOut = IAladdinConvexVault(_vault).deposit(_pid, msg.sender, _amountLP);\n\n    require(_sharesOut >= _minShareOut, \"insufficient share\");\n    return _sharesOut;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/concentrator/interfaces/IAladdinConvexVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IAladdinConvexVault {\n  enum ClaimOption {\n    None,\n    Claim,\n    ClaimAsCvxCRV,\n    ClaimAsCRV,\n    ClaimAsCVX,\n    ClaimAsETH\n  }\n\n  event Deposit(uint256 indexed _pid, address indexed _sender, uint256 _amount);\n  event Withdraw(uint256 indexed _pid, address indexed _sender, uint256 _shares);\n  event Claim(address indexed _sender, uint256 _reward, ClaimOption _option);\n  event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);\n\n  event UpdateWithdrawalFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\n  event UpdatePlatformFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\n  event UpdateHarvestBountyPercentage(uint256 indexed _pid, uint256 _percentage);\n  event UpdatePlatform(address indexed _platform);\n  event UpdateZap(address indexed _zap);\n  event UpdatePoolRewardTokens(uint256 indexed _pid, address[] _rewardTokens);\n  event AddPool(uint256 indexed _pid, uint256 _convexPid, address[] _rewardTokens);\n  event PausePoolDeposit(uint256 indexed _pid, bool _status);\n  event PausePoolWithdraw(uint256 indexed _pid, bool _status);\n\n  /// @notice Return the amount of pending AladdinCRV rewards for specific pool.\n  /// @param _pid - The pool id.\n  /// @param _account - The address of user.\n  function pendingReward(uint256 _pid, address _account) external view returns (uint256);\n\n  /// @notice Return the amount of pending AladdinCRV rewards for all pool.\n  /// @param _account - The address of user.\n  function pendingRewardAll(address _account) external view returns (uint256);\n\n  /// @notice Return the user share for specific user.\n  /// @param _pid The pool id to query.\n  /// @param _account The address of user.\n  function getUserShare(uint256 _pid, address _account) external view returns (uint256);\n\n  /// @notice Return the total underlying token deposited.\n  /// @param _pid The pool id to query.\n  function getTotalUnderlying(uint256 _pid) external view returns (uint256);\n\n  /// @notice Return the total pool share deposited.\n  /// @param _pid The pool id to query.\n  function getTotalShare(uint256 _pid) external view returns (uint256);\n\n  /// @notice Deposit some token to specific pool.\n  /// @dev This function is deprecated.\n  /// @param _pid The pool id to query\n  /// @param _amount The amount of token to deposit.\n  /// @return share The amount of share after deposit.\n  function deposit(uint256 _pid, uint256 _amount) external returns (uint256 share);\n\n  /// @notice Deposit some token to specific pool for someone.\n  /// @param _pid The pool id.\n  /// @param _recipient The address of recipient who will recieve the token.\n  /// @param _amount The amount of token to deposit.\n  /// @return share The amount of share after deposit.\n  function deposit(\n    uint256 _pid,\n    address _recipient,\n    uint256 _amount\n  ) external returns (uint256 share);\n\n  /// @notice Deposit all token of the caller to specific pool.\n  /// @dev This function is deprecated.\n  /// @param _pid The pool id.\n  /// @return share The amount of share after deposit.\n  function depositAll(uint256 _pid) external returns (uint256 share);\n\n  /// @notice Deposit all token of the caller to specific pool for someone.\n  /// @param _pid The pool id.\n  /// @param _recipient The address of recipient who will recieve the token.\n  /// @return share The amount of share after deposit.\n  function depositAll(uint256 _pid, address _recipient) external returns (uint256 share);\n\n  /// @notice Deposit some token to specific pool with zap.\n  /// @dev This function is deprecated.\n  /// @param _pid The pool id.\n  /// @param _token The address of token to deposit.\n  /// @param _amount The amount of token to deposit.\n  /// @param _minAmount The minimum amount of share to deposit.\n  /// @return share The amount of share after deposit.\n  function zapAndDeposit(\n    uint256 _pid,\n    address _token,\n    uint256 _amount,\n    uint256 _minAmount\n  ) external payable returns (uint256 share);\n\n  /// @notice Deposit some token to specific pool with zap for someone.\n  /// @param _pid The pool id.\n  /// @param _recipient The address of recipient who will recieve the token.\n  /// @param _token The address of token to deposit.\n  /// @param _amount The amount of token to deposit.\n  /// @param _minAmount The minimum amount of share to deposit.\n  /// @return share The amount of share after deposit.\n  function zapAndDeposit(\n    uint256 _pid,\n    address _recipient,\n    address _token,\n    uint256 _amount,\n    uint256 _minAmount\n  ) external payable returns (uint256 share);\n\n  /// @notice Deposit all token to specific pool with zap.\n  /// @dev This function is deprecated.\n  /// @param _pid The pool id.\n  /// @param _token The address of token to deposit.\n  /// @param _minAmount The minimum amount of share to deposit.\n  /// @return share The amount of share after deposit.\n  function zapAllAndDeposit(\n    uint256 _pid,\n    address _token,\n    uint256 _minAmount\n  ) external payable returns (uint256);\n\n  /// @notice Deposit all token to specific pool with zap for someone.\n  /// @param _pid The pool id.\n  /// @param _recipient The address of recipient who will recieve the token.\n  /// @param _token The address of token to deposit.\n  /// @param _minAmount The minimum amount of share to deposit.\n  /// @return share The amount of share after deposit.\n  function zapAllAndDeposit(\n    uint256 _pid,\n    address _recipient,\n    address _token,\n    uint256 _minAmount\n  ) external payable returns (uint256);\n\n  /// @notice Withdraw some token from specific pool and zap to token.\n  /// @param _pid - The pool id.\n  /// @param _shares - The share of token want to withdraw.\n  /// @param _token - The address of token zapping to.\n  /// @param _minOut - The minimum amount of token to receive.\n  /// @return withdrawn - The amount of token sent to caller.\n  function withdrawAndZap(\n    uint256 _pid,\n    uint256 _shares,\n    address _token,\n    uint256 _minOut\n  ) external returns (uint256);\n\n  /// @notice Withdraw all token from specific pool and zap to token.\n  /// @param _pid - The pool id.\n  /// @param _token - The address of token zapping to.\n  /// @param _minOut - The minimum amount of token to receive.\n  /// @return withdrawn - The amount of token sent to caller.\n  function withdrawAllAndZap(\n    uint256 _pid,\n    address _token,\n    uint256 _minOut\n  ) external returns (uint256);\n\n  /// @notice Withdraw some token from specific pool and claim pending rewards.\n  /// @param _pid - The pool id.\n  /// @param _shares - The share of token want to withdraw.\n  /// @param _minOut - The minimum amount of pending reward to receive.\n  /// @param _option - The claim option (don't claim, as aCRV, cvxCRV, CRV, CVX, or ETH)\n  /// @return withdrawn - The amount of token sent to caller.\n  /// @return claimed - The amount of reward sent to caller.\n  function withdrawAndClaim(\n    uint256 _pid,\n    uint256 _shares,\n    uint256 _minOut,\n    ClaimOption _option\n  ) external returns (uint256, uint256);\n\n  /// @notice Withdraw all share of token from specific pool and claim pending rewards.\n  /// @param _pid - The pool id.\n  /// @param _minOut - The minimum amount of pending reward to receive.\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\n  /// @return withdrawn - The amount of token sent to caller.\n  /// @return claimed - The amount of reward sent to caller.\n  function withdrawAllAndClaim(\n    uint256 _pid,\n    uint256 _minOut,\n    ClaimOption _option\n  ) external returns (uint256, uint256);\n\n  /// @notice claim pending rewards from specific pool.\n  /// @param _pid - The pool id.\n  /// @param _minOut - The minimum amount of pending reward to receive.\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\n  /// @return claimed - The amount of reward sent to caller.\n  function claim(\n    uint256 _pid,\n    uint256 _minOut,\n    ClaimOption _option\n  ) external returns (uint256);\n\n  /// @notice claim pending rewards from all pools.\n  /// @param _minOut - The minimum amount of pending reward to receive.\n  /// @param _option - The claim option (as aCRV, cvxCRV, CRV, CVX, or ETH)\n  /// @return claimed - The amount of reward sent to caller.\n  function claimAll(uint256 _minOut, ClaimOption _option) external returns (uint256);\n\n  /// @notice Harvest the pending reward and convert to aCRV.\n  /// @param _pid - The pool id.\n  /// @param _recipient - The address of account to receive harvest bounty.\n  /// @param _minimumOut - The minimum amount of cvxCRV should get.\n  /// @return harvested - The amount of cvxCRV harvested after zapping all other tokens to it.\n  function harvest(\n    uint256 _pid,\n    address _recipient,\n    uint256 _minimumOut\n  ) external returns (uint256);\n}\n"
    },
    "contracts/zap/TokenZapLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\";\n\nimport \"../interfaces/IBalancerVault.sol\";\nimport \"../interfaces/IBalancerPool.sol\";\nimport \"../interfaces/IConvexCRVDepositor.sol\";\nimport \"../interfaces/ICurveAPool.sol\";\nimport \"../interfaces/ICurveBasePool.sol\";\nimport \"../interfaces/ICurveCryptoPool.sol\";\nimport \"../interfaces/ICurveETHPool.sol\";\nimport \"../interfaces/ICurveFactoryMetaPool.sol\";\nimport \"../interfaces/ICurveFactoryPlainPool.sol\";\nimport \"../interfaces/ICurveMetaPool.sol\";\nimport \"../interfaces/ICurveYPool.sol\";\nimport \"../interfaces/ILidoStETH.sol\";\nimport \"../interfaces/ILidoWstETH.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV3Pool.sol\";\nimport \"../interfaces/IUniswapV3Router.sol\";\nimport \"../interfaces/IWETH.sol\";\n\ninterface ICurvePoolRegistry {\n  // solhint-disable-next-line func-name-mixedcase\n  function get_lp_token(address _pool) external view returns (address);\n}\n\n// solhint-disable reason-string, const-name-snakecase\n\ncontract TokenZapLogic {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n  using SafeMathUpgradeable for uint256;\n\n  /// @dev The address of Curve Pool Registry contract.\n  address private constant CURVE_POOL_REGISTRY = 0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5;\n\n  /// @dev The address of ETH which is commonly used.\n  address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @dev The address of WETH token.\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n  /// @dev The address of Uniswap V3 Router\n  address private constant UNISWAP_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n\n  /// @dev The address of Balancer V2 Vault\n  address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\n\n  /// @dev The address of Curve 3pool Deposit Zap\n  address private constant CURVE_3POOL_DEPOSIT_ZAP = 0xA79828DF1850E8a3A3064576f380D90aECDD3359;\n\n  /// @dev The address of base tokens for 3pool: DAI, USDC, USDT in increasing order.\n  address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n  address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n  address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n  /// @dev The address of Curve sBTC Deposit Zap\n  address private constant CURVE_SBTC_DEPOSIT_ZAP = 0x7AbDBAf29929e7F8621B757D2a7c04d78d633834;\n\n  /// @dev The address of base tokens for crvRenWsBTC: renBTC, WBTC, sBTC in increasing order.\n  address private constant renBTC = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n  address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n  address private constant sBTC = 0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6;\n\n  /// @dev The address of Lido's stETH token.\n  address private constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n\n  /// @dev The address of Lido's wstETH token.\n  address private constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n\n  /// @dev The pool type used in this zap contract, a maximum of 256 items\n  enum PoolType {\n    UniswapV2, // with fee 0.3%, add/remove liquidity not supported\n    UniswapV3, // add/remove liquidity not supported\n    BalancerV2, // add/remove liquidity not supported\n    CurveETHPool, // including Factory Pool\n    CurveCryptoPool, // including Factory Pool\n    CurveMetaCryptoPool,\n    CurveTriCryptoPool,\n    CurveBasePool,\n    CurveAPool,\n    CurveAPoolUnderlying,\n    CurveYPool,\n    CurveYPoolUnderlying,\n    CurveMetaPool,\n    CurveMetaPoolUnderlying,\n    CurveFactoryPlainPool,\n    CurveFactoryMetaPool,\n    CurveFactoryUSDMetaPoolUnderlying,\n    CurveFactoryBTCMetaPoolUnderlying,\n    LidoStake, // eth to stETH\n    LidoWrap // stETH to wstETH or wstETH to stETH\n  }\n\n  /// @dev Only the following pool will call this function\n  /// + CurveCryptoPool => use `ICurveCryptoPool.token()`\n  //  + CurveMetaCryptoPool => use `ICurveCryptoPool.token()`\n  /// + CurveTriCryptoPool => use `ICurveCryptoPool.token()`\n  /// + CurveYPool => covered by `CurvePoolRegistry`\n  /// + CurveYPoolUnderlying => covered by `CurvePoolRegistry`\n  /// + CurveMetaPool => covered by `CurvePoolRegistry`\n  /// + CurveMetaPoolUnderlying => covered by `CurvePoolRegistry`\n  /// + CurveFactoryPlainPool\n  /// + CurveFactoryMetaPool\n  /// + CurveFactoryUSDMetaPoolUnderlying\n  /// + CurveFactoryBTCMetaPoolUnderlying\n  function getCurvePoolToken(PoolType _type, address _pool) public view virtual returns (address) {\n    if (_type == PoolType.CurveYPoolUnderlying) {\n      _pool = ICurveYPoolDeposit(_pool).curve();\n    } else if (_type == PoolType.CurveMetaPoolUnderlying) {\n      _pool = ICurveMetaPoolDeposit(_pool).pool();\n    } else if (_type == PoolType.CurveMetaCryptoPool) {\n      _pool = ICurveMetaPoolDeposit(_pool).pool();\n    }\n    address _token = ICurvePoolRegistry(CURVE_POOL_REGISTRY).get_lp_token(_pool);\n    if (_token != address(0)) {\n      return _token;\n    } else if (uint256(_type) >= 4 && uint256(_type) <= 6) {\n      return ICurveCryptoPool(_pool).token();\n    } else {\n      return _pool;\n    }\n  }\n\n  function swap(uint256 _route, uint256 _amountIn) public payable returns (uint256) {\n    address _pool = address(_route & uint256(1461501637330902918203684832716283019655932542975));\n    PoolType _poolType = PoolType((_route >> 160) & 255);\n    uint256 _indexIn = (_route >> 170) & 3;\n    uint256 _indexOut = (_route >> 172) & 3;\n    uint256 _action = (_route >> 174) & 3;\n    if (_poolType == PoolType.UniswapV2) {\n      return _swapUniswapV2Pair(_pool, _indexIn, _indexOut, _amountIn);\n    } else if (_poolType == PoolType.UniswapV3) {\n      return _swapUniswapV3Pool(_pool, _indexIn, _indexOut, _amountIn);\n    } else if (_poolType == PoolType.BalancerV2) {\n      return _swapBalancerPool(_pool, _indexIn, _indexOut, _amountIn);\n    } else if (_poolType == PoolType.LidoStake) {\n      require(_pool == stETH, \"AladdinZap: pool not stETH\");\n      return _wrapLidoSTETH(_amountIn, _action);\n    } else if (_poolType == PoolType.LidoWrap) {\n      require(_pool == wstETH, \"AladdinZap: pool not wstETH\");\n      return _wrapLidoWSTETH(_amountIn, _action);\n    } else {\n      // all other is curve pool\n      if (_action == 0) {\n        return _swapCurvePool(_poolType, _pool, _indexIn, _indexOut, _amountIn);\n      } else if (_action == 1) {\n        uint256 _tokens = ((_route >> 168) & 3) + 1;\n        return _addCurvePool(_poolType, _pool, _tokens, _indexIn, _amountIn);\n      } else if (_action == 2) {\n        return _removeCurvePool(_poolType, _pool, _indexOut, _amountIn);\n      } else {\n        revert(\"AladdinZap: invalid action\");\n      }\n    }\n  }\n\n  function _swapUniswapV2Pair(\n    address _pool,\n    uint256 _indexIn,\n    uint256 _indexOut,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    uint256 _rIn;\n    uint256 _rOut;\n    address _tokenIn;\n    if (_indexIn < _indexOut) {\n      (_rIn, _rOut, ) = IUniswapV2Pair(_pool).getReserves();\n      _tokenIn = IUniswapV2Pair(_pool).token0();\n    } else {\n      (_rOut, _rIn, ) = IUniswapV2Pair(_pool).getReserves();\n      _tokenIn = IUniswapV2Pair(_pool).token1();\n    }\n    // TODO: handle fee on transfer token\n    uint256 _amountOut = _amountIn * 997;\n    _amountOut = (_amountOut * _rOut) / (_rIn * 1000 + _amountOut);\n\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\n    IERC20Upgradeable(_tokenIn).safeTransfer(_pool, _amountIn);\n    if (_indexIn < _indexOut) {\n      IUniswapV2Pair(_pool).swap(0, _amountOut, address(this), new bytes(0));\n    } else {\n      IUniswapV2Pair(_pool).swap(_amountOut, 0, address(this), new bytes(0));\n    }\n    return _amountOut;\n  }\n\n  function _swapUniswapV3Pool(\n    address _pool,\n    uint256 _indexIn,\n    uint256 _indexOut,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    address _tokenIn;\n    address _tokenOut;\n    uint24 _fee = IUniswapV3Pool(_pool).fee();\n    if (_indexIn < _indexOut) {\n      _tokenIn = IUniswapV3Pool(_pool).token0();\n      _tokenOut = IUniswapV3Pool(_pool).token1();\n    } else {\n      _tokenIn = IUniswapV3Pool(_pool).token1();\n      _tokenOut = IUniswapV3Pool(_pool).token0();\n    }\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\n    _approve(_tokenIn, UNISWAP_V3_ROUTER, _amountIn);\n    IUniswapV3Router.ExactInputSingleParams memory _params = IUniswapV3Router.ExactInputSingleParams(\n      _tokenIn,\n      _tokenOut,\n      _fee,\n      address(this),\n      // solhint-disable-next-line not-rely-on-time\n      block.timestamp + 1,\n      _amountIn,\n      1,\n      0\n    );\n    return IUniswapV3Router(UNISWAP_V3_ROUTER).exactInputSingle(_params);\n  }\n\n  function _swapBalancerPool(\n    address _pool,\n    uint256 _indexIn,\n    uint256 _indexOut,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    bytes32 _poolId = IBalancerPool(_pool).getPoolId();\n    address _tokenIn;\n    address _tokenOut;\n    {\n      (address[] memory _tokens, , ) = IBalancerVault(BALANCER_VAULT).getPoolTokens(_poolId);\n      _tokenIn = _tokens[_indexIn];\n      _tokenOut = _tokens[_indexOut];\n    }\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\n    _approve(_tokenIn, BALANCER_VAULT, _amountIn);\n\n    return\n      IBalancerVault(BALANCER_VAULT).swap(\n        IBalancerVault.SingleSwap({\n          poolId: _poolId,\n          kind: IBalancerVault.SwapKind.GIVEN_IN,\n          assetIn: _tokenIn,\n          assetOut: _tokenOut,\n          amount: _amountIn,\n          userData: new bytes(0)\n        }),\n        IBalancerVault.FundManagement({\n          sender: address(this),\n          fromInternalBalance: false,\n          recipient: payable(address(this)),\n          toInternalBalance: false\n        }),\n        0,\n        // solhint-disable-next-line not-rely-on-time\n        block.timestamp\n      );\n  }\n\n  function _swapCurvePool(\n    PoolType _poolType,\n    address _pool,\n    uint256 _indexIn,\n    uint256 _indexOut,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    address _tokenIn = _getPoolTokenByIndex(_poolType, _pool, _indexIn);\n    address _tokenOut = _getPoolTokenByIndex(_poolType, _pool, _indexOut);\n\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\n    if (_poolType == PoolType.CurveYPoolUnderlying) {\n      _approve(_tokenIn, ICurveYPoolDeposit(_pool).curve(), _amountIn);\n    } else if (_poolType == PoolType.CurveMetaPoolUnderlying) {\n      _approve(_tokenIn, ICurveMetaPoolDeposit(_pool).pool(), _amountIn);\n    } else {\n      _approve(_tokenIn, _pool, _amountIn);\n    }\n\n    uint256 _before = _getBalance(_tokenOut);\n    if (_poolType == PoolType.CurveETHPool) {\n      if (_isETH(_tokenIn)) {\n        _unwrapIfNeeded(_amountIn);\n        ICurveETHPool(_pool).exchange{ value: _amountIn }(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n      } else {\n        ICurveETHPool(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n      }\n    } else if (_poolType == PoolType.CurveCryptoPool) {\n      ICurveCryptoPool(_pool).exchange(_indexIn, _indexOut, _amountIn, 0);\n    } else if (_poolType == PoolType.CurveMetaCryptoPool) {\n      IZapCurveMetaCryptoPool(_pool).exchange_underlying(_indexIn, _indexOut, _amountIn, 0);\n    } else if (_poolType == PoolType.CurveTriCryptoPool) {\n      ICurveTriCryptoPool(_pool).exchange(_indexIn, _indexOut, _amountIn, 0, false);\n    } else if (_poolType == PoolType.CurveBasePool) {\n      ICurveBasePool(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveAPool) {\n      ICurveAPool(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveAPoolUnderlying) {\n      ICurveAPool(_pool).exchange_underlying(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveYPool) {\n      ICurveYPoolSwap(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveYPoolUnderlying) {\n      _pool = ICurveYPoolDeposit(_pool).curve();\n      ICurveYPoolSwap(_pool).exchange_underlying(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveMetaPool) {\n      ICurveMetaPoolSwap(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveMetaPoolUnderlying) {\n      _pool = ICurveMetaPoolDeposit(_pool).pool();\n      ICurveMetaPoolSwap(_pool).exchange_underlying(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveFactoryPlainPool) {\n      ICurveFactoryPlainPool(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0, address(this));\n    } else if (_poolType == PoolType.CurveFactoryMetaPool) {\n      ICurveMetaPoolSwap(_pool).exchange(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveFactoryUSDMetaPoolUnderlying) {\n      ICurveMetaPoolSwap(_pool).exchange_underlying(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else if (_poolType == PoolType.CurveFactoryBTCMetaPoolUnderlying) {\n      ICurveMetaPoolSwap(_pool).exchange_underlying(int128(_indexIn), int128(_indexOut), _amountIn, 0);\n    } else {\n      revert(\"AladdinZap: invalid poolType\");\n    }\n    return _getBalance(_tokenOut) - _before;\n  }\n\n  function _addCurvePool(\n    PoolType _poolType,\n    address _pool,\n    uint256 _tokens,\n    uint256 _indexIn,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    address _tokenIn = _getPoolTokenByIndex(_poolType, _pool, _indexIn);\n\n    _wrapTokenIfNeeded(_tokenIn, _amountIn);\n    if (_poolType == PoolType.CurveFactoryUSDMetaPoolUnderlying) {\n      _approve(_tokenIn, CURVE_3POOL_DEPOSIT_ZAP, _amountIn);\n    } else if (_poolType == PoolType.CurveFactoryBTCMetaPoolUnderlying) {\n      _approve(_tokenIn, CURVE_SBTC_DEPOSIT_ZAP, _amountIn);\n    } else {\n      _approve(_tokenIn, _pool, _amountIn);\n    }\n\n    if (_poolType == PoolType.CurveAPool || _poolType == PoolType.CurveAPoolUnderlying) {\n      // CurveAPool has different interface\n      bool _useUnderlying = _poolType == PoolType.CurveAPoolUnderlying;\n      if (_tokens == 2) {\n        uint256[2] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        return ICurveA2Pool(_pool).add_liquidity(_amounts, 0, _useUnderlying);\n      } else if (_tokens == 3) {\n        uint256[3] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        return ICurveA3Pool(_pool).add_liquidity(_amounts, 0, _useUnderlying);\n      } else {\n        uint256[4] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        return ICurveA4Pool(_pool).add_liquidity(_amounts, 0, _useUnderlying);\n      }\n    } else if (_poolType == PoolType.CurveFactoryUSDMetaPoolUnderlying) {\n      uint256[4] memory _amounts;\n      _amounts[_indexIn] = _amountIn;\n      return ICurveDepositZap(CURVE_3POOL_DEPOSIT_ZAP).add_liquidity(_pool, _amounts, 0);\n    } else if (_poolType == PoolType.CurveFactoryBTCMetaPoolUnderlying) {\n      uint256[4] memory _amounts;\n      _amounts[_indexIn] = _amountIn;\n      return ICurveDepositZap(CURVE_SBTC_DEPOSIT_ZAP).add_liquidity(_pool, _amounts, 0);\n    } else if (_poolType == PoolType.CurveETHPool) {\n      if (_isETH(_tokenIn)) {\n        _unwrapIfNeeded(_amountIn);\n      }\n      uint256[2] memory _amounts;\n      _amounts[_indexIn] = _amountIn;\n      return ICurveETHPool(_pool).add_liquidity{ value: _amounts[0] }(_amounts, 0);\n    } else {\n      address _tokenOut = getCurvePoolToken(_poolType, _pool);\n      uint256 _before = IERC20Upgradeable(_tokenOut).balanceOf(address(this));\n      if (_tokens == 2) {\n        uint256[2] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        ICurveBase2Pool(_pool).add_liquidity(_amounts, 0);\n      } else if (_tokens == 3) {\n        uint256[3] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        ICurveBase3Pool(_pool).add_liquidity(_amounts, 0);\n      } else {\n        uint256[4] memory _amounts;\n        _amounts[_indexIn] = _amountIn;\n        ICurveBase4Pool(_pool).add_liquidity(_amounts, 0);\n      }\n      return IERC20Upgradeable(_tokenOut).balanceOf(address(this)) - _before;\n    }\n  }\n\n  function _removeCurvePool(\n    PoolType _poolType,\n    address _pool,\n    uint256 _indexOut,\n    uint256 _amountIn\n  ) private returns (uint256) {\n    address _tokenOut = _getPoolTokenByIndex(_poolType, _pool, _indexOut);\n    address _tokenIn = getCurvePoolToken(_poolType, _pool);\n\n    uint256 _before = _getBalance(_tokenOut);\n    if (_poolType == PoolType.CurveAPool || _poolType == PoolType.CurveAPoolUnderlying) {\n      // CurveAPool has different interface\n      bool _useUnderlying = _poolType == PoolType.CurveAPoolUnderlying;\n      ICurveAPool(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0, _useUnderlying);\n    } else if (_poolType == PoolType.CurveCryptoPool) {\n      // CurveCryptoPool use uint256 as index\n      ICurveCryptoPool(_pool).remove_liquidity_one_coin(_amountIn, _indexOut, 0);\n    } else if (_poolType == PoolType.CurveMetaCryptoPool) {\n      // CurveMetaCryptoPool use uint256 as index\n      _approve(_tokenIn, _pool, _amountIn);\n      IZapCurveMetaCryptoPool(_pool).remove_liquidity_one_coin(_amountIn, _indexOut, 0);\n    } else if (_poolType == PoolType.CurveTriCryptoPool) {\n      // CurveTriCryptoPool use uint256 as index\n      ICurveTriCryptoPool(_pool).remove_liquidity_one_coin(_amountIn, _indexOut, 0);\n    } else if (_poolType == PoolType.CurveFactoryUSDMetaPoolUnderlying) {\n      _approve(_tokenIn, CURVE_3POOL_DEPOSIT_ZAP, _amountIn);\n      ICurveDepositZap(CURVE_3POOL_DEPOSIT_ZAP).remove_liquidity_one_coin(_pool, _amountIn, int128(_indexOut), 0);\n    } else if (_poolType == PoolType.CurveFactoryBTCMetaPoolUnderlying) {\n      _approve(_tokenIn, CURVE_SBTC_DEPOSIT_ZAP, _amountIn);\n      ICurveDepositZap(CURVE_SBTC_DEPOSIT_ZAP).remove_liquidity_one_coin(_pool, _amountIn, int128(_indexOut), 0);\n    } else if (_poolType == PoolType.CurveMetaPoolUnderlying) {\n      _approve(_tokenIn, _pool, _amountIn);\n      ICurveMetaPoolDeposit(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0);\n    } else if (_poolType == PoolType.CurveYPoolUnderlying) {\n      _approve(_tokenIn, _pool, _amountIn);\n      ICurveYPoolDeposit(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0, true);\n    } else {\n      ICurveBasePool(_pool).remove_liquidity_one_coin(_amountIn, int128(_indexOut), 0);\n    }\n    return _getBalance(_tokenOut) - _before;\n  }\n\n  function _wrapLidoSTETH(uint256 _amountIn, uint256 _action) private returns (uint256) {\n    require(_action == 1, \"AladdinZap: not wrap action\");\n    _unwrapIfNeeded(_amountIn);\n    uint256 _before = IERC20Upgradeable(stETH).balanceOf(address(this));\n    ILidoStETH(stETH).submit{ value: _amountIn }(address(0));\n    return IERC20Upgradeable(stETH).balanceOf(address(this)).sub(_before);\n  }\n\n  function _wrapLidoWSTETH(uint256 _amountIn, uint256 _action) private returns (uint256) {\n    if (_action == 1) {\n      _approve(stETH, wstETH, _amountIn);\n      return ILidoWstETH(wstETH).wrap(_amountIn);\n    } else if (_action == 2) {\n      return ILidoWstETH(wstETH).unwrap(_amountIn);\n    } else {\n      revert(\"AladdinZap: invalid action\");\n    }\n  }\n\n  function _getBalance(address _token) private view returns (uint256) {\n    if (_isETH(_token)) return address(this).balance;\n    else return IERC20Upgradeable(_token).balanceOf(address(this));\n  }\n\n  function _getPoolTokenByIndex(\n    PoolType _type,\n    address _pool,\n    uint256 _index\n  ) private view returns (address) {\n    if (_type == PoolType.CurveMetaCryptoPool) {\n      return IZapCurveMetaCryptoPool(_pool).underlying_coins(_index);\n    } else if (_type == PoolType.CurveAPoolUnderlying) {\n      return ICurveAPool(_pool).underlying_coins(_index);\n    } else if (_type == PoolType.CurveYPoolUnderlying) {\n      return ICurveYPoolDeposit(_pool).underlying_coins(int128(_index));\n    } else if (_type == PoolType.CurveMetaPoolUnderlying) {\n      if (_index == 0) return ICurveMetaPoolDeposit(_pool).coins(_index);\n      else return ICurveMetaPoolDeposit(_pool).base_coins(_index - 1);\n    } else if (_type == PoolType.CurveFactoryUSDMetaPoolUnderlying) {\n      if (_index == 0) return ICurveBasePool(_pool).coins(_index);\n      else return _get3PoolTokenByIndex(_index - 1);\n    } else if (_type == PoolType.CurveFactoryBTCMetaPoolUnderlying) {\n      if (_index == 0) return ICurveBasePool(_pool).coins(_index);\n      else return _getsBTCTokenByIndex(_index - 1);\n    } else {\n      // vyper is weird, some use `int128`\n      try ICurveBasePool(_pool).coins(_index) returns (address _token) {\n        return _token;\n      } catch {\n        return ICurveBasePool(_pool).coins(int128(_index));\n      }\n    }\n  }\n\n  function _get3PoolTokenByIndex(uint256 _index) private pure returns (address) {\n    if (_index == 0) return DAI;\n    else if (_index == 1) return USDC;\n    else if (_index == 2) return USDT;\n    else return address(0);\n  }\n\n  function _getsBTCTokenByIndex(uint256 _index) private pure returns (address) {\n    if (_index == 0) return renBTC;\n    else if (_index == 1) return WBTC;\n    else if (_index == 2) return sBTC;\n    else return address(0);\n  }\n\n  function _isETH(address _token) internal pure returns (bool) {\n    return _token == ETH || _token == address(0);\n  }\n\n  function _wrapTokenIfNeeded(address _token, uint256 _amount) internal {\n    if (_token == WETH && IERC20Upgradeable(_token).balanceOf(address(this)) < _amount) {\n      IWETH(_token).deposit{ value: _amount }();\n    }\n  }\n\n  function _unwrapIfNeeded(uint256 _amount) internal {\n    if (address(this).balance < _amount) {\n      IWETH(WETH).withdraw(_amount);\n    }\n  }\n\n  function _approve(\n    address _token,\n    address _spender,\n    uint256 _amount\n  ) private {\n    if (!_isETH(_token) && IERC20Upgradeable(_token).allowance(address(this), _spender) < _amount) {\n      // hBTC cannot approve 0\n      if (_token != 0x0316EB71485b0Ab14103307bf65a021042c6d380) {\n        IERC20Upgradeable(_token).safeApprove(_spender, 0);\n      }\n      IERC20Upgradeable(_token).safeApprove(_spender, _amount);\n    }\n  }\n\n  // solhint-disable-next-line no-empty-blocks\n  receive() external payable {}\n}\n"
    },
    "contracts/gateways/ZapGatewayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../zap/TokenZapLogic.sol\";\n\nabstract contract ZapGatewayBase is Ownable {\n  using SafeERC20 for IERC20;\n  using SafeMath for uint256;\n\n  /// @notice Emitted when the zap logic contract is updated.\n  /// @param _oldLogic The old logic address.\n  /// @param _newLogic The new logic address.\n  event UpdateLogic(address _oldLogic, address _newLogic);\n\n  /// @notice The address of zap logic contract.\n  address public logic;\n\n  /// @dev Internal function to transfer token into this contract.\n  /// @param _token The address of token to transfer.\n  /// @param _amount The amount of token to transfer.\n  function _transferTokenIn(address _token, uint256 _amount) internal returns (uint256) {\n    if (_token == address(0)) {\n      require(msg.value == _amount, \"msg.value mismatch\");\n    } else {\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\n      IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n      _amount = IERC20(_token).balanceOf(address(this)).sub(_balance);\n    }\n\n    return _amount;\n  }\n\n  /// @dev Internal function to do zap.\n  /// @param _routes The routes to do zap. See comments in `TokenZapLogic` for more details.\n  /// @param _amountIn The amount of input token.\n  function _zap(uint256[] memory _routes, uint256 _amountIn) internal returns (uint256) {\n    address _logic = logic;\n    for (uint256 i = 0; i < _routes.length; i++) {\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool _success, bytes memory _result) = _logic.delegatecall(\n        abi.encodeWithSelector(TokenZapLogic.swap.selector, _routes[i], _amountIn)\n      );\n      // below lines will propagate inner error up\n      if (!_success) {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let ptr := mload(0x40)\n          let size := returndatasize()\n          returndatacopy(ptr, 0, size)\n          revert(ptr, size)\n        }\n      }\n      _amountIn = abi.decode(_result, (uint256));\n    }\n    return _amountIn;\n  }\n\n  /// @notice Update zap logic contract.\n  /// @param _newLogic The address to update.\n  function updateLogic(address _newLogic) external onlyOwner {\n    address _oldLogic = logic;\n    logic = _newLogic;\n\n    emit UpdateLogic(_oldLogic, _newLogic);\n  }\n\n  // solhint-disable-next-line no-empty-blocks\n  receive() external payable {}\n\n  /// @notice Emergency function\n  function execute(\n    address _to,\n    uint256 _value,\n    bytes calldata _data\n  ) external payable onlyOwner returns (bool, bytes memory) {\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\n    return (success, result);\n  }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"../../math/SafeMathUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using SafeMathUpgradeable for uint256;\n    using AddressUpgradeable for address;\n\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IBalancerVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ninterface IBalancerVault {\n  enum SwapKind {\n    GIVEN_IN,\n    GIVEN_OUT\n  }\n\n  struct SingleSwap {\n    bytes32 poolId;\n    SwapKind kind;\n    address assetIn;\n    address assetOut;\n    uint256 amount;\n    bytes userData;\n  }\n\n  struct FundManagement {\n    address sender;\n    bool fromInternalBalance;\n    address payable recipient;\n    bool toInternalBalance;\n  }\n\n  function getPoolTokens(bytes32 poolId)\n    external\n    view\n    returns (\n      address[] memory tokens,\n      uint256[] memory balances,\n      uint256 lastChangeBlock\n    );\n\n  function swap(\n    SingleSwap memory singleSwap,\n    FundManagement memory funds,\n    uint256 limit,\n    uint256 deadline\n  ) external payable returns (uint256 amountCalculated);\n\n  struct JoinPoolRequest {\n    address[] assets;\n    uint256[] maxAmountsIn;\n    bytes userData;\n    bool fromInternalBalance;\n  }\n\n  function joinPool(\n    bytes32 poolId,\n    address sender,\n    address recipient,\n    JoinPoolRequest memory request\n  ) external payable;\n}\n"
    },
    "contracts/interfaces/IBalancerPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IBalancerPool {\n  function getPoolId() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IConvexCRVDepositor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IConvexCRVDepositor {\n  function deposit(\n    uint256 _amount,\n    bool _lock,\n    address _stakeAddress\n  ) external;\n\n  function deposit(uint256 _amount, bool _lock) external;\n\n  function lockIncentive() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICurveAPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n\ninterface ICurveAPool {\n  function remove_liquidity_one_coin(\n    uint256 _token_amount,\n    int128 i,\n    uint256 _min_amount,\n    bool _use_underlying\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function exchange_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function get_dy_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  function underlying_coins(uint256 index) external view returns (address);\n\n  function lp_token() external view returns (address);\n}\n\n/// @dev This is the interface of Curve aave-style Pool with 2 tokens, examples:\n/// + saave: https://curve.fi/saave\ninterface ICurveA2Pool is ICurveAPool {\n  function add_liquidity(\n    uint256[2] memory _amounts,\n    uint256 _min_mint_amount,\n    bool _use_underlying\n  ) external returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve aave-style Pool with 3 tokens, examples:\n/// aave: https://curve.fi/aave\n/// ironbank: https://curve.fi/ib\ninterface ICurveA3Pool is ICurveAPool {\n  function add_liquidity(\n    uint256[3] memory _amounts,\n    uint256 _min_mint_amount,\n    bool _use_underlying\n  ) external returns (uint256);\n\n  function calc_token_amount(uint256[3] memory amounts, bool is_deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve aave-style Pool with 3 tokens, examples:\ninterface ICurveA4Pool is ICurveAPool {\n  function add_liquidity(\n    uint256[4] memory _amounts,\n    uint256 _min_mint_amount,\n    bool _use_underlying\n  ) external returns (uint256);\n\n  function calc_token_amount(uint256[4] memory amounts, bool is_deposit) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICurveBasePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n\ninterface ICurveBasePool {\n  function remove_liquidity_one_coin(\n    uint256 _token_amount,\n    int128 i,\n    uint256 min_amount\n  ) external;\n\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external;\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function get_dy_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  // ren and sbtc pool\n  function coins(int128 index) external view returns (address);\n}\n\n/// @dev This is the interface of Curve base-style Pool with 2 tokens, examples:\n/// hbtc: https://curve.fi/hbtc\n/// ren: https://curve.fi/ren\n/// eurs: https://www.curve.fi/eurs\ninterface ICurveBase2Pool {\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external;\n\n  function calc_token_amount(uint256[2] memory amounts, bool deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve base-style Pool with 3 tokens, examples:\n/// sbtc: https://curve.fi/sbtc\n/// 3pool: https://curve.fi/3pool\ninterface ICurveBase3Pool {\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;\n\n  function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve base-style Pool with 4 tokens, examples:\ninterface ICurveBase4Pool {\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external;\n\n  function calc_token_amount(uint256[4] memory amounts, bool deposit) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICurveCryptoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable func-name-mixedcase, var-name-mixedcase\n\n/// @dev This is the interface of Curve Crypto Pools (including Factory Pool), examples:\n/// + cvxeth: https://curve.fi/cvxeth\n/// + crveth: https://curve.fi/crveth\n/// + eursusd: https://curve.fi/eursusd\n/// + teth: https://curve.fi/teth\n/// + spelleth: https://curve.fi/spelleth\n\n/// + FXS/ETH: https://curve.fi/factory-crypto/3\n/// + YFI/ETH: https://curve.fi/factory-crypto/8\n/// + AAVE/palStkAAVE: https://curve.fi/factory-crypto/9\n/// + DYDX/ETH: https://curve.fi/factory-crypto/10\n/// + SDT/ETH: https://curve.fi/factory-crypto/11\n/// + BTRFLY/ETH: https://curve.fi/factory-crypto/17\n/// + cvxFXS/FXS: https://curve.fi/factory-crypto/18\ninterface ICurveCryptoPool {\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    uint256 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\n\n  function exchange(\n    uint256 i,\n    uint256 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external payable returns (uint256);\n\n  function exchange_underlying(\n    uint256 i,\n    uint256 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external payable returns (uint256);\n\n  function get_dy(\n    uint256 i,\n    uint256 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  function token() external view returns (address);\n}\n\n/// @dev This is the interface of Zap Contract for Curve Meta Crypto Pools, examples:\n/// + eurtusd: https://curve.fi/eurtusd\n/// + xautusd: https://curve.fi/xautusd\ninterface IZapCurveMetaCryptoPool {\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[4] memory amounts) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    uint256 i,\n    uint256 min_amount\n  ) external;\n\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\n\n  function exchange_underlying(\n    uint256 i,\n    uint256 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function get_dy_underlying(\n    uint256 i,\n    uint256 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  function underlying_coins(uint256 index) external view returns (address);\n\n  function token() external view returns (address);\n\n  function base_pool() external view returns (address);\n\n  function pool() external view returns (address);\n}\n\n/// @dev This is the interface of Curve Tri Crypto Pools, examples:\n/// + tricrypto2: https://curve.fi/tricrypto2\n/// + tricrypto: https://curve.fi/tricrypto\ninterface ICurveTriCryptoPool {\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;\n\n  function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    uint256 i,\n    uint256 min_amount\n  ) external;\n\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\n\n  function exchange(\n    uint256 i,\n    uint256 j,\n    uint256 dx,\n    uint256 min_dy,\n    bool use_eth\n  ) external;\n\n  function get_dy(\n    uint256 i,\n    uint256 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function token() external view returns (address);\n\n  function coins(uint256 index) external returns (address);\n}\n"
    },
    "contracts/interfaces/ICurveETHPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable func-name-mixedcase, var-name-mixedcase\n\n/// @dev This is the interface of Curve ETH Pools (including Factory Pool), examples:\n/// + steth: https://curve.fi/steth\n/// + seth: https://curve.fi/seth\n/// + reth: https://curve.fi/reth\n/// + ankreth: https://curve.fi/ankreth\n/// + alETH [Factory]: https://curve.fi/factory/38\n/// + Ankr Reward-Earning Staked ETH [Factory]: https://curve.fi/factory/56\ninterface ICurveETHPool {\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 _token_amount,\n    int128 i,\n    uint256 _min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external payable returns (uint256);\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  function lp_token() external view returns (address);\n}\n"
    },
    "contracts/interfaces/ICurveFactoryMetaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n\n/// @dev This is the interface of Curve Factory Meta Pool (with 3pool or sbtc), examples:\n/// + mim: https://curve.fi/mim\n/// + frax: https://curve.fi/frax\n/// + tusd: https://curve.fi/tusd\n/// + ousd + 3crv: https://curve.fi/factory/9\n/// + fei + 3crv: https://curve.fi/factory/11\n/// + dola + 3crv: https://curve.fi/factory/27\n/// + ust + 3crv: https://curve.fi/factory/53\n/// + usdp + 3crv: https://curve.fi/factory/59\n/// + wibBTC + crvRenWSBTC: https://curve.fi/factory/60\n/// + bean + 3crv: https://curve.fi/factory/81\n/// + usdv + 3crv: https://curve.fi/factory/82\ninterface ICurveFactoryMetaPool {\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    int128 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function exchange_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function get_dy_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n}\n\ninterface ICurveDepositZap {\n  function add_liquidity(\n    address _pool,\n    uint256[4] memory _deposit_amounts,\n    uint256 _min_mint_amount\n  ) external returns (uint256);\n\n  function calc_token_amount(\n    address _pool,\n    uint256[4] memory _amounts,\n    bool _is_deposit\n  ) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    address _pool,\n    uint256 _burn_amount,\n    int128 i,\n    uint256 _min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(\n    address _pool,\n    uint256 _token_amount,\n    int128 i\n  ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICurveFactoryPlainPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\ninterface ICurveFactoryPlainPool {\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    int128 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 _dx,\n    uint256 _min_dy,\n    address _receiver\n  ) external returns (uint256);\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n}\n\n/// @dev This is the interface of Curve Factory Plain Pool with 2 tokens, examples:\ninterface ICurveFactoryPlain2Pool is ICurveFactoryPlainPool {\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts, bool _is_deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve Factory Plain Pool with 3 tokens, examples:\ninterface ICurveFactoryPlain3Pool is ICurveFactoryPlainPool {\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[3] memory amounts, bool _is_deposit) external view returns (uint256);\n}\n\n/// @dev This is the interface of Curve Factory Plain Pool with 4 tokens, examples:\ninterface ICurveFactoryPlain4Pool is ICurveFactoryPlainPool {\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[4] memory amounts, bool _is_deposit) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICurveMetaPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n\n/// @dev This is the interface of Curve Meta Pool with (3pool or sbtc), examples:\n/// + ust: https://curve.fi/ust\n/// + dusd: https://www.curve.fi/dusd\n/// + gusd: https://curve.fi/gusd\n/// + husd: https://curve.fi/husd\n/// + rai: https://curve.fi/rai\n/// + musd: https://curve.fi/musd\n///\n/// + bbtc: https://curve.fi/bbtc\n/// + obtc: https://www.curve.fi/obtc\n/// + pbtc: https://www.curve.fi/pbtc\n/// + tbtc: https://www.curve.fi/tbtc\ninterface ICurveMetaPoolSwap {\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[2] memory amounts, bool is_deposit) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    int128 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\n\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function exchange_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external returns (uint256);\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function get_dy_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function base_pool() external view returns (address);\n\n  function base_coins(uint256 index) external view returns (address);\n\n  function coins(uint256 index) external view returns (address);\n\n  function token() external view returns (address);\n}\n\ninterface ICurveMetaPoolDeposit {\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\n\n  function calc_token_amount(uint256[4] memory amounts, bool is_deposit) external view returns (uint256);\n\n  function remove_liquidity_one_coin(\n    uint256 token_amount,\n    int128 i,\n    uint256 min_amount\n  ) external returns (uint256);\n\n  function calc_withdraw_one_coin(uint256 token_amount, int128 i) external view returns (uint256);\n\n  function token() external view returns (address);\n\n  function base_pool() external view returns (address);\n\n  function pool() external view returns (address);\n\n  function coins(uint256 index) external view returns (address);\n\n  function base_coins(uint256 index) external view returns (address);\n}\n"
    },
    "contracts/interfaces/ICurveYPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n\ninterface ICurveYPoolSwap {\n  function exchange(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external;\n\n  function exchange_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx,\n    uint256 min_dy\n  ) external;\n\n  function get_dy(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function get_dy_underlying(\n    int128 i,\n    int128 j,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function coins(uint256 index) external view returns (address);\n\n  function underlying_coins(uint256 index) external view returns (address);\n}\n\ninterface ICurveYPoolDeposit {\n  function remove_liquidity_one_coin(\n    uint256 _token_amount,\n    int128 i,\n    uint256 _min_amount,\n    bool donate_dust\n  ) external;\n\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\n\n  function token() external view returns (address);\n\n  function curve() external view returns (address);\n\n  function coins(uint256 index) external view returns (address);\n\n  function underlying_coins(uint256 index) external view returns (address);\n\n  function coins(int128 index) external view returns (address);\n\n  function underlying_coins(int128 index) external view returns (address);\n}\n\n// solhint-disable var-name-mixedcase, func-name-mixedcase\n/// @dev This is the interface of Curve yearn-style Pool with 2 tokens, examples:\n/// + compound: https://curve.fi/compound\ninterface ICurveY2PoolDeposit is ICurveYPoolDeposit {\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n}\n\ninterface ICurveY2PoolSwap is ICurveYPoolSwap {\n  function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\n}\n\n/// @dev This is the interface of Curve yearn-style Pool with 3 tokens, examples:\n/// usdt: https://curve.fi/usdt\ninterface ICurveY3PoolDeposit is ICurveYPoolDeposit {\n  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n}\n\ninterface ICurveY3PoolSwap is ICurveYPoolSwap {\n  function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount) external;\n}\n\n/// @dev This is the interface of Curve yearn-style Pool with 4 tokens, examples:\n/// + pax: https://curve.fi/pax\n/// + y: https://curve.fi/iearn\n/// + busd: https://curve.fi/busd\n/// + susd v2: https://curve.fi/susdv2\ninterface ICurveY4PoolDeposit is ICurveYPoolDeposit {\n  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n}\n\ninterface ICurveY4PoolSwap is ICurveYPoolSwap {\n  function add_liquidity(uint256[4] memory _amounts, uint256 _min_mint_amount) external;\n}\n"
    },
    "contracts/interfaces/ILidoStETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface ILidoStETH {\n  function submit(address _referral) external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILidoWstETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface ILidoWstETH {\n  function wrap(uint256 _stETHAmount) external returns (uint256);\n\n  function unwrap(uint256 _wstETHAmount) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IUniswapV2Pair {\n  function token0() external returns (address);\n\n  function token1() external returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 _reserve0,\n      uint112 _reserve1,\n      uint32 _blockTimestampLast\n    );\n\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IUniswapV3Pool {\n  function token0() external returns (address);\n\n  function token1() external returns (address);\n\n  function fee() external returns (uint24);\n}\n"
    },
    "contracts/interfaces/IUniswapV3Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ninterface IUniswapV3Router {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  function exactInputSingle(ExactInputSingleParams calldata params) external returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256 wad) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}