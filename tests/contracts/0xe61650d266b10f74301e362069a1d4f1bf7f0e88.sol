{{
  "language": "Solidity",
  "sources": {
    "/contracts/SaleGama.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"./lib/ISarugami.sol\";\r\nimport \"./lib/ISarugamiGamaSummon.sol\";\r\n\r\ncontract SaleGama is Ownable, ReentrancyGuard {\r\n    bool public isMintActive = false;\r\n    uint256 public lockedAmountHolders = 2510;\r\n    uint256 public minted = 0;\r\n    uint256 public serviceFee = 6000000000000000;\r\n\r\n    bytes32 public merkleRootRegularWhitelist = \"0x\";\r\n    bytes32 public merkleRootAlphaWhitelist = \"0x\";\r\n\r\n    uint256 public startMint = 1661626800;\r\n    uint256 public alphaSeconds = 7200;//2 hours\r\n    uint256 public whitelistSeconds = 86400;//24 hours\r\n\r\n    mapping(uint256 => bool) public nftsClaimed;\r\n    mapping(address => bool) public walletsClaimed;\r\n    ISarugami public sarugami;\r\n    ISarugamiGamaSummon public summon;\r\n\r\n    constructor(\r\n        address sarugamiAddress,\r\n        address summonAddress\r\n    ) {\r\n        sarugami = ISarugami(sarugamiAddress);\r\n        summon = ISarugamiGamaSummon(summonAddress);\r\n    }\r\n\r\n    function mintHolder(uint256[] memory ids) public payable nonReentrant {\r\n        require(isMintActive == true, \"Holder free mint not open\");\r\n        require(msg.value == serviceFee, \"ETH sent does not match the Service Fee\");\r\n        require(block.timestamp > startMint, \"Sale not open\");\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            require(sarugami.ownerOf(ids[i]) == _msgSender(), \"You are not the owner\");\r\n            require(nftsClaimed[ids[i]] == false, \"Already claimed\");\r\n            nftsClaimed[ids[i]] = true;\r\n        }\r\n\r\n        summon.mint(msg.sender, ids.length);\r\n    }\r\n\r\n    function mintWhitelist(bytes32[] calldata merkleProof) public payable nonReentrant {\r\n        require(isMintActive == true, \"Mint is not active\");\r\n        require(walletsClaimed[msg.sender] == false, \"Max 1 per wallet\");\r\n        require(msg.value == serviceFee, \"ETH sent does not match the Service Fee\");\r\n        require(block.timestamp > startMint, \"Sale not open\");\r\n        require(minted+1 < lockedAmountHolders, \"Limit reached, Holders have 24 hours to mint, then the remaining supply will be unlocked\");\r\n\r\n        if(block.timestamp < startMint + alphaSeconds){\r\n            require(isWalletOnAlphaWhitelist(merkleProof, msg.sender) == true, \"Invalid proof, Alpha whitelist is minting now\");\r\n        } else {\r\n            if (block.timestamp > startMint + alphaSeconds && block.timestamp < startMint + whitelistSeconds) {\r\n                require(isWalletOnAlphaWhitelist(merkleProof, msg.sender) == true || isWalletOnRegularWhitelist(merkleProof, msg.sender) == true, \"Invalid proof, your wallet isn't listed in any whitelist\");\r\n            }\r\n        }\r\n\r\n        minted += 1;\r\n        walletsClaimed[msg.sender] = true;\r\n        summon.mint(msg.sender, 1);\r\n    }\r\n\r\n    function isWalletOnAlphaWhitelist(\r\n        bytes32[] calldata merkleProof,\r\n        address wallet\r\n    ) private view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(wallet));\r\n        return MerkleProof.verify(merkleProof, merkleRootAlphaWhitelist, leaf);\r\n    }\r\n\r\n    function isWalletOnRegularWhitelist(\r\n        bytes32[] calldata merkleProof,\r\n        address wallet\r\n    ) private view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(wallet));\r\n        return MerkleProof.verify(merkleProof, merkleRootRegularWhitelist, leaf);\r\n    }\r\n\r\n    function changePriceServiceFee(uint256 newPrice) external onlyOwner {\r\n        serviceFee = newPrice;\r\n    }\r\n\r\n    function changeAlphaSeconds(uint256 newTimestamp) external onlyOwner {\r\n        alphaSeconds = newTimestamp;\r\n    }\r\n\r\n    function changeWhitelistSeconds(uint256 newTimestamp) external onlyOwner {\r\n        whitelistSeconds = newTimestamp;\r\n    }\r\n\r\n    function changeStartMint(uint256 newTimestamp) external onlyOwner {\r\n        startMint = newTimestamp;\r\n    }\r\n\r\n    function changeLockedAmountHolders(uint256 newLock) external onlyOwner {\r\n        lockedAmountHolders = newLock;\r\n    }\r\n\r\n    function setMerkleTreeRegularWhitelist(bytes32 newMerkleRoot) external onlyOwner {\r\n        merkleRootRegularWhitelist = newMerkleRoot;\r\n    }\r\n\r\n    function setMerkleTreeAlphaWhitelist(bytes32 newMerkleRoot) external onlyOwner {\r\n        merkleRootAlphaWhitelist = newMerkleRoot;\r\n    }\r\n\r\n    function mintGiveAwayWithAddresses(address[] calldata supporters) external onlyOwner {\r\n        // Reserved for people who helped this project and giveaways\r\n        for (uint256 index; index < supporters.length; index++) {\r\n            minted += 1;\r\n            summon.mint(supporters[index], 1);\r\n        }\r\n    }\r\n\r\n    function changeMintStatus() external onlyOwner {\r\n        isMintActive = !isMintActive;\r\n    }\r\n\r\n    function removeDustFunds(address treasury) external onlyOwner {\r\n        (bool success,) = treasury.call{value : address(this).balance}(\"\");\r\n        require(success, \"funds were not sent properly to treasury\");\r\n    }\r\n\r\n    function removeFunds() external onlyOwner {\r\n        uint256 funds = address(this).balance;\r\n\r\n        (bool devShare,) = 0xDEcB0fB8d7BB68F0CE611460BE8Ca0665A72d47E.call{\r\n        value : funds * 10 / 100\r\n        }(\"\");\r\n\r\n        (bool operationalShare,) = 0x7F1a6c8DFF62e1595A699e9f0C93B654CcfC5Fe1.call{\r\n        value : funds * 15 / 100\r\n        }(\"\");\r\n\r\n        (bool modsShare,) = 0x4f45a514EeB7D4a6614eC1F76eec5aB75922A86D.call{\r\n        value : funds * 5 / 100\r\n        }(\"\");\r\n\r\n        (bool artistShare,) = 0x289660e62ff872536330938eb843607FC53E0a34.call{\r\n        value : funds * 30 / 100\r\n        }(\"\");\r\n\r\n        (bool costShare,) = 0xc27aa218950d40c2cCC74241a3d0d779b52666f3.call{\r\n        value : funds * 10 / 100\r\n        }(\"\");\r\n\r\n        (bool artistAndOperationalShare,) = 0xDEEf09D53355E838db08E1DBA9F86a5A7DfF2124.call{\r\n        value : address(this).balance\r\n        }(\"\");\r\n\r\n        require(\r\n            devShare &&\r\n            modsShare &&\r\n            artistShare &&\r\n            operationalShare &&\r\n            costShare &&\r\n            artistAndOperationalShare,\r\n            \"funds were not sent properly\"\r\n        );\r\n    }\r\n}\r\n"
    },
    "/contracts/lib/ISarugamiGamaSummon.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISarugamiGamaSummon {\r\n    function mint(address, uint256) external returns (uint256);\r\n    function ownerOf(uint256) external returns (address);\r\n}\r\n"
    },
    "/contracts/lib/ISarugami.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\ninterface ISarugami {\r\n    function mint(address, uint256) external returns (uint256);\r\n    function ownerOf(uint256) external returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}