{{
  "language": "Solidity",
  "sources": {
    "contracts/ZeroXGakuen.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"./ERC721ASGakuen.sol\";\n\n//\n//\n//                                              [Note from Dev]\n//                                         PRAISE THE KAORI-CHAN!!!!!\n//\n//                                                .::-----:::.\n//                                         :=+#%%%@@@@@%%%#####*+=-.\n//                                .-===-=#@@@@@@@@@@@%%###########***=-.\n//                             -+*#******#######%@@@%#####%##########***+-\n//                          -*##%###*********#***##%%@###**#%%%########***#=\n//                       .+%%%@@###########%@@######*##%*##***#@%########**%#-\n//                     :*@@@@@%%@@@@@@@@@@@@@@@#%@@%##########**#@%#########%#*:\n//                    *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%############%@%########%##=\n//                  -@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%@@%%####%@%#%#####%##=\n//                 +@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@#*%@@@%%%%%@@%%%%##@###+\n//              .+@@@@@@@@@@@@@@@@@@@@@#*@@@@@@@@@@@@@@@@@@@#*@@@@@%%%%@@@%%%%%@%%#+\n//             =%*@@@@@@@@@@@@@@@@@@@@+:#@@@@@@@@@@@@@@@@@@@@#*@@@@@@@%%@@@@@%%@%%%%-\n//           .++*%@@@@@@@@@@@@@@@@@@@=:.%@@@@@@@@@@@@@%@@@@@@@%%@@@#%@@%@@@@@@@@@%%%#\n//          .-.**@@@@@@@@@@@@@@@@@@@=.  %@@@@@@@@@@@@@@%%@@@@@@@@%:=%@@@%@@@@@@@@@@@%+\n//          - +*#%@@@@@@@@@@@@@@@@@+    %@@@@@@@@@@@@@@@@%=-=+*%#:*@@@@@@%@@@@@@@@@@@%.\n//         .:.-*#%@@@@@@*@@@@@@@@@*     #@*+@@@@@%@@@@@@@@@@@%#-=%%#%@@@@@@@@@@@@@@@@@+\n//         . :.#*%@@@@@##@@@@@@@@%      +@%+%%@@@@#%@@@@@@@@@#:#@@@@@**@@@@@@@@@%@@@@@%\n//         .=  %+%@@@@@*@@@@@@#@@:      -@@#@@@@@@@%@@@@@@@@=+#@@@%%@@%#@@@@@@@@%%@@@@@:\n//         := :@*@@@@@@@@@+@@*-@*       .#@@@@@@@@@@@@@@@@@#%@@@@@%=#+.*@@@%@@@@**@@@@@-\n//         .: +@%%@@@@@@@=-@@:-@:        -@%@@@@@@*@@@@@@@@@@#===+*#:=%@@@@#@@@%::@@@@@+\n//         .  +@@@@@@@@@=. =+  *         .=**@@%@@#*@@@@@@@@@@@@@%*:#%#%%@@+#@@+-.#@@@@*\n//         ...-#@@@@@@@%.:. .             .--:*#+%@-:*@@@@@@@@@@@+-@@@@@%+#=+@%=++*@@@@#\n//          .. :*@@@@@@#@@##%+:              .    :=. .=*%@@@@@*=#%@@@@@#@@-#@%####@@@@%\n//          .. ..=#@@@@+%: #@@@#.                 .....  .:%@@@#@@@@@#@#@@#-@@@@@@%@@@@%\n//           -  .:.*@@@+.. #@@*@@:             -#@@@@@@#@@=**#@@@@%#+*@@@@-*@@@@@@@@@@@@\n//                :*@%@+.  -@@@@#             :%:+@@@:@@**#@*+@@@@#*#@@@@+-@%@@@@@@@@@@%\n//                 .*%%-   .-++-                 +@@@*@@= +-:@@@@@@@@@@@*=:*%@@@@@@@@@@*\n//                 .*-%+.                        .#@@@#:   .+*@@@@@@@@@%**.+@@@@@@@@@@@-\n//                 %#%@:                          ...      .+@@@@@@%*@@* --%@@@@@@@@@@*.\n//                #@%@@-                                  =%#@@@@@..**::.=+@@@@@@@@@@%=\n//               :@-#@@+                                 :. :@@@@%.-=+:=*#@@@@@@@@@@%*=\n//               *= +@%+-                                  .+@@@@*+.=#+=+@@@@@@@@@@@%%-\n//               #  :%* .=.                               -#%@@@%##%+=+%@@@@@@@@@@@@@#\n//               +   =- +@%-     .=---:.                -*%#%@@#*==*+@@@@@@@@@@@@@@@@.\n//               =   *=*+-. =: .+-  -+              .---.#%%@@%#+=*#%@@@@@@@@@@@@@@@-\n//                * :=  .  . =%#:   =-          :---:....@@@@%%##%@@@@@@@@@@@@@@@@@=\n//                 -..    ::.=@++:. #      :-=++-. ......@@@@@%%@@@@@@@@@@@@@@@@@%:\n//                       -:::-*#+=+*=.::+%%*=-.     . .:----+%%@@@#*@@@@@#+=#@%*=.\n//                                      =#-.        .:. :   . ==-. . ::.   .:.\n//                                      -:               .\n//                                      :                :\n//                                      :                =.           ... .\n//                                      -                 =..:::::...:..  .=+.\n//                                     :.                 ::.::..:==:       -%+\n//                                    :-               .--:::-:-+%*.         -%#\n//                                 .:--              .=%%%##*-:#@*            +%=\n//                              .::.              ..+%%%@@@*..+@@+##:         :%%\n//                -=++*##%@%-               .....:+%%*##%#- .*@@@@+-.         :*@=\n//               :#######+==-.           ...   -*@%+*++::   +@@@@+===.    ..:.:-#%\n//               -=+++=*+--::-=:     ..     :+@@@@+=:::    =%@@@@#+++-.:::::::::-\n//               :::::::...  .:-         .=%@@@@@#-.   .  .#@@@@+===-:::........:\n//               .... .      :+#%+:   .:=*%@@@#=:.-.      =@@@#=:..             :\n//             .     ..    .-+*##**=+#%@@@@@*--+%@-     .=+@%-                 -\n//             :    ::...::-=*#%%%%%%@@@@@@##@@@%.      =#+@=                 .-\n//        .    :. :-::::::-===+++*%%###%@@@@@%*-        #%@@.                 :.\n//         ... -:==-::.. .:--=--=+**#%%%%%#*-.         .#@@%                 .-\n//           .-+==-.    .:-----=*+===++*=-.             @@@-                .::\n//           +=-:          .:-=-:.:---..               :@@#                 .=\n//         :-:.            ..   .:..                   -@@.                ..-\n//\n//\n//  @@@@@%+@@@@@-@@@@%#: =%@@@#-           -#@@@%+  -@@@@#  %@@--@@#.@@%.%@@:+@@@@@.*%%- %%#\n// .=*@@@:%@@*==+@@+:@@#*@@#-@@@-@@#-+#@@#:@@@.@@@: %@@@@# .@@%-@@# +@@.:@@@ %@*==+ @@@#-@@+\n//  .@@@-.%@#=- %@#*=#@=@@@-+@@* *@@--@@* *@@* === =@@.@@# =@@*%@#  %@@:=@@*.%@#=- -@@@@#@@:\n// .@@@- +@@@@#.@@@@@@*-@@@ %@@-  =@@@@+  @@@ @@@#.@@@:@@# #@@@@@+ .@@@.=@@-+@@@@#.*@@%@@@@\n//.@@@=  #@#=  =@@%:@@%*@@*:@@@  .%@--@%::@@@  %@=*@@@@@@#.@@%-%@% =@@%:%@@ #@#=   @@#+@@@+\n//%@@@@@-@@@@@+%@@==@@++@@%%@@- :@@#-+#@@+@@@@@@@-@@@:*@@*=@@=.*%@.=@@@@@@--@@@@@+-@@=:@@@:\n//\n//\n/// @title 0xGakuen NFT smart contact\n/// @author Comet, JayB\ncontract ZeroXGakuen is ERC721ASGakuen, Ownable, ReentrancyGuard {\n    // 0b'00000111\n    // We can know amount user purchased by\n    // (purchasedInfo >> Identifier) & AMOUNT_MASK\n    uint256 internal constant AMOUNT_MASK = uint256(7);\n    //0b'1111...1000\n    uint256 internal constant PUBLIC_CLEAR_MASK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8;\n\n    string private baseURI;\n    bool private hasExtention;\n\n    // Compiler will pack it into uint256\n    struct PrivateSaleConfig {\n        // [uint32 for time]\n        // Maximum value of uint32 == 4294967295 > Feb 07th, 2106\n        // Therefore, Impossible to overflow\n\n        // [Private Sale Config Structure]\n        // startTime      : time when sale starts\n        // endTime        : time when sale ends\n        // identifier : parameter to identify personal purchase info\n        //                  see purchaseInfo\n        // merkleRoot     : merkleRoot to manage whitelist\n        // perosonalLimit : amount user can purchase, lte 3\n        //\n        // data above will be 120 bits\n        // and there will be pair of data\n        // so it is 240 bits\n        // \n        // totalPurchase is 16bits, 240+16 = 256 bits it will be packed as\n        //\n        uint32    firstStartTime;\n        uint32    firstEndTime;\n        // identifier also used as sale mask.\n        // it should be >>3\n        uint8     firstIdentifier;\n        bytes32   firstMerkleRoot;\n        uint8     firstPersonalLimit;\n\n        uint32    secondStartTime;\n        uint32    secondEndTime;\n        // identifier also used as sale mask.\n        // it should be >>6\n        uint8     secondIdentifier;\n        bytes32   secondMerkleRoot;\n        uint8     secondPersonalLimit;\n\n        // Keep track of total purchased amount to calculate public sale total limit\n        // Max value of uint16 is 65535, so there will be never overflow\n        uint16    totalPurchased;\n    }\n    PrivateSaleConfig private privateSaleConfig;\n\n    // Compiler will pack it into uint256\n    struct GeneralSaleConfig {\n        // [uint32 for time]\n        // Maximum value of uint32 == 4294967295 > Feb 07th, 2106\n        // Therefore, Impossible to overflow\n        uint32    startTime;\n        uint32    endTime;\n        // identifier also used as sale mask.\n        // it should be >> 0 for public sale\n        uint8     identifier;\n        bytes32   merkleRoot;\n        uint8     personalLimit;\n        uint16    totalLimit;\n        uint16    totalPurchased;\n    }\n    GeneralSaleConfig private publicSaleConfig;\n\n    struct PurchaseLimitation {\n      uint128 totalLimit;\n      uint128 reserved;\n    }\n    PurchaseLimitation public limitation = PurchaseLimitation({\n      totalLimit: 4649, reserved: 150\n    });\n\n    // purchasedInfo : keep track of amount user minted\n    // right 3bit keeps track of pulbic mint.\n    mapping(address => uint256) public purchasedInfo;\n\n    // IERC-2981 royalty info in percent, decimal\n    uint256 public royaltyRatio = 5;\n\n    // To minimize gas cost, set real mint price as default value\n    // there is only small chance to change price between deploy and minting\n    uint256 public privatePrice = 0.03 ether;\n    uint256 public publicPrice = 0.05 ether;\n    event ChangedPrivateSaleConfig(\n        uint32    firstStartTime,\n        uint32    firstEndTime,\n        uint8     firstIdentifier,\n        bytes32   firstMerkleRoot,\n        uint8     firstPersonalLimit,\n\n        uint32    secondStartTime,\n        uint32    secondEndTime,\n        uint8     secondIdentifier,\n        bytes32   secondMerkleRoot,\n        uint8     secondPersonalLimit\n    );\n\n    event ChangedPublicSaleConfig(\n        uint32    startTime,\n        uint32    endTime,\n        uint8     identifier,\n        uint8     personalLimit\n    );\n\n    constructor() ERC721ASGakuen(\"0xGakuen\", \"ZXG\") {}\n\n    modifier callerIsUser() {\n        require(\n            tx.origin == msg.sender,\n            \"Contract call from another contract is not allowed\"\n        );\n        _;\n    }\n\n    /// @notice Mint additional NFT for owner\n    /// @dev use it for marketing, etc.\n    /// @param receiver address who will receive nft\n    /// @param numOfTokens NFTs will be minted to owner\n    function ownerMintTo(address receiver, uint256 numOfTokens) external payable onlyOwner {\n        _mint(receiver, numOfTokens);\n    }\n\n    /// @notice private sale Mint\n    /// @dev merkleProof should be calculated on frontend to prevent gas.\n    /// @dev frontend would submit the merkleProof based on user addr\n    /// @param merkleProof is proof calculated on frontend\n    /// @param identifier is bit need to shift\n    /// @param numOfTokens is amount user will mint\n    function privateMint(bytes32[] memory merkleProof, uint256 identifier, uint256 numOfTokens)\n        external\n        payable\n        nonReentrant\n        callerIsUser\n    {\n        PrivateSaleConfig memory psc = privateSaleConfig;\n        uint256 currentTime = block.timestamp;\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\n        GeneralSaleConfig memory saleConfig;\n        uint256 amount;\n        uint256 price = privatePrice;\n\n        if(psc.firstIdentifier == identifier) {\n          saleConfig.startTime = psc.firstStartTime;\n          saleConfig.endTime = psc.firstEndTime;\n          saleConfig.identifier = psc.firstIdentifier;\n          saleConfig.merkleRoot = psc.firstMerkleRoot;\n          saleConfig.personalLimit = psc.firstPersonalLimit;\n          amount = numOfTokens;\n        } else if (psc.secondIdentifier == identifier) {\n          saleConfig.startTime = psc.secondStartTime;\n          saleConfig.endTime = psc.secondEndTime;\n          saleConfig.identifier = psc.secondIdentifier;\n          saleConfig.merkleRoot = psc.secondMerkleRoot;\n          saleConfig.personalLimit = psc.secondPersonalLimit;\n          amount = psc.secondPersonalLimit;\n        } else {\n          revert('No Identifier Matched');\n        }\n\n        require(\n            MerkleProof.verify(merkleProof, saleConfig.merkleRoot, leaf),\n            \"Not listed\"\n        );\n\n        require(\n            saleConfig.startTime != 0 &&\n                currentTime >= saleConfig.startTime &&\n                currentTime < saleConfig.endTime,\n            \"Out of sale period\"\n        );\n\n        require(\n            saleConfig.totalPurchased + amount <= limitation.totalLimit-limitation.reserved,\n            \"Mint will exceed total limit\"\n        );\n\n\n        uint256 _purchasedInfo = purchasedInfo[msg.sender];\n        uint256 purchased = ((_purchasedInfo>>saleConfig.identifier) & AMOUNT_MASK);\n        require((purchased+amount) <= saleConfig.personalLimit, \"Personal Limit Overflow\");\n        \n        uint256 cost = price * amount;\n        require(msg.value >= cost, \"ETH is not sufficient\");\n\n        // it will be not bug since personalLimit is lte 3\n        purchasedInfo[msg.sender] = _purchasedInfo | ((purchased+amount) << saleConfig.identifier);\n        privateSaleConfig.totalPurchased += uint16(amount);\n        _mint(msg.sender, amount);\n    }\n\n    /// @notice Public Sale Mint\n    /// @dev To finish sale earlier, call finishSale()\n    /// @param numOfTokens NFTs will be minted to msg.sender\n    function publicMint(uint256 numOfTokens)\n        external\n        payable\n        nonReentrant\n        callerIsUser\n    {\n        GeneralSaleConfig memory saleConfig = publicSaleConfig;\n        uint256 currentTime = block.timestamp;\n        uint256 startTime = saleConfig.startTime;\n        uint256 endTime = saleConfig.endTime;\n\n        require(\n            startTime != 0 &&\n                currentTime >= startTime &&\n                currentTime < endTime,\n            \"Out of sale period\"\n        );\n\n        require(\n            saleConfig.totalPurchased + privateSaleConfig.totalPurchased + numOfTokens <= limitation.totalLimit - limitation.reserved,\n            \"Mint will exceed total limit\"\n        );\n\n        uint256 _purchasedInfo = purchasedInfo[msg.sender];\n        uint256 purchased = _purchasedInfo & AMOUNT_MASK;\n\n        require(\n            (purchased + numOfTokens) <=\n                saleConfig.personalLimit,\n            \"Mint will exceed personal limit\"\n        );\n\n        uint256 cost = publicPrice * numOfTokens;\n        require(msg.value >= cost, \"ETH is not sufficient\");\n        purchasedInfo[msg.sender] += numOfTokens;\n        publicSaleConfig.totalPurchased += uint16(numOfTokens);\n\n        _mint(msg.sender, numOfTokens);\n    }\n\n    /// @notice change the price\n    /// @param _privatePrice privatePrice will be set to it\n    /// @param _publicPrice publicPrice will be set to it \n    function setPrice(uint256 _privatePrice, uint256 _publicPrice)\n        external\n        onlyOwner\n    {\n        privatePrice = _privatePrice;\n        publicPrice = _publicPrice;\n    }\n\n    /// @notice change the totalLimit\n    /// @param _totalLimit is totalLimit will be set to it \n    function setPurchaseLimitation(uint256 _totalLimit, uint256 _reserved) external onlyOwner\n    {\n      limitation.totalLimit = uint128(_totalLimit);\n      limitation.reserved = uint128(_reserved);\n    }\n\n    function setPrivateSaleConfig(\n        uint32    firstStartTime,\n        uint32    firstEndTime,\n        uint8     firstIdentifier,\n        bytes32   firstMerkleRoot,\n        uint8     firstPersonalLimit,\n        uint32    secondStartTime,\n        uint32    secondEndTime,\n        uint8     secondIdentifier,\n        bytes32   secondMerkleRoot,\n        uint8     secondPersonalLimit\n    ) external onlyOwner {\n        PrivateSaleConfig memory saleConfig = privateSaleConfig;\n\n        saleConfig.firstStartTime        = firstStartTime;\n        saleConfig.firstEndTime          = firstEndTime;\n        saleConfig.firstIdentifier       = firstIdentifier;\n        saleConfig.firstMerkleRoot       = firstMerkleRoot;\n        saleConfig.firstPersonalLimit    = firstPersonalLimit;\n\n        saleConfig.secondStartTime         = secondStartTime;\n        saleConfig.secondEndTime           = secondEndTime;\n        saleConfig.secondIdentifier        = secondIdentifier;\n        saleConfig.secondMerkleRoot        = secondMerkleRoot;\n        saleConfig.secondPersonalLimit     = secondPersonalLimit;\n\n        privateSaleConfig = saleConfig;\n        emit ChangedPrivateSaleConfig(\n            firstStartTime,\n            firstEndTime,\n            firstIdentifier,\n            firstMerkleRoot,\n            firstPersonalLimit,\n\n            secondStartTime,\n            secondEndTime,\n            secondIdentifier,\n            secondMerkleRoot,\n            secondPersonalLimit\n        );\n    }\n\n    function setPublicSaleConfig(\n        uint32    startTime,\n        uint32    endTime,\n        uint8     identifier,\n        uint8     personalLimit\n    ) external onlyOwner {\n        GeneralSaleConfig memory saleConfig   = publicSaleConfig;\n        saleConfig.startTime                  = startTime;\n        saleConfig.endTime                    = endTime;\n        saleConfig.identifier                 = identifier;\n        saleConfig.personalLimit              = personalLimit;\n\n        publicSaleConfig = saleConfig;\n\n        emit ChangedPublicSaleConfig(\n            startTime,\n            endTime,\n            identifier,\n            personalLimit\n        );\n    }\n\n    function getPrivateSaleConfig() external view returns(\n        uint32    firstStartTime,\n        uint32    firstEndTime,\n        uint8     firstIdentifier,\n        uint8     firstPersonalLimit,\n        uint32    secondStartTime,\n        uint32    secondEndTime,\n        uint8     secondIdentifier,\n        uint8     secondPersonalLimit,\n        uint16    totalPurchased\n    ) {\n        PrivateSaleConfig memory saleConfig = privateSaleConfig;\n\n        firstStartTime        = saleConfig.firstStartTime;\n        firstEndTime          = saleConfig.firstEndTime;\n        firstIdentifier       = saleConfig.firstIdentifier;\n        firstPersonalLimit    = saleConfig.firstPersonalLimit;\n\n        secondStartTime         = saleConfig.secondStartTime;\n        secondEndTime           = saleConfig.secondEndTime;\n        secondIdentifier        = saleConfig.secondIdentifier;\n        secondPersonalLimit     = saleConfig.secondPersonalLimit;\n        totalPurchased           = saleConfig.totalPurchased;\n    }\n\n    function getPublicSaleConfig() external view returns(\n        uint32    startTime,\n        uint32    endTime,\n        uint8     identifier,\n        uint8     personalLimit,\n        uint16    totalPurchased\n    ) {\n        GeneralSaleConfig memory saleConfig   = publicSaleConfig;\n        startTime                             = saleConfig.startTime;\n        endTime                               = saleConfig.endTime;\n        identifier                            = saleConfig.identifier;\n        personalLimit                         = saleConfig.personalLimit;\n        totalPurchased                        = saleConfig.totalPurchased;\n    }\n\n    function getTotalPurchased() external view returns(uint256 totalPurchased) {\n      totalPurchased = privateSaleConfig.totalPurchased\n                      + limitation.reserved\n                      + publicSaleConfig.totalPurchased;\n    }\n\n    /// @notice Change baseURI\n    /// @param _newURI is URI to set\n    function setBaseURI(string memory _newURI) external onlyOwner {\n        baseURI = _newURI;\n    }\n\n    /// @notice Change hasExtention\n    /// @param _newState is new state to set\n    function setHasExtention(bool _newState) external onlyOwner {\n        hasExtention= _newState;\n    }\n\n    /// @dev override baseURI() in ERC721ASGakuen\n    function _baseURI()\n        internal\n        view\n        override(ERC721ASGakuen)\n        returns (string memory)\n    {\n        return baseURI;\n    }\n\n    /// @dev override _hasExtention() in ERC721ASGakuen\n    function _hasExtention()\n        internal\n        view\n        override(ERC721ASGakuen)\n        returns (bool)\n    {\n        return hasExtention;\n    }\n\n    \n    /// @dev override _startTokenId() in ERC721ASGakuen\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;\n    }\n\n\n    /// General@dev this function will increase the schoolingId, and will reset the whole checkpoint\n    /// @dev use this function to start next schooling period\n    /// @param _begin _schoolingPolicy.schoolingBegin will be set to it\n    /// @param _end _schoolingPolicy.schoolingEnd will be set to it\n    /// @param _breaktime _schoolingPolicy.breaktime will be set to it\n    function _applyNewSchoolingPolicy(\n        uint256 _begin,\n        uint256 _end,\n        uint256 _breaktime\n    ) external onlyOwner {\n        _applyNewSchoolingPolicy(\n            uint40(_begin),\n            uint40(_end),\n            uint40(_breaktime)\n        );\n    }\n \n    /// @dev this function change schoolingBegin without increasing the schoolingId\n    /// @dev use this function to fix the value set wrong\n    /// @param begin _schoolingPolicy.schoolingBegin will be set to it\n    function setSchoolingBegin(uint256 begin) external onlyOwner {\n        _setSchoolingBegin(uint40(begin));\n    }\n\n    /// @dev this function change schoolingEnd without increasing the schoolingId\n    /// @dev use this function to fix the value set wrong\n    /// @param end _schoolingPolicy.schoolingEnd will be set to it\n    function setSchoolingEnd(uint256 end) external onlyOwner {\n        _setSchoolingEnd(uint40(end));\n    }\n\n    /// @dev this function change breaktime without increasing the schoolingId\n    /// @dev use this function to fix the value set wrong\n    /// @param breaktime _schoolingPolicy.breaktime will be set to it\n    function setSchoolingBreaktime(uint256 breaktime) external onlyOwner {\n        _setSchoolingBreaktime(uint40(breaktime));\n    }\n\n    /// @dev add new checkpoint & uri to schoolingURI\n    /// @param checkpoint schoolingTotal required to reach this checkpoint\n    /// @param uri to be returned when schoolingTotal is gte to checkpoint\n    function addCheckpoint(uint256 checkpoint, string memory uri)\n        external\n        onlyOwner\n    {\n        _addCheckpoint(checkpoint, uri);\n    }\n\n    /// @dev replace existing checkpoint & uri in schoolingURI\n    /// @param checkpoint schoolingTotal required to reach this checkpoint\n    /// @param uri to be returned when schoolingTotal is gte to checkpoint\n    /// @param index means nth element, start from 0\n    function replaceCheckpoint(\n        uint256 checkpoint,\n        string memory uri,\n        uint256 index\n    ) external onlyOwner {\n        _replaceCheckpoint(checkpoint, uri, index);\n    }\n\n    /// @dev replace existing checkpoint & uri in schoolingURI\n    /// @param index means nth element, start from 0\n    function removeCheckpoint(uint256 index) external onlyOwner {\n        _removeCheckpoint(index);\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    /// @dev withdraw balance of smart contract patially\n    /// @param amount is the amout to withdraw\n    function patialWithdraw(uint256 amount) external onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        require(balance >= amount, \"Not enough balance\");\n        payable(msg.sender).transfer(balance);\n    }\n\n    /// @dev withdraw all balance of smart contract\n    function withdraw() external onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        payable(msg.sender).transfer(balance);\n    }\n\n    function setRoylatyInfo(uint256 _royaltyRatio) external onlyOwner nonReentrant {\n      royaltyRatio = _royaltyRatio;\n    }\n\n    /// @dev see IERC-2981\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\n      _tokenId; // silence solc warning\n      receiver = owner();\n      royaltyAmount = (_salePrice / 100) * royaltyRatio;\n      return (receiver, royaltyAmount);\n    } \n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/ERC721ASGakuen.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC721ASGakuen.sol\";\n\n//\n//  @@@@@%+@@@@@-@@@@%#: =%@@@#-           -#@@@%+  -@@@@#  %@@--@@#.@@%.%@@:+@@@@@.*%%- %%#\n// .=*@@@:%@@*==+@@+:@@#*@@#-@@@-@@#-+#@@#:@@@.@@@: %@@@@# .@@%-@@# +@@.:@@@ %@*==+ @@@#-@@+\n//  .@@@-.%@#=- %@#*=#@=@@@-+@@* *@@--@@* *@@* === =@@.@@# =@@*%@#  %@@:=@@*.%@#=- -@@@@#@@:\n// .@@@- +@@@@#.@@@@@@*-@@@ %@@-  =@@@@+  @@@ @@@#.@@@:@@# #@@@@@+ .@@@.=@@-+@@@@#.*@@%@@@@\n//.@@@=  #@#=  =@@%:@@%*@@*:@@@  .%@--@%::@@@  %@=*@@@@@@#.@@%-%@% =@@%:%@@ #@#=   @@#+@@@+\n//%@@@@@-@@@@@+%@@==@@++@@%%@@- :@@#-+#@@+@@@@@@@-@@@:*@@*=@@=.*%@.=@@@@@@--@@@@@+-@@=:@@@:\n//\n//\n// ERC721AS is implemented based on ERC721A (Copyright (c) 2022 Chiru Labs)\n// ERC721AS follow same license policy to ERC721A\n//\n// MIT License\n//\n// Copyright (c) 2022 OG Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n//\n/// @title ERC721ASGakuen\n/// ERC721ASGakuen for 'A'uto 'S'chooling & Zero x 'G'akuen NFT smart contract\n/// @author MoeKun\n/// @author JayB\ncontract ERC721ASGakuen is Context, ERC165, IERC721ASGakuen {\n    using Address for address;\n    using Strings for uint256;\n   /*\n     * @dev this contract use _schoolingPolicy.alpha & beta\n     * - alpha : current index\n     * - beta : number of checkpoint\n     */\n    // Presenting whether checkpoint is deleted or not.\n    // \"1\" represent deleted.\n    uint256 internal constant CHECKPOINT_DELETEDMASK = uint256(1);\n\n    //0b1111111111111111111111111111111111111111111111111111111111111110\n    uint256 internal constant CHECKPOINT_GENERATEDMASK =\n        uint256(18446744073709551614);\n\n    // The tokenId of the next token to be minted.\n    uint256 internal _currentIndex;\n\n    // The number of tokens burned.\n    uint256 internal _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n    mapping(uint256 => TokenStatus) internal _tokenStatus;\n\n    // Mapping from address to total balance\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    SchoolingPolicy internal _schoolingPolicy;\n\n    // Array to hold schooling checkpoint\n    mapping(uint256 => uint256) internal _schoolingCheckpoint;\n\n    // Array to hold URI based on schooling checkpoint\n    mapping(uint256 => string) internal _schoolingURI;\n\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    /**\n     * If want to change the Start TokenId, override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * Returns whether token is schooling or not.\n     */\n    function isTakingBreak(uint256 tokenId)\n        external\n        view\n        override\n        returns (bool)\n    {\n        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();\n        return _isTakingBreak(tokenId);\n    }\n\n    /**\n     * Returns latest change time of schooling status.\n     */\n    function schoolingTimestamp(uint256 tokenId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();\n        return uint256(_tokenStatus[tokenId].schoolingTimestamp);\n    }\n\n    /**\n     * Returns token's total time of shcooling.\n     * Used for optimizing and readablilty.\n     */\n    function _schoolingTotal(\n        uint40 currentTime,\n        TokenStatus memory _status,\n        SchoolingPolicy memory _policy\n    ) internal pure returns (uint256) {\n        // If schooling is on different phase, existing total = 0\n        if (_status.schoolingId != _policy.schoolingId) {\n            _status.schoolingTotal = 0;\n        }\n\n        // If schooling is not begun yet, total = 0\n        if (_policy.schoolingBegin == 0 || currentTime < _policy.schoolingBegin) {\n            return 0;\n        }\n\n        // If schooling is End, \n        if (_policy.schoolingEnd < currentTime) {\n            if (_status.schoolingTimestamp < _policy.schoolingBegin) {\n                return uint256(_policy.schoolingEnd - _policy.schoolingBegin);\n            }\n            if (_status.schoolingTimestamp + _policy.breaktime > _policy.schoolingEnd) {\n                return uint256(_status.schoolingTotal);\n            }\n            return uint256(\n                _status.schoolingTotal +\n                _policy.schoolingEnd -\n                _policy.breaktime -\n                _status.schoolingTimestamp\n            );\n        }\n\n        if (\n            _status.schoolingTimestamp == 0 ||\n            _status.schoolingTimestamp < _policy.schoolingBegin\n        ) {\n            return uint256(currentTime - _policy.schoolingBegin);\n        }\n\n        if (_status.schoolingTimestamp + _policy.breaktime > currentTime) {\n            return uint256(_status.schoolingTotal);\n        }\n\n        return uint256(\n            _status.schoolingTotal +\n            currentTime -\n            _status.schoolingTimestamp -\n            _policy.breaktime\n        );\n    }\n\n    /**\n     * Returns token's total time of schooling.\n     */\n    function schoolingTotal(uint256 tokenId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        if (!_exists(tokenId)) revert SchoolingQueryForNonexistentToken();\n        return\n            _schoolingTotal(\n                uint40(block.timestamp),\n                _tokenStatus[tokenId],\n                _schoolingPolicy\n            );\n    }\n\n    /**\n     * Returns whether token is taking break\n     */\n    function _isTakingBreak(uint256 tokenId) internal view returns (bool) {\n        unchecked {\n            return\n                _schoolingPolicy.schoolingBegin != 0 &&\n                block.timestamp >= _schoolingPolicy.schoolingBegin &&\n                _tokenStatus[tokenId].schoolingTimestamp >=\n                _schoolingPolicy.schoolingBegin &&\n                ((_tokenStatus[tokenId].schoolingTimestamp +\n                    _schoolingPolicy.breaktime) > block.timestamp);\n        }\n    }\n\n    /**\n     * @dev use this to get first custom data in schooling policy.\n     */\n    function _getSchoolingAlpha() internal view returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.alpha);\n        }\n    }\n\n    /**\n     * @dev use this to set first custom data in schooling policy.\n     */\n    function _setSchoolingAlpha(uint64 _alpha) internal {\n        unchecked {\n            _schoolingPolicy.alpha = _alpha;\n        }\n    }\n\n    /**\n     * @dev use this to get second custom data in schooling policy.\n     */\n    function _getSchoolingBeta() internal view returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.beta);\n        }\n    }\n\n    /**\n     * @dev use this to set second custom data in schooling policy.\n     */\n    function _setSchoolingBeta(uint64 _beta) internal {\n        unchecked {\n            _schoolingPolicy.beta = _beta;\n        }\n    }\n\n    function _setSchoolingBreaktime(uint40 _breaktime) internal {\n        unchecked {\n            _schoolingPolicy.breaktime = _breaktime;\n        }\n    }\n\n    /**\n     * @dev set schooling begin manually\n     * changing it manually could be resulted in unexpected result\n     * please do not use it witout reasonable reason\n     */\n    function _setSchoolingBegin(uint40 _begin) internal {\n        unchecked {\n            _schoolingPolicy.schoolingBegin = _begin;\n        }\n    }\n\n    /**\n     * @dev set schooling end manually\n     * changing it manually could be resulted in unexpected result\n     * please do not use it witout reasonable reason\n     */\n    function _setSchoolingEnd(uint40 _end) internal {\n        unchecked {\n            _schoolingPolicy.schoolingEnd = _end;\n        }\n    }\n\n    /**\n     * @dev set schooling identifier manually\n     * changing it manually could be resulted in unexpected result\n     * please do not use it witout reasonable reason\n     */\n    function _setSchoolingId(uint8 _schoolingId) internal {\n        unchecked {\n            _schoolingPolicy.schoolingId = _schoolingId;\n        }\n    }\n\n    /**\n     * Returns period of timelock.\n     */\n    function schoolingBreaktime() external view override returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.breaktime);\n        }\n    }\n\n    /**\n     * Returns when schooling begin in timestamp\n     */\n    function schoolingBegin() external view override returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.schoolingBegin);\n        }\n    }\n\n    /**\n     * Returns when schooling end in timestamp\n     */\n    function schoolingEnd() external view override returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.schoolingEnd);\n        }\n    }\n\n    /**\n     * Returns when schooling identifier\n     */\n    function schoolingId() external view override returns (uint256) {\n        unchecked {\n            return uint256(_schoolingPolicy.schoolingId);\n        }\n    }\n\n    /**\n     * Apply new schooling policy.\n     * Please use this function to start new season.\n     *\n     * schoolingId will increase automatically.\n     * If new schooling duration is duplicated to existing duration,\n     * IT COULD BE ERROR\n     */\n    function _applyNewSchoolingPolicy(\n        uint40 _begin,\n        uint40 _end,\n        uint40 _breaktime\n    ) internal {\n        _beforeApplyNewPolicy(_begin, _end, _breaktime);\n\n        SchoolingPolicy memory _policy = _schoolingPolicy;\n        if(_policy.schoolingEnd != 0) {\n            _policy.schoolingId++;\n        }\n        _policy.schoolingBegin = _begin;\n        _policy.schoolingEnd = _end;\n        _policy.breaktime = _breaktime;\n\n        _schoolingPolicy = _policy;\n\n        _afterApplyNewPolicy(_begin, _end, _breaktime);\n    }\n\n    /**\n     * @dev Adding new schooling checkpoint, schoolingURI and schoolingURI.\n     */\n    function _addCheckpoint(uint256 checkpoint, string memory schoolingURI)\n        internal\n        virtual\n    {\n        SchoolingPolicy memory _policy = _schoolingPolicy;\n        _schoolingCheckpoint[_policy.alpha] = (checkpoint &\n            CHECKPOINT_GENERATEDMASK);\n        _schoolingURI[_policy.alpha] = schoolingURI;\n\n        _policy.alpha++;\n        _policy.beta++;\n        // Update schoolingPolicy.\n        _schoolingPolicy = _policy;\n    }\n\n    function _removeCheckpoint(uint256 index) internal virtual {\n        uint256 i = 0;\n        uint256 counter = 0;\n        if (_schoolingPolicy.beta <= index) revert CheckpointOutOfArray();\n        while (true) {\n            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {\n                counter++;\n            }\n            // Checkpoint deleting sequence.\n            if (counter > index) {\n                _schoolingCheckpoint[i] |= CHECKPOINT_DELETEDMASK;\n                _schoolingPolicy.beta--;\n                return;\n            }\n            i++;\n        }\n    }\n\n    /**\n     * Replacing certain checkpoint and uri.\n     * index using for checking existence and designting certain checkpoint.\n     */\n    function _replaceCheckpoint(\n        uint256 checkpoint,\n        string memory schoolingURI,\n        uint256 index\n    ) internal virtual {\n        uint256 i = 0;\n        uint256 counter = 0;\n        if (_schoolingPolicy.beta <= index) revert CheckpointOutOfArray();\n        // counter always syncs with index+1.\n        // After satisfying second \"if\" condition, it will return.\n        // Therefore, while condition will never loops infinitely.\n        while (true) {\n            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {\n                counter++;\n            }\n            // Checkpoint and uri replacing sequence.\n            if (counter > index) {\n                _schoolingCheckpoint[i] = checkpoint;\n                _schoolingURI[i] = schoolingURI;\n                return;\n            }\n            i++;\n        }\n    }\n\n    /**\n     * Retruns whether checkpoint is existing or not.\n     * Used for optimizing and readability.\n     */\n    function _isExistingCheckpoint(uint256 _checkpoint)\n        internal\n        pure\n        returns (bool)\n    {\n        return (_checkpoint & CHECKPOINT_DELETEDMASK) == 0;\n    }\n\n    /**\n     * @dev Returns tokenURI of existing token.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n        // Returns baseURI depending on schooling status.\n        string memory baseURI = _getSchoolingURI(tokenId);\n        if(_hasExtention()) {\n          return\n              bytes(baseURI).length != 0\n                  ? string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"))\n                  : \"\";\n        }\n        else {\n          return\n              bytes(baseURI).length != 0\n                  ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                  : \"\";\n        }\n    }\n\n    /**\n     * @dev Returns on schooling URI of 'tokenId'.\n     * @dev Depending on total schooling time.\n     */\n    function _getSchoolingURI(uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        TokenStatus memory sData = _tokenStatus[tokenId];\n        SchoolingPolicy memory _policy = _schoolingPolicy;\n        uint256 total = uint256(\n            _schoolingTotal(uint40(block.timestamp), sData, _policy)\n        );\n        uint256 index;\n        uint256 counter = 0;\n        for (uint256 i = 0; i < _policy.alpha; i++) {\n            if (\n                _isExistingCheckpoint(_schoolingCheckpoint[i]) &&\n                _schoolingCheckpoint[i] <= total\n            ) {\n                index = i;\n                counter++;\n            }\n        }\n\n        //if satisfying 'no checkpoint' condition.\n        if (index == 0 && counter == 0) {\n            return _baseURI();\n        }\n\n        return _schoolingURI[index];\n    }\n\n    /**\n     * Get URI at certain index.\n     * index can be identified as schooling.\n     */\n    function uriAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (string memory)\n    {\n        if (index >= _schoolingPolicy.beta) revert CheckpointOutOfArray();\n        uint256 i = 0;\n        uint256 counter = 0;\n        while (true) {\n            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {\n                counter++;\n            }\n            if (counter > index) {\n                return _schoolingURI[i];\n            }\n            i++;\n        }\n    }\n\n    /**\n     * Get Checkpoint at certain index.\n     * index can be identified as schooling.\n     */\n    function checkpointAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        if (index >= _schoolingPolicy.beta) revert CheckpointOutOfArray();\n        uint256 i = 0;\n        uint256 counter = 0;\n        while (true) {\n            if (_isExistingCheckpoint(_schoolingCheckpoint[i])) {\n                counter++;\n            }\n            if (counter > index) {\n                return _schoolingCheckpoint[i];\n            }\n            i++;\n        }\n    }\n\n    // returns number of checkpoints not deleted\n    function numOfCheckpoints() external view override returns (uint256) {\n        return _schoolingPolicy.beta;\n    }\n    /**\n     * @dev Hook that is called before call applyNewSchoolingPolicy.\n     *\n     * _begin     - timestamp schooling begin\n     * _end       - timestamp schooling end\n     * _breaktime - breaktime in second\n     */\n    function _beforeApplyNewPolicy(\n        uint40 _begin,\n        uint40 _end,\n        uint40 _breaktime\n    ) internal virtual {\n        SchoolingPolicy memory _policy = _schoolingPolicy;\n        _policy.alpha = 0;\n        _policy.beta = 0;\n\n        _schoolingPolicy = _policy;\n    }\n\n /**\n     * @dev Hook that is called before call applyNewSchoolingPolicy.\n     *\n     * _begin     - timestamp schooling begin\n     * _end       - timestamp schooling end\n     * _breaktime - breaktime in second\n     */\n    function _afterApplyNewPolicy(\n        uint40 _begin,\n        uint40 _end,\n        uint40 _breaktime\n    ) internal virtual {\n    }\n\n    /**\n     * Switching token's schooling status to off in forced way\n     */\n\n    function _recordSchoolingStatusChange(uint256 tokenId) internal {\n        TokenStatus memory _status = _tokenStatus[tokenId];\n        SchoolingPolicy memory _policy = _schoolingPolicy;\n        uint40 currentTime = uint40(block.timestamp);\n        _status.schoolingTotal = uint40(\n            _schoolingTotal(currentTime, _status, _policy)\n        );\n        _status.schoolingId = _schoolingPolicy.schoolingId;\n        _status.schoolingTimestamp = currentTime;\n        _tokenStatus[tokenId] = _status;\n    }\n\n/*\n*  ______ _____   _____ ______ ___  __          \n* |  ____|  __ \\ / ____|____  |__ \\/_ |   /\\    \n* | |__  | |__) | |        / /   ) || |  /  \\   \n* |  __| |  _  /| |       / /   / / | | / /\\ \\  \n* | |____| | \\ \\| |____  / /   / /_ | |/ ____ \\ \n* |______|_|  \\_\\\\_____|/_/   |____||_/_/    \\_\\\n*\n* ERC721A implementation below.\n* - overrided _beforeTokenTransfers to support Auto Schooling\n* - remove tracking & keeping it into TokenStatus features\n*\n*\n*/                                               \n                                            \n    /**\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() public view override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view returns (uint256) {\n        // Counter underflow is impossible as _currentIndex does not decrement,\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _balances[owner];\n    }\n\n    /**\n     * Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n     */\n    function _ownershipOf(uint256 tokenId)\n        internal\n        view\n        returns (TokenStatus memory)\n    {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr && curr < _currentIndex) {\n                TokenStatus memory ownership = _tokenStatus[curr];\n                if (!ownership.burned) {\n                    if (ownership.owner != address(0)) {\n                        return ownership;\n                    }\n                    // Invariant:\n                    // There will always be an ownership that has an address and is not burned\n                    // before an ownership that does not have an address and is not burned.\n                    // Hence, curr will not underflow.\n                    while (true) {\n                        curr--;\n                        ownership = _tokenStatus[curr];\n                        if (ownership.owner != address(0)) {\n                            return ownership;\n                        }\n                    }\n                }\n            }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view override returns (address) {\n        return _ownershipOf(tokenId).owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    // Boolean to toggle tokenURI's extension, \".json\"\n    function _hasExtention() internal view virtual returns (bool) {\n        return false;\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public override {\n        address owner = ERC721ASGakuen.ownerOf(tokenId);\n        if (to == owner) revert ApprovalToCurrentOwner();\n\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n            revert ApprovalCallerNotOwnerNorApproved();\n        }\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        override\n        returns (address)\n    {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        if (operator == _msgSender()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        _transfer(from, to, tokenId);\n        if (\n            to.isContract() &&\n            !_checkContractOnERC721Received(from, to, tokenId, _data)\n        ) {\n            revert TransferToNonERC721ReceiverImplementer();\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex &&\n            !_tokenStatus[tokenId].burned;\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, \"\");\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _balances[to] += quantity;\n\n            _tokenStatus[startTokenId].owner = to;\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            if (to.isContract()) {\n                do {\n                    emit Transfer(address(0), to, updatedIndex);\n                    if (\n                        !_checkContractOnERC721Received(\n                            address(0),\n                            to,\n                            updatedIndex++,\n                            _data\n                        )\n                    ) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (updatedIndex != end);\n                // Reentrancy protection\n                if (_currentIndex != startTokenId) revert();\n            } else {\n                do {\n                    emit Transfer(address(0), to, updatedIndex++);\n                } while (updatedIndex != end);\n            }\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n        unchecked {\n            _balances[to] += quantity;\n\n            _tokenStatus[startTokenId].owner = to;\n\n            uint256 updatedIndex = startTokenId;\n            uint256 end = updatedIndex + quantity;\n\n            do {\n                emit Transfer(address(0), to, updatedIndex++);\n            } while (updatedIndex < end);\n\n            _currentIndex = updatedIndex;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        TokenStatus memory prevOwnership = _ownershipOf(tokenId);\n\n        if (prevOwnership.owner != from) revert TransferFromIncorrectOwner();\n\n        bool isApprovedOrOwner = (_msgSender() == from ||\n            isApprovedForAll(from, _msgSender()) ||\n            getApproved(tokenId) == _msgSender());\n\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _balances[from] -= 1;\n            _balances[to] += 1;\n\n            TokenStatus storage currSlot = _tokenStatus[tokenId];\n            currSlot.owner = to;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenStatus storage nextSlot = _tokenStatus[nextTokenId];\n            if (nextSlot.owner == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.owner = from;\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        TokenStatus memory prevOwnership = _ownershipOf(tokenId);\n\n        address from = prevOwnership.owner;\n\n        if (approvalCheck) {\n            bool isApprovedOrOwner = (_msgSender() == from ||\n                isApprovedForAll(from, _msgSender()) ||\n                getApproved(tokenId) == _msgSender());\n\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, from);\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n        unchecked {\n            _balances[from] -= 1;\n\n            // Keep track of who burned the token, and the timestamp of burning.\n            TokenStatus storage currSlot = _tokenStatus[tokenId];\n            currSlot.owner = from;\n            currSlot.burned = true;\n\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n            uint256 nextTokenId = tokenId + 1;\n            TokenStatus storage nextSlot = _tokenStatus[nextTokenId];\n            if (nextSlot.owner == address(0)) {\n                // This will suffice for checking _exists(nextTokenId),\n                // as a burned slot cannot contain the zero address.\n                if (nextTokenId != _currentIndex) {\n                    nextSlot.owner = from;\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try\n            IERC721Receiver(to).onERC721Received(\n                _msgSender(),\n                from,\n                tokenId,\n                _data\n            )\n        returns (bytes4 retval) {\n            return retval == IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     *\n     * *** IT RECORDS SCHOOLING DATA ***\n     *\n     * IF YOU DON'T WANT IT, please override this funcion\n     *\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {\n        if (startTokenId == _currentIndex) return;\n        uint256 updatedIndex = startTokenId;\n        uint256 end = updatedIndex + quantity;\n        do {\n            _recordSchoolingStatusChange(updatedIndex++);\n        } while (updatedIndex != end);\n    }\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n     * minting.\n     * And also called after one token has been burned.\n     *\n     * startTokenId - the first token id to be transferred\n     * quantity - the amount to be transferred\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/IERC721ASGakuen.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: MoeKun, JayB\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\ninterface IERC721ASGakuen is IERC721, IERC721Metadata {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * The caller cannot approve to the current owner.\n     */\n    error ApprovalToCurrentOwner();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error SchoolingQueryForNonexistentToken();\n\n    /**\n     * Index is out of array's range.\n     */\n    error CheckpointOutOfArray();\n\n    // Compiler will pack this into a single 256bit word.\n    struct TokenStatus {\n        // The address of the owner.\n        address owner;\n        // Keeps track of the latest time User toggled schooling.\n        uint40 schoolingTimestamp;\n        // Keeps track of the total time of schooling.\n        // Left 4Most bit\n        uint40 schoolingTotal;\n        // State to support multiple seasons\n        uint8 schoolingId;\n        // Whether the token has been burned.\n        bool burned;\n    }\n\n    // Compiler will pack this into a single 256bit word.\n    struct SchoolingPolicy {\n        uint64 alpha;\n        uint64 beta;\n        uint40 schoolingBegin;\n        uint40 schoolingEnd;\n        uint8 schoolingId;\n        uint40 breaktime;\n    }\n\n    /**\n     * @dev Returns total schooling time.\n     */\n    function schoolingTotal(uint256 tokenId) external view returns (uint256);\n\n    /**\n     * @dev Returns latest change time of schooling status.\n     */\n    function schoolingTimestamp(uint256 tokenId)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Returns whether token is schooling or not.\n     */\n    function isTakingBreak(uint256 tokenId) external view returns (bool);\n\n    /**\n     * @dev Returns number of existing checkpoint + deleted checkpoint.\n     */\n    /**\n     * returns number of checkpoints not deleted\n     */\n    function numOfCheckpoints() external view returns (uint256);\n\n    /**\n     * Get URI at certain index.\n     * index can be identified as grade.\n     */\n    function uriAtIndex(uint256 index) external view returns (string memory);\n\n    /**\n     * Get Checkpoint at certain index.\n     * index can be identified as grade.\n     */\n    function checkpointAtIndex(uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns time when schooling begin\n     */\n    function schoolingBegin() external view returns (uint256);\n\n    /**\n     * @dev Returns time when schooling end\n     */\n    function schoolingEnd() external view returns (uint256);\n\n    /**\n     * @dev Returns breaktime for schooling\n     */\n    function schoolingBreaktime() external view returns (uint256);\n\n    /**\n     * @dev Returns breaktime for schooling\n     */\n    function schoolingId() external view returns (uint256);\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}