{{
  "language": "Solidity",
  "sources": {
    "contracts/token/ERC721V.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721V is a slight improvement upon ERC721A for a few select purposes.\n * \n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. It is optimized for lower gas during batch mints through the ERC721A implementation \n * by Chiru Labs (https://github.com/chiru-labs/ERC721A)\n *\n * ERC2309 was removed because it will not be used. \n * Token burning was also removed, but left the reserved bit there.\n * \n * Ownership's extraData field was modified to be writable without ownership initialized. This allows for multiple\n * mints with different extraData values. A token's extraData will be used as a transfer lockup period and will\n * therefore NOT need to be persisted during a token transfer.\n * \n * Both token operator approval methods will call a beforeApproval hook that can be overwritten.\n * \n * Assumptions:\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n * \n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721V is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // Burning disabled.\n    // uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * Burning disabled.\n     * @dev Returns the total number of tokens burned.\n     */\n    // function _totalBurned() internal view virtual returns (uint256) {\n    //     return _burnCounter;\n    // }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Verifies if the address has been set a given ownership value.\n     */\n    function _ownershipNotInitialized(uint256 ownership) internal pure returns (bool) {\n        return ownership & _BITMASK_EXTRA_DATA_COMPLEMENT == 0;\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_ownershipNotInitialized(_packedOwnerships[index])) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // Burning disabled so we can remove the burned check.\n                    // if (packed & _BITMASK_BURNED == 0) {\n                    \n                    // Invariant:\n                    // There will always be an initialized ownership slot\n                    // (i.e. `ownership.addr != address(0))\n                    // before an unintialized ownership slot\n                    // (i.e. `ownership.addr == address(0))\n                    // Hence, `curr` will not underflow.\n                    //\n                    // We can directly compare the packed value.\n                    // If the address is zero, packed will be zero.\n                    while (_ownershipNotInitialized(packed)) {\n                        packed = _packedOwnerships[--curr];\n                    }\n                    return packed;\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        // Burning disabled\n        // ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        _beforeApproval(to);\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _beforeApproval(operator);\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex; // If within bounds,\n            // Burning disabled so we can remove the burned check.\n            // _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; \n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            // - `extraData` to `0` because we use it for token lockup timestamp.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_ownershipNotInitialized(_packedOwnerships[nextTokenId])) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = \n                            (prevOwnershipPacked & _BITMASK_EXTRA_DATA_COMPLEMENT) | \n                            (_packedOwnerships[nextTokenId] & ~_BITMASK_EXTRA_DATA_COMPLEMENT);\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before any approval for a token or wallet\n     *      \n     * `approvedAddr` - the address a wallet is trying to grant approval to.\n     */\n    function _beforeApproval(address approvedAddr) internal virtual {}\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    // /**\n    //  * @dev Equivalent to `_burn(tokenId, false)`.\n    //  */\n    // function _burn(uint256 tokenId) internal virtual {\n    //     _burn(tokenId, false);\n    // }\n\n    // /**\n    //  * @dev Destroys `tokenId`.\n    //  * The approval is cleared when the token is burned.\n    //  *\n    //  * Requirements:\n    //  *\n    //  * - `tokenId` must exist.\n    //  *\n    //  * Emits a {Transfer} event.\n    //  */\n    // function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n    //     uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n    //     address from = address(uint160(prevOwnershipPacked));\n\n    //     (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n    //     if (approvalCheck) {\n    //         // The nested ifs save around 20+ gas over a compound boolean condition.\n    //         if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n    //             if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n    //     }\n\n    //     _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n    //     // Clear approvals from the previous owner.\n    //     assembly {\n    //         if approvedAddress {\n    //             // This is equivalent to `delete _tokenApprovals[tokenId]`.\n    //             sstore(approvedAddressSlot, 0)\n    //         }\n    //     }\n\n    //     // Underflow of the sender's balance is impossible because we check for\n    //     // ownership above and the recipient's balance can't realistically overflow.\n    //     // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n    //     unchecked {\n    //         // Updates:\n    //         // - `balance -= 1`.\n    //         // - `numberBurned += 1`.\n    //         //\n    //         // We can directly decrement the balance, and increment the number burned.\n    //         // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n    //         _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n    //         // Updates:\n    //         // - `address` to the last owner.\n    //         // - `startTimestamp` to the timestamp of burning.\n    //         // - `burned` to `true`.\n    //         // - `nextInitialized` to `true`.\n    //         _packedOwnerships[tokenId] = _packOwnershipData(\n    //             from,\n    //             (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED)\n    //         );\n\n    //         // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n    //         if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n    //             uint256 nextTokenId = tokenId + 1;\n    //             // If the next slot's address is zero and not burned (i.e. packed value is zero).\n    //             if (_ownershipNotInitialized(_packedOwnerships[nextTokenId])) {\n    //                 // If the next slot is within bounds.\n    //                 if (nextTokenId != _currentIndex) {\n    //                     // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n    //                     _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n    //                 }\n    //             }\n    //         }\n    //     }\n\n    //     emit Transfer(from, address(0), tokenId);\n    //     _afterTokenTransfers(from, address(0), tokenId, 1);\n\n    //     // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n    //     unchecked {\n    //         _burnCounter++;\n    //     }\n    // }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev gets the extra data for the ownership data `index`. This can differ from the\n     * _packedOwnershipOf(index).extraData because if the address is not initialized it will return\n     * the extraData of a different index.\n     */\n    function _getExtraDataAt(uint256 index) internal virtual returns (uint256) {\n      return _packedOwnerships[index] >> _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}"
    },
    "contracts/token/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/utils/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}"
    },
    "contracts/utils/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/utils/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}"
    },
    "contracts/utils/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/utils/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * ERC165 bytes to add to interface array - set in parent contract\n     * implementing this standard\n     *\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     * bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n     * _registerInterface(_INTERFACE_ID_ERC2981);\n     */\n\n    /**\n     * @notice Called with the sale price to determine how much royalty\n     *          is owed and to whom.\n     * @param _tokenId - the NFT asset queried for royalty information\n     * @param _salePrice - the sale price of the NFT asset specified by _tokenId\n     * @return receiver - address of who should be sent the royalty payment\n     * @return royaltyAmount - the royalty payment amount for _salePrice\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\nerror CallerNotOwner();\nerror OwnerNotZero();\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address internal _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) revert CallerNotOwner();\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert OwnerNotZero();\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Valhalla.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./token/ERC721V.sol\";\nimport \"./utils/ERC2981.sol\";\nimport \"./utils/IERC165.sol\";\nimport \"./utils/Ownable.sol\";\nimport \"./utils/ECDSA.sol\";\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n//                                                                         //\n//    ██╗░░░██╗░█████╗░██╗░░░░░██╗░░██╗░█████╗░██╗░░░░░██╗░░░░░░█████╗░    //\n//    ██║░░░██║██╔══██╗██║░░░░░██║░░██║██╔══██╗██║░░░░░██║░░░░░██╔══██╗    //\n//    ╚██╗░██╔╝███████║██║░░░░░███████║███████║██║░░░░░██║░░░░░███████║    //\n//    ░╚████╔╝░██╔══██║██║░░░░░██╔══██║██╔══██║██║░░░░░██║░░░░░██╔══██║    //\n//    ░░╚██╔╝░░██║░░██║███████╗██║░░██║██║░░██║███████╗███████╗██║░░██║    //\n//    ░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝╚══════╝╚═╝░░╚═╝    //\n//                                                                         //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n\n/**\n * Subset of a Presale with only the methods that the main minting contract will call.\n */\ninterface Presale {\n    function selectedBids(address presaleAddr) external view returns (uint256);\n}\n\n/**\n * Subset of the IOperatorFilterRegistry with only the methods that the main minting contract will call.\n * The owner of the collection is able to manage the registry subscription on the contract's behalf\n */\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(\n        address registrant,\n        address operator\n    ) external returns (bool);\n}\n\ncontract Valhalla is ERC721V, Ownable, ERC2981 {\n    using ECDSA for bytes32;\n\n    // =============================================================\n    //                            Structs\n    // =============================================================\n\n    // Compiler will pack this into one 256-bit word\n    struct AuctionParams {\n        // auctionNumber; also tracks which bidIndexes are currently live\n        uint16 index;\n        // Following 2 values will be multiplied by 1 GWEI or 0.000000001 ETH\n        // Bid values with GWEI lower than this denomination do NOT add to a bid.\n        uint56 startPrice;\n        uint56 minStackedBidIncrement;\n        // new bids must beat the lowest bid by this percentage. This is a whole\n        // percentage number, a value of 10 means new bids must beat old ones by 10%\n        uint8 minBidIncrementPercentage;\n        // Optional parameter for if a bid was submitted within seconds of ending,\n        // endTimestamp will extend to block.timestamp+timeBuffer if that value is greater.\n        uint16 timeBuffer;\n        // When the auction can start getting bidded on\n        uint48 startTimestamp;\n        // When the auction can no longer get bidded on\n        uint48 endTimestamp;\n        // How many tokens are up for auction. If 0, there is NO auction live.\n        uint8 numTokens;\n    }\n\n    struct Bid {\n        address bidder;\n        uint192 amount;\n        uint64 bidTime;\n    }\n\n    struct BidIndex {\n        uint8 index;\n        bool isSet;\n    }\n\n    // =============================================================\n    //                            Constants\n    // =============================================================\n\n    // Set on contract initialization\n    address public immutable PRESALE_ADDRESS;\n\n    // Proof of hash will be given after reveal.\n    string public MINT_PROVENANCE_HASH = \"037226b21636376001dbfd22f52d1dd72845efa9613baf51a6a011ac731b2327\";\n    // Owner will be minting this amount to the treasury which happens before\n    // any presale or regular sale. Once totalSupply() is over this amount,\n    // no more can get minted by {mintDev}\n    uint256 public constant TREASURY_SUPPLY = 300;\n    // Maximum tokens that can be minted from {mintTier} and {mintPublic}\n    uint256 public constant MINT_CAP = 9000;\n\n    // Public mint is unlikely to be enabled as it will get botted, but if\n    // is needed this will make it a tiny bit harder to bot the entire remaining.\n    uint256 public constant MAX_PUBLIC_MINT_TXN_SIZE = 5;\n\n    // Proof of hash will be given after all tokens are auctioned.\n    string public AUCTION_PROVENANCE_HASH = \"eb8c88969a4b776d757de962a194f5b4ffaaadb991ecfbb24d806c7bc6397d30\";\n    // Multiplier for minBidPrice and minBidIncrement to verify bids are large enough\n    // Is used so that we can save storage space and fit the auctionParams into one uint256\n    uint256 public constant AUCTION_PRICE_MULTIPLIER = 1 gwei;\n    uint256 public constant AUCTION_SUPPLY = 1000;\n    // At most 5 tokens can be bid on at once\n    uint256 public constant MAX_NUM_BIDS = 5;\n\n    // Cheaper gaswise to set this as 10000 instead of MINT_CAP + AUCTION_SUPPLY\n    uint256 public constant TOTAL_SUPPLY = 10000;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // Address that houses the implemention to check if operators are allowed or not\n    address public operatorFilterRegistryAddress;\n    // Address this contract verifies with the registryAddress for allowed operators.\n    address public filterRegistrant;\n\n    // Address that will link to the tokenDNA which the metadata relies on.\n    address public dnaContractAddress;\n\n    /**\n     * Lockup timestamps are saved in uint24 to fit into the _extraData for the _packedOwnerships\n     * mapping of ERC721A tokens. In order to still represent a large range of times, we will\n     * be saving the hour the token gets unlocked.\n     *\n     * In {_beforeTokenTransfers}, _extraData * 3600 will be compared with the current block.timestamp.\n     */\n    uint24 public firstUnlockTime;\n    uint24 public secondUnlockTime;\n    uint24 public thirdUnlockTime;\n\n    // Determines whether a presale address has already gotten its presale tokens\n    mapping(address => bool) public presaleMinted;\n    // If a presale address wants their tokens to land in a different wallet\n    mapping(address => address) public presaleDelegation;\n\n    string public tokenUriBase;\n\n    // Address used for {mintTier} which will be a majority of the transactions\n    address public signer;\n    // Used to quickly invalidate batches of signatures if needed.\n    uint256 public signatureVersion;\n    // Mapping that shows if a tier is active or not\n    mapping(string => bool) public isTierActive;\n    mapping(bytes32 => bool) public signatureUsed;\n\n    // Price of a single public mint, {mintPublic} is NOT enabled while this value is 0.\n    uint256 public publicMintPrice;\n\n    // Address that is permitted to start and stop auctions\n    address public auctioneer;\n    // The current highest bids made in the auction\n    Bid[MAX_NUM_BIDS] public activeBids;\n    // The mapping between an address and its active bid. The isSet flag differentiates the default\n    // uint value 0 from an actual 0 value.\n    mapping(uint256 => mapping(address => BidIndex)) public bidIndexes;\n\n    // All parameters needed to run an auction\n    AuctionParams public auctionParams;\n    // ETH reserved due to a live auction, cannot be withdrawn by the owner until the\n    // owner calls {endAuction} which also mints out the tokens.\n    uint256 public reserveAuctionETH;\n\n    // =============================================================\n    //                            Events\n    // =============================================================\n\n    event TokenLocked(uint256 indexed tokenId, uint256 unlockTimeHr);\n    event TokenUnlocked(uint256 indexed tokenId);\n\n    event AuctionStarted(uint256 indexed index);\n    event NewBid(\n        uint256 indexed auctionIndex,\n        address indexed bidder,\n        uint256 value\n    );\n    event BidIncreased(\n        uint256 indexed auctionIndex,\n        address indexed bidder,\n        uint256 oldValue,\n        uint256 increment\n    );\n    event AuctionExtended(uint256 indexed index);\n\n    // =============================================================\n    //                          Constructor\n    // =============================================================\n\n    constructor(address initialPresale) ERC721V(\"Valhalla\", \"VAL\") {\n        PRESALE_ADDRESS = initialPresale;\n    }\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual override returns (uint256) {\n        return 1;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC721V, ERC2981) returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            ERC721V.supportsInterface(interfaceId) ||\n            ERC2981.supportsInterface(interfaceId);\n    }\n\n    // =============================================================\n    //                           IERC2981\n    // =============================================================\n\n    /**\n     * @notice Allows the owner to set default royalties following EIP-2981 royalty standard.\n     */\n    function setDefaultRoyalty(\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyOwner {\n        _setDefaultRoyalty(receiver, feeNumerator);\n    }\n\n    // =============================================================\n    //                        Token Metadata\n    // =============================================================\n\n    function tokenURI(\n        uint256 tokenId\n    ) public view override returns (string memory) {\n        return string(abi.encodePacked(tokenUriBase, _toString(tokenId)));\n    }\n\n    /**\n     * @notice Allows the owner to set the base token URI.\n     */\n    function setTokenURI(string memory newUriBase) external onlyOwner {\n        tokenUriBase = newUriBase;\n    }\n\n    /**\n     * @notice Allows the owner to set the dna contract address.\n     */\n    function setDnaContract(address dnaAddress) external onlyOwner {\n        dnaContractAddress = dnaAddress;\n    }\n\n    // =============================================================\n    //                 Operator Filter Registry\n    // =============================================================\n    /**\n     * @dev Stops operators from being added as an approved address to transfer.\n     * @param operator the address a wallet is trying to grant approval to.\n     */\n    function _beforeApproval(address operator) internal virtual override {\n        if (operatorFilterRegistryAddress.code.length > 0) {\n            if (\n                !IOperatorFilterRegistry(operatorFilterRegistryAddress)\n                    .isOperatorAllowed(filterRegistrant, operator)\n            ) {\n                revert OperatorNotAllowed();\n            }\n        }\n        super._beforeApproval(operator);\n    }\n\n    /**\n     * @dev Stops operators that are not approved from doing transfers.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 quantity\n    ) internal virtual override {\n        if (operatorFilterRegistryAddress.code.length > 0) {\n            if (\n                !IOperatorFilterRegistry(operatorFilterRegistryAddress)\n                    .isOperatorAllowed(filterRegistrant, msg.sender)\n            ) {\n                revert OperatorNotAllowed();\n            }\n        }\n        // expiration time represented in hours. multiply by 60 * 60, or 3600.\n        if (_getExtraDataAt(tokenId) * 3600 > block.timestamp)\n            revert TokenTransferLocked();\n        super._beforeTokenTransfers(from, to, tokenId, quantity);\n    }\n\n    /**\n     * @notice Allows the owner to set a new registrant contract.\n     */\n    function setOperatorFilterRegistryAddress(\n        address registryAddress\n    ) external onlyOwner {\n        operatorFilterRegistryAddress = registryAddress;\n    }\n\n    /**\n     * @notice Allows the owner to set a new registrant address.\n     */\n    function setFilterRegistrant(address newRegistrant) external onlyOwner {\n        filterRegistrant = newRegistrant;\n    }\n\n    // =============================================================\n    //                          Presale\n    // =============================================================\n\n    /**\n     * @notice Allows the owner to mint from treasury supply.\n     */\n    function mintDev(\n        address[] memory mintAddresses,\n        uint256[] memory mintQuantities\n    ) external onlyOwner {\n        for (uint256 i = 0; i < mintAddresses.length; ++i) {\n            _mint(mintAddresses[i], mintQuantities[i]);\n            if (totalSupply() > TREASURY_SUPPLY) revert OverDevSupplyLimit();\n        }\n    }\n\n    /**\n     * @notice Allows the owner to set the presale unlock times.\n     */\n    function setUnlockTimes(\n        uint24 first,\n        uint24 second,\n        uint24 third\n    ) external onlyOwner {\n        firstUnlockTime = first;\n        secondUnlockTime = second;\n        thirdUnlockTime = third;\n    }\n\n    /**\n     * @notice Allows selected presale addresses to assign wallet address to receive presale mints.\n     * @dev This does not do anything for addresses that were not selected on the presale contract.\n     */\n    function setPresaleMintAddress(address addr) external {\n        presaleDelegation[msg.sender] = addr;\n    }\n\n    /**\n     * @notice Allows owner to mint presale tokens. The ordering is randomzied on-chain so\n     * that the owner does not have control over which users get which tokens when uploading\n     * an array of presaleUsers\n     * @dev Presale contract already guarantees a cap on the # of presale tokens, so\n     * we will not check supply against the MINT_CAP in order to save gas.\n     */\n    function mintPresale(address[] memory presaleUsers) external onlyOwner {\n        uint256 nextId = _nextTokenId();\n\n        uint256 supplyLeft = presaleUsers.length;\n        while (supplyLeft > 0) {\n            // generate a random index less than the supply left\n            uint256 randomIndex = uint256(\n                keccak256(abi.encodePacked(block.timestamp, supplyLeft))\n            ) % supplyLeft;\n            address presaleUser = presaleUsers[randomIndex];\n\n            if (presaleMinted[presaleUser])\n                revert PresaleAddressAlreadyMinted();\n            presaleMinted[presaleUser] = true;\n\n            uint256 tokensOwed = Presale(PRESALE_ADDRESS).selectedBids(\n                presaleUser\n            );\n            _mintPresaleAddress(presaleUser, nextId, tokensOwed);\n\n            unchecked {\n                --supplyLeft;\n                // Replace the chosen address with the last address not chosen\n                presaleUsers[randomIndex] = presaleUsers[supplyLeft];\n                nextId += tokensOwed;\n            }\n        }\n    }\n\n    /**\n     * @dev mints a certain amount of tokens to the presale address or its delegation\n     * if it has delegated another wallet. These tokens will be locked up and released\n     * 1/3rd of the amounts at a time.\n     */\n    function _mintPresaleAddress(\n        address presale,\n        uint256 nextId,\n        uint256 amount\n    ) internal {\n        if (presaleDelegation[presale] != address(0)) {\n            _mint(presaleDelegation[presale], amount);\n        } else {\n            _mint(presale, amount);\n        }\n\n        unchecked {\n            // Cheaper gas wise to do every 3 tokens and deal with the remainder afterwards\n            // than to do if statements within the loop.\n            for (uint256 j = 0; j < amount / 3; ) {\n                uint256 start = nextId + j * 3;\n\n                _setExtraDataAt(start, thirdUnlockTime);\n                _setExtraDataAt(start + 1, secondUnlockTime);\n                _setExtraDataAt(start + 2, firstUnlockTime);\n                emit TokenLocked(start, thirdUnlockTime);\n                emit TokenLocked(start + 1, secondUnlockTime);\n                emit TokenLocked(start + 2, firstUnlockTime);\n\n                ++j;\n            }\n\n            // temporarily adjust nextId to do minimal subtractions\n            // when setting `extraData` field\n            nextId += amount - 1;\n            if (amount % 3 == 2) {\n                _setExtraDataAt(nextId - 1, thirdUnlockTime);\n                emit TokenLocked(nextId - 1, thirdUnlockTime);\n\n                _setExtraDataAt(nextId, secondUnlockTime);\n                emit TokenLocked(nextId, secondUnlockTime);\n            } else if (amount % 3 == 1) {\n                _setExtraDataAt(nextId, thirdUnlockTime);\n                emit TokenLocked(nextId, thirdUnlockTime);\n            }\n        }\n    }\n\n    // =============================================================\n    //                   External Mint Methods\n    // =============================================================\n\n    /**\n     * @notice Allows the owner to change the active version of their signatures, this also\n     * allows a simple invalidation of all signatures they have created on old versions.\n     */\n    function setSigner(address signer_) external onlyOwner {\n        signer = signer_;\n    }\n\n    /**\n     * @notice Allows the owner to change the active version of their signatures, this also\n     * allows a simple invalidation of all signatures they have created on old versions.\n     */\n    function setSignatureVersion(uint256 version) external onlyOwner {\n        signatureVersion = version;\n    }\n\n    /**\n     * @notice Allows owner to sets if a certain tier is active or not.\n     */\n    function setIsTierActive(\n        string memory tier,\n        bool active\n    ) external onlyOwner {\n        isTierActive[tier] = active;\n    }\n\n    /**\n     * @notice Tiered mint for allegiants, immortals, and presale bidders.\n     * @dev After a tier is activated by the owner, users with the proper signature for that\n     * tier are able to mint based on what the owner has approved for their wallet.\n     */\n    function mintTier(\n        string memory tier,\n        uint256 price,\n        uint256 version,\n        uint256 allowedAmount,\n        uint256 buyAmount,\n        bytes memory sig\n    ) external payable {\n        if (totalSupply() + buyAmount > MINT_CAP) revert OverMintLimit();\n        if (!isTierActive[tier]) revert TierNotActive();\n        if (version != signatureVersion) revert InvalidSignatureVersion();\n\n        if (buyAmount > allowedAmount) revert InvalidSignatureBuyAmount();\n        if (msg.value != price * buyAmount) revert IncorrectMsgValue();\n\n        bytes32 hash = ECDSA.toEthSignedMessageHash(\n            keccak256(\n                abi.encode(\n                    tier,\n                    address(this),\n                    price,\n                    version,\n                    allowedAmount,\n                    msg.sender\n                )\n            )\n        );\n        if (signatureUsed[hash]) revert SignatureAlreadyUsed();\n        signatureUsed[hash] = true;\n        if (hash.recover(sig) != signer) revert InvalidSignature();\n\n        _mint(msg.sender, buyAmount);\n    }\n\n    /**\n     * @notice Allows the owner to set the public mint price.\n     * @dev If this is 0, it is assumed that the public mint is not active.\n     */\n    function setPublicMintPrice(uint256 price) external onlyOwner {\n        publicMintPrice = price;\n    }\n\n    /**\n     * @notice Public mint method. Will not work while {publicMintPrice} is 0.\n     * Unlikely to be enabled because it can be easily botted.\n     */\n    function mintPublic(uint256 amount) external payable {\n        if (tx.origin != msg.sender) revert NotEOA();\n        if (totalSupply() + amount > MINT_CAP) revert OverMintLimit();\n        if (publicMintPrice == 0) revert PublicMintNotLive();\n        if (amount > MAX_PUBLIC_MINT_TXN_SIZE) revert OverMintLimit();\n\n        if (msg.value != amount * publicMintPrice) revert IncorrectMsgValue();\n        _mint(msg.sender, amount);\n    }\n\n    // =============================================================\n    //                       Auction Methods\n    // =============================================================\n\n    /**\n     * @notice Allows the owner to set the auction parameters\n     */\n    function setOverallAuctionParams(\n        uint40 startPrice_,\n        uint40 minStackedBidIncrement_,\n        uint8 minBidIncrementPercentage_,\n        uint16 timeBuffer_\n    ) external onlyOwner {\n        auctionParams.startPrice = startPrice_;\n        auctionParams.minStackedBidIncrement = minStackedBidIncrement_;\n        auctionParams.minBidIncrementPercentage = minBidIncrementPercentage_;\n        auctionParams.timeBuffer = timeBuffer_;\n    }\n\n    /**\n     * @notice Allows the owner to set the auctioneer address.\n     */\n    function setAuctioneer(address auctioneer_) external onlyOwner {\n        auctioneer = auctioneer_;\n    }\n\n    /**\n     * @notice Allows the autioneer to start the auction of `numTokens` from `startTime` to `endTime`.\n     * @dev Auctions can only start after all minting has terminated. We cannot auction more than\n     * MAX_NUM_BIDS at a time. Only one auction can be live at a time.\n     */\n    function startAuction(\n        uint8 numTokens,\n        uint48 startTime,\n        uint48 endTime\n    ) external {\n        if (auctioneer != msg.sender) revert CallerNotAuctioneer();\n        if (totalSupply() < MINT_CAP) revert MintingNotFinished();\n        if (totalSupply() + numTokens > TOTAL_SUPPLY) revert OverTokenLimit();\n        if (numTokens > MAX_NUM_BIDS) revert OverMaxBids();\n        if (auctionParams.numTokens != 0) revert AuctionStillLive();\n        if (auctionParams.startPrice == 0) revert AuctionParamsNotInitialized();\n\n        auctionParams.numTokens = numTokens;\n        auctionParams.startTimestamp = startTime;\n        auctionParams.endTimestamp = endTime;\n\n        emit AuctionStarted(auctionParams.index);\n    }\n\n    /**\n     * @notice Allows the auctioneer to end the auction.\n     * @dev Auctions can end at any time by the owner's discretion and when it ends all\n     * current bids are accepted. The owner is also now able to withdraw the funds\n     * that were reserved for the auction, and active bids data id reset.\n     */\n    function endAuction() external {\n        if (auctioneer != msg.sender) revert CallerNotAuctioneer();\n        if (auctionParams.numTokens == 0) revert AuctionNotLive();\n\n        uint256 lowestPrice = activeBids[getBidIndexToUpdate()].amount;\n        for (uint256 i = 0; i < auctionParams.numTokens; ) {\n            if (activeBids[i].bidder == address(0)) {\n                break;\n            }\n\n            _mint(activeBids[i].bidder, 1);\n\n            // getBidIndex to update gaurantees no activeBids[i] is less than lowestPrice.\n            unchecked {\n                _transferETH(\n                    activeBids[i].bidder,\n                    activeBids[i].amount - lowestPrice\n                );\n                ++i;\n            }\n        }\n\n        unchecked {\n            ++auctionParams.index;\n        }\n        auctionParams.numTokens = 0;\n        delete activeBids;\n        reserveAuctionETH = 0;\n    }\n\n    /**\n     * @notice Gets the index of the entry in activeBids to update\n     * @dev The index to return will be decided by the following rules:\n     * If there are less than auctionTokens bids, the index of the first empty slot is returned.\n     * If there are auctionTokens or more bids, the index of the lowest value bid is returned. If\n     * there is a tie, the most recent bid with the low amount will be returned. If there is a tie\n     * among bidTimes, the highest index is chosen.\n     */\n    function getBidIndexToUpdate() public view returns (uint8) {\n        uint256 minAmount = activeBids[0].amount;\n        // If the first value is 0 then we can assume that no bids have been submitted\n        if (minAmount == 0) {\n            return 0;\n        }\n\n        uint8 minIndex = 0;\n        uint64 minBidTime = activeBids[0].bidTime;\n\n        for (uint8 i = 1; i < auctionParams.numTokens; ) {\n            uint256 bidAmount = activeBids[i].amount;\n            uint64 bidTime = activeBids[i].bidTime;\n\n            // A zero bidAmount means the slot is empty because we enforce non-zero bid amounts\n            if (bidAmount == 0) {\n                return i;\n            } else if (\n                bidAmount < minAmount ||\n                (bidAmount == minAmount && bidTime >= minBidTime)\n            ) {\n                minAmount = bidAmount;\n                minIndex = i;\n                minBidTime = bidTime;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return minIndex;\n    }\n\n    /**\n     * @notice Handle users' bids\n     * @dev Bids must be made while the auction is live. Bids must meet a minimum reserve price.\n     *\n     * The first {auctionParams.numTokens} bids made will be accepted as valid. Subsequent bids must be a percentage\n     * higher than the lowest of the active bids. When a low bid is replaced, the ETH will\n     * be refunded back to the original bidder.\n     *\n     * If a valid bid comes in within the last `timeBuffer` seconds, the auction will be extended\n     * for another `timeBuffer` seconds. This will continue until no new active bids come in.\n     *\n     * If a wallet makes a bid while it still has an active bid, the second bid will\n     * stack on top of the first bid. If the second bid doesn't meet the `minStackedBidIncrement`\n     * threshold, an error will be thrown. A wallet will only have one active bid at at time.\n     */\n    function bid() external payable {\n        if (msg.sender != tx.origin) revert NotEOA();\n        if (auctionParams.numTokens == 0) {\n            revert AuctionNotInitialized();\n        }\n        if (\n            block.timestamp < auctionParams.startTimestamp ||\n            block.timestamp > auctionParams.endTimestamp\n        ) {\n            revert AuctionNotLive();\n        }\n\n        BidIndex memory existingIndex = bidIndexes[auctionParams.index][\n            msg.sender\n        ];\n        if (existingIndex.isSet) {\n            // Case when the user already has an active bid\n            if (\n                msg.value <\n                auctionParams.minStackedBidIncrement * AUCTION_PRICE_MULTIPLIER\n            ) {\n                revert BidIncrementTooLow();\n            }\n\n            uint192 oldValue = activeBids[existingIndex.index].amount;\n            unchecked {\n                reserveAuctionETH += msg.value;\n                activeBids[existingIndex.index].amount =\n                    oldValue +\n                    uint192(msg.value);\n            }\n            activeBids[existingIndex.index].bidTime = uint64(block.timestamp);\n\n            emit BidIncreased(\n                auctionParams.index,\n                msg.sender,\n                oldValue,\n                msg.value\n            );\n        } else {\n            if (\n                msg.value < auctionParams.startPrice * AUCTION_PRICE_MULTIPLIER\n            ) {\n                revert ReservePriceNotMet();\n            }\n\n            uint8 lowestBidIndex = getBidIndexToUpdate();\n            uint256 lowestBidAmount = activeBids[lowestBidIndex].amount;\n            address lowestBidder = activeBids[lowestBidIndex].bidder;\n\n            unchecked {\n                if (\n                    msg.value <\n                    lowestBidAmount +\n                        (lowestBidAmount *\n                            auctionParams.minBidIncrementPercentage) /\n                        100\n                ) {\n                    revert IncrementalPriceNotMet();\n                }\n                reserveAuctionETH += msg.value - lowestBidAmount;\n            }\n\n            // Refund lowest bidder and remove bidIndexes entry\n            if (lowestBidder != address(0)) {\n                delete bidIndexes[auctionParams.index][lowestBidder];\n                _transferETH(lowestBidder, lowestBidAmount);\n            }\n\n            activeBids[lowestBidIndex] = Bid({\n                bidder: msg.sender,\n                amount: uint192(msg.value),\n                bidTime: uint64(block.timestamp)\n            });\n\n            bidIndexes[auctionParams.index][msg.sender] = BidIndex({\n                index: lowestBidIndex,\n                isSet: true\n            });\n\n            emit NewBid(auctionParams.index, msg.sender, msg.value);\n        }\n\n        // Extend the auction if the bid was received within `timeBuffer` of the auction end time\n        if (\n            auctionParams.endTimestamp - block.timestamp <\n            auctionParams.timeBuffer\n        ) {\n            unchecked {\n                auctionParams.endTimestamp = uint48(\n                    block.timestamp + auctionParams.timeBuffer\n                );\n            }\n            emit AuctionExtended(auctionParams.index);\n        }\n    }\n\n    // =============================================================\n    //                        Miscellaneous\n    // =============================================================\n\n    /**\n     * @notice Allows owner to emit TokenUnlocked events\n     * @dev This method does NOT need to be called for locked tokens to be unlocked.\n     * It is here to emit unlock events for marketplaces to know when tokens are\n     * eligible for trade. The burden to call this method on the right tokens at the\n     * correct timestamp is on the owner of the contract.\n     */\n    function emitTokensUnlocked(uint256[] memory tokens) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; ) {\n            emit TokenUnlocked(tokens[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Allows owner to withdraw a specified amount of ETH to a specified address.\n     */\n    function withdraw(\n        address withdrawAddress,\n        uint256 amount\n    ) external onlyOwner {\n        unchecked {\n            if (amount > address(this).balance - reserveAuctionETH) {\n                amount = address(this).balance - reserveAuctionETH;\n            }\n        }\n\n        if (!_transferETH(withdrawAddress, amount)) revert WithdrawFailed();\n    }\n\n    /**\n     * @notice Internal function to transfer ETH to a specified address.\n     */\n    function _transferETH(address to, uint256 value) internal returns (bool) {\n        (bool success, ) = to.call{ value: value, gas: 30000 }(new bytes(0));\n        return success;\n    }\n\n    error AuctionNotInitialized();\n    error AuctionNotLive();\n    error AuctionParamsNotInitialized();\n    error AuctionStillLive();\n    error BidIncrementTooLow();\n    error CallerNotAuctioneer();\n    error IncorrectMsgValue();\n    error IncrementalPriceNotMet();\n    error InvalidSignatureBuyAmount();\n    error InvalidSignature();\n    error InvalidSignatureVersion();\n    error MintingNotFinished();\n    error NotEOA();\n    error OverDevSupplyLimit();\n    error OverMintLimit();\n    error OverTokenLimit();\n    error OverMaxBids();\n    error OperatorNotAllowed();\n    error PublicMintNotLive();\n    error PresaleAddressAlreadyMinted();\n    error ReservePriceNotMet();\n    error SignatureAlreadyUsed();\n    error TierNotActive();\n    error TokenTransferLocked();\n    error WithdrawFailed();\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}