{{
  "language": "Solidity",
  "sources": {
    "contracts/ANC_DANCE_staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/***\n *                                                                 .';:c:,.\n *                   ;0NNNNNNX.  lNNNNNNK;       .XNNNNN.     .:d0XWWWWWWWWXOo'\n *                 lXWWWWWWWWO   XWWWWWWWWO.     :WWWWWK    ;0WWWWWWWWWWWWWWWWWK,\n *              .dNWWWWWWWWWWc  ,WWWWWWWWWWNo    kWWWWWo  .0WWWWWNkc,...;oXWWXxc.\n *            ,kWWWWWWXWWWWWW.  dWWWWWXNWWWWWX; .NWWWWW.  KWWWWW0.         ;.\n *          :KWWWWWNd.lWWWWWO   XWWWWW:.xWWWWWWOdWWWWW0  cWWWWWW.\n *        lXWWWWWXl.  0WWWWW:  ,WWWWWN   '0WWWWWWWWWWWl  oWWWWWW;         :,\n *     .dNWWWWW0;    'WWWWWN.  xWWWWWx     :XWWWWWWWWW.  .NWWWWWWkc,'';ckNWWNOc.\n *   'kWWWWWWx'      oWWWWWk   NWWWWW,       oWWWWWWW0    '0WWWWWWWWWWWWWWWWWO;\n * .d000000o.        k00000;  ,00000k         .x00000:      .lkKNWWWWWWNKko;.\n *                                                               .,;;'.\n */\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./ANCStake.sol\";\nimport \"./IERC20F.sol\";\n\ncontract ANCDanceStake is ANCStake{\n    struct StakedDance {\n        uint128 stakingStartWeek;\n        uint32 coins;\n        uint32 stakingDuration;\n        uint32 paidDuration;\n    }\n\n    uint96 public immutable TOKENS_PER_COIN = 1e18; // 1 full coin = 10^18\n\n    IERC20F private _dance;\n\n    mapping(address => StakedDance[]) private _stakes;\n\n    constructor(uint256 percentPerWeek) ANCStake(percentPerWeek){ }\n\n    /* External Functions */\n\n    function stake(uint32 coins, uint16 stakingDuration) external stakingGate(stakingDuration){\n        require(coins > 0, \"Need to stake at least 1 DANCE\");\n        uint256 amount = uint256(coins) * TOKENS_PER_COIN;\n        uint256 allowance = _dance.allowance(msg.sender, address(this));\n        require(allowance >= amount, \"Check the token allowance\");\n        uint256 currentWeek = getCurrentWeek();\n        _dance.transferFromNoFee(msg.sender, address(this), amount);\n        _stakes[msg.sender].push(StakedDance(uint128(currentWeek), coins, stakingDuration, 0));\n        addSharesToWeeks(currentWeek, stakingDuration, getShares(coins, stakingDuration));\n    }\n\n    function unstake(uint256 id) external {\n        require(_stakes[msg.sender].length > id, \"Invalid ID\");\n        uint256 refund = _stakes[msg.sender][id].coins * TOKENS_PER_COIN;\n        uint256 payout = _unstakeDance(id);\n        _reservedTokens -= payout;\n        _danceSplitter.proxySend(msg.sender, payout);\n        _dance.transferNoFee(msg.sender, refund);\n    }\n\n    function unstakeAll() external {\n        require(_stakes[msg.sender].length > 0, \"No Dance Tokens staked\");\n        uint256 currentWeek = getCurrentWeek();\n        uint256 payout = 0;\n        uint256 refund = 0;\n\n        // While required since array length changes in _unstakeDance\n        uint256 i = 0;\n        while (i < _stakes[msg.sender].length) {\n            uint256 stakingStartWeek = _stakes[msg.sender][i].stakingStartWeek;\n            if(currentWeek - stakingStartWeek >= _stakes[msg.sender][i].stakingDuration){\n                refund += _stakes[msg.sender][i].coins * TOKENS_PER_COIN;\n                payout += _unstakeDance(i);\n            } else {\n                i += 1;\n            }\n        }\n        // require here so pre-computation will save you.\n        require(payout > 0, \"No staking period over\");\n        _reservedTokens -= payout;\n        _danceSplitter.proxySend(msg.sender, payout);\n        _dance.transferNoFee(msg.sender, refund);\n    }\n\n    function payoutReward(uint256 id) external override {\n        require(_stakes[msg.sender].length > id, \"Invalid ID\");\n        StakedDance memory mstake = _stakes[msg.sender][id];\n        uint256 currentWeek = getCurrentWeek();\n        require(currentWeek - mstake.stakingStartWeek < mstake.stakingDuration, \"Staking period is over, use unstake function instead\");\n        require(mstake.stakingStartWeek + mstake.paidDuration < currentWeek, \"Nothing to pay out\");\n        reserveForPastWeeks(currentWeek);\n        uint256 payout = _getReward(currentWeek, mstake);\n        _stakes[msg.sender][id].paidDuration = uint16(min(currentWeek - mstake.stakingStartWeek, mstake.stakingDuration));\n        require(payout > 0, \"No reward to pay out\");\n        _reservedTokens -= payout;\n        _danceSplitter.proxySend(msg.sender, payout);\n    }\n\n    function payoutAllRewards() external {\n        StakedDance[] memory mstakes= _stakes[msg.sender];\n        require(mstakes.length > 0, \"No Dance Tokens staked\");\n        uint256 currentWeek = getCurrentWeek();\n        reserveForPastWeeks(currentWeek);\n        uint256 payout = 0;\n        uint256 stakingStartWeek;\n        uint256 duration;\n        uint256 paidDuration;\n        for (uint256 id = 0; id < mstakes.length; id++) {\n            stakingStartWeek = mstakes[id].stakingStartWeek;\n            duration = mstakes[id].stakingDuration;\n            paidDuration = mstakes[id].paidDuration;\n            if (currentWeek - stakingStartWeek < duration\n                && stakingStartWeek + paidDuration < currentWeek){\n                payout += _getReward(currentWeek, mstakes[id]);\n                _stakes[msg.sender][id].paidDuration = uint16(min(currentWeek - stakingStartWeek, duration));\n            }\n        }\n        // require here so pre-computation will save you.\n        require(payout > 0, \"No reward to pay out\");\n        _reservedTokens -= payout;\n        _danceSplitter.proxySend(msg.sender, payout);\n    }\n\n    function setRewardToken(address tokenAddress) external onlyOwner {\n        require(_dance == IERC20F(address(0)), \"dance token is already set\");\n        require(tokenAddress != address(0), \"dance token cannot be 0 address\");\n        _dance = IERC20F(tokenAddress);\n    }\n\n    /* Public Functions */\n\n    function getNumStaked(address address_) public view override returns(uint256){\n        return _stakes[address_].length;\n    }\n\n    function getStakeInfo(address address_, uint256 id_) public view returns(StakedDance memory){\n        return _stakes[address_][id_];\n    }\n\n    function getAvailablePayout(address address_, uint256 id_) public view returns(uint256){\n        uint256 currentWeek = getCurrentWeek();\n        StakedDance memory mstake = _stakes[address_][id_];\n        uint256 endWeek = mstake.stakingStartWeek + mstake.stakingDuration;\n        uint256 startWeek = mstake.stakingStartWeek + mstake.paidDuration;\n        uint256 shares = getShares(mstake.coins, mstake.stakingDuration);\n        return _getAvailablePayout(startWeek, endWeek, currentWeek, shares);\n    }\n\n    function getStakedIDs(address address_) public view override returns(uint256[] memory){\n        uint256 numStaked = getNumStaked(address_);\n        uint256[] memory stakedIDs = new uint256[](numStaked);\n        for (uint256 id = 0; id < numStaked; id++) {\n            stakedIDs[id] = id;\n        }\n        return stakedIDs;\n    }\n\n    function getShares(uint32 coins, uint32 stakingDuration) public pure returns(uint256){\n        // max shares per coin < (2^32 -1)/21000000 = 204\n        uint256 sD = stakingDuration;\n        uint256 base = 50;\n        uint256 linear = 30 * sD / MAX_STAKING_DURATION;\n        uint256 quadratic = 20 * sD * sD / (MAX_STAKING_DURATION*MAX_STAKING_DURATION);\n        return coins * (base + linear + quadratic);\n    }\n\n    /* Internal Functions */\n\n    function _unstakeDance(uint256 id) internal returns(uint256) {\n        StakedDance memory mstake = _stakes[msg.sender][id];\n        uint256 currentWeek = getCurrentWeek();\n        require(currentWeek - mstake.stakingStartWeek >= mstake.stakingDuration, \"Staking period not over\");\n        reserveForPastWeeks(currentWeek); // reserve reward tokens\n        uint256 payout = _getReward(currentWeek, mstake);\n        _stakes[msg.sender][id] = _stakes[msg.sender][_stakes[msg.sender].length - 1];\n        _stakes[msg.sender].pop();\n        return payout;\n    }\n\n    function _getReward(uint256 currentWeek, StakedDance memory mstake) internal view returns(uint256){\n        require(mstake.stakingStartWeek > 0, \"ID is not staked\");\n        uint256 payout = getStakingReward(\n            mstake.stakingStartWeek,\n            currentWeek,\n            mstake.stakingDuration,\n            mstake.paidDuration,\n            getShares(mstake.coins, uint16(mstake.stakingDuration))\n        );\n        // need to update state (paidDuration) in next step\n        return payout;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/ANCStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/***\n *                                                                 .';:c:,.\n *                   ;0NNNNNNX.  lNNNNNNK;       .XNNNNN.     .:d0XWWWWWWWWXOo'\n *                 lXWWWWWWWWO   XWWWWWWWWO.     :WWWWWK    ;0WWWWWWWWWWWWWWWWWK,\n *              .dNWWWWWWWWWWc  ,WWWWWWWWWWNo    kWWWWWo  .0WWWWWNkc,...;oXWWXxc.\n *            ,kWWWWWWXWWWWWW.  dWWWWWXNWWWWWX; .NWWWWW.  KWWWWW0.         ;.\n *          :KWWWWWNd.lWWWWWO   XWWWWW:.xWWWWWWOdWWWWW0  cWWWWWW.\n *        lXWWWWWXl.  0WWWWW:  ,WWWWWN   '0WWWWWWWWWWWl  oWWWWWW;         :,\n *     .dNWWWWW0;    'WWWWWN.  xWWWWWx     :XWWWWWWWWW.  .NWWWWWWkc,'';ckNWWNOc.\n *   'kWWWWWWx'      oWWWWWk   NWWWWW,       oWWWWWWW0    '0WWWWWWWWWWWWWWWWWO;\n * .d000000o.        k00000;  ,00000k         .x00000:      .lkKNWWWWWWNKko;.\n *                                                               .,;;'.\n */\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./FeeSplitter.sol\";\n\nabstract contract ANCStake is Ownable{\n\n    struct TwoWeekInfo{\n        uint96 tokensEvenWeek;\n        uint32 totalSharesEvenWeek;\n        uint96 tokensOddWeek;\n        uint32 totalSharesOddWeek;\n    }\n\n    uint256 public constant MAX_STAKING_DURATION = 52;\n    uint256 public constant ONE_WEEK = 604800; // 1 week = 604800\n    uint256 public tenthPercentPerWeek;\n    uint256 public stakingStart;\n\n    FeeSplitter internal _danceSplitter;\n\n    uint256 internal _reservedTokens;\n\n    mapping(uint256 => TwoWeekInfo) private _weeklyInfo;\n\n    constructor(uint256 tenthPercentPerWeek_){\n        tenthPercentPerWeek = tenthPercentPerWeek_;\n    }\n\n    modifier stakingGate(uint32 duration){\n        require(stakingStart > 0, \"Staking has not started\");\n        require(duration >= 1, \"Minimum staking period 1 week\");\n        require(duration <= MAX_STAKING_DURATION, \"Maximum staking period 1 year\");\n        _;\n    }\n\n    /* External Functions */\n\n    function payoutReward(uint256) virtual external;\n\n    function setRewardSplitter(address splitterAddress) external onlyOwner {\n        require(_danceSplitter == FeeSplitter(address(0)), \"Splitter already set\");\n        require(splitterAddress != address(0), \"splitter cannot be 0 address\");\n        _danceSplitter = FeeSplitter(splitterAddress);\n    }\n\n    function setStakingStart() external onlyOwner {\n        require(stakingStart == 0, \"Staking has already started.\");\n        stakingStart = block.timestamp;\n    }\n\n    function setTenthPercentPerWeek(uint256 tenthPercentPerWeek_) external onlyOwner {\n        require(tenthPercentPerWeek_ > 0, \"Value must be bigger than 0\");\n        tenthPercentPerWeek = tenthPercentPerWeek_;\n    }\n\n    function getFundsForWeeksLowerBound(uint256 startWeek, uint256 endWeek) external view returns(uint256){\n        uint256 currentWeek = getCurrentWeek();\n        uint256 currentFunds = getAvailableFunds();\n        uint256 lastUnreservedWeek = findLastUnreservedWeek(currentWeek);\n        uint256 fundsForWeeks = 0;\n        for (uint256 week = startWeek; week < lastUnreservedWeek; week++) {\n            fundsForWeeks += getBasePayoutForWeek(week);\n        }\n        uint256 basePayoutForWeek;\n        for (uint256 week = lastUnreservedWeek; week < currentWeek; week++) {\n            if (getSharesForWeek(week) > 0) {\n                basePayoutForWeek = currentFunds * tenthPercentPerWeek / 1000;\n                currentFunds -= basePayoutForWeek;\n                fundsForWeeks += basePayoutForWeek;\n            }\n        }\n        for (uint256 week = currentWeek; week < endWeek; week++) {\n            basePayoutForWeek = currentFunds * tenthPercentPerWeek / 1000;\n            currentFunds -= basePayoutForWeek;\n            fundsForWeeks += basePayoutForWeek;\n        }\n        return fundsForWeeks;\n    }\n\n    /* Public Functions */\n\n    function getStakedIDs(address) public view virtual returns(uint256[] memory);\n\n    function getNumStaked(address) public view virtual returns(uint256);\n\n    function getAvailableFunds() public view returns(uint256){\n        return _danceSplitter.balanceOf(address(this)) - _reservedTokens;\n    }\n\n    function getBasePayoutForWeek(uint256 week) public view returns(uint256){\n        if(week & 1 == 0){\n            return _weeklyInfo[week].tokensEvenWeek;\n        }else{\n            return _weeklyInfo[week-1].tokensOddWeek;\n        }\n    }\n\n    function getSharesForWeek(uint256 week) public view returns(uint256){\n        if(week & 1 == 0){\n            return _weeklyInfo[week].totalSharesEvenWeek;\n        }else{\n            return _weeklyInfo[week-1].totalSharesOddWeek;\n        }\n    }\n\n    function getCurrentWeek() public view returns(uint256){\n        return timestamp2week(block.timestamp);\n    }\n\n    /* Internal Functions */\n\n    function addSharesToWeeks(uint256 startWeek, uint256 duration, uint256 amount) internal{\n        for (uint256 i = startWeek; i < startWeek+duration; i++) {\n            if(i & 1 == 0){\n                _weeklyInfo[i].totalSharesEvenWeek += uint32(amount);\n            }else{\n                _weeklyInfo[i-1].totalSharesOddWeek += uint32(amount);\n            }\n        }\n    }\n\n    function reserveAndGetTokens(uint256 balance) internal returns(uint256){\n        //console.log(\"balance:\", _dance.balanceOf(address(this)));\n        uint256 newReserved = (balance - _reservedTokens) * tenthPercentPerWeek / 1000;\n        _reservedTokens += newReserved;\n        //console.log(\"reserved tokens:\", _reservedTokens);\n        return newReserved;\n    }\n\n    function reserveForPastWeeks(uint256 currentWeek) internal{\n        // find last reserved Week\n        uint256 lastUnreservedWeek = findLastUnreservedWeek(currentWeek);\n        //console.log(\"current week\", currentWeek);\n        //console.log(\"last unreserved week \", lastUnreservedWeek);\n        if (lastUnreservedWeek >= currentWeek) return;\n        // reserved unclaimed weeks\n        uint256 balance = _danceSplitter.balanceOf(address(this));\n        for (uint256 week = lastUnreservedWeek; week < currentWeek; week++) {\n            if(week & 1 == 0){\n                if (_weeklyInfo[week].totalSharesEvenWeek > 0) {\n                    _weeklyInfo[week].tokensEvenWeek = uint96(reserveAndGetTokens(balance));\n                    //console.log(\"tokens for week\", week, _weeklyInfo[week].tokensEvenWeek);\n                }\n            } else {\n                if (_weeklyInfo[week-1].totalSharesOddWeek > 0) {\n                    _weeklyInfo[week-1].tokensOddWeek = uint96(reserveAndGetTokens(balance));\n                    //console.log(\"tokens for week\", week, _weeklyInfo[week-1].tokensOddWeek);\n                }\n            }\n        }\n    }\n\n    function findLastUnreservedWeek(uint256 currentWeek) internal view returns(uint256){\n        uint256 week = currentWeek;\n        uint256 tokensForWeek;\n        while(week > 1) {\n            week -= 1;\n            if(week & 1 == 0){\n                tokensForWeek = _weeklyInfo[week].tokensEvenWeek;\n            } else {\n                tokensForWeek = _weeklyInfo[week-1].tokensOddWeek;\n            }\n            if (tokensForWeek > 0) return week+1;\n        }\n        return 0;\n    }\n\n    function getStakingReward(\n        uint256 stakingStartWeek,\n        uint256 currentWeek,\n        uint256 duration,\n        uint256 paidDuration,\n        uint256 shares\n    ) internal view returns(uint256){\n        if (stakingStartWeek + paidDuration >= currentWeek) return 0; // no weeks to pay out\n        return _getStakingReward(stakingStartWeek+paidDuration, min(currentWeek, stakingStartWeek+duration), shares);\n    }\n\n    function _getStakingReward(uint256 startWeek, uint256 endWeek, uint256 shares) internal view returns(uint256){\n        uint256 payout = 0;\n        uint256 weeklyShares;\n        for(uint256 i = startWeek; i < endWeek; i++){\n            if(i & 1 == 0){\n                weeklyShares = _weeklyInfo[i].totalSharesEvenWeek;\n            } else {\n                weeklyShares = _weeklyInfo[i-1].totalSharesOddWeek;\n            }\n            payout += (getBasePayoutForWeek(i) * shares) / weeklyShares;\n        }\n        return payout;\n    }\n\n    function _getAvailablePayout(uint256 startWeek, uint256 endWeek, uint256 currentWeek, uint256 shares)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 currentFunds = getAvailableFunds();\n        endWeek = min(endWeek, currentWeek);\n        uint256 lastUnreservedWeek = findLastUnreservedWeek(currentWeek);\n        uint256 payout = 0;\n        uint256 basePayoutForWeek;\n        uint256 sharesForWeek;\n        for (uint256 week = startWeek; week < endWeek; week++) {\n            sharesForWeek = getSharesForWeek(week);\n            if (sharesForWeek > 0) {\n                if (week < lastUnreservedWeek) { // week has funds reserved\n                    basePayoutForWeek = getBasePayoutForWeek(week);\n                } else { // week does not have funds reserved\n                    basePayoutForWeek = currentFunds * tenthPercentPerWeek / 1000;\n                    currentFunds -= basePayoutForWeek;\n                }\n                payout += (basePayoutForWeek * shares) / sharesForWeek;\n            }\n        }\n        return payout;\n    }\n\n    function timestamp2week (uint256 timestamp) internal view returns(uint256) {\n        return ((timestamp - stakingStart) / ONE_WEEK)+1;\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return (a <= b) ? a : b;\n    }\n\n}\n"
    },
    "contracts/IERC20F.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20F is IERC20 {\n\n    function transferNoFee(address to, uint256 amount) external returns (bool);\n\n    function transferFromNoFee(address from, address to, uint256 amount) external returns (bool);\n\n    function fee() external view returns(uint256[2] memory);\n\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/FeeSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface FeeSplitter {\n\n    function proxySend(address to, uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}