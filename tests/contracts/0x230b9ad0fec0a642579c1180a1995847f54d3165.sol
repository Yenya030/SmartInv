{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "src/Sales.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nabstract contract IEditions {\n    struct Edition {\n        bool frozenMetadata;\n        uint256 maxSupply;\n        string uri;\n    }\n\n    function editionExists(uint256 __id) external view virtual returns (bool);\n\n    function mint(\n        address __account,\n        uint256 __id,\n        uint256 __amount\n    ) external virtual;\n\n    function maxSupply(uint __id) external virtual returns (uint256);\n}\n\ncontract Sales is Ownable, ReentrancyGuard {\n    error AmountExceedsTransactionLimit();\n    error AmountExceedsWalletLimit();\n    error EditionNotFound();\n    error HasEnded();\n    error HasNotStarted();\n    error HasStarted();\n    error IncorrectPrice();\n    error InvalidProof();\n    error InvalidStart();\n    error InvalidTimeframe();\n    error LimitGreaterThanSupply();\n    error MerkleRootNotSet();\n    error ProofIsRequired();\n    error SaleNotFound();\n    error WithdrawFailed();\n\n    event SaleCreated(uint256 __tokenID, uint256 __saleID);\n    event SalePriceUpdated(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __price\n    );\n    event SaleStartUpdated(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __start\n    );\n    event SaleEndUpdated(uint256 __tokenID, uint256 __saleID, uint256 __end);\n    event SaleWalletLimitUpdated(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __walletLimit\n    );\n    event SaleMerkleRootUpdated(\n        uint256 __tokenID,\n        uint256 __saleID,\n        bytes32 __merkleRoot\n    );\n\n    struct Sale {\n        uint256 price;\n        uint256 start;\n        uint256 end;\n        uint256 walletLimit;\n        bytes32 merkleRoot;\n    }\n\n    IEditions private _editionsContract;\n\n    uint256 public transactionLimit = 100;\n\n    // Mapping of sales\n    mapping(uint256 => Sale[]) private _sales;\n\n    // Mapping of wallet sales\n    mapping(uint256 => mapping(uint256 => mapping(address => uint256)))\n        private _walletSales;\n\n    /**\n     * @dev Sets editions contract using contract address upon construction.\n     */\n    constructor(address __editionsContractAddress) {\n        _editionsContract = IEditions(__editionsContractAddress);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // MODIFIERS\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Checks if sale exists.\n     *\n     * Requirements:\n     *\n     * - `__id` must be of existing edition.\n     */\n    modifier onlyExistingSale(uint256 __tokenID, uint256 __saleID) {\n        if (__saleID >= _sales[__tokenID].length) {\n            revert SaleNotFound();\n        }\n        _;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // INTERNALS\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Used to complete purchase.\n     *\n     * Requirements:\n     *\n     * - `__tokenID` must be of existing edition.\n     * - `__saleID` must be of existing sale.\n     * - `__amount` plus current wallet sales cannot exceed wallet limit.\n     * - `msg.value` must be correct price of sale.\n     * - `block.timestampe` must be within sale timeframe.\n     */\n    function _buy(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __amount\n    ) internal {\n        Sale memory sale = _sales[__tokenID][__saleID];\n\n        if (__amount > transactionLimit) revert AmountExceedsTransactionLimit();\n\n        if (sale.walletLimit != 0) {\n            if (\n                _walletSales[__tokenID][__saleID][_msgSender()] + __amount >\n                sale.walletLimit\n            ) revert AmountExceedsWalletLimit();\n        }\n\n        if (sale.price * __amount != msg.value) {\n            revert IncorrectPrice();\n        }\n\n        if (sale.start > 0 && block.timestamp < sale.start) {\n            revert HasNotStarted();\n        }\n\n        if (sale.end > 0 && block.timestamp > sale.end) {\n            revert HasEnded();\n        }\n\n        _walletSales[__tokenID][__saleID][_msgSender()] =\n            _walletSales[__tokenID][__saleID][_msgSender()] +\n            __amount;\n\n        _editionsContract.mint(_msgSender(), __tokenID, __amount);\n    }\n\n    /**\n     * @dev Used to verify merkle proof.\n     *\n     * Requirements:\n     *\n     * - Sale's `merkleRoot` must be set.\n     */\n    function _verifyProof(\n        address __sender,\n        uint256 __tokenID,\n        uint256 __saleID,\n        bytes32[] calldata __proof\n    ) internal view {\n        if (_sales[__tokenID][__saleID].merkleRoot == 0x0)\n            revert MerkleRootNotSet();\n\n        bool verified = MerkleProof.verify(\n            __proof,\n            _sales[__tokenID][__saleID].merkleRoot,\n            keccak256(abi.encodePacked(__sender))\n        );\n\n        if (!verified) revert InvalidProof();\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // ADMIN\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Used to create a new sale.\n     *\n     * Requirements:\n     *\n     * - `__tokenID` must be of existing edition.\n     * - `__start` must be later than current time.\n     * - `__start` must be earlier than `__end`.\n     * - `__walletLimit` must be less or equal to max supply of edition.\n     *\n     * Emits a {SaleCreated} event.\n     *\n     */\n    function createSale(\n        uint256 __tokenID,\n        uint256 __price,\n        uint256 __start,\n        uint256 __end,\n        uint256 __walletLimit,\n        bytes32 __merkleRoot\n    ) external onlyOwner {\n        if (!_editionsContract.editionExists(__tokenID)) {\n            revert EditionNotFound();\n        }\n\n        if (__start > 0 && block.timestamp > __start) revert InvalidStart();\n\n        if (__end > 0 && __start > __end) revert InvalidTimeframe();\n\n        if (\n            _editionsContract.maxSupply(__tokenID) > 0 &&\n            __walletLimit > _editionsContract.maxSupply(__tokenID)\n        ) revert LimitGreaterThanSupply();\n\n        _sales[__tokenID].push(\n            Sale({\n                price: __price,\n                start: __start,\n                end: __end,\n                walletLimit: __walletLimit,\n                merkleRoot: __merkleRoot\n            })\n        );\n\n        emit SaleCreated(__tokenID, _sales[__tokenID].length - 1);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // OWNER\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Used to update the merkle root of a sale.\n     *\n     * Emits a {SaleMerkleRootUpdated} event.\n     *\n     */\n    function editMerkleRoot(\n        uint256 __tokenID,\n        uint256 __saleID,\n        bytes32 __merkleRoot\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        _sales[__tokenID][__saleID].merkleRoot = __merkleRoot;\n\n        emit SaleMerkleRootUpdated(__tokenID, __saleID, __merkleRoot);\n    }\n\n    /**\n     * @dev Used to update the price of a sale.\n     *\n     * Emits a {SalePriceUpdated} event.\n     *\n     */\n    function editPrice(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __price\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        _sales[__tokenID][__saleID].price = __price;\n\n        emit SalePriceUpdated(__tokenID, __saleID, __price);\n    }\n\n    /**\n     * @dev Used to update the start/end timeframe of a sale.\n     *\n     * Requirements:\n     *\n     * - Sale must not have already started.\n     * - `__start` must be later than current time.\n     * - `__start` must be earlier than sale end.\n     *\n     * Emits a {SaleStartUpdated} event.\n     *\n     */\n    function editStart(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __start\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        if (block.timestamp >= _sales[__tokenID][__saleID].start)\n            revert HasStarted();\n\n        if (__start > 0 && block.timestamp > __start) revert InvalidStart();\n\n        if (\n            _sales[__tokenID][__saleID].end > 0 &&\n            __start > _sales[__tokenID][__saleID].end\n        ) revert InvalidTimeframe();\n\n        _sales[__tokenID][__saleID].start = __start;\n\n        emit SaleStartUpdated(__tokenID, __saleID, __start);\n    }\n\n    /**\n     * @dev Used to update the start/end timeframe of a sale.\n     *\n     * Requirements:\n     *\n     * - Sale must not have already ended.\n     * - `__end` must be later than sale start.\n     *\n     * Emits a {SaleEndUpdated} event.\n     *\n     */\n    function editEnd(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __end\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        if (\n            _sales[__tokenID][__saleID].end > 0 &&\n            block.timestamp >= _sales[__tokenID][__saleID].end\n        ) revert HasEnded();\n\n        if (__end > 0 && _sales[__tokenID][__saleID].start > __end)\n            revert InvalidTimeframe();\n\n        _sales[__tokenID][__saleID].end = __end;\n\n        emit SaleEndUpdated(__tokenID, __saleID, __end);\n    }\n\n    /**\n     * @dev Used to update the wallet limit of a sale.\n     *\n     * Requirements:\n     *\n     * - `__walletLimit` must be less or equal to max supply of edition.\n     *\n     * Emits a {SaleWalletLimitUpdated} event.\n     *\n     */\n    function editWalletLimit(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __walletLimit\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        if (\n            _editionsContract.maxSupply(__tokenID) > 0 &&\n            __walletLimit > _editionsContract.maxSupply(__tokenID)\n        ) revert LimitGreaterThanSupply();\n\n        _sales[__tokenID][__saleID].walletLimit = __walletLimit;\n\n        emit SaleWalletLimitUpdated(__tokenID, __saleID, __walletLimit);\n    }\n\n    /**\n     * @dev Used to end a sale immediately.\n     *\n     * Requirements:\n     *\n     * - Sale must not have already ended.\n     *\n     * Emits a {SaleEndUpdated} event.\n     *\n     */\n    function endSale(\n        uint256 __tokenID,\n        uint256 __saleID\n    ) external onlyOwner onlyExistingSale(__tokenID, __saleID) {\n        if (\n            _sales[__tokenID][__saleID].end > 0 &&\n            block.timestamp >= _sales[__tokenID][__saleID].end\n        ) revert HasEnded();\n\n        _sales[__tokenID][__saleID].end = block.timestamp;\n\n        emit SaleEndUpdated(__tokenID, __saleID, block.timestamp);\n    }\n\n    /**\n     * @dev Used to withdraw funds from the contract.\n     */\n    function setTransactionLimit(\n        uint256 __transactionLimit\n    ) external onlyOwner {\n        transactionLimit = __transactionLimit;\n    }\n\n    /**\n     * @dev Used to withdraw funds from the contract.\n     */\n    function withdraw(uint256 amount) external onlyOwner {\n        (bool success, ) = owner().call{value: amount}(\"\");\n\n        if (!success) revert WithdrawFailed();\n    }\n\n    /**\n     * @dev Used to withdraw all funds from the contract.\n     */\n    function withdrawAll() external onlyOwner {\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\n\n        if (!success) revert WithdrawFailed();\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // WRITES\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Buys an edition.\n     */\n    function buy(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __amount\n    ) external payable nonReentrant onlyExistingSale(__tokenID, __saleID) {\n        if (_sales[__tokenID][__saleID].merkleRoot != 0x0)\n            revert ProofIsRequired();\n\n        _buy(__tokenID, __saleID, __amount);\n    }\n\n    /**\n     * @dev Buys an edition with a merkle proof.\n     */\n    function buyWithProof(\n        uint256 __tokenID,\n        uint256 __saleID,\n        uint256 __amount,\n        bytes32[] calldata __proof\n    ) external payable nonReentrant onlyExistingSale(__tokenID, __saleID) {\n        _verifyProof(_msgSender(), __tokenID, __saleID, __proof);\n\n        _buy(__tokenID, __saleID, __amount);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // READS\n    ////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * @dev Returns an edition sale.\n     */\n    function getSale(\n        uint256 __tokenID,\n        uint256 __saleID\n    )\n        external\n        view\n        onlyExistingSale(__tokenID, __saleID)\n        returns (Sale memory)\n    {\n        return _sales[__tokenID][__saleID];\n    }\n\n    /**\n     * @dev Returns number of wallet sales per edition.\n     */\n    function getWalletSales(\n        address __account,\n        uint256 __tokenID,\n        uint256 __saleID\n    ) external view onlyExistingSale(__tokenID, __saleID) returns (uint256) {\n        return _walletSales[__tokenID][__saleID][__account];\n    }\n\n    /**\n     * @dev Returns number of sales per edition.\n     */\n    function totalSales(uint256 __tokenID) external view returns (uint256) {\n        return _sales[__tokenID].length;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}