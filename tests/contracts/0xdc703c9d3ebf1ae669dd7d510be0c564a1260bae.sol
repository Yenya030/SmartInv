{{
  "language": "Solidity",
  "sources": {
    "contracts/ElixirBottles.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// Creator: 0xVeryBased\n\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛//============\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛//============\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\============//⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\============//⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\  ( ( (   //⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\  ( ( (   //⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||========== ≈≈≈≈≈≈≈≈ ==========||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛///============================\\\\\\⊛⊛⊛⊛⊛⊛⊛⊛||==============================||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛//============\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛//============\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\============//⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\============//⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\  ( ( (   //⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\  ( ( (   //⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ( ( (  |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|||  ) ) ) |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||| ≈≈≈≈≈≈ |||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛==== ≈≈≈≈≈≈≈≈ ====⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛||========== ≈≈≈≈≈≈≈≈ ==========||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛/// ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ \\\\\\⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛|| ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ||⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\ ≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈≈ ///⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\================///⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\\\\\\================///⊛⊛⊛⊛⊛⊛⊛⊛⊛\n// ⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛⊛\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./ERC721.sol\";\nimport \"./ERC721TopLevel.sol\";\n\ncontract ElixirBottles is ERC721TopLevel {\n    using Strings for uint256;\n\n    // Liyat yew gnilaaw gnilaww ay oo\n    \n    bool public izItDer = true;\n\n    // decaf gib\n\n    enum HowHard2See {\n        BlindAF,\n        Hard2See,\n        ItGone\n    }\n\n    // HTCPCP\n\n    HowHard2See public canUSeesIt = HowHard2See.BlindAF;\n\n    mapping(address => bool) public nightVision;\n\n    //ᚢᚢᚢᛉᚺᚠᛚᚺᚨᚾᛁᚺᚠᚺᚢᚲᛉᛊᚺᚠᛈᛊᛊᛞᚺᚠᚢᛏᛚᛃᚺᚠᚢᚨᚺᚠᛚᛚᚨᛟᚺᚠᚢᚢᚢᛉᚺᚠᚢᚢᛚᛉᚠᚺᚠᚢᛒ\n    //ᛊᛉᚺᚠᛈᛊᛊᛞᚺᚠᛚᛁᚺᚠᛚᚨᛉᚺᚠᛚᛚᛗᛁᚺᚠᛚᚺᚱᛁᛁᚺᚠᛚᚨᛟᚺᚠᚢᚲᛚᛃᚺᚠᛈᚢᚲᛗᚺᚠᛚᚨᛟᚺᚠᛚᛚᚨ\n    //ᛁᚺᚠᚢᛊᛊᚢᛞᛗᚺᚠᛚᚨᛟᚺᚠᚺᚲᛚᛊᛊᛚᛁᚨᛁᚺᚠᚢᚨᚺᚠᛒᚢᛊᚢᛃᚱᚠᚺᚠᛚᚨᛚᛁᚢᛈᚨᚠᚠᚺᚠᛈᚢᚾᛁᛚᚲ\n    //ᛈᛚᚢᚨᛉᚠᚺᚠᛈᛊᛊᛞᚺᚠᛚᛁᚺᚠᚢᛒᚢᚲᛗᚺᚠᚺᛁᛗᚺᚠᚺᚢᚲᚠᚺᚠᛈᚲᛚᛞᚺᚠᛚᚨᛟᚺᚠᚢᛞᛚᛁᛉᚹᚺᚠᛚᚠ\n    //ᚨᛟᚺᚠᛚᛉᚨᚢᛞᛁᚺᚠᛈᛊᛊᛞᚺᚠᛚᛁᚺᚠᛈᚢᛉᛈᚲᛚᚠᚺᚠᛚᚾᚾᛉᚠᚺᚠᛈᛊᛊᛞᚺᚠᚺᚨᛃᛟᛟᚺᚠᚢᚢᛚᚠᚺᚠ\n    //ᚺᚠᚲᚺᚠᛚᛁᛈᛚᛉᛏᚠᛉᚨᚺᚠᛚᚲᛚᚺᛊᛚᚲᛁᚺᚠᚢᛞᛟᚺᚠᚺᚢᚠᚦᚠᛈᛊᛊᛞᚺᚠᚢᛒᚠᚺᚠᛒᛉᚨᛚᛁᚦ\n    //ᚠᚢᛞᛟᚺᚠᚺᚢᚠᚦᚠᛈᛊᛊᛞᚺᚠᚢᛒᚠᚺᚠᛈᛚᛊᚲᚠᚺᚠᛒᛈᛊᚲᛁᚺᚠᚢᛒᛁᚠᚺᚠᚺᛃᚨᛈᚢᚢᛉᛗᚺᚠᛒᛈᛊᚲᛁᚺᚠᚢᛒ\n    //ᛁᚠᚺᚠᛚᚺᛏᛉᚨᚺᚠᛚᛗᛚᚢᚲᚲᚺᚠᚢᛒᛁᛉᛚᛊᚲᛚᛉᚠᚺᚠᚺᚾᚺᛈᚢᛉᚨᚠᚺᚠᛈᚢᚾᛉᚨᛟᚺᚠᛒᚢᛉᛚᛚᚢᚠᚺ\n    //ᚠᛈᚢᚲᛗᚺᚠᚢᛒᛁᚠᚺᚠᚺᛃᛚᛉᚹᛊᚺᚠᛈᚢᚠᚺᚠᛚᚨᛟᚺᚠᚺᛃᛚᛉᛉᚹᚺᚠᚺᚱᛚᚦᚠᚢᛒᛁᚠᚺᚠᚢᛈᛃᛚᛉᛃᛟ\n    //ᚺᚠᚺᚢᚲᚠᚺᚠᚢᛞᚱᚢᚺᚠᚢᛒᛁᚠᚺᚠᚢᛈᛃᛚᛉᚲᚺᚠᚠᚹᛚᛁᛉᚨᛁᛒᛃᚨᛒᛁᛚᛉᛟᚺᚠᚢᛊᚲᚨᚺᚠᚢᚢᚢᛉᚺᚠ\n    //ᚢᚨᚺᚠᚢᛏᛚᛃᚺᚠᚢᛁᚨᛟᛗᚺᚠᛒᛈᛊᚲᛁᚺᚠᛚᚨᛟᚺᚠᚺᚨᛗᚢᛁᛏᚹᛊᚺᚠᚺᚢᚲᚠᚺᚠᚢᚢᛉᚨᛁᚺᚠᛚᚨᛟᚺᚠ\n    //ᛈᚾᚢᚺᛊᛉᚺᚠᛚᚨᛟᚺᚠᛒᚲᛚᛁᚢᛁᚢᛚᛃᛁᚺᚠᚺᚠᛞᚺᚠᛈᛊᛊᛞᚺᚠᛚᛃᚢᛏᛚᛁᚺᚠᚢᛒᛁᚠᚺᚠᛈᚾᛈᛊᛉᚺᚠ\n\n    /*************************************************************************/\n    /*** PAYMENT VARIABLES (Start) *******************************************/\n    address[] public based;\n    mapping(address => uint256) private howBased;\n    uint256 totalReceived = 0;\n    mapping(address => uint256) amountsWithdrawn;\n\n    // Liyat yew gnilaaw gnilaww ay oo\n\n    modifier onlyBased() {\n        _isBased();\n        _;\n    }\n    function _isBased() internal view virtual {\n        require(howBased[msg.sender] > 0, \"not a royalty payee\");\n    }\n    // decaf gib\n    /*** PAYMENT VARIABLES (End) *******************************************/\n    /***********************************************************************/\n    \n    \n    mapping(uint256 => uint256) public hazUFoundIt;\n    CrudeBorneEggs public eggzzz;\n\n\n    /***********************************************************************************/\n    /*** CONTRACT METADATA VARIABLES (Start) *******************************************/\n    string collectionDescription;\n    string collecImg;\n    /*** CONTRACT METADATA VARIABLES (Start) *******************************************/\n    /***********************************************************************************/\n\n    /******************************************************************************************/\n    /*** METADATA AND CONSUMPTION VARIABLES (Start) *******************************************/\n    ElixirMetadataProto public metadataStorage;\n\n    IERC721Receiver public redistributionReceiver;\n\n    mapping(address => bool) public authorizedConsumers;\n\n    mapping(address => mapping(address => bool)) perUserAuths;\n    /*** METADATA AND CONSUMPTION VARIABLES (End) *******************************************/\n    /****************************************************************************************/\n\n\n    /*******************************************************************/\n    /*** CONSTRUCTOR (Start) *******************************************/\n    constructor(\n        address _cbeAddy,\n        string memory _collectionDescription,\n        string memory _collectionImage,\n        address[] memory _based,\n        uint128[] memory _basisPoints\n    ) {\n        // FACED\n        collectionDescription = _collectionDescription;\n        collecImg = _collectionImage;\n\n        for (uint256 i = 0; i < _based.length; i++) {\n            howBased[_based[i]] = _basisPoints[i];\n        }\n\n        based = _based;\n\n        eggzzz = CrudeBorneEggs(_cbeAddy);\n    }\n    /*** CONSTRUCTOR (End) *******************************************/\n    /*****************************************************************/\n\n    //222221268612811425868211126198616191948622201210862218612121158622222\n    //126862221122668622219268616191948612986121268612121325861281892586121\n    //158622111210861621111386121158612121258622191922413861211586831219191\n    //225125862218622119221018686121122521161668616211425121116122112668616\n    //191948612986222211113868251386821116861611124861211586224122526238612\n    //611586122612249861619194861298616212616111268612141426686161919486811\n    //015158622211268686118612251612262062618612312819121125862241586821620\n    //861619194862226862261122520862241586821620861619194862226861612191168\n    //621619119862222568681011622212613862161911986222256861282026186121312\n    //211111862222526121931226686814816212616861621142611586221261212216861\n    //621111386222256868101226231986162168612115868101226262386818122086222\n    //256862216101226101586821116862241821862222568622161012263866231225261\n    //252101225122615862219111862222212686221862220121086222511513862161911\n    //986121158681132225202319868211168622222619861211586161421819268612115\n    //862111292225211210258686486161919486121022201298622225686161416192686\n\n    function izItDerOrIzItGone() external onlyOwner {\n        izItDer = !izItDer;\n    }\n\n    // faced gib\n\n    function enableNightVision(address whomst) public onlyOwner {\n        nightVision[whomst] = true;\n    }\n\n    function howHardIzIt2See(HowHard2See _howHard) public onlyOwner {\n        require(_howHard != HowHard2See.BlindAF);\n        canUSeesIt = _howHard;\n    }\n\n    // 418\n\n    /*******************************************************************************/\n    /*** CONTRACT METADATA LOGIC (Start) *******************************************/\n    function contractURI() public view returns (string memory) {\n        return _contractURI(collectionDescription, collecImg, uint256(uint160(address(this))).toHexString());\n    }\n    /*** CONTRACT METADATA LOGIC (End) *******************************************/\n    /*****************************************************************************/\n\n    /****************************************************************************/\n    /*** TOKEN METADATA LOGIC (Start) *******************************************/\n    function getCharges(uint256 elixirId) public view returns (uint256) {\n        return metadataStorage.getCharges(elixirId);\n    }\n\n    function getElement(uint256 elixirId) public view returns (uint256) {\n        return metadataStorage.getElement(elixirId);\n    }\n\n    function getAttributes(uint256 elixirId) public view returns (uint256[] memory) {\n        return metadataStorage.getAttributes(elixirId);\n    }\n\n    // decaf gib\n\n    function getElementAndAttributes(\n        uint256 elixirId\n    ) public view returns (uint256, uint256[] memory) {\n        return metadataStorage.getElementAndAttributes(elixirId);\n    }\n\n    // 0x526163697374204D6F6E6B6579\n\n    function getChargesElementAndAttributes(\n        uint256 elixirId\n    ) public view returns (uint256, uint256, uint256[] memory) {\n        return metadataStorage.getChargesElementAndAttributes(elixirId);\n    }\n\n    // 418\n\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        require(exists(tokenId), \"z\");\n        return metadataStorage.getElixirMetadata(tokenId);\n    }\n    /*** TOKEN METADATA LOGIC (End) *******************************************/\n    /**************************************************************************/\n\n\n    function eliksirHazBeenGot(uint256 disEgg) public view returns (bool) {\n        uint256 eggBlocc = disEgg/250;\n        uint256 eggSlot = disEgg - eggBlocc*250;\n        return ((hazUFoundIt[eggBlocc] >> eggSlot)%2 == 1);\n    }\n\n    // faced gib\n\n    function piktItUpp(uint256[] memory eggz) public {\n        require(izItDer, 'is');\n        require(canUSeesIt == HowHard2See.Hard2See || (nightVision[msg.sender] && (canUSeesIt == HowHard2See.BlindAF)), 'so');\n\n        uint256 curBlocc = 0;\n        uint256 bloccUpdates = 0;\n        uint256 eggBlocc;\n\n        bool bottleRequire = true;\n        bool ownerRequire = true;\n\n        for (uint256 i = 0; i < eggz.length; i++) {\n            eggBlocc = eggz[i]/250;\n            if (eggBlocc != curBlocc) {\n                hazUFoundIt[curBlocc] = hazUFoundIt[curBlocc] | bloccUpdates;\n                curBlocc = eggBlocc;\n                bloccUpdates = 0;\n            }\n\n            uint256 eggSlot = eggz[i] - curBlocc*250;\n            bottleRequire = bottleRequire && (hazUFoundIt[curBlocc] >> eggSlot)%2 == 0;\n            ownerRequire = ownerRequire && eggzzz.ownerOf(eggz[i]) == msg.sender;\n\n            bloccUpdates += (1 << eggSlot);\n        }\n        require(bottleRequire && ownerRequire, 'b;o');\n\n        hazUFoundIt[curBlocc] = hazUFoundIt[curBlocc] | bloccUpdates;\n\n        safeMint(msg.sender, eggz.length);\n    }\n\n    //╮╮╮╵ᚽᛙ⸌ᚽ⸝⸜ᛁᚽᛙᚽ╮ᛍ╵╵ᚽᛙި╵╵⸍ᚽᛙ╮⸍⸌ᛁᚽᛙ╮⸝ᚽᛙ⸌⸌⸝ˎᚽᛙ╮╮╮╵ᚽᛙ╮╮⸌╵ᛙᚽᛙ╮ި╵╵ᚽᛙި╵╵⸍ᚽᛙ⸌ᛁᚽᛙ⸌⸝╵ᚽᛙ⸌⸌⠃ᛁ\n    //ᚽᛙ⸌ᚽ◟ᛁᛁᚽᛙ⸌⸝ˎᚽᛙ╮ᛍ⸌ᛁᚽᛙި╮ᛍ⠃ᚽᛙ⸌⸝ˎᚽᛙ⸌⸌⸝ᛁᚽᛙ╮╵╵╮⸍⠃ᚽᛙ⸌⸝ˎᚽᛙᚽᛍ⸌╵╵⸌ᛁ⸝ᛁᚽᛙ╮⸝ᚽᛙި╮╵╮ᛁ◟ᛙᚽᛙ⸌⸝⸌ᛁ╮ި⸝ᛙᛙᚽᛙ\n    //ި╮⸜ᛁ⸌ᛍި⸌╮⸝╵ᛙᚽᛙި╵╵⸍ᚽᛙ⸌ᛁᚽᛙ╮ި╮ᛍ⠃ᚽᛙᚽᛁ⠃ᚽᛙᚽ╮ᛍᛙᚽᛙިᛍ⸌⸍ᚽᛙ⸌⸝ˎᚽᛙ╮⸍⸌ᛁ╵╮ᚽᛙ⸌ᛙ⸝ˎᚽᛙ⸌╵⸝╮⸍ᛁᚽᛙި╵╵⸍ᚽᛙ⸌ᛁᚽᛙި╮╵\n    //ިᛍ⸌ᛙᚽᛙ⸌⸜⸜╵ᛙᚽᛙި╵╵⸍ᚽᛙᚽ⸝ᛁˎˎᚽᛙ╮╮⸌ᛙᚽᛙᚽᛙᛍᚽᛙ⸌ᛁި⸌╵⸍ᛙ╵⸝ᚽᛙ⸌ᛍ⸌ᚽ╵⸌ᛍᛁᚽᛙ╮⸍ˎᚽᛙᚽ╮ᛙוᛙި╵╵⸍ᚽᛙ╮ިᛙᚽᛙި╵⸝⸌ᛁוᛙ╮\n    //⸍ˎᚽᛙᚽ╮ᛙוᛙި╵╵⸍ᚽᛙ╮ިᛙᚽᛙި⸌╵ᛍᛙᚽᛙިި╵ᛍᛁᚽᛙ╮ިᛁᛙᚽᛙᚽᛁ⸝ި╮╮╵⠃ᚽᛙިި╵ᛍᛁᚽᛙ╮ިᛁᛙᚽᛙ⸌ᚽ⸍╵⸝ᚽᛙ⸌⠃⸌╮ᛍᛍᚽᛙ╮ިᛁ╵⸌╵ᛍ⸌╵ᛙ\n    //ᚽᛙᚽ⸜ᚽި╮╵⸝ᛙᚽᛙި╮⸜╵⸝ˎᚽᛙި╮╵⸌⸌╮ᛙᚽᛙި╮ᛍ⠃ᚽᛙ╮ިᛁᛙᚽᛙᚽᛁ⸌╵╮╵ᚽᛙި╮ᛙᚽᛙ⸌⸝ˎᚽᛙᚽᛁ⸌╵╵╮ᚽᛙᚽ◟⸌וᛙ╮ިᛁᛙᚽᛙ╮ިᛁ⸌╵ᛁˎ\n    //ᚽᛙᚽ╮ᛍᛙᚽᛙ╮⸍◟╮ᚽᛙ╮ިᛁᛙᚽᛙ╮ިᛁ⸌╵ᛍᚽᛙᛙ╮⸌ᛁ╵⸝ᛁިᛁ⸝ިᛁ⸌╵ˎᚽᛙ╮╵ᛍ⸝ᚽᛙ╮╮╮╵ᚽᛙ╮⸝ᚽᛙ╮⸍⸌ᛁᚽᛙ╮ᛁ⸝ˎ⠃ᚽᛙިި╵ᛍᛁᚽᛙ⸌⸝ˎᚽ\n    //ᛙᚽ⸝⠃╮ᛁ⸍╮╵ᚽᛙᚽ╮ᛍᛙᚽᛙ╮╮╵⸝ᛁᚽᛙ⸌⸝/ˎᚽᛙި⸜╮ᚽ╵╵ᚽᛙ⸌⸝ˎᚽᛙިᛍ⸌ᛁ╮ᛁ╮⸌ᛁᛁᚽᛙᚽᛙ⸍ᚽᛙި╵╵⸍ᚽᛙ⸌ᛁ╮⸍⸌ᛁᚽᛙ╮ިᛁᛙᚽᛙި⸜ި╵╵ᚽᛙ\n\n    /**************************************************************************************/\n    /*** METADATA AND CONSUMPTION SETUP (Start) *******************************************/\n    function registerMetadataStorage(address _msAddy) public onlyOwner {\n        metadataStorage = ElixirMetadataProto(_msAddy);\n    }\n    // 0x552B353136442074696D656C696E6573\n\n    function registerRedistributionReceiver(address _rrAddy) public onlyOwner {\n        redistributionReceiver = IERC721Receiver(_rrAddy); // 0x552B3846324120552B35454642\n    }\n\n    // Liyat yew gnilaaw gnilaww ay oo\n\n    function setConsumerAuthorization(address _cAddy, bool _authorized) public onlyOwner {\n        authorizedConsumers[_cAddy] = _authorized;\n    }\n    /*** METADATA AND CONSUMPTION SETUP (End) *******************************************/\n    /************************************************************************************/\n\n\n    /**************************************************************************************/\n    /*** METADATA AND CONSUMPTION LOGIC (Start) *******************************************/\n    // 0x3736353433323139\n    function brewIt(uint256 wotEliksir, uint256[] memory stuffs, uint256[] memory wichStuffz) public {\n        require(stuffs.length == wichStuffz.length, \"l\");\n        require(ownerOf(wotEliksir) == msg.sender, \"o\");\n\n        for (uint256 i = 0; i < wichStuffz.length; i++) {\n            ERC721Basic ingredientContract = ERC721Basic(metadataStorage.getIngredientContract(stuffs[i]));\n            ingredientContract.safeTransferFrom(ingredientContract.ownerOf(wichStuffz[i]), address(redistributionReceiver), wichStuffz[i]);\n        }\n\n        metadataStorage.charge(wotEliksir, stuffs, wichStuffz);\n    }\n\n    function authorizeToDrink(address operator, bool _authorized) public {\n        perUserAuths[msg.sender][operator] = _authorized;\n    }\n\n    function isAuthorizedToDrink(address owner, address operator) public view returns (bool) {\n        return perUserAuths[owner][operator];\n    }\n\n    // 418\n\n    function slurpIt(\n        uint256 datEliksir,\n        uint256 targetId,\n        address msgSender\n    ) public {\n        // DECAF\n        require(\n            msgSender == ownerOf(datEliksir) &&\n            authorizedConsumers[msg.sender] &&\n            isAuthorizedToDrink(msgSender, msg.sender), \"o;a\");\n\n        (uint256 element, uint256[] memory attributes) = metadataStorage.getElementAndAttributes(datEliksir);\n\n        metadataStorage.drink(datEliksir);\n\n        ElixirConsumerProto(msg.sender).applyElixir(targetId, element, attributes);\n    }\n    // 0x7768617420646F6573207468652064657620736C7572703F */\n\n    function ohNoes(uint256 waaaMyEliksir) public {\n        require(ownerOf(waaaMyEliksir) == msg.sender, \"o\");\n\n        metadataStorage.spill(waaaMyEliksir);\n    }\n\n    // Liyat yew gnilaaw gnilaww ay oo\n\n\n    /*********************************************************************/\n    /*** PAYMENT LOGIC (Start) *******************************************/\n    receive() external payable {\n        totalReceived += msg.value;\n    }\n\n    function withdraw() public onlyBased {\n        uint256 totalForPayee = (totalReceived/10000)*howBased[msg.sender];\n        uint256 toWithdraw = totalForPayee - amountsWithdrawn[msg.sender];\n        amountsWithdrawn[msg.sender] = totalForPayee;\n        (bool success, ) = payable(msg.sender).call{value: toWithdraw}(\"\");\n        require(success, \"Payment failed!\");\n    }\n\n    function withdrawTokens(address tokenAddress) external onlyOwner() {\n        for (uint256 i = 0; i < based.length; i++) {\n            IERC20(tokenAddress).transfer(\n                based[i],\n                (IERC20(tokenAddress).balanceOf(address(this))/10000)*howBased[based[i]]\n            );\n        }\n    }\n\n    // decaf gib\n\n    function emergencyWithdrawTokens(address tokenAddress) external onlyOwner() {\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\n    }\n    /*** PAYMENT LOGIC (End) *******************************************/\n    /*******************************************************************/\n\n\n    function restrictOperator(address operator) public onlyOwner {\n        _restrictOperator(operator);\n    }\n\n    function releaseOperator(address operator) public onlyOwner {\n        _releaseOperator(operator);\n    }\n\n    // 418\n\n    function preventNewRestrictions() public onlyOwner {\n        _preventNewRestrictions();\n    }\n}\n\n////////////////////\n\nabstract contract CrudeBorneEggs {\n    function balanceOf(address owner) public view virtual returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256);\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n}\n\n// faced gib\n\nabstract contract ElixirMetadataProto {\n    function getIngredientContract(uint256 ingredientType) public view virtual returns (address);\n\n    // 0x43616E20796F75207368616B6520697420627265616B206974204A656C6C7920626162793F2043616E20796F7520736F6C7665206974206B6E6F7720697420647269766520796F75206372617A793F\n\n    function getCharges(uint256 elixirId) public view virtual returns (uint256);\n    function getElement(uint256 elixirId) public view virtual returns (uint256);\n    function getAttributes(uint256 elixirId) public view virtual returns (uint256[] memory);\n\n    function getElementAndAttributes(\n        uint256 elixirId\n    ) public view virtual returns (uint256, uint256[] memory);\n\n    function getChargesElementAndAttributes(\n        uint256 elixirId\n    ) public view virtual returns (uint256, uint256, uint256[] memory);\n\n    // Liyat yew gnilaaw gnilaww ay oo\n\n    function getElixirMetadata(uint256 elixirId) public view virtual returns (string memory);\n\n    function getIngredientsList() public view virtual returns (string[] memory);\n\n    function charge(\n        uint256 elixirId,\n        uint256[] memory ingredientTypes,\n        uint256[] memory ingredientIDs\n    ) public virtual;\n\n    function drink(uint256 elixirId) public virtual;\n\n    function spill(uint256 elixirId) public virtual;\n}\n\n// zzzzzzzzzzZZZZZZZZZZ //\n\nabstract contract ElixirConsumerProto {\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n    function applyElixir(\n        uint256 targetId,\n        uint256 elixirElement,\n        uint256[] memory elixirAttributes\n    ) public virtual;\n}\n\nabstract contract ERC721Basic {\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual;\n}\n\n////////////////////////////////////////\n\n\n\n/**\n                       (\n                        )       (         )\n                 ____...(.-------)--.....(___\n             .-\"\"        )      (        )   \"\"-.\n       .-'``'|-._             )         (    _.-|\n      /  .--.|   `\"\"-----............-----\"\"`   |\n     /  /    |                                  |\n     |  |    |                                  |\n      \\  \\   |                                  |\n       `\\ `\\ |                                  |\n         `\\ `|                                  |\n         _/ /\\                                  /\n        (__/  \\                                /\n     _..---\"\"` \\                              /`\"\"---.._\n  .-'           \\                            /          '-.\n :               `-.__                  __.-'              :\n :                  ) \"\"-----.....-----\"\" (                 :\n  '._               `\"--....._____.....--\"`              _.'\n    \\\"\"--..__                                    __..--\"\"/\n     '._     \"\"\"----.....__________.......----\"\"\"     _.'\n        `\"\"--..,,_____                 ______,,..--\"\"`\n                      `\"\"\"\"\"------\"\"\"\"\"`\n**/\n\n\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/ERC721.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// Creator: CrudeBorne\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n//contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\ncontract ERC721 is Context, ERC165 {//, IERC721, IERC721Metadata, IERC721Enumerable {\n    using Address for address;\n    using Strings for uint256;\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    uint256 private currentIndex = 0;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n//    // Base URI\n//    string private _baseURI;\n//    string private _preRevealURI;\n\n    mapping(uint256 => address) private _ownerships;\n    mapping(address => uint256) private _balances;\n\n    address public immutable burnAddress = 0x000000000000000000000000000000000000dEaD;\n    uint256 private numTokensBurned;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n    **/\n//    function totalSupply() public view override returns (uint256) {\n    function totalSupply() public view returns (uint256) {\n        return (currentIndex - numTokensBurned);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n//    function tokenByIndex(uint256 index) public view override returns (uint256) {\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < totalSupply(), \"g\");\n        require(ownerOf(index) != burnAddress, \"b\");\n        return index;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n     */\n//    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < balanceOf(owner), \"b\");\n        uint256 numMintedSoFar = totalSupply();\n        uint256 tokenIdsIdx = 0;\n        address currOwnershipAddr = address(0);\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\n            address ownership = _ownerships[i];\n            if (ownership != address(0)) {\n                currOwnershipAddr = ownership;\n            }\n            if (currOwnershipAddr == owner) {\n                if (tokenIdsIdx == index) {\n                    return i;\n                }\n                tokenIdsIdx++;\n            }\n        }\n        revert(\"u\");\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n//    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return\n        interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        interfaceId == type(IERC721Enumerable).interfaceId ||\n        super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n//    function balanceOf(address owner) public view override returns (uint256) {\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"0\");\n        return uint256(_balances[owner]);\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n//    function ownerOf(uint256 tokenId) public view override returns (address) {\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        //        return ownershipOf(tokenId);\n\n        require(tokenId < currentIndex, \"t\");\n\n        for (uint256 curr = tokenId; curr >= 0; curr--) {\n            address ownership = _ownerships[curr];\n            if (ownership != address(0)) {\n                return ownership;\n            }\n        }\n\n        revert(\"o\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n//    function name() public view virtual override returns (string memory) {\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n//    function symbol() public view virtual override returns (string memory) {\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n    * @dev See {IERC721-approve}.\n     */\n//    function approve(address to, uint256 tokenId) public override {\n    function approve(address to, uint256 tokenId) public {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"o\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"a\"\n        );\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n//    function getApproved(uint256 tokenId) public view override returns (address) {\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"a\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n//    function setApprovalForAll(address operator, bool approved) public override {\n    function setApprovalForAll(address operator, bool approved) public {\n//        require(operator != _msgSender() && !(operatorRestrict[operator]), \"a;r\");\n        require(operator != _msgSender(), \"a\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n//    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n//    ) public override {\n    ) public {\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n//    ) public override {\n    ) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n//    ) public override {\n    ) public {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"z\"\n        );\n    }\n\n    function burnToken(uint256 tokenId) public {\n        _transfer(ownerOf(tokenId), burnAddress, tokenId);\n        numTokensBurned++;\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return (tokenId < currentIndex && ownerOf(tokenId) != burnAddress);\n    }\n\n    function _safeMint(address to, uint256 quantity) internal {\n        _safeMint(to, quantity, \"\");\n    }\n\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal {\n        _mint(to, quantity);\n        require(_checkOnERC721Received(address(0), to, currentIndex - 1, _data), \"z\");\n    }\n\n    function _mint(address to, uint256 quantity) internal {\n        uint256 startTokenId = currentIndex;\n        require(to != address(0), \"0\");\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n        require(!_exists(startTokenId), \"a\");\n\n        _balances[to] = _balances[to] + quantity;\n        _ownerships[startTokenId] = to;\n\n        uint256 updatedIndex = startTokenId;\n\n        for (uint256 i = 0; i < quantity; i++) {\n            emit Transfer(address(0), to, updatedIndex);\n            updatedIndex++;\n        }\n\n        currentIndex = updatedIndex;\n    }\n\n    /******************/\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) private {\n        address prevOwnership = ownerOf(tokenId);\n\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership ||\n        getApproved(tokenId) == _msgSender() ||\n        isApprovedForAll(prevOwnership, _msgSender()));\n\n        require(isApprovedOrOwner && prevOwnership == from, \"a\");\n        require(prevOwnership == from, \"o\");\n        require(to != address(0), \"0\");\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _ownerships[tokenId] = to;\n\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n        uint256 nextTokenId = tokenId + 1;\n        if (_ownerships[nextTokenId] == address(0)) {\n            if (_exists(nextTokenId)) {\n                _ownerships[nextTokenId] = prevOwnership;\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /******************/\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"z\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    "contracts/ERC721TopLevel.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// Creator: 0xVeryBased\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./ERC721Storage.sol\";\n\ncontract ERC721TopLevel is ERC165, Ownable {\n    using Address for address;\n    using Strings for uint256;\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n    **/\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n    **/\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n    **/\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Storage layer contract that separates out internal minting logic from top level functions\n     *   - Designed to reduce top level contract size and enable implementation of additional functionality\n    **/\n    ERC721Storage public storageLayer;\n    bool public storageLayerSet = false;\n    modifier onlyStorage() {\n        _isStorage();\n        _;\n    }\n    function _isStorage() internal view virtual {\n        require(msg.sender == address(storageLayer), \"not storage\");\n    }\n    /******************/\n\n    /**\n     * @dev Mapping from addresses to whether or not an address is restricted as an operator for all\n    **/\n    mapping(address => bool) public operatorRestrictions;\n    bool public canRestrict = true; // Determines whether or not the contract owner can still restrict any new addresses\n\n    /**\n     * @dev Sets the storage layer for this top-level contract and prevents it from being reset\n    **/\n    function setStorageLayer(address storageLayerAddress_) public onlyOwner {\n        require(!storageLayerSet, \"sls\");\n        storageLayer = ERC721Storage(storageLayerAddress_);\n        storageLayerSet = true;\n    }\n\n    /**\n     * @dev get the address of the storage layer contract\n    **/\n    function _storageLayerAddress() public view returns (address) {\n        return address(storageLayer);\n    }\n\n    /**\n     * @dev Restrict an address from being an operator for all\n    **/\n    function _restrictOperator(address operator) internal {\n        require(canRestrict, \"nnr\");\n\n        operatorRestrictions[operator] = true;\n    }\n\n    /**\n     * @dev Release an address from restriction, permitting it to be an operator for all\n    **/\n    function _releaseOperator(address operator) internal {\n        operatorRestrictions[operator] = false;\n    }\n\n    /**\n     * @dev Prevent the contract owner from restricting any additional operators\n    **/\n    function _preventNewRestrictions() internal {\n        canRestrict = false;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n    **/\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return (interfaceId == type(IERC721).interfaceId ||\n        interfaceId == type(IERC721Metadata).interfaceId ||\n        interfaceId == type(IERC721Enumerable).interfaceId ||\n        super.supportsInterface(interfaceId));\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return storageLayer.storage_totalSupply();\n    }\n\n    function tokenByIndex(uint256 index) public view returns (uint256) {\n        return storageLayer.storage_tokenByIndex(index);\n    }\n\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        return storageLayer.storage_tokenOfOwnerByIndex(owner, index);\n    }\n\n    function tokenOfOwnerByIndexStepped(\n        address owner,\n        uint256 index,\n        uint256 lastToken,\n        uint256 lastIndex\n    ) public view returns (uint256) {\n        return storageLayer.storage_tokenOfOwnerByIndexStepped(\n            owner, index, lastToken, lastIndex\n        );\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return storageLayer.storage_balanceOf(owner);\n    }\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        return storageLayer.storage_ownerOf(tokenId);\n    }\n\n    function name() public view virtual returns (string memory) {\n        return storageLayer.storage_name();\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return storageLayer.storage_symbol();\n    }\n\n    function approve(address to, uint256 tokenId) public {\n        storageLayer.storage_approve(to, tokenId, msg.sender);\n    }\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n        return storageLayer.storage_getApproved(tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public {\n        require(!(operatorRestrictions[operator]), \"r\");\n\n        storageLayer.storage_setApprovalForAll(operator, approved, msg.sender);\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return storageLayer.storage_isApprovedForAll(owner, operator);\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        storageLayer.storage_transferFrom(from, to, tokenId, msg.sender);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        storageLayer.storage_safeTransferFrom(from, to, tokenId, msg.sender);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        storageLayer.storage_safeTransferFrom(from, to, tokenId, _data, msg.sender);\n    }\n\n    function burnToken(uint256 tokenId) public {\n        storageLayer.storage_burnToken(tokenId, msg.sender);\n    }\n\n    function exists(uint256 tokenId) public view returns (bool) {\n        return storageLayer.storage_exists(tokenId);\n    }\n\n    function safeMint(address to, uint256 quantity) internal {\n        storageLayer.storage_safeMint(to, quantity, msg.sender);\n    }\n\n    function safeMint(address to, uint256 quantity, bytes memory _data) internal {\n        storageLayer.storage_safeMint(to, quantity, _data, msg.sender);\n    }\n\n    function mint(address to, uint256 quantity) internal {\n        storageLayer.storage_mint(to, quantity);\n    }\n\n    function _contractURI(\n        string memory _description,\n        string memory _img,\n        string memory _self\n    ) internal view returns (string memory) {\n        return storageLayer.storage_contractURI(_description, _img, _self);\n    }\n\n    //////////\n\n    function emitTransfer(address from, address to, uint256 tokenId) public onlyStorage {\n        emit Transfer(from, to, tokenId);\n    }\n\n    function emitApproval(address owner, address approved, uint256 tokenId) public onlyStorage {\n        emit Approval(owner, approved, tokenId);\n    }\n\n    function emitApprovalForAll(address owner, address operator, bool approved) public onlyStorage {\n        emit ApprovalForAll(owner, operator, approved);\n    }\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/ERC721Storage.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// Creator: 0xVeryBased\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\ncontract ERC721Storage is Ownable {\n    using Address for address;\n    using Strings for uint256;\n\n    // Tracker for calculating number minted/total supply and assigning token indices\n    uint256 private currentIndex = 0;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Token owners and token balances\n    mapping(uint256 => address) private _ownerships;\n    mapping(address => uint256) private _balances;\n\n    // Burn address and counter\n    address public immutable burnAddress = 0x000000000000000000000000000000000000dEaD;\n    uint256 private numTokensBurned;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Mapping from operators to whether or not they are restricted\n    mapping(address => bool) private _operatorRestrictions;\n    // Bool indicating whether one can still restrict an operator or not\n    bool private _canRestrict;\n\n    ERC721TopLevelProto public topLevelContract;\n\n    constructor(\n        string memory name_,\n        string memory symbol_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n//        topLevelContract = ERC721TopLevelProto(msg.sender);\n    }\n\n    function setTopLevelContract(address _topLevelContract) public onlyOwner {\n        topLevelContract = ERC721TopLevelProto(_topLevelContract);\n        transferOwnership(_topLevelContract);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n    **/\n    function storage_totalSupply() public view returns (uint256) {\n        return (currentIndex - numTokensBurned);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n    **/\n    function storage_tokenByIndex(uint256 index) public view returns (uint256) {\n        require(index < storage_totalSupply(), \"g\");\n        require(storage_ownerOf(index) != burnAddress, \"b\");\n        return index;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n    **/\n    function storage_tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n        require(index < storage_balanceOf(owner), \"b\");\n        uint256 numMintedSoFar = storage_totalSupply();\n        uint256 tokenIdsIdx = 0;\n        address currOwnershipAddr = address(0);\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\n            address ownership = _ownerships[i];\n            if (ownership != address(0)) {\n                currOwnershipAddr = ownership;\n            }\n            if (currOwnershipAddr == owner) {\n                if (tokenIdsIdx == index) {\n                    return i;\n                }\n                tokenIdsIdx++;\n            }\n        }\n        revert(\"u\");\n    }\n\n    function storage_tokenOfOwnerByIndexStepped(address owner, uint256 index, uint256 lastToken, uint256 lastIndex) public view returns (uint256) {\n        require(index < storage_balanceOf(owner), \"b\");\n        uint256 numTokenIds = currentIndex;\n        uint256 tokenIdsIdx = ((lastIndex == 0) ? 0 : (lastIndex + 1));\n        address currOwnershipAddr = address(0);\n        for (uint256 i = ((lastToken == 0) ? 0 : (lastToken + 1)); i < numTokenIds; i++) {\n            address ownership = _ownerships[i];\n            if (ownership != address(0)) {\n                currOwnershipAddr = ownership;\n            }\n            if (currOwnershipAddr == owner) {\n                if (tokenIdsIdx == index) {\n                    return i;\n                }\n                tokenIdsIdx++;\n            }\n        }\n        revert(\"u\");\n    }\n\n//    /**\n//     * @dev See {IERC165-supportsInterface}.\n//    **/\n//    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n//        return (interfaceId == type(IERC721).interfaceId ||\n//        interfaceId == type(IERC721Metadata).interfaceId ||\n//        interfaceId == type(IERC721Enumerable).interfaceId ||\n//        super.supportsInterface(interfaceId));\n//    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n    **/\n    function storage_balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"0\");\n        return uint256(_balances[owner]);\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n    **/\n    function storage_ownerOf(uint256 tokenId) public view returns (address) {\n        require(tokenId < currentIndex, \"t\");\n\n        for (uint256 curr = tokenId; curr >= 0; curr--) {\n            address ownership = _ownerships[curr];\n            if (ownership != address(0)) {\n                return ownership;\n            }\n        }\n\n        revert(\"o\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n    **/\n    function storage_name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n    **/\n    function storage_symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n    **/\n    function storage_approve(address to, uint256 tokenId, address msgSender) public onlyOwner {\n        address owner = ERC721Storage.storage_ownerOf(tokenId);\n        require(to != owner, \"o\");\n\n        require(\n            msgSender == owner || storage_isApprovedForAll(owner, msgSender),\n            \"a\"\n        );\n\n        _approve(to, tokenId, owner);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n    **/\n    function storage_getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"a\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n    **/\n    function storage_setApprovalForAll(address operator, bool approved, address msgSender) public {\n        //        require(operator != msgSender && !(operatorRestrict[operator]), \"a;r\");\n        require(operator != msgSender, \"a\");\n\n        _operatorApprovals[msgSender][operator] = approved;\n        topLevelContract.emitApprovalForAll(msgSender, operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n    **/\n    function storage_isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n    **/\n    function storage_transferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        address msgSender\n    ) public onlyOwner {\n        _transfer(from, to, tokenId, msgSender);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n    **/\n    function storage_safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        address msgSender\n    ) public onlyOwner {\n        storage_safeTransferFrom(from, to, tokenId, \"\", msgSender);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n    **/\n    function storage_safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data,\n        address msgSender\n    ) public onlyOwner {\n        _transfer(from, to, tokenId, msgSender);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data, msgSender),\n            \"z\"\n        );\n    }\n\n    /**\n     * @dev Burns a token to the designated burn address\n    **/\n    function storage_burnToken(uint256 tokenId, address msgSender) public onlyOwner {\n        _transfer(storage_ownerOf(tokenId), burnAddress, tokenId, msgSender);\n        numTokensBurned++;\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n    **/\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return (tokenId < currentIndex && storage_ownerOf(tokenId) != burnAddress);\n    }\n\n    function storage_exists(uint256 tokenId) public view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    function storage_safeMint(address to, uint256 quantity, address msgSender) public onlyOwner {\n        storage_safeMint(to, quantity, \"\", msgSender);\n    }\n\n    function storage_safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data,\n        address msgSender\n    ) public onlyOwner {\n        storage_mint(to, quantity);\n        require(_checkOnERC721Received(address(0), to, currentIndex - 1, _data, msgSender), \"z\");\n    }\n\n    function storage_mint(address to, uint256 quantity) public onlyOwner {\n        uint256 startTokenId = currentIndex;\n        require(to != address(0), \"0\");\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n        require(!_exists(startTokenId), \"a\");\n\n        _balances[to] = _balances[to] + quantity;\n        _ownerships[startTokenId] = to;\n\n        uint256 updatedIndex = startTokenId;\n\n        for (uint256 i = 0; i < quantity; i++) {\n            topLevelContract.emitTransfer(address(0), to, updatedIndex);\n            updatedIndex++;\n        }\n\n        currentIndex = updatedIndex;\n    }\n\n    function storage_contractURI(string memory _description, string memory _img, string memory _self) public view returns (string memory) {\n        return string(\n            abi.encodePacked(\n                \"data:application/json;utf8,{\\\"name\\\":\\\"\", storage_name(),\"\\\",\",\n                \"\\\"description\\\":\\\"\", _description, \"\\\",\",\n                \"\\\"image\\\":\\\"\", _img, \"\\\",\",\n                \"\\\"external_link\\\":\\\"https://crudeborne.wtf\\\",\",\n                \"\\\"seller_fee_basis_points\\\":420,\\\"fee_recipient\\\":\\\"\",\n                _self, \"\\\"}\"\n            )\n        );\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        address msgSender\n    ) private {\n        address prevOwnership = storage_ownerOf(tokenId);\n\n        bool isApprovedOrOwner = (msgSender == prevOwnership ||\n        storage_getApproved(tokenId) == msgSender ||\n        storage_isApprovedForAll(prevOwnership, msgSender));\n\n        require(isApprovedOrOwner && prevOwnership == from, \"a\");\n        require(prevOwnership == from, \"o\");\n        require(to != address(0), \"0\");\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId, prevOwnership);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _ownerships[tokenId] = to;\n\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n        uint256 nextTokenId = tokenId + 1;\n        if (_ownerships[nextTokenId] == address(0)) {\n            if (_exists(nextTokenId)) {\n                _ownerships[nextTokenId] = prevOwnership;\n            }\n        }\n\n        topLevelContract.emitTransfer(from, to, tokenId);\n    }\n\n    function _approve(\n        address to,\n        uint256 tokenId,\n        address owner\n    ) private {\n        _tokenApprovals[tokenId] = to;\n        topLevelContract.emitApproval(owner, to, tokenId);\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data,\n        address msgSender\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(msgSender, from, tokenId, _data) returns (bytes4 retVal) {\n                return retVal == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"z\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n}\n\n////////////////////\n\nabstract contract ERC721TopLevelProto {\n    function emitTransfer(address from, address to, uint256 tokenId) public virtual;\n    function emitApproval(address owner, address approved, uint256 tokenId) public virtual;\n    function emitApprovalForAll(address owner, address operator, bool approved) public virtual;\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}