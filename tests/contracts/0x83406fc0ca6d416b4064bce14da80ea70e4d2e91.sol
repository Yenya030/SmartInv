{{
  "language": "Solidity",
  "sources": {
    "contracts/DWStaking.sol": {
      "content": "// SPDX-License-Identifier: The MIT License (MIT)\n\n\n\n\n\n\n//  __/\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\____________/\\\\\\\\_        \n//   _\\/\\\\\\////////\\\\\\___/\\\\\\///////\\\\\\___\\/\\\\\\///////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\\\\\\\________/\\\\\\\\\\\\_       \n//    _\\/\\\\\\______\\//\\\\\\_\\/\\\\\\_____\\/\\\\\\___\\/\\\\\\______________/\\\\\\/////////\\\\\\_\\/\\\\\\//\\\\\\____/\\\\\\//\\\\\\_      \n//     _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\/____\\/\\\\\\\\\\\\\\\\\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\///\\\\\\/\\\\\\/_\\/\\\\\\_     \n//      _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\//////\\\\\\____\\/\\\\\\///////______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\_    \n//       _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\____\\//\\\\\\___\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\///_____\\/\\\\\\_   \n//        _\\/\\\\\\_______/\\\\\\__\\/\\\\\\_____\\//\\\\\\__\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\_  \n//         _\\/\\\\\\\\\\\\\\\\\\\\\\\\/___\\/\\\\\\______\\//\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\_ \n//          _\\////////////_____\\///________\\///__\\///////////////__\\///________\\///__\\///______________\\///__\n//  _____/\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\________/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_             \n//   ___/\\\\\\/////////\\\\\\_\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\_____/\\\\\\//__\\/\\\\\\///////////__            \n//    __\\//\\\\\\______\\///________\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\__/\\\\\\//_____\\/\\\\\\_____________           \n//     ___\\////\\\\\\_______________\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\//\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\_____          \n//      ______\\////\\\\\\____________\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\//_\\//\\\\\\____\\/\\\\\\///////______         \n//       _________\\////\\\\\\_________\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\____\\//\\\\\\___\\/\\\\\\_____________        \n//        __/\\\\\\______\\//\\\\\\________\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__\\/\\\\\\_____________       \n//         _\\///\\\\\\\\\\\\\\\\\\\\\\/_________\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_      \n//          ___\\///////////___________\\///________\\///________\\///__\\///________\\///__\\///////////////__  \n\n\n\n\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface IToken {\n    function mint(address to, uint256 amount) external;\n}\n\n\n/**\n * @title DreamWorld Staking\n * \n * @notice The official Dream World NFT staking contract.\n * \n * @author M. Burke\n * \n * @custom:security-contact dev@ctrllaunch.com\n */\ncontract DWStaking is Ownable, ReentrancyGuard {\n    IToken immutable ZZZs;\n    IERC721 immutable DWnft;\n    uint256 immutable INITIAL_BLOCK;\n\n    mapping(address => StakeCommitment[]) public commitments;\n\n    event StakeNft(address indexed _staker, uint256 indexed _tokenId);\n    event UnstakeNft(\n        address indexed _staker,\n        uint256 indexed _tokenId,\n        uint256 _rewardTokens\n    );\n\n    /** \n     * @dev     blockStakedAdjusted will be updated as users withdraw rewards from staked nfts\n     * \n     * @param   blockStakedAdjusted is the calculated value => block.number - INITIAL_BLOCK\n     *           (which is set on deployment). This is allows the struct to use uint32\n     *           rather than uint256.\n     *\n     * @param   tokenId is the token id from the Dream World NFT contract associated with the\n     *           NFT to be staked.\n     */\n    struct StakeCommitment {\n        uint32 blockStakedAdjusted;\n        uint256 tokenId;\n    }\n\n    constructor(address _erc20Token, address _erc721Token) {\n        ZZZs = IToken(_erc20Token);\n        DWnft = IERC721(_erc721Token);\n        INITIAL_BLOCK = block.number;\n    }\n\n    //------------------------------------USER FUNCS-------------------------------------------\\\\\n    /** @dev     The use of safeTransferFrom ensures the caller either owns the NFT or has\n     *           been approved.\n     *\n     *  @param   _tokenId is the token id from the Dream World NFT contract associated with the\n     *           NFT to be staked.\n     */\n    function stakeNft(uint256 _tokenId) external {\n        DWnft.safeTransferFrom(msg.sender, address(this), _tokenId);\n    }\n\n    /** \n     * @notice  'stakeMultipleNfts' is to be used only for staking multiple NFTs.\n     *           While using it to stake one, is possible, unnecessary gas\n     *           costs will occure.\n     *\n     * @param   _tokenIds is an array of Dream World NFT ids to be staked.\n     */\n    function stakeMultipleNfts(uint256[] memory _tokenIds) external {\n        require(\n            DWnft.isApprovedForAll(msg.sender, address(this)) == true,\n            \"DWStaking: Staking contract is not approved for all.\"\n        );\n\n        uint256 len = _tokenIds.length;\n\n        for (uint256 i = 0; i < len; ) {\n            DWnft.safeTransferFrom(msg.sender, address(this), _tokenIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**  \n     * @notice 'withdrawAvailableRewards' is to be called by user wishing to withdraw ZZZs.\n     *\n     * @dev    Note that 'blockStakedAdjusted' will be updated to reflect no available\n     *          reward on withdraw.\n     */\n    function withdrawAvailableRewards() external nonReentrant {\n        StakeCommitment[] memory commitmentsArr = commitments[msg.sender];\n        uint256 availableRewards = _getAvailableRewards(msg.sender);\n        uint256 currentAdjustedBlock = block.number - INITIAL_BLOCK;\n        uint256 len = commitmentsArr.length;\n\n        for (uint256 i = 0; i < len; ) {\n            commitments[msg.sender][i].blockStakedAdjusted = uint32(\n                currentAdjustedBlock\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _mintTo(msg.sender, availableRewards);\n    }\n\n    /** \n     * @notice  A variation of 'unstakeNft' is available below: 'unstakeNftOptions'.\n     *           Calling `unstakeNft` with a single arg (_tokenId) assumes the caller is the owner\n     *           and does not wish to specify an alternate beneficiary.\n     *\n     * @dev     Users can view an array of staked NFTs via `getStakingCommitments`.\n     *\n     * @param   _tokenId is the token id from the Dream World NFT contract associated with the\n     *           NFT to be unstaked.\n     */\n    function unstakeNft(uint256 _tokenId) external nonReentrant {\n        _unStakeNft(_tokenId, msg.sender, msg.sender);\n    }\n\n    /**\n     * @notice  See function definition above for simple use case.\n     *           Caling `unstakeNftOptions` with three args (_tokenId, _owner, _beneficiary)\n     *           assumes the caller may not be the owner (an approvedForAll check will be made).\n     *           It also gives the approved user or owner the opportunity to specify a beneficiary.\n     *\n     * @dev     User can view array of staked NFTs via `getStakingCommitments`.\n     *\n     * @param   _tokenId is the token id from the Dream World NFT contract associated with the\n     *           NFT to be unstaked.\n     *\n     * @param  _owner The address of the Nft's owner at time of stkaing.\n     *\n     * @param  _beneficiary The address of an alternate wallet to send BOTH the ERC20 ZZZs\n     *          staking rewards and the original ERC721 staked NFT.\n     */\n    function unstakeNftOptions(\n        uint256 _tokenId,\n        address _owner,\n        address _beneficiary\n    ) external nonReentrant {\n        require(\n            DWnft.isApprovedForAll(_owner, msg.sender),\n            \"Caller is not approved for all. See ERC721 spec.\"\n        );\n        _unStakeNft(_tokenId, _owner, _beneficiary);\n    }\n\n    /** \n     * @dev '_unStakeNft' may be called either `unstakeNft` or 'unstakeNftOptions'\n     *   \n     * @dev '_unStakeNft' will iterate through the array of an owners staked tokens. If \n     *       correct commitment is found, any commitsments following will be shifted down\n     *       to overwrite and the last commitment will be zeroed out in O(n) time. \n     */\n    function _unStakeNft(\n        uint256 _tokenId,\n        address _owner,\n        address _beneficiary\n    ) private {\n        StakeCommitment[] memory existingCommitmentsArr = commitments[_owner];\n        uint256 len = existingCommitmentsArr.length;\n        uint256 rewardsAmount = 0;\n        bool includesId = false;\n\n        for (uint256 i = 0; i < len; ) {\n            uint256 elTokenId = existingCommitmentsArr[i].tokenId;\n\n            if (includesId == true && i < len-1) {\n                commitments[_owner][i] = existingCommitmentsArr[i+1];\n            }\n\n            if (elTokenId == _tokenId) {\n                includesId = true;\n                rewardsAmount = _calculateRewards(existingCommitmentsArr[i].blockStakedAdjusted);\n\n                if (i < len-1) {\n                    commitments[_owner][i] = existingCommitmentsArr[i+1];\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Zero out last commitment\n        require(includesId, \"Token not found\");\n\n        delete commitments[_owner][len-1];\n        _mintTo(_beneficiary, rewardsAmount);\n        DWnft.safeTransferFrom(address(this), _beneficiary, _tokenId);\n\n        emit UnstakeNft(_beneficiary, _tokenId, rewardsAmount);\n    }\n\n    //-----------------------------------------------------------------------------------------\\\\\n\n    /**\n     * @notice 'onERC721Received' will be called to validate the staking process\n     *          (See ERC721 docs: `safeTransferFrom`).\n     *\n     * @dev    Business logic of staking is within 'onERC721Received'\n     */\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes memory _data\n    ) public returns (bytes4) {\n        require(\n            _operator == address(this),\n            \"Must transfer valid nft via stake function.\"\n        );\n        require(\n            DWnft.ownerOf(_tokenId) == address(this),\n            \"Must transfer token from DW collection\"\n        );\n        uint256 currentBlock = block.number;\n\n        StakeCommitment memory newCommitment;\n        newCommitment = StakeCommitment({\n            blockStakedAdjusted: uint32(currentBlock - INITIAL_BLOCK),\n            tokenId: _tokenId\n        });\n\n        uint256 numberOfCommits = commitments[_from].length;\n\n        // If user previously unstaked a token, last el will have been zeroed out. \n        // This overwrites last el only in this situation.\n\n        if (numberOfCommits == 0 || commitments[_from][numberOfCommits-1].blockStakedAdjusted != 0) {\n            commitments[_from].push(newCommitment);\n        } else if (commitments[_from][numberOfCommits-1].blockStakedAdjusted == 0) {\n            commitments[_from][numberOfCommits-1] = newCommitment;\n        }\n\n        emit StakeNft(_from, _tokenId);\n\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /**\n     * @notice `_getStakedIds` is used internally for fetching account data\n     *          but it also made available for users.\n     *\n     * @dev    Returns an array of ERC721 token Ids that an\n     *          account has staked.\n     *\n     * @param  _account is the wallet address of the user, who's data is to be fetched.\n     */\n    function _getStakedIds(address _account)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        StakeCommitment[] memory commitmentsArr = commitments[_account];\n        uint256 len = commitmentsArr.length;\n        uint256[] memory tokenIdArray = new uint256[](len);\n\n        for (uint256 i = 0; i < len; ) {\n            tokenIdArray[i] = commitmentsArr[i].tokenId;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return tokenIdArray;\n    }\n\n    /**\n     * @notice `_getAvailableRewards` is used internally for fetching account data\n     *          but it also made available for users.\n     *\n     * @dev    '_getAvailableRewards' will return the sum of available rewards.\n     *\n     * @param   _account is the wallet address of the user, who's data is to be fetched.\n     */\n    function _getAvailableRewards(address _account)\n        public\n        view\n        returns (uint256)\n    {\n        StakeCommitment[] memory commitmentsArr = commitments[_account];\n        uint256 len = commitmentsArr.length;\n        uint256 rewards = 0;\n\n        for (uint256 i = 0; i < len; ) {\n            rewards += _calculateRewards(commitmentsArr[i].blockStakedAdjusted);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return rewards;\n    }\n\n    //------------------------------------UTILS------------------------------------------------\\\\\n\n    /// @notice '_mintTo' is used internally for interfacing w/ the ERC20 ZZZs rewards token.\n    function _mintTo(address _user, uint256 _amount) private {\n        ZZZs.mint(_user, _amount);\n    }\n\n    /** \n     * @dev '_calculateRewards' is used in calculating the amount of ERC20 ZZZs rewards token\n     *       to issue to the beneficiary durring the unstaking process.\n     */\n    function _calculateRewards(uint32 _stakedAtAdjusted)\n        private\n        view\n        returns (uint256)\n    {\n        if (_stakedAtAdjusted == 0) {\n            return 0;\n        }\n\n        uint256 availableBlocks = block.number - INITIAL_BLOCK;\n        uint256 rewardBlocks = availableBlocks - _stakedAtAdjusted;\n\n        // Where one token staked for one day should receive ~ 72 ZZZs\n        return rewardBlocks * 10 ** 16 ;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}