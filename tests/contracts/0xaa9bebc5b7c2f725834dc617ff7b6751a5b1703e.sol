{{
  "language": "Solidity",
  "sources": {
    "/contracts/LootBoxes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./interface/IApes.sol\";\r\nimport \"./interface/ITraits.sol\";\r\nimport \"./interface/IRandomizer.sol\";\r\nimport \"./interface/IMasterContract.sol\";\r\n\r\n/// @title Bulls and Apes Project - Loot Box\r\n/// @author BAP Dev Team\r\n/// @notice Loot Boxes to get ERC1155 Traits for Apes\r\ncontract LootBoxes is ERC1155Holder, Ownable, ReentrancyGuard {\r\n    /// @notice Cooldown period for power replenishment\r\n    uint256 public constant POWER_COOLDOWN = 12 hours;\r\n    /// @notice Cooldown period free spins opening\r\n    uint256 public freeSpinsCooldown = 10 minutes;\r\n\r\n    /// @notice BAP Apes contract\r\n    IApes public apesContract;\r\n    /// @notice BAP Traits contract\r\n    ITraits public traitsContract;\r\n    /// @notice BAP Randomizer contract\r\n    /// @dev Used to pick random winners on box opening\r\n    IRandomizer public randomizerContract;\r\n    /// @notice BAP Master contract\r\n    /// @dev Used for functions that require METH or Utilities contract interaction\r\n    IMasterContract public masterContract;\r\n    address public secret;\r\n\r\n    /// @notice Last timestamp Ape opened a common box\r\n    mapping(uint256 => uint256) public apeLastBox;\r\n    /// @notice Last timestamp Ape used a free spin\r\n    mapping(uint256 => uint256) public apeLastFreeSpin;\r\n    /// @notice Count for Ape common box re-opening\r\n    mapping(uint256 => uint256) public apeOpenCount;\r\n    /// @notice Prices for METH bags\r\n    mapping(uint256 => uint256) public bagPrice;\r\n\r\n    mapping(bytes => bool) private isSignatureUsed;\r\n\r\n    event BoxOpened(\r\n        uint256 boxType,\r\n        uint256 apeId,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256[] prizes\r\n    );\r\n\r\n    event SpecialBoxOpened(\r\n        uint256 boxType,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256[] prizes,\r\n        address operator\r\n    );\r\n\r\n    event MethBagBought(uint256 amount, uint256 price, address to);\r\n    event MethBagCreated(uint256 amount, uint256 price, address operator);\r\n\r\n    /// @notice Deploys the contract\r\n    /// @param apesAddress Address of Apes contract\r\n    /// @param traitsAddress Address of Traits contract\r\n    /// @param randomizerAddress Address of Randomizer contract\r\n    /// @param masterContractAddress Address of Master contract\r\n    /// @param signer Address used to provide signatures\r\n    /// @dev Used for functions that require METH or Utilities contract interaction\r\n    constructor(\r\n        address apesAddress,\r\n        address traitsAddress,\r\n        address randomizerAddress,\r\n        address masterContractAddress,\r\n        address signer\r\n    ) {\r\n        apesContract = IApes(apesAddress);\r\n        traitsContract = ITraits(traitsAddress);\r\n        randomizerContract = IRandomizer(randomizerAddress);\r\n        masterContract = IMasterContract(masterContractAddress);\r\n        secret = signer;\r\n    }\r\n\r\n    /// @notice Open a Common box using an specific Ape\r\n    /// @param apeId ID of the Ape used to open the box\r\n    /// @param amount Amount of boxes to be opened\r\n    /// @param price Price to be paid for open the boxes (in METH)\r\n    /// @param boxType Box type code: 0 - common, 1 - epic, 2 - legendary\r\n    /// @param timeOut Timestamp for signature expiration\r\n    /// @param hasPower Ape power flag\r\n    /// @param randomSeed Bytes seed to generate the random winner\r\n    /// @param signature Signature to verify above parameters\r\n    /// @dev Mints amount ERC1155 Traits to the sender\r\n    function openCommonBox(\r\n        uint256 apeId,\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 boxType,\r\n        uint256 timeOut,\r\n        bool hasPower,\r\n        bytes calldata randomSeed,\r\n        bytes calldata signature\r\n    ) external {\r\n        require(!isSignatureUsed[signature], \"OpenBox: Signature already used\");\r\n        require(timeOut > block.timestamp, \"OpenBox: Seed is no longer valid\");\r\n        require(boxType == 0, \"OpenBox: BoxType not valid\");\r\n\r\n        address tokenOwner = apesContract.ownerOf(apeId);\r\n\r\n        require(\r\n            _verifyHashSignature(\r\n                keccak256(\r\n                    abi.encode(\r\n                        msg.sender,\r\n                        tokenOwner,\r\n                        apeId,\r\n                        amount,\r\n                        price,\r\n                        boxType,\r\n                        timeOut,\r\n                        hasPower,\r\n                        randomSeed\r\n                    )\r\n                ),\r\n                signature\r\n            ),\r\n            \"OpenBox: Signature is invalid\"\r\n        );\r\n\r\n        isSignatureUsed[signature] = true;\r\n\r\n        if (price > 0) {\r\n            if (\r\n                !hasPower ||\r\n                apeLastBox[apeId] + POWER_COOLDOWN > block.timestamp\r\n            ) {\r\n                require(\r\n                    apeLastBox[apeId] + 5 minutes > block.timestamp,\r\n                    \"OpenBox: Re open time elapsed\"\r\n                );\r\n\r\n                if (apeOpenCount[apeId] > 0) {\r\n                    price = price * 2;\r\n                } else {\r\n                    price = (price * 3000) / 2000;\r\n                    apeOpenCount[apeId]++;\r\n                }\r\n            } else {\r\n                apeOpenCount[apeId] = 0;\r\n            }\r\n\r\n            apeLastBox[apeId] = block.timestamp;\r\n\r\n            masterContract.pay(price, price);\r\n        } else {\r\n            require(\r\n                apeLastFreeSpin[apeId] + freeSpinsCooldown > block.timestamp,\r\n                \"OpenBox: Free spins cooldown\"\r\n            );\r\n            apeLastFreeSpin[apeId] = block.timestamp;\r\n        }\r\n\r\n        (uint256[] memory prizes, bool hasExtra) = randomizerContract.getRandom(\r\n            randomSeed,\r\n            amount,\r\n            timeOut\r\n        );\r\n\r\n        uint256[] memory prizesAmounts = new uint256[](amount);\r\n\r\n        for (uint256 i = 0; i < amount; i++) {\r\n            prizesAmounts[i] = 1;\r\n        }\r\n\r\n        traitsContract.mintBatch(msg.sender, prizes, prizesAmounts);\r\n\r\n        emit BoxOpened(boxType, apeId, amount, price, prizes);\r\n    }\r\n\r\n    /// @notice Open a Epic or Legendary box\r\n    /// @param amount Amount of boxes to be opened\r\n    /// @param price Price to be paid for open the boxes (in ETH)\r\n    /// @param boxType Box type code: 0 - common, 1 - epic, 2 - legendary\r\n    /// @param timeOut Timestamp for signature expiration\r\n    /// @param randomSeed Bytes seed to generate the random winner\r\n    /// @param signature Signature to verify above parameters\r\n    /// @dev Mints amount ERC1155 Traits to the sender\r\n    function openSpecialBox(\r\n        uint256 amount,\r\n        uint256 price,\r\n        uint256 boxType,\r\n        uint256 timeOut,\r\n        bytes calldata randomSeed,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        require(!isSignatureUsed[signature], \"OpenBox: Signature already used\");\r\n        require(timeOut > block.timestamp, \"OpenBox: Seed is no longer valid\");\r\n        require(boxType > 0, \"OpenBox: BoxType not valid\");\r\n        require(msg.value == price, \"OpenBox: Wrong ETH value\");\r\n\r\n        require(\r\n            _verifyHashSignature(\r\n                keccak256(\r\n                    abi.encode(\r\n                        msg.sender,\r\n                        amount,\r\n                        price,\r\n                        boxType,\r\n                        timeOut,\r\n                        randomSeed\r\n                    )\r\n                ),\r\n                signature\r\n            ),\r\n            \"OpenBox: Signature is invalid\"\r\n        );\r\n\r\n        isSignatureUsed[signature] = true;\r\n\r\n        (uint256[] memory prizes, bool hasExtra) = randomizerContract.getRandom(\r\n            randomSeed,\r\n            amount,\r\n            timeOut\r\n        );\r\n\r\n        uint256 quantiteToMint = amount;\r\n\r\n        if (hasExtra) {\r\n            for (uint256 i = 0; i < prizes.length; i++) {\r\n                uint256 currentPrize = prizes[i];\r\n\r\n                if (currentPrize > 39 && currentPrize < 44) {\r\n                    masterContract.airdrop(msg.sender, 1, currentPrize);\r\n                    quantiteToMint--;\r\n                }\r\n            }\r\n\r\n            if (quantiteToMint > 0) {\r\n                uint256[] memory prizesToMint = new uint256[](quantiteToMint);\r\n                uint256[] memory prizesAmounts = new uint256[](quantiteToMint);\r\n                uint256 addedCount;\r\n\r\n                for (uint256 i = 0; i < prizes.length; i++) {\r\n                    uint256 currentPrize = prizes[i];\r\n                    if (currentPrize > 39 && currentPrize < 44) {\r\n                        continue;\r\n                    }\r\n\r\n                    prizesAmounts[addedCount] = 1;\r\n                    prizesToMint[addedCount] = currentPrize;\r\n                    addedCount++;\r\n                }\r\n\r\n                traitsContract.mintBatch(\r\n                    msg.sender,\r\n                    prizesToMint,\r\n                    prizesAmounts\r\n                );\r\n            }\r\n        } else {\r\n            uint256[] memory prizesAmounts = new uint256[](quantiteToMint);\r\n\r\n            for (uint256 i = 0; i < quantiteToMint; i++) {\r\n                prizesAmounts[i] = 1;\r\n            }\r\n\r\n            traitsContract.mintBatch(msg.sender, prizes, prizesAmounts);\r\n        }\r\n\r\n        emit SpecialBoxOpened(boxType, amount, price, prizes, msg.sender);\r\n    }\r\n\r\n    /// @notice Buy METH bags\r\n    /// @param amount Amount of METH to buy\r\n    /// @param to Address to send the METH\r\n    /// @param price Price to be paid for the METH (in ETH)\r\n    /// @param timeOut Timestamp for signature expiration\r\n    /// @param signature Signature to verify above parameters\r\n    /// @dev Mints amount METH to selected address\r\n    function buyMethBag(\r\n        uint256 amount,\r\n        address to,\r\n        uint256 price,\r\n        uint256 timeOut,\r\n        bytes calldata signature\r\n    ) external payable {\r\n        require(timeOut > block.timestamp, \"buyMethBag: Seed is no longer valid\");\r\n        require(\r\n            _verifyHashSignature(\r\n                keccak256(abi.encode(amount, to, price, timeOut)),\r\n                signature\r\n            ),\r\n            \"buyMethBag: Signature is invalid\"\r\n        );\r\n        require(price > 0, \"Buy METH bag: amount is not valid\");\r\n        require(msg.value == price, \"Buy METH bag: not enough ETH to buy\");\r\n\r\n        masterContract.claim(to, amount);\r\n\r\n        emit MethBagBought(amount, price, to);\r\n    }\r\n\r\n    /// @notice Set the price for a METH bag\r\n    /// @param amount Amount of METH for the bag\r\n    /// @param price Price in WEI to be paid for the bag\r\n    /// @dev METH bags can only be created by the owner\r\n    function setMethBagPrice(uint256 amount, uint256 price) external onlyOwner {\r\n        require(amount > 0, \"METH amount: can't be 0\");\r\n\r\n        bagPrice[amount] = price;\r\n\r\n        emit MethBagCreated(amount, price, msg.sender);\r\n    }\r\n\r\n    /// @notice Change the signer address\r\n    /// @param signer Address used to provide signatures\r\n    /// @dev Signer address can only be set by the owner\r\n    function setSecret(address signer) external onlyOwner {\r\n        secret = signer;\r\n    }\r\n\r\n    /// @notice Change the cooldown perion on free spins\r\n    /// @param newCooldown New cooldown set on seconds\r\n    /// @dev newCooldown can only be set by the owner\r\n    function setFreeSpinCooldown(uint256 newCooldown) external onlyOwner {\r\n        freeSpinsCooldown = newCooldown;\r\n    }\r\n\r\n    /// @notice Change contract Addresses\r\n    /// @param apesAddress Address of Apes contract\r\n    /// @param traitsAddress Address of Traits contract\r\n    /// @param randomizerAddress Address of Randomizer contract\r\n    /// @param masterContractAddress Address of Master contract\r\n    /// @dev Can only be set by the owner\r\n    function setContractAddresses(\r\n        address apesAddress,\r\n        address traitsAddress,\r\n        address randomizerAddress,\r\n        address masterContractAddress\r\n    ) external onlyOwner {\r\n        apesContract = IApes(apesAddress);\r\n        traitsContract = ITraits(traitsAddress);\r\n        randomizerContract = IRandomizer(randomizerAddress);\r\n        masterContract = IMasterContract(masterContractAddress);\r\n    }\r\n\r\n    function withdrawETH(address _address, uint256 amount)\r\n        public\r\n        nonReentrant\r\n        onlyOwner\r\n    {\r\n        require(amount <= address(this).balance, \"Insufficient funds\");\r\n        (bool success, ) = _address.call{value: amount}(\"\");\r\n        require(success, \"Unable to send eth\");\r\n    }\r\n\r\n    function _verifyHashSignature(bytes32 freshHash, bytes memory signature)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", freshHash)\r\n        );\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        if (signature.length != 65) {\r\n            return false;\r\n        }\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n        address signer = address(0);\r\n        if (v == 27 || v == 28) {\r\n            // solium-disable-next-line arg-overflow\r\n            signer = ecrecover(hash, v, r, s);\r\n        }\r\n        return secret == signer;\r\n    }\r\n}\r\n"
    },
    "/contracts/interface/ITraits.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface ITraits {\r\n    function mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
    },
    "/contracts/interface/IRandomizer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IRandomizer {\r\n    function getRandom(\r\n        bytes memory data,\r\n        uint256 amount,\r\n        uint256 timeOut\r\n    ) external view returns (uint256[] memory, bool);\r\n}\r\n"
    },
    "/contracts/interface/IMasterContract.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IMasterContract {\r\n    // METH functions\r\n\r\n    function claim(address to, uint256 amount) external;\r\n\r\n    function pay(uint256 payment, uint256 fee) external;\r\n\r\n    // Teens functions\r\n\r\n    function airdrop(address to, uint256 amount) external;\r\n\r\n    function burnTeenBull(uint256 tokenId) external;\r\n\r\n    // Utilities functions\r\n\r\n    function burn(uint256 id, uint256 amount) external;\r\n\r\n    function airdrop(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 id\r\n    ) external;\r\n}\r\n"
    },
    "/contracts/interface/IApes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IApes {\r\n    function confirmChange(uint256 tokenId) external;\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}