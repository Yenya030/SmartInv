{{
  "language": "Solidity",
  "sources": {
    "contracts/CloneforceStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Creator: twitter.com/0xNox_ETH\n\n//               .;::::::::::::::::::::::::::::::;.\n//               ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:\n//               ;XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX;\n//               ;KNNNWMMWMMMMMMWWNNNNNNNNNWMMMMMN:\n//                .',oXMMMMMMMNk:''''''''';OMMMMMN:\n//                 ,xNMMMMMMNk;            l00000k,\n//               .lNMMMMMMNk;               .....\n//                'dXMMWNO;                .......\n//                  'd0k;.                .dXXXXX0;\n//               .,;;:lc;;;;;;;;;;;;;;;;;;c0MMMMMN:\n//               ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:\n//               ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:\n//               ;XWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWX:\n//               .,;,;;;;;;;;;;;;;;;;;;;;;;;,;;,;,.\n//               'dkxkkxxkkkkkkkkkkkkkkkkkkxxxkxkd'\n//               ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:\n//               ;XMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:\n//               'xkkkOOkkkkkkkkkkkkkkkkkkkkkkkkkx'\n//                          .,,,,,,,,,,,,,,,,,,,,,.\n//                        .lKNWWWWWWWWWWWWWWWWWWWX;\n//                      .lKWMMMMMMMMMMMMMMMMMMMMMX;\n//                    .lKWMMMMMMMMMMMMMMMMMMMMMMMN:\n//                  .lKWMMMMMWKo:::::::::::::::::;.\n//                .lKWMMMMMWKl.\n//               .lNMMMMMWKl.\n//                 ;kNMWKl.\n//                   ;dl.\n//\n//               We vow to Protect\n//               Against the powers of Darkness\n//               To rain down Justice\n//               Against all who seek to cause Harm\n//               To heed the call of those in Need\n//               To offer up our Arms\n//               In body and name we give our Code\n//\n//               FOR THE BLOCKCHAIN ⚔️\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC1155Receiver.sol\";\n\ncontract CloneforceStakingManager is Ownable, IERC721Receiver, IERC1155Receiver {\n    address private _admin;\n    bool public contractPaused;\n\n    // Struct for staked tokens\n    struct StakedToken {\n        address token; // address of token contract\n        uint8 tokenType; // 1 = ERC-721, 2 = ERC-1155\n        uint32 id; // token id\n        uint8 amount; // amount of tokens staked\n        uint256 timestamp; // timestamp of staking\n    }\n\n    // Holds all staked tokens by users\n    mapping(address => StakedToken[]) public stakedTokensByUser;\n\n    // Emitted when a user stakes a token\n    event TokenStaked(\n        address indexed user,\n        address indexed token,\n        uint32 indexed id,\n        uint8 tokenType,\n        uint8 amount,\n        uint256 timestamp\n    );\n\n    // Emitted when a user unstakes a token\n    event TokenUnstaked(\n        address indexed user,\n        address indexed token,\n        uint32 indexed id,\n        uint8 tokenType,\n        uint8 amount,\n        uint256 timestamp\n    );\n\n    // Holds whether a user can stake a specific token type\n    mapping(address => bool) public isAllowedForStaking;\n    mapping(address => bool) private _signatureRequiredToUnstake;\n    address private _signatureKey;\n    mapping(string => bool) private _usedNonces;\n\n    constructor(address admin, address signatureKey) {\n        _admin = admin;\n        _signatureKey = signatureKey;\n    }\n\n    modifier callerIsUser() {\n        require(tx.origin == msg.sender, \"Caller is another contract\");\n        _;\n    }\n\n    modifier onlyOwnerOrAdmin() {\n        require(msg.sender == owner() || msg.sender == _admin, \"Not owner or admin\");\n        _;\n    }\n\n    function setAdmin(address admin) external onlyOwner {\n        _admin = admin;\n    }\n\n    function pauseContract(bool paused) external onlyOwnerOrAdmin {\n        contractPaused = paused;\n    }\n\n    function setAllowedForStaking(\n        address token,\n        bool allowed,\n        bool requireSigToUnstake\n    ) external onlyOwnerOrAdmin {\n        isAllowedForStaking[token] = allowed;\n        _signatureRequiredToUnstake[token] = requireSigToUnstake;\n    }\n\n    function depositERC721Token(address token, uint32 id) private {\n        // check if token is owned by user\n        require(IERC721(token).ownerOf(id) == msg.sender, \"Token not owned by user\");\n\n        // transfer token to contract\n        IERC721(token).safeTransferFrom(msg.sender, address(this), id);\n    }\n\n    function depositERC1155Token(address token, uint32 id, uint8 amount) private {\n        // check if token is owned by user\n        require(\n            IERC1155(token).balanceOf(msg.sender, id) >= amount,\n            \"Not enough tokens owned by user\"\n        );\n\n        // transfer token to contract\n        IERC1155(token).safeTransferFrom(msg.sender, address(this), id, amount, \"\");\n    }\n\n    function stakeToken(\n        address token,\n        uint8 tokenType,\n        uint32 id,\n        uint8 amount\n    ) public callerIsUser {\n        require(!contractPaused, \"Contract paused\");\n        require(isAllowedForStaking[token], \"Token not allowed for staking\");\n        require(tokenType == 1 || tokenType == 2, \"Invalid token type\");\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        if (tokenType == 1) {\n            require(amount == 1, \"Amount must be 1 for ERC-721\");\n            depositERC721Token(token, id);\n        } else {\n            depositERC1155Token(token, id, amount);\n        }\n\n        // add token to user's staked tokens\n        stakedTokensByUser[msg.sender].push(\n            StakedToken(token, tokenType, id, amount, block.timestamp)\n        );\n\n        emit TokenStaked(msg.sender, token, id, tokenType, amount, block.timestamp);\n    }\n\n    function withdrawERC721Token(address token, uint32 id) private {\n        // transfer token to user\n        IERC721(token).safeTransferFrom(address(this), msg.sender, id);\n    }\n\n    function withdrawERC1155Token(address token, uint32 id, uint8 amount) private {\n        // transfer token to user\n        IERC1155(token).safeTransferFrom(address(this), msg.sender, id, amount, \"\");\n    }\n\n    function unstakeToken(\n        address token,\n        uint8 tokenType,\n        uint32 id,\n        uint8 amount,\n        string calldata nonce,\n        bytes memory signature\n    ) public callerIsUser {\n        require(!contractPaused, \"Contract paused\");\n        require(tokenType == 1 || tokenType == 2, \"Invalid token type\");\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // if signature required, check signature\n        if (_signatureRequiredToUnstake[token]) {\n            require(!_usedNonces[nonce], \"Nonce already used\");\n\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            assembly {\n                r := mload(add(signature, 32))\n                s := mload(add(signature, 64))\n                v := byte(0, mload(add(signature, 96)))\n            }\n            bytes32 _hash = keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    keccak256(abi.encodePacked(token, tokenType, id, amount, nonce))\n                )\n            );\n            require(ecrecover(_hash, v, r, s) == _signatureKey, \"Invalid signature\");\n\n            _usedNonces[nonce] = true;\n        }\n\n        // get user's staked tokens\n        StakedToken[] storage stakedTokens = stakedTokensByUser[msg.sender];\n\n        // find token in user's staked tokens\n        uint256 index = stakedTokens.length;\n        for (uint256 i = 0; i < stakedTokens.length; i++) {\n            if (\n                stakedTokens[i].token == token &&\n                stakedTokens[i].tokenType == tokenType &&\n                stakedTokens[i].id == id\n            ) {\n                index = i;\n                break;\n            }\n        }\n\n        // check if token was found\n        require(index < stakedTokens.length, \"Token not found\");\n\n        uint stakedAmount = stakedTokens[index].amount;\n        require(stakedAmount >= amount, \"Not enough tokens staked\");\n\n        if (tokenType == 1) {\n            require(amount == 1, \"Amount must be 1 for ERC-721\");\n            withdrawERC721Token(token, id);\n        } else {\n            withdrawERC1155Token(token, id, amount);\n        }\n\n        // remove `amount` of tokens from user's staked tokens\n        if (stakedAmount > amount) {\n            stakedTokens[index].amount -= amount;\n        } else {\n            stakedTokens[index] = stakedTokens[stakedTokens.length - 1];\n            stakedTokens.pop();\n        }\n\n        emit TokenUnstaked(msg.sender, token, id, tokenType, amount, block.timestamp);\n    }\n\n    struct StakeUnstakeTokenParams {\n        address token;\n        uint8 tokenType;\n        uint32 id;\n        uint8 amount;\n        string nonce;\n        bytes signature;\n    }\n\n    struct BatchOperationParam {\n        StakeUnstakeTokenParams params;\n        bool stake;\n    }\n\n    function batchStakeUnstakeTokens(BatchOperationParam[] calldata params) external callerIsUser {\n        for (uint256 i = 0; i < params.length; i++) {\n            if (params[i].stake) {\n                stakeToken(\n                    params[i].params.token,\n                    params[i].params.tokenType,\n                    params[i].params.id,\n                    params[i].params.amount\n                );\n            } else {\n                unstakeToken(\n                    params[i].params.token,\n                    params[i].params.tokenType,\n                    params[i].params.id,\n                    params[i].params.amount,\n                    params[i].params.nonce,\n                    params[i].params.signature\n                );\n            }\n        }\n    }\n\n    function getStakedTokens(address user) external view returns (StakedToken[] memory) {\n        return stakedTokensByUser[user];\n    }\n\n    function areNoncesUsed(string[] calldata nonces) external view returns (bool[] memory) {\n        bool[] memory isUsed = new bool[](nonces.length);\n        for (uint256 i = 0; i < nonces.length; i++) {\n            isUsed[i] = _usedNonces[nonces[i]];\n        }\n        return isUsed;\n    }\n\n    function setSignatureKey(address signatureKey) external onlyOwner {\n        _signatureKey = signatureKey;\n    }\n\n    // Emergency withdraw token from contract. Only owner or admin can call this function.\n    // Will be used in case someone sends tokens to contract by mistake.\n    function emergencyWithdrawToken(\n        uint8 tokenType,\n        address token,\n        uint32 id,\n        uint8 amount,\n        address receiver\n    ) external onlyOwnerOrAdmin {\n        require(tokenType == 1 || tokenType == 2, \"Invalid token type\");\n\n        // if token is staked, find it and unstake it\n        bool staked = false;\n        for (uint256 idx = 0; idx < stakedTokensByUser[receiver].length; idx++) {\n            if (\n                stakedTokensByUser[receiver][idx].token == token &&\n                stakedTokensByUser[receiver][idx].tokenType == tokenType &&\n                stakedTokensByUser[receiver][idx].id == id\n            ) {\n                uint stakedAmount = stakedTokensByUser[receiver][idx].amount;\n                require(stakedAmount >= amount, \"Not enough tokens staked\");\n\n                if (stakedAmount > amount) {\n                    stakedTokensByUser[receiver][idx].amount -= amount;\n                } else {\n                    stakedTokensByUser[receiver][idx] = stakedTokensByUser[receiver][\n                        stakedTokensByUser[receiver].length - 1\n                    ];\n                    stakedTokensByUser[receiver].pop();\n                }\n                staked = true;\n                break;\n            }\n        }\n\n        if (tokenType == 1) {\n            require(amount == 1, \"Amount must be 1 for ERC-721\");\n            IERC721(token).safeTransferFrom(address(this), receiver, id);\n        } else {\n            IERC1155(token).safeTransferFrom(address(this), receiver, id, amount, \"\");\n        }\n\n        if (staked) {\n            emit TokenUnstaked(receiver, token, id, tokenType, amount, block.timestamp);\n        }\n    }\n\n    // IERC721Receiver and IERC1155Receiver functions\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        return\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            interfaceId == type(IERC1155Receiver).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 600
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}