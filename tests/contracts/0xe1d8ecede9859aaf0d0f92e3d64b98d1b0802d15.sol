{{
  "language": "Solidity",
  "sources": {
    "/contracts/Claim.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ninterface IGasPrice {\n    function latestAnswer() external view returns (int256);\n}\n\ninterface IClaimPass {\n    // Can use this to check and see if we have the right approvals.\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    // Will call this from the UI.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function ownerOf(uint256 id) external view returns (address);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenID\n    ) external;\n}\n\ninterface ILostMiner {\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenID\n    ) external;\n}\n\ninterface IClaim {\n    function claim(\n        uint256[] calldata claimPassIDs,\n        uint256[] calldata lostMinerIDs,\n        bytes calldata signature,\n        address dest\n    ) external;\n\n    function status() external returns (Status memory);\n\n    function gasPrice() external returns (uint256);\n}\n\nstruct Status {\n    bool open;\n    bool enabled;\n    uint64 openAt;\n    uint64 closesAt;\n}\n\ncontract Claim is Ownable {\n    address _claimPassContract;\n    address _lostMinerContract;\n    address _txnSigner;\n    address _gasPricer;\n\n    bool _claimEnabled = false;\n    uint64 _claimStarts = 0;\n    uint64 _claimEnds = 0;\n\n    function setClaimPassContract(address addr) public onlyOwner {\n        _claimPassContract = addr;\n    }\n\n    function setLostMinerContract(address addr) public onlyOwner {\n        _lostMinerContract = addr;\n    }\n\n    function setTxnSigner(address addr) public onlyOwner {\n        _txnSigner = addr;\n    }\n\n    function setClaimEnabled(bool b) public onlyOwner {\n        _claimEnabled = b;\n    }\n\n    function setClaimWindow(uint64 start, uint64 end) public onlyOwner {\n        _claimStarts = start;\n        _claimEnds = end;\n    }\n\n    function setGasPricer(address addr) public onlyOwner {\n        _gasPricer = addr;\n    }\n\n    function gasPrice() public view returns (uint256) {\n        if (_gasPricer == address(0)) {\n            return 0;\n        }\n\n        return uint256(IGasPrice(_gasPricer).latestAnswer());\n    }\n\n    function status() public view returns (Status memory) {\n        return\n            Status({\n                open: claimIsOpen(),\n                enabled: _claimEnabled,\n                openAt: _claimStarts,\n                closesAt: _claimEnds\n            });\n    }\n\n    function claimIsOpen() internal view returns (bool) {\n        if (!_claimEnabled) {\n            return false;\n        }\n\n        if (_claimStarts == 0 || block.timestamp < _claimStarts) {\n            return false;\n        }\n\n        if (_claimEnds == 0 || block.timestamp >= _claimEnds) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function claim(\n        uint256[] calldata claimPassIDs,\n        uint256[] calldata lostMinerIDs,\n        bytes calldata signature,\n        address dest\n    ) public {\n        ILostMiner lostMiner = ILostMiner(_lostMinerContract);\n        IClaimPass claimPass = IClaimPass(_claimPassContract);\n\n        require(claimPassIDs.length == lostMinerIDs.length, \"Array mismatch\");\n\n        require(_claimEnabled, \"Claim not enabled\");\n\n        require(\n            _claimStarts > 0 && block.timestamp >= _claimStarts,\n            \"Claim window hasn't opened\"\n        );\n\n        require(\n            _claimEnds > 0 && block.timestamp < _claimEnds,\n            \"Claim window is closed\"\n        );\n\n        require(\n            _claimPassContract != address(0) &&\n                _lostMinerContract != address(0),\n            \"Claim pass/token not configured\"\n        );\n\n        require(\n            dest != address(0),\n            \"Destination address cannot be the zero address\"\n        );\n\n        require(\n            claimPass.isApprovedForAll(_msgSender(), address(this)),\n            \"Approval required\"\n        );\n\n        require(\n            verifySignature(\n                signature,\n                getHash(getDigest(claimPassIDs, lostMinerIDs))\n            ),\n            \"Signature mismatch\"\n        );\n\n        for (uint256 i = 0; i < claimPassIDs.length; i++) {\n            uint256 passID = claimPassIDs[i];\n            uint256 minerID = lostMinerIDs[i];\n\n            claimPass.safeTransferFrom(\n                _msgSender(),\n                address(0x000000000000000000000000000000000000dEaD),\n                passID\n            );\n\n            lostMiner.safeTransferFrom(_lostMinerContract, dest, minerID);\n        }\n    }\n\n    function devclaim(\n        uint256[] calldata claimPassIDs,\n        uint256[] calldata lostMinerIDs,\n        bytes calldata signature,\n        address dest\n    ) public {\n        ILostMiner lostMiner = ILostMiner(_lostMinerContract);\n        IClaimPass claimPass = IClaimPass(_claimPassContract);\n\n        require(claimPassIDs.length == lostMinerIDs.length, \"Array mismatch\");\n\n        require(\n            _claimPassContract != address(0) &&\n                _lostMinerContract != address(0),\n            \"Claim pass/token not configured\"\n        );\n\n        require(\n            claimPass.isApprovedForAll(_msgSender(), address(this)),\n            \"Approval required\"\n        );\n\n        require(\n            verifySignature(\n                signature,\n                getHash(getDigest(claimPassIDs, lostMinerIDs))\n            ),\n            \"Signature mismatch\"\n        );\n\n        for (uint256 i = 0; i < claimPassIDs.length; i++) {\n            uint256 passID = claimPassIDs[i];\n            uint256 minerID = lostMinerIDs[i];\n\n            claimPass.safeTransferFrom(\n                _msgSender(),\n                address(0x000000000000000000000000000000000000dEaD),\n                passID\n            );\n\n            lostMiner.safeTransferFrom(_lostMinerContract, dest, minerID);\n        }\n    }\n\n    function verifySignature(bytes memory signature, bytes32 digestHash)\n        public\n        view\n        returns (bool)\n    {\n        address std = getSigner(signature, digestHash);\n        if (std == _txnSigner) {\n            return true;\n        }\n\n        address packed = getSignerPacked(signature, digestHash);\n        if (packed == _txnSigner) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getSigner(bytes memory signature, bytes32 digestHash)\n        public\n        pure\n        returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\n\n        bytes32 ethSignedHash = getMessageHash(digestHash);\n        return ecrecover(ethSignedHash, v, r, s);\n    }\n\n    function getSignerPacked(bytes memory signature, bytes32 digestHash)\n        public\n        pure\n        returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\n\n        bytes32 ethSignedHash = getMessageHashPacked(digestHash);\n        return ecrecover(ethSignedHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n\n    function getMessageHash(bytes32 digestHash) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\"\\x19Ethereum Signed Message:\\n32\", digestHash)\n            );\n    }\n\n    function getMessageHashPacked(bytes32 digestHash)\n        public\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", digestHash)\n            );\n    }\n\n    function getHash(bytes memory digest) public pure returns (bytes32 hash) {\n        return keccak256(digest);\n    }\n\n    function getDigest(\n        uint256[] calldata claimPassIDs,\n        uint256[] calldata lostMinerIDs\n    ) public pure returns (bytes memory) {\n        return abi.encode(claimPassIDs, lostMinerIDs);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}