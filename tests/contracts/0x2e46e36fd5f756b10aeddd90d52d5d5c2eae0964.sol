{{
  "language": "Solidity",
  "sources": {
    "contracts/mojito/sothebys/RoyaltyEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../../manifold/libraries-solidity/access/AdminControlUpgradeable.sol\";\nimport \"../../openzeppelin-upgradeable/access/IAccessControlUpgradeable.sol\";\nimport \"../../openzeppelin/utils/introspection/ERC165Checker.sol\";\nimport \"../../manifold/libraries-solidity/access/IAdminControl.sol\";\nimport \"../../openzeppelin/utils/structs/EnumerableSet.sol\";\nimport \"../../manifold/royalty-registry/specs/INiftyGateway.sol\";\nimport \"../../manifold/royalty-registry/specs/IFoundation.sol\";\nimport \"../../manifold/royalty-registry/libraries/SuperRareContracts.sol\";\nimport \"../../manifold/royalty-registry/specs/IManifold.sol\";\nimport \"../../manifold/royalty-registry/specs/IRarible.sol\";\nimport \"../../manifold/royalty-registry/specs/IFoundation.sol\";\nimport \"../../manifold/royalty-registry/specs/ISuperRare.sol\";\nimport \"../../manifold/royalty-registry/specs/IEIP2981.sol\";\nimport \"../../manifold/royalty-registry/specs/IZoraOverride.sol\";\nimport \"../../manifold/royalty-registry/specs/IArtBlocksOverride.sol\";\nimport \"../../manifold/royalty-registry/specs/IKODAV2Override.sol\";\nimport {IRoyaltySplitter, Recipient} from \"../../manifold/royalty-registry/overrides/IRoyaltySplitter.sol\";\nimport \"../../mojito/interfaces/IRoyaltyEngine.sol\";\nimport \"../../openzeppelin/utils/Address.sol\";\n/**\n * @dev RoyaltyEngine to lookup royalty configurations.The main purpose of this contract to getRoyalty\n * information from standards.If own royalty is configured, it fetchs the royalty information from\n * own Royalty, else returns royalty information from other standards\n */\ncontract RoyaltyEngine is IRoyaltyEngine, AdminControlUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    using Address for address;\n\n    // Maximum basis points allowed to set during the royalty\n    uint256 public immutable maxBps;\n\n    // Track blacklisted collectionAddress\n    EnumerableSet.AddressSet private blacklistedCollectionAddress;\n\n    // Track blacklisted walletAddress\n    EnumerableSet.AddressSet private blacklistedWalletAddress;\n\n    //Royalty Configurations stored at the collection level\n    mapping(address => address payable[]) internal collectionRoyaltyReceivers;\n    mapping(address => uint256[]) internal collectionRoyaltyBPS;\n\n    //Royalty Configurations stored at the token level\n    mapping(address => mapping(uint256 => address payable[]))\n        internal tokenRoyaltyReceivers;\n    mapping(address => mapping(uint256 => uint256[])) internal tokenRoyaltyBPS;\n\n    /// @notice Emitted when an Withdraw Payout is executed\n    /// @param toAddress To Address amount is transferred\n    /// @param amount The amount transferred\n    event WithdrawPayout(address toAddress, uint256 amount);\n\n    constructor(uint256 maxBasisPoints) {\n        require(\n            maxBasisPoints < 10_000,\n            \"maxBasisPoints should not be equal or exceed than the value 10_000\"\n        );\n        maxBps = maxBasisPoints;\n        __Ownable_init();\n    }\n\n    /**\n     * @notice Setting royalty for collection.\n     * @param collectionAddress contract address\n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    function setRoyalty(\n        address collectionAddress,\n        address payable[] calldata receivers,\n        uint256[] calldata basisPoints\n    ) external override {\n        require(\n            isAdmin(msg.sender) ||\n                _isCollectionAdmin(collectionAddress, msg.sender) ||\n                _isCollectionOwner(collectionAddress, msg.sender),\n            \"sender should be a Mojito Admin or a Collection Admin or a Collection Owner\"\n        );\n        require(\n            !blacklistedCollectionAddress.contains(collectionAddress) &&\n                !blacklistedWalletAddress.contains(msg.sender),\n            \"Sender and CollectionAddress should not be blacklisted\"\n        );\n        require(\n            receivers.length == basisPoints.length,\n            \"Invalid input length for receivers and basis points\"\n        );\n        uint256 totalBasisPoints;\n        for (uint256 i = 0; i < basisPoints.length; i++) {\n            totalBasisPoints += basisPoints[i];\n        }\n        require(\n            totalBasisPoints < maxBps,\n            \"Total basis points should be less than the maximum basis points\"\n        );\n        collectionRoyaltyReceivers[collectionAddress] = receivers;\n        collectionRoyaltyBPS[collectionAddress] = basisPoints;\n        emit RoyaltiesUpdated(collectionAddress, receivers, basisPoints);\n    }\n\n    /**\n     * @notice Setting royalty for token.\n     * @param collectionAddress contract address\n     * @param tokenId Token Id\n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    function setTokenRoyalty(\n        address collectionAddress,\n        uint256 tokenId,\n        address payable[] calldata receivers,\n        uint256[] calldata basisPoints\n    ) external override {\n        require(\n            isAdmin(msg.sender) ||\n                _isCollectionAdmin(collectionAddress, msg.sender) ||\n                _isCollectionOwner(collectionAddress, msg.sender),\n            \"sender should be a Mojito Admin or a Collection Admin or a Collection Owner\"\n        );\n        require(\n            !blacklistedCollectionAddress.contains(collectionAddress) &&\n                !blacklistedWalletAddress.contains(msg.sender),\n            \"Sender and CollectionAddress should not be blacklisted\"\n        );\n        require(\n            receivers.length == basisPoints.length,\n            \"Invalid input length for receivers and basis points\"\n        );\n        uint256 totalBasisPoints;\n        for (uint256 i = 0; i < basisPoints.length; i++) {\n            totalBasisPoints += basisPoints[i];\n        }\n        require(\n            totalBasisPoints < maxBps,\n            \"Total basis points should be less than the maximum basis points\"\n        );\n        tokenRoyaltyReceivers[collectionAddress][tokenId] = receivers;\n        tokenRoyaltyBPS[collectionAddress][tokenId] = basisPoints;\n        emit TokenRoyaltiesUpdated(\n            collectionAddress,\n            tokenId,\n            receivers,\n            basisPoints\n        );\n    }\n\n    /**\n     * @notice getting royalty information\n     * @param collectionAddress contract address\n     * @param tokenId Token Id\n     * @return recipients returns set of royalty receivers address\n     * @return basisPoints returns set of Bps to calculate Shares.\n     **/\n    function getRoyalty(address collectionAddress, uint256 tokenId)\n        external\n        view\n        override\n        returns (\n            address payable[] memory recipients,\n            uint256[] memory basisPoints\n        )\n    {\n        if (tokenRoyaltyReceivers[collectionAddress][tokenId].length > 0) {\n            recipients = tokenRoyaltyReceivers[collectionAddress][tokenId];\n            basisPoints = tokenRoyaltyBPS[collectionAddress][tokenId];\n        } else if (collectionRoyaltyReceivers[collectionAddress].length > 0) {\n            recipients = collectionRoyaltyReceivers[collectionAddress];\n            basisPoints = collectionRoyaltyBPS[collectionAddress];\n        } else {\n            (recipients, basisPoints) = getRoyaltyStandardInfo(\n                collectionAddress,\n                tokenId\n            );\n        }\n        return (recipients, basisPoints);\n    }\n\n    /**\n     * @notice getting royalty information from Other royalty standard.\n     * @param collectionAddress contract address\n     * @param tokenId Token Id\n     * @return recipients returns set of royalty receivers address\n     * @return basisPoints returns set of Bps to calculate Shares.\n     **/\n    function getRoyaltyStandardInfo(address collectionAddress, uint256 tokenId)\n        private\n        view\n        returns (\n            address payable[] memory recipients,\n            uint256[] memory basisPoints\n        )\n    {\n        uint256 value = 1 ether;\n        // MANIFOLD : Supports manifold interface to get Royalty Info\n        try IManifold(collectionAddress).getRoyalties(tokenId) returns (\n            address payable[] memory recipients_,\n            uint256[] memory bps\n        ) {\n            require(\n                recipients_.length == bps.length,\n                \"recipient's length should be equal to basis point length\"\n            );\n            return (recipients_, bps);\n        } catch {}\n\n        // EIP2981 AND ROYALTYSPLITTER : Supports EIP2981 and royaltysplitter interface to get Royalty Info\n        try IEIP2981(collectionAddress).royaltyInfo(tokenId, value) returns (\n            address recipient,\n            uint256 amount\n        ) {\n            require(amount < value, \"Invalid royalty amount\");\n            try IRoyaltySplitter(collectionAddress).getRecipients() returns (\n                Recipient[] memory splitRecipients\n            ) {\n                recipients = new address payable[](splitRecipients.length);\n                basisPoints = new uint256[](splitRecipients.length);\n                uint256 sum = 0;\n                uint256 splitRecipientsLength = splitRecipients.length;\n                for (uint256 i = 0; i < splitRecipientsLength; ) {\n                    Recipient memory splitRecipient = splitRecipients[i];\n                    recipients[i] = payable(splitRecipient.recipient);\n                    uint256 splitAmount = (splitRecipient.bps * amount) /\n                        10_000;\n                    sum += splitAmount;\n                    basisPoints[i] = splitRecipient.bps;\n                    unchecked {\n                        ++i;\n                    }\n                }\n                // sum can be less than amount, otherwise small-value listings can break\n                require(sum <= amount, \"Invalid split\");\n\n                return (recipients, basisPoints);\n            } catch {\n                recipients = new address payable[](1);\n                basisPoints = new uint256[](1);\n                recipients[0] = payable(recipient);\n                basisPoints[0] = (amount * 10_000) / value;\n                return (recipients, basisPoints);\n            }\n        } catch {}\n\n        // SUPERRARE : Supports superrare interface to get Royalty Info\n        if (\n            collectionAddress == SuperRareContracts.SUPERRARE_V1 ||\n            collectionAddress == SuperRareContracts.SUPERRARE_V2\n        ) {\n            try\n                ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY)\n                    .tokenCreator(collectionAddress, tokenId)\n            returns (address payable creator) {\n                try\n                    ISuperRareRegistry(SuperRareContracts.SUPERRARE_REGISTRY)\n                        .calculateRoyaltyFee(collectionAddress, tokenId, value)\n                returns (uint256 amount) {\n                    recipients = new address payable[](1);\n                    basisPoints = new uint256[](1);\n                    recipients[0] = creator;\n                    basisPoints[0] = (amount * 10_000) / value;\n                    return (recipients, basisPoints);\n                } catch {}\n            } catch {}\n        }\n        // RaribleV2 : Supports rarible v2 interface to get Royalty Info\n        try\n            IRaribleV2(collectionAddress).getRaribleV2Royalties(tokenId)\n        returns (IRaribleV2.Part[] memory royalties) {\n            recipients = new address payable[](royalties.length);\n            basisPoints = new uint256[](royalties.length);\n            for (uint256 i = 0; i < royalties.length; i++) {\n                recipients[i] = royalties[i].account;\n                basisPoints[i] = royalties[i].value;\n            }\n            require(\n                recipients.length == basisPoints.length,\n                \"Invalid royalty amount\"\n            );\n            return (recipients, basisPoints);\n        } catch {}\n\n        // RaribleV1 :Supports manifold interface to get Royalty Info\n        try IRaribleV1(collectionAddress).getFeeRecipients(tokenId) returns (\n            address payable[] memory recipients_\n        ) {\n            recipients_ = IRaribleV1(collectionAddress).getFeeRecipients(\n                tokenId\n            );\n            try IRaribleV1(collectionAddress).getFeeBps(tokenId) returns (\n                uint256[] memory bps\n            ) {\n                require(\n                    recipients_.length == bps.length,\n                    \"recipients length should be equal to bps length\"\n                );\n                return (recipients_, bps);\n            } catch {}\n        } catch {}\n\n        //FOUNDATION : Supports foundation interface to get Royalty Info\n        try IFoundation(collectionAddress).getFees(tokenId) returns (\n            address payable[] memory recipients_,\n            uint256[] memory bps\n        ) {\n            require(\n                recipients_.length == bps.length,\n                \"recipients length should be equal to bps length\"\n            );\n            return (recipients_, bps);\n        } catch {}\n\n        // ZORA : Supports Zora interface to get Royalty Info\n        try\n            IZoraOverride(collectionAddress).convertBidShares(\n                collectionAddress,\n                tokenId\n            )\n        returns (address payable[] memory recipients_, uint256[] memory bps) {\n            require(\n                recipients_.length == bps.length,\n                \"recipients length should be equal to bps length\"\n            );\n            return (recipients_, bps);\n        } catch {}\n\n        // ARTBLOCKS : Supports artblocks interface to get Royalty Info\n        try\n            IArtBlocksOverride(collectionAddress).getRoyalties(\n                collectionAddress,\n                tokenId\n            )\n        returns (address payable[] memory recipients_, uint256[] memory bps) {\n            require(\n                recipients_.length == bps.length,\n                \"recipients length should be equal to bps length\"\n            );\n            return (recipients_, bps);\n        } catch {}\n\n        // KNOWNORGIN : Supports knownorgin interface to get Royalty Info\n        try\n            IKODAV2Override(collectionAddress).getKODAV2RoyaltyInfo(\n                collectionAddress,\n                tokenId,\n                value\n            )\n        returns (\n            address payable[] memory _recipients,\n            uint256[] memory _amounts\n        ) {\n            require(\n                _recipients.length == _amounts.length,\n                \"recipients length should be equal to bps length\"\n            );\n            uint256 totalAmount;\n            recipients = new address payable[](_recipients.length);\n            basisPoints = new uint256[](_recipients.length);\n            for (uint256 i; i < _recipients.length; i++) {\n                recipients[i] = payable(_recipients[i]);\n                basisPoints[i] = (_amounts[i] * 10_000) / value;\n                totalAmount += _amounts[i];\n            }\n            require(totalAmount < value, \"Invalid royalty amount\");\n            return (recipients, basisPoints);\n        } catch {}\n\n        return (recipients, basisPoints);\n    }\n\n    /**\n     * @notice Compute royalty Shares\n     * @param collectionAddress contract address\n     * @param tokenId Token Id\n     * @param amount amount involved to compute the Shares.\n     * @return receivers returns set of royalty receivers address\n     * @return basisPoints returns set of Bps.\n     * @return feeAmount returns set of Shares.\n     **/\n    function getRoyaltySplitshare(\n        address collectionAddress,\n        uint256 tokenId,\n        uint256 amount\n    )\n        external\n        view\n        override\n        returns (\n            address payable[] memory receivers,\n            uint256[] memory basisPoints,\n            uint256[] memory feeAmount\n        )\n    {\n        if (tokenRoyaltyReceivers[collectionAddress][tokenId].length > 0) {\n            receivers = tokenRoyaltyReceivers[collectionAddress][tokenId];\n            basisPoints = tokenRoyaltyBPS[collectionAddress][tokenId];\n            for (uint256 i = 0; i < receivers.length; i++) {\n                feeAmount[i] = (basisPoints[i] * amount) / 10_000;\n            }\n        } else if (collectionRoyaltyReceivers[collectionAddress].length > 0) {\n            receivers = collectionRoyaltyReceivers[collectionAddress];\n            basisPoints = collectionRoyaltyBPS[collectionAddress];\n            for (uint256 i = 0; i < receivers.length; i++) {\n                feeAmount[i] = (basisPoints[i] * amount) / 10_000;\n            }\n        }\n        return (receivers, basisPoints, feeAmount);\n    }\n\n    /**\n     * @notice checks the admin role of caller\n     * @param collectionAddress contract address\n     * @param collectionAdmin admin address of the collection.\n     * @param isAdmin address is admin or not\n     **/\n    function _isCollectionAdmin(\n        address collectionAddress,\n        address collectionAdmin\n    ) internal view returns (bool isAdmin) {\n        if (\n            ERC165Checker.supportsInterface(\n                collectionAddress,\n                type(IAdminControl).interfaceId\n            ) && IAdminControl(collectionAddress).isAdmin(collectionAdmin)\n        ) {\n            return true;\n        }\n    }\n\n    /**\n     * @notice checks the Owner role of caller\n     * @param collectionAddress contract address\n     * @param collectionAdmin admin address of the collection.\n     * @param isOwner address is owner or not\n     **/\n    function _isCollectionOwner(\n        address collectionAddress,\n        address collectionAdmin\n    ) internal view returns (bool isOwner) {\n        try OwnableUpgradeable(collectionAddress).owner() returns (\n            address owner\n        ) {\n            if (owner == collectionAdmin) return true;\n        } catch {}\n\n        try\n            IAccessControlUpgradeable(collectionAddress).hasRole(\n                0x00,\n                collectionAdmin\n            )\n        returns (bool hasRole) {\n            if (hasRole) return true;\n        } catch {}\n\n        // Nifty Gateway overrides\n        try\n            INiftyBuilderInstance(collectionAddress).niftyRegistryContract()\n        returns (address niftyRegistry) {\n            try\n                INiftyRegistry(niftyRegistry).isValidNiftySender(\n                    collectionAdmin\n                )\n            returns (bool valid) {\n                return valid;\n            } catch {}\n        } catch {}\n\n        // Foundation overrides\n        try\n            IFoundationTreasuryNode(collectionAddress).getFoundationTreasury()\n        returns (address payable foundationTreasury) {\n            try\n                IFoundationTreasury(foundationTreasury).isAdmin(collectionAdmin)\n            returns (bool) {\n                return isOwner;\n            } catch {}\n        } catch {}\n\n        // Superrare & OpenSea & Rarible overrides\n        // Tokens already support Ownable overrides\n\n        return false;\n    }\n\n    /**\n     * @notice Adds Collection address as blacklist\n     * @param commonAddress  the Address to be blacklisted\n     **/\n    function blacklistAddress(address commonAddress)\n        external\n        override\n        adminRequired\n    {\n        if (\n            Address.isContract(commonAddress)\n        ) {\n            if (!blacklistedCollectionAddress.contains(commonAddress)) {\n                blacklistedCollectionAddress.add(commonAddress);\n            }\n        } else {\n            if (!blacklistedWalletAddress.contains(commonAddress)) {\n                blacklistedWalletAddress.add(commonAddress);\n            }\n        }\n        emit AddedBlacklistedAddress(commonAddress, msg.sender);\n    }\n\n    /**\n     * @notice revoke the blacklistedAddress\n     * @param commonAddress address info\n     **/\n    function revokeBlacklistedAddress(address commonAddress)\n        external\n        override\n        adminRequired\n    {\n        if (blacklistedCollectionAddress.contains(commonAddress)) {\n            emit RevokedBlacklistedAddress(commonAddress, msg.sender);\n            blacklistedCollectionAddress.remove(commonAddress);\n        } else if (blacklistedWalletAddress.contains(commonAddress)) {\n            emit RevokedBlacklistedAddress(commonAddress, msg.sender);\n            blacklistedWalletAddress.remove(commonAddress);\n        }\n    }\n\n    /**\n     * @notice checks the blacklistedAddress\n     * @param commonAddress address info\n     **/\n    function isBlacklistedAddress(address commonAddress)\n        external\n        view\n        returns (bool)\n    {\n        return (blacklistedCollectionAddress.contains(commonAddress) ||\n            blacklistedWalletAddress.contains(commonAddress));\n    }\n\n    /// @notice Withdraw the funds to owner\n    function withdraw() external adminRequired {\n        bool success;\n        address payable to = payable(msg.sender);\n        (success, ) = to.call{value: address(this).balance}(new bytes(0));\n        require(success, \"withdraw failed\");\n        emit WithdrawPayout(to, address(this).balance);\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}"
    },
    "contracts/manifold/libraries-solidity/access/AdminControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"../../../openzeppelin/utils/structs/EnumerableSet.sol\";\nimport \"../../../openzeppelin/utils/introspection/ERC165.sol\";\nimport \"../../../openzeppelin-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./IAdminControl.sol\";\n\nabstract contract AdminControlUpgradeable is\n    OwnableUpgradeable,\n    IAdminControl,\n    ERC165\n{\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // Track registered admins\n    EnumerableSet.AddressSet private _admins;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAdminControl).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Only allows approved admins to call the specified function\n     */\n    modifier adminRequired() {\n        require(\n            owner() == msg.sender || _admins.contains(msg.sender),\n            \"AdminControl: Must be owner or admin\"\n        );\n        _;\n    }\n\n    /**\n     * @dev See {IAdminControl-getAdmins}.\n     */\n    function getAdmins()\n        external\n        view\n        override\n        returns (address[] memory admins)\n    {\n        admins = new address[](_admins.length());\n        for (uint256 i = 0; i < _admins.length(); i++) {\n            admins[i] = _admins.at(i);\n        }\n        return admins;\n    }\n\n    /**\n     * @dev See {IAdminControl-approveAdmin}.\n     */\n    function approveAdmin(address admin) external override onlyOwner {\n        if (!_admins.contains(admin)) {\n            emit AdminApproved(admin, msg.sender);\n            _admins.add(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-revokeAdmin}.\n     */\n    function revokeAdmin(address admin) external override onlyOwner {\n        if (_admins.contains(admin)) {\n            emit AdminRevoked(admin, msg.sender);\n            _admins.remove(admin);\n        }\n    }\n\n    /**\n     * @dev See {IAdminControl-isAdmin}.\n     */\n    function isAdmin(address admin) public view override returns (bool) {\n        return (owner() == admin || _admins.contains(admin));\n    }\n}\n"
    },
    "contracts/openzeppelin-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/openzeppelin/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/manifold/libraries-solidity/access/IAdminControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"../../../openzeppelin/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for admin control\n */\ninterface IAdminControl is IERC165 {\n    event AdminApproved(address indexed account, address indexed sender);\n    event AdminRevoked(address indexed account, address indexed sender);\n\n    /**\n     * @dev gets address of all admins\n     */\n    function getAdmins() external view returns (address[] memory);\n\n    /**\n     * @dev add an admin.  Can only be called by contract owner.\n     */\n    function approveAdmin(address admin) external;\n\n    /**\n     * @dev remove an admin.  Can only be called by contract owner.\n     */\n    function revokeAdmin(address admin) external;\n\n    /**\n     * @dev checks whether or not given address is an admin\n     * Returns True if they are\n     */\n    function isAdmin(address admin) external view returns (bool);\n}\n"
    },
    "contracts/openzeppelin/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/manifold/royalty-registry/specs/INiftyGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Nifty builder instance\n */\ninterface INiftyBuilderInstance {\n   function niftyRegistryContract() external view returns (address);\n}\n\n/**\n * @dev Nifty registry\n */\ninterface INiftyRegistry {\n    /**\n     * @dev function to see if sending key is valid\n     */\n    function isValidNiftySender(address sending_key) external view returns (bool);\n}"
    },
    "contracts/manifold/royalty-registry/specs/IFoundation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IFoundation {\n    /*\n     *  bytes4(keccak256('getFees(uint256)')) == 0xd5a06d4c\n     *\n     *  => 0xd5a06d4c = 0xd5a06d4c\n     */\n    function getFees(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n}\n\ninterface IFoundationTreasuryNode {\n    function getFoundationTreasury() external view returns (address payable);\n}\n\ninterface IFoundationTreasury {\n    function isAdmin(address account) external view returns (bool);\n}"
    },
    "contracts/manifold/royalty-registry/libraries/SuperRareContracts.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SuperRareContracts {\n    address public constant SUPERRARE_REGISTRY = 0x17B0C8564E53f22364A6C8de6F7ca5CE9BEa4e5D;\n    address public constant SUPERRARE_V1 = 0x41A322b28D0fF354040e2CbC676F0320d8c8850d;\n    address public constant SUPERRARE_V2 = 0xb932a70A57673d89f4acfFBE830E8ed7f75Fb9e0;\n\n}"
    },
    "contracts/manifold/royalty-registry/specs/IManifold.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\n/**\n * @dev Royalty interface for creator core classes\n */\ninterface IManifold {\n\n    /**\n     * @dev Get royalites of a token.  Returns list of receivers and basisPoints\n     *\n     *  bytes4(keccak256('getRoyalties(uint256)')) == 0xbb3bafd6\n     *\n     *  => 0xbb3bafd6 = 0xbb3bafd6\n     */\n    function getRoyalties(uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n}"
    },
    "contracts/manifold/royalty-registry/specs/IRarible.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IRaribleV1 {\n    /*\n     * bytes4(keccak256('getFeeBps(uint256)')) == 0x0ebd4c7f\n     * bytes4(keccak256('getFeeRecipients(uint256)')) == 0xb9c4d9fb\n     *\n     * => 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\n     */\n    function getFeeBps(uint256 id) external view returns (uint[] memory);\n    function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\n}\n\n\ninterface IRaribleV2 {\n    /*\n     *  bytes4(keccak256('getRaribleV2Royalties(uint256)')) == 0xcad96cca\n     */\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n    function getRaribleV2Royalties(uint256 id) external view returns (Part[] memory);\n}"
    },
    "contracts/manifold/royalty-registry/specs/ISuperRare.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface ISuperRareRegistry {\n    /**\n     * @dev Get the royalty fee percentage for a specific ERC721 contract.\n     * @param _contractAddress address ERC721Contract address.\n     * @param _tokenId uint256 token ID.\n     * @return uint8 wei royalty fee.\n     */\n    function getERC721TokenRoyaltyPercentage(\n        address _contractAddress,\n        uint256 _tokenId\n    ) external view returns (uint8);\n\n    /**\n     * @dev Utililty function to calculate the royalty fee for a token.\n     * @param _contractAddress address ERC721Contract address.\n     * @param _tokenId uint256 token ID.\n     * @param _amount uint256 wei amount.\n     * @return uint256 wei fee.\n     */\n    function calculateRoyaltyFee(\n        address _contractAddress,\n        uint256 _tokenId,\n        uint256 _amount\n    ) external view returns (uint256);\n\n    /**\n     * @dev Get the token creator which will receive royalties of the given token\n     * @param _contractAddress address ERC721Contract address.\n     * @param _tokenId uint256 token ID.\n     */\n    function tokenCreator(address _contractAddress, uint256 _tokenId)\n        external\n        view\n        returns (address payable);\n}\n\n"
    },
    "contracts/manifold/royalty-registry/specs/IEIP2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * EIP-2981\n */\ninterface IEIP2981 {\n    /**\n     * bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n     *\n     * => 0x2a55205a = 0x2a55205a\n     */\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\n}"
    },
    "contracts/manifold/royalty-registry/specs/IZoraOverride.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * Paired down version of the Zora Market interface\n */\ninterface IZoraMarket {\n    struct ZoraDecimal {\n        uint256 value;\n    }\n\n    struct ZoraBidShares {\n        // % of sale value that goes to the _previous_ owner of the nft\n        ZoraDecimal prevOwner;\n        // % of sale value that goes to the original creator of the nft\n        ZoraDecimal creator;\n        // % of sale value that goes to the seller (current owner) of the nft\n        ZoraDecimal owner;\n    }\n\n    function bidSharesForToken(uint256 tokenId) external view returns (ZoraBidShares memory);\n}\n\n/**\n * Paired down version of the Zora Media interface\n */\ninterface IZoraMedia {\n\n    /**\n     * Auto-generated accessors of public variables\n     */\n    function marketContract() external view returns(address);\n    function previousTokenOwners(uint256 tokenId) external view returns(address);\n    function tokenCreators(uint256 tokenId) external view returns(address);\n\n    /**\n     * ERC721 function\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n}\n\n/**\n * Interface for a Zora media override\n */\ninterface IZoraOverride {\n\n    /**\n     * @dev Convert bid share configuration of a Zora Media token into an array of receivers and bps values\n     *      Does not support prevOwner and sell-on amounts as that is specific to Zora marketplace implementation\n     *      and requires updates on the Zora Media and Marketplace to update the sell-on amounts/previous owner values.\n     *      An off-Zora marketplace sale will break the sell-on functionality.\n     */\n    function convertBidShares(address media, uint256 tokenId) external view returns (address payable[] memory, uint256[] memory);\n\n}\n"
    },
    "contracts/manifold/royalty-registry/specs/IArtBlocksOverride.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n *  Interface for an Art Blocks override\n */\ninterface IArtBlocksOverride {\n    /**\n     * @dev Get royalites of a token at a given tokenAddress.\n     *      Returns array of receivers and basisPoints.\n     *\n     *  bytes4(keccak256('getRoyalties(address,uint256)')) == 0x9ca7dc7a\n     *\n     *  => 0x9ca7dc7a = 0x9ca7dc7a\n     */\n    function getRoyalties(address tokenAddress, uint256 tokenId)\n        external\n        view\n        returns (address payable[] memory, uint256[] memory);\n}\n"
    },
    "contracts/manifold/royalty-registry/specs/IKODAV2Override.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @author: knownorigin.io\n\npragma solidity ^0.8.0;\n\ninterface IKODAV2 {\n    function editionOfTokenId(uint256 _tokenId) external view returns (uint256 _editionNumber);\n\n    function artistCommission(uint256 _editionNumber)\n        external\n        view\n        returns (address _artistAccount, uint256 _artistCommission);\n\n    function editionOptionalCommission(uint256 _editionNumber)\n        external\n        view\n        returns (uint256 _rate, address _recipient);\n}\n\ninterface IKODAV2Override {\n    /// @notice Emitted when the royalties fee changes\n    event CreatorRoyaltiesFeeUpdated(uint256 _oldCreatorRoyaltiesFee, uint256 _newCreatorRoyaltiesFee);\n\n    /// @notice For the given KO NFT and token ID, return the addresses and the amounts to pay\n    function getKODAV2RoyaltyInfo(address _tokenAddress, uint256 _id, uint256 _amount)\n        external\n        view\n        returns (address payable[] memory, uint256[] memory);\n\n    /// @notice Allows the owner() to update the creator royalties\n    function updateCreatorRoyalties(uint256 _creatorRoyaltiesFee) external;\n}\n"
    },
    "contracts/manifold/royalty-registry/overrides/IRoyaltySplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @author: manifold.xyz\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nstruct Recipient {\n    address payable recipient;\n    uint16 bps;\n}\n\ninterface IRoyaltySplitter is IERC165 {\n    /**\n     * @dev Set the splitter recipients. Total bps must total 10000.\n     */\n    function setRecipients(Recipient[] calldata recipients) external;\n\n    /**\n     * @dev Get the splitter recipients;\n     */\n    function getRecipients() external view returns (Recipient[] memory);\n}\n"
    },
    "contracts/mojito/interfaces/IRoyaltyEngine.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\n/**\n * @title Interface for RoyaltyEngine\n */\ninterface IRoyaltyEngine {\n    /**\n     * @notice Emits when an collection level Royalty is configured\n     * @param collectionAddress contract address \n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    event RoyaltiesUpdated(\n        address indexed collectionAddress,\n        address payable[] receivers,\n        uint256[] basisPoints\n    );\n\n    /**\n     * @notice Emits when an Token level Royalty is configured\n     * @param collectionAddress contract address \n     * @param tokenId Token Id \n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    event TokenRoyaltiesUpdated(\n        address collectionAddress,\n        uint256 indexed tokenId,\n        address payable[] receivers,\n        uint256[] basisPoints\n    );\n    \n    /**\n     * @notice Emits when address is added into Black List.\n     * @param account BlackListed NFT contract address or wallet address\n     * @param sender caller address\n    **/\n    event AddedBlacklistedAddress(\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @notice Eits when address is removed from Black List.\n     * @param account BlackListed NFT contract address or wallet address\n     * @param sender caller address\n    **/\n    event RevokedBlacklistedAddress(\n        address indexed account,\n        address indexed sender\n    );\n    \n    /**\n     * @notice Setting royalty for NFT Collection.\n     * @param collectionAddress NFT contract address \n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    function setRoyalty(\n        address collectionAddress,\n        address payable[] calldata receivers,\n        uint256[] calldata basisPoints\n    ) external;\n    \n    /**\n     * @notice Setting royalty for token.\n     * @param collectionAddress contract address \n     * @param tokenId Token Id \n     * @param receivers set of royalty receivers\n     * @param basisPoints set of royalty Bps\n     */\n    function setTokenRoyalty(\n        address collectionAddress,\n        uint256 tokenId,\n        address payable[] calldata receivers,\n        uint256[] calldata basisPoints\n    ) external;\n\n    /**\n     * @notice getting royalty information from Other royalty standard.\n     * @param collectionAddress contract address \n     * @param tokenId Token Id \n     * @return receivers returns set of royalty receivers address\n     * @return basisPoints returns set of Bps to calculate Shares.\n    **/\n    function getRoyalty(address collectionAddress, uint256 tokenId)\n        external\n\tview\n        returns (address payable[] memory receivers, uint256[] memory basisPoints);\n    \n    /**\n     * @notice Compute royalty Shares\n     * @param collectionAddress contract address \n     * @param tokenId Token Id \n     * @param amount amount involved to compute the Shares. \n     * @return receivers returns set of royalty receivers address\n     * @return basisPoints returns set of Bps.\n     * @return feeAmount returns set of Shares.\n    **/\n    function getRoyaltySplitshare(\n        address collectionAddress,\n        uint256 tokenId,\n        uint256 amount\n    )\n        external\n\tview\n        returns (\n            address payable[] memory receivers,\n            uint256[] memory basisPoints,\n            uint256[] memory feeAmount\n        );\n    \n    /**\n     * @notice Adds address as blacklist\n     * @param commonAddress user wallet address \n    **/\n    function blacklistAddress(address commonAddress) external;\n\n    /**\n     * @notice revoke the blacklistedAddress\n     * @param commonAddress address info\n    **/\n    function revokeBlacklistedAddress(address commonAddress) external;\n        \n    /**\n     * @notice checks the blacklistedAddress\n     * @param commonAddress address info\n    **/\n    function isBlacklistedAddress(address commonAddress)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/openzeppelin/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/openzeppelin/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/openzeppelin-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/openzeppelin/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/openzeppelin-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/openzeppelin-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}