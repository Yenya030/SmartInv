{{
  "language": "Solidity",
  "sources": {
    "TickrStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"Context.sol\";\nimport \"Ownable.sol\";\nimport \"IERC20.sol\";\nimport \"SafeERC20.sol\";\n\nimport \"ReentrancyGuard.sol\";\nimport \"IUniswapV2Router02.sol\";\nimport \"ITickr.sol\";\n\ncontract TickrStaking is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    //store data of each user in UserInfo\n    struct UserInfo {\n        uint16 lockTimeBoost; //time lock multiplier - max x3\n        uint32 lockedUntil; //lock end in UNIX seconds, used to compute the lockTimeBoost\n        uint96 claimableETH; //amount of eth ready to be claimed\n        uint112 amount; //amount of staked tokens\n        uint112 weightedBalance; //amount of staked tokens * multiplier\n        uint256 withdrawn; //sum of withdrawn ETH\n        uint112 ETHRewardDebt; //ETH debt for each staking session. Session resets upon withdrawal\n    }\n    // store data of each pool\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint64 allocPoint; // How many allocation points assigned to this pool.\n        uint64 lastRewardBlock; // Last reward block.\n        uint112 accETHPerShare; // Accumulated ETH rewards\n        uint112 weightedBalance; // weightedBalances from all users.\n    }\n\n\n    uint256 constant ONE_DAY = 86400; //total seconds in one day\n    ITickr public Tickr; // The Tickr token\n    address public router; // The uniswap V2 router\n    address public WETH; // The WETH token contract\n    address public TaxDistributor; // address of taxDistributor. Just in case TD transfers the ETH without arbitrary data\n    uint256 public ETHPerBlock; // amount of ETH per block\n    uint256 public ETHLeftUnshared; // amount of ETH that is not distributed to stakers\n    uint256 public ETHLeftUnclaimed; // amount of ETH that is distributed but unclaimed\n    uint256 public numDays; // number of days used to calculate rewards. Feed the staking contract with ETH within numDays days\n    uint256 public blocksPerDay = 7200; //total blocks in one day\n\n    PoolInfo[] public poolInfo; // pool info storage\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // userinfo storage\n\n\n    uint256 public totalAllocPoint; // total allocation points\n    uint256 public startBlock; // starting block\n    bool public isEmergency; //if Emergency users can withdraw their tokens without caring about the locks and rewards\n\n\n    //events\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 lockTime);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n    event UpdateEmissionRate(address indexed user, uint256 tickrRWTokenPerBlock);\n    event TokensLocked(\n        address indexed user,\n        uint256 timestamp,\n        uint256 lockTime\n    );\n    event Emergency(uint256 timestamp, bool ifEmergency);\n\n    mapping(IERC20 => bool) public poolExistence;\n    modifier nonDuplicated(IERC20 _lpToken) {\n        require(poolExistence[_lpToken] == false, \"nonDuplicated: LP Token already added\");\n        _;\n    }\n\n    modifier onlyEmergency() {\n        require(isEmergency == true, \"onlyEmergency: Emergency use only!\");\n        _;\n    }\n    mapping(address => bool) public authorized;\n    modifier onlyAuthorized() {\n        require(authorized[msg.sender] == true, \"onlyAuthorized: address not authorized\");\n        _;\n    }\n\n    constructor(ITickr _tickr, address _router) {\n        Tickr = _tickr;\n        router = _router;\n        WETH = IUniswapV2Router02(router).WETH();\n        startBlock = type(uint256).max;\n        Tickr.approve(router, Tickr.totalSupply());\n        //approve staking-router\n        numDays = 8;\n    }\n\n    /**\n    * poolLength\n    * Returns total number of pools\n    */\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /**\n    * getMultiplier\n    * Return reward multiplier over the given _from to _to block.\n    */\n    function getMultiplier(uint256 _from, uint256 _to)\n    public\n    pure\n    returns (uint256)\n    {\n        return (_to - _from);\n    }\n\n    /**\n    * pendingRewards\n    * Calculate pending rewards\n    */\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256)\n    {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 userWeightedAmount = user.weightedBalance;\n        uint256 accETHPerShare = pool.accETHPerShare;\n        uint256 weightedBalance = pool.weightedBalance;\n        uint256 PendingETH;\n        if (block.number > pool.lastRewardBlock && weightedBalance != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 ETHReward = multiplier * ETHPerBlock * pool.allocPoint / totalAllocPoint;\n            accETHPerShare = accETHPerShare + ETHReward * 1e12 / weightedBalance;\n            PendingETH = (userWeightedAmount * accETHPerShare / 1e12) - user.ETHRewardDebt + user.claimableETH;\n        }\n        return (PendingETH);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    //Receive ETH from the tax splitter contract. triggered on a value transfer with .call(\"arbitraryData\").\n    fallback() external payable {\n        ETHLeftUnshared += msg.value;\n        updateETHRewards();\n    }\n\n    //Receive ETH sent through .send, .transfer, or .call(\"\"). These wont be taken into account in the rewards.\n    receive() external payable {\n        require(msg.sender != TaxDistributor);\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.weightedBalance;\n        if (lpSupply == 0 || pool.allocPoint == 0) {\n            pool.lastRewardBlock = uint64(block.number);\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n\n        uint256 ETHReward = multiplier * ETHPerBlock * pool.allocPoint / totalAllocPoint;\n\n        ETHLeftUnclaimed = ETHLeftUnclaimed + ETHReward;\n        ETHLeftUnshared = ETHLeftUnshared - ETHReward;\n        pool.accETHPerShare = uint112(pool.accETHPerShare + ETHReward * 1e12 / lpSupply);\n        pool.lastRewardBlock = uint64(block.number);\n    }\n\n    // Deposit tokens for rewards.\n    function deposit(uint256 _pid, uint256 _amount, uint256 lockTime) public nonReentrant {\n        _deposit(msg.sender, _pid, _amount, lockTime);\n    }\n\n    // Withdraw unlocked tokens.\n    function withdraw(uint32 _pid, uint256 _amount) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.lockedUntil < block.timestamp, \"withdraw: Tokens locked, if you're trying to claim your rewards use the deposit function\");\n        require(user.amount >= _amount && _amount > 0, \"withdraw: not good\");\n        updatePool(_pid);\n        if (user.weightedBalance > 0) {\n            _addToClaimable(_pid, msg.sender);\n            if (user.claimableETH > 0) {\n                safeETHTransfer(msg.sender, user.claimableETH);\n                user.withdrawn += user.claimableETH;\n                user.claimableETH = 0;\n            }\n        }\n        user.amount = uint112(user.amount - _amount);\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        updateUserWeightedBalance(_pid, msg.sender);\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw unlocked tokens without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant onlyEmergency {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 amount = user.amount;\n        pool.weightedBalance -= user.weightedBalance;\n        user.amount = 0;\n        user.weightedBalance = 0;\n        user.ETHRewardDebt = 0;\n        user.claimableETH = 0;\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /**\n    * addLiquidityNoFeeAndStake\n    * take $TICKR and ETH and add it to liquidity. Return unspent ETH.\n    */\n    function addLiquidityNoFeeAndStake(uint256 amountTokensIn, uint256 amountETHMin, uint256 amountTokenMin, uint256 lockTime) public payable nonReentrant {\n        ITickr.LiquidityETHParams memory params;\n        UserInfo storage user = userInfo[0][msg.sender];\n        require(msg.value > 0);\n        require((lockTime >= 0 && lockTime <= 90 * ONE_DAY && user.lockedUntil <= lockTime + block.timestamp), \"addLiquidityNoFeeAndStake : Lock out of range\");\n        updatePool(0);\n        if (user.weightedBalance > 0) {\n            _addToClaimable(0, msg.sender);\n        }\n        Tickr.transferFrom(msg.sender, address(this), amountTokensIn);\n        params.pair = address(poolInfo[0].lpToken);\n        params.to = address(this);\n        params.amountTokenMin = amountTokenMin;\n        params.amountETHMin = amountETHMin;\n        params.amountTokenOrLP = amountTokensIn;\n        params.deadline = block.timestamp;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\n\n        (, uint256 ETHUsed, uint256 numLiquidityAdded) = _uniswapV2Router.addLiquidityETH{value : msg.value}(\n            address(Tickr),\n            params.amountTokenOrLP,\n            params.amountTokenMin,\n            params.amountETHMin,\n            params.to,\n            block.timestamp\n        );\n\n        payable(msg.sender).transfer(msg.value - ETHUsed);\n        user.amount += uint112(numLiquidityAdded);\n        if (lockTime > 0) {\n            lockTokens(msg.sender, 0, lockTime);\n        } else {\n            updateUserWeightedBalance(0, msg.sender);\n        }\n        emit Deposit(msg.sender, 0, numLiquidityAdded, lockTime);\n    }\n\n    // Reinvest users rewards. Only works for token staking\n    function reinvestETHRewards(uint256 amountOutMin) public nonReentrant {\n        UserInfo storage user = userInfo[1][msg.sender];\n        updatePool(1);\n        uint256 ETHPending = (user.weightedBalance * poolInfo[1].accETHPerShare / 1e12) - user.ETHRewardDebt + user.claimableETH;\n        require(ETHPending > 0);\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = address(Tickr);\n        if (ETHPending > ETHLeftUnclaimed) {\n            ETHPending = ETHLeftUnclaimed;\n        }\n        uint256 balanceBefore = Tickr.balanceOf(address(this));\n        IUniswapV2Router02(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value: ETHPending}(\n            amountOutMin,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountSwapped = Tickr.balanceOf(address(this)) - balanceBefore;\n        user.amount += uint112(amountSwapped);\n        user.claimableETH = 0;\n        user.withdrawn += ETHPending;\n        updateUserWeightedBalance(1, msg.sender);\n        emit Deposit(msg.sender, 1, amountSwapped, 0);\n    }\n\n    function addToClaimable(uint256 _pid, address sender) public nonReentrant {\n        require(userInfo[_pid][sender].weightedBalance > 0);\n        updatePool(_pid);\n        _addToClaimable(_pid, sender);\n    }\n\n    function depositFor(address sender, uint256 _pid, uint256 amount, uint256 lockTime) public onlyAuthorized {\n        _deposit(sender, _pid, amount, lockTime);\n    }\n\n    //add new pool. LP staking should be 0, token staking 1\n    function add(uint64 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint64 lastRewardBlock = uint64(block.number > startBlock ? block.number : startBlock);\n        totalAllocPoint = totalAllocPoint + _allocPoint;\n        poolExistence[_lpToken] = true;\n        poolInfo.push(\n            PoolInfo({\n        lpToken : _lpToken,\n        allocPoint : _allocPoint,\n        lastRewardBlock : lastRewardBlock,\n        accETHPerShare : 0,\n        weightedBalance : 0\n        }));\n    }\n\n\n    // change taxDistributor address\n    function setTaxDistributor(address _TaxDistributor) public onlyOwner {\n        TaxDistributor = _TaxDistributor;\n    }\n\n    // change router address\n    function setRouter(address _router) public onlyOwner {\n        router = _router;\n    }\n\n    // transfer non-TICKR tokens that were sent to staking contract by accident\n    function rescueToken(address tokenAddress) public onlyOwner {\n        require(!poolExistence[IERC20(tokenAddress)], \"rescueToken : wrong token address\");\n        uint256 bal = IERC20(tokenAddress).balanceOf(address(this));\n        IERC20(tokenAddress).transfer(msg.sender, bal);\n    }\n\n    // update pool allocation points\n    function set(uint256 _pid, uint64 _allocPoint, bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    // start rewards\n    function startRewards() public onlyOwner {\n        require(startBlock > block.number, \"startRewards: rewards already started\");\n        startBlock = block.number;\n        for (uint256 i; i < poolInfo.length; i++) {\n            poolInfo[i].lastRewardBlock = uint64(block.number);\n        }\n    }\n\n    // check if emergency mode is enabled\n    function emergency(bool _isEmergency) public onlyOwner {\n        isEmergency = _isEmergency;\n        emit Emergency(block.timestamp, _isEmergency);\n    }\n\n    // authorize the address\n    function authorize(address _address) public onlyOwner {\n        authorized[_address] = true;\n    }\n\n    // unauthorize the address\n    function unauthorize(address _address) public onlyOwner {\n        authorized[_address] = false;\n    }\n\n    // set new interval for rewards\n    function setNumDays(uint256 _days) public onlyOwner {\n        require(_days > 0 && _days < 14);\n        numDays = _days;\n    }\n\n    // set new blocks for a day\n    function setBlocksPerDay(uint256 _blocks) public onlyOwner {\n        blocksPerDay = _blocks;\n    }\n\n    // deposit tokens to pool >1\n    // if lockTime set lock the tokens\n    function _deposit(address sender, uint256 _pid, uint256 _amount, uint256 lockTime) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][sender];\n        updatePool(_pid);\n        if (user.weightedBalance > 0) {\n            if (_amount == 0 && lockTime == 0) {\n                uint256 ETHPending = (user.weightedBalance * pool.accETHPerShare / 1e12) - user.ETHRewardDebt + user.claimableETH;\n                if (ETHPending > 0) {\n                    safeETHTransfer(sender, ETHPending);\n                    user.withdrawn += ETHPending;\n                    user.ETHRewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\n                }\n                user.claimableETH = 0;\n            } else {\n                _addToClaimable(_pid, sender);\n            }\n        }\n        if (_amount > 0) {\n            require(\n                (lockTime >= 0 && lockTime <= 90 * ONE_DAY && user.lockedUntil <= lockTime + block.timestamp),\n                \"deposit : Lock out of range or previously locked tokens are locked longer than new desired lock\"\n            );\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = uint112(user.amount + _amount);\n            if (lockTime == 0) {\n                updateUserWeightedBalance(_pid, sender);\n            }\n        }\n\n        if (lockTime > 0) {\n            lockTokens(sender, _pid, lockTime);\n        }\n        if (user.lockedUntil < block.timestamp) {\n            updateUserWeightedBalance(_pid, sender);\n        }\n        emit Deposit(sender, _pid, _amount, lockTime);\n    }\n\n    //Lock tokens up to 90 days for rewards boost, (max rewards = x3, rewards increase linearly with lock time)\n    function lockTokens(address sender, uint256 _pid, uint256 lockTime) internal {\n        UserInfo storage user = userInfo[_pid][sender];\n        require(user.amount > 0, \"lockTokens: No tokens to lock\");\n        require(user.lockedUntil <= block.timestamp + lockTime, \"lockTokens: Tokens already locked\");\n        require(lockTime >= ONE_DAY, \"lockTokens: Lock time too short\");\n        require(lockTime <= 90 * ONE_DAY, \"lockTokens: Lock time too long\");\n        user.lockedUntil = uint32(block.timestamp + lockTime);\n        user.lockTimeBoost = uint16((2 * 1000 * lockTime) / (90 * ONE_DAY));\n        // 0 - 2000\n        updateUserWeightedBalance(_pid, sender);\n        emit TokensLocked(sender, block.timestamp, lockTime);\n    }\n\n    // calculate and update the user weighted balance\n    function updateUserWeightedBalance(uint256 _pid, address _user) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 poolBalance = pool.weightedBalance - user.weightedBalance;\n        if (user.lockedUntil < block.timestamp) {\n            user.lockTimeBoost = 0;\n        }\n\n        user.weightedBalance = (user.amount * (1000 + user.lockTimeBoost) / 1000);\n\n        pool.weightedBalance = uint112(poolBalance + user.weightedBalance);\n        user.ETHRewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\n    }\n\n    function updateETHRewards() internal {\n        massUpdatePools();\n        ETHPerBlock = ETHLeftUnshared / (blocksPerDay * numDays);\n    }\n\n    function _addToClaimable(uint256 _pid, address sender) internal {\n        UserInfo storage user = userInfo[_pid][sender];\n        PoolInfo storage pool = poolInfo[_pid];\n\n        uint256 ETHPending = (user.weightedBalance * pool.accETHPerShare / 1e12) - user.ETHRewardDebt;\n        if (ETHPending > 0) {\n            user.claimableETH += uint96(ETHPending);\n            user.ETHRewardDebt = user.weightedBalance * pool.accETHPerShare / 1e12;\n        }\n    }\n\n    function safeETHTransfer(address _to, uint256 _amount) internal {\n        if (_amount > ETHLeftUnclaimed) {\n            _amount = ETHLeftUnclaimed;\n        }\n        payable(_to).transfer(_amount);\n        ETHLeftUnclaimed -= _amount;\n    }\n}"
    },
    "Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"IERC20.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// ReentrancyGuard (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
    },
    "IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\npragma experimental ABIEncoderV2;\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}"
    },
    "ITickr.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"IERC20.sol\";\n\ninterface ITickr is IERC20 {\n    struct LiquidityETHParams {\n        address pair;\n        address to;\n        uint256 amountTokenOrLP;\n        uint256 amountTokenMin;\n        uint256 amountETHMin;\n        uint256 deadline;\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "libraries": {
      "TickrStaking.sol": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}