{{
  "language": "Solidity",
  "sources": {
    "contracts/esLBRBoost.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Ownable.sol\";\r\n\r\ncontract esLBRBoost is Ownable {\r\n    esLBRLockSetting[] public esLBRLockSettings;\r\n    mapping(address => LockStatus) public userLockStatus;\r\n\r\n    // Define a struct for the lock settings\r\n    struct esLBRLockSetting {\r\n        uint256 duration;\r\n        uint256 miningBoost;\r\n    }\r\n\r\n    // Define a struct for the user's lock status\r\n    struct LockStatus {\r\n        uint256 unlockTime;\r\n        uint256 duration;\r\n        uint256 miningBoost;\r\n    }\r\n\r\n    // Constructor to initialize the default lock settings\r\n    constructor(\r\n    ) {\r\n        esLBRLockSettings.push(esLBRLockSetting(30 days, 20 * 1e18));\r\n        esLBRLockSettings.push(esLBRLockSetting(90 days, 30 * 1e18));\r\n        esLBRLockSettings.push(esLBRLockSetting(180 days, 50 * 1e18));\r\n        esLBRLockSettings.push(esLBRLockSetting(365 days, 100 * 1e18));\r\n    }\r\n\r\n    // Function to add a new lock setting\r\n    function addLockSetting(esLBRLockSetting memory setting) external onlyOwner {\r\n        esLBRLockSettings.push(setting);\r\n    }\r\n\r\n    // Function to set the user's lock status\r\n    function setLockStatus(uint256 id) external {\r\n        esLBRLockSetting memory _setting = esLBRLockSettings[id];\r\n        LockStatus memory userStatus = userLockStatus[msg.sender];\r\n        if(userStatus.unlockTime > block.timestamp) {\r\n            require(userStatus.duration <= _setting.duration, \"Your lock-in period has not ended, and the term can only be extended, not reduced.\");\r\n        }\r\n        userLockStatus[msg.sender] = LockStatus(block.timestamp + _setting.duration, _setting.duration, _setting.miningBoost);\r\n    }\r\n\r\n    // Function to get the user's unlock time\r\n    function getUnlockTime(address user) external view returns(uint256 unlockTime) {\r\n        unlockTime = userLockStatus[user].unlockTime;\r\n    }\r\n\r\n    /**\r\n     * @notice calculate the user's mining boost based on their lock status\r\n     * @dev Based on the user's userUpdatedAt time, finishAt time, and the current time,\r\n     * there are several scenarios that could occur, including no acceleration, full acceleration, and partial acceleration.\r\n     */\r\n    function getUserBoost(address user, uint256 userUpdatedAt, uint256 finishAt) external view returns(uint256) {\r\n        uint256 boostEndTime = userLockStatus[user].unlockTime;\r\n        uint256 maxBoost = userLockStatus[user].miningBoost;\r\n        if(userUpdatedAt >= boostEndTime || userUpdatedAt >= finishAt) {\r\n            return 0;\r\n        }\r\n        if (finishAt <= boostEndTime || block.timestamp <= boostEndTime) {\r\n            return maxBoost;\r\n        } else {\r\n            uint256 time = block.timestamp > finishAt ? finishAt : block.timestamp;\r\n            return\r\n                ((boostEndTime - userUpdatedAt) *\r\n                    maxBoost) /\r\n                (time - userUpdatedAt);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
    },
    "contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}