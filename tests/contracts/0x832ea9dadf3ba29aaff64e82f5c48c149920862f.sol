{{
  "language": "Solidity",
  "sources": {
    "dori/staking.sol": {
      "content": "// @author: @gizmolab_\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract DoriStaking is Ownable {\n    bool public stakingEnabled = false;\n    bool public burnEnabled = false;\n    uint256 public totalStaked;\n    uint256 public baseReward = 5;\n    address public doriGenesisContract;\n    address public dori1776Contract;\n    address public sweeperClubContract;\n\n    struct Stake {\n        address owner; // 32bits\n        uint128 timestamp; // 32bits\n    }\n\n    struct Burn {\n        address owner; // 32bits\n        uint128 timestamp; // 32bits\n    }\n\n    mapping(address => mapping(uint256 => Stake)) public vault;\n    mapping(address => mapping(address => uint256[])) public userStakeTokens;\n    mapping(address => mapping(address => uint256[])) public userBurnTokens;\n    mapping(address => bool) public isVaultContract;\n    mapping(address => uint256) public vaultMultiplier;\n    mapping(address => uint256) public burnClaimed;\n\n    event NFTStaked(\n        address owner,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 value\n    );\n    event NFTUnstaked(\n        address owner,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 value\n    );\n    event NFTBurned(\n        address owner,\n        address tokenAddress,\n        uint256 tokenId,\n        uint256 value\n    );\n\n    /*==============================================================\n    ==                    User Staking Functions                  ==\n    ==============================================================*/\n\n    function stakeNfts(address _contract, uint256[] calldata tokenIds)\n        external\n    {\n        require(stakingEnabled == true, \"Staking is not enabled yet.\");\n        require(isVaultContract[_contract] == true, \"Contract not allowed\");\n\n        IERC721 nftContract = IERC721(_contract);\n\n        for (uint256 i; i < tokenIds.length; i++) {\n            require(\n                nftContract.ownerOf(tokenIds[i]) == msg.sender,\n                \"You do not own this token\"\n            );\n            nftContract.transferFrom(msg.sender, address(this), tokenIds[i]);\n            vault[_contract][tokenIds[i]] = Stake(\n                msg.sender,\n                uint128(block.timestamp)\n            );\n            userStakeTokens[msg.sender][_contract].push(tokenIds[i]);\n            emit NFTStaked(msg.sender, _contract, tokenIds[i], block.timestamp);\n            totalStaked++;\n        }\n    }\n\n    function unstakeNfts(address _contract, uint256[] calldata tokenIds)\n        external\n    {\n        require(stakingEnabled == true, \"Staking is not enabled yet.\");\n        require(isVaultContract[_contract] == true, \"Contract not allowed\");\n        IERC721 nftContract = IERC721(_contract);\n\n        for (uint256 i; i < tokenIds.length; i++) {\n            bool isTokenOwner = false;\n            uint256 tokenIndex = 0;\n\n            for (\n                uint256 j;\n                j < userStakeTokens[msg.sender][_contract].length;\n                j++\n            ) {\n                if (userStakeTokens[msg.sender][_contract][j] == tokenIds[i]) {\n                    isTokenOwner = true;\n                    tokenIndex = j;\n                }\n            }\n\n            require(isTokenOwner == true, \"You do not own this Token\");\n\n            nftContract.transferFrom(address(this), msg.sender, tokenIds[i]);\n\n            delete vault[_contract][tokenIds[i]];\n            totalStaked--;\n\n            userStakeTokens[msg.sender][_contract][\n                tokenIndex\n            ] = userStakeTokens[msg.sender][_contract][\n                userStakeTokens[msg.sender][_contract].length - 1\n            ];\n            userStakeTokens[msg.sender][_contract].pop();\n\n            emit NFTUnstaked(\n                msg.sender,\n                _contract,\n                tokenIds[i],\n                block.timestamp\n            );\n        }\n    }\n\n    /*==============================================================\n    ==                    Burn Function                           ==\n    ==============================================================*/\n\n    function burnNfts(uint256[] calldata tokenIds) external {\n        require(burnEnabled, \"Burn is not yet Live\");\n        require(dori1776Contract != address(0), \"DoriGen2 Contract not set\");\n        IERC721 nftContract = IERC721(dori1776Contract);\n\n        for (uint256 i; i < tokenIds.length; i++) {\n            bool isTokenOwner = false;\n            uint256 tokenIndex = 0;\n\n            for (\n                uint256 j;\n                j < userStakeTokens[msg.sender][dori1776Contract].length;\n                j++\n            ) {\n                if (\n                    userStakeTokens[msg.sender][dori1776Contract][j] ==\n                    tokenIds[i]\n                ) {\n                    isTokenOwner = true;\n                    tokenIndex = j;\n                }\n            }\n\n            require(isTokenOwner == true, \"You do not own this Token\");\n\n            nftContract.transferFrom(address(this), address(0), tokenIds[i]);\n            emit NFTBurned(\n                msg.sender,\n                dori1776Contract,\n                tokenIds[i],\n                block.timestamp\n            );\n            uint256 reward = _calculateReward(msg.sender, dori1776Contract);\n            burnClaimed[msg.sender] += reward;\n\n            delete vault[dori1776Contract][tokenIds[i]];\n            totalStaked--;\n\n            userBurnTokens[msg.sender][dori1776Contract].push(tokenIds[i]);\n            userStakeTokens[msg.sender][dori1776Contract][\n                tokenIndex\n            ] = userStakeTokens[msg.sender][dori1776Contract][\n                userStakeTokens[msg.sender][dori1776Contract].length - 1\n            ];\n            userStakeTokens[msg.sender][dori1776Contract].pop();\n        }\n    }\n\n    /*==============================================================\n    ==                    Public Get Functions                    ==\n    ==============================================================*/\n\n    function getStakedTokens(address _user, address _contract)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return userStakeTokens[_user][_contract];\n    }\n\n    function getBurnedTokens(address _user, address _contract)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return userBurnTokens[_user][_contract];\n    }\n\n    function getRewards(address _user, address[] calldata vaultContracts)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 reward = 0;\n        uint256 i;\n        for (i = 0; i < vaultContracts.length; i++) {\n            reward += _calculateReward(_user, vaultContracts[i]);\n        }\n        if (burnClaimed[_user] > 0) {\n            reward += burnClaimed[_user] * 1e18;\n        }\n        return reward;\n    }\n\n    function getBurnedRewards(address _user) external view returns (uint256) {\n        return burnClaimed[_user];\n    }\n\n    /*==============================================================\n    ==                    Owner Functions                         ==\n    ==============================================================*/\n\n    function addVault(address _contract, uint256 _multiplier) public onlyOwner {\n        require(isVaultContract[_contract] == false, \"Contract already added\");\n        isVaultContract[_contract] = true;\n        vaultMultiplier[_contract] = _multiplier;\n    }\n\n    function setStakingEnabled(bool _enabled) external onlyOwner {\n        stakingEnabled = _enabled;\n    }\n\n    function setBaseReward(uint256 _reward) external onlyOwner {\n        baseReward = _reward;\n    }\n\n    function setMultiplier(address _contract, uint256 _multiplier)\n        external\n        onlyOwner\n    {\n        require(isVaultContract[_contract] == true, \"Contract not added\");\n        vaultMultiplier[_contract] = _multiplier;\n    }\n\n    function setBurnEnabled(bool _enabled) external onlyOwner {\n        burnEnabled = _enabled;\n    }\n\n    function setDori1776Contract(address _contract) external onlyOwner {\n        dori1776Contract = _contract;\n    }\n\n    function setSweeperClubContract(address _contract) external onlyOwner {\n        sweeperClubContract = _contract;\n    }\n\n    /*==============================================================\n    ==                     Reward Calculate Functions             ==\n    ==============================================================*/\n\n    function _calculateReward(address _user, address _contract)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 reward = 0;\n        for (uint256 i; i < userStakeTokens[_user][_contract].length; i++) {\n            uint256 token = userStakeTokens[_user][_contract][i];\n            uint256 timeSinceStake = block.timestamp -\n                vault[_contract][token].timestamp;\n            uint256 rewardPerToken = baseReward * vaultMultiplier[_contract];\n            reward += timeSinceStake * rewardPerToken * 1e18;\n        }\n        return reward / 86400;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}