{{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(\n        address account,\n        uint256 id,\n        uint256 value\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155Supply.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/WhoAnonByMetadrop.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\n//                      %@@@@@                @@@@@\n//                      %@@@@@                @@@@@\n//              @       %@@@@@       @        @@@@@       ,\n//             @@@@@@   %@@@@@   @@@@@@@@@    @@@@@   .@@@@@&\n//             /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n//                #@@@@@@@@@@@@@@@@@    @@@@@@@@@@@@@@@@@\n//                   @@@@@@@@@@@@          @@@@@@@@@@@\n//              @@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@\n//            @@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@ @@@@@ @@@@@@@@@#\n//             @@@@@    %@@@@@    @@@@@@@     @@@@@    .@@@@\n//                      %@@@@@                @@@@@\n//                      %@@@@@                @@@@@\n//\n//\n//                               who*anon*\n//\n//\n//\n//                 @@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@\n//          p   m  @@@@@@&&&&&&/      %%&&&%*     (&&&@@@@@\n//          o   e  @@@@@@&&&&&&&%.     /%%*       #&&&@@@@@\n//          w b t  @@@@@@&&&&&&&%#              ,%&&&@@@@@@\n//          e y a  @@@@@@&&&&&&&&&%%,       .    (%&&@@@@@@\n//          r   d  @@@@@@&&&&&&&&&&&%%    (/     #&&&@@@@@@\n//          e   r  @@@@@@&&&#  &&&&&&&&%%%%*    /%&&&@@@@@@\n//          d   o  @@@@@@&&&*   (&&&&&&&&&%.    (&&&@@@@@@@\n//              p  @@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@\n//\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @dev who*anon* ERC-1155 contract\n */\ncontract WhoAnonByMetadrop is\n  ERC1155,\n  Ownable,\n  Pausable,\n  ERC1155Burnable,\n  ERC1155Supply\n{\n  // ERC-2981: NFT Royalty Standard\n  bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n  /**\n   * @dev Add name and symbol for consistency with ERC-721 NFTs. Note that ERC-721 stores\n   * these variables on-chain, but as they can only be set on the constructor we may as well\n   * save the storage and have them as constants in the bytecode. You're welcome Ethereum!\n   */\n  string private constant NAME = \"who*anon*\";\n  string private constant SYMBOL = \"WHOANON\";\n\n  /**\n   * @dev Developer address:\n   */\n  address public developer;\n  address public beneficiary;\n\n  /**\n   * @dev Price buffer above and below the passed amount of ETH that will be accepted. This function\n   * will be used to set the price for items in the UI, but there is always the possibility of price\n   * fluctuations beween the display and the mint. These parameters determine as an amount per thousand\n   * how high above or below the price the passed amount of ETH can be and still make a valid sale. The\n   * stored values are in the following format:\n   *   - priceBufferUp: amount as a proportion of 1,000. For example, if you set this to 1005 you allow the\n   *       price to be up to 1005 / 1000 of the actual price, i.e. not exceeding 0.5% greater.\n   *   - priceBufferDown: amount as a proportion of 1,000. For example, if you set this to 995 you allow the\n   *       price to be up to 995 / 1000 of the actual price i.e. not exceeding 0.5% less.\n   */\n  uint16 public priceBufferUp;\n  uint16 public priceBufferDown;\n\n  bool public pausableShutoffProtectionDisabled = false;\n  bool public pausableDisabled = false;\n\n  bool public publicationShutoffProtectionDisabled = false;\n  bool public publicationDisabled = false;\n\n  // while we initialize to 0, we will mint the first token at 1\n  uint256 public latestEdition;\n\n  /**\n   * @dev ERC-2981 configuration\n   */\n  address public royaltyReceipientAddress;\n  uint256 public royaltyPercentageBasisPoints;\n\n  AggregatorV3Interface internal priceFeed;\n\n  /**\n   * @dev titles struct:\n   */\n  struct PublishedTitle {\n    // Slot 1 and 2 (at least)\n    string titleURI;\n    // Slot 3, 64 + 128 + 64 = 256\n    uint64 maxSupply;\n    uint128 priceInUSD;\n    uint64 startTime;\n    // Slot 4, 64 + 64 + 8 + 8 = 144\n    uint64 endTime;\n    uint64 developerAllocation;\n    bool developerAllocationLocked;\n    bool exists;\n  }\n\n  /**\n   * @dev map token classes to parameters:\n   */\n  mapping(uint256 => PublishedTitle) public publishedTitles;\n\n  mapping(uint256 => uint256) public developerAllocationMinted;\n\n  /**\n   * @dev Contract events:\n   */\n  event PriceBufferUpSet(uint256 priceBuffer);\n  event PriceBufferDownSet(uint256 priceBuffer);\n  event YouAreAnon(\n    address account,\n    uint256 tokenId,\n    uint256 quantity,\n    uint256 cost\n  );\n  event YouAreRedeemedAnon(\n    address account,\n    uint256 tokenId,\n    uint256 quantity,\n    bytes32 hashData,\n    bytes data\n  );\n  event TitlePublished(\n    uint256 tokenId,\n    string titleURI,\n    string redeemableURI_,\n    uint64 maxSupply,\n    uint128 priceInUSD,\n    uint64 mintStartDate,\n    uint64 mintEndDate,\n    uint64 redeemStartDate,\n    uint64 redeemEndDate,\n    uint64 developerAllocation,\n    bool developerAllocationLocked\n  );\n\n  error SupplyExceeded();\n  error CannotMintRedeemTokens();\n  error CannotRedeemRedeemTokens();\n  error InvalidParameters();\n  error DeveloperAllocationExceeded();\n  error DeveloperAllocationLocked();\n  error PublicationIsDisabled();\n  error PausableIsDisabled();\n  error PublicationShutoffProtectionIsOn();\n  error PausableShutoffProtectionIsOn();\n\n  /**\n   * @dev Constructor must be passed an array of shareholders for the payment splitter, the first\n   * array holding addresses and the second the corresponding shares. For example, you could have the following:\n   *   - payees_ [beneficiaryAddress, developerAddress]\n   *   - shares_ [90,10]\n   * In this example the beneficiary address passed in can claim 90% of total ETH, the developer 10%\n   */\n  constructor(\n    uint16[] memory priceBuffers_,\n    address beneficiary_,\n    address developer_,\n    address priceFeedAddress_,\n    PublishedTitle[] memory firstEditions_\n  ) ERC1155(\"\") {\n    setPriceBufferUp(priceBuffers_[0]);\n    setPriceBufferDown(priceBuffers_[1]);\n    beneficiary = beneficiary_;\n    developer = developer_;\n    // @dev Contract address for pricefeed data.\n    // MAINNET: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n    // GOERLI: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    priceFeed = AggregatorV3Interface(priceFeedAddress_);\n    _publishFirstEditions(firstEditions_);\n  }\n\n  modifier whenMintingOpen(uint256 tokenId_) {\n    require(mintingIsOpen(tokenId_), \"Minting is not open\");\n    _;\n  }\n\n  modifier whenMintingClosed(uint256 tokenId_) {\n    require(!mintingIsOpen(tokenId_), \"Minting is open\");\n    _;\n  }\n\n  modifier onlyOwnerOrDeveloper() {\n    require(\n      msg.sender == owner() || msg.sender == developer,\n      \"Only owner or developer\"\n    );\n    _;\n  }\n\n  /**\n   * @dev whenDeveloperAllocationAvailable\n   */\n  modifier whenDeveloperAllocationAvailable(\n    uint256 tokenId_,\n    uint256 quantity_\n  ) {\n    if (\n      (developerAllocationMinted[tokenId_] + quantity_) >\n      publishedTitles[tokenId_].developerAllocation\n    ) {\n      revert DeveloperAllocationExceeded();\n    }\n    _;\n  }\n\n  /**\n   *  =======================================\n   *  ADMIN FUNCTIONS\n   *  =======================================\n   */\n\n  /**\n   * @dev owner can publish new titles:\n   */\n  function publish(\n    string memory mintableURI_,\n    string memory redeemableURI_,\n    uint64 maxSupply_,\n    uint128 priceInUSD_,\n    uint64 mintableStartTime_,\n    uint64 mintableDurationInHours_,\n    uint64 redeemableStartTime_,\n    uint64 redeemableDurationInHours_,\n    uint64 developerAllocation_,\n    bool developerAllocationLocked_\n  ) external onlyOwner {\n    if (publicationDisabled) {\n      revert PublicationIsDisabled();\n    }\n\n    uint256 mintableEditionTokenId = latestEdition + 1;\n    uint256 redeemableEditionTokenId = mintableEditionTokenId + 1;\n\n    // Publish the mintable edition:\n    publishedTitles[mintableEditionTokenId].titleURI = mintableURI_;\n    publishedTitles[mintableEditionTokenId].maxSupply = maxSupply_;\n    publishedTitles[mintableEditionTokenId].priceInUSD = priceInUSD_;\n    publishedTitles[mintableEditionTokenId].startTime = mintableStartTime_;\n    publishedTitles[mintableEditionTokenId].endTime =\n      mintableStartTime_ +\n      (mintableDurationInHours_ * 1 hours);\n    publishedTitles[mintableEditionTokenId]\n      .developerAllocation = developerAllocation_;\n    publishedTitles[mintableEditionTokenId]\n      .developerAllocationLocked = developerAllocationLocked_;\n    publishedTitles[mintableEditionTokenId].exists = true;\n\n    // Publish the redeemable edition:\n    publishedTitles[redeemableEditionTokenId].titleURI = redeemableURI_;\n    publishedTitles[redeemableEditionTokenId].maxSupply = 0;\n    publishedTitles[redeemableEditionTokenId].priceInUSD = 0;\n    publishedTitles[redeemableEditionTokenId].startTime = redeemableStartTime_;\n    publishedTitles[redeemableEditionTokenId].endTime =\n      redeemableStartTime_ +\n      (redeemableDurationInHours_ * 1 hours);\n    publishedTitles[redeemableEditionTokenId].developerAllocation = 0;\n    publishedTitles[redeemableEditionTokenId].developerAllocationLocked = true;\n    publishedTitles[redeemableEditionTokenId].exists = true;\n\n    latestEdition = redeemableEditionTokenId;\n\n    emit TitlePublished(\n      mintableEditionTokenId,\n      mintableURI_,\n      redeemableURI_,\n      maxSupply_,\n      priceInUSD_,\n      mintableStartTime_,\n      mintableStartTime_ + (mintableDurationInHours_ * 1 hours),\n      redeemableStartTime_,\n      redeemableStartTime_ + (redeemableDurationInHours_ * 1 hours),\n      developerAllocation_,\n      developerAllocationLocked_\n    );\n  }\n\n  /**\n   * @dev updatePriceFeedAddress\n   */\n  function updatePriceFeedAddress(address priceFeedAddress_)\n    external\n    onlyOwner\n  {\n    priceFeed = AggregatorV3Interface(priceFeedAddress_);\n  }\n\n  /**\n   * @dev updateLatestEdition\n   */\n  function updateLatestEdition(uint32 latestEdition_) external onlyOwner {\n    latestEdition = latestEdition_;\n  }\n\n  /**\n   * @dev disablePausableShutoffProtection\n   */\n  function disablePausableShutoffProtection() external onlyOwner {\n    pausableShutoffProtectionDisabled = true;\n  }\n\n  /**\n   * @dev disablePausable\n   */\n  function disablePausable() external onlyOwner {\n    if (pausableShutoffProtectionDisabled) {\n      pausableDisabled = true;\n    } else {\n      revert PausableShutoffProtectionIsOn();\n    }\n  }\n\n  /**\n   * @dev enablePausableShutoffProtection\n   */\n  function enablePausableShutoffProtection() external onlyOwner {\n    pausableShutoffProtectionDisabled = false;\n  }\n\n  /**\n   * @dev disablePausableShutoffProtection\n   */\n  function disablePublicationShutoffProtection() external onlyOwner {\n    publicationShutoffProtectionDisabled = true;\n  }\n\n  /**\n   * @dev disablePublication\n   */\n  function disablePublication() external onlyOwner {\n    if (publicationShutoffProtectionDisabled) {\n      publicationDisabled = true;\n    } else {\n      revert PublicationShutoffProtectionIsOn();\n    }\n  }\n\n  /**\n   * @dev enablePublicationShutoffProtection\n   */\n  function enablePublicationShutoffProtection() external onlyOwner {\n    publicationShutoffProtectionDisabled = false;\n  }\n\n  /**\n   * @dev owner can reduce supply:\n   */\n  function reduceSupply(uint256 tokenId_, uint64 maxSupply_)\n    external\n    onlyOwner\n  {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    // A supply of 0 is unlimited, so under no circumstances can this be a valid update:\n    require(\n      maxSupply_ != 0,\n      \"Cannot set to unlimited after initial publication\"\n    );\n\n    // A supply of 0 is unlimited, so always allow a reduction from unlimited:\n    if (publishedTitles[tokenId_].maxSupply > 0) {\n      require(\n        publishedTitles[tokenId_].maxSupply > maxSupply_,\n        \"Supply can only be decreased\"\n      );\n    }\n    publishedTitles[tokenId_].maxSupply = maxSupply_;\n  }\n\n  /**\n   * @dev updateTokenURI\n   */\n  function updateTokenURI(uint256 tokenId_, string memory uri_)\n    external\n    onlyOwner\n  {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    publishedTitles[tokenId_].titleURI = uri_;\n  }\n\n  /**\n   * @dev updateTokenPriceInUSD\n   */\n  function updateTokenPriceInUSD(uint256 tokenId_, uint128 tokenPrice_)\n    external\n    onlyOwner\n  {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    // A supply of 0 is unlimited, so under no circumstances can this be a valid update:\n    publishedTitles[tokenId_].priceInUSD = tokenPrice_;\n  }\n\n  /**\n   * @dev updateStartTime\n   */\n  function updateStartTime(uint256 tokenId_, uint64 startTime_)\n    external\n    onlyOwner\n  {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    publishedTitles[tokenId_].startTime = startTime_;\n  }\n\n  /**\n   * @dev updateEndTime\n   */\n  function updateEndTime(uint256 tokenId_, uint64 endTime_) external onlyOwner {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    publishedTitles[tokenId_].endTime = endTime_;\n  }\n\n  /**\n   * @dev updateDeveloperAllocation\n   */\n  function updateDeveloperAllocation(\n    uint256 tokenId_,\n    uint64 developerAlloaction_\n  ) external onlyOwner {\n    require(publishedTitles[tokenId_].exists, \"Token ID does not exist\");\n\n    if (publishedTitles[tokenId_].developerAllocationLocked) {\n      revert DeveloperAllocationLocked();\n    }\n\n    publishedTitles[tokenId_].developerAllocation = developerAlloaction_;\n  }\n\n  /**\n   * @dev lockDeveloperAllocationForTokenId\n   */\n  function lockDeveloperAllocationForTokenId(uint256 tokenId_)\n    external\n    onlyOwner\n  {\n    publishedTitles[tokenId_].developerAllocationLocked = true;\n  }\n\n  /**\n   * @dev updateDeveloper\n   */\n  function updateDeveloper(address developer_) external onlyOwner {\n    developer = developer_;\n  }\n\n  /**\n   * @dev updateBeneficiary\n   */\n  function updateBeneficiary(address beneficiary_) external onlyOwner {\n    beneficiary = beneficiary_;\n  }\n\n  /**\n   * @dev setPriceBufferUp\n   */\n  function setPriceBufferUp(uint16 priceBufferUpToSet_) public onlyOwner {\n    priceBufferUp = priceBufferUpToSet_;\n    emit PriceBufferUpSet(priceBufferUp);\n  }\n\n  /**\n   * @dev setPriceBufferDown\n   */\n  function setPriceBufferDown(uint16 priceBufferDownToSet_) public onlyOwner {\n    priceBufferDown = priceBufferDownToSet_;\n    emit PriceBufferDownSet(priceBufferDown);\n  }\n\n  /**\n   * @dev pause\n   */\n  function pause() public onlyOwner {\n    if (pausableDisabled) {\n      revert PausableIsDisabled();\n    }\n    _pause();\n  }\n\n  /**\n   * @dev unpause\n   */\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  /**\n   *  =======================================\n   *  GETTERS\n   *  =======================================\n   */\n\n  /**\n   * @dev get Title details\n   */\n  function getTitleDetails(uint256 _tokenId)\n    external\n    view\n    returns (PublishedTitle memory)\n  {\n    return (publishedTitles[_tokenId]);\n  }\n\n  function getPriceFeedAddress() external view returns (address) {\n    return (address(priceFeed));\n  }\n\n  function mintingIsOpen(uint256 tokenId_) public view returns (bool) {\n    return (block.timestamp >= publishedTitles[tokenId_].startTime &&\n      block.timestamp <= publishedTitles[tokenId_].endTime);\n  }\n\n  function getCurrentRate() external view returns (uint256) {\n    return (uint256(getLatestPrice()));\n  }\n\n  function getDollarValueInWei(uint256 _dollarValue)\n    external\n    view\n    returns (uint256)\n  {\n    uint256 latestPrice = uint256(getLatestPrice());\n    return (_performConversion(latestPrice, _dollarValue));\n  }\n\n  function getETHPriceForTokenId(uint256 tokenId_)\n    public\n    view\n    returns (uint256 price_)\n  {\n    uint256 latestPrice = uint256(getLatestPrice());\n\n    return (\n      _performConversion(latestPrice, publishedTitles[tokenId_].priceInUSD)\n    );\n  }\n\n  function getBuffers()\n    external\n    view\n    onlyOwner\n    returns (uint256 bufferUp_, uint256 bufferDown_)\n  {\n    return (priceBufferUp, priceBufferDown);\n  }\n\n  /**\n   * @dev Add name, symbol and total supply for consistency with ERC-721 NFTs.\n   */\n  function name() public pure returns (string memory) {\n    return NAME;\n  }\n\n  function symbol() public pure returns (string memory) {\n    return SYMBOL;\n  }\n\n  function totalSupply()\n    public\n    view\n    returns (uint256 totalSupplyForAllCollections_)\n  {\n    for (uint256 i = 1; i <= latestEdition; ) {\n      totalSupplyForAllCollections_ += totalSupply(i);\n      unchecked {\n        i++;\n      }\n    }\n    return totalSupplyForAllCollections_;\n  }\n\n  /**\n   * Returns the latest USD price to 8DP of 1 ETH\n   */\n  function getLatestPrice() public view returns (int256) {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return price;\n  }\n\n  /**\n   * @dev _publishFirstEditions\n   */\n  function _publishFirstEditions(PublishedTitle[] memory firstEditions_)\n    internal\n  {\n    for (uint256 i = 0; i < firstEditions_.length; ) {\n      publishedTitles[i + 1] = firstEditions_[i];\n\n      unchecked {\n        i++;\n      }\n    }\n    for (uint256 i = 0; i < firstEditions_.length; ) {\n      emit TitlePublished(\n        i + 1, // unredeemed edition\n        firstEditions_[i].titleURI,\n        firstEditions_[i + 1].titleURI,\n        firstEditions_[i].maxSupply,\n        firstEditions_[i].priceInUSD,\n        firstEditions_[i].startTime,\n        firstEditions_[i].endTime,\n        firstEditions_[i + 1].startTime,\n        firstEditions_[i + 1].endTime,\n        firstEditions_[i].developerAllocation,\n        firstEditions_[i].developerAllocationLocked\n      );\n      unchecked {\n        i += 2;\n      }\n    }\n    // Update the latest Edition number:\n    latestEdition = firstEditions_.length;\n  }\n\n  /**\n   * @dev perform price conversion USD to Wei at the prescribed number of significant figures (i.e. DP in ETH)\n   */\n  function _performConversion(uint256 _price, uint256 _value)\n    internal\n    pure\n    returns (uint256 convertedValue)\n  {\n    require(_price > 0 && _price < 9999999999999, \"Pricing Error\");\n    // The USD figure from the price feed is one eth in USD to 8 DP. We need the value of one dollar in wei/\n    // The price feed has 8DP so lets add that exponent to our wei figure to give us the value of $1 in wei\n    uint256 oneUSDInWei = ((10**26) / _price);\n    // 2) Mutiply our dollar value by that to get our value in wei:\n    uint256 valueInWei = oneUSDInWei * _value;\n\n    // 3) And then roundup that number to 4DP of eth by removing 10**14 digits, adding 1, then multiplying by 10**14:\n    valueInWei = ((valueInWei / (10**14)) + 1) * (10**14);\n    return (valueInWei);\n  }\n\n  /**\n   * @dev This function is called from the UI to mint NFTs for the user.\n   */\n  function iAmAnon(uint256 tokenId_, uint256 quantity_)\n    external\n    payable\n    whenMintingOpen(tokenId_)\n    whenNotPaused\n  {\n    require(quantity_ != 0, \"Order must be for an item\");\n\n    // Can only mint mintables, i.e. ODD numbered token IDs. The even equivalent (minted 1 = redeemed 2 etc)\n    // must be obtained on redemption of the minted\n    if (!_isMintableToken(tokenId_)) {\n      revert CannotMintRedeemTokens();\n    }\n\n    // Check that we aren't requesting more than is available:\n    if (_orderExceedsSupply(tokenId_, quantity_)) {\n      revert SupplyExceeded();\n    }\n\n    // Calculate the required price for this order:\n    uint256 orderPrice = _priceOrder(tokenId_, quantity_);\n\n    // Check the payment is correct:\n    _checkPaymentToPrice(msg.value, orderPrice);\n\n    // To reach here the price and quantity check must have passed. Mint the items:\n    _mint(msg.sender, tokenId_, quantity_, \"\");\n\n    emit YouAreAnon(msg.sender, tokenId_, quantity_, msg.value);\n  }\n\n  /**\n   * @dev This function is called on redemption\n   */\n  function redeemAnon(\n    uint256 tokenId_,\n    uint256 quantity_,\n    bytes32 dataHash_,\n    bytes memory data_\n  ) external whenMintingOpen(tokenId_ + 1) whenNotPaused {\n    if (_isRedemptionToken(tokenId_)) {\n      revert CannotRedeemRedeemTokens();\n    }\n\n    require(quantity_ != 0, \"Redemption must be for an item\");\n\n    burn(msg.sender, tokenId_, quantity_);\n\n    // All good so far? OK, mint their redeption equivalents\n    _mint(msg.sender, (tokenId_ + 1), quantity_, \"\");\n\n    emit YouAreRedeemedAnon(msg.sender, tokenId_, quantity_, dataHash_, data_);\n  }\n\n  /**\n   * @dev _orderExceedsSupply\n   */\n  function _orderExceedsSupply(uint256 tokenId_, uint256 quantity_)\n    internal\n    view\n    returns (bool)\n  {\n    // Note a supply set to 0 is unlimited:\n    uint256 maxSupply = publishedTitles[tokenId_].maxSupply;\n\n    if ((maxSupply != 0) && ((quantity_ + totalSupply(tokenId_)) > maxSupply)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev _isMintableToken\n   */\n  function _isMintableToken(uint256 tokenId_) internal pure returns (bool) {\n    return (tokenId_ % 2 != 0);\n  }\n\n  /**\n   * @dev _isRedepmtionToken\n   */\n  function _isRedemptionToken(uint256 tokenId_) internal pure returns (bool) {\n    return (tokenId_ % 2 == 0);\n  }\n\n  /**\n   * @dev Get the current price of this order in the same way that it will have been assembled in the UI,\n   * i.e. get the current price of each token type in ETH (including the rounding to 4DP of ETH) and then\n   * multiply that by the total quantity ordered.\n   */\n  function _priceOrder(uint256 tokenId_, uint256 quantity_)\n    internal\n    view\n    returns (uint256 price)\n  {\n    uint256 orderCostInETH = 0;\n\n    uint256 unitPrice = getETHPriceForTokenId(tokenId_);\n\n    orderCostInETH = (unitPrice * quantity_);\n\n    return (orderCostInETH);\n  }\n\n  /**\n   * @dev mintDeveloperAllocation\n   */\n  function mintDeveloperAllocation(uint256 tokenId_, uint256 quantity_)\n    external\n    payable\n    onlyOwnerOrDeveloper\n    whenDeveloperAllocationAvailable(tokenId_, quantity_)\n  {\n    _mint(developer, tokenId_, quantity_, \"\");\n\n    developerAllocationMinted[tokenId_] += quantity_;\n  }\n\n  /**\n   * @dev Determine if the passed cost is within bounds of current price:\n   */\n  function _checkPaymentToPrice(uint256 _passedETH, uint256 _orderPrice)\n    internal\n    view\n  {\n    // Establish upper and lower bands of price buffer and check\n    uint256 orderPriceLower = (_orderPrice * priceBufferDown) / 1000;\n\n    require(_passedETH >= orderPriceLower, \"Insufficient ETH passed for order\");\n\n    uint256 orderPriceUpper = (_orderPrice * priceBufferUp) / 1000;\n\n    require(_passedETH <= orderPriceUpper, \"Too much ETH passed for order\");\n  }\n\n  /**\n   * @dev\n   */\n  function setRoyaltyPercentageBasisPoints(\n    uint256 royaltyPercentageBasisPoints_\n  ) external onlyOwner {\n    royaltyPercentageBasisPoints = royaltyPercentageBasisPoints_;\n  }\n\n  /**\n   * @dev\n   */\n  function setRoyaltyReceipientAddress(\n    address payable royaltyReceipientAddress_\n  ) external onlyOwner {\n    royaltyReceipientAddress = royaltyReceipientAddress_;\n  }\n\n  /**\n   * @dev\n   */\n  function royaltyInfo(uint256, uint256 salePrice_)\n    external\n    view\n    returns (address receiver, uint256 royaltyAmount)\n  {\n    uint256 royalty = (salePrice_ * royaltyPercentageBasisPoints) / 10000;\n    return (royaltyReceipientAddress, royalty);\n  }\n\n  /**\n   * @dev\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    override(ERC1155)\n    returns (bool)\n  {\n    return\n      interfaceId == _INTERFACE_ID_ERC2981 ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   *  =======================================\n   *  STANDARD FUNCTIONS\n   *  =======================================\n   */\n  function uri(uint256 _tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    return publishedTitles[_tokenId].titleURI;\n  }\n\n  /**\n   *\n   * @dev withdrawContractBalance: onlyOwner withdrawal to the beneficiary address\n   *\n   */\n  function withdrawContractBalance() external onlyOwner {\n    (bool success, ) = beneficiary.call{value: address(this).balance}(\"\");\n    require(success, \"Transfer failed\");\n  }\n\n  /**\n   *\n   * @dev withdrawETH: onlyOwner withdrawal to the beneficiary address, sending\n   * the amount to withdraw as an argument\n   *\n   */\n  function withdrawETH(uint256 amount_) external onlyOwner {\n    (bool success, ) = beneficiary.call{value: amount_}(\"\");\n    require(success, \"Transfer failed\");\n  }\n\n  /**\n   * @dev The fallback function is executed on a call to the contract if\n   * none of the other functions match the given function signature.\n   */\n  fallback() external payable {\n    revert();\n  }\n\n  /**\n   * @dev revert any random ETH:\n   */\n  receive() external payable {\n    revert();\n  }\n\n  function _beforeTokenTransfer(\n    address operator,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) internal override(ERC1155, ERC1155Supply) whenNotPaused {\n    super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}