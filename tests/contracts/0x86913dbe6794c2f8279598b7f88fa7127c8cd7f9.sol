{{
  "language": "Solidity",
  "sources": {
    "contracts/Macabroids.sol": {
      "content": "                                                                                                  \n// @@@@@@@@@@    @@@@@@    @@@@@@@   @@@@@@   @@@@@@@   @@@@@@@    @@@@@@   @@@  @@@@@@@    @@@@@@   \n// @@@@@@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@  @@@@@@@@  @@@@@@@   \n// @@! @@! @@!  @@!  @@@  !@@       @@!  @@@  @@!  @@@  @@!  @@@  @@!  @@@  @@!  @@!  @@@  !@@       \n// !@! !@! !@!  !@!  @!@  !@!       !@!  @!@  !@   @!@  !@!  @!@  !@!  @!@  !@!  !@!  @!@  !@!       \n// @!! !!@ @!@  @!@!@!@!  !@!       @!@!@!@!  @!@!@!@   @!@!!@!   @!@  !@!  !!@  @!@  !@!  !!@@!!    \n// !@!   ! !@!  !!!@!!!!  !!!       !!!@!!!!  !!!@!!!!  !!@!@!    !@!  !!!  !!!  !@!  !!!   !!@!!!   \n// !!:     !!:  !!:  !!!  :!!       !!:  !!!  !!:  !!!  !!: :!!   !!:  !!!  !!:  !!:  !!!       !:!  \n// :!:     :!:  :!:  !:!  :!:       :!:  !:!  :!:  !:!  :!:  !:!  :!:  !:!  :!:  :!:  !:!      !:!   \n// :::     ::   ::   :::   ::: :::  ::   :::   :: ::::  ::   :::  ::::: ::   ::   :::: ::  :::: ::   \n//  :      :     :   : :   :: :: :   :   : :  :: : ::    :   : :   : :  :   :    :: :  :   :: : :    \n                                                                                                  \n\n// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n   */\n  function toString(uint256 value) internal pure returns (string memory) {\n    // Inspired by OraclizeAPI's implementation - MIT licence\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    if (value == 0) {\n      return \"0\";\n    }\n    uint256 temp = value;\n    uint256 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n   */\n  function toHexString(uint256 value) internal pure returns (string memory) {\n    if (value == 0) {\n      return \"0x00\";\n    }\n    uint256 temp = value;\n    uint256 length = 0;\n    while (temp != 0) {\n      length++;\n      temp >>= 8;\n    }\n    return toHexString(value, length);\n  }\n\n  /**\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n   */\n  function toHexString(uint256 value, uint256 length)\n    internal\n    pure\n    returns (string memory)\n  {\n    bytes memory buffer = new bytes(2 * length + 2);\n    buffer[0] = \"0\";\n    buffer[1] = \"x\";\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\n      buffer[i] = _HEX_SYMBOLS[value & 0xf];\n      value >>= 4;\n    }\n    require(value == 0, \"Strings: hex length insufficient\");\n    return string(buffer);\n  }\n}\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev Returns true if `account` is a contract.\n   *\n   * [IMPORTANT]\n   * ====\n   * It is unsafe to assume that an address for which this function returns\n   * false is an externally-owned account (EOA) and not a contract.\n   *\n   * Among others, `isContract` will return false for the following\n   * types of addresses:\n   *\n   *  - an externally-owned account\n   *  - a contract in construction\n   *  - an address where a contract will be created\n   *  - an address where a contract lived, but was destroyed\n   * ====\n   *\n   * [IMPORTANT]\n   * ====\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\n   *\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n   * constructor.\n   * ====\n   */\n  function isContract(address account) internal view returns (bool) {\n    // This method relies on extcodesize/address.code.length, which returns 0\n    // for contracts in construction, since the code is only stored at the end\n    // of the constructor execution.\n\n    return account.code.length > 0;\n  }\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n    (bool success, ) = recipient.call{value: amount}(\"\");\n    require(\n      success,\n      \"Address: unable to send value, recipient may have reverted\"\n    );\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason, it is bubbled up by this\n   * function (like regular Solidity function calls).\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(address target, bytes memory data)\n    internal\n    returns (bytes memory)\n  {\n    return functionCall(target, data, \"Address: low-level call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n   * `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    return\n      functionCallWithValue(\n        target,\n        data,\n        value,\n        \"Address: low-level call with value failed\"\n      );\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\n   *\n   * _Available since v3.1._\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(\n      address(this).balance >= value,\n      \"Address: insufficient balance for call\"\n    );\n    require(isContract(target), \"Address: call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(address target, bytes memory data)\n    internal\n    view\n    returns (bytes memory)\n  {\n    return\n      functionStaticCall(target, data, \"Address: low-level static call failed\");\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a static call.\n   *\n   * _Available since v3.3._\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal view returns (bytes memory) {\n    require(isContract(target), \"Address: static call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(address target, bytes memory data)\n    internal\n    returns (bytes memory)\n  {\n    return\n      functionDelegateCall(\n        target,\n        data,\n        \"Address: low-level delegate call failed\"\n      );\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n   * but performing a delegate call.\n   *\n   * _Available since v3.4._\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data,\n    string memory errorMessage\n  ) internal returns (bytes memory) {\n    require(isContract(target), \"Address: delegate call to non-contract\");\n\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResult(success, returndata, errorMessage);\n  }\n\n  /**\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n   * revert reason using the provided one.\n   *\n   * _Available since v4.3._\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata,\n    string memory errorMessage\n  ) internal pure returns (bytes memory) {\n    if (success) {\n      return returndata;\n    } else {\n      // Look for revert reason and bubble it up if present\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert(errorMessage);\n      }\n    }\n  }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n  /**\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n   * by `operator` from `from`, this function is called.\n   *\n   * It must return its Solidity selector to confirm the token transfer.\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n   *\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n   */\n  function onERC721Received(\n    address operator,\n    address from,\n    uint256 tokenId,\n    bytes calldata data\n  ) external returns (bytes4);\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n  /**\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n   */\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 indexed tokenId\n  );\n\n  /**\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n   */\n  event Approval(\n    address indexed owner,\n    address indexed approved,\n    uint256 indexed tokenId\n  );\n\n  /**\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n   */\n  event ApprovalForAll(\n    address indexed owner,\n    address indexed operator,\n    bool approved\n  );\n\n  /**\n   * @dev Returns the number of tokens in ``owner``'s account.\n   */\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  /**\n   * @dev Returns the owner of the `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function ownerOf(uint256 tokenId) external view returns (address owner);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  /**\n   * @dev Transfers `tokenId` token from `from` to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) external;\n\n  /**\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n   * The approval is cleared when the token is transferred.\n   *\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n   *\n   * Requirements:\n   *\n   * - The caller must own the token or be an approved operator.\n   * - `tokenId` must exist.\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address to, uint256 tokenId) external;\n\n  /**\n   * @dev Returns the account approved for `tokenId` token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function getApproved(uint256 tokenId)\n    external\n    view\n    returns (address operator);\n\n  /**\n   * @dev Approve or remove `operator` as an operator for the caller.\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n   *\n   * Requirements:\n   *\n   * - The `operator` cannot be the caller.\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function setApprovalForAll(address operator, bool _approved) external;\n\n  /**\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n   *\n   * See {setApprovalForAll}\n   */\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes calldata data\n  ) external;\n}\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n  address private _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  /**\n   * @dev Initializes the contract setting the deployer as the initial owner.\n   */\n  constructor() {\n    _transferOwnership(_msgSender());\n  }\n\n  /**\n   * @dev Returns the address of the current owner.\n   */\n  function owner() public view virtual returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Leaves the contract without owner. It will not be possible to call\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\n   *\n   * NOTE: Renouncing ownership will leave the contract without an owner,\n   * thereby removing any functionality that is only available to the owner.\n   */\n  function renounceOwnership() public virtual onlyOwner {\n    _transferOwnership(address(0));\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    _transferOwnership(newOwner);\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Internal function without access restriction.\n   */\n  function _transferOwnership(address newOwner) internal virtual {\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n  /**\n   * @dev Returns the token collection name.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the token collection symbol.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n   */\n  function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nerror ApprovalCallerNotOwnerNorApproved();\nerror ApprovalQueryForNonexistentToken();\nerror ApproveToCaller();\nerror ApprovalToCurrentOwner();\nerror BalanceQueryForZeroAddress();\nerror MintToZeroAddress();\nerror MintZeroQuantity();\nerror OwnerQueryForNonexistentToken();\nerror TransferCallerNotOwnerNorApproved();\nerror TransferFromIncorrectOwner();\nerror TransferToNonERC721ReceiverImplementer();\nerror TransferToZeroAddress();\nerror URIQueryForNonexistentToken();\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n *\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n *\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n  using Strings for uint256;\n\n  // Compiler will pack this into a single 256bit word.\n  struct TokenOwnership {\n    // The address of the owner.\n    address addr;\n    // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n    uint64 startTimestamp;\n    // Whether the token has been burned.\n    bool burned;\n  }\n\n  // Compiler will pack this into a single 256bit word.\n  struct AddressData {\n    // Realistically, 2**64-1 is more than enough.\n    uint64 balance;\n    // Keeps track of mint count with minimal overhead for tokenomics.\n    uint64 numberMinted;\n    // Keeps track of burn count with minimal overhead for tokenomics.\n    uint64 numberBurned;\n    // For miscellaneous variable(s) pertaining to the address\n    // (e.g. number of whitelist mint slots used).\n    // If there are multiple variables, please pack them into a uint64.\n    uint64 aux;\n  }\n\n  // The tokenId of the next token to be minted.\n  uint256 internal _currentIndex;\n\n  // The number of tokens burned.\n  uint256 internal _burnCounter;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to ownership details\n  // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\n  mapping(uint256 => TokenOwnership) internal _ownerships;\n\n  // Mapping owner address to address data\n  mapping(address => AddressData) private _addressData;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n    _currentIndex = _startTokenId();\n  }\n\n  /**\n   * To change the starting tokenId, please override this function.\n   */\n  function _startTokenId() internal view virtual returns (uint256) {\n    return 0;\n  }\n\n  /**\n   * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\n   */\n  function totalSupply() public view returns (uint256) {\n    // Counter underflow is impossible as _burnCounter cannot be incremented\n    // more than _currentIndex - _startTokenId() times\n    unchecked {\n      return _currentIndex - _burnCounter - _startTokenId();\n    }\n  }\n\n  /**\n   * Returns the total amount of tokens minted in the contract.\n   */\n  function _totalMinted() internal view returns (uint256) {\n    // Counter underflow is impossible as _currentIndex does not decrement,\n    // and it is initialized to _startTokenId()\n    unchecked {\n      return _currentIndex - _startTokenId();\n    }\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    if (owner == address(0)) revert BalanceQueryForZeroAddress();\n    return uint256(_addressData[owner].balance);\n  }\n\n  /**\n   * Returns the number of tokens minted by `owner`.\n   */\n  function _numberMinted(address owner) internal view returns (uint256) {\n    return uint256(_addressData[owner].numberMinted);\n  }\n\n  /**\n   * Returns the number of tokens burned by or on behalf of `owner`.\n   */\n  function _numberBurned(address owner) internal view returns (uint256) {\n    return uint256(_addressData[owner].numberBurned);\n  }\n\n  /**\n   * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n   */\n  function _getAux(address owner) internal view returns (uint64) {\n    return _addressData[owner].aux;\n  }\n\n  /**\n   * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\n   * If there are multiple variables, please pack them into a uint64.\n   */\n  function _setAux(address owner, uint64 aux) internal {\n    _addressData[owner].aux = aux;\n  }\n\n  /**\n   * Gas spent here starts off proportional to the maximum mint batch size.\n   * It gradually moves to O(1) as tokens get transferred around in the collection over time.\n   */\n  function _ownershipOf(uint256 tokenId)\n    internal\n    view\n    returns (TokenOwnership memory)\n  {\n    uint256 curr = tokenId;\n\n    unchecked {\n      if (_startTokenId() <= curr && curr < _currentIndex) {\n        TokenOwnership memory ownership = _ownerships[curr];\n        if (!ownership.burned) {\n          if (ownership.addr != address(0)) {\n            return ownership;\n          }\n          // Invariant:\n          // There will always be an ownership that has an address and is not burned\n          // before an ownership that does not have an address and is not burned.\n          // Hence, curr will not underflow.\n          while (true) {\n            curr--;\n            ownership = _ownerships[curr];\n            if (ownership.addr != address(0)) {\n              return ownership;\n            }\n          }\n        }\n      }\n    }\n    revert OwnerQueryForNonexistentToken();\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    return _ownershipOf(tokenId).addr;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length != 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public override {\n    address owner = ERC721A.ownerOf(tokenId);\n    if (to == owner) revert ApprovalToCurrentOwner();\n\n    if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\n      revert ApprovalCallerNotOwnerNorApproved();\n    }\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view override returns (address) {\n    if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved)\n    public\n    virtual\n    override\n  {\n    if (operator == _msgSender()) revert ApproveToCaller();\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public virtual override {\n    _transfer(from, to, tokenId);\n    if (\n      to.isContract() &&\n      !_checkContractOnERC721Received(from, to, tokenId, _data)\n    ) {\n      revert TransferToNonERC721ReceiverImplementer();\n    }\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return\n      _startTokenId() <= tokenId &&\n      tokenId < _currentIndex &&\n      !_ownerships[tokenId].burned;\n  }\n\n  /**\n   * @dev Equivalent to `_safeMint(to, quantity, '')`.\n   */\n  function _safeMint(address to, uint256 quantity) internal {\n    _safeMint(to, quantity, \"\");\n  }\n\n  /**\n   * @dev Safely mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - If `to` refers to a smart contract, it must implement\n   *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n   * - `quantity` must be greater than 0.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bytes memory _data\n  ) internal {\n    uint256 startTokenId = _currentIndex;\n    if (to == address(0)) revert MintToZeroAddress();\n    if (quantity == 0) revert MintZeroQuantity();\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    // Overflows are incredibly unrealistic.\n    // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n    // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n    unchecked {\n      _addressData[to].balance += uint64(quantity);\n      _addressData[to].numberMinted += uint64(quantity);\n\n      _ownerships[startTokenId].addr = to;\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n      uint256 updatedIndex = startTokenId;\n      uint256 end = updatedIndex + quantity;\n\n      if (to.isContract()) {\n        do {\n          emit Transfer(address(0), to, updatedIndex);\n          if (\n            !_checkContractOnERC721Received(\n              address(0),\n              to,\n              updatedIndex++,\n              _data\n            )\n          ) {\n            revert TransferToNonERC721ReceiverImplementer();\n          }\n        } while (updatedIndex != end);\n        // Reentrancy protection\n        if (_currentIndex != startTokenId) revert();\n      } else {\n        do {\n          emit Transfer(address(0), to, updatedIndex++);\n        } while (updatedIndex != end);\n      }\n      _currentIndex = updatedIndex;\n    }\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `quantity` must be greater than 0.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 quantity) internal {\n    uint256 startTokenId = _currentIndex;\n    if (to == address(0)) revert MintToZeroAddress();\n    if (quantity == 0) revert MintZeroQuantity();\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    // Overflows are incredibly unrealistic.\n    // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\n    // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\n    unchecked {\n      _addressData[to].balance += uint64(quantity);\n      _addressData[to].numberMinted += uint64(quantity);\n\n      _ownerships[startTokenId].addr = to;\n      _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\n\n      uint256 updatedIndex = startTokenId;\n      uint256 end = updatedIndex + quantity;\n\n      do {\n        emit Transfer(address(0), to, updatedIndex++);\n      } while (updatedIndex != end);\n\n      _currentIndex = updatedIndex;\n    }\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) private {\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n    if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\n\n    bool isApprovedOrOwner = (_msgSender() == from ||\n      isApprovedForAll(from, _msgSender()) ||\n      getApproved(tokenId) == _msgSender());\n\n    if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n    if (to == address(0)) revert TransferToZeroAddress();\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, from);\n\n    // Underflow of the sender's balance is impossible because we check for\n    // ownership above and the recipient's balance can't realistically overflow.\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n    unchecked {\n      _addressData[from].balance -= 1;\n      _addressData[to].balance += 1;\n\n      TokenOwnership storage currSlot = _ownerships[tokenId];\n      currSlot.addr = to;\n      currSlot.startTimestamp = uint64(block.timestamp);\n\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n      uint256 nextTokenId = tokenId + 1;\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n      if (nextSlot.addr == address(0)) {\n        // This will suffice for checking _exists(nextTokenId),\n        // as a burned slot cannot contain the zero address.\n        if (nextTokenId != _currentIndex) {\n          nextSlot.addr = from;\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\n        }\n      }\n    }\n\n    emit Transfer(from, to, tokenId);\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Equivalent to `_burn(tokenId, false)`.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    _burn(tokenId, false);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n    TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\n\n    address from = prevOwnership.addr;\n\n    if (approvalCheck) {\n      bool isApprovedOrOwner = (_msgSender() == from ||\n        isApprovedForAll(from, _msgSender()) ||\n        getApproved(tokenId) == _msgSender());\n\n      if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\n    }\n\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, from);\n\n    // Underflow of the sender's balance is impossible because we check for\n    // ownership above and the recipient's balance can't realistically overflow.\n    // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\n    unchecked {\n      AddressData storage addressData = _addressData[from];\n      addressData.balance -= 1;\n      addressData.numberBurned += 1;\n\n      // Keep track of who burned the token, and the timestamp of burning.\n      TokenOwnership storage currSlot = _ownerships[tokenId];\n      currSlot.addr = from;\n      currSlot.startTimestamp = uint64(block.timestamp);\n      currSlot.burned = true;\n\n      // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\n      // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n      uint256 nextTokenId = tokenId + 1;\n      TokenOwnership storage nextSlot = _ownerships[nextTokenId];\n      if (nextSlot.addr == address(0)) {\n        // This will suffice for checking _exists(nextTokenId),\n        // as a burned slot cannot contain the zero address.\n        if (nextTokenId != _currentIndex) {\n          nextSlot.addr = from;\n          nextSlot.startTimestamp = prevOwnership.startTimestamp;\n        }\n      }\n    }\n\n    emit Transfer(from, address(0), tokenId);\n    _afterTokenTransfers(from, address(0), tokenId, 1);\n\n    // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n    unchecked {\n      _burnCounter++;\n    }\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(\n    address to,\n    uint256 tokenId,\n    address owner\n  ) private {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkContractOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    try\n      IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n    returns (bytes4 retval) {\n      return retval == IERC721Receiver(to).onERC721Received.selector;\n    } catch (bytes memory reason) {\n      if (reason.length == 0) {\n        revert TransferToNonERC721ReceiverImplementer();\n      } else {\n        assembly {\n          revert(add(32, reason), mload(reason))\n        }\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   * And also called before burning one token.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   * - When `to` is zero, `tokenId` will be burned by `from`.\n   * - `from` and `to` are never both zero.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   * And also called after one token has been burned.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` has been minted for `to`.\n   * - When `to` is zero, `tokenId` has been burned by `from`.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n  /**\n   * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n   * defined by `root`. For this, a `proof` must be provided, containing\n   * sibling hashes on the branch from the leaf to the root of the tree. Each\n   * pair of leaves and each pair of pre-images are assumed to be sorted.\n   */\n  function verify(\n    bytes32[] memory proof,\n    bytes32 root,\n    bytes32 leaf\n  ) internal pure returns (bool) {\n    return processProof(proof, leaf) == root;\n  }\n\n  /**\n   * @dev Calldata version of {verify}\n   *\n   * _Available since v4.7._\n   */\n  function verifyCalldata(\n    bytes32[] calldata proof,\n    bytes32 root,\n    bytes32 leaf\n  ) internal pure returns (bool) {\n    return processProofCalldata(proof, leaf) == root;\n  }\n\n  /**\n   * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n   * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n   * hash matches the root of the tree. When processing the proof, the pairs\n   * of leafs & pre-images are assumed to be sorted.\n   *\n   * _Available since v4.4._\n   */\n  function processProof(bytes32[] memory proof, bytes32 leaf)\n    internal\n    pure\n    returns (bytes32)\n  {\n    bytes32 computedHash = leaf;\n    for (uint256 i = 0; i < proof.length; i++) {\n      computedHash = _hashPair(computedHash, proof[i]);\n    }\n    return computedHash;\n  }\n\n  /**\n   * @dev Calldata version of {processProof}\n   *\n   * _Available since v4.7._\n   */\n  function processProofCalldata(bytes32[] calldata proof, bytes32 leaf)\n    internal\n    pure\n    returns (bytes32)\n  {\n    bytes32 computedHash = leaf;\n    for (uint256 i = 0; i < proof.length; i++) {\n      computedHash = _hashPair(computedHash, proof[i]);\n    }\n    return computedHash;\n  }\n\n  /**\n   * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n   * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n   *\n   * _Available since v4.7._\n   */\n  function multiProofVerify(\n    bytes32[] memory proof,\n    bool[] memory proofFlags,\n    bytes32 root,\n    bytes32[] memory leaves\n  ) internal pure returns (bool) {\n    return processMultiProof(proof, proofFlags, leaves) == root;\n  }\n\n  /**\n   * @dev Calldata version of {multiProofVerify}\n   *\n   * _Available since v4.7._\n   */\n  function multiProofVerifyCalldata(\n    bytes32[] calldata proof,\n    bool[] calldata proofFlags,\n    bytes32 root,\n    bytes32[] memory leaves\n  ) internal pure returns (bool) {\n    return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n  }\n\n  /**\n   * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n   * consuming from one or the other at each step according to the instructions given by\n   * `proofFlags`.\n   *\n   * _Available since v4.7._\n   */\n  function processMultiProof(\n    bytes32[] memory proof,\n    bool[] memory proofFlags,\n    bytes32[] memory leaves\n  ) internal pure returns (bytes32 merkleRoot) {\n    // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n    // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n    // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n    // the merkle tree.\n    uint256 leavesLen = leaves.length;\n    uint256 totalHashes = proofFlags.length;\n\n    // Check proof validity.\n    require(\n      leavesLen + proof.length - 1 == totalHashes,\n      \"MerkleProof: invalid multiproof\"\n    );\n\n    // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n    // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n    bytes32[] memory hashes = new bytes32[](totalHashes);\n    uint256 leafPos = 0;\n    uint256 hashPos = 0;\n    uint256 proofPos = 0;\n    // At each step, we compute the next hash using two values:\n    // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n    //   get the next hash.\n    // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n    //   `proof` array.\n    for (uint256 i = 0; i < totalHashes; i++) {\n      bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n      bytes32 b = proofFlags[i]\n        ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]\n        : proof[proofPos++];\n      hashes[i] = _hashPair(a, b);\n    }\n\n    if (totalHashes > 0) {\n      return hashes[totalHashes - 1];\n    } else if (leavesLen > 0) {\n      return leaves[0];\n    } else {\n      return proof[0];\n    }\n  }\n\n  /**\n   * @dev Calldata version of {processMultiProof}\n   *\n   * _Available since v4.7._\n   */\n  function processMultiProofCalldata(\n    bytes32[] calldata proof,\n    bool[] calldata proofFlags,\n    bytes32[] memory leaves\n  ) internal pure returns (bytes32 merkleRoot) {\n    // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n    // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n    // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n    // the merkle tree.\n    uint256 leavesLen = leaves.length;\n    uint256 totalHashes = proofFlags.length;\n\n    // Check proof validity.\n    require(\n      leavesLen + proof.length - 1 == totalHashes,\n      \"MerkleProof: invalid multiproof\"\n    );\n\n    // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n    // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n    bytes32[] memory hashes = new bytes32[](totalHashes);\n    uint256 leafPos = 0;\n    uint256 hashPos = 0;\n    uint256 proofPos = 0;\n    // At each step, we compute the next hash using two values:\n    // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n    //   get the next hash.\n    // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n    //   `proof` array.\n    for (uint256 i = 0; i < totalHashes; i++) {\n      bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n      bytes32 b = proofFlags[i]\n        ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++]\n        : proof[proofPos++];\n      hashes[i] = _hashPair(a, b);\n    }\n\n    if (totalHashes > 0) {\n      return hashes[totalHashes - 1];\n    } else if (leavesLen > 0) {\n      return leaves[0];\n    } else {\n      return proof[0];\n    }\n  }\n\n  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n    return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n  }\n\n  function _efficientHash(bytes32 a, bytes32 b)\n    private\n    pure\n    returns (bytes32 value)\n  {\n    /// @solidity memory-safe-assembly\n    assembly {\n      mstore(0x00, a)\n      mstore(0x20, b)\n      value := keccak256(0x00, 0x40)\n    }\n  }\n}\n// @@@@@@@@&@@@@&@@@&@@@@@@@@&@@&@@@@@@&@@@@@&@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@&&@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@\n// @@@@@@&@&@&@&@@@@@@@@@@@@&@@&@@@@@@@@&@@@@@@@@&@@@@@@@@@@@@@@@@@@&@@@&@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@&@&@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@#%&@@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// &@@@@@@@@@&@@@@&@@@&@@@@@@@@@@@@@@@@@@@@@@@,,((@@@@@@#@@@@@@@@@@@#@@@@@@(,/(/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@,/,,&/@@@@@&%/#@@&&@@&@@%/@@@@@@@(*,*/#&@@@@@@@@@@@@&@@@@@@@@@@@@@@@&@@@@@@@&@@@\n// @@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@&@@&/*,,,/(@@@/*/(&@@@@@@@@@@@@*(,*%@@%*..*/(&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&(*,,*/#*&(//((@@@@@@@@@@@@@,(//%&/@..*((#@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @&@@@@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@&*,..*/%*@&% /%(/..***,..,%*,,//,,*../@@#&&@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@&@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*..,,,* ,(*&,.**///***/***...    ,,,.*/&@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%   ,*,.(%. .#%/*,,*///*.  ,.  ,,,**#@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%##  &&@&,..*,*./#(#(((//(,#,,.   %%@@  ##%@@@(@@@@@@@@@@@&@@@@@@@@@@@@@@@@@&@@@@@\n// @@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@,..%&*,,%(...,,//**//((/(%@//***/*,*, .   &*,,*@*..@@@@@@@@@@@@@@@@@@@&@@@@@@@&@@@@@@@\n// @@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@//#@@#%%,,,,,,,,//,/./*,//*/*(.,.  .. .,(#%,/&/%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@&@@@@@@@@@@@@@@#@@@@@@@@@@(. ,.##@***,/*#***/,*//     %*//***. ., ,, @/(/ ,*,&@@@@@@@@@@@@@@@@@@@@@&@@@@&@@@@&@@\n// @@&@@@@@@@@@@@@@@@@@@@@@%(@@@@@*,,(.%,%/&*,/*./,..****.@  #%(  #*/***,(,*.,,,.&(@#(.**,*&@@@@&(@@@@@@@@@@&@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%@&///*##.. ,,,.*.,.,.**,  (#(( ,/,(**,*,. ,,.  *%(((/(@@@%@@@@&@@@@@@@@@@@@@@@@@@@@&@&@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(/##,(@#.&% ....,.*....,*    ,#&/#(**.,. .  *@ .*@(&%%##@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@******&@..@%#&@* ,..,,, .##(&(%@////***,,.. @@@@*.*@&(,////&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@&@@@@@@@@@@@@@@@@@@@@@@@&(((*@@@@,.@#&&% @@&,,,*, ,.#/&@(*/ ****,.@& &@@&,(%&&@@%##(%@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@#(/&#@@@#/&..(%%%@./(*#**..,.#&#..,.*** .(.@&%(&,/%%@@@@@%//(@@@@@@@@@@@@@&@@@@@@@@@@@@@&@@\n// @@@@@@@@@@@@&@@@@@@@@@@@@@@@@&/&%@@@@%#%@@,.,,/,.,*.,,/.,..&,,..,* ,,...   .(%#@%(@@@@@#/(@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@\n// @@@&@@@@@@@@@@@@@@@@@@@@@@&@@&(%%@@@@@%%%@(/&,,/(*,,,,*.,,,@., .,,,,,,#/. (%&@@@%@@@@@&*/@@@@@@@@@@@@@@@@@@@&@@@@@@@@@@@\n// @@@@@@&@@&@@@@@@@@@@@@@@@@@@@@@%%@@@@@@(@/@@#@*@*(*,*,/#,*,&., ( ..  &*/(*(@@%@(@@@@@&&(@@@@&@@@@@@@@@@&@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@(@@@@@@@//@#*@@/@*&,*,,&**,@,, & .  ./@@&@%#@ &@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#@@@@@@@@#*(&(@@/*/,*(/@*(/%@(*@..  #/&@@&@.,#@@@@@@@@@%@@@@@@@@@@@@@@&@@@@@@@@@@@@@@@@@\n// @@@&@@@@@&@@@@@@@@@@@@@@@@@@@@&@@@@@@@&@@*#/(.%@///**#&#&(,&(#/@@/ ,#*@@(&.*@(&@&&@@@@@@@&@&@@@&@@@@@@&@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@%@@@&@@@@@@@@@@@@@@@@@@@/,/&&# &@@(#*/&@@#*@.#,%%@ ,/%##@/&&%@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@@@@\n// @@@@@@@@@@@@@@@@(@@@@@@@@&%@@@@&,@@@@@@@@/*%%&@#&@.&%.##&%/@.&@#%//*&#@*%@&&(%@@@@@@@@&*@@@@&&&@@@@@@@#@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@&@@@@@@@@@@@&@@@(.@## ,@@@@(  ,/(&&&@%/&&(&&@&&@%&@&%(@((#&@&&%#% *&@@@@* @@%,*@@@&@@@@@@@/@@@@@@@@@@@@@@@@@\n// @@@@@@@@@&@@@@@@@,*@@@@@(@@@,/,.  # ..###&* ,&@/#%(&@@&#(@@@@&(@(@&&@#%%&&, &&@@&*. &&  .,*@@@%(@@@&&.@@@@@@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@ ,@@@&@@@@@*&%%(/#&(..( .#%@&@..%@@%%%(&@&@&@@&&@&%%#@@.*@&@@%/ . &*&&#%&#*/%@@@@@@@@@ @@@&@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@@@&%%%*#%(%%%%#%*&(//#@&#..%%@&%%,/%@%@@@%&%%%@@@/@@%,@&&&%@,.*,*/(/(&(%%##&%(%/(%#((@@@@&@@&@@@@@@@@@@@\n// @@@@@@@@@@@@@%@@@@@/#&%#%&%/***/&%%#/@@&&&&.,&&@&&&*%/@@&@/&@@&&@&#,&&@&&&/.##@&%&%#%%&#(//,*@%(*#%%&@@@@#@@@@@@@@&@@@@@\n// @@@@@@@@@@@@@&@@@@@/%%%(*/*#/%%#%#(*@&&&%#(@*,.&&#&%@&/%&%#%##@&#%*@&&@&.,#@&%%%%&@*#%#&%&##(///%%%%&@@@@@(@@@@@@@@@@@@@\n// @@@@@@&@@@@@@@@@@@,%#%#%#,*&*(&&@&*.@%#%(/&@@%(.,&&&&*((%#%&#&&%(&@&%&,.&%&&&###%%&*.%&@&&& #/&((*%%@@@@@(@@@@@@@@@@@@@@\n// @&@@@@@&@@@@@@@@@@&%&(@&&@#&%%###@%%@%((*,&&&&%&,..%&@%%%((&%%%&&@&%,&(@/#%&&%%%&(&%#%#%%&%&%#&@&&(.&&@@@@*@@@@@@@@@@@@@\n// @@@@@@@@@@@@@@@@#@(%@&&&%%&@(/(/&&&&&&@(#,&%&%%%%%/..#&%@((&&@%%&@. @@(#&%&%&,%&@&&& * &%%%&&#%%&%(#%&@%@@@@@@@@@@@@@@&@\n// @@@@@@@@@@&@@@&&@@@((%#%&%#@#**(%#%%%%%%&&&#@&%#(&%(&&%./#(&@&/,,#@#%(**/#@%&@&&%%&%%%%%/#%#%(%%%%#%@@@@@@@@@@@@@@@@@@@@\n// @@@@@@&@@@@@@@@&&@%,*######&@@%,%((//(&,,&&&%%%%%%@%&#/((((&,%((/#&&#&%%%%%&&&&@@*%##(%**&%@.(#%%((#%@@@@@@@@@@@&@@@@@@@\n// @@@@@@@@@@@@@@@&@(. @ &&&&%&@&%@&@&*,&@&%##*(/#/&&&&%#*/(,(&*%###%%&&&@#%%%#%&&&&@((&%@@@@@&&&&&&&...%@@@@@@@@@@@@@@@@@@\n// @@@&@@@@@@@@@@@@@@#%%&%%%##&@%@%&((%@&@@&%#(*/,%@%%%((#%//@@&#/@(#(%%#&@((%##/@&@@@#&%&&%@@@/(%%%&&%%@@@@@@@@@@@&@@@@@@@\n// @@@@@@@@@@@@&@@@@##%%/%%%%#(&@@&#%@&&&%%%%%%&&&&@&%@@%,(#@%&&&@%.#@@&%&/&&&&%%%&%%%&&%#@@&@&(((%&&%(#%@&&@@@@@@@@@@@@@@@\n// @@@@@@@@@@@&@@@%/((/(@&&@@%&@@@@@%&(*#(/*(#%#&#%(@/.#..#((####%@,.&.,%/%%&@%&(%%%%#&%%@@&@@#%@@&@@*%&%&@@@@@@@@@@@@@@@@@\npragma solidity ^0.8.16;\n\ncontract Macabroids is ERC721A, Ownable {\n  using Strings for uint256;\n\n  string private baseTokenURI;\n  uint256 public cost = 0.01 ether;\n  uint256 public maxSupply = 6666;\n  uint256 public freePerWallet = 2;\n  uint256 public maxMint = 10;\n  bool public status = false;\n\n  bool public revealed = false;\n  string public unrevealed_uri =\n    \"https://ipfs.io/ipfs/QmYqN81ruDCqsftnJTB59z28PPPce4ycfYb7YBC2epmr5v\";\n\n  address t1 = 0xf93DB85964a30F38f05DcBFD9dD23dfD9D9004d8;\n  address t2 = 0x08703883417318190bD5E83b768A4E0DB754596f;\n\n  address[] public collections;\n\n  mapping(address => uint256) public mintedByAddress;\n\n  bytes32 public _merkleRoot;\n\n  constructor() ERC721A(\"macabroids\", \"MCBR\") {\n    collections = [\n      0x028E6F37b1830BD62AecF5faB3325DF6dF7E0a44, //RektApeCopeClub\n      0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D, //BAYC\n      0xe785E82358879F061BC3dcAC6f0444462D4b5330, //World of Women\n      0xED5AF388653567Af2F388E6224dC7C4b3241C544, //Azuki\n      0x1CB1A5e65610AEFF2551A50f76a87a7d3fB649C6, //Cryptoadz\n      0x23581767a106ae21c074b2276D25e5C3e136a68b, //Moonbirds\n      0x8a90CAb2b38dba80c64b7734e58Ee1dB38B8992e, //Doodles\n      0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB, //Cryptopunks\n      0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7, //Meebits\n      0x08D7C0242953446436F34b4C78Fe9da38c73668d, //Proof Collective\n      0x49cF6f5d44E70224e2E23fDcdd2C053F30aDA28B, //CloneX\n      0x1A92f7381B9F03921564a437210bB9396471050C, //Cool Cats\n      0xBd3531dA5CF5857e7CfAA92426877b022e612cf8, //Pudgy Penguins\n      0xbad6186E92002E312078b5a1dAfd5ddf63d3f731, //Anonymice\n      0x15Cc16BfE6fAC624247490AA29B6D632Be549F00, //Anonymice Babies\n      0x9C8fF314C9Bc7F6e59A9d9225Fb22946427eDC03, //Nouns\n      0x42069ABFE407C60cf4ae4112bEDEaD391dBa1cdB, //CryptoDickButts\n      0x57a204AA1042f6E66DD7730813f4024114d74f37, //Cyberkongz\n      0xbCe3781ae7Ca1a5e050Bd9C4c77369867eBc307e, //Goblintown\n      0x9df8Aa7C681f33E442A0d57B838555da863504f3, //Llamaverse\n      0x39ee2c7b3cb80254225884ca001F57118C8f21B6, //Potatoz\n      0x394E3d3044fC89fCDd966D3cb35Ac0B32B0Cda91, //Renga\n      0xEDc3AD89f7b0963fe23D714B34185713706B815b, //PG: GEN 2\n      0x60E4d786628Fea6478F785A6d7e704777c86a7c6 //MAYC\n    ];\n  }\n\n  // MINTING\n  function mint(uint256 _count, bytes32[] calldata _merkleProof)\n    external\n    payable\n  {\n    uint256 supply = totalSupply();\n    uint256 _cost = getCost(msg.sender, _count, _merkleProof);\n\n    require(msg.sender == tx.origin, \"No contracts!\");\n    require(status, \"Not yet\");\n    require(supply + _count <= maxSupply, \"Would excced supply\");\n    require(_count <= maxMint, \"Too many\");\n    require(msg.value == _cost, \"Ether sent is incorrect\");\n\n    mintedByAddress[msg.sender] += _count;\n    _safeMint(msg.sender, _count);\n  }\n\n  function airdrop_single(uint256 _mintAmount, address _recipient)\n    external\n    onlyOwner\n  {\n    require(totalSupply() + _mintAmount <= maxSupply, \"Too many\");\n    _safeMint(_recipient, _mintAmount);\n  }\n\n  function airdrop_many(\n    address[] calldata _recipients,\n    uint256[] calldata _mintAmounts\n  ) external onlyOwner {\n    for (uint256 i = 0; i < _recipients.length; i++) {\n      require(totalSupply() + _mintAmounts[i] <= maxSupply, \"Too many\");\n      _safeMint(_recipients[i], _mintAmounts[i]);\n    }\n  }\n\n  // SETTERS\n  function setWhitelistRoot(bytes32 merkleRoot) public onlyOwner {\n    _merkleRoot = merkleRoot;\n  }\n\n  function setCost(uint256 _newCost) public onlyOwner {\n    cost = _newCost;\n  }\n\n  function setFreePerWallet(uint256 _newFreePerWallet) public onlyOwner {\n    freePerWallet = _newFreePerWallet;\n  }\n\n  function setRevealData(bool _revealed, string memory _unrevealedURI)\n    public\n    onlyOwner\n  {\n    revealed = _revealed;\n    unrevealed_uri = _unrevealedURI;\n  }\n\n  function setBaseURI(string memory baseURI) public onlyOwner {\n    baseTokenURI = baseURI;\n  }\n\n  // add qualifying collections\n  function addCollections(address[] calldata _collections) external onlyOwner {\n    for (uint256 i = 0; i < _collections.length; i++) {\n      collections.push(_collections[i]);\n    }\n  }\n\n  // modify qualifying collection\n  function modifyCollection(uint256 index, address replaceCollection)\n    external\n    onlyOwner\n  {\n    collections[index] = replaceCollection;\n  }\n\n  // reset qualifying collections\n  function resetCollections() external onlyOwner {\n    delete collections;\n  }\n\n  // GETTERS\n\n  // is owner of a qualifying collection\n  function isHolder(address account) public view returns (bool) {\n    for (uint256 i = 0; i < collections.length; i++) {\n      if (IERC721(collections[i]).balanceOf(account) > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function getCost(\n    address _address,\n    uint256 _count,\n    bytes32[] calldata _merkleProof\n  ) public view returns (uint256) {\n    uint256 _mintedByAddress = mintedByAddress[_address];\n    bool _canClaim = canClaim(_address, _merkleProof);\n\n    if (_canClaim) {\n      if (_count <= freePerWallet - _mintedByAddress) {\n        return 0;\n      } else {\n        return cost * (_count - (freePerWallet - _mintedByAddress));\n      }\n    } else {\n      return cost * _count;\n    }\n  }\n\n  function canClaim(address _wallet, bytes32[] calldata _merkleProof)\n    public\n    view\n    returns (bool)\n  {\n    if (\n      (mintedByAddress[_wallet] < freePerWallet) &&\n      (isWhitelisted(_wallet, _merkleProof) || isHolder(_wallet))\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function isWhitelisted(address _wallet, bytes32[] calldata _merkleProof)\n    public\n    view\n    returns (bool)\n  {\n    bytes32 leaf = keccak256(abi.encodePacked(_wallet));\n    return MerkleProof.verify(_merkleProof, _merkleRoot, leaf);\n  }\n\n  function _startTokenId() internal view virtual override returns (uint256) {\n    return 1;\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseTokenURI;\n  }\n\n  function tokenURI(uint256 _tokenId)\n    public\n    view\n    override\n    returns (string memory)\n  {\n    if (revealed) {\n      require(\n        _exists(_tokenId),\n        \"ERC721Metadata: URI query for nonexistent token\"\n      );\n      return string(abi.encodePacked(_baseURI(), _tokenId.toString(), \".json\"));\n    } else {\n      return unrevealed_uri;\n    }\n  }\n\n  // ADMIN\n  function flipSaleStatus() public onlyOwner {\n    status = !status;\n  }\n\n  function burnSupply() public onlyOwner {\n    maxSupply = totalSupply();\n  }\n\n  function withdrawAll() public payable onlyOwner {\n    uint256 _share = address(this).balance / 100;\n    require(payable(t1).send(_share * 50));\n    require(payable(t2).send(_share * 50));\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}