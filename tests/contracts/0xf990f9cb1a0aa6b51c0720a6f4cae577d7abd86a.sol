{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/AxiomV02.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// WARNING! This smart contract and the associated zk-SNARK verifiers have not been audited.\n// DO NOT USE THIS CONTRACT FOR PRODUCTION\npragma solidity ^0.8.12;\n\nimport {IAxiomV0} from \"./IAxiomV0.sol\";\nimport {Ownable} from \"openzeppelin-contracts/access/Ownable.sol\";\n\nuint8 constant TREE_DEPTH = 10;\nuint32 constant NUM_LEAVES = 2 ** 10;\n\n// array indices for reading from the ZKP calldata\nuint32 constant PUBLIC_BYTES_START_IDX = 4 * 3 * 32;\nuint32 constant ROOT_BYTES_START_IDX = PUBLIC_BYTES_START_IDX + 5 * 32;\n\n// constants for batch import of historical block hashes\nuint8 constant HISTORICAL_TREE_DEPTH = 17;\nuint32 constant HISTORICAL_NUM_LEAVES = 2 ** 17;\nuint32 constant HISTORICAL_NUM_ROOTS = 2 ** 7; // HISTORICAL_NUM_LEAVES / NUM_LEAVES\n\nfunction calcMerkleRoot(bytes32[HISTORICAL_NUM_ROOTS] calldata leaves) pure returns (bytes32) {\n    uint256 len = HISTORICAL_NUM_ROOTS >> 1;\n    bytes32[] memory roots = new bytes32[](len);\n    for (uint256 i = 0; i < len; i++) {\n        roots[i] = keccak256(abi.encodePacked(leaves[i << 1], leaves[(i << 1) | 1]));\n    }\n    while (len > 1) {\n        len >>= 1;\n        for (uint256 i = 0; i < len; i++) {\n            roots[i] = keccak256(abi.encodePacked(roots[i << 1], roots[(i << 1) | 1]));\n        }\n    }\n    return roots[0];\n}\n\ncontract AxiomV02 is IAxiomV0, Ownable {\n    string public constant VERSION = \"0.2\";\n\n    /// @notice The address of the snark verifier contract.\n    address public verifierAddress;\n    /// @dev The address of AxiomV0 version \"0.1\". We will read from the storage of the old contract for old block hashes.\n    address public oldAxiomAddress;\n    /// @notice The block the contract was created at.\n    uint256 public creationBlockNumber;\n\n    // historicalRoots[startBlockNumber] is 0 unless (startBlockNumber % NUM_LEAVES == 0)\n    // historicalRoots[startBlockNumber] holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + NUM_LEAVES)\n    mapping(uint32 => bytes32) internal _historicalRoots;\n\n    event UpdateSnarkVerifierAddress(address newAddress);\n\n    /// @dev We do not re-import all historical blockhashes in this v0.2 contract, so we use the old v0.1 contract for older block numbers\n    function historicalRoots(uint32 startBlockNumber) public view returns (bytes32) {\n        if (startBlockNumber < creationBlockNumber) {\n            return IAxiomV0(oldAxiomAddress).historicalRoots(startBlockNumber);\n        } else {\n            return _historicalRoots[startBlockNumber];\n        }\n    }\n\n    constructor(address _oldAddress, address _verifierAddress) {\n        creationBlockNumber = block.number;\n        oldAxiomAddress = _oldAddress;\n        verifierAddress = _verifierAddress;\n    }\n\n    function updateSnarkVerifierAddress(address _verifierAddress) external onlyOwner {\n        verifierAddress = _verifierAddress;\n        emit UpdateSnarkVerifierAddress(_verifierAddress);\n    }\n\n    function verifyRaw(bytes calldata input) private returns (bool) {\n        (bool success,) = verifierAddress.call(input);\n        return success;\n    }\n\n    function getEmptyHash(uint256 depth) public pure returns (bytes32) {\n        // emptyHashes[idx] is the Merkle root of a tree of depth idx with 0's as leaves\n        bytes32[TREE_DEPTH] memory emptyHashes = [\n            bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),\n            bytes32(0xad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5),\n            bytes32(0xb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30),\n            bytes32(0x21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85),\n            bytes32(0xe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344),\n            bytes32(0x0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d),\n            bytes32(0x887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968),\n            bytes32(0xffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83),\n            bytes32(0x9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af),\n            bytes32(0xcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0)\n        ];\n        return emptyHashes[depth];\n    }\n\n    // The ZKP has block headers for [startBlockNumber, endBlockNumber] blocks. We extract some common information from the calldata.\n    function getBoundaryBlockData(bytes calldata proofData)\n        internal\n        pure\n        returns (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root)\n    {\n        prevHash = bytes32(\n            uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128\n                | uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        endHash = bytes32(\n            uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128\n                | uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        startBlockNumber =\n            uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 8:PUBLIC_BYTES_START_IDX + 5 * 32 - 4]));\n        endBlockNumber = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 - 4:PUBLIC_BYTES_START_IDX + 5 * 32]));\n        root = bytes32(\n            uint256(bytes32(proofData[ROOT_BYTES_START_IDX:ROOT_BYTES_START_IDX + 32])) << 128\n                | uint128(bytes16(proofData[ROOT_BYTES_START_IDX + 48:ROOT_BYTES_START_IDX + 64]))\n        );\n    }\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash that is within last 256 blocks\n    // * startBlockNumber must be a multiple of NUM_LEAVES\n    // * roots[idx] is the root of a Merkle tree of height 2**(TREE_DEPTH - idx) in a Merkle mountain\n    //   range which stores block hashes in the interval [startBlockNumber, endBlockNumber]\n    function updateRecent(bytes calldata proofData) external {\n        (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root) =\n            getBoundaryBlockData(proofData);\n        bytes32[TREE_DEPTH] memory roots;\n        for (uint256 idx = 1; idx <= TREE_DEPTH; idx++) {\n            roots[idx - 1] = bytes32(\n                uint256(bytes32(proofData[ROOT_BYTES_START_IDX + idx * 64:ROOT_BYTES_START_IDX + idx * 64 + 32])) << 128\n                    | uint128(\n                        bytes16(proofData[ROOT_BYTES_START_IDX + idx * 64 + 16 + 32:ROOT_BYTES_START_IDX + idx * 64 + 64])\n                    )\n            );\n        }\n\n        uint32 numFinal = endBlockNumber - startBlockNumber + 1;\n        require(numFinal <= NUM_LEAVES); // \"Updating too many blocks at once\");\n        require(startBlockNumber % NUM_LEAVES == 0); // \"startBlockNumber not a multiple of NUM_LEAVES\");\n        require(block.number - endBlockNumber <= 256); // \"Not a recent endBlock\");\n        require(endBlockNumber < block.number); // \"Not a recent endBlock\");\n        require(blockhash(endBlockNumber) == endHash); // \"endHash does not match\");\n        require(verifyRaw(proofData)); // \"ZKP does not verify\");\n\n        if (root == bytes32(0)) {\n            // compute Merkle root of completed Merkle mountain range with 0s for unconfirmed blockhashes\n            for (uint256 round = 1; round <= TREE_DEPTH; round++) {\n                if (roots[TREE_DEPTH - round] != 0) {\n                    root = keccak256(abi.encodePacked(roots[TREE_DEPTH - round], root));\n                } else {\n                    root = keccak256(abi.encodePacked(root, getEmptyHash(round - 1)));\n                }\n            }\n        }\n        _historicalRoots[startBlockNumber] = keccak256(abi.encodePacked(prevHash, root, numFinal));\n        emit UpdateEvent(startBlockNumber, prevHash, root, numFinal);\n    }\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of NUM_LEAVES blocks\n    function updateOld(bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external {\n        (bytes32 prevHash, bytes32 endHash, uint32 startBlockNumber, uint32 endBlockNumber, bytes32 root) =\n            getBoundaryBlockData(proofData);\n\n        require(startBlockNumber % NUM_LEAVES == 0, \"aa\"); // \"startBlockNumber not a multiple of NUM_LEAVES\");\n        require(endBlockNumber - startBlockNumber == NUM_LEAVES - 1, \"bb\"); // \"Updating with incorrect number of blocks\");\n\n        require(\n            historicalRoots(endBlockNumber + 1) == keccak256(abi.encodePacked(endHash, nextRoot, nextNumFinal)), \"cc\"\n        );\n        // \"endHash does not match\"\n        require(verifyRaw(proofData)); // \"ZKP does not verify\")\n\n        _historicalRoots[startBlockNumber] = keccak256(abi.encodePacked(prevHash, root, NUM_LEAVES));\n        emit UpdateEvent(startBlockNumber, prevHash, root, NUM_LEAVES);\n    }\n\n    function isRecentBlockHashValid(uint32 blockNumber, bytes32 claimedBlockHash) public view returns (bool) {\n        bytes32 blockHash = blockhash(blockNumber);\n        require(blockHash != 0x0); // \"Must supply block hash of one of 256 most recent blocks\"\n        return (blockHash == claimedBlockHash);\n    }\n\n    function isBlockHashValid(BlockHashWitness calldata witness) public view returns (bool) {\n        require(witness.claimedBlockHash != 0x0); // \"Claimed block hash cannot be 0\"\n        uint32 side = witness.blockNumber % NUM_LEAVES;\n        uint32 startBlockNumber = witness.blockNumber - side;\n        bytes32 merkleRoot = historicalRoots(startBlockNumber);\n        require(merkleRoot != 0); // \"Merkle root must be stored already\"\n        // compute Merkle root of blockhash\n        bytes32 root = witness.claimedBlockHash;\n        for (uint8 depth = 0; depth < TREE_DEPTH; depth++) {\n            // 0 for left, 1 for right\n            if ((side >> depth) & 1 == 0) {\n                root = keccak256(abi.encodePacked(root, witness.merkleProof[depth]));\n            } else {\n                root = keccak256(abi.encodePacked(witness.merkleProof[depth], root));\n            }\n        }\n        return (merkleRoot == keccak256(abi.encodePacked(witness.prevHash, root, witness.numFinal)));\n    }\n}\n"
    },
    "src/IAxiomV0.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// WARNING! This smart contract and the associated zk-SNARK verifiers have not been audited.\n// DO NOT USE THIS CONTRACT FOR PRODUCTION\npragma solidity ^0.8.12;\n\ninterface IAxiomV0 {\n    // historicalRoots(startBlockNumber) is 0 unless (startBlockNumber % 1024 == 0)\n    // historicalRoots(startBlockNumber) holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + 1024)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + 1024)\n    function historicalRoots(uint32 startBlockNumber) external view returns (bytes32);\n\n    event UpdateEvent(uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal);\n\n    struct BlockHashWitness {\n        uint32 blockNumber;\n        bytes32 claimedBlockHash;\n        bytes32 prevHash;\n        uint32 numFinal;\n        bytes32[10] merkleProof;\n    }\n\n    // returns Merkle root of a tree of depth `depth` with 0's as leaves\n    function getEmptyHash(uint256 depth) external pure returns (bytes32);\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash that is within last 256 blocks\n    // * startBlockNumber must be a multiple of 1024\n    // * roots[idx] is the root of a Merkle tree of height 2**(10 - idx) in a Merkle mountain\n    //   range which stores block hashes in the interval [startBlockNumber, endBlockNumber]\n    function updateRecent(bytes calldata proofData) external;\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of 1024 blocks\n    function updateOld(bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external;\n\n    function isRecentBlockHashValid(uint32 blockNumber, bytes32 claimedBlockHash) external view returns (bool);\n    function isBlockHashValid(BlockHashWitness calldata witness) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 16000,
      "details": {
        "constantOptimizer": true,
        "yul": true
      }
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}