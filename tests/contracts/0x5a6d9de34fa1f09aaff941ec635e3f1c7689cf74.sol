{{
  "language": "Solidity",
  "sources": {
    "contracts/hitsugaya.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n// -RENOUNCED\r\n// -LP LOCKED\r\n// -SAFU CONTRACT\r\n//\r\n// NOW IT'S UP TO YOU (the community) TO PUSH IT.\r\n// LET'S ALL ROCK OUT WITH OUR SHILLS OUT WHILST MAKING BANKai\r\n//\r\n// %%%%%%%%%%%%@%++++*#%+#*+++++++++++++++*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*+++++++++++****###*++++*@++*%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%@@#+++++**+#+++++++++++++++*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++**+++++++++++++%+++%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%**+++++++++++++++++++++++*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#++++@%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#++++++++++++++++*++++++++++++++++++++++++++++++++++++++++%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%*++++++++++++++++++++++++*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#++++++++++++++++++++++++++++++++++++++++#@%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%+++++++++++++++++++++++++#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#*+++++++++++++++++++++++++++++++++++++++%@%%%@%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%+++++++++*+++++++++++++*+++++++++++++++++++++++++++++++++++++++*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++##@%%@@%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%#++++++++++++++++++++++++++++++**+++++++++++++*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*#%%%@@%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%*+++++++++++++++++++++++#*+++++++++++++++++++*+++++++*+++++*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*##%%@@%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%*+++++++++++++++++++++++*+++++++++++++++++++#+*++++*++++*++++++++++++*++++++++++++++++++++++++++++++++++++++++++++++++***@%@@%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%@#+++++*++++++++++*++++++++++++++++++++++++++**+++*++++*+++++++++++++++++++++++++++++++++++++****++++++++++++++++++++**+@@#%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%@@%%@%+++++*+++++*++++#+++++++++++++++++*++++*++***++#++*++++++++++++++++++++++++++++++++++*****+*+++++++++++++++++++++*++@%*#%#####%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%@%%%@%++++++++*+%%*#***++++++++*+++++++++%*+#**+***%++++++*++++*+++*##**+++++***++*++****+++****++++++++++++++++++++++++%*+##**######%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%*#%@*+++++++**@@%@%#+++++++*++++++++++*##%***+*@#+*%*%@+*****#%@@%++++*#%%#%@@#***++++**#*++++++++++++++++++++++++**+++%%##########%%%%%%%%%%%%%%%%%*\r\n// %%%%%%%%%%%%%%%%%%%%%%#+++++++++*+%%@@@@@%++++++++++++*#@#**%#%###+@**%@@@@**#%%@@@@@*+*#%@@@@@@%*++*#%#**##*++++++++++++++++++++++++*++++#%%%%%%#%%##%%%%%%%%%%%%%%%%%#++\r\n// %%%%%%%%%%%%%%%%%@@@@@%%#+++++++%##@@@@@#+++++++++++#@@@@@@@@@%@%@%@%@@@@@%%@@@@@@@@@@@@@@@@@@%#%%@@@####**++##+++++++++++++++++++*+++++#%#%%%%%%%%%%%%%%%%%%%%%%%%%%@*+++\r\n// %%%%%%%%%%%%%%%%%@@%#####*+++**+%@%@@@@*+++++++++++%@@%##%%%%@@@@@@@@@@@%%##**++++++#***+++##%%@@@@@@@@%+++++++++++++++++++++++*##++++##**##%%%%%%@@@@@%%%%%%%%%%%%%%+++++\r\n// %%%%%%%%%%%%%%%%%%%%%#++++**++**+%@@@@*+++++++++++%@@#++++++++#%%%#**+++++++++++++++++++++++++++%%@@@@%#*+++++++++++++++++++++**++++##*#***+**##%%%####%%%%%%%%%%%%*++*%@@\r\n// %%%%%%%%%%%%%%%%%%%%%%@#+++++++#%*%@@%+%*++++++*+%@@*+++++++++++++++++++++++++++++++++++++++++++++#@@@%*+++++**#*+++++++++++*#+++++*+++++*##%###############%%%###++++*%@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%@*++++++#@@@@+%#++++++%+%@%+++++++++++++++++++++++++++++++++++++++++++++++*%@@#*##%@%#*++++**++++##*++++++++++#%@%%@@%%##%@@@%%##**+***%*+++#%#%@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%@@#+++++%@@@#@@++++++@*%@%+++++++++++++++++++++++++++++++++++++++++++++++++%@%%@%%#++++***++++###+++++++++++++*###*+++*%@%%%%%%%#+++++#*++*##%@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%@%##+++#@@@@@#+++*+@%#@%++++++++++++++++++++++++++++++++++++++++++++++++*#@@%***++++++++++*##+++++++++++++*##*++++*%@%%%%%%%%%%#*++*##++*##%@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%#@#+@@@@@@+++**@@#@%+++++++++++++++++++++++++++++++++++++++++++++++**#*@@##+++++++++*##*++++++++++++*##*+++++#%%%%%%%%%%%%%%#*+#%+++%@@@@@@@@%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%@@@#@@@@@@@%+++*@@@@%+++++++++++++++++++++++++++++++++++++++++*******++++#%@@@######%%%%@#++++++++++++++++++*%@%%%%%%%%%%%%%#*+*#*++**#@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%@@%%@@##@#++*@@@@@+++++++++#++++++++++++++++++++++++++++*#**+++++++++++++*@@#*#%@@@@%%*++++++++++++++++++%@@%%%%%%%%%%%%%%#*##+++*###@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@#@+#@*+*@@@@@###*++++++%#++++##+++++++++++++++++**######*******+++++++#@**#%%%@*@%@*+++*++++++++++*#%@%%%%%%%%%%%%%%%%%%#+++*##%@@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%#**@*+@@@@@@*++*%%*+++*@+++#@*++++++++++++*###*+++++++++++++++**++++++@#+***@@@@@#%#+%++++++++++%##@%%%%%%%%%%%%%%%%%@*+*%%%@@@@@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%+@+#@*+%@@@@@%##@@%#+%+++@*++++++**%%@@#*+++++++++++++***##%%%*+++++@@++#@@@@@@*+*%*+++++++*%%#%%%%%%%%%%%%%%%%%%@@*+%%@@@@@@@@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@+%+@@@++#@@@@%*#%@@@@%+++**++*#%%@@@@%######%%%%%%@@@@@@@@@@@#++++++%@#@@@@@@@#**%%#+++++*%#*%@%%%%%%%%%%%%%%%%%@##+##@@@@@@@@@@@@@%@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@###@@@@*+*%%%%***%@@@#+++++*#@@@@@@@@@@%%@@@@@@@#*++++#*#@@%*+++++++%%@@@@@@@*+#%#%++++#%#*%@%%%%%%%%%%%%%%%%%%%***###%@@@@@@@@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*@@@@@@%#+*##*++*@*#+++++++++****++%%++++%@@%@@%****++%@%*+++++++++%#@@@@@@*+*#%#+*#%%#*%@%%%%%%%%%%%%%%%%%%%@*+++*%@@@@@@@@@@@@@@@@@@\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@#@%@@@@@******+++*+++++++++++++++++##*+++++#%@%@%#**%%#+++++++++++*@@@@@@@#++*%#**#**#@@@%%%%%%%%%%%%%%%%%%%%+**#%%%@@@@@@@@@@@@@@@@@#\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+*@@@@@#+++++++++++++++++++++++++++++++++++********++++++++++++++%@@@@@%*++*%***#%@@@@%%%%%%%%%%%%%%%%%%%@*+*%@@@@@@@@@@@@%@@@@@@@%++\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@*+#@@@*#++++++++++++++++++++++++++++++++++++++++++++++++++++++++*@@@@#*+++#%**@@@@@%%%%%%%%%%%%%%%%%%%%%#*+#%@@@@@@@@@@@@@@@%@@@@%*++\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++%@@#++++++++++++++++++++++++++++++++++++++++++++++++++++++++%@@@#+++##%@%@@%%%%%%%%%%%%%%%%%%%%%%%%@*++*+#@@@@@@@@@@@@@@@@@@@#++++\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@#++%@%++++++++++++++++++++++++++++++++++++++++++++++++++++++*%@@*+++#@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++*++*#%@@@@@@@@@@@@@@@@@*+++++\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@*++#@*++++++++++++*@*+++++++++++++++++++++++++++++++++++++*@@%+++*@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%+++*#%@@@@@@@@@@@@@@@@@@@%#+++++\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@+++#%++++++++++++%@*++++++++++++++++++++++++++++++++++++*@@@*++#@%%%@%%%%%%%%%%%%%%%%%%%%%%%%%%@@+#@@@@@@@@@@@@@@@@@@@@@@%%%%#****\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@*++**++++++++++#@@#+++++++++++++++++++++++++++++++++++#@@@@*++*%@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%*++@@@@@@@@@@@@@@@@@@@@@@%%%%%%####\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@*+++++++++++++#@@%+++++++++++++++++++++++++++++++++*%@@@@@+++++#%@@@@@@@@@@@%%%%%%%%%%%%%%@%++##*@@@@@@@@@@@@@@@@@@@@%%%%%%%####\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%+++++++++++++*%@%++++++++++++++++++++++++++++++*%@@@@%@++++++#@%@@@@@@@@@@@@@@@%%%%%%%%@%****#@%@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*+++++++++++++*#+++++++++++++++++++++++++++++#@@@@%*#%%%#*#+++%@@@@@@@@@@@@@@@@@@@%%%@*++++*#%@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@#+++++++++++++++++++++++++++++++++++++++++#@@@@@#++%@%#@%+#*++#@@@@@@@@@@@@@@@@@@@@@%+*%%%%%@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@#*+++++++++###**+++++++++++++++++++++++*%@@@@%*+++@@@%*%@+*#++*@%%@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@+*#+++++++#%#%%%%#++++++++++++++++++*%@@@@@@%++++*@@@*%*#@#+%*+*@%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@++@%#++++++++++++**#**+++++++++++*#%@@@@@@@%+++++%@@@@#%##@@*##+*@%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@*%%@**#+++++++++++++++++++++++*#%@@@@@@@@@#++++++@@@@@@@@##@@%##+*@%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@@%%@#*%#+++++++++++++++++*#%@@@@@@@@@@@@#++++++*@@@@@%%%@#@%%@@%+#@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@%%%%###%%#+++++++++++*#%@@@@@@@@@@@@@@%*+++++++%%@@@%***%**%%%%@%*@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%%%%%%%%###*****+++++++++++++++++*%#*#@%#*+++*#%@@@@@@@@@@@@@@@@@%*++++++++%+@@@#+++++++++%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%%%%#**+++++++++++++++++++++++++++++#**#%@@@@@@@@@@@@@@@@@@@@@@@@@@*+++++++++#++@@@%++++++++#%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%%#++++++++++++++++++++++++++++++++++++*%@@@@@@@@@@@@@@@@@@@@@@@@@%*+++++++++*#+#@@@@++++++*%%@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%@+++++++++++++++++++++++++++++++++++++++@@@@@@@@@@@@@@@@@@@@@@@@@#+++++++++++%++@@@@@++++*#%%@@@@@%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%%++++++++++++++++++++++++++++++++++++++#@@@@@@@@@@@@@@@@@@@@@@@#*+++++++++++#*+*@@@@@*+++%%@@@@%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@%%%%%%%%%\r\n// %%%%%%%%%%%%%%%%#++++++++++++++++++++++++++++++++*++++*@@@@@@@@@@@@@@@@@@@@@@%*+++++++++++++#++%@@@@@*+*%%@@@%#######%@@@@@@@@@%@@@@@@@@@@@@@@@%%%%%%%%@@@@@@@@@@@@@%%%%%%\r\n// %%%%%%%%%%%%%%%%*+++++++++++++++++++++++++++++++**++++@@@@@@@@@@@@@@@@@@@@%#*++++++++++++++#++#@@@@@@##%%@@%########@@@@@@@@@@%%@@@@@@%%%%@@@@@%%%%%%%%%%%%@@@@@@@@@@%%%%%\r\n// %%%%%%%%%%%%%%%%+++++++++++++++++++++++++++++++*#++++%@@@@@@@@@@@@@@@@@%#*+*++++++++++++++**++@@@@@@@@%%@@%#######%@%%@@@@@@%%%@@@@%%%###%%%%@@%%%%%%%%%%%%%%%%@@@@@@%%%%%\r\n// %%%%%%%%%%%%%%%@+++++++++++++++++++++++++++++++#++++*@@@@@@@@@@@@@@@%#**+++++++++++++++++**++%@@@@@@@@@@@%########%%@@@@@@@%%@@@@%###########%@%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%@++++++++++++++++++++++++++++++%+++++%@@@@@@@%@@%@%****+++++++++++++++++++*++#@@@@@@@@@@@##########%@@@@@@%%%@@@%###########%@#+++*#%%%%%%%%%%%%%%%%%%%%%%%\r\n// %%%%%%%%%%%%%%%@+++++++++++++++++++++++++++++%*++++#@@@@@@@@#%@*****+++++++++++++++++++*#+++@@@@@@@@@@%#########%@@@@@@%%%@@@%###########%@%++++++++*#%%%%%%%%%%%%%%%%%%%%\r\n// ***#%%%%%%%%%%%@*+++++++++++++++++++++++++++%#++++*@@@@@@@@@*#@*****++++++++++++++++++*#+++@@@@@@@@@@%%#######%%@@@@@@%%%@@%###########%@@*+++++++++++++*##%%%%%%%%%%%%%%%\r\n// ####%%%%%%%%%%%@#++++++++++++++++++++++++++%%++++*@@@@@@@@@*%*%**************++++*+++##+++%@@@@@@@@@%%%%#####%@@@@@@%%%@@%%##########%@@#++++++++++++++++++++++**#%%%%%%%%\r\n//\r\n//  ,ggg,        gg                                                                                     ,ggggggggggg,\r\n// dP\"\"Y8b       88          I8                                                                        dP\"\"\"88\"\"\"\"\"\"Y8,                           ,dPYb,\r\n// Yb, `88       88          I8                                                                        Yb,  88      `8b                           IP'`Yb\r\n//  `\"  88       88   gg  88888888                                                                      `\"  88      ,8P                           I8  8I                  gg\r\n//      88aaaaaaa88   \"\"     I8                                                                             88aaaad8P\"                            I8  8bgg,               \"\"\r\n//      88\"\"\"\"\"\"\"88   gg     I8      ,g,     gg      gg    ,gggg,gg    ,gggg,gg  gg     gg    ,gggg,gg      88\"\"\"\"Y8ba    ,gggg,gg   ,ggg,,ggg,   I8 dP\" \"8    ,gggg,gg   gg\r\n//      88       88   88     I8     ,8'8,    I8      8I   dP\"  \"Y8I   dP\"  \"Y8I  I8     8I   dP\"  \"Y8I      88      `8b  dP\"  \"Y8I  ,8\" \"8P\" \"8,  I8d8bggP\"   dP\"  \"Y8I   88\r\n//      88       88   88    ,I8,   ,8'  Yb   I8,    ,8I  i8'    ,8I  i8'    ,8I  I8,   ,8I  i8'    ,8I      88      ,8P i8'    ,8I  I8   8I   8I  I8P' \"Yb,  i8'    ,8I   88\r\n//      88       Y8,_,88,_ ,d88b, ,8'_   8) ,d8b,  ,d8b,,d8,   ,d8I ,d8,   ,d8b,,d8b, ,d8I ,d8,   ,d8b,     88_____,d8',d8,   ,d8b,,dP   8I   Yb,,d8    `Yb,,d8,   ,d8b,_,88,_\r\n//      88       `Y88P\"\"Y8 8P\"\"Y8 P' \"YY8P8P8P'\"Y88P\"`Y8P\"Y8888P\"888P\"Y8888P\"`Y8P\"\"Y88P\"888P\"Y8888P\"`Y8    88888888P\"  P\"Y8888P\"`Y88P'   8I   `Y888P      Y8P\"Y8888P\"`Y88P\"\"Y8\r\n//                                                             ,d8I'                  ,d8I'\r\n//                                                           ,dP'8I                 ,dP'8I\r\n//                                                          ,8\"  8I                ,8\"  8I\r\n//                                                          I8   8I                I8   8I\r\n//                                                          `8, ,8I                `8, ,8I\r\n//                                                           `Y8P\"                  `Y8P\"\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    //function _msgSender() internal view virtual returns (address payable) {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface uniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function token0() external view returns (address);\r\n}\r\n\r\ninterface IUsdcLp {\r\n    function getUSDC(uint amount) external;\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract Hitsugaya is ERC20, Ownable {\r\n    uint256 public maxWallet;\r\n    mapping(address => bool) amm;\r\n    IRouter public immutable router;\r\n    address public immutable pair;\r\n    bool inSwapAndLiquify;\r\n    address deployer;\r\n\r\n    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    address public usdcLPAddress;\r\n\r\n    uint256 public currentLP;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() ERC20(\"Hitsugaya\", \"BANKAI\") {\r\n        uint256 _totalSupply = 10e9 * 10**decimals();\r\n        _mint(msg.sender, _totalSupply);\r\n        maxWallet = _totalSupply / 100;\r\n        address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        router = IRouter(payable(routerAddress));\r\n\r\n        pair = IPancakeFactory(router.factory()).createPair(\r\n            address(this),\r\n            USDC\r\n        );\r\n        deployer = msg.sender;\r\n\r\n        _approve(msg.sender, routerAddress, ~uint256(0));\r\n        _approve(address(this), routerAddress, ~uint256(0));\r\n        IERC20(USDC).approve(routerAddress, ~uint256(0));\r\n        amm[address(router)] = true;\r\n        amm[msg.sender] = true;\r\n    }\r\n\r\n    function setUsdcLPAddress(address a) external onlyOwner {\r\n        usdcLPAddress = a;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        currentLP = balanceOf(pair);\r\n        if (pair != from && !inSwapAndLiquify && currentLP > 0) {\r\n            swapBack();\r\n        }\r\n\r\n        uint256 fees;\r\n\r\n        if (!inSwapAndLiquify && !amm[from] && !amm[to]) {\r\n            if (pair == from || pair == to) {\r\n                fees = (amount * 2) / 100;\r\n            }\r\n        }\r\n\r\n        if (!inSwapAndLiquify && to != pair && !amm[to]) {\r\n            require(\r\n                balanceOf(to) + amount - fees <= maxWallet,\r\n                \"Over max wallet size\"\r\n            );\r\n        }\r\n\r\n        uint256 _transferAmount = amount - fees;\r\n        super._transfer(from, to, _transferAmount);\r\n        if (fees > 0) {\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n    }\r\n\r\n    function swapBack() private lockTheSwap {\r\n        uint limit = currentLP / 200;\r\n        if (balanceOf(address(this)) <= limit) { \r\n            return;\r\n        }\r\n        uint256 tokensForLiquidity = limit / 2;\r\n        uint256 initialBalance = IERC20(USDC).balanceOf(usdcLPAddress);\r\n        swapTokensForUsdc(tokensForLiquidity);\r\n        uint256 usdcBalance = IERC20(USDC).balanceOf(usdcLPAddress) - initialBalance;\r\n        IUsdcLp(usdcLPAddress).getUSDC(usdcBalance);\r\n        if (tokensForLiquidity > 0 && usdcBalance > 0) {\r\n            addLiquidity(tokensForLiquidity, usdcBalance);\r\n        }\r\n    }\r\n\r\n    function swapTokensForUsdc(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDC;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            usdcLPAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdcAmount) private {\r\n        \r\n        router.addLiquidity(\r\n            USDC,\r\n            address(this),\r\n            usdcAmount,\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            deployer,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getLostETH() external {\r\n        require(msg.sender == deployer);\r\n        payable(deployer).transfer(address(this).balance);\r\n    }\r\n\r\n    function getLostTokens(IERC20 tokenAddress) external {\r\n        require(msg.sender == deployer);\r\n        SafeERC20.safeTransfer(tokenAddress, deployer, tokenAddress.balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}