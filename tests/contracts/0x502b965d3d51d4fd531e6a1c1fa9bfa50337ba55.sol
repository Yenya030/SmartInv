{{
  "language": "Solidity",
  "sources": {
    "/contracts/SDAOBondedTokenStake.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./IExternalStake.sol\";\r\n\r\ncontract SDAOBondedTokenStake is IExternalStake, Ownable, ReentrancyGuard{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token; // Address of token contract and same used for rewards\r\n    ERC20 public bonusToken; // Address of bonus token contract\r\n\r\n    struct StakeInfo {\r\n        bool exist;\r\n        uint256 amount;\r\n        uint256 rewardComputeIndex;\r\n        uint256 bonusAmount;\r\n    }\r\n\r\n    // Staking period timestamp (Debatable on timestamp vs blocknumber - went with timestamp)\r\n    struct StakePeriod {\r\n        uint256 startPeriod;\r\n        uint256 submissionEndPeriod;\r\n        uint256 endPeriod;\r\n\r\n        uint256 maxStake;\r\n\r\n        uint256 windowRewardAmount;\r\n        uint256 windowMaxAmount;\r\n        \r\n    }\r\n\r\n    address public tokenOperator; // Address to manage the Stake \r\n\r\n    uint256 public maxAirDropStakeBlocks; // Block numbers to complete the airDrop Auto Stakes\r\n\r\n    mapping (address => uint256) public balances; // Useer Token balance in the contract\r\n\r\n    uint256 public currentStakeMapIndex; // Current Stake Index to avoid math calc in all methods\r\n\r\n    mapping (uint256 => StakePeriod) public stakeMap;\r\n\r\n    // List of Stake Holders\r\n    address[] stakeHolders; \r\n\r\n    // All Stake Holders\r\n    mapping(address => StakeInfo) stakeHolderInfo;\r\n\r\n    // To store the total stake in a window\r\n    uint256 public windowTotalStake;\r\n\r\n    // Events\r\n    event NewOperator(address tokenOperator);\r\n\r\n    event WithdrawToken(address indexed tokenOperator, uint256 amount);\r\n\r\n    event OpenForStake(uint256 indexed stakeIndex, address indexed tokenOperator, uint256 startPeriod, uint256 endPeriod, uint256 rewardAmount);\r\n    event SubmitStake(uint256 indexed stakeIndex, address indexed staker, uint256 stakeAmount);\r\n    event WithdrawStake(uint256 indexed stakeIndex, address indexed staker, uint256 stakeAmount, uint256 bonusAmount);\r\n    event ClaimStake(uint256 indexed stakeIndex, address indexed staker, uint256 totalAmount, uint256 bonusAmount);\r\n    event AddReward(address indexed staker, uint256 indexed stakeIndex, address tokenOperator, uint256 stakeAmount, uint256 rewardAmount, uint256 windowTotalStake);\r\n\r\n\r\n    // Modifiers\r\n    modifier onlyOperator() {\r\n        require(\r\n            msg.sender == tokenOperator,\r\n            \"Only operator can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Token Operator should be able to do auto renewal\r\n    modifier allowSubmission() {        \r\n        require(\r\n            now >= stakeMap[currentStakeMapIndex].startPeriod && \r\n            now <= stakeMap[currentStakeMapIndex].submissionEndPeriod, \r\n            \"Staking at this point not allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validStakeLimit(address staker, uint256 stakeAmount) {\r\n\r\n        uint256 stakerTotalStake;\r\n        stakerTotalStake = stakeAmount.add(stakeHolderInfo[staker].amount);\r\n\r\n        // Check for Max Stake per Wallet and stake window max limit \r\n        require(\r\n            stakeAmount > 0 && \r\n            stakerTotalStake <= stakeMap[currentStakeMapIndex].maxStake && \r\n            windowTotalStake.add(stakeAmount) <= stakeMap[currentStakeMapIndex].windowMaxAmount,\r\n            \"Exceeding max limits\"\r\n        );\r\n        _;\r\n\r\n    }\r\n\r\n    // Check for claim - Stake Window should be either in submission phase or after end period\r\n    modifier allowClaimStake() {\r\n\r\n        require(\r\n          (now >= stakeMap[currentStakeMapIndex].startPeriod && now <= stakeMap[currentStakeMapIndex].submissionEndPeriod && stakeHolderInfo[msg.sender].amount > 0) || \r\n          (now > stakeMap[currentStakeMapIndex].endPeriod && stakeHolderInfo[msg.sender].amount > 0), \"Invalid claim request\");\r\n        _;\r\n\r\n    }\r\n\r\n    constructor(address _token, uint256 _maxAirDropStakeBlocks)\r\n    public\r\n    {\r\n        token = ERC20(_token);\r\n        tokenOperator = msg.sender;\r\n        currentStakeMapIndex = 0;\r\n        windowTotalStake = 0;\r\n        maxAirDropStakeBlocks = _maxAirDropStakeBlocks.add(block.number); \r\n    }\r\n\r\n    function updateOperator(address newOperator) external onlyOwner {\r\n\r\n        require(newOperator != address(0), \"Invalid operator address\");\r\n        \r\n        tokenOperator = newOperator;\r\n\r\n        emit NewOperator(newOperator);\r\n    }\r\n    \r\n    function withdrawToken(uint256 value) external onlyOperator\r\n    {\r\n\r\n        // Check if contract is having required balance \r\n        require(token.balanceOf(address(this)) >= value, \"Not enough balance in the contract\");\r\n        require(token.transfer(msg.sender, value), \"Unable to transfer token to the operator account\");\r\n\r\n        emit WithdrawToken(tokenOperator, value);\r\n        \r\n    }\r\n\r\n    // To set the bonus token for future needs\r\n    function setBonusToken(address _bonusToken) external onlyOwner {\r\n        require(_bonusToken != address(0), \"Invalid bonus token\");\r\n        bonusToken = ERC20(_bonusToken);\r\n    }\r\n\r\n    function openForStake(uint256 _startPeriod, uint256 _submissionEndPeriod, uint256 _endPeriod, uint256 _windowRewardAmount, uint256 _maxStake, uint256 _windowMaxAmount) external onlyOperator {\r\n\r\n        // Check Input Parameters\r\n        require(_startPeriod >= now && _startPeriod < _submissionEndPeriod && _submissionEndPeriod < _endPeriod, \"Invalid stake period\");\r\n        require(_windowRewardAmount > 0 && _maxStake > 0 && _windowMaxAmount > 0, \"Invalid inputs\" );\r\n\r\n        // Check Stake in Progress\r\n        require(currentStakeMapIndex == 0 || (now > stakeMap[currentStakeMapIndex].submissionEndPeriod && _startPeriod >= stakeMap[currentStakeMapIndex].endPeriod), \"Cannot have more than one stake request at a time\");\r\n\r\n        // Move the staking period to next one\r\n        currentStakeMapIndex = currentStakeMapIndex + 1;\r\n        StakePeriod memory stakePeriod;\r\n\r\n        // Set Staking attributes\r\n        stakePeriod.startPeriod = _startPeriod;\r\n        stakePeriod.submissionEndPeriod = _submissionEndPeriod;\r\n        stakePeriod.endPeriod = _endPeriod;\r\n        stakePeriod.windowRewardAmount = _windowRewardAmount;\r\n        stakePeriod.maxStake = _maxStake;\r\n        stakePeriod.windowMaxAmount = _windowMaxAmount;\r\n\r\n        stakeMap[currentStakeMapIndex] = stakePeriod;\r\n\r\n        // Add the current window reward to the window total stake \r\n        windowTotalStake = windowTotalStake.add(_windowRewardAmount);\r\n\r\n        emit OpenForStake(currentStakeMapIndex, msg.sender, _startPeriod, _endPeriod, _windowRewardAmount);\r\n\r\n    }\r\n\r\n    // To add the Stake Holder\r\n    function _createStake(address staker, uint256 stakeAmount) internal returns(bool) {\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n\r\n        // Check if the user already staked in the past\r\n        if(stakeInfo.exist) {\r\n\r\n            stakeInfo.amount = stakeInfo.amount.add(stakeAmount);\r\n\r\n        } else {\r\n\r\n            StakeInfo memory req;\r\n\r\n            // Create a new stake request\r\n            req.exist = true;\r\n            req.amount = stakeAmount;\r\n            req.rewardComputeIndex = 0;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolderInfo[staker] = req;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolders.push(staker);\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n    // To submit a new stake for the current window - This function left as is for backward compatability with existing DApps\r\n    function submitStake(uint256 stakeAmount) external allowSubmission validStakeLimit(msg.sender, stakeAmount) {\r\n\r\n        // Transfer the Tokens to Contract\r\n        require(token.transferFrom(msg.sender, address(this), stakeAmount), \"Unable to transfer token to the contract\");\r\n\r\n        _createStake(msg.sender, stakeAmount);\r\n\r\n        // Update the User balance\r\n        balances[msg.sender] = balances[msg.sender].add(stakeAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.add(stakeAmount); \r\n       \r\n        emit SubmitStake(currentStakeMapIndex, msg.sender, stakeAmount);\r\n\r\n    }\r\n\r\n    // To Submit a new stakeFor in the current window - Can be called from the other contracts like airdrop \r\n    function submitStakeFor(address staker, uint256 stakeAmount) external virtual override allowSubmission validStakeLimit(staker, stakeAmount) nonReentrant returns(bool) {\r\n\r\n        // Check for the stakerFor Address\r\n        require(staker != address(0), \"Invalid staker\");\r\n\r\n        // Transfer the Tokens to Contract\r\n        require(token.transferFrom(msg.sender, address(this), stakeAmount), \"Unable to transfer token to the contract\");\r\n\r\n        _createStake(staker, stakeAmount);\r\n\r\n        // Update the User balance\r\n        balances[staker] = balances[staker].add(stakeAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.add(stakeAmount); \r\n       \r\n        emit SubmitStake(currentStakeMapIndex, staker, stakeAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    // To withdraw stake during submission phase\r\n    function withdrawStake(uint256 stakeAmount) external allowClaimStake nonReentrant{\r\n\r\n        //require(\r\n        //    (now >= stakeMap[stakeMapIndex].startPeriod && now <= stakeMap[stakeMapIndex].submissionEndPeriod),\r\n        //    \"Stake withdraw at this point is not allowed\"\r\n        //);\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[msg.sender];\r\n\r\n        // Validate the input Stake Amount\r\n        require(stakeAmount > 0 && stakeInfo.amount >= stakeAmount, \"Cannot withdraw beyond stake amount\");\r\n\r\n        uint256 bonusAmount;\r\n\r\n        // Update the staker balance in the staking window\r\n        stakeInfo.amount = stakeInfo.amount.sub(stakeAmount);\r\n        bonusAmount = stakeInfo.bonusAmount;\r\n        stakeInfo.bonusAmount = 0;\r\n\r\n        // Update the User balance\r\n        balances[msg.sender] = balances[msg.sender].sub(stakeAmount);\r\n\r\n        // Update current stake period total stake - For Auto Approvals\r\n        windowTotalStake = windowTotalStake.sub(stakeAmount); \r\n\r\n        // Return to User Wallet\r\n        require(token.transfer(msg.sender, stakeAmount), \"Unable to transfer token to the account\");\r\n\r\n        // Call the bonus transfer function - Should transfer only if set \r\n        if(address(bonusToken) != address(0) && bonusAmount > 0) {\r\n            require(bonusToken.transfer(msg.sender, bonusAmount), \"Unable to transfer bonus token to the account\");\r\n        }\r\n\r\n        emit WithdrawStake(currentStakeMapIndex, msg.sender, stakeAmount, bonusAmount);\r\n    }\r\n\r\n    // To claim from the stake window\r\n    function claimStake() external allowClaimStake nonReentrant{\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[msg.sender];\r\n\r\n        uint256 stakeAmount;\r\n        uint256 bonusAmount;\r\n\r\n        // No more stake windows or in submission phase\r\n        stakeAmount = stakeInfo.amount;\r\n        bonusAmount = stakeInfo.bonusAmount;\r\n        stakeInfo.amount = 0;\r\n        stakeInfo.bonusAmount = 0;\r\n\r\n        // Update current stake period total stake\r\n        windowTotalStake = windowTotalStake.sub(stakeAmount);\r\n\r\n        // Check for balance in the contract\r\n        require(token.balanceOf(address(this)) >= stakeAmount, \"Not enough balance in the contract\");\r\n\r\n        // Update the User Balance\r\n        balances[msg.sender] = balances[msg.sender].sub(stakeAmount);\r\n\r\n        // Call the transfer function\r\n        require(token.transfer(msg.sender, stakeAmount), \"Unable to transfer token back to the account\");\r\n\r\n        // Call the bonus transfer function - Should transfer only if set \r\n        if(address(bonusToken) != address(0) && bonusAmount > 0) {\r\n            require(bonusToken.transfer(msg.sender, bonusAmount), \"Unable to transfer bonus token to the account\");\r\n        }\r\n        \r\n        emit ClaimStake(currentStakeMapIndex, msg.sender, stakeAmount, bonusAmount);\r\n\r\n    }\r\n\r\n\r\n    function _calculateRewardAmount(uint256 stakeMapIndex, uint256 stakeAmount) internal view returns(uint256) {\r\n\r\n        uint256 calcRewardAmount;\r\n        if(windowTotalStake > stakeMap[stakeMapIndex].windowRewardAmount) {\r\n            calcRewardAmount = stakeAmount.mul(stakeMap[stakeMapIndex].windowRewardAmount).div(windowTotalStake.sub(stakeMap[stakeMapIndex].windowRewardAmount));\r\n        }\r\n        \r\n        return calcRewardAmount;\r\n    }\r\n\r\n\r\n    // Update reward for staker in the respective stake window\r\n    function computeAndAddReward(uint256 stakeMapIndex, address staker, uint256 stakeBonusAmount) \r\n    public \r\n    onlyOperator\r\n    returns(bool)\r\n    {\r\n\r\n        // Check for the Incubation Period\r\n        require(\r\n            now > stakeMap[stakeMapIndex].submissionEndPeriod && \r\n            now < stakeMap[stakeMapIndex].endPeriod, \r\n            \"Reward cannot be added now\"\r\n        );\r\n\r\n        StakeInfo storage stakeInfo = stakeHolderInfo[staker];\r\n\r\n        // Check if reward already computed\r\n        require(stakeInfo.amount > 0 && stakeInfo.rewardComputeIndex != stakeMapIndex, \"Invalid reward request\");\r\n\r\n        // Calculate the totalAmount\r\n        uint256 totalAmount;\r\n        uint256 rewardAmount;\r\n\r\n        // Calculate the reward amount for the current window\r\n        totalAmount = stakeInfo.amount;\r\n        rewardAmount = _calculateRewardAmount(stakeMapIndex, totalAmount);\r\n        totalAmount = totalAmount.add(rewardAmount);\r\n\r\n        // Add the reward amount\r\n        stakeInfo.amount = totalAmount;\r\n\r\n        // Add the bonus Amount\r\n        stakeInfo.bonusAmount = stakeInfo.bonusAmount.add(stakeBonusAmount);\r\n\r\n        // Update the reward compute index to avoid mulitple addition\r\n        stakeInfo.rewardComputeIndex = stakeMapIndex;\r\n\r\n        // Update the User Balance\r\n        balances[staker] = balances[staker].add(rewardAmount);\r\n\r\n        emit AddReward(staker, stakeMapIndex, tokenOperator, totalAmount, rewardAmount, windowTotalStake);\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRewards(uint256 stakeMapIndex, address[] calldata staker, uint256 stakeBonusAmount) \r\n    external \r\n    onlyOperator\r\n    {\r\n        for(uint256 indx = 0; indx < staker.length; indx++) {\r\n            require(computeAndAddReward(stakeMapIndex, staker[indx], stakeBonusAmount));\r\n        }\r\n    }\r\n\r\n    // AirDrop to Stake - Load existing stakes from Air Drop\r\n    function airDropStakes(uint256 stakeMapIndex, address[] calldata staker, uint256[] calldata stakeAmount) external onlyOperator {\r\n\r\n        // Add check for Block Number to restrict air drop auto stake phase after certain block number\r\n        require(block.number < maxAirDropStakeBlocks, \"Exceeds airdrop auto stake phase\");\r\n\r\n        // Check Input Parameters\r\n        require(staker.length == stakeAmount.length, \"Invalid Input Arrays\");\r\n\r\n        // Stakers should be for current window\r\n        require(currentStakeMapIndex == stakeMapIndex, \"Invalid Stake Window Index\");\r\n\r\n        for(uint256 indx = 0; indx < staker.length; indx++) {\r\n\r\n            StakeInfo memory req;\r\n\r\n            // Create a stake request with amount\r\n            req.exist = true;\r\n            req.amount = stakeAmount[indx];\r\n            req.rewardComputeIndex = 0;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolderInfo[staker[indx]] = req;\r\n\r\n            // Add to the Stake Holders List\r\n            stakeHolders.push(staker[indx]);\r\n\r\n            // Update the User balance\r\n            balances[staker[indx]] = stakeAmount[indx];\r\n\r\n            // Update current stake period total stake - Along with Reward\r\n            windowTotalStake = windowTotalStake.add(stakeAmount[indx]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // Getter Functions    \r\n    function getStakeHolders() external view returns(address[] memory) {\r\n        return stakeHolders;\r\n    }\r\n\r\n    function getStakeInfo(address staker) \r\n    external \r\n    view\r\n    returns (bool found, uint256 amount, uint256 rewardComputeIndex, uint256 bonusAmount) \r\n    {\r\n\r\n        StakeInfo memory stakeInfo = stakeHolderInfo[staker];\r\n        \r\n        found = false;\r\n        if(stakeInfo.exist) {\r\n            found = true;\r\n        }\r\n\r\n        amount = stakeInfo.amount;\r\n        rewardComputeIndex = stakeInfo.rewardComputeIndex;\r\n        bonusAmount = stakeInfo.bonusAmount;\r\n\r\n    }\r\n\r\n\r\n}"
    },
    "/contracts/IExternalStake.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\ninterface IExternalStake {\r\n    function submitStakeFor(address staker, uint256 stakeAmount) external returns(bool);\r\n}"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}