{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "src/ABDKMath64x64.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n */\npragma solidity 0.8.17;\n\n/**\n * Smart contract library of mathematical functions operating with signed\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n * basically a simple fraction whose numerator is signed 128-bit integer and\n * denominator is 2^64.  As long as denominator is always the same, there is no\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n * represented by int128 type holding only the numerator.\n */\nlibrary ABDKMath64x64 {\n    /*\n    * Minimum value signed 64.64-bit fixed point number may have. \n    */\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n\n    /*\n    * Maximum value signed 64.64-bit fixed point number may have. \n    */\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /**\n     * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x signed 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function fromInt(int256 x) internal pure returns (int128) {\n        unchecked {\n            require(x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n            return int128(x << 64);\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into signed 64-bit integer number\n     * rounding down.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64-bit integer number\n     */\n    function toInt(int128 x) internal pure returns (int64) {\n        unchecked {\n            return int64(x >> 64);\n        }\n    }\n\n    /**\n     * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function fromUInt(uint256 x) internal pure returns (int128) {\n        unchecked {\n            require(x <= 0x7FFFFFFFFFFFFFFF);\n            return int128(int256(x << 64));\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n     * number rounding down.  Revert on underflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return unsigned 64-bit integer number\n     */\n    function toUInt(int128 x) internal pure returns (uint64) {\n        unchecked {\n            require(x >= 0);\n            return uint64(uint128(x >> 64));\n        }\n    }\n\n    /**\n     * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n     * number rounding down.  Revert on overflow.\n     *\n     * @param x signed 128.128-bin fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function from128x128(int256 x) internal pure returns (int128) {\n        unchecked {\n            int256 result = x >> 64;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n     * number.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 128.128 fixed point number\n     */\n    function to128x128(int128 x) internal pure returns (int256) {\n        unchecked {\n            return int256(x) << 64;\n        }\n    }\n\n    /**\n     * Calculate x + y.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function add(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = int256(x) + y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x - y.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function sub(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = int256(x) - y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x * y rounding down.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function mul(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = int256(x) * y >> 64;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n     * number and y is signed 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64 fixed point number\n     * @param y signed 256-bit integer number\n     * @return signed 256-bit integer number\n     */\n    function muli(int128 x, int256 y) internal pure returns (int256) {\n        unchecked {\n            if (x == MIN_64x64) {\n                require(\n                    y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                        && y <= 0x1000000000000000000000000000000000000000000000000\n                );\n                return -y << 63;\n            } else {\n                bool negativeResult = false;\n                if (x < 0) {\n                    x = -x;\n                    negativeResult = true;\n                }\n                if (y < 0) {\n                    y = -y; // We rely on overflow behavior here\n                    negativeResult = !negativeResult;\n                }\n                uint256 absoluteResult = mulu(x, uint256(y));\n                if (negativeResult) {\n                    require(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000);\n                    return -int256(absoluteResult); // We rely on overflow behavior here\n                } else {\n                    require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                    return int256(absoluteResult);\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64 fixed point number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 256-bit integer number\n     */\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            if (y == 0) return 0;\n\n            require(x >= 0);\n\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n            uint256 hi = uint256(int256(x)) * (y >> 128);\n\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            hi <<= 64;\n\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n            return hi + lo;\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n     * zero.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function div(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n            int256 result = (int256(x) << 64) / y;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x signed 256-bit integer number\n     * @param y signed 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function divi(int256 x, int256 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n\n            bool negativeResult = false;\n            if (x < 0) {\n                x = -x; // We rely on overflow behavior here\n                negativeResult = true;\n            }\n            if (y < 0) {\n                y = -y; // We rely on overflow behavior here\n                negativeResult = !negativeResult;\n            }\n            uint128 absoluteResult = divuu(uint256(x), uint256(y));\n            if (negativeResult) {\n                require(absoluteResult <= 0x80000000000000000000000000000000);\n                return -int128(absoluteResult); // We rely on overflow behavior here\n            } else {\n                require(absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int128(absoluteResult); // We rely on overflow behavior here\n            }\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return signed 64.64-bit fixed point number\n     */\n    function divu(uint256 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n            uint128 result = divuu(x, y);\n            require(result <= uint128(MAX_64x64));\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate -x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function neg(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != MIN_64x64);\n            return -x;\n        }\n    }\n\n    /**\n     * Calculate |x|.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function abs(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != MIN_64x64);\n            return x < 0 ? -x : x;\n        }\n    }\n\n    /**\n     * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n     * zero.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function inv(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != 0);\n            int256 result = int256(0x100000000000000000000000000000000) / x;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function avg(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            return int128((int256(x) + int256(y)) >> 1);\n        }\n    }\n\n    /**\n     * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n     * Revert on overflow or in case x * y is negative.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function gavg(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 m = int256(x) * int256(y);\n            require(m >= 0);\n            require(m < 0x4000000000000000000000000000000000000000000000000000000000000000);\n            return int128(sqrtu(uint256(m)));\n        }\n    }\n\n    /**\n     * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n     * and y is unsigned 256-bit integer number.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @param y uint256 value\n     * @return signed 64.64-bit fixed point number\n     */\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            bool negative = x < 0 && y & 1 == 1;\n\n            uint256 absX = uint128(x < 0 ? -x : x);\n            uint256 absResult;\n            absResult = 0x100000000000000000000000000000000;\n\n            if (absX <= 0x10000000000000000) {\n                absX <<= 63;\n                while (y != 0) {\n                    if (y & 0x1 != 0) {\n                        absResult = absResult * absX >> 127;\n                    }\n                    absX = absX * absX >> 127;\n\n                    if (y & 0x2 != 0) {\n                        absResult = absResult * absX >> 127;\n                    }\n                    absX = absX * absX >> 127;\n\n                    if (y & 0x4 != 0) {\n                        absResult = absResult * absX >> 127;\n                    }\n                    absX = absX * absX >> 127;\n\n                    if (y & 0x8 != 0) {\n                        absResult = absResult * absX >> 127;\n                    }\n                    absX = absX * absX >> 127;\n\n                    y >>= 4;\n                }\n\n                absResult >>= 64;\n            } else {\n                uint256 absXShift = 63;\n                if (absX < 0x1000000000000000000000000) {\n                    absX <<= 32;\n                    absXShift -= 32;\n                }\n                if (absX < 0x10000000000000000000000000000) {\n                    absX <<= 16;\n                    absXShift -= 16;\n                }\n                if (absX < 0x1000000000000000000000000000000) {\n                    absX <<= 8;\n                    absXShift -= 8;\n                }\n                if (absX < 0x10000000000000000000000000000000) {\n                    absX <<= 4;\n                    absXShift -= 4;\n                }\n                if (absX < 0x40000000000000000000000000000000) {\n                    absX <<= 2;\n                    absXShift -= 2;\n                }\n                if (absX < 0x80000000000000000000000000000000) {\n                    absX <<= 1;\n                    absXShift -= 1;\n                }\n\n                uint256 resultShift = 0;\n                while (y != 0) {\n                    require(absXShift < 64);\n\n                    if (y & 0x1 != 0) {\n                        absResult = absResult * absX >> 127;\n                        resultShift += absXShift;\n                        if (absResult > 0x100000000000000000000000000000000) {\n                            absResult >>= 1;\n                            resultShift += 1;\n                        }\n                    }\n                    absX = absX * absX >> 127;\n                    absXShift <<= 1;\n                    if (absX >= 0x100000000000000000000000000000000) {\n                        absX >>= 1;\n                        absXShift += 1;\n                    }\n\n                    y >>= 1;\n                }\n\n                require(resultShift < 64);\n                absResult >>= 64 - resultShift;\n            }\n            int256 result = negative ? -int256(absResult) : int256(absResult);\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate sqrt (x) rounding down.  Revert if x < 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function sqrt(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x >= 0);\n            return int128(sqrtu(uint256(int256(x)) << 64));\n        }\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function log_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            int256 msb = 0;\n            int256 xc = x;\n            if (xc >= 0x10000000000000000) {\n                xc >>= 64;\n                msb += 64;\n            }\n            if (xc >= 0x100000000) {\n                xc >>= 32;\n                msb += 32;\n            }\n            if (xc >= 0x10000) {\n                xc >>= 16;\n                msb += 16;\n            }\n            if (xc >= 0x100) {\n                xc >>= 8;\n                msb += 8;\n            }\n            if (xc >= 0x10) {\n                xc >>= 4;\n                msb += 4;\n            }\n            if (xc >= 0x4) {\n                xc >>= 2;\n                msb += 2;\n            }\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n            int256 result = msb - 64 << 64;\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n                ux *= ux;\n                uint256 b = ux >> 255;\n                ux >>= 127 + b;\n                result += bit * int256(b);\n            }\n\n            return int128(result);\n        }\n    }\n\n    /**\n     * Calculate natural logarithm of x.  Revert if x <= 0.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function ln(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            return int128(int256(uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\n        }\n    }\n\n    /**\n     * Calculate binary exponent of x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function exp_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            uint256 result = 0x80000000000000000000000000000000;\n\n            if (x & 0x8000000000000000 > 0) {\n                result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n            }\n            if (x & 0x80000000000000 > 0) {\n                result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n            }\n            if (x & 0x800000000000 > 0) {\n                result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n            }\n            if (x & 0x8000000000 > 0) {\n                result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n            }\n            if (x & 0x800000000 > 0) {\n                result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n            }\n            if (x & 0x400000000 > 0) {\n                result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n            }\n            if (x & 0x200000000 > 0) {\n                result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n            }\n            if (x & 0x100000000 > 0) {\n                result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n            }\n            if (x & 0x80000000 > 0) {\n                result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n            }\n            if (x & 0x40000000 > 0) {\n                result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n            }\n            if (x & 0x20000000 > 0) {\n                result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n            }\n            if (x & 0x10000000 > 0) {\n                result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n            }\n            if (x & 0x8000000 > 0) {\n                result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n            }\n            if (x & 0x4000000 > 0) {\n                result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n            }\n            if (x & 0x2000000 > 0) {\n                result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n            }\n            if (x & 0x1000000 > 0) {\n                result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n            }\n            if (x & 0x800000 > 0) {\n                result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n            }\n            if (x & 0x400000 > 0) {\n                result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n            }\n            if (x & 0x200000 > 0) {\n                result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n            }\n            if (x & 0x100000 > 0) {\n                result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n            }\n            if (x & 0x80000 > 0) {\n                result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n            }\n            if (x & 0x40000 > 0) {\n                result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n            }\n            if (x & 0x20000 > 0) {\n                result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n            }\n            if (x & 0x10000 > 0) {\n                result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n            }\n            if (x & 0x8000 > 0) {\n                result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n            }\n            if (x & 0x4000 > 0) {\n                result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n            }\n            if (x & 0x2000 > 0) {\n                result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n            }\n            if (x & 0x1000 > 0) {\n                result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n            }\n            if (x & 0x800 > 0) {\n                result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n            }\n            if (x & 0x400 > 0) {\n                result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n            }\n            if (x & 0x200 > 0) {\n                result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n            }\n            if (x & 0x100 > 0) {\n                result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n            }\n            if (x & 0x80 > 0) {\n                result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n            }\n            if (x & 0x40 > 0) {\n                result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n            }\n            if (x & 0x20 > 0) {\n                result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n            }\n            if (x & 0x10 > 0) {\n                result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n            }\n            if (x & 0x8 > 0) {\n                result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n            }\n            if (x & 0x4 > 0) {\n                result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n            }\n            if (x & 0x2 > 0) {\n                result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n            }\n            if (x & 0x1 > 0) {\n                result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n            }\n\n            result >>= uint256(int256(63 - (x >> 64)));\n            require(result <= uint256(int256(MAX_64x64)));\n\n            return int128(int256(result));\n        }\n    }\n\n    /**\n     * Calculate natural exponent of x.  Revert on overflow.\n     *\n     * @param x signed 64.64-bit fixed point number\n     * @return signed 64.64-bit fixed point number\n     */\n    function exp(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            return exp_2(int128(int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n        }\n    }\n\n    /**\n     * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n     * integer numbers.  Revert on overflow or when y is zero.\n     *\n     * @param x unsigned 256-bit integer number\n     * @param y unsigned 256-bit integer number\n     * @return unsigned 64.64-bit fixed point number\n     */\n    function divuu(uint256 x, uint256 y) private pure returns (uint128) {\n        unchecked {\n            require(y != 0);\n\n            uint256 result;\n\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) {\n                result = (x << 64) / y;\n            } else {\n                uint256 msb = 192;\n                uint256 xc = x >> 192;\n                if (xc >= 0x100000000) {\n                    xc >>= 32;\n                    msb += 32;\n                }\n                if (xc >= 0x10000) {\n                    xc >>= 16;\n                    msb += 16;\n                }\n                if (xc >= 0x100) {\n                    xc >>= 8;\n                    msb += 8;\n                }\n                if (xc >= 0x10) {\n                    xc >>= 4;\n                    msb += 4;\n                }\n                if (xc >= 0x4) {\n                    xc >>= 2;\n                    msb += 2;\n                }\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n                result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 hi = result * (y >> 128);\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 xh = x >> 192;\n                uint256 xl = x << 64;\n\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n                lo = hi << 128;\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n\n                assert(xh == hi >> 128);\n\n                result += xl / y;\n            }\n\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            return uint128(result);\n        }\n    }\n\n    /**\n     * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n     * number.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return unsigned 128-bit integer number\n     */\n    function sqrtu(uint256 x) private pure returns (uint128) {\n        unchecked {\n            if (x == 0) {\n                return 0;\n            } else {\n                uint256 xx = x;\n                uint256 r = 1;\n                if (xx >= 0x100000000000000000000000000000000) {\n                    xx >>= 128;\n                    r <<= 64;\n                }\n                if (xx >= 0x10000000000000000) {\n                    xx >>= 64;\n                    r <<= 32;\n                }\n                if (xx >= 0x100000000) {\n                    xx >>= 32;\n                    r <<= 16;\n                }\n                if (xx >= 0x10000) {\n                    xx >>= 16;\n                    r <<= 8;\n                }\n                if (xx >= 0x100) {\n                    xx >>= 8;\n                    r <<= 4;\n                }\n                if (xx >= 0x10) {\n                    xx >>= 4;\n                    r <<= 2;\n                }\n                if (xx >= 0x4) r <<= 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1;\n                r = (r + x / r) >> 1; // Seven iterations should be enough\n                uint256 r1 = x / r;\n                return uint128(r < r1 ? r : r1);\n            }\n        }\n    }\n}\n"
    },
    "src/LizardLounge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"./ABDKMath64x64.sol\";\nimport \"./interfaces/IEthLizards.sol\";\nimport \"./interfaces/IGenesisEthLizards.sol\";\nimport \"./interfaces/IUSDC.sol\";\n\n/**\n * @title The staking contract for Ethlizards\n * @author kmao (@kmao37)\n * @notice Lets users stake their Ethlizard NFTs accruing continuous compound interest,\n * and also claim rewards based on their share of the pool(s).\n * See docs at docs.ethlizards.io\n * @dev One Ethlizard is assigned the value of 100 * 1e18 (without any rebases), and we store the overall\n * combined shares of all of the Ethlizards in order to calculate the specific percentage share of an Ethlizards.\n * Rebases refer to the daily interest that is applied to each Ethlizard.\n * Resets refer to when rewards are released into a pool for claim.\n * Technical documentation can be found at docs.ethlizards.io\n */\ncontract LizardLounge is ERC721, Ownable {\n    IEthlizards public immutable Ethlizards;\n    IGenesisEthlizards public immutable GenesisLiz;\n    IUSDC public immutable USDc;\n\n    // Last ID of the EthlizardsV2 Collection\n    uint256 constant MAXETHLIZARDID = 5049;\n    // The default assigned share of a staked Ethlizard, which is 100,\n    // we multiply by 1e18 for more precise calculation and storage of a user's shares\n    uint256 constant DEFAULTLIZARDSHARE = 100 * 1e18;\n\n    // When a LLZ is first initially minted\n    event LockedLizardMinted(address mintedAddress, uint256 mintedId);\n    // When a LLZ is transferred from this contract, ie, a user stakes their Ethlizards again\n    event LockedLizardReMinted(address ownerAddress, uint256 lizardId);\n    // When a user claims rewards from their lizard\n    event RewardsClaimed(uint256 tokenId, uint256 rewardsClaimed);\n    // A deposit is made\n    event RewardsDeposited(uint256 depositAmount);\n    // AllowedContracts is updated\n    event AllowedContractsUpdated(address allowedContract, bool status);\n    // Reset Share Value is updated\n    event ResetShareValueUpdated(uint256 newResetShareValue);\n    // Council address is updated\n    event CouncilAddressUpdated(address councilAddress);\n    // Updating the min days a user needs to be staked to withdraw their funds\n    event MinLockedTimeUpdated(uint256 minLockedTime);\n    // Min Reset Value has been updated\n    event MinResetValueUpdated(uint256 newMinResetValue);\n    // BaseURI has been updated\n    event BaseURIUpdated(string newBaseuri);\n\n    // Stores which tokenId was staked by which address\n    mapping(uint256 => address) public originalLockedLizardOwners;\n    // Stores the timestamp deposited per tokenId\n    mapping(uint256 => uint256) public timeLizardLocked;\n    // Stores the tokenId, and it's current claim status on each specific pool,\n    // when a claim is made, we make it true\n    mapping(uint256 => mapping(uint256 => bool)) stakePoolClaims;\n    // Stores which contracts Locked Lizards are able to interact and approve to\n    mapping(address => bool) public allowedContracts;\n\n    struct Pool {\n        // Timestamp of reset/pool creation\n        uint256 time;\n        // USDC value stored in the pool\n        uint256 value;\n        // The current overallShare when the pool is created\n        uint256 currentGlobalShare;\n    }\n\n    // Pool structure\n    Pool[] pool;\n\n    // Flipstate for staking deposits\n    bool public depositsActive;\n    // Address of the EthlizardsDAO\n    address public ethlizardsDAO = 0xa5D55281917936818665c6cB87959b6a147D9306;\n    // Council address used for depositing rewards\n    address public councilAddress;\n    // Current count of rewards that are not in a pool, in 1e6 decimals\n    uint256 public currentRewards;\n    // Total count of the rewards that have been invested\n    uint256 public totalRewardsInvested;\n    // Current count of Ethlizards staked\n    uint256 public currentEthlizardStaked;\n    // Current count of Ethlizards staked\n    uint256 public currentGenesisEthlizardStaked;\n    // The timestamp when deposits are enabled\n    uint256 public startTimestamp;\n    // Global counter for the combined shares of all Ethlizards\n    uint256 public overallShare;\n    // The timestamp of the last rebase\n    uint256 public lastGlobalUpdate;\n    // Counter for resets\n    uint256 public resetCounter = 0;\n    // Refers to the current percentage of inflation kept per reset\n    // EG, 20 = 80% slash in inflation, 20% of inflated shares kept per reset.\n    uint256 public resetShareValue = 20;\n    // The minimum rewards to be deposited for a reset to occur/a pool to be created.\n    // Is in 1e6 format due to USDC's restrictions\n    uint256 public minResetValue = 50000 * 1e6;\n    // How long a lizard is locked up for\n    uint256 public minLockedTime = 90 days;\n    // Counter for rebases\n    uint256 public rebaseCounter = 0;\n    // This is the current approximated rebase value, stored in 64.64 fixed point format.\n    // The real rebase value is calculated by nominator/2^64.\n    int128 public nominator = 18.5389777940780994 * 1e18;\n    // Metadata for LLZs\n    string public baseURI = \"https://ipfs.io/ipfsx\";\n\n    /**\n     * @notice Deploys the smart contract and assigns interfaces\n     * @param ethLizardsAddress Existing address of EthlizardsV2\n     * @param genesisLizaddress Existing address of Genesis Ethlizards\n     * @param USDCAddress Existing address of USDC\n     */\n    constructor(IEthlizards ethLizardsAddress, IGenesisEthlizards genesisLizaddress, IUSDC USDCAddress)\n        ERC721(\"Locked Lizard\", \"LLZ\")\n    {\n        Ethlizards = ethLizardsAddress;\n        GenesisLiz = genesisLizaddress;\n        USDc = USDCAddress;\n    }\n\n    /// @dev Modifier created to prevent marketplace sales and listings of Locked Lizard NFTs\n    modifier onlyApprovedContracts(address operator) {\n        if (!allowedContracts[operator]) {\n            revert NotWhitelistedContract();\n        }\n        _;\n    }\n\n    /**\n     * @notice Allows user to deposit their regular and Genesis Ethlizards for staking\n     * @dev Upon initial call, a user will mint a Locked Lizard per Ethlizards (genesis and regular) they stake.\n     * with matching tokenIds. Upon withdrawing their stake and staking their Ethlizard again,\n     * the LLZ will be stored in the contract and thus when a later deposit is made, it is transferred\n     * to the user. Genesis Ids are incremented by 5049 (The last tokenId of a regular Ethlizard).\n     * @param _regularTokenIds The array of tokenIds that is deposited by the caller\n     * @param _genesisTokenIds The array of Genesis tokenIds that is deposited by the caller\n     */\n    function depositStake(uint256[] calldata _regularTokenIds, uint256[] calldata _genesisTokenIds) external {\n        if (!depositsActive) {\n            revert DepositsInactive();\n        }\n\n        if (msg.sender != tx.origin) {\n            revert CallerNotAnAddress();\n        }\n\n        if (_regularTokenIds.length > 0) {\n            Ethlizards.batchTransferFrom(msg.sender, address(this), _regularTokenIds);\n        }\n        if (_genesisTokenIds.length > 0) {\n            GenesisLiz.batchTransferFrom(msg.sender, address(this), _genesisTokenIds);\n        }\n\n        // Iterate over the regular Ethlizards deposits\n        for (uint256 i = 0; i < _regularTokenIds.length; i++) {\n            // First time stakers mint their new LLZ\n            if (!_exists(_regularTokenIds[i])) {\n                mintLLZ(_regularTokenIds[i]);\n            } else {\n                // Later deposits\n                _safeTransfer(address(this), (msg.sender), _regularTokenIds[i], \"\");\n                emit LockedLizardReMinted(msg.sender, _regularTokenIds[i]);\n            }\n\n            // add the timestamp the lizard was locked, and map user's address to deposited tokenId\n            originalLockedLizardOwners[_regularTokenIds[i]] = msg.sender;\n            timeLizardLocked[_regularTokenIds[i]] = block.timestamp;\n            currentEthlizardStaked++;\n        }\n\n        // Iterate over the genesis Ethlizards deposits\n        for (uint256 i = 0; i < _genesisTokenIds.length; i++) {\n            // First time stakers mint their new LLZ, exception is here is the genesis ids\n            uint256 newGenesisId = _genesisTokenIds[i] + MAXETHLIZARDID;\n            if (!_exists(newGenesisId)) {\n                mintLLZ(newGenesisId);\n                emit LockedLizardMinted(msg.sender, newGenesisId);\n            } else {\n                // Later deposits\n                _safeTransfer(address(this), (msg.sender), newGenesisId, \"\");\n                emit LockedLizardReMinted(msg.sender, newGenesisId);\n            }\n\n            // add the timestamp the lizard was locked, and map user's address to deposited newGenesisId\n            originalLockedLizardOwners[newGenesisId] = msg.sender;\n            timeLizardLocked[newGenesisId] = block.timestamp;\n            currentGenesisEthlizardStaked++;\n        }\n\n        /// @notice Calls a global update to the overallShare, then add the new shares\n        updateGlobalShares();\n        uint256 totalDeposit =\n            (_regularTokenIds.length * DEFAULTLIZARDSHARE) + (_genesisTokenIds.length * DEFAULTLIZARDSHARE * 2);\n        overallShare += totalDeposit;\n    }\n\n    /**\n     * @notice Allows a user to withdraw their stake\n     * @dev Users should only be able to withdraw their stake of both Genesis and regular Ethlizard,\n     * and remove their current raw share from the overallShare.\n     * @param _regularTokenIds The array of regular Ethlizards tokenIds that is deposited by the caller\n     * @param _genesisTokenIds The array of genesis Ethlizards tokenIds that is deposited by the caller\n     */\n    function withdrawStake(uint256[] calldata _regularTokenIds, uint256[] calldata _genesisTokenIds) external {\n        if (msg.sender != tx.origin) {\n            revert CallerNotAnAddress();\n        }\n\n        /// @dev We need to update the overall share values first to ensure the future rebases are accurate\n        updateGlobalShares();\n        // Array of Locked Lizard tokenIds we transfer back to the staking contract\n        /// @dev Loop for regular Ethlizard tokenIds\n        for (uint256 i = 0; i < _regularTokenIds.length; i++) {\n            if (originalLockedLizardOwners[_regularTokenIds[i]] != msg.sender) {\n                revert CallerNotdepositor({\n                    depositor: originalLockedLizardOwners[_regularTokenIds[i]],\n                    caller: msg.sender\n                });\n            }\n\n            if (!isLizardWithdrawable(_regularTokenIds[i])) {\n                revert LizardNotWithdrawable();\n            }\n\n            // Remove the current raw share from the overall total\n            uint256 regularShare = getCurrentShareRaw(_regularTokenIds[i]);\n            overallShare = overallShare - regularShare;\n\n            // Reset values\n            timeLizardLocked[_regularTokenIds[i]] = 0;\n            originalLockedLizardOwners[_regularTokenIds[i]] = address(0);\n            currentEthlizardStaked--;\n\n            // Transfer the token\n            transferFrom(msg.sender, address(this), _regularTokenIds[i]);\n        }\n\n        for (uint256 i = 0; i < _genesisTokenIds.length; i++) {\n            if (originalLockedLizardOwners[_genesisTokenIds[i]] != msg.sender) {\n                revert CallerNotdepositor({\n                    depositor: originalLockedLizardOwners[_genesisTokenIds[i]],\n                    caller: msg.sender\n                });\n            }\n\n            if (!isLizardWithdrawable(_genesisTokenIds[i])) {\n                revert LizardNotWithdrawable();\n            }\n\n            // Remove the current raw share from the overall total\n            uint256 genesisShare = getCurrentShareRaw(_genesisTokenIds[i]) * 2;\n            overallShare = overallShare - genesisShare;\n\n            // Reset values\n            uint256 genesisId = _genesisTokenIds[i] + MAXETHLIZARDID;\n            timeLizardLocked[genesisId] = 0;\n            originalLockedLizardOwners[genesisId] = address(0);\n            currentGenesisEthlizardStaked--;\n\n            // Transfer the token\n            transferFrom(msg.sender, address(this), _genesisTokenIds[i]);\n        }\n\n        if (_regularTokenIds.length > 0) {\n            Ethlizards.batchTransferFrom(address(this), msg.sender, _regularTokenIds);\n        }\n        if (_genesisTokenIds.length > 0) {\n            GenesisLiz.batchTransferFrom(address(this), msg.sender, _genesisTokenIds);\n        }\n    }\n\n    /**\n     * @notice Allows a user to claim their rewards\n     * @dev When users unstake their NFT, they will lose their rewards, and the funds\n     * will be locked into the contract.\n     * @param _tokenIds Array of Locked Lizard tokenIds\n     * @param _poolNumber Number of the pool where the user is trying to claim rewards from\n     */\n    function claimReward(uint256[] calldata _tokenIds, uint256 _poolNumber) external {\n        uint256 claimableRewards;\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            if (originalLockedLizardOwners[_tokenIds[i]] != msg.sender) {\n                revert CallerNotdepositor({depositor: originalLockedLizardOwners[_tokenIds[i]], caller: msg.sender});\n            }\n\n            if (isRewardsClaimed(_tokenIds[i], _poolNumber)) {\n                revert RewardsAlreadyClaimed({tokenId: _tokenIds[i], poolNumber: _poolNumber});\n            }\n\n            if (timeLizardLocked[_tokenIds[i]] >= pool[_poolNumber].time) {\n                revert TokenStakedAfterPoolCreation({\n                    tokenStakedTime: timeLizardLocked[_tokenIds[i]],\n                    poolTime: pool[_poolNumber].time\n                });\n            }\n\n            // Rewards calculation\n            if (_tokenIds[i] > MAXETHLIZARDID) {\n                // Genesis tokens have 2x more rewards share\n                claimableRewards += (claimCalculation(_tokenIds[i], _poolNumber)) * 2;\n                stakePoolClaims[_tokenIds[i]][_poolNumber] = true;\n                emit RewardsClaimed(_tokenIds[i], (claimCalculation(_tokenIds[i], _poolNumber)) * 2);\n            } else {\n                claimableRewards += claimCalculation(_tokenIds[i], _poolNumber);\n                stakePoolClaims[_tokenIds[i]][_poolNumber] = true;\n                emit RewardsClaimed(_tokenIds[i], (claimCalculation(_tokenIds[i], _poolNumber)));\n            }\n        }\n\n        // Transfer the USDC rewards to the user, this function does not require approvals\n        USDc.transfer(msg.sender, claimableRewards);\n    }\n\n    /// @dev Required implementation for a smart contract to receive ERC721 token\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    /**\n     * @notice Allows a user to send their Locked Lizard NFT back to the original depositor address\n     * @dev As the claim function requires the user to hold the LLZ whilst also be the original depositor,\n     * this function sends their LLZs back to them.\n     * @param _tokenIds Array of Locked Lizard tokenIds\n     */\n    function retractLockedLizard(uint256[] calldata _tokenIds) external {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            if (originalLockedLizardOwners[_tokenIds[i]] != msg.sender) {\n                revert CallerNotdepositor({depositor: originalLockedLizardOwners[_tokenIds[i]], caller: msg.sender});\n            }\n\n            _safeTransfer(\n                ownerOf(_tokenIds[i]),\n                (originalLockedLizardOwners[_tokenIds[i]]),\n                /// @dev Don't think using msg.sender here is as safe as this\n                _tokenIds[i],\n                \"\"\n            );\n        }\n    }\n\n    /**\n     * @notice Allows an approved council address to deposit rewards\n     * @dev Council members deposit USDC, and once the deposited rewards reach the minResetValue,\n     * a new pool is created and the currentRewards counter is reset.\n     * @param _depositAmount Amount of USDC to withdrawal, in 6 DP\n     */\n    function depositRewards(uint256 _depositAmount) external {\n        if (msg.sender != councilAddress) {\n            revert AddressNotCouncil({council: councilAddress, caller: msg.sender});\n        }\n        USDc.transferFrom(msg.sender, address(this), _depositAmount);\n        currentRewards += _depositAmount;\n        totalRewardsInvested += _depositAmount;\n        if (currentRewards >= minResetValue) {\n            resetCounter++;\n            createPool(currentRewards);\n        }\n\n        emit RewardsDeposited(_depositAmount);\n    }\n\n    /**\n     * @notice Checks if a lizard is withdrawable\n     * @dev A lizard is withdrawable if it been over minLockedTime since it was deposited\n     * @param _tokenId TokenId of the lizard\n     */\n    function isLizardWithdrawable(uint256 _tokenId) public view returns (bool) {\n        if (block.timestamp - timeLizardLocked[_tokenId] >= minLockedTime) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @notice Checks if the rewards of a lizard for a specific pool have been claimed\n     * @dev Default mapping is false, when claim is made, mapping is updated to be true\n     * @param _tokenId TokenId of the lizard\n     * @param _poolNumber The pool number\n     */\n    function isRewardsClaimed(uint256 _tokenId, uint256 _poolNumber) public view returns (bool) {\n        return stakePoolClaims[_tokenId][_poolNumber];\n    }\n\n    /**\n     * @dev Overriden approval function to limit contract interactions and marketplace listings\n     */\n    function setApprovalForAll(address operator, bool approved) public override onlyApprovedContracts(operator) {\n        super.setApprovalForAll(operator, approved);\n    }\n\n    /**\n     * @dev Overriden approval function to limit contract interactions and marketplace listings\n     */\n    function approve(address operator, uint256 tokenId) public override onlyApprovedContracts(operator) {\n        super.approve(operator, tokenId);\n    }\n\n    /**\n     * @dev Flips the state of deposits, only called once.\n     */\n    function setDepositsActive() external onlyOwner {\n        if (depositsActive) {\n            revert DepositsAlreadyActive();\n        }\n        depositsActive = true;\n        startTimestamp = block.timestamp;\n        lastGlobalUpdate = block.timestamp;\n    }\n\n    /**\n     * @notice This function can only be called by the EthlizardsDAO address\n     *  This should only be used in emergency scenarios\n     * @param _withdrawalAmount Amount of USDC to withdrawal, in 6 DP\n     */\n    function withdrawalToDAO(uint256 _withdrawalAmount) external {\n        if (msg.sender != ethlizardsDAO) {\n            revert AddressNotDAO();\n        }\n        USDc.transfer(msg.sender, _withdrawalAmount);\n    }\n\n    /**\n     * @dev Sets contracts users are allowed to approve contract interactions with\n     * @param _address Contract address where access is being modified\n     * @param access The access of the address (false = users aren't allowed to approve, vice versa)\n     */\n    function setAllowedContracts(address _address, bool access) external onlyOwner {\n        allowedContracts[_address] = access;\n        emit AllowedContractsUpdated(_address, access);\n    }\n\n    /**\n     * @dev Sets the reset value. Values are stored in percentages, 20 = 20% of inflation rewards kept per reset\n     * @param _newShareResetValue New reset value\n     */\n    function setResetShareValue(uint256 _newShareResetValue) external onlyOwner {\n        if (_newShareResetValue >= 100) {\n            revert ShareResetTooHigh();\n        }\n        resetShareValue = _newShareResetValue;\n        emit ResetShareValueUpdated(_newShareResetValue);\n    }\n\n    /**\n     * @dev Whitelists a council address to be able to deposit rewards.\n     * There can only be one council address at the same time.\n     * @param _councilAddress The council's address\n     */\n    function setCouncilAddress(address _councilAddress) external onlyOwner {\n        councilAddress = _councilAddress;\n        emit CouncilAddressUpdated(_councilAddress);\n    }\n\n    /**\n     * @dev Updates how long a user needs to stake before they can withdraw their NFT\n     * @param _minLockedTime The amount of seconds a user needs to stake\n     */\n    function setMinLockedTime(uint256 _minLockedTime) external onlyOwner {\n        minLockedTime = _minLockedTime;\n        emit MinLockedTimeUpdated(minLockedTime);\n    }\n\n    /**\n     * @dev Modifies the minimum value for a reset to occur and a new pool to be created\n     * @param _newMinResetValue The minimum value for a reset, keep in mind USDC uses 6 decimal points\n     * so an input of 100,000,000,000 would be 100,000 USDC\n     */\n    function setMinResetValue(uint256 _newMinResetValue) external onlyOwner {\n        minResetValue = _newMinResetValue;\n        emit MinResetValueUpdated(_newMinResetValue);\n    }\n\n    /**\n     * @notice Updates metadata\n     */\n    function setBaseURI(string calldata _baseURI) external onlyOwner {\n        baseURI = _baseURI;\n        emit BaseURIUpdated(_baseURI);\n    }\n\n    /**\n     * @notice Overriden tokenURI to accept ipfs links\n     */\n    function tokenURI(uint256 _tokenId) public view override returns (string memory) {\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, Strings.toString(_tokenId), \".json\")) : \"\";\n    }\n\n    /**\n     * @notice Gets the current raw share of an Ethlizard\n     * @dev See technical documentation for how user's shares are calculated\n     * @param _tokenId TokenId for which share is being calculated\n     */\n    function getCurrentShareRaw(uint256 _tokenId) public view returns (uint256) {\n        // The current raw share which gets iterated over throughout the code\n        uint256 currentShareRaw;\n\n        // Counter for the current pool\n        uint256 currPool;\n        // Counter for the previous pool\n        uint256 prevPool;\n\n        // Case A: If there is only 1 pool, we do not need to factor into resets.\n        // Case B: If no pools have been created after the user has staked, we do not need to factor in resets.\n        if ((pool.length == 0) || (pool[pool.length - 1].time) < timeLizardLocked[_tokenId]) {\n            currentShareRaw = calculateShareFromTime(block.timestamp, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n            return currentShareRaw;\n        } // Case C: One or more pools created, but the user was staked before the creation of all of them.\n        else if (timeLizardLocked[_tokenId] <= pool[0].time) {\n            // Will always be the first pool because the the user is staked before creation of any pools\n            currentShareRaw = calculateShareFromTime(pool[0].time, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n\n            currentShareRaw = resetShareRaw(currentShareRaw);\n            // Setting the values for the loop\n            currPool = 1;\n            prevPool = currPool - 1;\n        } // Case D: User was staked between 2 pools\n        else {\n            // Iterate through the pools and set currPool to the next pool created after user is staked.\n            currPool = pool.length - 1;\n            prevPool = currPool - 1;\n            while (timeLizardLocked[_tokenId] < pool[prevPool].time) {\n                currPool--;\n                prevPool--;\n            }\n            // Calculate first share which is done by the first pool created after token staked\n            currentShareRaw =\n                calculateShareFromTime(pool[currPool].time, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n            currentShareRaw = resetShareRaw(currentShareRaw);\n            currPool++;\n            prevPool++;\n        }\n\n        // Counter for the last reset\n        uint256 lastReset = pool.length - 1;\n\n        // Looping over the pools\n        while (currPool <= lastReset) {\n            currentShareRaw = calculateShareFromTime(pool[currPool].time, pool[prevPool].time, currentShareRaw);\n            currentShareRaw = resetShareRaw(currentShareRaw);\n            currPool++;\n            prevPool++;\n        }\n\n        // Finding the inflation between the current time and the last pool's reset's time.\n        currentShareRaw = calculateShareFromTime(block.timestamp, pool[lastReset].time, currentShareRaw);\n        return currentShareRaw;\n    }\n\n    /**\n     * @notice Creates a new pool for rewards\n     * @dev A new pool is created everytime a reset occurs, and they contain a user's rewards.\n     * Reset of user's shares and inflation occurs after the values are pushed to the pool.\n     */\n    function createPool(uint256 _value) internal {\n        updateGlobalShares();\n        pool.push(Pool(block.timestamp, _value, overallShare));\n        currentRewards = 0;\n        resetGlobalShares();\n    }\n\n    /**\n     * @notice Resets the inflation for a user's shares\n     * @dev See technical documentation for how shares are calculated\n     */\n    function resetGlobalShares() internal {\n        uint256 nonInflatedOverallShare =\n            (currentEthlizardStaked * DEFAULTLIZARDSHARE) + (currentGenesisEthlizardStaked * DEFAULTLIZARDSHARE * 2);\n\n        overallShare = (((overallShare - nonInflatedOverallShare) * resetShareValue) / 100) + (nonInflatedOverallShare);\n    }\n\n    /**\n     * @notice Updates the global counter shares\n     * @dev See technical documentation for how shares are calculated\n     */\n    function updateGlobalShares() internal {\n        uint256 requiredRebases = ((block.timestamp - lastGlobalUpdate) / 1 days);\n        if (requiredRebases >= 1) {\n            overallShare = ((overallShare * calculateRebasePercentage(requiredRebases)) / 1e18);\n            rebaseCounter += requiredRebases;\n            lastGlobalUpdate += requiredRebases * 1 days;\n        }\n    }\n\n    /**\n     * @notice Calculates the rewards of a tokenId for the specific pool\n     * @param _tokenId The tokenId which rewards are being claimed\n     * @param _poolNumber The pool in which rewards are being claimed from\n     */\n\n    function claimCalculation(uint256 _tokenId, uint256 _poolNumber) public view returns (uint256 owedAmount) {\n        // The current raw share which gets iterated over throughout the code\n        uint256 currentShareRaw;\n        // Counter for the current pool\n        uint256 currPool;\n        // Counter for the previous pool\n        uint256 prevPool;\n\n        // Case A: If there is only 1 pool, we do not need to factor into any resets\n        if (_poolNumber == 0) {\n            currentShareRaw =\n                calculateShareFromTime(pool[_poolNumber].time, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n            owedAmount = (currentShareRaw * pool[_poolNumber].value) / pool[_poolNumber].currentGlobalShare;\n            return owedAmount;\n        } // Case B: One or more pools created, but the user was staked before the creation of all of them.\n        else if (timeLizardLocked[_tokenId] <= pool[0].time) {\n            // Second case runs if there has been at least 1 reset\n            // and the user was staked before the first reset\n            currentShareRaw = calculateShareFromTime(pool[0].time, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n            currPool = 1;\n            prevPool = currPool - 1;\n        } // Case C: User was staked between 2 pools\n        else {\n            // Iterate through the pools and set currPool to the next pool created after the user has staked.\n            currPool = pool.length - 1;\n            prevPool = currPool - 1;\n            while (timeLizardLocked[_tokenId] < pool[prevPool].time) {\n                currPool--;\n                prevPool--;\n            }\n            // Calculate first share which is done by the first pool created after token staked\n            currentShareRaw =\n                calculateShareFromTime(pool[currPool].time, timeLizardLocked[_tokenId], DEFAULTLIZARDSHARE);\n            currPool++;\n            prevPool++;\n        }\n\n        // Loop to apply inflations\n        while (currPool <= _poolNumber) {\n            currentShareRaw = resetShareRaw(currentShareRaw);\n            currentShareRaw = calculateShareFromTime(pool[currPool].time, pool[prevPool].time, currentShareRaw);\n            prevPool++;\n            currPool++;\n        }\n        // Calculate the rewards the user can claim\n        owedAmount = (currentShareRaw * pool[_poolNumber].value) / pool[_poolNumber].currentGlobalShare;\n        return owedAmount;\n    }\n\n    /**\n     * @notice Takes 2 different unix timestamps and returns the inflation-applied raw share of it.\n     * If 0 is called from requiredRebases, the rebase percentage will just be 1.\n     */\n    function calculateShareFromTime(uint256 _currentTime, uint256 _previousTime, uint256 _rawShare)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 requiredRebases = ((_currentTime - startTimestamp) - (_previousTime - startTimestamp)) / 1 days;\n        uint256 result = (_rawShare * calculateRebasePercentage(requiredRebases)) / 1e18;\n        return result;\n    }\n\n    /**\n     * @notice We calculate the 1.005^_requiredRebases via this function.\n     * @dev See technical documents for how maths is calculated.\n     *  We apply log laws to a compound interest formula which allows us to calculate\n     *  values in big number form without overflow errors\n     */\n    function calculateRebasePercentage(uint256 _requiredRebases) internal view returns (uint256) {\n        // Conversion of the uint256 rebases to int128 form\n        // Divide by 2^64 as the converted result is in 64.64-bit fixed point form\n        int128 requiredRebasesConverted = ABDKMath64x64.fromUInt(_requiredRebases) / (2 ** 64);\n        // Using compound formula specified in technical documents\n        int128 calculation = (ABDKMath64x64.log_2(nominator) * requiredRebasesConverted);\n        int128 result = (ABDKMath64x64.exp_2(calculation) * 1e16);\n        uint256 uintResult = ABDKMath64x64.toUInt(result) * 1e2;\n        return uintResult;\n    }\n\n    /**\n     * @dev Maths function to apply a reset to a user's shares\n     * @param _currentShareRaw The raw share where inflation is being slashed\n     */\n    function resetShareRaw(uint256 _currentShareRaw) internal view returns (uint256) {\n        return (((_currentShareRaw - DEFAULTLIZARDSHARE) * resetShareValue) / 100) + (DEFAULTLIZARDSHARE);\n    }\n\n    /**\n     * @notice Calls ERC721's mint function\n     * @param _tokenId TokenId being minted\n     */\n    function mintLLZ(uint256 _tokenId) internal {\n        _mint(msg.sender, _tokenId);\n        emit LockedLizardMinted(msg.sender, _tokenId);\n    }\n\n    ////////////\n    // Errors //\n    ////////////\n\n    // User is trying to approve contract interactions with a contract that hasn't been whitelisted\n    error NotWhitelistedContract();\n    // Deposits are not enabled yet\n    error DepositsInactive();\n    // The address isn't the same address as the depositor\n    error CallerNotdepositor(address depositor, address caller);\n    // The lizard has not passed the minimum lockup term and is not withdrawable\n    error LizardNotWithdrawable();\n    // Rewards have already been claimed for the lizard\n    error RewardsAlreadyClaimed(uint256 tokenId, uint256 poolNumber);\n    // Address isn't the council\n    error AddressNotCouncil(address council, address caller);\n    // Address isn't the Ethlizards DAO address\n    error AddressNotDAO();\n    // _newShareResetValue value cannot be more than 100%\n    error ShareResetTooHigh();\n    // Deposits are already active\n    error DepositsAlreadyActive();\n    // Tokens must have been staked prior to a pools creation\n    error TokenStakedAfterPoolCreation(uint256 tokenStakedTime, uint256 poolTime);\n    // No contract interactions\n    error CallerNotAnAddress();\n}\n"
    },
    "src/interfaces/IEthLizards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IEthlizards is IERC721 {\n    function batchTransferFrom(address _from, address _to, uint256[] calldata _tokenId) external;\n}\n"
    },
    "src/interfaces/IGenesisEthLizards.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\ninterface IGenesisEthlizards {\n    function batchTransferFrom(address _from, address _to, uint256[] calldata _tokenId) external;\n}\n"
    },
    "src/interfaces/IUSDC.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.17;\n\ninterface IUSDC {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    function balanceOf(address _owner) external returns (uint256);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function transfer(address to, uint256 value) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=lib/openzeppelin-contracts/",
      "abdk-libraries-solidity/=lib/abdk-libraries-solidity/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "forge-std/=lib/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}