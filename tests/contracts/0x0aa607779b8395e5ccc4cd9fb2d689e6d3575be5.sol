{{
  "language": "Solidity",
  "sources": {
    "contracts/IngredientGrabber.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n// Creator: Mr. Masterchef\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**********************************************************************************/\n/*   ______   _______  _______  _______ _________    _________          _______   */\n/*  (  ___ \\ (  ___  )(  ___  )(  ____ \\\\__   __/    \\__   __/|\\     /|(  ____ \\  */\n/*  | (   ) )| (   ) || (   ) || (    \\/   ) (          ) (   | )   ( || (    \\/  */\n/*  | (__/ / | |   | || |   | || (_____    | |          | |   | (___) || (__      */\n/*  |  __ (  | |   | || |   | |(_____  )   | |          | |   |  ___  ||  __)     */\n/*  | (  \\ \\ | |   | || |   | |      ) |   | |          | |   | (   ) || (        */\n/*  | )___) )| (___) || (___) |/\\____) |   | |          | |   | )   ( || (____/\\  */\n/*  |/ \\___/ (_______)(_______)\\_______)   )_(          )_(   |/     \\|(_______/  */\n/*                                                                                */\n/*              _______ _________ _______  _        _______  _                    */\n/*             (  ____ \\\\__   __/(  ____ \\( (    /|(  ___  )( \\                   */\n/*             | (    \\/   ) (   | (    \\/|  \\  ( || (   ) || (                   */\n/*             | (_____    | |   | |      |   \\ | || (___) || |                   */\n/*             (_____  )   | |   | | ____ | (\\ \\) ||  ___  || |                   */\n/*                   ) |   | |   | | \\_  )| | \\   || (   ) || |                   */\n/*             /\\____) |___) (___| (___) || )  \\  || )   ( || (____/\\             */\n/*             \\_______)\\_______/(_______)|/    )_)|/     \\|(_______/             */\n/**********************************************************************************/\n\ncontract IngredientGrabber is Ownable {\n    bool public portalFlow = true;\n\n    enum ArWiDerYett {\n        ISwearToGodIWillTurnThisCarAround,\n        AllDaPeeps,\n        AlrediDer\n    }\n\n    ArWiDerYett public spotInJurKnee = ArWiDerYett.ISwearToGodIWillTurnThisCarAround;\n\n    mapping(address => bool) public chefsHat;\n\n    uint256 public howMuchSoFar;\n\n    //////////\n\n    mapping(uint256 => uint256) public deyWatchinUuu;\n    CrudeBorneEggs public eggzzz;\n\n    ERC721StorageLayerProto public werzDaBookz;\n\n    //////////\n\n    /*************************************************************************/\n    /*** PAYMENT VARIABLES (Start) *******************************************/\n    address[] public based;\n    mapping(address => uint256) private howBased;\n    uint256 totalReceived = 0;\n    mapping(address => uint256) amountsWithdrawn;\n\n    modifier onlyBased() {\n        _isBased();\n        _;\n    }\n    function _isBased() internal view virtual {\n        require(howBased[msg.sender] > 0, \"not based\");\n    }\n    /*** PAYMENT VARIABLES (End) *******************************************/\n    /***********************************************************************/\n\n    constructor(\n        address cbeAddy_,\n        address storageLayer_,\n        address[] memory based_,\n        uint256[] memory howBased_\n    ) {\n        eggzzz = CrudeBorneEggs(cbeAddy_);\n        werzDaBookz = ERC721StorageLayerProto(storageLayer_);\n        werzDaBookz.registerMintingContract();\n\n        for (uint256 i = 0; i < based_.length; i++) {\n            howBased[based_[i]] = howBased_[i];\n        }\n        based = based_;\n    }\n\n    /*********************************************************************/\n    /*** PAYMENT LOGIC (Start) *******************************************/\n    receive() external payable {\n        totalReceived += msg.value;\n    }\n\n    function deyCanSeesUuuu() public onlyBased {\n        uint256 respects = (totalReceived/10000)*howBased[msg.sender];\n        uint256 toPay = respects - amountsWithdrawn[msg.sender];\n        amountsWithdrawn[msg.sender] = respects;\n        (bool press, ) = payable(msg.sender).call{value: toPay}(\"\");\n        require(press, \"F\");\n    }\n\n    function modsAsleepQuickPostSinks(address wotSinks) external onlyBased {\n        for (uint256 i = 0; i < based.length; i++) {\n            IERC20(wotSinks).transfer(\n                based[i],\n                (IERC20(wotSinks).balanceOf(address(this))/10000)*howBased[based[i]]\n            );\n        }\n    }\n\n    function daWitchIzDed(address unfathomablyBased) external onlyOwner {\n        IERC20(unfathomablyBased).transfer(msg.sender, IERC20(unfathomablyBased).balanceOf(address(this)));\n    }\n    /*** PAYMENT LOGIC (End) *******************************************/\n    /*******************************************************************/\n\n    //////////\n\n    function fryersOn() public onlyOwner {\n        portalFlow = !portalFlow;\n    }\n\n    function openKitchen(address whoGetzDaKey) public onlyOwner {\n        chefsHat[whoGetzDaKey] = true;\n    }\n\n    function arYuTravln(ArWiDerYett newSpott) public onlyOwner {\n        require(newSpott != ArWiDerYett.ISwearToGodIWillTurnThisCarAround && spotInJurKnee != ArWiDerYett.AlrediDer);\n        spotInJurKnee = newSpott;\n    }\n\n    //////////\n\n    function harambeIsStillAlive(uint256 whichEgg) public view returns (bool) {\n        uint256 eggBlocc = whichEgg/250;\n        uint256 eggSlot = whichEgg - eggBlocc*250;\n        return ((deyWatchinUuu[eggBlocc] >> eggSlot)%2 == 1);\n    }\n\n    function groseriRun(uint256[] memory eggz) public {\n        require(portalFlow, 'pf');\n        require(spotInJurKnee == ArWiDerYett.AllDaPeeps || (chefsHat[msg.sender] && (spotInJurKnee == ArWiDerYett.ISwearToGodIWillTurnThisCarAround)), 'ms/a');\n\n        uint256 curBlocc = 0;\n        uint256 bloccUpdates = 0;\n        uint256 eggBlocc;\n\n        bool fukGroseriz = true;\n        bool inDaLibrary = true;\n\n        for (uint256 i = 0; i < eggz.length; i++) {\n            eggBlocc = eggz[i]/250;\n            if (eggBlocc != curBlocc) {\n                deyWatchinUuu[curBlocc] = deyWatchinUuu[curBlocc] | bloccUpdates;\n                curBlocc = eggBlocc;\n                bloccUpdates = 0;\n            }\n\n            uint256 eggSlot = eggz[i] - curBlocc*250;\n            fukGroseriz = fukGroseriz && (deyWatchinUuu[curBlocc] >> eggSlot)%2 == 0;\n            inDaLibrary = inDaLibrary && eggzzz.ownerOf(eggz[i]) == msg.sender;\n\n            bloccUpdates += (1 << eggSlot);\n        }\n        require(fukGroseriz && inDaLibrary, 'f;i');\n\n        deyWatchinUuu[curBlocc] = deyWatchinUuu[curBlocc] | bloccUpdates;\n\n        werzDaBookz.storage_safeMint(msg.sender, msg.sender, eggz.length);\n\n        howMuchSoFar += eggz.length;\n    }\n}\n\n////////////////////\n\nabstract contract CrudeBorneEggs {\n    function balanceOf(address owner) public view virtual returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256);\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\n}\n\nabstract contract ERC721StorageLayerProto {\n    function registerMintingContract() public virtual;\n    function storage_safeMint(address msgSender, address to, uint256 quantity) public virtual;\n}\n\n////////////////////////////////////////\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}