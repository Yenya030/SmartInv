{{
  "language": "Solidity",
  "sources": {
    "contracts/OrbsSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\nimport \"./interfaces/IOrbsNFT.sol\";\r\n\r\ncontract OrbsSale is Ownable, ERC1155Holder {\r\n    event MaxSaleAmountUpdated(uint64 maxSaleByEther, uint256 maxSaleBy888);\r\n    event SaleRequested(address indexed user, uint256 amount, bool with888);\r\n    event FlushETH(uint256 amount);\r\n    event Flush888(address indexed to, uint256 amount);\r\n\r\n    uint256 public constant ETH_MAX_PRICE = 1111 * 1e16;\r\n    ///uint256 public constant ETH_MIN_PRICE = 888 * 1e16;\r\n    uint256 public constant ETH_MIN_PRICE = 1;\r\n    uint64 public constant ETH_SALE_COUNT = 2445;\r\n    uint64 public constant ETH_PRICE_FREEZE_HR = 47;\r\n    uint256 public constant EIGHT_TOKEN_ID = 888;\r\n    uint256 public constant PRICE_IN_888_NFT = 3;\r\n\r\n    IOrbsNFT public immutable orbsNft;\r\n    address public immutable eigthEightEightNft;\r\n    uint64 public immutable startTime;\r\n    uint64 public immutable ethStartTime;\r\n    uint64 public saledByEtherCount;\r\n    uint64 public maxSaleByEther;\r\n    uint64 public maxSaleBy888;\r\n\r\n    constructor(\r\n        address _orbsNft,\r\n        address _eigthEightEightNft,\r\n        uint64 _startTime,\r\n        uint64 _maxSaleByEther,\r\n        uint64 _maxSaleBy888\r\n    ) {\r\n        require(_orbsNft != address(0), \"OrbsSale: orbsNft is address(0)\");\r\n        require(\r\n            _eigthEightEightNft != address(0),\r\n            \"OrbsSale: 888NFT is address(0)\"\r\n        );\r\n        require(\r\n            _startTime >= block.timestamp,\r\n            \"OrbsSale: start time must be greater than now\"\r\n        );\r\n        orbsNft = IOrbsNFT(_orbsNft);\r\n        eigthEightEightNft = _eigthEightEightNft;\r\n        startTime = _startTime;\r\n        ethStartTime = _startTime + 1 days;\r\n\r\n        setMaxSaleAmount(_maxSaleByEther, _maxSaleBy888);\r\n    }\r\n\r\n    function purchaseWithEther(uint64 amount) external payable {\r\n        require(\r\n            block.timestamp >= ethStartTime,\r\n            \"OrbsSale: eth sale not started\"\r\n        );\r\n\r\n        require(amount <= maxSaleByEther, \"OrbsSale: limit max sale amount\");\r\n        require(\r\n            amount * currentPrice() == msg.value,\r\n            \"OrbsSale: invalid price\"\r\n        );\r\n        saledByEtherCount += amount;\r\n        require(\r\n            saledByEtherCount <= ETH_SALE_COUNT,\r\n            \"OrbsSale: cannot sale with Ether\"\r\n        );\r\n        orbsNft.requestMint(msg.sender, amount);\r\n\r\n        emit SaleRequested(msg.sender, amount, false);\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata\r\n    ) public override returns (bytes4) {\r\n        require(block.timestamp >= startTime, \"OrbsSale: not started\");\r\n\r\n        require(msg.sender == eigthEightEightNft, \"OrbsSale: not 888 NFT\");\r\n        require(id == EIGHT_TOKEN_ID, \"OrbsSale: not 888 Token\");\r\n        require(value % PRICE_IN_888_NFT == 0, \"OrbsSale: invalid value\");\r\n        require(from != address(0), \"OrbsSale: from is address(0)\");\r\n\r\n        uint256 amount = value / PRICE_IN_888_NFT;\r\n\r\n        require(amount <= maxSaleBy888, \"OrbsSale: limit max sale amount\");\r\n        orbsNft.requestMint(from, amount);\r\n\r\n        emit SaleRequested(from, amount, true);\r\n\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) public override returns (bytes4) {\r\n        revert(\"OrbsSale: Batch transfer is not allowed\");\r\n    }\r\n\r\n    function currentPrice() public view returns (uint256) {\r\n        if (ethStartTime >= block.timestamp) {\r\n            return ETH_MAX_PRICE;\r\n        }\r\n        uint64 hrsSinceStart = (uint64(block.timestamp) - ethStartTime) /\r\n            1 hours;\r\n\r\n        if (hrsSinceStart > ETH_PRICE_FREEZE_HR) {\r\n            return ETH_MIN_PRICE;\r\n        }\r\n\r\n        uint256 price = ETH_MAX_PRICE -\r\n            (((ETH_MAX_PRICE - ETH_MIN_PRICE) * hrsSinceStart) /\r\n                ETH_PRICE_FREEZE_HR);\r\n        return ((price + 5e15) / 1e16) * 1e16;\r\n    }\r\n\r\n    function setMaxSaleAmount(uint64 _maxSaleByEther, uint64 _maxSaleBy888)\r\n        public\r\n        onlyOwner\r\n    {\r\n        maxSaleByEther = _maxSaleByEther;\r\n        maxSaleBy888 = _maxSaleBy888;\r\n\r\n        emit MaxSaleAmountUpdated(_maxSaleByEther, _maxSaleBy888);\r\n    }\r\n\r\n    function flushETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"OrbsSale: nothing to flush\");\r\n        payable(msg.sender).transfer(balance);\r\n\r\n        emit FlushETH(balance);\r\n    }\r\n\r\n    function flush888(\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    ) external onlyOwner {\r\n        uint256 balance = IERC1155(eigthEightEightNft).balanceOf(\r\n            address(this),\r\n            EIGHT_TOKEN_ID\r\n        );\r\n\r\n        require(\r\n            balance != 0 && balance >= _amount,\r\n            \"OrbsSale: nothing to flush\"\r\n        );\r\n\r\n        uint256 amount = _amount == 0 ? balance : _amount;\r\n\r\n        IERC1155(eigthEightEightNft).safeTransferFrom(\r\n            address(this),\r\n            _to,\r\n            EIGHT_TOKEN_ID,\r\n            amount,\r\n            _data\r\n        );\r\n\r\n        emit Flush888(_to, amount);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "contracts/interfaces/IOrbsNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.11;\r\n\r\ninterface IOrbsNFT {\r\n    function requestMint(address beneficiary, uint256 amount)\r\n        external\r\n        returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}