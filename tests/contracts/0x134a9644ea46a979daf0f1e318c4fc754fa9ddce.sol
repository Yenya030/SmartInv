{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@nervous-net/contract-kit/src/ScopedWalletMintLimit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >0.7.0;\n\nabstract contract ScopedWalletMintLimit {\n    struct ScopedLimit {\n        uint256 limit;\n        mapping(address => uint256) walletMints;\n    }\n\n    mapping(string => ScopedLimit) internal _scopedWalletMintLimits;\n\n    function _setWalletMintLimit(string memory scope, uint256 _limit) internal {\n        _scopedWalletMintLimits[scope].limit = _limit;\n    }\n\n    function _limitScopedWalletMints(\n        string memory scope,\n        address wallet,\n        uint256 count\n    ) internal {\n        uint256 newCount = _scopedWalletMintLimits[scope].walletMints[wallet] +\n            count;\n        require(\n            newCount <= _scopedWalletMintLimits[scope].limit,\n            string.concat(\"Exceeds limit for \", scope)\n        );\n        _scopedWalletMintLimits[scope].walletMints[wallet] = newCount;\n    }\n\n    modifier limitScopedWalletMints(\n        string memory scope,\n        address wallet,\n        uint256 count\n    ) {\n        _limitScopedWalletMints(scope, wallet, count);\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20 token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _released[account] += payment;\n        _totalReleased += payment;\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        _erc20Released[token][account] += payment;\n        _erc20TotalReleased[token] += payment;\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ERC721S.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Sequential is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Total number of tokens burned\n    uint256 internal _burnCount;\n\n    // Array of all tokens storing the owner's address\n    address[] internal _tokens = [address(0x0)];\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function totalMinted() public view returns (uint256) {\n        return _tokens.length - 1;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalMinted() - _burnCount;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     * This is implementation is O(n) and should not be\n     * called by other contracts.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 currentIndex = 0;\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            if (_tokens[i] == owner) {\n                if (currentIndex == index) {\n                    return i;\n                }\n                currentIndex += 1;\n            }\n        }\n        revert(\"ERC721Enumerable: owner index out of bounds\");\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _tokens[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Sequential.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokens[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721Sequential.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to) internal virtual {\n        _safeMint(to, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, bytes memory _data) internal virtual {\n        _mint(to);\n        require(\n            _checkOnERC721Received(address(0), to, _tokens.length - 1, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n\n        uint256 tokenId = _tokens.length;\n        _beforeTokenTransfer(address(0), to, tokenId);\n        _balances[to] += 1;\n        _tokens.push(to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Sequential.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n        _burnCount++;\n        _balances[owner] -= 1;\n        _tokens[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721Sequential.ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _tokens[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Sequential.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}"
    },
    "contracts/NervousNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/******************************************************************************\n\n  ███╗   ██╗███████╗██████╗ ██╗   ██╗ ██████╗ ██╗   ██╗███████╗\n  ████╗  ██║██╔════╝██╔══██╗██║   ██║██╔═══██╗██║   ██║██╔════╝\n  ██╔██╗ ██║█████╗  ██████╔╝██║   ██║██║   ██║██║   ██║███████╗\n  ██║╚██╗██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██║   ██║██║   ██║╚════██║\n  ██║ ╚████║███████╗██║  ██║ ╚████╔╝ ╚██████╔╝╚██████╔╝███████║\n  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝  ╚═══╝   ╚═════╝  ╚═════╝ ╚══════╝\n  work with us: nervous.net // dylan@nervous.net // steve@nervous.net\n  ██╗  ██╗\n  ╚██╗██╔╝\n   ╚███╔╝\n   ██╔██╗\n  ██╔╝ ██╗\n  ╚═╝  ╚═╝\n\n\n                           .;odo;.       .''.         .:dxo,                    .lkko,      .;cc,.\n                          ;kXWMWNk;    .oOKX0x,      ,kNWMWXo.      ,lddo:.    ,OWMMWXd.   :ONWWXk;\n                         cXMMMMMMMX:  ,0WMMMMMK;    ,KMMMMMMWo.   .dNMMMMW0:  .kMMMMMMWd. :XMMMMMMX:\n                        .kMMMMMMMMMO.'OMMMMMMMMO.   oWMMMMMMMk;.  lNMMMMMMMX; ,KMMMMMMM0' dWMMMMMMMx.\n                        ,KMMMMMMMMMXcdWMMMMMMMMN:  .dMMMMMMMMx'. .xMMMMMMMMMk.'0MMMMMMM0' oWMMMMMMMx.\n                        :XMMMMMMMMMNOKMMMMMMMMMWo   oWMMMMMMX:   .dMMMMMMMMMNc'kMMMMMMM0' cNMMMMMMWo\n                        cNMMMMMMMMMMWWMMMMMMMMMMx.  :XMMMMMM0,    oWMMMMMMMMM0lOMMMMMMMk. cNMMMMMMX;\n                        lWMMMMMMMMMMMMMMMMMMMMMMO.  '0MMMMMM0'    cNMMMMMMMMMWXNMMMMMMWd  cNMMMMMM0'\n                        oWMMMMMMMMMMMMMMMMMMMMMMX;  .kMMMMMMK,    :NMMMMMMMMMMMMMMMMMMN:  cNMMMMMMk.\n                       .xMMMMMMWWMMMMMMMWNWMMMMMWx.  oWMMMMMX;    cNMMMMMMMMMMMMMMMMMMK,  :NMMMMMMO.\n                       '0MMMMMMKKMMMMMMMKONMMMMMMX:  cNMMMMMNc    oWMMMMMMXXMMMMMMMMMMO.  cNMMMMMMK,\n                       :NMMMMMNloNMMMMMMkl0MMMMMMMx. cNMMMMMWl.  .xMMMMMMMkoXMMMMMMMMMO.  lWMMMMMMNc\n                       oWMMMMMO.'OMMMMMNc.xMMMMMMMO. lWMMMMMWo.  .OMMMMMMWd.oNMMMMMMMMk.  oWMMMMMMWl\n                       lWMMMMX:  ;OWMWXl. :XMMMMMMO. lWMMMMMNc   .kMMMMMMX: .dNMMMMMMMk.  lWMMMMMMX:\n                       ,OWMWKc    .,:;.   .lXMMMMXc  'OWMMMWx.    :KWMMWKc   .lXWMMMMNl   .xNMMMMXo.\n                        .;c;.               'lxxl'    .cdxo;.      .:cc;.      .:dkkx:.    .,looc'\n\n\n     .:ll:.      .,;'            ..,;;,.      ...                   ..',;,'.   ....            ..''..\n    cXWMMWKc   .lKWWNk,    .,:lox0XWWWWKl. .cOKXKkc.     ..,;;::codk0XNWWWNKocxKXX0d'   .:oodxOKNNNX0o.     .:oxkO0Okd:.\n   '0MMMMMMX;  oNMMMMM0'  :0WMMMMMMMMMMM0' cNMMMMMWo.  ;xKNWWWMMMMMMMMMMMMMMMWMMMMMMO' ;KWMMMMMMMMMMMNl  .:kXWMMMMMMMMWXo.\n   ,KMMMMMMWx.'0MMMMMMNc .OMMMMMMMMMMMMXo..dMMMMMMMK, cXMMMMMMMMMMMMMMMMMMMWWMMMMMMMN:.dWMMMMMMMMMMMWO, ,OWMMMMMMMMMMMMMNc\n   ,KMMMMMMMO':XMMMMMMNl '0MMMMMMWX0kdl'  .xMMMMMMMK,.dWMMMMMMMMMMMMMMMWN0odXMMMMMMMX; oWMMMMMN0kxdl;. '0MMMMMMWWMMMMMMMNc\n   ,KMMMMMMMXcoWMMMMMMNl .kMMMMMWx'...     dWMMMMMM0, .oOKKKKKKXMMMMM0l:'. '0MMMMMMMk. :XMMMMM0,       oWMMMMM0:,cd0NWNKl.\n   ;XMMMMMMMWkOWMMMMMMWo  lWMMMMW0xkO00x,  oWMMMMMM0'    .....'dWMMMWd.    .xMMMMMMWo  '0MMMMMXkxkxo, .dMMMMMMKl,'',;;,.\n   cNMMMMMMMMNNMMMMMMMMk. cNMMMMMMMMMMMXc  lWMMMMMMO.        .'dMMMMMk.     cNMMMMMWo  .OMMMMMMMMMMMO. :KMMMMMMWWNNXKko'\n  .dWMMMMMMMMMMMMMMMMMMK, ;XMMMMMNX0kdl,   lWMMMMMMx.        .:kMMMMMK,     ,KMMMMMMx. .kMMMMMWXKOko'   ,kXWMMMMMMMMMMMXl.\n  '0MMMMMMMMMMMMMWMMMMMNl ;XMMMMXc..       oWMMMMMNl. ..     'l0MMMMMNc     .OMMMMMMk. .kMMMMWx'.         .:loooooxXMMMMX:\n  lNMMMMMNWMMMMMN0XMMMMMx.;XMMMMXl:oxO0Ox;.xMMMMMMW0k0K0Ol.  ,xKMMMMMWd     .kMMMMMM0' .kMMMMWd.';:cc,. .;odoc,. .:KMMMMNc\n  OMMMMMWkOMMMMMOcOMMMMM0';XMMMMMWMMMMMMMNkKMMMMMMMMMMMMMWd. ;kKMMMMMMd.    .OMMMMMMK, .OMMMMMNXNWMMMW0ldNMMMMWK00NMMMMWk.\n  NMMMMMX:;KMMMXc.dWMMMMX:;XMMMMMMMMMMMMMX0XMMMMMMMMMMMMMWd. ,dKMMMMMWl     .OMMMMMMO. .xMMMMMMMMMMMMMM0kXMMMMMMMMMMMMNx.\n  NMMMMWx. 'col,  :XMMMMX:.xWMMMMMMWWNXOd,'kWMMMMMWNNXXX0o.  .'dWMMMWO'     .oNMMMMXc   ,0MMMMMMMMWWNKx,.;d0NWMMMMWNKx;\n  c0XNKo.          c0NN0l. .lO0Odl:;,..    .:odol:,'.....      .lkOkl.        ,lddc'     .lxkdlc::;,'.     .':clcc;'.\n   .,;.             .;;.     ...                                  .\n\n\n                                                                           ..  ...\n                                                          .....'''''';clldkxdddxddoc:c,\n                                                  .';cldkO0KXXXNNNNNX0xool;...'. .,;;ckxol;.\n                                             .;ldOKXNX0OxolccdkKWOc;,.                .''cOkc'\n                                         .:dOXNX0xl:'..    'dOKKx.     ':cccllll:;:c,     .:x0l\n                                      'lkXWXko;..         ;KWOl,  ,cllkOd:;,. ..,,,:xxoll;. .OK,\n                                   .ckXNKd:.              :KWNKOxOXKxol'    ..'''....',;dKOloKO'\n                                 ,dKNKd;.    .             .:okOKOl.   .,ldxxxxddddxdl;..;dOXWKc.\n                               ;kNNOc.     ''.                  .    ,okko;..     ..,cdxl.  ,kWWk;\n                             ,xNNk;.     .l:           ..          ,xko'    ..'''''....'okc. .cKWXd.\n                           .oXNk;        :k:.,::'    ';..        .oOl.    .,;;;:ldxxxo:..;Ox.  .dNW0;\n                          ,OWKc.         .cddl;ck:  ;o.         .xk,    .,;;;lkKWMMWWWXkc.;Ox.   :KWXl.\n                         cXWk'                 .OO,;Od.        .kO,    .,;;ckNMMMXd::oKWXo'lKl    'OWNo.\n                       .lNNo.                  .cO00x'       .'d0;    .,;;l0WMMMX:    ,KMXl,kO.    .kWNo.\n                       lNNo. ..        ...       ...   ..    ;k0d.   .,;;:OWMMMMx.    .kMWk,l0:.  . .kWXc\n                      :XNo..,.  .     .'.             ..     oNK;    ';;;oXMMMMMx.    '0MM0;:Oc...'. ,0M0'\n                     '0Wk..;..,::l;   ;;              ;.    .dW0,   .,;;;dNMMMMMNd.  'xNMM0;:Oc ,'':. cXWd\n                     oWK;.:, :l. lx.  cl.             :,     oW0,   .,;;;oXMMMMMMWX0Oxc:OWk,cO: ;;.l: .kM0'\n                    '0Wx.,l..d; .dk. ,xl     .,.      :c     cK0:   .,;;;lKMMMMMMMMMNc  oKo'oO, ::.oo  cNNc\n                    :XNc :d;lk' ;0l.cOc      .:'     ;d;     .lko    .;;;;dNMMMMMMMMWk:l0x;,kx..dc.kd  '0Wo\n                    cNK; .cdo, .kO' :0c       .;:'  :k:       .lk,   .';;;:xXMMMMMMMMMWNx:.cO: .OOk0;  .kMd.\n                  .;OWK,       cXo  .d0,        :x, ;Oc        .xx.   .',;;;lxKNWMMMMWKd;.,kd.  ,lo,   .kMx.\n                .o0WMMX;      .dNc   ;Kx.       :Kl .Ox.        'xx'    .';;;;:ldxkkxo:,..dx.          .OM0:.\n              .lKW0oxNWl       oNd.  :Xx.       ,K0lxKc  .;:'    .oOc.    ..',,,,,,,'...'xx.  ,c'      ,KMWNKd;\n             .xWXo. 'OMk.      'kXkldKO, .....   ,oxd;  '0WWO'     ;xx:.       ....   .lkl.  .OWo      lNXl;o0Xk,\n            .dWXc    lNNo,:cloookNMNOl;cxkxxddoc.       .ckk:.       ,oxo:'.      .':odl'     ;c.     .kWk.  .oXXl.\n            ;XNl     :XMWWNXKK000KXN0k00l'.   .;c'   ,c:.   .,:;.      .;looollcllllc,.    ;:.  :c.   cNNc     :XXc\n            lWK,  .;xXXOo:,........,cxKKc.       .  '0MK;   cXMWd.          .....      .. '0K; .OK;  .kMNx:.   .dWk.\n           .dWK; .xNKo'      .;cc:,   .lOd.          ,c,    .;c:.   'c.              .,d:  ,,.  .'    ,ldOXKx,  dWO.\n        .;d0XXNklOXo.        ,:,.,c:.   'xc                        .loccc;;,''',;;:ccdklc,                .l0KolKM0:.\n       ;ONXd,.lKW0:                ..    'c.                      .;' .od;::cx0KOl;'.cx' ..                 .oXWXO0XO:\n     .oNNx'    dK:                        .                       .    ld.  .oocdc..,xo.                     .oKc .c0No.\n    .oNXc     .dd.                                                     .:oloo:. 'clll;.         ..            ,x;   ;KNl\n    :XXc      .l:                                                         ..                    ,:.           'l.   .dWO.\n   .xWx.       ;,                                  ..;'  .;,.                               .  ;k;    .'      ..     lWO'\n   .ONl        ..     ..                             ,xcckdlc'...                         .';coOk.    .:.           .xWk.\n   .kWo               :,                              ,dx:                                   .:c'    .c;            :XX:\n    lNK;              ll                                                                            ,kc            :KNl.\n    .dNKc.            ;k:          ..                       ';;,..              .                   cKc         .:kX0:\n     .cKNOc'          'kXd'         ,:'..;cc:.    .:cll;.  c0l..             .''.    .             'ONk:,'',;cok00x:.\n       .lOXXOdlc:::ldkKWN00ko:'.    .cOXNXOoldo. .dl''lK0dxX0,             'ckOl'.   .',;cl,    'cdOkookKNX0O0NXl.\n          ':ok0KNWWXk0W0:..:oOKKOkkOO00O0Kx:''xx.:x,.:xXX0XWXxdl:,'...';ldkxlok0K0kdollox0NX: .lxl:,.. 'kMNo.;KO.\n               .cKWOlO0;     cXOc:c::,'..:d0KKXK;;0KKKOl,.'cdO0KXXXKKK0Oxl;....';codxkxxdolOd..xl.......xWWXk00;\n                 'dKWNl     ,00;............;l0X;.dKo'..........',;;;,'.................. .kd. od......,0NxkWO'\n                   cXO.    .xNx::;....;lol;..'kK, 'kd....'......',;,...':cc,....',;'...,:cd0l  :Oo;,;ccl0Wd:OO.\n                   cXo     cXNNKOO0kk0KOk0KOdkXk.  oKxxkOOOkxxkkOkkOOkO0KKXKOddkO0K0OkOKXXN0,  ;KNXXNWX00x, lKl\n                   oXc    .O0lkXxodolodc''lOKNWd. .dXOl:,:dkkOOd,..';coxddlclooc;:odkOkd::0O.  oNNNKkK0;.   .oOx:...\n                  .dX:    :Xx.,OKOl'..':lcc:;dNKl:dXO;,:::;..;cc:;,',cl:;cl,.....,lddl;...dKxcdKWMK,'0O'      .okddxo'\n                 .lKO'    ;0Kc..,xXx'..;odl:'.:xOOkdoodc'.......:oooo:....;cc:::cc;,;ccc,.:xkOKXNXl.oKc .;.        'kO'\n                'kKo.      .dKx:.'OXo:c:;'',::..'::::::l:.....';c:',c:.....'colo:......:ooocoKX0o, '0k.  ,:.        dK:\n               'OXc         'dkKKxxXXx'......;ccl:'....':lc::cl:'....;::;,:c:'.,cc'..';clc:oKWx.   '0x.   ...  .,;;oKx.\n               lNo.            ,0Xl;kXo.....':llc:'....'clclo;........,lool,.....:lloo:,...,OWo     l0:        ;0Oxd;.\n               dX:             .xNl ,K0;.;cll:'..':;'':l:...cool:'...:lc:lddl;...,lodxl,...;0Nc     ;0l     .  :0c\n               ;0d.        .;;:dKk' .dNK0KKK0Oxl,,ck0KKKkdodOXNKOkkk000000O0XX0xxO00000OkdxKXd.    ;Od..,. ,,  .dO'\n               ,0d... ..  .dKxdo;.   .:xkko:;ckKXNX0d:,;ldxdONXo..;ldkXXl...'cdOO0N0:..':clc,    .lOc.'c'.cl.   lK:\n              ,Ok',; .:.  .o0:.                .oNO.        cXXl     .OX;        ,0k.            ,0d.:d'.ox.   .k0,\n             .kX:'o, 'o,   .lOk;                cNk.        lXXl     '0K;        '0k.            .dOxKd.,0o   'xXo\n             :XO':k' .xl     .kK;               lNx.        lXXl     ,0K,        '0k.              .;dOdkXKdld00c.\n             cN0,l0;  l0c    .dX:             .;kNo         lNWO:. .;dN0'        ;KXd'                .;:;;:lc;.\n             'ONOOXo. .l0kolokOl.             oNWNOlccccllodOKXNNxckNMMNxllllooodkKXWKollc;.\n              .oOXNXo.  cXNkl:.               :X0xxkkkkkxkO00KKKKKKKXNWWNKkxxxxxO0000000KXXKOl.\n                 .'l0KOk0Xd.                  lXkoooooook0KOkddoooooodk0XNXkddO0Oxdooooooodk0XKo.\n                    .,cc:'                   .kKdooooodO0kdooooooooooolodkXWKOkdoooooooooooood0Nk'\n                                            .oKkooooooxkooooooooooooooooookXWOooooooooooooooood0Nx.\n                                         .,;dKOooooooooooooooooooooooooooooONXxooooooooooooooooxXX:\n                                        ;KXKNXxooooooooooooooooooooooooooooxXNOooooooooooooooooo0Nd.\n                                        oWKxkKKkdooooooooooooooooooooooooooxXMNKxooooooooooooood0WN0c.\n                                        'ONKkxk000OkdooooooooooooooooooodxkKNKXWXxoooooooooddxk0XK0NK,\n                                         .l0XXOkxkOOOOOOOOOOOOOOOOOO0000000OxkKWN0OOOO000000000OxdONO'\n                                           .,oOKXK0OkxxxkkkkOOOOkkkxxxxxxxkOKNNKOkkkkkxxxddddxxO0KKx'\n                                               .;ldO0KXXKK000OOOOOOO00KXXXK0KXXKK000000KKKKKK00kd:.\n                                                    ..,:cloddddxxdddolc:,.....',;::cccccc:;,'..\n\n*/\n\nimport \"./ERC721S.sol\";\nimport \"@nervous-net/contract-kit/src/ScopedWalletMintLimit.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n// @title  NervousNFT Mini-Melties ERC-721\n// @dev    An ERC-721 contract for creating mini-melties.\n// @author Nervous - https://nervous.net + Mini-Melties - https://minimelties.com\ncontract NervousNFT is\n    ERC721Sequential,\n    ReentrancyGuard,\n    PaymentSplitter,\n    Ownable,\n    ScopedWalletMintLimit\n{\n    using Strings for uint256;\n    using ECDSA for bytes32;\n\n    string public constant R =\n        \"We are Nervous. Are you? Let us help you with your next NFT Project -> dylan@nervous.net\";\n\n    string private constant PRESALE_PREFIX = \"NERVOUS\";\n    string public baseURI;\n    uint256 public mintPrice;\n\n    string public vipPresaleName;\n    string public generalPresaleName;\n    string public crossmintPresaleName;\n    bytes32 public crossmintMerkleRoot;\n\n    address public vipPresaleSigner;\n    address public generalPresaleSigner;\n    address public crossmintAddr;\n\n    uint64 public startPublicMintDate;\n    uint64 public endMintDate;\n    uint64 public presaleDate;\n    bool public mintingEnabled;\n    uint16 public immutable maxSupply;\n    uint8 public maxPublicMint;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory initBaseURI,\n        uint16 _maxSupply,\n        address[] memory payees,\n        uint256[] memory shares\n    ) ERC721Sequential(name, symbol) PaymentSplitter(payees, shares) {\n        baseURI = initBaseURI;\n        maxSupply = _maxSupply;\n        mintPrice = 0.2 ether;\n        startPublicMintDate = type(uint64).max;\n        endMintDate = type(uint64).max;\n        presaleDate = type(uint64).max;\n        mintingEnabled = true;\n        maxPublicMint = 10;\n    }\n\n    ///////\n    /// Minting\n    ///////\n\n    /// @notice Main minting. Requires either valid pass or public sale\n    function mint(uint256 numTokens, bytes calldata pass)\n        external\n        payable\n        requireValidMint(numTokens, msg.sender)\n        requireValidMintPass(numTokens, msg.sender, pass)\n    {\n        _mintTo(numTokens, msg.sender);\n    }\n\n    /// @notice Crossmint public minting.\n    function crossmintTo(uint256 numTokens, address to) external payable {\n        crossmintWithProof(numTokens, to, new bytes32[](0));\n    }\n\n    /// @notice Crossmint presale or public minting. Requires proof of presale\n    function crossmintWithProof(\n        uint256 numTokens,\n        address to,\n        bytes32[] memory merkleProof\n    )\n        public\n        payable\n        requireValidMint(numTokens, to)\n        requireValidCrossmintMerkleProof(numTokens, to, merkleProof)\n    {\n        _mintTo(numTokens, to);\n    }\n\n    /// @notice internal method for minting a number of tokens to an address\n    function _mintTo(uint256 numTokens, address to) internal nonReentrant {\n        for (uint256 i = 0; i < numTokens; i++) {\n            _safeMint(to);\n        }\n    }\n\n    ///////\n    /// Magic\n    ///////\n\n    /// @notice owner-only minting tokens to the owner wallet\n    function magicMint(uint256 numTokens) external onlyOwner {\n        require(\n            totalMinted() + numTokens <= maxSupply,\n            \"Exceeds maximum token supply.\"\n        );\n\n        require(\n            numTokens > 0 && numTokens <= 100,\n            \"Machine can dispense a minimum of 1, maximum of 100 tokens\"\n        );\n\n        _mintTo(numTokens, msg.sender);\n    }\n\n    /// @notice owner-only minting tokens to receiver wallets\n    function magicGift(address[] calldata receivers) external onlyOwner {\n        uint256 numTokens = receivers.length;\n        require(\n            totalMinted() + numTokens <= maxSupply,\n            \"Exceeds maximum token supply.\"\n        );\n\n        for (uint256 i = 0; i < numTokens; i++) {\n            _safeMint(receivers[i]);\n        }\n    }\n\n    /// @notice owner-only minting tokens of varying counts to\n    /// receiver wallets\n    function magicBatchGift(\n        address[] calldata receivers,\n        uint256[] calldata mintCounts\n    ) external onlyOwner {\n        require(receivers.length == mintCounts.length, \"Length mismatch\");\n\n        for (uint256 i = 0; i < receivers.length; i++) {\n            address to = receivers[i];\n            uint256 numTokens = mintCounts[i];\n            require(\n                totalMinted() + numTokens <= maxSupply,\n                \"Exceeds maximum token supply.\"\n            );\n            _mintTo(numTokens, to);\n        }\n    }\n\n    /// Mint limits\n\n    function crossmintPresaleLimit() external view returns (uint256) {\n        return _scopedWalletMintLimits[crossmintPresaleName].limit;\n    }\n\n    function vipPresaleLimit() external view returns (uint256) {\n        return _scopedWalletMintLimits[vipPresaleName].limit;\n    }\n\n    function generalPresaleLimit() external view returns (uint256) {\n        return _scopedWalletMintLimits[generalPresaleName].limit;\n    }\n\n    ///////\n    /// Utility\n    ///////\n\n    /* URL Utility */\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory _baseTokenURI) external onlyOwner {\n        baseURI = _baseTokenURI;\n    }\n\n    /* eth handlers */\n\n    function withdraw(address payable account) external virtual {\n        release(account);\n    }\n\n    function withdrawERC20(IERC20 token, address to) external onlyOwner {\n        token.transfer(to, token.balanceOf(address(this)));\n    }\n\n    /* Crossmint */\n\n    function setCrossmintConfig(\n        string memory name,\n        address addr,\n        uint256 limit,\n        bytes32 merkleRoot\n    ) external onlyOwner {\n        crossmintPresaleName = name;\n        crossmintAddr = addr;\n        _setWalletMintLimit(name, limit);\n        crossmintMerkleRoot = merkleRoot;\n    }\n\n    /* Sale & Minting Control */\n\n    function setPublicSaleStart(uint256 timestamp) external onlyOwner {\n        startPublicMintDate = uint64(timestamp);\n    }\n\n    function setEndMintDate(uint256 timestamp) external onlyOwner {\n        endMintDate = uint64(timestamp);\n    }\n\n    function setPresaleDate(uint256 timestamp) external onlyOwner {\n        presaleDate = uint64(timestamp);\n    }\n\n    function setVipPresaleConfig(\n        string memory name,\n        address signer,\n        uint256 limit\n    ) external onlyOwner {\n        vipPresaleName = name;\n        vipPresaleSigner = signer;\n        _setWalletMintLimit(name, limit);\n    }\n\n    function setGeneralPresaleConfig(\n        string memory name,\n        address signer,\n        uint256 limit\n    ) external onlyOwner {\n        generalPresaleName = name;\n        generalPresaleSigner = signer;\n        _setWalletMintLimit(name, limit);\n    }\n\n    function toggleMinting() external onlyOwner {\n        mintingEnabled = !mintingEnabled;\n    }\n\n    function setMintPrice(uint256 price) external onlyOwner {\n        mintPrice = price;\n    }\n\n    function setMaxPublicMint(uint256 _maxPublicMint) external onlyOwner {\n        maxPublicMint = uint8(_maxPublicMint);\n    }\n\n    ///////\n    /// Modifiers\n    ///////\n\n    modifier requireValidMint(uint256 numTokens, address to) {\n        require(block.timestamp < endMintDate, \"Minting has ended\");\n        require(mintingEnabled, \"Minting isn't enabled\");\n        require(totalMinted() + numTokens <= maxSupply, \"Sold Out\");\n        require(numTokens > 0, \"Minimum of 1\");\n        require(numTokens <= maxPublicMint, \"Maximum exceeded\");\n        require(\n            msg.value >= numTokens * mintPrice,\n            \"Insufficient Payment: Amount of Ether sent is not correct.\"\n        );\n        _;\n    }\n\n    modifier requireValidMintPass(\n        uint256 numTokens,\n        address to,\n        bytes memory pass\n    ) {\n        if (block.timestamp < startPublicMintDate) {\n            if (pass.length == 0) {\n                revert(\"Public sale has not started\");\n            }\n            address signer = keccak256(abi.encodePacked(PRESALE_PREFIX, to))\n                .toEthSignedMessageHash()\n                .recover(pass);\n\n            if (block.timestamp < presaleDate) {\n                revert(\"Presale has not started\");\n            }\n\n            if (signer == vipPresaleSigner) {\n                _limitScopedWalletMints(vipPresaleName, to, numTokens);\n            } else if (signer == generalPresaleSigner) {\n                _limitScopedWalletMints(generalPresaleName, to, numTokens);\n            } else {\n                revert(\"Invalid presale pass\");\n            }\n        }\n\n        _;\n    }\n\n    modifier requireValidCrossmintMerkleProof(\n        uint256 numTokens,\n        address to,\n        bytes32[] memory merkleProof\n    ) {\n        if (msg.sender != crossmintAddr) {\n            revert(\"Crossmint required\");\n        }\n        if (block.timestamp < startPublicMintDate) {\n            if (merkleProof.length == 0) {\n                revert(\"Public sale has not started\");\n            }\n            if (block.timestamp < presaleDate) {\n                revert(\"Crossmint presale has not started\");\n            }\n            if (\n                !MerkleProof.verify(\n                    merkleProof,\n                    crossmintMerkleRoot,\n                    keccak256(abi.encodePacked(to))\n                )\n            ) {\n                revert(\"Invalid access list proof\");\n            }\n            _limitScopedWalletMints(crossmintPresaleName, to, numTokens);\n        }\n        _;\n    }\n}\n\n// # OWNERSHIP LICENSE\n//\n// This Ownership License sets forth the terms of the agreement between you, on\n// the one hand, and Buff Monster (the \"Artist\") and Maraschino Distribution LLC,\n// a company (\"Company\"), on the other hand, with respect to your ownership and\n// use of the Mini Melties, a collection of 2000 digital characters by the Artist\n// (the \"Artwork\") to which this Ownership License applies.\n//\n// References to \"you\" herein mean the legal owner of the digital non-fungible\n// token (\"NFT\") minted as the Artwork, as recorded on the applicable blockchain.\n// References to \"us\" herein means the Company and the Artist, jointly and\n// severally. References to the \"Artwork\" herein means the NFT, the creative and\n// audiovisual design implemented, secured, and authenticated by the NFT, and the\n// associated code and data that collectively constitute the above-referenced\n// digital work of art.\n//\n// Your acquisition of the Artwork constitutes your acceptance of, and agreement\n// to, the terms of this Ownership License.\n//\n// ## Ownership of the Artwork.\n//\n// References herein to your ownership of the Artwork mean your exclusive\n// ownership of the authenticated NFT that constitutes the digital original of the\n// Artwork, as such ownership is recorded on the applicable blockchain. Only a\n// person or entity with the legal right to access and control the cryptocurrency\n// address or account to which the Artwork is assigned on the blockchain will\n// qualify as an owner of the Artwork hereunder.\n//\n// ## Your Ownership Rights.\n//\n// For so long as you remain the owner of the Artwork you will be entitled to\n// exercise the following rights with respect to the Artwork (the \"Ownership\n// Rights\"):\n//\n// - To store the Artwork in any account (i.e., cryptocurrency address) and\n// to freely transfer the Artwork between accounts.\n//\n// - To privately view and display the Artwork for your personal purposes on\n// any device.\n//\n// - To sell the Artwork to any third party, to exchange it in a swap with\n// any third party, to list and offer it for sale or swap on any marketplace\n// and/or through any platform or outlet that supports such sale or swap, to\n// donate or gift the Artwork to any third party, and to transfer ownership of the\n// Artwork to the applicable purchaser or other intended recipient.\n//\n// - To reproduce the visual imagery (and any audio, if applicable) produced\n// by the Artwork (the \"Imagery\") in both digital media (e.g., online) and\n// physical media (e.g., print) for your reasonable, private, noncommercial\n// purposes, such as displaying the Imagery on your personal website and/or in\n// your personal social media, or including the Imagery as an informational\n// illustration in a book, magazine article or other publication dealing with your\n// personal art collection.\n//\n// - To use the Imagery as your personal profile image or avatar, or as a\n// similar personal graphic that serves to personally identify you in your\n// personal social media and in comparable personal noncommercial contexts.\n//\n// - To include and exhibit theArtwork, as a digital work of fine art by the\n// Artist, in any public or private art exhibition (or any comparable context),\n// whether organized by you or by any third party such as a museum or gallery, by\n// means of a Qualifying Display Device installed on site if the exhibition is\n// presented in a physical space, or, if the exhibition is presented solely online\n// or by other purely digital means, display and exhibition in a reasonably\n// comparable manner. As used herein, a \"Qualifying Display Device\" means a video\n// monitor, projector, or other physical display device sufficient to display the\n// Artwork in a resolution and manner that does not distort, degrade, or otherwise\n// materially alter the original Artwork.\n//\n// The foregoing rights are exclusive to you, subject to the rights retained by\n// the Artist below.\n//\n// The Ownership Rights also include the limited, nonexclusive right to make use\n// of the Artist's name and the Artist's IP Rights (as defined below) to the\n// extent required to enable you to exercise the aforementioned usage rights.\n//\n// ## Faithful Display & Reproduction.\n//\n// The Artwork may not be materially altered or changed, and must be faithfully\n// displayed and reproduced in the form originally minted. The Ownership Rights\n// only apply to the Artwork in this original form, and do not apply to, and may\n// not be exercised in connection with, any version of the Artwork that has been\n// materially altered or changed.\n//\n// ## Excluded Uses.\n//\n// You may not reproduce, display, use, or exploit the Artwork in any manner other\n// than as expressly permitted by the Ownership Rights, as set forth above. In\n// particular, without limitation, the Ownership Rights do not include any right\n// to reproduce, display, use, or exploit the Artwork for any of the following\n// purposes or usages:\n//\n// - To create any derivative work based on the Artwork.\n//\n// - To reproduce the Artwork for merchandising purposes (e.g., to produce\n// goods offered for sale or given away as premiums or for promotional purposes).\n//\n// - To make use of the Artwork as a logo, trademark, service mark, or in any\n// similar manner (other than personal use as your personally identifying profile\n// image, avatar, or graphic, as expressly permitted above).\n//\n// - Use of the Artwork to promote or advertise any brand, product, product\n// line, or service.\n//\n// - Use for any political purpose or to promote any political or other cause.\n//\n// - Any other use of the Artwork for your commercial benefit or the\n// commercial benefit of any third party (other than resale of the Artwork, as\n// expressly permitted above).\n//\n// - Use of the Artist's IP Rights for any purpose other than as reasonably\n// required for exercise of the Ownership Rights, such as, without limitation, use\n// of the Artist's name for endorsement, advertising, trademark, or other\n// commercial purposes.\n//\n// ## Artist's Intellectual Property Rights.\n//\n// Subject to your Ownership Rights (and excluding any intellectual property owned\n// by Company), the Artist is and will at all times be and remain the sole owner\n// of the copyrights, patent rights, trademark rights, and all other\n// intellectual-property rights in and relating to the Artwork (collectively, the\n// \"Artist's IP Rights\"), including, without limitation: (i) the Imagery; (ii) the\n// programming, algorithms, and code used to generate the Imagery, and the\n// on-chain software code, script, and data constituting the applicable NFT (but\n// excluding, for the avoidance of doubt, programming, script, algorithms, data,\n// and/or code provided by Company and/or used in connection with the operation of\n// the Company platform and marketplace) (collectively, the \"Code\"); (iii) any\n// data incorporated in and/or used by the Artwork, whether stored on or off the\n// blockchain; (iv) the title of the Artwork; and (v) the Artist's name,\n// signature, likeness, and other personally identifying indicia. The Artist's IP\n// Rights are, and at all times will remain, the sole property of the Artist, and\n// all rights therein not expressly granted herein are reserved to the Artist. The\n// Artist also retains all moral rights afforded in each applicable jurisdiction\n// with respect to the Artwork. You hereby irrevocably assign to the Artist any\n// and all rights or ownership you may have, or claim to have, in any item falling\n// within the definition of the Artist's IP Rights, including, without limitation,\n// the copyrights in the Imagery and in the Code. We, the Artist and Company, will\n// be free to reproduce the Imagery and the Artwork for the Artist's and Company's\n// customary artistic and professional purposes (including, without limitation,\n// use in books, publications, materials, websites, social media, and exhibitions\n// dealing with the Artist's creative work, and licensing for merchandising,\n// advertising, endorsement, and/or other commercial purposes), and to re-use\n// and/or adapt the Code for any other purpose or project (including, without\n// limitation, the creation and sale of other NFTs), and to register any or all of\n// the Artist's IP Rights (including, without limitation, the copyrights in\n// theImagery and the Code) solely in the name of the Artist or his designee.\n//\n// ## Transfer of Artwork.\n//\n// The Ownership Rights are granted to you only for so long as you remain the\n// legal owner of the Artwork. If and when you sell, swap, donate, gift, give\n// away, \"burn,\" or otherwise cease to own the Artwork for any reason, your rights\n// to exercise any of the Ownership Rights will immediately and automatically\n// terminate. When the Artwork is legally transferred to a new owner, as recorded\n// on the applicable blockchain, the new owner will thereafter be entitled to\n// exercise the Ownership Rights, and references to \"you\" herein will thereafter\n// be deemed to refer to the new owner.\n//\n// ## Resale Royalty.\n//\n// With respect to any resale of the Artwork, the Artist will be entitled to\n// receive an amount equal to 7.5% of the amount paid by such purchaser (the\n// \"Resale Royalty\"). For example, for any sale of the Artwork, following the\n// original sale, to a subsequent purchaser for 1.0 ETH, the Resale Royalty due\n// will be 0.075 ETH to the Artist. The Resale Royalty is intended to be deducted\n// and paid pursuant to the smart contract implemented in the Code whenever the\n// Artwork is resold after the initial sale. However, if for any reason the full\n// amount due as the Resale Royalty is not deducted and paid (for example, if some\n// or all of the applicable purchase price is paid outside the blockchain), in\n// addition to any other available remedies the Artist and Company will be\n// entitled (i) to recover the full unpaid amount of the Resale Royalty along with\n// any attorneys' fees and other costs reasonably incurred to enable such\n// recovery; (ii) to terminate and suspend the Ownership Rights until full payment\n// is received; and (iii) to obtain injunctive or other equitable relief in any\n// applicable jurisdiction.\n//\n// ## Illegal Acquisition.\n//\n// If the Artwork is acquired by unauthorized means, such as an unauthorized or\n// unintended transfer to a new cryptocurrency address as the result of hacking,\n// fraud, phishing, conversion, or other unauthorized action, the following terms\n// will apply until such time as the Artwork is returned to its rightful owner:\n// (i) the Ownership Rights will immediately terminate and be deemed suspended;\n// (ii) the Artist will be entitled to withhold recognition of the Artwork as\n// constituting an authentic work of fine art by him; and (iii) the Artist and/or\n// Company will be entitled to take any and all steps necessary to prevent the\n// Artwork from being sold or traded, including, without limitation, causing the\n// Artwork to be removed from the Company platform and/or any marketplace or\n// platform where it is listed for sale. Notwithstanding the foregoing, nothing\n// herein will obligate the Artist or Company to take any action with respect to\n// any unauthorized acquisition or disposition of the Artwork, and neither we nor\n// they will have any liability in this regard.\n//\n// ## Limited Guarantee.\n//\n// We guarantee that the Artwork will constitute an authentic original digital\n// work of fine art by the Artist. In all other respects, the Artwork and the NFT\n// are provided strictly \"as is.\" Neither the Artist nor Company makes any other\n// representation, provides any other warranty, or assumes any liability of any\n// kind whatsoever in connection with the Artwork, including, without limitation,\n// any representations, warranties, or conditions, express or implied, as to\n// merchantability, fitness for a particular purpose, functionality, technical\n// quality or performance, freedom from malware or errors, or value, each of which\n// representations, warranties, and conditions is expressly disclaimed. No\n// statement made by the Artist or Company (or by any listing platform or\n// marketplace), whether oral or in writing, will be deemed to constitute any such\n// representation, warranty, or condition. EXCEPT AS EXPRESSLY PROVIDED ABOVE, THE\n// ARTWORK AND THE NFT ARE PROVIDED ENTIRELY ON AN \"AS IS\" AND \"AS AVAILABLE\"\n// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.\n//\n// ## Your Knowledge & Experience.\n//\n// You represent and warrant that you are knowledgeable, experienced, and\n// sophisticated in using blockchain and cryptocurrency technology and that you\n// understand and accept the risks associated with technological and cryptographic\n// systems such as blockchains, NFTs, cryptocurrencies, smart contracts, consensus\n// algorithms, decentralized or peer-to-peer networks and systems, and similar\n// systems and technologies, which risks may include malfunctions, bugs, timing\n// errors, transfer errors, hacking and theft, changes to the protocol rules of\n// the blockchain (e.g., forks), hardware, software and/or Internet connectivity\n// failures, unauthorized third-party data access, and other technological risks,\n// any of which can adversely affect the Artwork and expose you to a risk of loss,\n// forfeiture of your digital currency or NFTs, or lost opportunities to buy or\n// sell digital assets.\n//\n// ## Acknowledgement of Inherent Risks. You acknowledge and accept that:\n//\n// - The prices of blockchain assets, including NFTs, are extremely volatile\n// and unpredictable as the result of technological, social, market, subjective,\n// and other factors and forces that are not within our, the Artist's, or\n// Company's control.\n//\n// - Digital assets such as the Artwork may have little or no inherent or\n// intrinsic value.\n//\n// - Fluctuations in the pricing or markets of digital assets such as the\n// Artwork could materially and adversely affect the value of the Artwork, which\n// may be subject to significant price volatility.\n//\n// - Providing information and conducting business over the Internet and via\n// related technological means with respect to cryptocurrencies and digital assets\n// such as the NFT entails substantial inherent security risks that are or may be\n// unavoidable.\n//\n// - Due to the aforementioned risk factors and other factors that cannot be\n// predicted or controlled, there is no assurance whatsoever that the Artwork will\n// retain its value at the original purchase price or that it will attain any\n// future value thereafter.\n//\n// ## Limitation of Liability.\n//\n// Our and Company's maximum total liability to you for any claim arising or\n// asserted hereunder or otherwise in connection with the Artwork will be limited\n// to the amount paid by the original purchaser for the original primary-market\n// purchase of the Artwork. Under no circumstances will the Artist or Company be\n// liable for any other loss or damage arising in connection with the Artwork,\n// including, without limitation, loss or damage resulting from or arising in\n// connection with:\n//\n// - Unauthorized third-party activities and actions, such as hacking,\n// exploits, introduction of viruses or other malicious code, phishing, Sybil\n// attacks, 51% attacks, brute forcing, mining attacks, cybersecurity attacks, or\n// other means of attack that affect the Artwork in any way.\n//\n// - Weaknesses in security, blockchain malfunctions, or other technical\n// errors.\n//\n// - Telecommunications or Internet failures.\n//\n// - Any protocol change or hard fork in the blockchain on which the Artwork\n// is recorded.\n//\n// - Errors by you (such as forgotten passwords, lost private keys, or\n// mistyped addresses).\n//\n// - Errors by us (such as incorrectly constructed transactions or\n// incorrectly programmed NFTs).\n//\n// - Unfavorable regulatory determinations or actions, or newly implemented\n// laws or regulations, in any jurisdiction.\n//\n// - Taxation of NFTs or cryptocurrencies, the uncertainty of the tax\n// treatment of NFT or cryptocurrency transactions, and any changes in applicable\n// tax laws, in any jurisdiction.\n//\n// - Your inability to access, transfer, sell, or use the Artwork for any\n// reason.\n//\n// - Personal information disclosures or breaches.\n//\n// - Total or partial loss of value of the Artwork due to the inherent price\n// volatility of digital blockchain-based and cryptocurrency assets and markets.\n//\n// **UNDER NO CIRCUMSTANCES WILL WE BE LIABLE FOR ANY INDIRECT, SPECIAL,\n// INCIDENTAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES OF ANY KIND, EVEN IF WE HAVE\n// BEEN ADVISED OR OTHERWISE WERE AWARE OF THE POSSIBILITY OF SUCH DAMAGES.**\n//\n// The foregoing limitations on our liability apply to all claims, whether based\n// in contract, tort, or any other legal or equitable theory.\n//\n// Notwithstanding the foregoing, nothing herein will be deemed to exclude or\n// limit in any way the Artist's or Company's liability if it would be unlawful to\n// do so, such as any liability that cannot legally be excluded or limited under\n// applicable law. It is acknowledged that the laws of some jurisdictions do not\n// allow some or all of the disclaimers, limitations or exclusions set forth\n// herein. If these laws apply in your case, some or all of the foregoing\n// disclaimers, limitations or exclusions may not apply to you, and you may have\n// additional rights.\n//\n// ## Indemnification & Release.\n//\n// To the fullest extent permitted under applicable law, you agree to indemnify,\n// defend and hold harmless the Artist and Company and their respective\n// affiliates, and, as applicable, their respective officers, employees, agents,\n// affiliates, legal representatives, heirs, successors, licensees, and assigns\n// (jointly and severally, the \"Indemnified Parties\") from and against any and all\n// claims, causes of action, costs, proceedings, demands, obligations, losses,\n// liabilities, penalties, damages, awards, judgments, interest, fees, and\n// expenses (including reasonable attorneys' fees and legal, court, settlement,\n// and other related costs) of any kind or nature, in law or equity, whether in\n// tort, contract or otherwise, arising out of or relating to, any actual or\n// alleged breach by you of the terms of this Ownership License or your use or\n// misuse of the NFT or Artwork.\n//\n// You hereby release, acquit, and forever discharge each of the Indemnified\n// Parties from any damages, suits, or controversies or causes of action resulting\n// from your acquisition, transfer, sale, disposition, or use of the NFT or\n// Artwork in violation of the terms of this Ownership License, and you hereby\n// waive the provision of California Civil Code Section 1542 (if and as\n// applicable), which says: \"A general release does not extend to claims that the\n// creditor or releasing party does not know or suspect to exist in his or her\n// favor at the time of executing the release and that, if known by him or her,\n// would have materially affected his or her settlement with the debtor or\n// released party.\" If any comparable legal provision applies in any other\n// jurisdiction, you hereby also waive such provision to the maximum extent\n// permitted by law.\n//\n// ## Applicable Law.\n//\n// This Ownership License is governed by the laws of New York State applicable to\n// contracts to be wholly performed therein, without reference to\n// conflicts-of-laws provisions.\n//\n// ## Arbitration.\n//\n// Any and all disputes or claims arising out of or relating to this Ownership\n// License will be resolved by binding arbitration in New York State, and not by\n// court action except with respect to prejudgment remedies such as injunctive\n// relief. Each party will bear such party's own costs in connection with the\n// arbitration. Judgment upon any arbitral award may be entered and enforced in\n// any court of competent jurisdiction.\n//\n// ## Waiver of Jury Trial.\n//\n// YOU AND WE WAIVE ANY AND ALL CONSTITUTIONAL AND STATUTORY RIGHTS TO SUE IN\n// COURT AND TO HAVE A TRIAL IN FRONT OF A JUDGE OR A JURY. You and we have\n// instead agreed that all claims and disputes arising hereunder will be resolved\n// by arbitration, as provided above.\n//\n// ## Waiver of Class Action.\n//\n// ALL CLAIMS AND DISPUTES FALLING WITHIN THE SCOPE OF ARBITRATION HEREUNDER MUST\n// BE ARBITRATED ON AN INDIVIDUAL BASIS, AND NOT ON A CLASS-ACTION,\n// COLLECTIVE-CLASS, OR NON-INDIVIDUALIZED BASIS. YOUR CLAIMS CANNOT BE ARBITRATED\n// OR CONSOLIDATED WITH THOSE OF ANY OTHER OWNER OF AN NFT OR OTHER WORK BY THE\n// ARTIST. If applicable law precludes enforcement of this limitation as to a\n// given claim for relief, the claim must be severed from the arbitration and\n// brought in the applicable court located in New York State. All other claims\n// must be arbitrated, as provided above.\n//\n// ## Artist's Successor.\n//\n// After the Artist's lifetime, the rights granted to the Artist herein will be\n// exercised by the successor owner of the Artist's IP Rights, which owner will be\n// deemed the Artist's successor for all purposes hereunder.\n//\n// ## Modifications & Waivers.\n//\n// The terms of this Ownership License cannot be amended or waived except in a\n// written document signed by an authorized person on behalf of the Artist and\n// Company. Our failure in any instance to exercise or enforce any right or\n// provision of this Ownership License will not constitute a waiver of such right\n// or provision.\n//\n// ## Severability.\n//\n// If any term, clause, or provision of this Ownership License is held to be\n// invalid or unenforceable, it will be deemed severed from the remaining terms\n// hereof and will not be deemed to affect the validity or enforceability of such\n// terms.\n//\n// ## Conflicting Terms.\n//\n// In the event of any conflict between the terms of this Ownership License and\n// any terms imposed by or in connection with any platform, marketplace, or\n// similar service or application on which the Artwork is offered, listed, sold,\n// traded, swapped, gifted, transferred, or included the terms of this Ownership\n// License will control.\n//\n// ## Entire Agreement.\n//\n// This Ownership License sets forth the entire agreement between the parties with\n// respect to the Artwork, superseding all previous agreements, understandings,\n// statements, discussions, and arrangements in this regard.\n//\n// ## Contact.\n//\n// Inquiries regarding this Ownership License may be sent to:\n// buffmonsterstudio@gmail.com.\n//\n//\n"
    }
  }
}}