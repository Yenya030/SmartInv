{{
  "language": "Solidity",
  "sources": {
    "@ankr.com/contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\ninterface IGovernable {\n\n    function getGovernanceAddress() external view returns (address);\n}"
    },
    "@ankr.com/contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"./IStakingConfig.sol\";\n\ninterface IStaking {\n\n    function getStakingConfig() external view returns (IStakingConfig);\n\n    function getValidators() external view returns (address[] memory);\n\n    function isValidatorActive(address validator) external view returns (bool);\n\n    function isValidator(address validator) external view returns (bool);\n\n    function getValidatorStatus(address validator) external view returns (\n        address ownerAddress,\n        uint8 status,\n        uint256 totalDelegated,\n        uint32 slashesCount,\n        uint64 changedAt,\n        uint64 jailedBefore,\n        uint64 claimedAt,\n        uint16 commissionRate,\n        uint96 totalRewards\n    );\n\n    function getValidatorStatusAtEpoch(address validator, uint64 epoch) external view returns (\n        address ownerAddress,\n        uint8 status,\n        uint256 totalDelegated,\n        uint32 slashesCount,\n        uint64 changedAt,\n        uint64 jailedBefore,\n        uint64 claimedAt,\n        uint16 commissionRate,\n        uint96 totalRewards\n    );\n\n    function getValidatorByOwner(address owner) external view returns (address);\n\n    function registerValidator(address validator, uint16 commissionRate) payable external;\n\n    function addValidator(address validator) external;\n\n    function removeValidator(address validator) external;\n\n    function activateValidator(address validator) external;\n\n    function disableValidator(address validator) external;\n\n    function releaseValidatorFromJail(address validator) external;\n\n    function changeValidatorCommissionRate(address validator, uint16 commissionRate) external;\n\n    function changeValidatorOwner(address validator, address newOwner) external;\n\n    function getValidatorDelegation(address validator, address delegator) external view returns (\n        uint256 delegatedAmount,\n        uint64 atEpoch\n    );\n\n    function delegate(address validator, uint256 amount) payable external;\n\n    function undelegate(address validator, uint256 amount) external;\n\n    function getValidatorFee(address validator) external view returns (uint256);\n\n    function getPendingValidatorFee(address validator) external view returns (uint256);\n\n    function claimValidatorFee(address validator) external;\n\n    function getDelegatorFee(address validator, address delegator) external view returns (uint256);\n\n    function getPendingDelegatorFee(address validator, address delegator) external view returns (uint256);\n\n    function claimDelegatorFee(address validator) external;\n\n    function claimStakingRewards(address validatorAddress) external;\n\n    function claimPendingUndelegates(address validator) external;\n\n    function calcAvailableForRedelegateAmount(address validator, address delegator) external view returns (uint256 amountToStake, uint256 rewardsDust);\n\n    function redelegateDelegatorFee(address validator) external;\n\n    function currentEpoch() external view returns (uint64);\n\n    function nextEpoch() external view returns (uint64);\n}"
    },
    "@ankr.com/contracts/interfaces/IStakingConfig.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"./IGovernable.sol\";\n\ninterface IStakingConfig is IGovernable {\n\n    function getActiveValidatorsLength() external view returns (uint32);\n\n    function setActiveValidatorsLength(uint32 newValue) external;\n\n    function getEpochBlockInterval() external view returns (uint32);\n\n    function setEpochBlockInterval(uint32 newValue) external;\n\n    function getMisdemeanorThreshold() external view returns (uint32);\n\n    function setMisdemeanorThreshold(uint32 newValue) external;\n\n    function getFelonyThreshold() external view returns (uint32);\n\n    function setFelonyThreshold(uint32 newValue) external;\n\n    function getValidatorJailEpochLength() external view returns (uint32);\n\n    function setValidatorJailEpochLength(uint32 newValue) external;\n\n    function getUndelegatePeriod() external view returns (uint32);\n\n    function setUndelegatePeriod(uint32 newValue) external;\n\n    function getMinValidatorStakeAmount() external view returns (uint256);\n\n    function setMinValidatorStakeAmount(uint256 newValue) external;\n\n    function getMinStakingAmount() external view returns (uint256);\n\n    function setMinStakingAmount(uint256 newValue) external;\n\n    function getGovernanceAddress() external view override returns (address);\n\n    function setGovernanceAddress(address newValue) external;\n\n    function getTreasuryAddress() external view returns (address);\n\n    function setTreasuryAddress(address newValue) external;\n\n    function getLockPeriod() external view returns (uint64);\n\n    function setLockPeriod(uint64 newValue) external;\n}"
    },
    "@ankr.com/contracts/interfaces/ITokenStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IStaking.sol\";\n\ninterface ITokenStaking is IStaking {\n\n    function getErc20Token() external view returns (IERC20);\n\n    function distributeRewards(address validatorAddress, uint256 amount) external;\n}"
    },
    "@ankr.com/contracts/libs/ManageableProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport \"../interfaces/IGovernable.sol\";\n\nabstract contract ManageableProxy is ERC1967Proxy {\n\n    constructor(IGovernable governable, address defaultVersion, bytes memory inputData) ERC1967Proxy(defaultVersion, inputData) {\n        _changeAdmin(address(governable));\n    }\n\n    function getCurrentVersion() public view returns (address) {\n        return _implementation();\n    }\n\n    modifier onlyFromGovernance() {\n        require(msg.sender == IGovernable(_getAdmin()).getGovernanceAddress(), \"ManageableProxy: only governance\");\n        _;\n    }\n\n    function upgradeToAndCall(address impl, bytes memory data) external onlyFromGovernance {\n        _upgradeToAndCall(impl, data, false);\n    }\n}\n"
    },
    "@ankr.com/contracts/libs/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\ncontract Multicall {\n\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            // this is an optimized a bit multicall w/o using of Address library (it safes a lot of bytecode)\n            results[i] = _fastDelegateCall(data[i]);\n        }\n        return results;\n    }\n\n    function _fastDelegateCall(bytes memory data) private returns (bytes memory _result) {\n        (bool success, bytes memory returnData) = address(this).delegatecall(data);\n        if (success) {\n            return returnData;\n        }\n        if (returnData.length > 0) {\n            assembly {\n                revert(add(32, returnData), mload(returnData))\n            }\n        } else {\n            revert();\n        }\n    }\n}"
    },
    "@ankr.com/contracts/protocol/AnkrTokenStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"../staking/extension/TokenStaking.sol\";\nimport \"../staking/StakingConfig.sol\";\n\ncontract AnkrTokenStaking is TokenStaking {\n\n    function initialize(IStakingConfig stakingConfig, IERC20 ankrToken) external initializer {\n        __TokenStaking_init(stakingConfig, ankrToken);\n    }\n}"
    },
    "@ankr.com/contracts/staking/Staking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../libs/Multicall.sol\";\n\nimport \"../interfaces/IStakingConfig.sol\";\nimport \"../interfaces/IStaking.sol\";\n\nabstract contract Staking is Initializable, Multicall, IStaking {\n\n    /**\n     * This constant indicates precision of storing compact balances in the storage or floating point. Since default\n     * balance precision is 256 bits it might gain some overhead on the storage because we don't need to store such huge\n     * amount range. That is why we compact balances in uint112 values instead of uint256. By managing this value\n     * you can set the precision of your balances, aka min and max possible staking amount. This value depends\n     * mostly on your asset price in USD, for example ETH costs 4000$ then if we use 1 ether precision it takes 4000$\n     * as min amount that might be problematic for users to do the stake. We can set 1 gwei precision and in this case\n     * we increase min staking amount in 1e9 times, but also decreases max staking amount or total amount of staked assets.\n     *\n     * Here is an universal formula, if your asset is cheap in USD equivalent, like ~1$, then use 1 ether precision,\n     * otherwise it might be better to use 1 gwei precision or any other amount that your want.\n     *\n     * Also be careful with setting `minValidatorStakeAmount` and `minStakingAmount`, because these values has\n     * the same precision as specified here. It means that if you set precision 1 ether, then min staking amount of 10\n     * tokens should have 10 raw value. For 1 gwei precision 10 tokens min amount should be stored as 10000000000.\n     *\n     * For the 112 bits we have ~32 decimals lg(2**112)=33.71 (lets round to 32 for simplicity). We split this amount\n     * into integer (24) and for fractional (8) parts. It means that we can have only 8 decimals after zero.\n     *\n     * Based in current params we have next min/max values:\n     * - min staking amount: 0.00000001 or 1e-8\n     * - max staking amount: 1000000000000000000000000 or 1e+24\n     *\n     * WARNING: precision must be a 1eN format (A=1, N>0)\n     */\n    uint256 internal constant BALANCE_COMPACT_PRECISION = 1e10;\n    /**\n     * Here is min/max commission rates. Lets don't allow to set more than 30% of validator commission, because it's\n     * too big commission for validator. Commission rate is a percents divided by 100 stored with 0 decimals as percents*100 (=pc/1e2*1e4)\n     *\n     * Here is some examples:\n     * + 0.3% => 0.3*100=30\n     * + 3% => 3*100=300\n     * + 30% => 30*100=3000\n     */\n    uint16 internal constant COMMISSION_RATE_MIN_VALUE = 0; // 0%\n    uint16 internal constant COMMISSION_RATE_MAX_VALUE = 3000; // 30%\n    /**\n     * This gas limit is used for internal transfers, BSC doesn't support berlin and it\n     * might cause problems with smart contracts who used to stake transparent proxies or\n     * beacon proxies that have a lot of expensive SLOAD instructions.\n     */\n    uint64 internal constant TRANSFER_GAS_LIMIT = 30_000;\n    /**\n     * Some items are stored in the queues and we must iterate though them to\n     * execute one by one. Somtimes gas might not be enough for the tx execution.\n     */\n    uint32 internal constant CLAIM_BEFORE_GAS = 100_000;\n\n    // validator events\n    event ValidatorAdded(address indexed validator, address owner, uint8 status, uint16 commissionRate);\n    event ValidatorModified(address indexed validator, address owner, uint8 status, uint16 commissionRate);\n    event ValidatorRemoved(address indexed validator);\n    event ValidatorOwnerClaimed(address indexed validator, uint256 amount, uint64 epoch);\n    event ValidatorSlashed(address indexed validator, uint32 slashes, uint64 epoch);\n    event ValidatorJailed(address indexed validator, uint64 epoch);\n    event ValidatorDeposited(address indexed validator, uint256 amount, uint64 epoch);\n    event ValidatorReleased(address indexed validator, uint64 epoch);\n\n    // staker events\n    event Delegated(address indexed validator, address indexed staker, uint256 amount, uint64 epoch);\n    event Undelegated(address indexed validator, address indexed staker, uint256 amount, uint64 epoch);\n    event Claimed(address indexed validator, address indexed staker, uint256 amount, uint64 epoch);\n    event Redelegated(address indexed validator, address indexed staker, uint256 amount, uint256 dust, uint64 epoch);\n\n    enum ValidatorStatus {\n        NotFound,\n        Active,\n        Pending,\n        Jail\n    }\n\n    struct ValidatorSnapshot {\n        uint96 totalRewards;\n        uint112 totalDelegated;\n        uint32 slashesCount;\n        uint16 commissionRate;\n    }\n\n    struct Validator {\n        address validatorAddress;\n        address ownerAddress;\n        ValidatorStatus status;\n        uint64 changedAt;\n        uint64 jailedBefore;\n        uint64 claimedAt;\n    }\n\n    struct DelegationOpDelegate {\n        uint112 amount;\n        uint64 epoch;\n    }\n\n    struct DelegationOpUndelegate {\n        uint112 amount;\n        uint64 epoch;\n    }\n\n    struct ValidatorDelegation {\n        DelegationOpDelegate[] delegateQueue;\n        uint64 delegateGap;\n        DelegationOpUndelegate[] undelegateQueue;\n        uint64 undelegateGap;\n    }\n\n    // mapping from validator address to validator\n    mapping(address => Validator) internal _validatorsMap;\n    // mapping from validator owner to validator address\n    mapping(address => address) internal _validatorOwners;\n    // list of all validators that are in validators mapping\n    address[] internal _activeValidatorsList;\n    // mapping with stakers to validators at epoch (validator -> delegator -> delegation)\n    mapping(address => mapping(address => ValidatorDelegation)) internal _validatorDelegations;\n    // mapping with validator snapshots per each epoch (validator -> epoch -> snapshot)\n    mapping(address => mapping(uint64 => ValidatorSnapshot)) internal _validatorSnapshots;\n    // chain config with params\n    IStakingConfig internal _stakingConfig;\n    // reserve some gap for the future upgrades\n    uint256[100 - 7] private __reserved;\n\n    function __Staking_init(IStakingConfig stakingConfig) internal {\n        _stakingConfig = stakingConfig;\n    }\n\n    modifier onlyFromGovernance() virtual {\n        require(msg.sender == _stakingConfig.getGovernanceAddress(), \"Staking: only governance\");\n        _;\n    }\n\n    function getStakingConfig() external view override returns (IStakingConfig) {\n        return _stakingConfig;\n    }\n\n    function getValidatorDelegation(address validatorAddress, address delegator) external view override returns (\n        uint256 delegatedAmount,\n        uint64 atEpoch\n    ) {\n        ValidatorDelegation memory delegation = _validatorDelegations[validatorAddress][delegator];\n        if (delegation.delegateQueue.length == 0) {\n            return (0, 0);\n        }\n        DelegationOpDelegate memory snapshot = delegation.delegateQueue[delegation.delegateQueue.length - 1];\n        return (uint256(snapshot.amount) * BALANCE_COMPACT_PRECISION, snapshot.epoch);\n    }\n\n    function getValidatorStatus(address validatorAddress) external view override returns (\n        address ownerAddress,\n        uint8 status,\n        uint256 totalDelegated,\n        uint32 slashesCount,\n        uint64 changedAt,\n        uint64 jailedBefore,\n        uint64 claimedAt,\n        uint16 commissionRate,\n        uint96 totalRewards\n    ) {\n        Validator memory validator = _validatorsMap[validatorAddress];\n        ValidatorSnapshot memory snapshot = _validatorSnapshots[validator.validatorAddress][validator.changedAt];\n        return (\n        ownerAddress = validator.ownerAddress,\n        status = uint8(validator.status),\n        totalDelegated = uint256(snapshot.totalDelegated) * BALANCE_COMPACT_PRECISION,\n        slashesCount = snapshot.slashesCount,\n        changedAt = validator.changedAt,\n        jailedBefore = validator.jailedBefore,\n        claimedAt = validator.claimedAt,\n        commissionRate = snapshot.commissionRate,\n        totalRewards = snapshot.totalRewards\n        );\n    }\n\n    function getValidatorStatusAtEpoch(address validatorAddress, uint64 epoch) external view override returns (\n        address ownerAddress,\n        uint8 status,\n        uint256 totalDelegated,\n        uint32 slashesCount,\n        uint64 changedAt,\n        uint64 jailedBefore,\n        uint64 claimedAt,\n        uint16 commissionRate,\n        uint96 totalRewards\n    ) {\n        Validator memory validator = _validatorsMap[validatorAddress];\n        ValidatorSnapshot memory snapshot = _touchValidatorSnapshotImmutable(validator, epoch);\n        return (\n        ownerAddress = validator.ownerAddress,\n        status = uint8(validator.status),\n        totalDelegated = uint256(snapshot.totalDelegated) * BALANCE_COMPACT_PRECISION,\n        slashesCount = snapshot.slashesCount,\n        changedAt = validator.changedAt,\n        jailedBefore = validator.jailedBefore,\n        claimedAt = validator.claimedAt,\n        commissionRate = snapshot.commissionRate,\n        totalRewards = snapshot.totalRewards\n        );\n    }\n\n    function getValidatorByOwner(address owner) external view override returns (address) {\n        return _validatorOwners[owner];\n    }\n\n    function releaseValidatorFromJail(address validatorAddress) external override {\n        // make sure validator is in jail\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status == ValidatorStatus.Jail, \"bad status\");\n        // only validator owner\n        require(msg.sender == validator.ownerAddress, \"only owner\");\n        require(currentEpoch() >= validator.jailedBefore, \"still in jail\");\n        // release validator from jail\n        _releaseValidatorFromJail(validator);\n    }\n\n    function forceUnJailValidator(address validatorAddress) external onlyFromGovernance {\n        // make sure validator is in jail\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status == ValidatorStatus.Jail, \"bad status\");\n        // release validator from jail\n        _releaseValidatorFromJail(validator);\n    }\n\n    function _releaseValidatorFromJail(Validator memory validator) internal {\n        address validatorAddress = validator.validatorAddress;\n        // update validator status\n        validator.status = ValidatorStatus.Active;\n        validator.jailedBefore = 0;\n        _validatorsMap[validatorAddress] = validator;\n        _activeValidatorsList.push(validatorAddress);\n        // emit event\n        emit ValidatorReleased(validatorAddress, currentEpoch());\n    }\n\n    function undelegate(address validatorAddress, uint256 amount) external override {\n        _undelegateFrom(msg.sender, validatorAddress, amount);\n    }\n\n    function currentEpoch() public view override returns (uint64) {\n        return uint64(block.number / _stakingConfig.getEpochBlockInterval());\n    }\n\n    function nextEpoch() public view override returns (uint64) {\n        return currentEpoch() + 1;\n    }\n\n    function _touchValidatorSnapshot(Validator memory validator, uint64 epoch) internal returns (ValidatorSnapshot storage) {\n        ValidatorSnapshot storage snapshot = _validatorSnapshots[validator.validatorAddress][epoch];\n        // if snapshot is already initialized then just return it\n        if (snapshot.totalDelegated > 0) {\n            return snapshot;\n        }\n        // find previous snapshot to copy parameters from it\n        ValidatorSnapshot memory lastModifiedSnapshot = _validatorSnapshots[validator.validatorAddress][validator.changedAt];\n        // last modified snapshot might store zero value, for first delegation it might happen and its not critical\n        snapshot.totalDelegated = lastModifiedSnapshot.totalDelegated;\n        snapshot.commissionRate = lastModifiedSnapshot.commissionRate;\n        // we must save last affected epoch for this validator to be able to restore total delegated\n        // amount in the future (check condition upper)\n        if (epoch > validator.changedAt) {\n            validator.changedAt = epoch;\n        }\n        return snapshot;\n    }\n\n    function _touchValidatorSnapshotImmutable(Validator memory validator, uint64 epoch) internal view returns (ValidatorSnapshot memory) {\n        ValidatorSnapshot memory snapshot = _validatorSnapshots[validator.validatorAddress][epoch];\n        // if snapshot is already initialized then just return it\n        if (snapshot.totalDelegated > 0) {\n            return snapshot;\n        }\n        // find previous snapshot to copy parameters from it\n        ValidatorSnapshot memory lastModifiedSnapshot = _validatorSnapshots[validator.validatorAddress][validator.changedAt];\n        // last modified snapshot might store zero value, for first delegation it might happen and its not critical\n        snapshot.totalDelegated = lastModifiedSnapshot.totalDelegated;\n        snapshot.commissionRate = lastModifiedSnapshot.commissionRate;\n        // return existing or new snapshot\n        return snapshot;\n    }\n\n    function _delegateTo(address fromDelegator, address toValidator, uint256 amount) internal {\n        // check is minimum delegate amount\n        require(amount >= _stakingConfig.getMinStakingAmount() && amount != 0, \"too low\");\n        require(amount % BALANCE_COMPACT_PRECISION == 0, \"no remainder\");\n        // make sure amount is greater than min staking amount\n        // make sure validator exists at least\n        Validator memory validator = _validatorsMap[toValidator];\n        require(validator.status != ValidatorStatus.NotFound, \"not found\");\n        uint64 sinceEpoch = nextEpoch();\n        // Lets upgrade next snapshot parameters:\n        // + find snapshot for the next epoch after current block\n        // + increase total delegated amount in the next epoch for this validator\n        // + re-save validator because last affected epoch might change\n        ValidatorSnapshot storage validatorSnapshot = _touchValidatorSnapshot(validator, sinceEpoch);\n        validatorSnapshot.totalDelegated += uint112(amount / BALANCE_COMPACT_PRECISION);\n        _validatorsMap[toValidator] = validator;\n        // if last pending delegate has the same next epoch then its safe to just increase total\n        // staked amount because it can't affect current validator set, but otherwise we must create\n        // new record in delegation queue with the last epoch (delegations are ordered by epoch)\n        ValidatorDelegation storage delegation = _validatorDelegations[toValidator][fromDelegator];\n        if (delegation.delegateQueue.length > 0) {\n            DelegationOpDelegate storage recentDelegateOp = delegation.delegateQueue[delegation.delegateQueue.length - 1];\n            // if we already have pending snapshot for the next epoch then just increase new amount,\n            // otherwise create next pending snapshot. (tbh it can't be greater, but what we can do here instead?)\n            if (recentDelegateOp.epoch >= sinceEpoch) {\n                recentDelegateOp.amount += uint112(amount / BALANCE_COMPACT_PRECISION);\n            } else {\n                delegation.delegateQueue.push(DelegationOpDelegate({epoch : sinceEpoch, amount : recentDelegateOp.amount + uint112(amount / BALANCE_COMPACT_PRECISION)}));\n            }\n        } else {\n            // there is no any delegations at al, lets create the first one\n            delegation.delegateQueue.push(DelegationOpDelegate({epoch : sinceEpoch, amount : uint112(amount / BALANCE_COMPACT_PRECISION)}));\n        }\n        // emit event with the next epoch\n        emit Delegated(toValidator, fromDelegator, amount, sinceEpoch);\n    }\n\n    function calcUnlockedDelegatedAmount(address validator, address delegator) public view returns (uint256) {\n        ValidatorDelegation storage delegation = _validatorDelegations[validator][delegator];\n        uint256 unlockedAmount = _calcUnlockedDelegatedAmount(delegation, nextEpoch());\n        if (unlockedAmount < type(uint256).max || delegation.delegateQueue.length == 0) {\n            return unlockedAmount;\n        }\n        DelegationOpDelegate memory latestDelegate = delegation.delegateQueue[delegation.delegateQueue.length - 1];\n        return latestDelegate.amount;\n    }\n\n    function _calcUnlockedDelegatedAmount(ValidatorDelegation storage delegation, uint64 beforeEpochExclusive) internal view returns (uint256 unlockedAmount) {\n        uint64 lockPeriod = _stakingConfig.getLockPeriod();\n        // if lock period is zero than this feature is disabled\n        if (lockPeriod == 0) {\n            return type(uint256).max;\n        }\n        for (uint256 i = delegation.delegateGap; i < delegation.delegateQueue.length; i++) {\n            DelegationOpDelegate memory delegateOp = delegation.delegateQueue[i];\n            if (beforeEpochExclusive <= delegateOp.epoch + lockPeriod) {\n                break;\n            }\n            unlockedAmount = uint256(delegateOp.amount) * BALANCE_COMPACT_PRECISION;\n        }\n        for (uint256 i = delegation.undelegateGap; i < delegation.undelegateQueue.length; i++) {\n            DelegationOpUndelegate memory undelegateOp = delegation.undelegateQueue[i];\n            unlockedAmount -= uint256(undelegateOp.amount) * BALANCE_COMPACT_PRECISION;\n        }\n        return unlockedAmount;\n    }\n\n    function _undelegateFrom(address toDelegator, address fromValidator, uint256 amount) internal {\n        // check minimum delegate amount\n        require(amount >= _stakingConfig.getMinStakingAmount() && amount != 0, \"too low\");\n        require(amount % BALANCE_COMPACT_PRECISION == 0, \"no remainder\");\n        // make sure validator exists at least\n        Validator memory validator = _validatorsMap[fromValidator];\n        uint64 beforeEpoch = nextEpoch();\n        // Lets upgrade next snapshot parameters:\n        // + find snapshot for the next epoch after current block\n        // + increase total delegated amount in the next epoch for this validator\n        // + re-save validator because last affected epoch might change\n        ValidatorSnapshot storage validatorSnapshot = _touchValidatorSnapshot(validator, beforeEpoch);\n        require(validatorSnapshot.totalDelegated >= uint112(amount / BALANCE_COMPACT_PRECISION), \"insufficient balance\");\n        validatorSnapshot.totalDelegated -= uint112(amount / BALANCE_COMPACT_PRECISION);\n        _validatorsMap[fromValidator] = validator;\n        // if last pending delegate has the same next epoch then its safe to just increase total\n        // staked amount because it can't affect current validator set, but otherwise we must create\n        // new record in delegation queue with the last epoch (delegations are ordered by epoch)\n        ValidatorDelegation storage delegation = _validatorDelegations[fromValidator][toDelegator];\n        require(delegation.delegateQueue.length > 0, \"insufficient balance\");\n        DelegationOpDelegate storage recentDelegateOp = delegation.delegateQueue[delegation.delegateQueue.length - 1];\n        require(recentDelegateOp.amount >= uint64(amount / BALANCE_COMPACT_PRECISION), \"insufficient balance\");\n        // disallow to undelegate if lock period is not reached yet\n        require(amount <= _calcUnlockedDelegatedAmount(delegation, beforeEpoch), \"still locked\");\n        // calc next delegated amount\n        uint112 nextDelegatedAmount = recentDelegateOp.amount - uint112(amount / BALANCE_COMPACT_PRECISION);\n        if (recentDelegateOp.epoch >= beforeEpoch) {\n            // decrease total delegated amount for the next epoch\n            recentDelegateOp.amount = nextDelegatedAmount;\n        } else {\n            // there is no pending delegations, so lets create the new one with the new amount\n            delegation.delegateQueue.push(DelegationOpDelegate({epoch : beforeEpoch, amount : nextDelegatedAmount}));\n        }\n        // create new undelegate queue operation with soft lock\n        delegation.undelegateQueue.push(DelegationOpUndelegate({amount : uint112(amount / BALANCE_COMPACT_PRECISION), epoch : beforeEpoch + _stakingConfig.getUndelegatePeriod()}));\n        // emit event with the next epoch number\n        emit Undelegated(fromValidator, toDelegator, amount, beforeEpoch);\n    }\n\n    function _transferDelegatorRewards(address validator, address delegator, uint64 beforeEpochExclude, bool withRewards, bool withUndelegates) internal {\n        ValidatorDelegation storage delegation = _validatorDelegations[validator][delegator];\n        // claim rewards and undelegates\n        uint256 availableFunds = 0;\n        if (withRewards) {\n            availableFunds += _processDelegateQueue(validator, delegation, beforeEpochExclude);\n        }\n        if (withUndelegates) {\n            availableFunds += _processUndelegateQueue(delegation, beforeEpochExclude);\n        }\n        // for transfer claim mode just all rewards to the user\n        _safeTransferWithGasLimit(payable(delegator), availableFunds);\n        // emit event\n        emit Claimed(validator, delegator, availableFunds, beforeEpochExclude);\n    }\n\n    function _redelegateDelegatorRewards(address validator, address delegator, uint64 beforeEpochExclude, bool withRewards, bool withUndelegates) internal {\n        ValidatorDelegation storage delegation = _validatorDelegations[validator][delegator];\n        // claim rewards and undelegates\n        uint256 availableFunds = 0;\n        if (withRewards) {\n            availableFunds += _processDelegateQueue(validator, delegation, beforeEpochExclude);\n        }\n        if (withUndelegates) {\n            availableFunds += _processUndelegateQueue(delegation, beforeEpochExclude);\n        }\n        (uint256 amountToStake, uint256 rewardsDust) = _calcAvailableForRedelegateAmount(availableFunds);\n        // if we have something to re-stake then delegate it to the validator\n        if (amountToStake > 0) {\n            _delegateTo(delegator, validator, amountToStake);\n        }\n        // if we have dust from staking then send it to user (we can't keep them in the contract)\n        if (rewardsDust > 0) {\n            _safeTransferWithGasLimit(payable(delegator), rewardsDust);\n        }\n        // emit event\n        emit Redelegated(validator, delegator, amountToStake, rewardsDust, beforeEpochExclude);\n    }\n\n    function _processDelegateQueue(address validator, ValidatorDelegation storage delegation, uint64 beforeEpochExclude) internal returns (uint256 availableFunds) {\n        uint64 lockPeriod = _stakingConfig.getLockPeriod();\n        uint64 delegateGap = delegation.delegateGap;\n        for (uint256 queueLength = delegation.delegateQueue.length; delegateGap < queueLength && gasleft() > CLAIM_BEFORE_GAS;) {\n            DelegationOpDelegate memory delegateOp = delegation.delegateQueue[delegateGap];\n            if (delegateOp.epoch >= beforeEpochExclude + lockPeriod) {\n                break;\n            }\n            uint256 voteChangedAtEpoch = 0;\n            if (delegateGap < queueLength - 1) {\n                voteChangedAtEpoch = delegation.delegateQueue[delegateGap + 1].epoch;\n            }\n            for (; delegateOp.epoch < beforeEpochExclude && (voteChangedAtEpoch == 0 || delegateOp.epoch < voteChangedAtEpoch) && gasleft() > CLAIM_BEFORE_GAS; delegateOp.epoch++) {\n                ValidatorSnapshot memory validatorSnapshot = _validatorSnapshots[validator][delegateOp.epoch];\n                if (validatorSnapshot.totalDelegated == 0) {\n                    continue;\n                }\n                (uint256 delegatorFee, /*uint256 ownerFee*/, /*uint256 systemFee*/) = _calcValidatorSnapshotEpochPayout(validatorSnapshot);\n                availableFunds += delegatorFee * delegateOp.amount / validatorSnapshot.totalDelegated;\n            }\n            // if we have reached end of the delegation list then lets stay on the last item, but with updated latest processed epoch\n            if (delegateGap >= queueLength - 1) {\n                delegation.delegateQueue[delegateGap] = delegateOp;\n                break;\n            }\n            delete delegation.delegateQueue[delegateGap];\n            ++delegateGap;\n        }\n        delegation.delegateGap = delegateGap;\n        return availableFunds;\n    }\n\n    function _processUndelegateQueue(ValidatorDelegation storage delegation, uint64 beforeEpochExclude) internal returns (uint256 availableFunds) {\n        uint64 undelegateGap = delegation.undelegateGap;\n        for (uint256 queueLength = delegation.undelegateQueue.length; undelegateGap < queueLength && gasleft() > CLAIM_BEFORE_GAS;) {\n            DelegationOpUndelegate memory undelegateOp = delegation.undelegateQueue[undelegateGap];\n            if (undelegateOp.epoch > beforeEpochExclude) {\n                break;\n            }\n            availableFunds += uint256(undelegateOp.amount) * BALANCE_COMPACT_PRECISION;\n            delete delegation.undelegateQueue[undelegateGap];\n            ++undelegateGap;\n        }\n        delegation.undelegateGap = undelegateGap;\n        return availableFunds;\n    }\n\n    function _calcDelegatorRewardsAndPendingUndelegates(address validator, address delegator, uint64 beforeEpoch, bool withUndelegate) internal view returns (uint256) {\n        uint64 lockPeriod = _stakingConfig.getLockPeriod();\n        ValidatorDelegation memory delegation = _validatorDelegations[validator][delegator];\n        uint256 availableFunds = 0;\n        // process delegate queue to calculate staking rewards\n        while (delegation.delegateGap < delegation.delegateQueue.length) {\n            DelegationOpDelegate memory delegateOp = delegation.delegateQueue[delegation.delegateGap];\n            if (delegateOp.epoch >= beforeEpoch + lockPeriod) {\n                break;\n            }\n            uint256 voteChangedAtEpoch = 0;\n            if (delegation.delegateGap < delegation.delegateQueue.length - 1) {\n                voteChangedAtEpoch = delegation.delegateQueue[delegation.delegateGap + 1].epoch;\n            }\n            for (; delegateOp.epoch < beforeEpoch && (voteChangedAtEpoch == 0 || delegateOp.epoch < voteChangedAtEpoch); delegateOp.epoch++) {\n                ValidatorSnapshot memory validatorSnapshot = _validatorSnapshots[validator][delegateOp.epoch];\n                if (validatorSnapshot.totalDelegated == 0) {\n                    continue;\n                }\n                (uint256 delegatorFee, /*uint256 ownerFee*/, /*uint256 systemFee*/) = _calcValidatorSnapshotEpochPayout(validatorSnapshot);\n                availableFunds += delegatorFee * delegateOp.amount / validatorSnapshot.totalDelegated;\n            }\n            ++delegation.delegateGap;\n        }\n        // process all items from undelegate queue\n        while (withUndelegate && delegation.undelegateGap < delegation.undelegateQueue.length) {\n            DelegationOpUndelegate memory undelegateOp = delegation.undelegateQueue[delegation.undelegateGap];\n            if (undelegateOp.epoch > beforeEpoch) {\n                break;\n            }\n            availableFunds += uint256(undelegateOp.amount) * BALANCE_COMPACT_PRECISION;\n            ++delegation.undelegateGap;\n        }\n        // return available for claim funds\n        return availableFunds;\n    }\n\n    function _claimValidatorOwnerRewards(Validator storage validator, uint64 beforeEpoch) internal {\n        uint256 availableFunds = 0;\n        uint256 systemFee = 0;\n        uint64 claimAt = validator.claimedAt;\n        for (; claimAt < beforeEpoch && gasleft() > CLAIM_BEFORE_GAS; claimAt++) {\n            ValidatorSnapshot memory validatorSnapshot = _validatorSnapshots[validator.validatorAddress][claimAt];\n            (/*uint256 delegatorFee*/, uint256 ownerFee, uint256 slashingFee) = _calcValidatorSnapshotEpochPayout(validatorSnapshot);\n            availableFunds += ownerFee;\n            systemFee += slashingFee;\n        }\n        validator.claimedAt = claimAt;\n        _safeTransferWithGasLimit(payable(validator.ownerAddress), availableFunds);\n        // if we have system fee then pay it to treasury account\n        if (systemFee > 0) {\n            _unsafeTransfer(payable(_stakingConfig.getTreasuryAddress()), systemFee);\n        }\n        emit ValidatorOwnerClaimed(validator.validatorAddress, availableFunds, beforeEpoch);\n    }\n\n    function _calcValidatorOwnerRewards(Validator memory validator, uint64 beforeEpoch) internal view returns (uint256) {\n        uint256 availableFunds = 0;\n        for (; validator.claimedAt < beforeEpoch; validator.claimedAt++) {\n            ValidatorSnapshot memory validatorSnapshot = _validatorSnapshots[validator.validatorAddress][validator.claimedAt];\n            (/*uint256 delegatorFee*/, uint256 ownerFee, /*uint256 systemFee*/) = _calcValidatorSnapshotEpochPayout(validatorSnapshot);\n            availableFunds += ownerFee;\n        }\n        return availableFunds;\n    }\n\n    function _calcValidatorSnapshotEpochPayout(ValidatorSnapshot memory validatorSnapshot) internal view returns (uint256 delegatorFee, uint256 ownerFee, uint256 systemFee) {\n        // detect validator slashing to transfer all rewards to treasury\n        if (validatorSnapshot.slashesCount >= _stakingConfig.getMisdemeanorThreshold()) {\n            return (delegatorFee = 0, ownerFee = 0, systemFee = validatorSnapshot.totalRewards);\n        } else if (validatorSnapshot.totalDelegated == 0) {\n            return (delegatorFee = 0, ownerFee = validatorSnapshot.totalRewards, systemFee = 0);\n        }\n        // ownerFee_(18+4-4=18) = totalRewards_18 * commissionRate_4 / 1e4\n        ownerFee = uint256(validatorSnapshot.totalRewards) * validatorSnapshot.commissionRate / 1e4;\n        // delegatorRewards = totalRewards - ownerFee\n        delegatorFee = validatorSnapshot.totalRewards - ownerFee;\n        // default system fee is zero for epoch\n        systemFee = 0;\n    }\n\n    function registerValidator(address validatorAddress, uint16 commissionRate) payable external override {\n        uint256 initialStake = msg.value;\n        // // initial stake amount should be greater than minimum validator staking amount\n        require(initialStake >= _stakingConfig.getMinValidatorStakeAmount(), \"too low\");\n        require(initialStake % BALANCE_COMPACT_PRECISION == 0, \"no remainder\");\n        // add new validator as pending\n        _addValidator(validatorAddress, msg.sender, ValidatorStatus.Pending, commissionRate, initialStake, nextEpoch());\n    }\n\n    function addValidator(address account) external onlyFromGovernance virtual override {\n        _addValidator(account, account, ValidatorStatus.Active, 0, 0, nextEpoch());\n    }\n\n    function _addValidator(address validatorAddress, address validatorOwner, ValidatorStatus status, uint16 commissionRate, uint256 initialStake, uint64 sinceEpoch) internal {\n        // validator commission rate\n        require(commissionRate >= COMMISSION_RATE_MIN_VALUE && commissionRate <= COMMISSION_RATE_MAX_VALUE, \"bad commission\");\n        // init validator default params\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(_validatorsMap[validatorAddress].status == ValidatorStatus.NotFound, \"already exist\");\n        validator.validatorAddress = validatorAddress;\n        validator.ownerAddress = validatorOwner;\n        validator.status = status;\n        validator.changedAt = sinceEpoch;\n        _validatorsMap[validatorAddress] = validator;\n        // save validator owner\n        require(_validatorOwners[validatorOwner] == address(0x00), \"owner in use\");\n        _validatorOwners[validatorOwner] = validatorAddress;\n        // add new validator to array\n        if (status == ValidatorStatus.Active) {\n            _activeValidatorsList.push(validatorAddress);\n        }\n        // push initial validator snapshot at zero epoch with default params\n        _validatorSnapshots[validatorAddress][sinceEpoch] = ValidatorSnapshot(0, uint112(initialStake / BALANCE_COMPACT_PRECISION), 0, commissionRate);\n        // delegate initial stake to validator owner\n        ValidatorDelegation storage delegation = _validatorDelegations[validatorAddress][validatorOwner];\n        require(delegation.delegateQueue.length == 0);\n        delegation.delegateQueue.push(DelegationOpDelegate(uint112(initialStake / BALANCE_COMPACT_PRECISION), sinceEpoch));\n        emit Delegated(validatorAddress, validatorOwner, initialStake, sinceEpoch);\n        // emit event\n        emit ValidatorAdded(validatorAddress, validatorOwner, uint8(status), commissionRate);\n    }\n\n    function _calcLockPeriod(uint64 sinceEpoch) internal view returns (uint64) {\n        uint64 lockPeriod = _stakingConfig.getLockPeriod();\n        if (lockPeriod == 0) {\n            return 0;\n        }\n        return sinceEpoch + lockPeriod;\n    }\n\n    function removeValidator(address account) external onlyFromGovernance virtual override {\n        Validator memory validator = _validatorsMap[account];\n        require(validator.status != ValidatorStatus.NotFound, \"not found\");\n        // remove validator from active list if exists\n        _removeValidatorFromActiveList(account);\n        // remove from validators map\n        delete _validatorOwners[validator.ownerAddress];\n        delete _validatorsMap[account];\n        // emit event about it\n        emit ValidatorRemoved(account);\n    }\n\n    function _removeValidatorFromActiveList(address validatorAddress) internal {\n        // find index of validator in validator set\n        int256 indexOf = - 1;\n        for (uint256 i = 0; i < _activeValidatorsList.length; i++) {\n            if (_activeValidatorsList[i] != validatorAddress) continue;\n            indexOf = int256(i);\n            break;\n        }\n        // remove validator from array (since we remove only active it might not exist in the list)\n        if (indexOf >= 0) {\n            if (_activeValidatorsList.length > 1 && uint256(indexOf) != _activeValidatorsList.length - 1) {\n                _activeValidatorsList[uint256(indexOf)] = _activeValidatorsList[_activeValidatorsList.length - 1];\n            }\n            _activeValidatorsList.pop();\n        }\n    }\n\n    function activateValidator(address validatorAddress) external onlyFromGovernance virtual override {\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(_validatorsMap[validatorAddress].status == ValidatorStatus.Pending, \"bad status\");\n        _activeValidatorsList.push(validatorAddress);\n        validator.status = ValidatorStatus.Active;\n        _validatorsMap[validatorAddress] = validator;\n        ValidatorSnapshot storage snapshot = _touchValidatorSnapshot(validator, nextEpoch());\n        emit ValidatorModified(validatorAddress, validator.ownerAddress, uint8(validator.status), snapshot.commissionRate);\n    }\n\n    function disableValidator(address validatorAddress) external onlyFromGovernance virtual override {\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status == ValidatorStatus.Active || validator.status == ValidatorStatus.Jail, \"bad status\");\n        _removeValidatorFromActiveList(validatorAddress);\n        validator.status = ValidatorStatus.Pending;\n        _validatorsMap[validatorAddress] = validator;\n        ValidatorSnapshot storage snapshot = _touchValidatorSnapshot(validator, nextEpoch());\n        emit ValidatorModified(validatorAddress, validator.ownerAddress, uint8(validator.status), snapshot.commissionRate);\n    }\n\n    function changeValidatorCommissionRate(address validatorAddress, uint16 commissionRate) external override {\n        require(commissionRate >= COMMISSION_RATE_MIN_VALUE && commissionRate <= COMMISSION_RATE_MAX_VALUE, \"bad commission\");\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status != ValidatorStatus.NotFound, \"not found\");\n        require(validator.ownerAddress == msg.sender, \"only owner\");\n        ValidatorSnapshot storage snapshot = _touchValidatorSnapshot(validator, nextEpoch());\n        snapshot.commissionRate = commissionRate;\n        _validatorsMap[validatorAddress] = validator;\n        emit ValidatorModified(validator.validatorAddress, validator.ownerAddress, uint8(validator.status), commissionRate);\n    }\n\n    function changeValidatorOwner(address validatorAddress, address newOwner) external override {\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.ownerAddress == msg.sender, \"only owner\");\n        require(_validatorOwners[newOwner] == address(0x00), \"owner in use\");\n        delete _validatorOwners[validator.ownerAddress];\n        validator.ownerAddress = newOwner;\n        _validatorOwners[newOwner] = validatorAddress;\n        _validatorsMap[validatorAddress] = validator;\n        ValidatorSnapshot storage snapshot = _touchValidatorSnapshot(validator, nextEpoch());\n        emit ValidatorModified(validator.validatorAddress, validator.ownerAddress, uint8(validator.status), snapshot.commissionRate);\n    }\n\n    function isValidatorActive(address account) external override view returns (bool) {\n        if (_validatorsMap[account].status != ValidatorStatus.Active) {\n            return false;\n        }\n        address[] memory topValidators = getValidators();\n        for (uint256 i = 0; i < topValidators.length; i++) {\n            if (topValidators[i] == account) return true;\n        }\n        return false;\n    }\n\n    function isValidator(address account) external override view returns (bool) {\n        return _validatorsMap[account].status != ValidatorStatus.NotFound;\n    }\n\n    function getValidators() public view override returns (address[] memory) {\n        uint256 n = _activeValidatorsList.length;\n        address[] memory orderedValidators = new address[](n);\n        for (uint256 i = 0; i < n; i++) {\n            orderedValidators[i] = _activeValidatorsList[i];\n        }\n        // we need to select k top validators out of n\n        uint256 k = _stakingConfig.getActiveValidatorsLength();\n        if (k > n) {\n            k = n;\n        }\n        for (uint256 i = 0; i < k; i++) {\n            uint256 nextValidator = i;\n            Validator memory currentMax = _validatorsMap[orderedValidators[nextValidator]];\n            ValidatorSnapshot memory maxSnapshot = _validatorSnapshots[currentMax.validatorAddress][currentMax.changedAt];\n            for (uint256 j = i + 1; j < n; j++) {\n                Validator memory current = _validatorsMap[orderedValidators[j]];\n                ValidatorSnapshot memory currentSnapshot = _validatorSnapshots[current.validatorAddress][current.changedAt];\n                if (maxSnapshot.totalDelegated < currentSnapshot.totalDelegated) {\n                    nextValidator = j;\n                    currentMax = current;\n                    maxSnapshot = currentSnapshot;\n                }\n            }\n            address backup = orderedValidators[i];\n            orderedValidators[i] = orderedValidators[nextValidator];\n            orderedValidators[nextValidator] = backup;\n        }\n        // this is to cut array to first k elements without copying\n        assembly {\n            mstore(orderedValidators, k)\n        }\n        return orderedValidators;\n    }\n\n    function _depositFee(address validatorAddress, uint256 amount) internal {\n        // make sure validator is active\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status != ValidatorStatus.NotFound, \"not found\");\n        uint64 epoch = currentEpoch();\n        // increase total pending rewards for validator for current epoch\n        ValidatorSnapshot storage currentSnapshot = _touchValidatorSnapshot(validator, epoch);\n        currentSnapshot.totalRewards += uint96(amount);\n        // emit event\n        emit ValidatorDeposited(validatorAddress, amount, epoch);\n    }\n\n    function getValidatorFee(address validatorAddress) external override view returns (uint256) {\n        // make sure validator exists at least\n        Validator memory validator = _validatorsMap[validatorAddress];\n        if (validator.status == ValidatorStatus.NotFound) {\n            return 0;\n        }\n        // calc validator rewards\n        return _calcValidatorOwnerRewards(validator, currentEpoch());\n    }\n\n    function getPendingValidatorFee(address validatorAddress) external override view returns (uint256) {\n        // make sure validator exists at least\n        Validator memory validator = _validatorsMap[validatorAddress];\n        if (validator.status == ValidatorStatus.NotFound) {\n            return 0;\n        }\n        // calc validator rewards\n        return _calcValidatorOwnerRewards(validator, nextEpoch());\n    }\n\n    function claimValidatorFee(address validatorAddress) external override {\n        // make sure validator exists at least\n        Validator storage validator = _validatorsMap[validatorAddress];\n        // only validator owner can claim deposit fee\n        require(msg.sender == validator.ownerAddress, \"only owner\");\n        // claim all validator fees\n        _claimValidatorOwnerRewards(validator, currentEpoch());\n    }\n\n    function getDelegatorFee(address validatorAddress, address delegatorAddress) external override view returns (uint256) {\n        return _calcDelegatorRewardsAndPendingUndelegates(validatorAddress, delegatorAddress, currentEpoch(), true);\n    }\n\n    function getPendingDelegatorFee(address validatorAddress, address delegatorAddress) external override view returns (uint256) {\n        return _calcDelegatorRewardsAndPendingUndelegates(validatorAddress, delegatorAddress, nextEpoch(), true);\n    }\n\n    function claimDelegatorFee(address validatorAddress) external override {\n        // claim all confirmed delegator fees including undelegates\n        _transferDelegatorRewards(validatorAddress, msg.sender, currentEpoch(), true, true);\n    }\n\n    function getStakingRewards(address validator, address delegator) external view returns (uint256) {\n        return _calcDelegatorRewardsAndPendingUndelegates(validator, delegator, currentEpoch(), false);\n    }\n\n    function claimStakingRewards(address validatorAddress) external override {\n        // claim only staking rewards\n        _transferDelegatorRewards(validatorAddress, msg.sender, currentEpoch(), true, false);\n    }\n\n    function claimPendingUndelegates(address validator) external override {\n        // claim only pending undelegates\n        _transferDelegatorRewards(validator, msg.sender, currentEpoch(), false, true);\n    }\n\n    function _calcAvailableForRedelegateAmount(uint256 claimableRewards) internal view returns (uint256 amountToStake, uint256 rewardsDust) {\n        // for redelegate we must split amount into stake-able and dust\n        amountToStake = (claimableRewards / BALANCE_COMPACT_PRECISION) * BALANCE_COMPACT_PRECISION;\n        if (amountToStake < _stakingConfig.getMinStakingAmount()) {\n            return (0, claimableRewards);\n        }\n        // if we have dust remaining after re-stake then send it to user (we can't keep it in the contract)\n        return (amountToStake, claimableRewards - amountToStake);\n    }\n\n    function calcAvailableForRedelegateAmount(address validator, address delegator) external view override returns (uint256 amountToStake, uint256 rewardsDust) {\n        uint256 claimableRewards = _calcDelegatorRewardsAndPendingUndelegates(validator, delegator, currentEpoch(), false);\n        return _calcAvailableForRedelegateAmount(claimableRewards);\n    }\n\n    function redelegateDelegatorFee(address validator) external override {\n        // claim rewards in the redelegate mode (check function code for more info)\n        _redelegateDelegatorRewards(validator, msg.sender, currentEpoch(), true, false);\n    }\n\n    function _safeTransferWithGasLimit(address payable recipient, uint256 amount) internal virtual {\n        (bool success,) = recipient.call{value : amount, gas : TRANSFER_GAS_LIMIT}(\"\");\n        require(success);\n    }\n\n    function _unsafeTransfer(address payable recipient, uint256 amount) internal virtual {\n        (bool success,) = payable(address(recipient)).call{value : amount}(\"\");\n        require(success);\n    }\n\n    function _slashValidator(address validatorAddress) internal {\n        // make sure validator exists\n        Validator memory validator = _validatorsMap[validatorAddress];\n        require(validator.status != ValidatorStatus.NotFound, \"not found\");\n        uint64 epoch = currentEpoch();\n        // increase slashes for current epoch\n        ValidatorSnapshot storage currentSnapshot = _touchValidatorSnapshot(validator, epoch);\n        uint32 slashesCount = currentSnapshot.slashesCount + 1;\n        currentSnapshot.slashesCount = slashesCount;\n        // if validator has a lot of misses then put it in jail for 1 week (if epoch is 1 day)\n        if (slashesCount == _stakingConfig.getFelonyThreshold()) {\n            validator.jailedBefore = currentEpoch() + _stakingConfig.getValidatorJailEpochLength();\n            validator.status = ValidatorStatus.Jail;\n            _removeValidatorFromActiveList(validatorAddress);\n            _validatorsMap[validatorAddress] = validator;\n            emit ValidatorJailed(validatorAddress, epoch);\n        } else {\n            // validator state might change, lets update it\n            _validatorsMap[validatorAddress] = validator;\n        }\n        // emit event\n        emit ValidatorSlashed(validatorAddress, slashesCount, epoch);\n    }\n}\n"
    },
    "@ankr.com/contracts/staking/StakingConfig.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IStakingConfig.sol\";\n\ncontract StakingConfig is Initializable, IStakingConfig {\n\n    event ActiveValidatorsLengthChanged(uint32 prevValue, uint32 newValue);\n    event EpochBlockIntervalChanged(uint32 prevValue, uint32 newValue);\n    event MisdemeanorThresholdChanged(uint32 prevValue, uint32 newValue);\n    event FelonyThresholdChanged(uint32 prevValue, uint32 newValue);\n    event ValidatorJailEpochLengthChanged(uint32 prevValue, uint32 newValue);\n    event UndelegatePeriodChanged(uint32 prevValue, uint32 newValue);\n    event MinValidatorStakeAmountChanged(uint256 prevValue, uint256 newValue);\n    event MinStakingAmountChanged(uint256 prevValue, uint256 newValue);\n    event GovernanceAddressChanged(address prevValue, address newValue);\n    event TreasuryAddressChanged(address prevValue, address newValue);\n    event LockPeriodChanged(uint64 prevValue, uint64 newValue);\n\n    struct Slot0 {\n        uint32 activeValidatorsLength;\n        uint32 epochBlockInterval;\n        uint32 misdemeanorThreshold;\n        uint32 felonyThreshold;\n        uint32 validatorJailEpochLength;\n        uint32 undelegatePeriod;\n        uint256 minValidatorStakeAmount;\n        uint256 minStakingAmount;\n        address governanceAddress;\n        address treasuryAddress;\n        uint64 lockPeriod;\n    }\n\n    Slot0 private _slot0;\n\n    function initialize(\n        uint32 activeValidatorsLength,\n        uint32 epochBlockInterval,\n        uint32 misdemeanorThreshold,\n        uint32 felonyThreshold,\n        uint32 validatorJailEpochLength,\n        uint32 undelegatePeriod,\n        uint256 minValidatorStakeAmount,\n        uint256 minStakingAmount,\n        address governanceAddress,\n        address treasuryAddress,\n        uint64 lockPeriod\n    ) external initializer {\n        _slot0.activeValidatorsLength = activeValidatorsLength;\n        emit ActiveValidatorsLengthChanged(0, activeValidatorsLength);\n        _slot0.epochBlockInterval = epochBlockInterval;\n        emit EpochBlockIntervalChanged(0, epochBlockInterval);\n        _slot0.misdemeanorThreshold = misdemeanorThreshold;\n        emit MisdemeanorThresholdChanged(0, misdemeanorThreshold);\n        _slot0.felonyThreshold = felonyThreshold;\n        emit FelonyThresholdChanged(0, felonyThreshold);\n        _slot0.validatorJailEpochLength = validatorJailEpochLength;\n        emit ValidatorJailEpochLengthChanged(0, validatorJailEpochLength);\n        _slot0.undelegatePeriod = undelegatePeriod;\n        emit UndelegatePeriodChanged(0, undelegatePeriod);\n        _slot0.minValidatorStakeAmount = minValidatorStakeAmount;\n        emit MinValidatorStakeAmountChanged(0, minValidatorStakeAmount);\n        _slot0.minStakingAmount = minStakingAmount;\n        emit MinStakingAmountChanged(0, minStakingAmount);\n        _slot0.governanceAddress = governanceAddress;\n        emit GovernanceAddressChanged(address(0x00), governanceAddress);\n        _slot0.treasuryAddress = treasuryAddress;\n        emit TreasuryAddressChanged(address(0x00), treasuryAddress);\n        _slot0.lockPeriod = lockPeriod;\n        emit LockPeriodChanged(0, lockPeriod);\n    }\n\n    modifier onlyFromGovernance() virtual {\n        require(msg.sender == _slot0.governanceAddress, \"Staking: only governance\");\n        _;\n    }\n\n    function getSlot0() external view returns (Slot0 memory) {\n        return _slot0;\n    }\n\n    function getActiveValidatorsLength() external view override returns (uint32) {\n        return _slot0.activeValidatorsLength;\n    }\n\n    function setActiveValidatorsLength(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.activeValidatorsLength;\n        _slot0.activeValidatorsLength = newValue;\n        emit ActiveValidatorsLengthChanged(prevValue, newValue);\n    }\n\n    function getEpochBlockInterval() external view override returns (uint32) {\n        return _slot0.epochBlockInterval;\n    }\n\n    function setEpochBlockInterval(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.epochBlockInterval;\n        _slot0.epochBlockInterval = newValue;\n        emit EpochBlockIntervalChanged(prevValue, newValue);\n    }\n\n    function getMisdemeanorThreshold() external view override returns (uint32) {\n        return _slot0.misdemeanorThreshold;\n    }\n\n    function setMisdemeanorThreshold(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.misdemeanorThreshold;\n        _slot0.misdemeanorThreshold = newValue;\n        emit MisdemeanorThresholdChanged(prevValue, newValue);\n    }\n\n    function getFelonyThreshold() external view override returns (uint32) {\n        return _slot0.felonyThreshold;\n    }\n\n    function setFelonyThreshold(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.felonyThreshold;\n        _slot0.felonyThreshold = newValue;\n        emit FelonyThresholdChanged(prevValue, newValue);\n    }\n\n    function getValidatorJailEpochLength() external view override returns (uint32) {\n        return _slot0.validatorJailEpochLength;\n    }\n\n    function setValidatorJailEpochLength(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.validatorJailEpochLength;\n        _slot0.validatorJailEpochLength = newValue;\n        emit ValidatorJailEpochLengthChanged(prevValue, newValue);\n    }\n\n    function getUndelegatePeriod() external view override returns (uint32) {\n        return _slot0.undelegatePeriod;\n    }\n\n    function setUndelegatePeriod(uint32 newValue) external override onlyFromGovernance {\n        uint32 prevValue = _slot0.undelegatePeriod;\n        _slot0.undelegatePeriod = newValue;\n        emit UndelegatePeriodChanged(prevValue, newValue);\n    }\n\n    function getMinValidatorStakeAmount() external view override returns (uint256) {\n        return _slot0.minValidatorStakeAmount;\n    }\n\n    function setMinValidatorStakeAmount(uint256 newValue) external override {\n        uint256 prevValue = _slot0.minValidatorStakeAmount;\n        _slot0.minValidatorStakeAmount = newValue;\n        emit MinValidatorStakeAmountChanged(prevValue, newValue);\n    }\n\n    function getMinStakingAmount() external view override returns (uint256) {\n        return _slot0.minStakingAmount;\n    }\n\n    function setMinStakingAmount(uint256 newValue) external override {\n        uint256 prevValue = _slot0.minStakingAmount;\n        _slot0.minStakingAmount = newValue;\n        emit MinStakingAmountChanged(prevValue, newValue);\n    }\n\n    function getGovernanceAddress() external view override returns (address) {\n        return _slot0.governanceAddress;\n    }\n\n    function setGovernanceAddress(address newValue) external override {\n        address prevValue = _slot0.governanceAddress;\n        _slot0.governanceAddress = newValue;\n        emit GovernanceAddressChanged(prevValue, newValue);\n    }\n\n    function getTreasuryAddress() external view override returns (address) {\n        return _slot0.treasuryAddress;\n    }\n\n    function setTreasuryAddress(address newValue) external override {\n        address prevValue = _slot0.treasuryAddress;\n        _slot0.treasuryAddress = newValue;\n        emit TreasuryAddressChanged(prevValue, newValue);\n    }\n\n    function getLockPeriod() external view override returns (uint64) {\n        return _slot0.lockPeriod;\n    }\n\n    function setLockPeriod(uint64 newValue) external override onlyFromGovernance {\n        uint64 prevValue = _slot0.lockPeriod;\n        _slot0.lockPeriod = newValue;\n        emit LockPeriodChanged(prevValue, newValue);\n    }\n}"
    },
    "@ankr.com/contracts/staking/extension/TokenStaking.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"../../interfaces/ITokenStaking.sol\";\n\nimport \"../Staking.sol\";\n\ncontract TokenStaking is Staking, ITokenStaking {\n\n    // address of the erc20 token\n    IERC20 internal _erc20Token;\n    // reserve some gap for the future upgrades\n    uint256[100 - 2] private __reserved;\n\n    function __TokenStaking_init(IStakingConfig chainConfig, IERC20 erc20Token) internal {\n        _stakingConfig = chainConfig;\n        _erc20Token = erc20Token;\n    }\n\n    function getErc20Token() external view override returns (IERC20) {\n        return _erc20Token;\n    }\n\n    function delegate(address validatorAddress, uint256 amount) payable external override {\n        require(_erc20Token.transferFrom(msg.sender, address(this), amount), \"failed to transfer\");\n        _delegateTo(msg.sender, validatorAddress, amount);\n    }\n\n    function distributeRewards(address validatorAddress, uint256 amount) external override {\n        require(_erc20Token.transferFrom(msg.sender, address(this), amount), \"failed to transfer\");\n        _depositFee(validatorAddress, amount);\n    }\n\n    function _safeTransferWithGasLimit(address payable recipient, uint256 amount) internal override {\n        require(_erc20Token.transfer(recipient, amount), \"failed to safe transfer\");\n    }\n\n    function _unsafeTransfer(address payable recipient, uint256 amount) internal override {\n        require(_erc20Token.transfer(recipient, amount), \"failed to safe transfer\");\n    }\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "/contracts/protocol/AnkrTokenStakingProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\nimport \"@ankr.com/contracts/libs/ManageableProxy.sol\";\nimport \"@ankr.com/contracts/protocol/AnkrTokenStaking.sol\";\n\ncontract AnkrTokenStakingProxy is ManageableProxy {\n\n    constructor(IStakingConfig stakingConfig, IERC20 ankrToken) ManageableProxy(\n        stakingConfig, _deployDefault(),\n        abi.encodeWithSelector(AnkrTokenStaking.initialize.selector, stakingConfig, ankrToken)\n    ) {\n    }\n\n    function _deployDefault() internal returns (address) {\n        AnkrTokenStaking impl = new AnkrTokenStaking{\n        salt : keccak256(\"AnkrTokenStakingV0\")\n        }();\n        return address(impl);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}