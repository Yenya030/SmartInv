{{
  "language": "Solidity",
  "sources": {
    "/contracts/Phoenixes/Phoenixes.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\nimport './Delegated.sol';\r\nimport './ERC721Staked.sol';\r\nimport './Merkle.sol';\r\nimport './Royalties.sol';\r\n\r\ncontract Phoenixes is Delegated, ERC721Staked, Royalties, Merkle {\r\n  using Address for address;\r\n  using Strings for uint256;\r\n\r\n  struct MintConfig{\r\n    uint64 ethPrice;\r\n    uint16 maxMint;\r\n    uint16 maxOrder;\r\n    uint16 maxSupply;\r\n\r\n    SaleState saleState;\r\n  }\r\n\r\n  enum SaleState{\r\n    NONE,\r\n    PRESALE,\r\n    MAINSALE\r\n  }\r\n\r\n  MintConfig public config = MintConfig(\r\n    0.0888 ether,\r\n       3,\r\n       3,\r\n    8888,\r\n\r\n    SaleState.NONE\r\n  );\r\n\r\n  address public crossmintProxy = 0xdAb1a1854214684acE522439684a145E62505233;\r\n  address public payee = 0x4d0b3D71F4De4aaF2ea798A20F4EaD55A0F7416F;\r\n  uint256 public supplyPerFaction = 1111;\r\n  string public tokenURIPrefix;\r\n  string public tokenURISuffix;\r\n\r\n  mapping(uint256 => uint16) public factionSupply;\r\n\r\n\r\n  constructor()\r\n    ERC721B(\"Phoenixes\", \"PHNX\")\r\n    Royalties( owner(), 690, 10000 ){\r\n  }\r\n\r\n\r\n  //safety first\r\n  receive() external payable {}\r\n\r\n\r\n  //view\r\n  function getFactionSupply() external view returns(uint[] memory factions){\r\n    factions = new uint[]( 9 );\r\n    factions[0] = config.maxSupply - _supply;\r\n    factions[1] = supplyPerFaction - factionSupply[1];\r\n    factions[2] = supplyPerFaction - factionSupply[2];\r\n    factions[3] = supplyPerFaction - factionSupply[3];\r\n    factions[4] = supplyPerFaction - factionSupply[4];\r\n    factions[5] = supplyPerFaction - factionSupply[5];\r\n    factions[6] = supplyPerFaction - factionSupply[6];\r\n    factions[7] = supplyPerFaction - factionSupply[7];\r\n    factions[8] = supplyPerFaction - factionSupply[8];\r\n  }\r\n\r\n\r\n  //payable\r\n  function crossMint( uint16 quantity, uint16 factionIdx, address recipient, bytes32[] calldata proof ) external payable {\r\n    require( msg.sender == crossmintProxy );\r\n    _mint( quantity, factionIdx, recipient, proof );\r\n  }\r\n\r\n  function mint( uint16 quantity, uint16 factionIdx, bytes32[] calldata proof ) external payable {\r\n    _mint( quantity, factionIdx, msg.sender, proof );\r\n  }\r\n\r\n\r\n  //onlyDelegates\r\n  function burnFrom(uint256[] calldata tokenIds, address account) external payable onlyDelegates{\r\n    unchecked{\r\n      for(uint i; i < tokenIds.length; ++i ){\r\n        uint256 tokenId = tokenIds[i];\r\n        require( tokens[ tokenId ].stakeStart == 1, \"Cannot burn while staked\" );\r\n        _burn( account, tokenId );\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function mintTo(uint16[] calldata quantity, uint16[] calldata factions, address[] calldata recipient) external payable onlyDelegates{\r\n    require(quantity.length == recipient.length, \"Must provide equal quantities and recipients\" );\r\n\r\n    uint256 totalQuantity = 0;\r\n    unchecked{\r\n      for(uint256 i = 0; i < quantity.length; ++i){\r\n        totalQuantity += quantity[i];\r\n      }\r\n    }\r\n    require( totalSupply() + totalQuantity <= config.maxSupply, \"Mint/order exceeds supply\" );\r\n\r\n    bool randomize;\r\n    uint256 factionIdx;\r\n    bytes memory hashData = _hashData();\r\n    unchecked{\r\n      for(uint256 i; i < recipient.length; ++i){\r\n        owners[recipient[i]].balance += quantity[i];\r\n\r\n        factionIdx = factions[i];\r\n        randomize = factionIdx == 0;\r\n        for(uint256 j; j < quantity[i]; ++j){\r\n          if( randomize )\r\n            factionIdx = _randomFaction( hashData, j );\r\n          else\r\n            require( factionSupply[ factionIdx ] + quantity[i] <= supplyPerFaction, \"Mint/Order exceeds factoin supply\" );\r\n\r\n          uint256 tokenId = (factionIdx - 1) * supplyPerFaction + factionSupply[ factionIdx ];\r\n          ++factionSupply[ factionIdx ];\r\n          _mint( recipient[i], tokenId );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function resurrectFor( uint[] calldata tokenIds, address[] calldata recipient ) external onlyDelegates{\r\n    require(tokenIds.length == recipient.length,   \"Must provide equal tokenIds and recipients\" );\r\n\r\n    unchecked{\r\n      uint256 tokenId;\r\n      for(uint i; i < tokenIds.length; ++i ){\r\n        tokenId = tokenIds[i];\r\n        require( !_exists( tokenId ), \"Resurrect token(s) must not exist\" );\r\n\r\n        --owners[address(0)].balance;\r\n        ++tokens[tokenId].revived;\r\n        _transfer(address(0), recipient[i], tokenId);\r\n      }\r\n    }\r\n  }\r\n\r\n  function setConfig( MintConfig calldata newConfig ) external onlyDelegates{\r\n    require( newConfig.maxOrder <= newConfig.maxSupply, \"max order must be lte max supply\" );\r\n    require( totalSupply() <= newConfig.maxSupply, \"max supply must be gte total supply\" );\r\n    require( uint8(newConfig.saleState) < 3, \"invalid sale state\" );\r\n\r\n    config = newConfig;\r\n  }\r\n\r\n  function setCrossmint( address proxy ) external onlyDelegates{\r\n    crossmintProxy = proxy;\r\n  }\r\n\r\n  function setFactionSupply( uint256 newSupply ) external onlyDelegates{\r\n    supplyPerFaction = newSupply;\r\n  }\r\n\r\n  function setPayee( address newPayee ) external onlyOwner{\r\n    payee = newPayee;\r\n  }\r\n\r\n  function setStakeHandler( IStakeHandler handler ) external onlyDelegates{\r\n    stakeHandler = handler;\r\n  }\r\n\r\n  function setTokenURI( string calldata prefix, string calldata suffix ) external onlyDelegates{\r\n    tokenURIPrefix = prefix;\r\n    tokenURISuffix = suffix;\r\n  }\r\n\r\n  //onlyOwner\r\n  function setDefaultRoyalty( address receiver, uint16 feeNumerator, uint16 feeDenominator ) external onlyOwner {\r\n    _setDefaultRoyalty( receiver, feeNumerator, feeDenominator );\r\n  }\r\n\r\n  //view: IERC165\r\n  function supportsInterface(bytes4 interfaceId) public view override(ERC721EnumerableB, Royalties) returns (bool) {\r\n    return ERC721EnumerableB.supportsInterface(interfaceId)\r\n      || Royalties.supportsInterface(interfaceId);\r\n  }\r\n\r\n\r\n  //view: IERC721Metadata\r\n  function tokenURI( uint256 tokenId ) external view returns( string memory ){\r\n    require(_exists(tokenId), \"query for nonexistent token\");\r\n    return string(abi.encodePacked(tokenURIPrefix, tokenId.toString(), tokenURISuffix));\r\n  }\r\n\r\n  function withdraw() external onlyOwner {\r\n    require(address(this).balance >= 0, \"No funds available\");\r\n    Address.sendValue(payable(owner()), address(this).balance);\r\n  }\r\n\r\n  //private\r\n  function _mint( uint16 quantity, uint256 factionIdx, address recipient, bytes32[] memory proof ) private {\r\n    require( quantity > 0, \"Must order 1+\" );\r\n    require( factionIdx < 9, \"Invalid faction\" );\r\n\r\n    MintConfig memory cfg = config;\r\n    Owner memory prev = owners[recipient];\r\n    require( quantity <= cfg.maxOrder,                  \"Order too big\" );\r\n    require( prev.purchased + quantity <= cfg.maxMint,  \"Mint limit reached\" );\r\n    require( totalSupply() + quantity <= cfg.maxSupply, \"Mint/Order exceeds supply\" );\r\n    require( msg.value >= cfg.ethPrice * quantity,      \"Ether sent is not correct\" );\r\n\r\n    if( factionIdx > 0 ){\r\n      require( factionSupply[ factionIdx ] + quantity <= supplyPerFaction, \"Mint/Order exceeds faction supply\" );\r\n    }\r\n\r\n\r\n    if( cfg.saleState == SaleState.MAINSALE ){\r\n      //no-op\r\n    }\r\n    else if( cfg.saleState == SaleState.PRESALE ){\r\n      require( _isValidProof( keccak256( abi.encodePacked( recipient ) ), proof ),  \"Not on the access list\" );\r\n    }\r\n    else{\r\n      revert( \"Sale is not active\" );\r\n    }\r\n\r\n    bytes memory hashData = _hashData();\r\n    bool randomize = factionIdx == 0;\r\n    unchecked{\r\n      owners[recipient] = Owner(\r\n        prev.balance + quantity,\r\n        prev.purchased + quantity\r\n      );\r\n\r\n      for(uint256 i; i < quantity; ++i ){\r\n        if( randomize )\r\n          factionIdx = _randomFaction( hashData, i );\r\n\r\n        uint256 tokenId = (factionIdx - 1) * supplyPerFaction + factionSupply[ factionIdx ];\r\n        ++factionSupply[ factionIdx ];\r\n        _mint( recipient, tokenId );\r\n      }\r\n    }\r\n  }\r\n\r\n  function _hashData() private view returns( bytes memory ){\r\n    //uint160 cbVal = uint160( address(block.coinbase) );\r\n    bytes memory hashData = bytes.concat(\"\", bytes20( address(block.coinbase)));  //160 bits\r\n\r\n    //uint40 feeVal = uint40( block.basefee  % type(uint40).max );\r\n    hashData = bytes.concat(hashData, bytes5( uint40( block.basefee  % type(uint40).max )));  //200 bits\r\n\r\n    //uint32 limVal = uint32( block.gaslimit % type(uint32).max );\r\n    hashData = bytes.concat(hashData, bytes4( uint32( block.gaslimit % type(uint32).max )));  //232 bits\r\n\r\n    //uint40 gasVal =  uint40( tx.gasprice  % type(uint40).max );\r\n    return bytes.concat(hashData, bytes5( uint40( tx.gasprice  % type(uint40).max )));  //272 bits\r\n  }\r\n\r\n  function _randomFaction( bytes memory hashData, uint256 index) private view returns( uint256 ){\r\n    uint256 random = _random( hashData, index );\r\n    for( uint256 i; i < 8; ++i ){\r\n      uint256 factionIdx_ = ((random + i) % 8) + 1;\r\n      if( factionSupply[ factionIdx_ ] < supplyPerFaction )\r\n        return factionIdx_;\r\n    }\r\n\r\n    revert( \"Random failed\" );\r\n  }\r\n\r\n  function _random(bytes memory hashData, uint256 index) private view returns( uint256 ){\r\n    uint256 blockid = block.number - (gasleft() % type(uint8).max);\r\n    uint256 blkHash = uint256(blockhash( blockid ));\r\n    return uint256(keccak256(\r\n      index % 2 == 1 ?\r\n        abi.encodePacked( blkHash, index, hashData ):\r\n        abi.encodePacked( hashData, index, blkHash )\r\n      ));\r\n  }\r\n}\r\n"
    },
    "/contracts/Phoenixes/Royalties.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ncontract Royalties is IERC2981{\n\n  struct Fraction{\n    uint16 numerator;\n    uint16 denominator;\n  }\n\n  struct Royalty{\n    address receiver;\n    Fraction fraction;\n  }\n\n  Royalty public defaultRoyalty;\n  //mapping(uint => Royalty) public tokenRoyalties;\n\n  constructor( address receiver, uint16 royaltyNum, uint16 royaltyDenom ){\n    _setDefaultRoyalty( receiver, royaltyNum, royaltyDenom );\n  }\n\n  //view: IERC2981\n  /**\n   * @dev See {IERC2981-royaltyInfo}.\n   **/\n  function royaltyInfo(uint256, uint256 _salePrice) external view virtual returns (address, uint256) {\n    /*\n    Royalty memory royalty = _tokenRoyaltyInfo[_tokenId];\n    if (royalty.receiver == address(0)) {\n        royalty = _defaultRoyaltyInfo;\n    }\n    */\n\n    uint256 royaltyAmount = (_salePrice * defaultRoyalty.fraction.numerator) / defaultRoyalty.fraction.denominator;\n    return (defaultRoyalty.receiver, royaltyAmount);\n  }\n\n  //view: IERC165\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   **/\n  function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n    return interfaceId == type(IERC2981).interfaceId;\n  }\n\n\n  function _setDefaultRoyalty( address receiver, uint16 royaltyNum, uint16 royaltyDenom ) internal {\n    defaultRoyalty.receiver = receiver;\n    defaultRoyalty.fraction = Fraction(royaltyNum, royaltyDenom);\n  }\n}\n"
    },
    "/contracts/Phoenixes/Merkle.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./Delegated.sol\";\n\ncontract Merkle is Delegated{\n  bytes32 internal _merkleRoot = \"\";\n\n  function setMerkleRoot( bytes32 merkleRoot_ ) external onlyDelegates{\n    _merkleRoot = merkleRoot_;\n  }\n\n  function _isValidProof(bytes32 leaf, bytes32[] memory proof) internal view returns( bool ){\n    return MerkleProof.processProof( proof, leaf ) == _merkleRoot;\n  }\n}\n"
    },
    "/contracts/Phoenixes/IStakeHandler.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nstruct StakeSummary{\r\n  address owner;  //160\r\n  uint16 tokenId; //176\r\n  uint32 accrued; //208\r\n  uint32 total;   //240\r\n}\r\n\r\ninterface IStakeHandler{\r\n  function handleClaims( StakeSummary[] calldata stakes ) external;\r\n  function handleStakes( uint256[] calldata tokenIds ) external;\r\n}\r\n"
    },
    "/contracts/Phoenixes/IERC721Batch.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IERC721Batch {\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool );\n  function safeTransferBatch( address from, address to, uint[] calldata tokenIds, bytes calldata data ) external;\n  function transferBatch( address from, address to, uint[] calldata tokenIds ) external;\n  function walletOfOwner( address account ) external view returns( uint[] memory );\n}\n"
    },
    "/contracts/Phoenixes/ERC721Staked.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./ERC721Batch.sol\";\nimport \"./IStakeHandler.sol\";\n\nabstract contract ERC721Staked is ERC721Batch {\n  IStakeHandler public stakeHandler;\n\n  function ownerOf( uint256 tokenId ) public override view returns( address currentOwner ){\n    require(_exists(tokenId), \"ERC721B: query for nonexistent token\");\n    if( tokens[ tokenId ].stakeStart > 1 )\n      currentOwner = address(this);\n    else\n      currentOwner = tokens[tokenId].owner;\n  }\n\n  function claimTokens( uint256[] calldata tokenIds, bool restake ) external {\n    uint32 time = uint32(block.timestamp);\n    StakeSummary[] memory stakes = new StakeSummary[](tokenIds.length);\n    for(uint256 i = 0; i < tokenIds.length; ++i ){\n      Token storage token = tokens[ tokenIds[i] ];\n      require( token.owner == msg.sender, \"caller is not owner\" );\n      require( token.stakeStart > 1, \"token is not staked\");\n\n      uint32 accrued = ( time - token.stakeStart );\n      token.stakeTotal += accrued;\n      token.stakeStart = restake ? time : 1;\n\n      stakes[ i ] = StakeSummary(\n        msg.sender,\n        uint16(tokenIds[i]),\n        accrued,\n        token.stakeTotal\n      );\n    }\n\n    if( address(stakeHandler) != address(0) ){\n      stakeHandler.handleClaims( stakes );\n    }\n  }\n\n  function stakeTokens( uint256[] calldata tokenIds ) external {\n    for(uint256 i; i < tokenIds.length; ++i ){\n      require( _exists(tokenIds[i]), \"stake for nonexistent token\" );\n\n      Token storage token = tokens[ tokenIds[i] ];\n      require( token.owner == msg.sender, \"caller is not owner\" );\n      require( token.stakeStart < 2, \"token  is already staked\");\n      tokens[ tokenIds[ i ] ].stakeStart = uint32(block.timestamp);\n    }\n\n    if( address(stakeHandler) != address(0) ){\n      stakeHandler.handleStakes( tokenIds );\n    }\n  }\n\n\n  //internal\n  function _isStaked( uint256 tokenId ) internal view returns( bool ){\n    return tokens[ tokenId ].stakeStart > 1;\n  }\n\n  function _transfer(address from, address to, uint256 tokenId) internal virtual override {\n    require( !_isStaked(tokenId), \"token is staked\" );\n    super._transfer( from, to, tokenId );\n  }\n}\n"
    },
    "/contracts/Phoenixes/ERC721EnumerableB.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"./ERC721B.sol\";\n\nabstract contract ERC721EnumerableB is ERC721B, IERC721Enumerable {\n  function supportsInterface( bytes4 interfaceId ) public view virtual override(ERC721B, IERC165) returns( bool ){\n    return interfaceId == type(IERC721Enumerable).interfaceId\n      || super.supportsInterface( interfaceId );\n  }\n\n  function tokenOfOwnerByIndex( address owner, uint256 index ) external view returns( uint256 ){\n    require( owners[ owner ].balance > index, \"ERC721EnumerableB: owner index out of bounds\" );\n\n    uint256 count;\n    uint256 tokenId;\n    for( tokenId = 0; tokenId < 8888; ++tokenId ){\n      if( owner != tokens[tokenId].owner )\n        continue;\n\n      if( index == count++ )\n        break;\n    }\n    return tokenId;\n  }\n\n  function tokenByIndex( uint256 index ) external view returns( uint256 ){\n    require( _exists( index ), \"ERC721EnumerableB: query for nonexistent token\");\n    return index;\n  }\n\n  function totalSupply() public view returns( uint256 ){\n    return _supply - burned();\n  }\n}\n"
    },
    "/contracts/Phoenixes/ERC721Batch.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IERC721Batch.sol\";\nimport \"./ERC721EnumerableB.sol\";\n\nabstract contract ERC721Batch is ERC721EnumerableB, IERC721Batch {\n  function isOwnerOf( address account, uint[] calldata tokenIds ) external view returns( bool ){\n    for(uint i; i < tokenIds.length; ++i ){\n      if( account != tokens[ tokenIds[i] ].owner )\n        return false;\n    }\n\n    return true;\n  }\n\n  function safeTransferBatch( address from, address to, uint256[] calldata tokenIds, bytes calldata data ) external{\n    for(uint i; i < tokenIds.length; ++i ){\n      safeTransferFrom( from, to, tokenIds[i], data );\n    }\n  }\n\n  function transferBatch( address from, address to, uint256[] calldata tokenIds ) external{\n    for(uint i; i < tokenIds.length; ++i ){\n      transferFrom( from, to, tokenIds[i] );\n    }\n  }\n\n  function walletOfOwner( address account ) external view returns( uint[] memory ){\n    uint256 count;\n    uint256 quantity = owners[ account ].balance;\n    uint256[] memory wallet = new uint[]( quantity );\n    for( uint i = 0; i < 8888; ++i ){\n      if( account == tokens[i].owner ){\n        wallet[ count++ ] = i;\n        if( count == quantity )\n          break;\n      }\n    }\n    return wallet;\n  }\n}"
    },
    "/contracts/Phoenixes/ERC721B.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n\nabstract contract ERC721B is Context, ERC165, IERC721, IERC721Metadata {\n  using Address for address;\n\n  struct Owner{\n    uint16 balance;\n    uint16 purchased;\n  }\n\n  struct Token{\n    address owner;\n    uint32 stakeStart;\n    uint32 stakeTotal;\n    uint16 revived;\n  }\n\n  mapping(uint256 => Token) public tokens;\n  mapping(address => Owner) public owners;\n\n  uint256 internal _supply;\n  string private _name;\n  string private _symbol;\n\n  mapping(uint256 => address) internal _tokenApprovals;\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  constructor(string memory name_, string memory symbol_ ){\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  //public view\n  function balanceOf(address owner) external view returns( uint256 balance ){\n    require(owner != address(0), \"ERC721B: balance query for the zero address\");\n    return owners[owner].balance;\n  }\n\n  function burned() public view returns(uint256){\n    return owners[address(0)].balance;\n  }\n\n  function name() external view returns( string memory name_ ){\n    return _name;\n  }\n\n  function ownerOf(uint256 tokenId) public virtual view returns( address owner ){\n    require(_exists(tokenId), \"ERC721B: query for nonexistent token\");\n    return tokens[tokenId].owner;\n  }\n\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns( bool isSupported ){\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function symbol() external view returns( string memory symbol_ ){\n    return _symbol;\n  }\n\n\n  //approvals\n  function approve(address to, uint tokenId) external{\n    address owner = tokens[tokenId].owner;\n    require(to != owner, \"ERC721B: approval to current owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721B: caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId);\n  }\n\n  function getApproved(uint256 tokenId) public view returns( address approver ){\n    require(_exists(tokenId), \"ERC721: query for nonexistent token\");\n    return _tokenApprovals[tokenId];\n  }\n\n  function isApprovedForAll(address owner, address operator) public view returns( bool isApproved ){\n    return _operatorApprovals[owner][operator];\n  }\n\n  function setApprovalForAll(address operator, bool approved) external{\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n\n  //transfers\n  function safeTransferFrom(address from, address to, uint256 tokenId) external{\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public{\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721B: caller is not owner nor approved\");\n    _safeTransfer(from, to, tokenId, _data);\n  }\n\n  function transferFrom(address from, address to, uint256 tokenId) public{\n    //solhint-disable-next-line max-line-length\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721B: caller is not owner nor approved\");\n    _transfer(from, to, tokenId);\n  }\n\n\n  //internal\n  function _approve(address to, uint tokenId) internal{\n    _tokenApprovals[tokenId] = to;\n    emit Approval(tokens[tokenId].owner, to, tokenId);\n  }\n\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {\n  }\n\n  function _burn( address from, uint tokenId ) internal{\n    _transfer( from, address(0), tokenId );\n  }\n\n  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) private returns( bool ){\n    if (to.isContract()) {\n      try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721B: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  function _exists(uint256 tokenId) internal view returns( bool ){\n    return tokens[tokenId].owner != address(0);\n  }\n\n  function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns( bool isApproved ){\n    require(_exists(tokenId), \"ERC721B: query for nonexistent token\");\n    address owner = tokens[tokenId].owner;\n    return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n  }\n\n  function _mint( address to, uint256 tokenId ) internal{\n    require(!_exists(tokenId), \"ERC721B: mint for existing token\");\n    _beforeTokenTransfer(address(0), to, tokenId);\n\n    ++_supply;\n    tokens[ tokenId ] = Token( to, 1, 1, 0 );\n    emit Transfer( address(0), to, tokenId );\n  }\n\n  function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal{\n    _transfer(from, to, tokenId);\n    require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721B: transfer to non ERC721Receiver implementer\");\n  }\n\n  function _transfer(address from, address to, uint256 tokenId) internal virtual{\n    require(tokens[tokenId].owner == from, \"ERC721B: transfer of token that is not own\");\n\n    // Clear approvals from the previous owner\n    delete _tokenApprovals[tokenId];\n    _beforeTokenTransfer(from, to, tokenId);\n\n    unchecked{\n      --owners[from].balance;\n      ++owners[to].balance;\n    }\n\n    tokens[tokenId].owner = to;\n    emit Transfer(from, to, tokenId);\n  }\n}\n"
    },
    "/contracts/Phoenixes/Delegated.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable{\n  mapping(address => bool) internal _delegates;\n\n  modifier onlyDelegates {\n    require(_delegates[msg.sender], \"Invalid delegate\" );\n    _;\n  }\n\n  constructor()\n    Ownable(){\n    setDelegate( owner(), true );\n  }\n\n  //onlyOwner\n  function isDelegate( address addr ) external view onlyOwner returns( bool ){\n    return _delegates[addr];\n  }\n\n  function setDelegate( address addr, bool isDelegate_ ) public onlyOwner{\n    _delegates[addr] = isDelegate_;\n  }\n\n  function transferOwnership(address newOwner) public override onlyOwner {\n    super.transferOwnership( newOwner );\n    setDelegate( owner(), true );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}