{{
  "language": "Solidity",
  "sources": {
    "GMOO.sol": {
      "content": "/*                              gweMBMEBBBMBMEBMBwg_.                                                           \r\n                           aeMMEPP\"  ' '. .  ..\"\"^BMMBMe_'                             )BE   zEE .ZEEBL  JBBMg. \r\n                      __eEMPP .                     .`?RBEe,.                          $BM$_JMMBLJMEOEBL BEPEEE \r\n                    _BMMK'                              ''ME$L.                        $EEMEMBMB'5EE MMK$BE.]ME \r\n                  _BMB'                                    .$EE,   g@@BBBEEB.          5MB$EBEEE'MMK'MBKEME BEf \r\n  _eMBMMMEBM@g,,.zB$\"                                         EBMMBBF``' .'EEk         MM('\".]B$.EMKJBB BBL,EEP \r\n JB$`. .. `?PKEMBEMBMEBg_                           _,we_      SBB.        ]ME        .BBP   $EE EMMME`.BBMMEK  \r\n $MP           .  . ``FBMe                          EEFEEE     .BEL       .$MK        .^^    1M   \"F^.  .APP.   \r\n 1BE'                   ^B$.                       JBB .BMK     JME      .BEK                                   \r\n  1MB,                   [EE                        BB, 5B[     )E$    ,gBB`            .EEk                    \r\n    BEB                 .BMP                        ?BEgME.    _BEBgLeMMBC_'          ,e$EM^                    \r\n    .`MBMg,            gEBE'  ',,        eEBe,,,  . _@EEEE___e@MEPPPMEEMMMBBe         $MEP`                     \r\n      ,BMBEMEew_L,_-wMBBR`    'RBMBewwBEBE\"?PBBMEBMEER^`?RRMBM^`.  @e.    'BB.                                  \r\n  __eBBP`''''^RRRBRRP`..        ..\"\"YY`                     '.wgwL.'MBE  _wEE                                   \r\n.@MBP`.                      Lgg_              _eMg.        JEBEMMe  3MMME$K                                    \r\n$BP.                       JBBEBEB.           yBBBMBy       $EBMEBE   $ME.                                      \r\n&EK_         .,            \\MBEBBE.           \"^   `.        '^R^ '   .BM'                                      \r\n `EEBBe@e@@BEMBK           ' RRK\".                                     MB                                       \r\n     BE$^YY\"` .                                                       JM$                 https://www.gmcafe.io/\r\n     ^\".                                                              .*/\r\n/// @author raffy.eth\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts@4.6.0/access/Ownable.sol\";\r\nimport {IERC165} from \"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts@4.6.0/token/ERC721/IERC721.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts@4.6.0/token/ERC1155/IERC1155.sol\";\r\nimport {IERC721Metadata} from \"@openzeppelin/contracts@4.6.0/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport {IERC721Receiver} from \"@openzeppelin/contracts@4.6.0/token/ERC721/IERC721Receiver.sol\";\r\n\r\ncontract GMOO is Ownable, IERC165, IERC721, IERC721Metadata {\r\n\r\n\tfunction supportsInterface(bytes4 interfaceId) public pure returns (bool) {\r\n\t\treturn interfaceId == type(IERC165).interfaceId // 0x01ffc9a7 \r\n\t\t\t|| interfaceId == type(IERC721).interfaceId // 0x80ac58cd\r\n\t\t\t|| interfaceId == type(IERC721Metadata).interfaceId; // 0x5b5e139f\r\n\t}\r\n\r\n\terror InvalidInput();\r\n\terror NotOpenSeaOwner(uint256 token); \r\n\terror AlreadyMigrated(uint256 moo);\r\n\terror InvalidMoo(uint256 moo);\r\n\terror NotMooOperator(uint256 moo);\r\n\terror InvalidReceiver();\r\n\terror InvalidLockState();\r\n\terror NotAllowed();\r\n\r\n\tevent MooLocked(uint256 moo);\r\n\tevent MooUnlocked(uint256 moo);\r\n\tevent MooUnlockAttempt(uint256 moo);\r\n\r\n\tuint256 constant HERD_SIZE = 333;\r\n\taddress constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\taddress constant OPENSEA_CONDUIT = 0x1E0049783F008A0085193E00003D00cd54003c71;\r\n\tIERC1155 constant OPENSEA_NFT = IERC1155(0x495f947276749Ce646f68AC8c248420045cb7b5e); \r\n\tuint256 constant CLAIM_DELAY = 33 days;\r\n\r\n\t//               OWNER_SHIFT    =   0; // 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \r\n\tuint256 constant BLOCK_SHIFT    = 160; // 0x0000000000000000FFFFFFFF0000000000000000000000000000000000000000\r\n\tuint256 constant TRANSFER_SHIFT = 192; // 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000\r\n\tuint256 constant TAG_SHIFT      = 224; // 0x0000FFFF00000000000000000000000000000000000000000000000000000000\r\n\tuint256 constant MOO_SHIFT      = 240; // 0xFFFF000000000000000000000000000000000000000000000000000000000000\r\n\tuint256 constant LOCK_BIT       = 1 << 255;\r\n\tuint256 constant TAG_CLEAR      = ~(uint256(type(uint16).max) << TAG_SHIFT); \r\n\r\n\tstruct Unlock {\r\n\t\tbytes32 hash;  // hash of your password\r\n\t\tuint256 price; // recovery price you set\r\n\t}\r\n\r\n\tstring public _provenance;\r\n\tstring public _tokenURIPrefix = \"https://api.gmcafe.io/metadata/gmoo/\";\r\n\tstring public _tokenURISuffix = \".json\";\r\n\tuint256 public _claimableTime;\r\n\r\n\tuint256 _migrated;\r\n\tmapping (address => uint256) _balances; // owner -> owned\r\n\tmapping (uint256 => uint256) _moos;     //   moo -> packed data\r\n\tmapping (uint256 => Unlock)  _unlocks;  //   moo -> Unlock\r\n\r\n\tmapping (uint256 => address) _tokenApprovals;\r\n\tmapping (address => mapping(address => bool)) _operatorApprovals;\r\n\r\n\tfunction _requireValidMoo(uint256 moo) private pure {\r\n\t\tif (moo == 0 || moo > HERD_SIZE) revert InvalidMoo(moo);\r\n\t}\r\n\r\n\tfunction _requireApproval(address owner, uint256 moo) private view {\r\n\t\tif (owner != msg.sender && !isApprovedForAll(owner, msg.sender) && getApproved(moo) != msg.sender) {\r\n\t\t\trevert NotMooOperator(moo);\r\n\t\t}\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\t_claimableTime = block.timestamp + CLAIM_DELAY;\r\n\t}\r\n\r\n\tfunction name() public pure returns (string memory) {\r\n\t\treturn \"Good Morning Cafe\";\r\n\t}\r\n\tfunction symbol() public pure returns (string memory) {\r\n\t\treturn \"GMOO\";\r\n\t}\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn _migrated;\r\n\t}\r\n\r\n\t// admin\r\n\tfunction withdraw() onlyOwner public {\r\n\t\tif (address(this).balance == 0) revert InvalidReceiver();\r\n\t\tpayable(msg.sender).transfer(address(this).balance);\r\n\t}\r\n\r\n\t// metadata\r\n\tfunction setProvenance(string calldata s) onlyOwner public {\r\n\t\t_provenance = s;\r\n\t}\r\n\tfunction setTokenURIPrefix(string calldata s) onlyOwner public {\r\n\t\t_tokenURIPrefix = s;\r\n\t}\r\n\tfunction setTokenURISuffix(string calldata s) onlyOwner public {\r\n\t\t_tokenURISuffix = s;\r\n\t}\r\n\tfunction tokenURI(uint256 moo) public view returns (string memory uri) {\r\n\t\t_requireValidMoo(moo);\r\n\t\tbytes memory prefix = bytes(_tokenURIPrefix);\r\n\t\tbytes memory suffix = bytes(_tokenURISuffix);\r\n\t\tunchecked {\r\n\t\t\turi = new string(prefix.length + suffix.length + 68); // 3 + 1 + 32 + 32\r\n\t\t}\r\n\t\tuint256 ptr;\r\n\t\tassembly {\r\n\t\t\tptr := uri\r\n\t\t}\r\n\t\tptr = _appendBytes(ptr, prefix);\r\n\t\tptr = _appendInt(ptr, moo, 3, 10); // +3\r\n\t\tptr = _appendBytes(ptr, suffix);\r\n\t\tuint256 data = _moos[moo];\r\n\t\tif (data != 0) {\r\n\t\t\tptr = _appendBytes(ptr, \"?\"); // +1\r\n\t\t\tptr = _appendInt(ptr, data >> 128, 32, 16); // +32\r\n\t\t\tptr = _appendInt(ptr, data,        32, 16); // +32\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tmstore(uri, sub(ptr, uri)) // truncate\r\n\t\t}\r\n\t}\r\n\tfunction _appendBytes(uint256 ptr, bytes memory data) private pure returns (uint256 dst) {\r\n\t\tuint256 src;\r\n\t\tassembly {\r\n\t\t\tsrc := data\r\n\t\t\tdst := add(ptr, mload(data)) // truncate\r\n\t\t}\r\n\t\twhile (ptr < dst) {\r\n\t\t\tassembly {\r\n\t\t\t\tptr := add(ptr, 32)\r\n\t\t\t\tsrc := add(src, 32)\r\n\t\t\t\tmstore(ptr, mload(src))\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction _appendInt(uint256 ptr, uint256 value, uint256 len, uint256 base) private pure returns (uint256 dst) {\r\n\t\tuint256 bits =  len << 3;\r\n\t\tuint256 buf;\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i; i < bits; i += 8) {\r\n\t\t\t\tuint256 x = value % base;\r\n\t\t\t\tbuf |= (x < 10 ? 48 + x : 87 + x) << i; // \"0\" => 48, (\"a\" - 10) => 87\r\n\t\t\t\tvalue /= base;\r\n\t\t\t}\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tdst := add(ptr, len)\r\n\t\t\tmstore(dst, or(shl(bits, mload(ptr)), buf)) \r\n\t\t}\r\n\t}\r\n\r\n\t// getters\r\n\tfunction getHerd() public view returns (bytes32[] memory ret) {\r\n\t\tret = new bytes32[](HERD_SIZE);\r\n\t\tuint256 ptr;\r\n\t\tassembly {\r\n\t\t\tptr := ret\r\n\t\t}\r\n\t\tuint256 moo;\r\n\t\twhile (moo < HERD_SIZE) {\r\n\t\t\tunchecked { \r\n\t\t\t\tuint256 data = _moos[++moo];\r\n\t\t\t\tif (data == 0) continue;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tptr := add(ptr, 32)\r\n\t\t\t\t\tmstore(ptr, data)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tmstore(ret, shr(5, sub(ptr, ret))) // truncate\r\n\t\t}\r\n\t}\r\n\tfunction getMoo(uint256 moo) public view returns (\r\n\t\t\taddress owner, uint32 transfers, uint32 block0, uint32 blocksHeld, \r\n\t\t\tuint16 tag, bool isLocked, uint256 unlockPrice\r\n\t) {\r\n\t\tuint256 data = _moos[moo];\r\n\t\towner = address(uint160(data));\r\n\t\tif (owner != address(0)) {\r\n\t\t\ttransfers = uint32(data >> TRANSFER_SHIFT);\r\n\t\t\tblock0 = uint32(data >> BLOCK_SHIFT);\r\n\t\t\tunchecked {\r\n\t\t\t\tblocksHeld = uint32(block.number - block0);\r\n\t\t\t}\r\n\t\t\ttag = uint16(data >> TAG_SHIFT);\r\n\t\t\tisLocked = _isLocked(data);\r\n\t\t\tif (isLocked) {\r\n\t\t\t\tunlockPrice = _unlocks[moo].price;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction getWallet(address owner) public view returns (uint256[] memory moos) {\r\n\t\tuint256 n = _balances[owner];\r\n\t\tif (n != 0) {\r\n\t\t\tmoos = new uint256[](n);\r\n\t\t\tuint256 moo = HERD_SIZE; // go backwards so output sorted\r\n\t\t\twhile (true) {\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\tif (address(uint160(_moos[moo])) == owner) {\r\n\t\t\t\t\t\tmoos[--n] = moo;\r\n\t\t\t\t\t\tif (n == 0) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmoo--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction balanceOf(address owner) public view returns (uint256) {\r\n\t\tif (owner == address(0)) revert InvalidInput(); // ERC721\r\n\t\treturn _balances[owner];\r\n\t}\r\n\tfunction ownerOf(uint256 moo) public view returns (address) {\r\n\t\treturn address(uint160(_moos[moo]));\r\n\t}\r\n\r\n\t// locking\r\n\tfunction isMooLocked(uint256 moo) public view returns (bool) {\r\n\t\treturn _isLocked(_moos[moo]);\r\n\t}\r\n\tfunction _isLocked(uint256 data) private pure returns (bool) {\r\n\t\treturn (data & LOCK_BIT) != 0;\r\n\t}\r\n\tfunction makePasswordHash(uint256 moo, string memory password) pure public returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(moo, password));\r\n\t}\r\n\tfunction lockMoo(uint256 moo, uint256 price, bytes32 hash) public {\r\n\t\tuint256 data = _moos[moo];\r\n\t\tif (_isLocked(data)) revert InvalidLockState(); // already locked\r\n\t\t_requireApproval(address(uint160(data)), moo);\r\n\t\tif (price != 0) { // password only applies when non-zero\r\n\t\t\t_unlocks[moo] = Unlock({hash: hash, price: price});\r\n\t\t}\r\n\t\t_moos[moo] = data | LOCK_BIT;\r\n\t\temit MooLocked(moo);\r\n\t}\r\n\tfunction unlockMoo(uint256 moo, string memory password, address transfer) payable public {\r\n\t\tuint256 data = _moos[moo];\r\n\t\tif (!_isLocked(data)) revert InvalidLockState(); // not locked\r\n\t\taddress owner = address(uint160(data));\r\n\t\t_requireApproval(owner, moo); \r\n\t\tUnlock storage unlock = _unlocks[moo];\r\n\t\tif (unlock.price != 0) { // must satisfy one of the following:\r\n\t\t\tif (msg.value == 0) { // check password\r\n\t\t\t\tif (unlock.hash != makePasswordHash(moo, password)) { // wrong password\r\n\t\t\t\t\temit MooUnlockAttempt(moo);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else if (msg.value < unlock.price) { // check price\r\n\t\t\t\trevert InvalidLockState(); // not enough\r\n\t\t\t}\r\n\t\t\tdelete unlock.price; // zero storage\r\n\t\t\tdelete unlock.hash;\r\n\t\t}\r\n\t\t_moos[moo] = data ^ LOCK_BIT; // clear lock\r\n\t\temit MooUnlocked(moo);\r\n\t\tif (transfer != address(0)) {\r\n\t\t\tsafeTransferFrom(owner, transfer, moo, ''); // could be a contract\r\n\t\t}\r\n\t}\r\n\tfunction rescueMoo(uint256 moo) onlyOwner public {\r\n\t\t// if the moo was locked and the owner gave this contract approval,\r\n\t\t// admin can break the lock and obtain the moo\r\n\t\tuint256 data = _moos[moo];\r\n\t\tif (!_isLocked(data)) revert InvalidLockState(); // not locked\r\n\t\taddress owner = address(uint160(data));\r\n\t\tif (!isApprovedForAll(owner, address(this)) && getApproved(moo) != address(this)) revert NotMooOperator(moo);\r\n\t\tdelete _unlocks[moo]; // zero storage\r\n\t\t_moos[moo] = data ^ LOCK_BIT; // clear lock\r\n\t\temit MooUnlocked(moo);\r\n\t\tif (owner != msg.sender) { \r\n\t\t\t_approvedTransfer(owner, msg.sender, moo); \r\n\t\t}\r\n\t}\r\n\t\r\n\t// tagging\r\n\tfunction setTag(uint256 moo, uint16 tag) public {\r\n\t\tuint256 data = _moos[moo];\r\n\t\t_requireApproval(address(uint160(data)), moo);\r\n\t\t_moos[moo] = (data & TAG_CLEAR) | (uint256(tag) << TAG_SHIFT);\r\n\t}\r\n\r\n\t// minting\r\n\tfunction _mint(uint256 moo) private {\r\n\t\t_moos[moo] = (moo << MOO_SHIFT) | (block.number << BLOCK_SHIFT) | uint160(msg.sender);\r\n\t\temit Transfer(address(0), msg.sender, moo); \r\n\t}\r\n\tfunction _addMinted(uint256 n) private {\r\n\t\tuint256 prior = _balances[msg.sender];\r\n\t\tunchecked {\r\n\t\t\t_balances[msg.sender] = prior + n;\r\n\t\t\t_migrated += n;\r\n\t\t}\r\n\t\tif (prior == 0) { // first moo migrated\r\n\t\t\tsetApprovalForAll(OPENSEA_CONDUIT, true);\r\n\t\t}\r\n\t}\r\n\r\n\t// migration\t\r\n\tfunction isMigrationApproved(address sender) public view returns (bool) {\r\n\t\treturn OPENSEA_NFT.isApprovedForAll(sender, address(this));\r\n\t}\r\n\tfunction getMigratableTokens(address sender) public view returns (uint256[] memory tokens, uint256[] memory moos) {\t\t\r\n\t\ttokens = new uint256[](HERD_SIZE);\r\n\t\taddress[] memory owners = new address[](HERD_SIZE);\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i; i < HERD_SIZE; i++) {\r\n\t\t\t\towners[i] = sender;\r\n\t\t\t\ttokens[i] = _tokenFromCollectionIndex(i + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tuint256[] memory balances = OPENSEA_NFT.balanceOfBatch(owners, tokens);\r\n\t\tuint256 n;\r\n\t\tunchecked {\r\n\t\t\tfor (uint256 i; i < HERD_SIZE; i++) {\r\n\t\t\t\tif (balances[i] != 0) {\r\n\t\t\t\t\ttokens[n++] = tokens[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tmstore(tokens, n) // truncate\r\n\t\t}\r\n\t\tmoos = new uint256[](n);\r\n\t\tfor (uint256 i; i < n; i++) {\r\n\t\t\tmoos[i] = mooFromToken(tokens[i]);\r\n\t\t}\r\n\t}\r\n\tfunction migrateMoos(uint256[] calldata tokens) public {\r\n\t\tuint256 n = tokens.length;\r\n\t\tif (n == 0) revert InvalidInput();\r\n\t\tuint256[] memory balances = new uint256[](n);\r\n\t\tunchecked { \r\n\t\t\tfor (uint256 i; i < n; i++) {\r\n\t\t\t\tbalances[i] = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tOPENSEA_NFT.safeBatchTransferFrom(msg.sender, BURN_ADDRESS, tokens, balances, ''); \r\n\t\tunchecked { \r\n\t\t\tfor (uint256 i; i < n; i++) {\r\n\t\t\t\tuint256 moo = mooFromToken(tokens[i]);\r\n\t\t\t\tif (_moos[moo] != 0) revert AlreadyMigrated(moo); \r\n\t\t\t\t_mint(moo); \r\n\t\t\t}\r\n\t\t}\r\n\t\t_addMinted(n);\r\n\t}\r\n\r\n\tfunction secondsUntilClaimable() public view returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\treturn block.timestamp >= _claimableTime ? 0 : _claimableTime - block.timestamp;\r\n\t\t}\r\n\t}\t\r\n\tfunction claimUnmigratedMoos(uint256 limit) onlyOwner public {\t\r\n\t\tif (secondsUntilClaimable() != 0) revert NotAllowed(); // time lock\r\n\t\tunchecked {\r\n\t\t\tuint256 max = HERD_SIZE - _migrated; // claimable\r\n\t\t\tif (max == 0) revert InvalidInput(); // nothing to claim\r\n\t\t\tif (limit == 0) limit = max; // claim all\r\n\t\t\tuint256 moo;\r\n\t\t\tuint256 n;\r\n\t\t\twhile (moo < HERD_SIZE) {\r\n\t\t\t\tmoo++;\r\n\t\t\t\tif (_moos[moo] != 0) continue;\r\n\t\t\t\t_mint(moo);\r\n\t\t\t\tif (++n == limit) break;\r\n\t\t\t}\r\n\t\t\t_addMinted(n);\r\n\t\t}\r\n\t}\r\n\r\n\t// transfer\r\n\tfunction safeTransferFrom(address from, address to, uint256 moo) public {\r\n\t\tsafeTransferFrom(from, to, moo, '');\r\n\t}\r\n\tfunction safeTransferFrom(address from, address to, uint256 moo, bytes memory data) public {\r\n\t\ttransferFrom(from, to, moo);\r\n\t\tif (to.code.length != 0) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(msg.sender, from, moo, data) returns (bytes4 ret) {\r\n\t\t\t\tif (ret != IERC721Receiver.onERC721Received.selector) {\r\n\t\t\t\t\trevert InvalidReceiver();\r\n\t\t\t\t}\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) {\r\n\t\t\t\t\trevert InvalidReceiver();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassembly {\r\n\t\t\t\t\t\trevert(add(reason, 32), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction transferFrom(address from, address to, uint256 moo) public {\r\n\t\tif (to == address(0)) revert InvalidReceiver(); // ERC721\r\n\t\t_requireApproval(from, moo);\r\n\t\t_approvedTransfer(from, to, moo);\r\n\t}\r\n\tfunction _approvedTransfer(address from, address to, uint256 moo) private {\r\n\t\tif (to == from) revert InvalidReceiver(); // block transfer to self\r\n\t\tuint256 data = _moos[moo];\r\n\t\tif (address(uint160(data)) != from) revert NotAllowed(); // moo is not owned by from\r\n\t\trequire(!_isLocked(data), \"Moo is Locked\"); // use string because user-facing error\r\n\t\tdelete _tokenApprovals[moo]; // clear token approval\r\n\t\tunchecked {\r\n\t\t\tuint256 transfers = uint32((data >> TRANSFER_SHIFT) + 1);\r\n\t\t\t_moos[moo] = (moo << MOO_SHIFT)     // moo number\r\n\t\t\t\t| (block.number << BLOCK_SHIFT) // current block height\r\n\t\t\t\t| (transfers << TRANSFER_SHIFT) // updated transfer count\r\n\t\t\t\t| uint160(to);                  // new owner\r\n\t\t\t_balances[from]--;\r\n\t\t\t_balances[to]++;\r\n\t\t}\r\n\t\temit Transfer(from, to, moo);\r\n\t}\r\n\r\n\t// operator approvals\r\n\tfunction isApprovedForAll(address owner, address operator) public view returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\tfunction setApprovalForAll(address operator, bool approved) public {\r\n\t\tif (operator == msg.sender) revert NotAllowed(); // owner is always approved\r\n\t\t_operatorApprovals[msg.sender][operator] = approved;\r\n\t\temit ApprovalForAll(msg.sender, operator, approved);\r\n\t}\r\n\r\n\t// token approvals\r\n\tfunction getApproved(uint256 moo) public view returns (address) {\r\n\t\t_requireValidMoo(moo); // ERC721\r\n\t\treturn _tokenApprovals[moo];\r\n\t}\r\n\tfunction approve(address to, uint256 moo) public {\r\n\t\taddress owner = address(uint160(_moos[moo]));\r\n\t\tif (owner != msg.sender && !isApprovedForAll(owner, msg.sender)) revert NotMooOperator(moo);\r\n\t\t_tokenApprovals[moo] = to;\r\n\t\temit Approval(owner, to, moo);\r\n\t}\r\n\r\n\t// old token => new token\r\n\tfunction _tokenFromCollectionIndex(uint256 i) private pure returns (uint256) {\r\n\t\t//       |-------------------------------creator||-------index||--------|\r\n\t\treturn 0xB3457C2065FD1F384E9F05495251F2894D1659B6000000000000000000000001 | (i << 40);\r\n\t}\r\n\tfunction mooFromToken(uint256 token) public pure returns (uint256) {\r\n\t\tuint256 index = uint16(token >> 40); // see above\r\n\t\tif (_tokenFromCollectionIndex(index) != token) revert InvalidInput(); // not a moo\r\n\t\tuint256 moo = _mooFromCollectionIndex(index);\r\n\t\t_requireValidMoo(moo); // weird shit bro\r\n\t\treturn moo;\r\n\t}\r\n\tfunction _mooFromCollectionIndex(uint256 i) private pure returns (uint256) {\r\n\t\tunchecked {\r\n\t\t\tif (i <= 180) {\r\n\t\t\t\tif (i <= 99) {\r\n\t\t\t\t\tif (i <= 52) {\r\n\t\t\t\t\t\tif (i <= 29) {\r\n\t\t\t\t\t\t\tif (i <= 21) return i;\r\n\t\t\t\t\t\t\tif (i == 22) return 301;\r\n\t\t\t\t\t\t\treturn i - 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (i == 30) return 302;\r\n\t\t\t\t\t\t\treturn i - 2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (i <= 68) {\r\n\t\t\t\t\t\t\tif (i <= 54) return i + 1;\r\n\t\t\t\t\t\t\tif (i <= 57) return i - 4;\r\n\t\t\t\t\t\t\treturn i - 2;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (i == 69) return 303;\r\n\t\t\t\t\t\t\treturn i - 3;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (i <= 156) {\r\n\t\t\t\t\t\tif (i == 100) return 296;\r\n\t\t\t\t\t\tif (i == 136) return 133;\r\n\t\t\t\t\t\tif (i == 137) return 132;\r\n\t\t\t\t\t\treturn i - 4;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (i == 157) return 162;\r\n\t\t\t\t\t\tif (i == 167) return 248;\r\n\t\t\t\t\t\treturn i - 5;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (i <= 278) {\r\n\t\t\t\t\tif (i <= 253) {\r\n\t\t\t\t\t\tif (i <= 245) {\r\n\t\t\t\t\t\t\tif (i == 181) return 304;\r\n\t\t\t\t\t\t\tif (i == 245) return 305;\r\n\t\t\t\t\t\t\treturn i - 6;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (i == 253) return 306;\r\n\t\t\t\t\t\t\treturn i - 7;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (i <= 255) return i - 8;\r\n\t\t\t\t\t\tif (i <= 274) return i - 7;\r\n\t\t\t\t\t\tif (i == 275) return 307;\r\n\t\t\t\t\t\treturn i - 8;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (i <= 297) {\r\n\t\t\t\t\t\tif (i == 279) return 309;\r\n\t\t\t\t\t\tif (i == 286) return 288;\r\n\t\t\t\t\t\tif (i == 297) return 277;\r\n\t\t\t\t\t\treturn i - 9;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (i <= 304) return i - 9;\r\n\t\t\t\t\t\tif (i <= 308) return i - 8;\r\n\t\t\t\t\t\tif (i == 309) return 308;\r\n\t\t\t\t\t\treturn i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}"
    },
    "@openzeppelin/contracts@4.6.0/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts@4.6.0/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 333
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}