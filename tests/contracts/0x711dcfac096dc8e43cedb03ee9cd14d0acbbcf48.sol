{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/ERC1155Hybrid.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n// import \"hardhat/console.sol\";\n\nstruct Owner {\n    address owner;\n    bool burned;\n    uint256 amount;\n}\n\nabstract contract ERC1155Hybrid is\n    Context,\n    ERC165,\n    IERC1155,\n    IERC1155MetadataURI\n{\n    string internal _name;\n    string internal _symbol;\n    string internal _uri;\n    string internal _contractURI;\n\n    mapping(address => mapping(address => bool)) _operatorApprovals;\n    mapping(uint256 => mapping(address => uint256)) _fungibleBalances;\n    mapping(uint16 => mapping(uint256 => Owner)) _nftOwnership;\n    mapping(uint16 => uint256) _nftMintCounter;\n    mapping(uint16 => mapping(address => uint256)) _nftBalances;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_,\n        string memory uri_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _contractURI = contractURI_;\n        _uri = uri_;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function _setMetadata(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_,\n        string memory uri_\n    ) internal {\n        _name = name_;\n        _symbol = symbol_;\n        _contractURI = contractURI_;\n        _uri = uri_;\n    }\n\n    function ownerOf(uint256 id) public view returns (address) {\n        require(!_isFungible(id), \"Token ID is fungible\");\n\n        (uint16 tier, uint256 unpacked) = _unpackID(id);\n        (, uint256 idx, ) = _findNearestOwnershipRecord(tier, unpacked);\n\n        return _nftOwnership[tier][idx].owner;\n    }\n\n    function balanceOfTier(\n        address account,\n        uint16 tier\n    ) public view returns (uint256) {\n        return _nftBalances[tier][account];\n    }\n\n    function balanceOf(\n        address account,\n        uint256 id\n    ) public view returns (uint256) {\n        if (_isFungible(id)) {\n            return _balanceOfFungible(account, id);\n        }\n\n        if (ownerOf(id) == account) {\n            return 1;\n        }\n\n        return 0;\n    }\n\n    function _balanceOfFungible(\n        address account,\n        uint256 id\n    ) private view returns (uint256) {\n        return _fungibleBalances[id][account];\n    }\n\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] calldata) {\n        require(accounts.length == ids.length, \"Array mismatch\");\n\n        uint256[] memory res = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            res[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return ids;\n    }\n\n    function setApprovalForAll(address operator, bool approved) external {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    function isApprovedForAll(\n        address account,\n        address operator\n    ) external view returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external virtual {\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) internal {\n        if (_isFungible(id)) {\n            return _safeTransferFromFungible(from, to, id, amount, data);\n        }\n\n        return _safeTransferFromNFT(from, to, id, amount, data);\n    }\n\n    function _safeTransferFromFungible(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        require(\n            from == operator || _operatorApprovals[from][operator],\n            \"ERC1155: not approved\"\n        );\n\n        uint256 fromBalance = _fungibleBalances[id][from];\n        require(\n            fromBalance >= amount,\n            \"ERC1155: insufficient balance for transfer\"\n        );\n        unchecked {\n            _fungibleBalances[id][from] = fromBalance - amount;\n        }\n        _fungibleBalances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    function _safeTransferFromNFT(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal {\n        address operator = _msgSender();\n\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n        require(amount == 1, \"ERC1155: transfer of NFT must have amount of 1\");\n\n        (uint16 tier, uint256 unpacked) = _unpackID(id);\n\n        (\n            address origOwner,\n            uint256 origStart,\n            uint256 origAmount\n        ) = _findNearestOwnershipRecord(tier, unpacked);\n\n        require(origOwner == from, \"ERC1155: not the owner of this token\");\n        require(\n            from == operator || _operatorApprovals[from][operator],\n            \"ERC1155: not approved\"\n        );\n\n        uint256 rightAmount = origStart + origAmount - unpacked - 1;\n        uint256 leftAmount = unpacked - origStart;\n\n        // console.log(\"ownership array length\", _nftOwnership[tier].length);\n        // console.log(\"left\", left.start, left.amount);\n        // console.log(\"middle\", middle.start, middle.amount);\n        // console.log(\"right\", right.start, right.amount);\n\n        if (leftAmount > 0) {\n            _nftOwnership[tier][origStart].amount = leftAmount;\n        }\n\n        _nftOwnership[tier][unpacked] = Owner({\n            owner: to,\n            burned: false,\n            amount: 1\n        });\n\n        if (rightAmount > 0) {\n            _nftOwnership[tier][unpacked + 1] = Owner({\n                owner: from,\n                burned: false,\n                amount: rightAmount\n            });\n        }\n\n        _nftBalances[tier][from] -= 1;\n        _nftBalances[tier][to] += 1;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external {\n        require(ids.length == amounts.length, \"Array mismatch\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _safeTransferFrom(from, to, ids[i], amounts[i], data);\n        }\n    }\n\n    function _findNearestOwnershipRecord(\n        uint16 tier,\n        uint256 unpacked\n    ) private view returns (address, uint256, uint256) {\n        // console.log(tier, unpacked);\n\n        if (unpacked > _nftMintCounter[tier]) {\n            revert(\"Token not minted\");\n        }\n\n        for (uint256 i = unpacked; i >= 0; i--) {\n            if (\n                _nftOwnership[tier][i].owner != address(0) ||\n                _nftOwnership[tier][i].burned\n            ) {\n                return (\n                    _nftOwnership[tier][i].owner,\n                    i,\n                    _nftOwnership[tier][i].amount\n                );\n            }\n        }\n\n        revert(\"Ownership could not be determined\");\n    }\n\n    function name() external view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view returns (string memory) {\n        return _symbol;\n    }\n\n    function uri(uint256) external view returns (string memory) {\n        return _uri;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n\n    function _tierOf(uint256 id) internal view virtual returns (uint16);\n\n    function _isFungible(uint256 id) internal view virtual returns (bool);\n\n    function _isFungibleTier(uint16 tier) internal view virtual returns (bool);\n\n    function _supplyLimit(uint256 id) internal view virtual returns (uint256);\n\n    function _tierBounds(\n        uint16 tier\n    ) internal view virtual returns (uint256, uint256);\n\n    function _getNextID(uint16 tier) internal view virtual returns (uint256);\n\n    function _incrementNextID(\n        uint16 tier,\n        uint256 amount\n    ) internal virtual returns (uint256);\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mintFungible(address to, uint256 id, uint256 amount) internal {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _fungibleBalances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(\n            operator,\n            address(0),\n            to,\n            id,\n            amount,\n            \"0x\"\n        );\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burnFungible(address from, uint256 id, uint256 amount) internal {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        uint256 fromBalance = _fungibleBalances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _fungibleBalances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    function _mintNFT(address to, uint16 tier, uint256 amount) internal {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        uint256 start = _incrementNextID(tier, amount);\n        address from = address(0);\n\n        _nftOwnership[tier][start] = Owner({\n            owner: to,\n            burned: false,\n            amount: amount\n        });\n        _nftBalances[tier][to] += amount;\n        _nftMintCounter[tier] = start + amount - 1;\n\n        emit TransferBatch(\n            _msgSender(),\n            from,\n            to,\n            _rangeWithTier(start, amount, tier),\n            _repeat(1, amount)\n        );\n    }\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (_isContract(to)) {\n            try\n                IERC1155Receiver(to).onERC1155Received(\n                    operator,\n                    from,\n                    id,\n                    amount,\n                    data\n                )\n            returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (_isContract(to)) {\n            try\n                IERC1155Receiver(to).onERC1155BatchReceived(\n                    operator,\n                    from,\n                    ids,\n                    amounts,\n                    data\n                )\n            returns (bytes4 response) {\n                if (\n                    response != IERC1155Receiver.onERC1155BatchReceived.selector\n                ) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _repeat(\n        uint256 value,\n        uint256 length\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            array[i] = value;\n        }\n\n        return array;\n    }\n\n    function _range(\n        uint256 start,\n        uint256 length\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            array[i] = start + i;\n        }\n\n        return array;\n    }\n\n    function _rangeWithTier(\n        uint256 start,\n        uint256 length,\n        uint16 tier\n    ) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            array[i] = _packID(tier, start + i);\n        }\n\n        return array;\n    }\n\n    function _isContract(address account) private view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    function _unpackID(uint256 id) internal pure returns (uint16, uint256) {\n        uint16 tier = uint16(id & (2 ** 16 - 1));\n        return (tier, id >> 16);\n    }\n\n    function _packID(uint16 tier, uint256 id) internal pure returns (uint256) {\n        require(id < 2 ** 240, \"ID too big\");\n        return (id << 16) + tier;\n    }\n}\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"./ERC1155Hybrid.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// import \"hardhat/console.sol\";\n\nstruct TokenConfig {\n    bool added;\n    bool canMint;\n    bool canBurn;\n    uint256 supplyLimit;\n}\n\ncontract Token is ERC1155Hybrid, Pausable, Ownable {\n    uint8 public constant ROLE_MINT_FT = 1 << 0;\n    uint8 public constant ROLE_MINT_NFT = 1 << 1;\n    uint8 public constant ROLE_BATCH_MINT_NFT = 1 << 2;\n    uint8 public constant ROLE_BURN_FT = 1 << 3;\n\n    uint256 public constant FUNGIBLE_TOKEN_UPPER_BOUND = 2 ** 16;\n\n    uint256 _tokenUpperBound = 0;\n    mapping(uint16 => uint256) _tierStarts;\n    uint256[] _tiers;\n    mapping(uint16 => uint256) private _nextID;\n\n    mapping(address => uint8) _roles;\n\n    error NotAuthorized(uint8 req, address sender);\n\n    event TierAdded(string name, uint16 id, uint256 size);\n\n    mapping(uint256 => uint256) private _minted;\n    mapping(uint256 => TokenConfig) private _added;\n\n    modifier requireRole(uint8 req) {\n        if (!hasRole(_msgSender(), req)) {\n            revert NotAuthorized(req, _msgSender());\n        }\n        _;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_,\n        string memory uri_\n    ) ERC1155Hybrid(name_, symbol_, contractURI_, uri_) {\n        // Add fungible tier on deployment.\n        addTier(\"Fungible Tokens\", FUNGIBLE_TOKEN_UPPER_BOUND);\n    }\n\n    function setMetadata(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_,\n        string memory uri_\n    ) public onlyOwner {\n        _setMetadata(name_, symbol_, contractURI_, uri_);\n    }\n\n    function setPaused(bool b) public onlyOwner {\n        if (b) {\n            require(b && !paused(), \"Contract is already paused\");\n            _pause();\n            return;\n        }\n\n        require(!b && paused(), \"Contract is not paused\");\n        _unpause();\n    }\n\n    function setRole(address operator, uint8 mask) public onlyOwner {\n        _roles[operator] = mask;\n    }\n\n    function hasRole(address operator, uint8 role) public view returns (bool) {\n        return _roles[operator] & role == role;\n    }\n\n    function addTier(\n        string memory name,\n        uint256 size\n    ) public onlyOwner returns (uint16) {\n        uint newTier = _tiers.length;\n\n        require(newTier < 2 ** 16, \"Tier is too high.\");\n        require(\n            _tokenUpperBound + size < 2 ** 240,\n            \"Token upper bound is too high.\"\n        );\n\n        _tiers.push(size);\n        _tierStarts[uint16(newTier)] = _tokenUpperBound;\n        _tokenUpperBound += size;\n\n        emit TierAdded(name, uint16(newTier), size);\n\n        return uint16(newTier);\n    }\n\n    function _tierOf(uint256 id) internal pure override returns (uint16) {\n        (uint16 tier, ) = _unpackID(id);\n        return tier;\n    }\n\n    function _tierBounds(\n        uint16 tier\n    ) internal view override returns (uint256, uint256) {\n        require(tier < _tiers.length, \"Tier not configured.\");\n        return (_tierStarts[tier], _tierStarts[tier] + _tiers[tier]);\n    }\n\n    function _getNextID(uint16 tier) internal view override returns (uint256) {\n        require(tier < _tiers.length, \"Tier not configured.\");\n        return _nextID[tier];\n    }\n\n    function _incrementNextID(\n        uint16 tier,\n        uint256 amount\n    ) internal override returns (uint256) {\n        (, uint256 end) = _tierBounds(tier);\n\n        require(\n            _nextID[tier] + amount < end,\n            \"Requested IDs exceed bounds of tier\"\n        );\n\n        uint256 start = _nextID[tier];\n        _nextID[tier] += amount;\n        return start;\n    }\n\n    function _isFungible(uint256 id) internal pure override returns (bool) {\n        return _isFungibleTier(_tierOf(id));\n    }\n\n    function _isFungibleTier(\n        uint16 tier\n    ) internal pure override returns (bool) {\n        return tier == 0;\n    }\n\n    function _supplyLimit(uint256 id) internal view override returns (uint256) {\n        if (!_isFungible(id)) {\n            return 1;\n        }\n\n        return _added[id].supplyLimit;\n    }\n\n    function totalMinted(uint256 id) public view returns (uint256) {\n        if (!_isFungible(id)) {\n            if (ownerOf(id) != address(0)) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n\n        return _minted[id];\n    }\n\n    function supplyLimit(uint256 id) public view returns (uint256) {\n        return _supplyLimit(id);\n    }\n\n    function addFT(\n        uint256 supplyLimit_,\n        bool canMint_,\n        bool canBurn_\n    ) public onlyOwner returns (uint256) {\n        uint256 packed = _packID(0, _incrementNextID(0, 1));\n        _added[packed] = TokenConfig(true, canMint_, canBurn_, supplyLimit_);\n        return packed;\n    }\n\n    function modifyFT(\n        uint256 id,\n        uint256 supplyLimit_,\n        bool canMint_,\n        bool canBurn_\n    ) public onlyOwner {\n        _added[id] = TokenConfig(true, canMint_, canBurn_, supplyLimit_);\n    }\n\n    function mintFT(\n        address to,\n        uint256 tokenID,\n        uint256 quantity\n    ) public requireRole(ROLE_MINT_FT) {\n        require(_isFungible(tokenID), \"Token is not fungible.\");\n        require(_added[tokenID].added, \"Token type not added.\");\n        require(_added[tokenID].canMint, \"Token cannot be minted.\");\n        require(\n            supplyLimit(tokenID) == 0 ||\n                (totalMinted(tokenID) + quantity <= supplyLimit(tokenID)),\n            \"Mint would exceed supply limit.\"\n        );\n\n        _minted[tokenID] += quantity;\n        _mintFungible(to, tokenID, quantity);\n    }\n\n    function adminMintFT(\n        address to,\n        uint256 tokenID,\n        uint256 quantity\n    ) public onlyOwner {\n        require(_isFungible(tokenID), \"Token is not fungible.\");\n        require(_added[tokenID].added, \"Token type not added.\");\n        require(\n            supplyLimit(tokenID) == 0 ||\n                (totalMinted(tokenID) + quantity <= supplyLimit(tokenID)),\n            \"Mint would exceed supply limit.\"\n        );\n\n        _minted[tokenID] += quantity;\n        _mintFungible(to, tokenID, quantity);\n    }\n\n    function mintNFT(\n        address to,\n        uint16 tier,\n        uint256 quantity\n    ) public requireRole(ROLE_MINT_NFT) {\n        require(!_isFungibleTier(tier), \"Tier is fungible.\");\n        _mintNFT(to, tier, quantity);\n    }\n\n    function adminMintNFT(\n        address to,\n        uint16 tier,\n        uint256 quantity\n    ) public onlyOwner {\n        require(!_isFungibleTier(tier), \"Tier is fungible.\");\n        _mintNFT(to, tier, quantity);\n    }\n\n    function batchMintNFT(\n        address to,\n        uint16[] calldata tiers,\n        uint256[] calldata quantities\n    ) public requireRole(ROLE_BATCH_MINT_NFT) {\n        require(tiers.length == quantities.length, \"Array mismatch\");\n\n        for (uint256 i = 0; i < tiers.length; i++) {\n            mintNFT(to, tiers[i], quantities[i]);\n        }\n    }\n\n    function burnFT(\n        address owner,\n        uint256 tokenID,\n        uint256 quantity\n    ) public requireRole(ROLE_BURN_FT) {\n        require(_isFungible(tokenID), \"Token is not fungible.\");\n        require(_added[tokenID].added, \"Token type not added.\");\n        require(_added[tokenID].canBurn, \"Token cannot be burned.\");\n\n        _burnFungible(owner, tokenID, quantity);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public override(ERC1155Hybrid) {\n        if (paused()) revert(\"Token is paused\");\n\n        return _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    event MetadataUpdate(uint256 _tokenId);\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n    function updateMetadata(uint256 id) public onlyOwner {\n        emit MetadataUpdate(id);\n    }\n\n    function updateAllMetadata() public onlyOwner {\n        emit BatchMetadataUpdate(0, type(uint256).max);\n    }\n\n    function packID(uint16 tier, uint256 id) external pure returns (uint256) {\n        return _packID(tier, id);\n    }\n\n    function unpackID(uint256 id) external pure returns (uint16, uint256) {\n        return _unpackID(id);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}