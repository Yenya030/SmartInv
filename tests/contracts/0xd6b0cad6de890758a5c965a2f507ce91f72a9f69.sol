{{
  "language": "Solidity",
  "sources": {
    "src/Preseller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport { IERC20 } from \"openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { Ownable } from \"openzeppelin/contracts/access/Ownable.sol\";\nimport { MerkleProof } from \"openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport { INexusGaming } from \"./interface/INexusGaming.sol\";\n\n/**\n * <<< nexus-gaming.io >>>\n *\n * @title   Nexus Gaming Preseller\n * @notice  Prepurchase and claim Nexus Gaming NFTs\n * @dev     The preseller must be authorized to mint the NFTs\n * @author  Tuxedo Development\n * @custom:developer BowTiedPickle\n * @custom:developer Lumoswiz\n * @custom:developer BowTiedOriole\n */\ncontract Preseller is Ownable {\n    // ----- Structs -----\n\n    /**\n     * @notice  The mint info for a given mint id\n     * @dev     Price array must be of length 5\n     * @param   startTime       The start time of the presale\n     * @param   endTime         The end time of the presale\n     * @param   claimTime       The time when the presale NFTs can be claimed\n     * @param   merkleRoot      The merkle root of the presale allocations\n     * @param   maxPurchased    The max amount of NFTs that can be purchased during this mint id\n     * @param   totalPurchased  The total amount of NFTs that have been purchased during this mint id\n     * @param   prices          The price of each level in units of USDC\n     */\n    struct MintInfo {\n        uint48 startTime;\n        uint48 endTime;\n        uint48 claimTime;\n        bytes32 merkleRoot;\n        uint256 maxPurchased;\n        uint256 totalPurchased;\n        uint256[] prices;\n    }\n\n    // ----- Storage -----\n\n    /// @notice The Nexus Gaming NFT contract\n    INexusGaming public immutable nft;\n\n    /// @notice The next mint id\n    uint256 public nextMintId;\n\n    /// @notice The mint info for each mint id\n    mapping(uint256 => MintInfo) public mintInfos;\n\n    /// @notice The number of Nexus Gaming NFTs of each tier purchased by each user for each mint id\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) public numberPurchased;\n\n    /// @notice The USDC token contract\n    IERC20 public immutable usdc;\n\n    uint256 internal constant TRANCHE_COUNT = 5;\n\n    // ----- Constructor -----\n\n    /**\n     * @notice  Construct a new Preseller contract\n     * @param   _owner  The owner of the contract\n     * @param   _nft    The Nexus Gaming NFT contract\n     * @param   _usdc   The USDC token contract\n     */\n    constructor(address _owner, address _nft, address _usdc) {\n        if (_owner == address(0) || _nft == address(0) || _usdc == address(0)) revert Preseller__ZeroAddressInvalid();\n\n        _transferOwnership(_owner);\n\n        nft = INexusGaming(_nft);\n        usdc = IERC20(_usdc);\n    }\n\n    // ----- User Actions -----\n\n    /**\n     * @notice  Purchase Nexus Gaming NFTs during the presale\n     * @dev     The amounts and allocations must be in the same order, and of length 5\n     * @param   mintId      The mint id to purchase from\n     * @param   amounts     The number of Nexus Gaming NFTs to purchase at each price level\n     * @param   allocations The maximum number of Nexus Gaming NFTs that can be purchased at each price level\n     * @param   proof       The merkle proof of the user's allocation\n     */\n    function purchasePresale(\n        uint256 mintId,\n        uint256[] calldata amounts,\n        uint256[] calldata allocations,\n        bytes32[] calldata proof\n    ) external {\n        MintInfo storage info = mintInfos[mintId];\n\n        if (block.timestamp < info.startTime || block.timestamp >= info.endTime)\n            revert Preseller__NotTimeForPresalePurchases();\n\n        if (amounts.length != allocations.length) revert Preseller__ArrayLengthMismatch();\n        if (amounts.length != TRANCHE_COUNT) revert Preseller__ArrayLengthInvalid();\n\n        if (!_verifyMerkleProof(allocations, info.merkleRoot, proof)) revert Preseller__ProofInvalid();\n\n        uint256 cost;\n        uint256 amount;\n        uint256[] memory cachedPrices = info.prices;\n        for (uint256 i; i < TRANCHE_COUNT; ) {\n            if (amounts[i] + numberPurchased[mintId][msg.sender][i] > allocations[i])\n                revert Preseller__ExceedsMaxAllocation(); // The correctness of the sum of the allocations is left implicit in the whitelist\n\n            cost += amounts[i] * cachedPrices[i];\n            amount += amounts[i];\n            numberPurchased[mintId][msg.sender][i] += amounts[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (info.totalPurchased + amount > info.maxPurchased) revert Preseller__ExceedsMaxSupply();\n        if (amount == 0) revert Preseller__ZeroAmount();\n\n        info.totalPurchased += amount;\n\n        if (!usdc.transferFrom(msg.sender, address(this), cost)) {\n            revert Preseller__USDCTransferFailed();\n        }\n\n        emit PresalePurchase(msg.sender, amount);\n    }\n\n    /**\n     * @notice  Claim Nexus Gaming NFTs after the presale\n     * @param   user    The user to claim for\n     * @param   mintId  The mint id to claim from\n     */\n    function claimPresale(address user, uint256 mintId) external {\n        _claimPresale(user, mintId);\n    }\n\n    /**\n     * @notice  Claim Nexus Gaming NFTs after the presale for multiple users and/or mint ids\n     * @param   users   The users to claim for\n     * @param   mintIds The mint ids to claim from\n     */\n    function claimPresaleBatch(address[] calldata users, uint256[] calldata mintIds) external {\n        if (users.length != mintIds.length) revert Preseller__ArrayLengthMismatch();\n        for (uint256 i; i < users.length; ) {\n            _claimPresale(users[i], mintIds[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ----- Internal -----\n\n    function _claimPresale(address user, uint256 mintId) internal {\n        uint256 amount;\n        MintInfo memory info = mintInfos[mintId];\n\n        if (block.timestamp < info.claimTime) revert Preseller__NotTimeForClaim();\n\n        for (uint256 i; i < TRANCHE_COUNT; ) {\n            amount += numberPurchased[mintId][user][i];\n            numberPurchased[mintId][user][i] = 0;\n            unchecked {\n                ++i;\n            }\n        }\n        if (amount == 0) revert Preseller__ZeroAmount();\n\n        nft.mint(user, amount);\n    }\n\n    // ----- Admin -----\n\n    /**\n     * @notice Setup a mint phase\n     * @param   _startTime      The start time of the mint phase\n     * @param   _endTime        The end time of the mint phase\n     * @param   _claimTime      The time when the mint phase can be claimed\n     * @param   _merkleRoot     The merkle root of the mint phase\n     * @param   _maxPurchased   The maximum number of Nexus Gaming NFTs that can be purchased at each price level\n     * @param   _prices         The price of each Nexus Gaming NFT at each price level\n     */\n    function setupMintPhase(\n        uint48 _startTime,\n        uint48 _endTime,\n        uint48 _claimTime,\n        bytes32 _merkleRoot,\n        uint256 _maxPurchased,\n        uint256[] calldata _prices\n    ) external onlyOwner returns (uint256) {\n        if (_startTime >= _endTime || _startTime <= block.timestamp || _claimTime <= _endTime)\n            revert Preseller__MintTimesInvalid();\n\n        if (_merkleRoot == bytes32(0)) revert Preseller__ZeroRootInvalid();\n        if (_prices.length != TRANCHE_COUNT) revert Preseller__ArrayLengthInvalid();\n\n        uint256 mintId = nextMintId;\n\n        mintInfos[mintId] = MintInfo({\n            startTime: _startTime,\n            endTime: _endTime,\n            claimTime: _claimTime,\n            merkleRoot: _merkleRoot,\n            maxPurchased: _maxPurchased,\n            totalPurchased: 0,\n            prices: _prices\n        });\n\n        unchecked {\n            ++nextMintId;\n        }\n\n        emit NewMintPhaseCreated(mintId);\n        return mintId;\n    }\n\n    /**\n     * @notice  Update the price of each Nexus Gaming NFT at each price level for a mint id\n     * @param   mintId  The mint id to update\n     * @param   _prices The new price of each Nexus Gaming NFT at each price level\n     */\n    function updatePrices(uint256 mintId, uint256[] calldata _prices) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n        if (_prices.length != TRANCHE_COUNT) revert Preseller__ArrayLengthInvalid();\n\n        mintInfos[mintId].prices = _prices;\n        emit PricesUpdated(mintId);\n    }\n\n    /**\n     * @notice  Update the start time for a mint id\n     * @param   mintId      The mint id to update\n     * @param   _startTime  The new start time in unix epoch seconds\n     */\n    function updateMintStartTime(uint256 mintId, uint48 _startTime) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n        if (_startTime >= mintInfos[mintId].endTime || _startTime <= block.timestamp) {\n            revert Preseller__MintTimesInvalid();\n        }\n\n        emit StartTimeUpdated(mintId, _startTime, mintInfos[mintId].startTime);\n        mintInfos[mintId].startTime = _startTime;\n    }\n\n    /**\n     * @notice  Update the end time for a mint id\n     * @param   mintId      The mint id to update\n     * @param   _endTime    The new end time in unix epoch seconds\n     */\n    function updateMintEndTime(uint256 mintId, uint48 _endTime) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n        if (mintInfos[mintId].startTime >= _endTime || mintInfos[mintId].claimTime <= _endTime) {\n            revert Preseller__MintTimesInvalid();\n        }\n\n        emit EndTimeUpdated(mintId, _endTime, mintInfos[mintId].endTime);\n        mintInfos[mintId].endTime = _endTime;\n    }\n\n    /**\n     * @notice  Update the claim time for a mint id\n     * @param   mintId      The mint id to update\n     * @param   _claimTime  The new claim time in unix epoch seconds\n     */\n    function updateMintClaimTime(uint256 mintId, uint48 _claimTime) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n        if (_claimTime <= mintInfos[mintId].endTime) {\n            revert Preseller__MintTimesInvalid();\n        }\n\n        emit ClaimTimeUpdated(mintId, _claimTime, mintInfos[mintId].claimTime);\n        mintInfos[mintId].claimTime = _claimTime;\n    }\n\n    /**\n     * @notice  Update the merkle root for a mint id\n     * @param   mintId      The mint id to update\n     * @param   _merkleRoot The new merkle root\n     */\n    function updateMintMerkleRoot(uint256 mintId, bytes32 _merkleRoot) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n\n        emit MerkleRootUpdated(mintId, _merkleRoot, mintInfos[mintId].merkleRoot);\n        mintInfos[mintId].merkleRoot = _merkleRoot;\n    }\n\n    /**\n     * @notice  Update the max purchased for a mint id\n     * @param   mintId          The mint id to update\n     * @param   _maxPurchased   The new max purchased amount\n     */\n    function updateMintMaxPurchased(uint256 mintId, uint256 _maxPurchased) external onlyOwner {\n        if (mintId >= nextMintId) revert Preseller__MintIdInvalid();\n        if (_maxPurchased < mintInfos[mintId].totalPurchased) revert Preseller__MaxPurchasedInvalid();\n\n        emit MaxPurchasedUpdated(mintId, _maxPurchased, mintInfos[mintId].maxPurchased);\n        mintInfos[mintId].maxPurchased = _maxPurchased;\n    }\n\n    /**\n     * @notice Withdraw the USDC balance from the contract\n     */\n    function withdraw() external onlyOwner {\n        uint256 balance = usdc.balanceOf(address(this));\n        usdc.transfer(owner(), balance);\n        emit Withdrawal(balance);\n    }\n\n    // ----- Verification -----\n\n    function _verifyMerkleProof(\n        uint256[] calldata _allocations,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _proof\n    ) private view returns (bool) {\n        // Use of abi.encode here instead of abi.encodePacked due to: https://github.com/ethereum/solidity/issues/11593\n        bytes32 leaf = keccak256(abi.encode(msg.sender, _allocations));\n        return MerkleProof.verifyCalldata(_proof, _merkleRoot, leaf);\n    }\n\n    // ----- View -----\n\n    /**\n     * @notice  Get a mint's information by ID\n     */\n    function getMintInfo(uint256 mintId) external view returns (MintInfo memory) {\n        return mintInfos[mintId];\n    }\n\n    /**\n     * @notice  Check if a mint id is active\n     * @param   mintId  The mint id to check\n     * @return  True if the mint id is active, false otherwise\n     */\n    function isMintActive(uint256 mintId) external view returns (bool) {\n        MintInfo storage info = mintInfos[mintId];\n        return (block.timestamp >= info.startTime) && (block.timestamp < info.endTime);\n    }\n\n    /**\n     * @notice  Returns user purchases by tier for given mintId\n     * @dev     Will only be accurate prior to user claiming their NFTs\n     * @param   mintId  Mint id\n     * @param   user    User address\n     * @return  Array of user purchases by tier\n     */\n    function getUserPurchasesPerMintId(uint256 mintId, address user) external view returns (uint256[] memory) {\n        uint256[] memory amounts = new uint256[](5);\n        for (uint256 i; i < TRANCHE_COUNT; ) {\n            amounts[i] = numberPurchased[mintId][user][i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return amounts;\n    }\n\n    // ----- Events -----\n\n    event PricesUpdated(uint256 indexed mintId);\n\n    event StartTimeUpdated(uint256 indexed mintId, uint48 startTime, uint48 oldStartTime);\n\n    event EndTimeUpdated(uint256 indexed mintId, uint48 endTime, uint48 oldEndTime);\n\n    event ClaimTimeUpdated(uint256 indexed mintId, uint48 claimTime, uint48 oldClaimTime);\n\n    event MerkleRootUpdated(uint256 indexed mintId, bytes32 merkleRoot, bytes32 oldMerkleRoot);\n\n    event MaxPurchasedUpdated(uint256 indexed mintId, uint256 supply, uint256 oldSupply);\n\n    event NewMintPhaseCreated(uint256 indexed mintId);\n\n    event Withdrawal(uint256 balance);\n\n    event PresalePurchase(address indexed purchaser, uint256 indexed amount);\n\n    // ----- Errors -----\n\n    error Preseller__ZeroAddressInvalid();\n\n    error Preseller__ZeroRootInvalid();\n\n    error Preseller__ZeroAmount();\n\n    error Preseller__ArrayLengthMismatch();\n\n    error Preseller__ArrayLengthInvalid();\n\n    error Preseller__ProofInvalid();\n\n    error Preseller__MintTimesInvalid();\n\n    error Preseller__MintIdInvalid();\n\n    error Preseller__MaxPurchasedInvalid();\n\n    error Preseller__USDCTransferFailed();\n\n    error Preseller__ExceedsMaxSupply();\n\n    error Preseller__ExceedsMaxAllocation();\n\n    error Preseller__NotTimeForClaim();\n\n    error Preseller__NotTimeForPresalePurchases();\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "src/interface/INexusGaming.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport { IERC721 } from \"openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface INexusGaming is IERC721 {\n    function mint(address to, uint256 amount) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "ERC721A/=lib/ERC721A/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/operator-filter-registry/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "erc721a/=lib/ERC721A/contracts/",
      "forge-std/=lib/forge-std/src/",
      "murky/=lib/murky/src/",
      "openzeppelin-contracts-upgradeable/=lib/operator-filter-registry/lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "openzeppelin/=lib/openzeppelin-contracts/",
      "operator-filter-registry/=lib/operator-filter-registry/src/",
      "solady/=lib/solady/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "libraries": {}
  }
}}