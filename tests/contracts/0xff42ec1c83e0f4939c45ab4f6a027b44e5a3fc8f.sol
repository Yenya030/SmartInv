{{
  "language": "Solidity",
  "sources": {
    "contracts/AirdropMON.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n/*\r\nThis contract is reserved for MON airdrop of GHNY holders. \r\nAirdrop eligible users can either choose vesting or freezing and staking.\r\n\r\nVesting during 1000 days is chosen by default. Thus, users who want Freeze & Stake need to later call addUserToFreezer(). \r\nAny amount already claimed by the user during the Vesting will be deducted from the totalAmount the user is eligible.\r\n\r\nUnvesting of Frozen MON starts in 2000 days and has 180 days of duration. Until that moment, user's MON is staked in the stakingPool. \r\n\r\nThe mapping snapshots stores the user snapshots of F_ASSETS and F_DCHF in the form of key-value pair (address -> struct Snapshot)\r\nThe mapping F_ASSETS stores the asset fees in the form of key-value pair (address -> uint256).\r\nThe mapping entitiesVesting stores the user's vesting data in the form of key-value pair (address -> struct RuleVesting).\r\nThe mapping entitiesFreezing stores the user's vesting data in the form of key-value pair (address -> struct RuleVesting).\r\nThe mapping stakes stores the user's stake in the form of key-value pair (address -> uint256).\r\n\r\nSTART_VESTING_DATE & END_VESTING_DATE are immutable and excluded from RuleVesting struct in order to save gas.\r\nThe same occurs for START_VESTING_FREEZING_DATE & END_VESTING_FREEZING_DATE.\r\nThis means all users have the same vesting conditions.\r\n*/\r\n\r\ninterface IPriceFeed {\r\n    function getDirectPrice(address _asset) external view returns (uint256);\r\n}\r\n\r\ninterface IERC20Metadata {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IMONStaking {\r\n    function stake(uint256 _MONamount) external;\r\n\r\n    function unstake(uint256 _MONamount) external;\r\n\r\n    function getPendingAssetGain(address _asset, address _user) external view returns (uint256);\r\n\r\n    function getPendingDCHFGain(address _user) external view returns (uint256);\r\n}\r\n\r\ncontract AirdropMON is Ownable, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    bool public isInitialized;\r\n\r\n    // --- Data --- //\r\n\r\n    string public constant NAME = \"AirdropContract\";\r\n\r\n    address public immutable ETH_REF_ADDRESS = address(0);\r\n    address public immutable WBTC_ADDRESS = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n\r\n    address public immutable stakingPool = 0x8Bc3702c35D33E5DF7cb0F06cb72a0c34Ae0C56F;\r\n    address public immutable oracle = 0x09AB3C0ce6Cb41C13343879A667a6bDAd65ee9DA;\r\n\r\n    address public treasury;\r\n    address public distributor;\r\n    address public feeContract;\r\n\r\n    bytes32 public immutable merkleRoot = 0x4135b07a64a1556c5d12665b11cf454f3add32c6cce3b74d016691d77a0fa1f2;\r\n\r\n    IERC20 public immutable MON = IERC20(address(0x1EA48B9965bb5086F3b468E50ED93888a661fc17));\r\n    IERC20 public immutable DCHF = IERC20(address(0x045da4bFe02B320f4403674B3b7d121737727A36));\r\n\r\n    uint256 public constant VEST_TIME_VESTING = 1000 days; // 2,74 years of Vesting\r\n    uint128 public constant VEST_TIME_FREEZER = 180 days; // Half a year of Vesting\r\n    uint128 public constant VEST_DELAY_FREEZER = 2000 days; // 5,48 years of Freezing\r\n    uint256 internal constant PRECISION = 1 ether; // 1e18\r\n\r\n    uint256 public protocolFee; // In bps 1% = 100, 10% = 1000, 100% = 10000\r\n\r\n    uint256 public immutable START_VESTING_DATE;\r\n    uint256 public immutable END_VESTING_DATE;\r\n\r\n    uint256 public immutable START_VESTING_FREEZING_DATE;\r\n    uint256 public immutable END_VESTING_FREEZING_DATE;\r\n\r\n    struct RuleVesting {\r\n        uint256 totalMON;\r\n        uint256 claimed;\r\n    }\r\n\r\n    mapping(address => RuleVesting) public entitiesVesting;\r\n    mapping(address => RuleVesting) public entitiesFreezing;\r\n\r\n    mapping(address => uint256) public stakes;\r\n\r\n    uint256 internal totalMONStaked; // Used to get fees per-MON-staked\r\n    uint256 internal totalMONVested;\r\n\r\n    mapping(address => uint256) public F_ASSETS; // Running sum of Asset fees per-MON-staked\r\n    uint256 public F_DCHF; // Running sum of DCHF fees per-MON-staked\r\n\r\n    struct Snapshot {\r\n        mapping(address => uint256) F_ASSET_Snapshot;\r\n        uint256 F_DCHF_Snapshot;\r\n    }\r\n\r\n    // User snapshots of F_ASSETS and F_DCHF, taken at the point at which their latest deposit was made\r\n    mapping(address => Snapshot) public snapshots;\r\n\r\n    address[] public ASSET_TYPES;\r\n    mapping(address => bool) isAssetTracked;\r\n\r\n    error ZeroAddress();\r\n    error ZeroAmount();\r\n    error FailToSendETH();\r\n    error ProtectedToken(address token);\r\n    error AssetExists(address asset);\r\n    error AssetNotExists(address asset);\r\n    error NotStakingPool(address sender);\r\n\r\n    event SentToTreasury(address indexed asset, uint256 amount);\r\n    event AssetSent(address indexed asset, address indexed account, uint256 amount);\r\n    event AssetAdded(address asset);\r\n    event F_AssetUpdated(address indexed asset, uint256 F_ASSET);\r\n    event F_DCHFUpdated(uint256 F_DCHF);\r\n    event StakerSnapshotUpdated(address staker, address asset, uint256 F_Snapshot);\r\n    event StakeChanged(address indexed staker, uint256 newStake);\r\n    event StakingGainsAssetWithdrawn(address indexed staker, address indexed asset, uint256 assetGain);\r\n    event StakingGainsDCHFWithdrawn(address indexed staker, uint256 DCHFGain);\r\n    event Claim(address indexed user, uint256 amount);\r\n    event ClaimAirdrop(address indexed user, uint256 amount);\r\n    event Sweep(address indexed token, uint256 amount);\r\n    event SetFees(uint256 fee, uint256 prevFee);\r\n\r\n    // --- External Functions --- //\r\n\r\n    constructor() {\r\n        START_VESTING_DATE = block.timestamp;\r\n        END_VESTING_DATE = block.timestamp + VEST_TIME_VESTING;\r\n\r\n        START_VESTING_FREEZING_DATE = block.timestamp + VEST_DELAY_FREEZER;\r\n        END_VESTING_FREEZING_DATE = block.timestamp + VEST_DELAY_FREEZER + VEST_TIME_FREEZER;\r\n    }\r\n\r\n    function setAddresses(address _treasury, address _distributor) external onlyOwner {\r\n        require(!isInitialized, \"Already Initialized\");\r\n        if (_treasury == address(0) || _distributor == address(0)) revert ZeroAddress();\r\n\r\n        isInitialized = true;\r\n\r\n        treasury = _treasury;\r\n        distributor = _distributor;\r\n\r\n        isAssetTracked[ETH_REF_ADDRESS] = true;\r\n        ASSET_TYPES.push(ETH_REF_ADDRESS);\r\n\r\n        isAssetTracked[WBTC_ADDRESS] = true;\r\n        ASSET_TYPES.push(WBTC_ADDRESS);\r\n\r\n        // Approve the stakingPool for spending MON\r\n        MON.approve(stakingPool, 0);\r\n        MON.approve(stakingPool, type(uint256).max);\r\n    }\r\n\r\n    function claimAirdrop(uint256 amount, bytes32[] calldata merkleProof) external {\r\n        require(\r\n            entitiesVesting[msg.sender].totalMON == 0 && isFreezerUser(msg.sender) == false,\r\n            \"AirDrop already claimed\"\r\n        );\r\n\r\n        // Verify the merkle proof\r\n        bytes32 node = keccak256(abi.encodePacked(msg.sender, amount));\r\n        require(MerkleProof.verify(merkleProof, merkleRoot, node), \"Invalid proof\");\r\n\r\n        // Add entity vesting for the user\r\n        _addEntityVestingAirdrop(msg.sender, amount);\r\n\r\n        emit ClaimAirdrop(msg.sender, amount);\r\n    }\r\n\r\n    function addEntityVestingBatch(address[] memory _entities, uint256[] memory _totalSupplies)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_entities.length == _totalSupplies.length, \"Array length missmatch\");\r\n\r\n        uint256 _sumTotalSupplies = 0;\r\n\r\n        for (uint256 i = 0; i < _entities.length; i = _uncheckedInc(i)) {\r\n            if (_entities[i] == address(0)) revert ZeroAddress();\r\n\r\n            require(entitiesVesting[_entities[i]].totalMON == 0, \"Existing Vesting Rule\");\r\n\r\n            entitiesVesting[_entities[i]] = RuleVesting({totalMON: _totalSupplies[i], claimed: 0});\r\n\r\n            _sumTotalSupplies += _totalSupplies[i];\r\n        }\r\n\r\n        totalMONVested += _sumTotalSupplies;\r\n\r\n        MON.safeTransferFrom(msg.sender, address(this), _sumTotalSupplies);\r\n    }\r\n\r\n    function addEntityVesting(address _entity, uint256 _totalSupply) external onlyOwner {\r\n        if (_entity == address(0)) revert ZeroAddress();\r\n\r\n        require(entitiesVesting[_entity].totalMON == 0, \"Existing Vesting Rule\");\r\n\r\n        entitiesVesting[_entity] = RuleVesting({totalMON: _totalSupply, claimed: 0});\r\n\r\n        totalMONVested += _totalSupply;\r\n\r\n        MON.safeTransferFrom(msg.sender, address(this), _totalSupply);\r\n    }\r\n\r\n    function _addEntityVestingAirdrop(address _entity, uint256 _totalSupply) internal {\r\n        entitiesVesting[_entity] = RuleVesting({totalMON: _totalSupply, claimed: 0});\r\n\r\n        totalMONVested += _totalSupply;\r\n\r\n        MON.safeTransferFrom(distributor, address(this), _totalSupply);\r\n    }\r\n\r\n    function removeEntityVesting(address _entity)\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n        entityRuleVestingExists(_entity)\r\n    {\r\n        require(isFreezerUser(_entity) == false, \"Only Vesters\");\r\n\r\n        uint256 amountLeft = _removeEntityVesting(_entity);\r\n        MON.safeTransfer(treasury, amountLeft);\r\n    }\r\n\r\n    function _removeEntityVesting(address _entity) internal returns (uint256 amountLeft) {\r\n        // Send claimable MON to the user\r\n        _sendMONVesting(_entity);\r\n\r\n        RuleVesting memory vestingRule = entitiesVesting[_entity];\r\n\r\n        totalMONVested = totalMONVested - (vestingRule.totalMON - vestingRule.claimed);\r\n\r\n        delete entitiesVesting[_entity];\r\n\r\n        amountLeft = vestingRule.totalMON - vestingRule.claimed;\r\n    }\r\n\r\n    function addUserToFreezer() external nonReentrant entityRuleVestingExists(msg.sender) {\r\n        require(block.timestamp < START_VESTING_FREEZING_DATE, \"End of period\");\r\n\r\n        // amountLeft is the amount of MON left to freeze, once deducted the claimed MON\r\n        uint256 amountLeft = _removeEntityVesting(msg.sender);\r\n        if (amountLeft == 0) revert ZeroAmount();\r\n\r\n        // Storage update\r\n        entitiesFreezing[msg.sender] = RuleVesting({totalMON: amountLeft, claimed: 0});\r\n\r\n        // Save initial contract balances\r\n        uint256 initialBalanceDCHF = balanceOfDCHF();\r\n        uint256[] memory initialAssetBalances = _getInitialAssetBal();\r\n\r\n        // With stake we automatically claim the rewards generated\r\n        _stake(amountLeft);\r\n\r\n        // We update the fees per asset as rewards have been collected\r\n        _updateFeesPerAsset(initialAssetBalances);\r\n\r\n        uint256 diffDCHF = balanceOfDCHF() - initialBalanceDCHF;\r\n        if (diffDCHF > 0) {\r\n            _increaseF_DCHF(diffDCHF);\r\n        }\r\n\r\n        stakes[msg.sender] = amountLeft;\r\n        totalMONStaked += amountLeft;\r\n\r\n        // We update the snapshots so user starts earning from this moment\r\n        _updateUserSnapshots(msg.sender);\r\n\r\n        emit StakeChanged(msg.sender, amountLeft);\r\n    }\r\n\r\n    /// @notice For claiming the unvested MON from Vesting\r\n    function claimMONVesting() external entityRuleVestingExists(msg.sender) {\r\n        _sendMONVesting(msg.sender);\r\n    }\r\n\r\n    function _sendMONVesting(address _entity) private {\r\n        uint256 unclaimedAmount = getClaimableMONVesting(_entity);\r\n        if (unclaimedAmount == 0) return;\r\n\r\n        RuleVesting storage entityRule = entitiesVesting[_entity];\r\n        entityRule.claimed += unclaimedAmount;\r\n\r\n        totalMONVested = totalMONVested - unclaimedAmount;\r\n\r\n        MON.safeTransfer(_entity, unclaimedAmount);\r\n        emit Claim(_entity, unclaimedAmount);\r\n    }\r\n\r\n    function claimRewards() external nonReentrant stakeExists(msg.sender) {\r\n        // Save initial contract balances\r\n        uint256 initialBalanceDCHF = balanceOfDCHF();\r\n        uint256[] memory initialAssetBalances = _getInitialAssetBal();\r\n\r\n        // Claim rewards from the MONStaking contract\r\n        _unstake(0);\r\n\r\n        // We update the fees per asset as rewards have been collected\r\n        _updateFeesPerAsset(initialAssetBalances);\r\n        uint256 diffDCHF = balanceOfDCHF() - initialBalanceDCHF;\r\n        if (diffDCHF > 0) {\r\n            _increaseF_DCHF(diffDCHF);\r\n        }\r\n\r\n        // Update user snapshots to current state and send any accumulated asset & DCHF gains\r\n        _processUserGains(msg.sender);\r\n    }\r\n\r\n    /// @notice For claiming existing rewards from the contract based on snapshots\r\n    function claimExistingRewards() external nonReentrant stakeExists(msg.sender) {\r\n        _processUserGains(msg.sender);\r\n    }\r\n\r\n    /// @notice For claiming the unvested MON from Freezing and the staking rewards\r\n    function claimMONAndRewards() external nonReentrant stakeExists(msg.sender) {\r\n        // Save initial contract balances\r\n        uint256 initialBalanceDCHF = balanceOfDCHF();\r\n        uint256[] memory initialAssetBalances = _getInitialAssetBal();\r\n\r\n        // Claim the unvested MON, here we already unstake from stakingPool\r\n        uint256 unclaimedAmount = getClaimableMONFreezing(msg.sender);\r\n        if (unclaimedAmount > 0) {\r\n            _unstake(unclaimedAmount);\r\n        }\r\n\r\n        // Update fees per Asset to reflect the last earnings state\r\n        _updateFeesPerAsset(initialAssetBalances);\r\n        uint256 diffDCHF = balanceOfDCHF() - initialBalanceDCHF;\r\n        if (diffDCHF > 0) {\r\n            _increaseF_DCHF(diffDCHF);\r\n        }\r\n\r\n        // Update user snapshots to current state and send any accumulated asset & DCHF gains\r\n        _processUserGains(msg.sender);\r\n\r\n        // We send the MON to the user after processing gains with the initial stake\r\n        _sendMONFreezing(msg.sender, unclaimedAmount);\r\n    }\r\n\r\n    function _sendMONFreezing(address _entity, uint256 _unclaimedAmount) private {\r\n        RuleVesting storage entityRule = entitiesFreezing[_entity];\r\n        entityRule.claimed += _unclaimedAmount;\r\n\r\n        // Update state variables to reflect the reduction of MON\r\n        totalMONStaked -= _unclaimedAmount;\r\n        stakes[msg.sender] -= _unclaimedAmount;\r\n\r\n        MON.safeTransfer(_entity, _unclaimedAmount);\r\n        emit Claim(_entity, _unclaimedAmount);\r\n    }\r\n\r\n    function addAsset(address _asset) external onlyOwner {\r\n        if (_asset == address(0)) revert ZeroAddress();\r\n        if (isAssetTracked[_asset] == true) revert AssetExists(_asset);\r\n        isAssetTracked[_asset] = true;\r\n        ASSET_TYPES.push(_asset);\r\n        emit AssetAdded(_asset);\r\n    }\r\n\r\n    function changeTreasuryAddress(address _treasury) external onlyOwner {\r\n        if (_treasury == address(0)) revert ZeroAddress();\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function setFeeContract(address _feeContract) external onlyOwner {\r\n        if (_feeContract == address(0)) revert ZeroAddress();\r\n        feeContract = _feeContract;\r\n    }\r\n\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        require(_fee >= 0 && _fee < 10000, \"Invalid fee value\");\r\n        uint256 prevFee = protocolFee;\r\n        protocolFee = _fee;\r\n        emit SetFees(protocolFee, prevFee);\r\n    }\r\n\r\n    /// @notice Sweep tokens that are airdropped or transferred by mistake into the contract\r\n    function sweep(address _token) external onlyOwner {\r\n        if (_notProtectedTokens(_token) == false) revert ProtectedToken(_token);\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransfer(treasury, amount);\r\n        emit Sweep(_token, amount);\r\n    }\r\n\r\n    /// @notice This allows for flexibility and airdrop of ERC20 rewards to the stakers\r\n    function airdropRewards(address _asset, uint256 _amount) external onlyFeeManagers {\r\n        if (_asset == address(DCHF)) {\r\n            DCHF.safeTransferFrom(msg.sender, address(this), _amount);\r\n            _increaseF_DCHF(_amount);\r\n        } else {\r\n            if (isAssetTracked[_asset] == false) revert AssetNotExists(_asset);\r\n            uint256 diffAssetWithPrecision = _decimalsPrecision(_asset, _amount);\r\n            IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\r\n            _increaseF_Asset(_asset, diffAssetWithPrecision);\r\n        }\r\n    }\r\n\r\n    // --- Pending reward functions --- //\r\n\r\n    function getPendingAssetGain(address _asset, address _user) public view returns (uint256 _assetGain) {\r\n        _assetGain = _getPendingAssetGain(_asset, _user);\r\n    }\r\n\r\n    function getPendingDCHFGain(address _user) public view returns (uint256 _DCHFGain) {\r\n        _DCHFGain = _getPendingDCHFGain(_user);\r\n    }\r\n\r\n    function _getPendingAssetGain(address _asset, address _user) internal view returns (uint256 _assetGain) {\r\n        uint256 F_ASSET_Snapshot = snapshots[_user].F_ASSET_Snapshot[_asset];\r\n        _assetGain = (stakes[_user] * (F_ASSETS[_asset] - F_ASSET_Snapshot)) / PRECISION;\r\n    }\r\n\r\n    function _getPendingDCHFGain(address _user) internal view returns (uint256 _DCHFGain) {\r\n        uint256 F_DCHF_Snapshot = snapshots[_user].F_DCHF_Snapshot;\r\n        _DCHFGain = (stakes[_user] * (F_DCHF - F_DCHF_Snapshot)) / PRECISION;\r\n    }\r\n\r\n    // Returns the current claimable gain in DCHF since last user snapshots were taken\r\n    function getUserPendingGainInDCHF(address _user) public view returns (uint256 _totalDCHFGain) {\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            uint256 amountAsset = _getPendingAssetGain(assets[i], _user);\r\n            uint256 priceAsset = getPriceAssetInDCHF(assets[i]);\r\n            uint256 amountAssetInDCHF = (amountAsset * priceAsset) / PRECISION; // Precision 1e18\r\n            _totalDCHFGain += amountAssetInDCHF;\r\n        }\r\n        _totalDCHFGain += _getPendingDCHFGain(_user);\r\n    }\r\n\r\n    function getClaimableMONFreezing(address _entity) public view returns (uint256 claimable) {\r\n        RuleVesting memory entityRule = entitiesFreezing[_entity];\r\n\r\n        if (block.timestamp < START_VESTING_FREEZING_DATE) return 0;\r\n\r\n        if (block.timestamp >= END_VESTING_FREEZING_DATE) {\r\n            claimable = entityRule.totalMON - entityRule.claimed;\r\n        } else {\r\n            claimable =\r\n                ((entityRule.totalMON * (block.timestamp - START_VESTING_FREEZING_DATE)) /\r\n                    (END_VESTING_FREEZING_DATE - START_VESTING_FREEZING_DATE)) -\r\n                entityRule.claimed;\r\n        }\r\n    }\r\n\r\n    function getClaimableMONVesting(address _entity) public view returns (uint256 claimable) {\r\n        RuleVesting memory entityRule = entitiesVesting[_entity];\r\n\r\n        if (block.timestamp < START_VESTING_DATE) return 0;\r\n\r\n        if (block.timestamp >= END_VESTING_DATE) {\r\n            claimable = entityRule.totalMON - entityRule.claimed;\r\n        } else {\r\n            claimable =\r\n                ((entityRule.totalMON * (block.timestamp - START_VESTING_DATE)) /\r\n                    (END_VESTING_DATE - START_VESTING_DATE)) -\r\n                entityRule.claimed;\r\n        }\r\n    }\r\n\r\n    // --- Internal helper functions --- //\r\n\r\n    function _updateUserSnapshots(address _user) internal {\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i = _uncheckedInc(i)) {\r\n            _updateUserAssetSnapshot(_user, assets[i]);\r\n        }\r\n        _updateUserDCHFSnapshot(_user);\r\n    }\r\n\r\n    function _updateUserAssetSnapshot(address _user, address _asset) internal {\r\n        snapshots[_user].F_ASSET_Snapshot[_asset] = F_ASSETS[_asset];\r\n        emit StakerSnapshotUpdated(_user, _asset, F_ASSETS[_asset]);\r\n    }\r\n\r\n    function _updateUserDCHFSnapshot(address _user) internal {\r\n        snapshots[_user].F_DCHF_Snapshot = F_DCHF;\r\n        emit StakerSnapshotUpdated(_user, address(DCHF), F_DCHF);\r\n    }\r\n\r\n    function _updateFeesPerAsset(uint256[] memory _initBalances) internal {\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i = _uncheckedInc(i)) {\r\n            if (assets[i] == ETH_REF_ADDRESS) {\r\n                uint256 balanceETH = address(this).balance;\r\n                uint256 diffETH = balanceETH - _initBalances[i];\r\n                if (diffETH > 0) {\r\n                    _increaseF_Asset(assets[i], diffETH);\r\n                }\r\n            } else {\r\n                uint256 balanceAsset = IERC20(assets[i]).balanceOf(address(this));\r\n                uint256 diffAsset = balanceAsset - _initBalances[i];\r\n                uint256 diffAssetWithPrecision = _decimalsPrecision(assets[i], diffAsset);\r\n                if (diffAsset > 0) {\r\n                    _increaseF_Asset(assets[i], diffAssetWithPrecision);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice F_ASSETS has a precision of 1e18 regardless the decimals of the asset\r\n    function _increaseF_Asset(address _asset, uint256 _assetFee) internal {\r\n        uint256 assetFeePerMONStaked;\r\n        uint256 _totalMONStaked = totalMONStaked;\r\n\r\n        if (_totalMONStaked > 0) {\r\n            assetFeePerMONStaked = (_assetFee * PRECISION) / _totalMONStaked;\r\n        }\r\n\r\n        F_ASSETS[_asset] = F_ASSETS[_asset] + assetFeePerMONStaked;\r\n        emit F_AssetUpdated(_asset, F_ASSETS[_asset]);\r\n    }\r\n\r\n    function _increaseF_DCHF(uint256 _DCHFFee) internal {\r\n        uint256 DCHFFeePerMONStaked;\r\n        uint256 _totalMONStaked = totalMONStaked;\r\n\r\n        if (_totalMONStaked > 0) {\r\n            DCHFFeePerMONStaked = (_DCHFFee * PRECISION) / _totalMONStaked;\r\n        }\r\n\r\n        F_DCHF = F_DCHF + DCHFFeePerMONStaked;\r\n        emit F_DCHFUpdated(F_DCHF);\r\n    }\r\n\r\n    function _getInitialAssetBal() internal view returns (uint256[] memory) {\r\n        address[] memory assets = ASSET_TYPES;\r\n        uint256[] memory balances = new uint256[](assets.length);\r\n\r\n        for (uint256 i = 0; i < assets.length; i = _uncheckedInc(i)) {\r\n            if (assets[i] == ETH_REF_ADDRESS) {\r\n                balances[i] = address(this).balance;\r\n            } else {\r\n                balances[i] = IERC20(assets[i]).balanceOf(address(this));\r\n            }\r\n        }\r\n\r\n        return balances;\r\n    }\r\n\r\n    function _processUserGains(address _user) internal {\r\n        uint256 assetGain;\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i = _uncheckedInc(i)) {\r\n            // Get the user pending asset gain\r\n            assetGain = _getPendingAssetGain(assets[i], _user);\r\n\r\n            // Update user F_ASSET_Snapshot[assets[i]]\r\n            _updateUserAssetSnapshot(_user, assets[i]);\r\n\r\n            // Transfer the asset gain to the user\r\n            _sendAssetGainToUser(_user, assets[i], assetGain);\r\n            emit StakingGainsAssetWithdrawn(_user, assets[i], assetGain);\r\n        }\r\n\r\n        // Get the user pending DCHF gain\r\n        uint256 DCHFGain = _getPendingDCHFGain(_user);\r\n\r\n        // Update user F_DCHF_Snapshot\r\n        _updateUserDCHFSnapshot(_user);\r\n\r\n        if (protocolFee > 0) {\r\n            uint256 protocolGain = (DCHFGain * protocolFee) / 10000;\r\n            DCHFGain -= protocolGain;\r\n            DCHF.safeTransfer(treasury, protocolGain);\r\n        }\r\n\r\n        // Transfer the DCHF gain to the user\r\n        DCHF.safeTransfer(_user, DCHFGain);\r\n        emit StakingGainsDCHFWithdrawn(_user, DCHFGain);\r\n    }\r\n\r\n    function _sendAssetGainToUser(\r\n        address _user,\r\n        address _asset,\r\n        uint256 _assetGain\r\n    ) internal {\r\n        _assetGain = _decimalsCorrection(_asset, _assetGain);\r\n\r\n        // If there are protocolFees we charge a percentage and send it to the treasury\r\n        if (protocolFee > 0) {\r\n            uint256 protocolGain = (_assetGain * protocolFee) / 10000;\r\n            _assetGain -= protocolGain;\r\n            _sendToTreasury(_asset, protocolGain);\r\n        }\r\n\r\n        _sendAsset(_user, _asset, _assetGain);\r\n        emit AssetSent(_asset, _user, _assetGain);\r\n    }\r\n\r\n    /// @notice F_ASSETS has a precision of 1e18 regardless the decimals of the asset\r\n    function _decimalsCorrection(address _token, uint256 _amount) internal view returns (uint256) {\r\n        if (_token == address(0)) return _amount;\r\n        if (_amount == 0) return 0;\r\n\r\n        uint8 decimals = IERC20Metadata(_token).decimals();\r\n        if (decimals < 18) {\r\n            return _amount / (10**(18 - decimals));\r\n        } else {\r\n            return _amount * (10**(decimals - 18));\r\n        }\r\n    }\r\n\r\n    /// @notice F_ASSETS has a precision of 1e18 regardless the decimals of the asset\r\n    function _decimalsPrecision(address _token, uint256 _amount) internal view returns (uint256) {\r\n        if (_token == address(0)) return _amount;\r\n        if (_amount == 0) return 0;\r\n\r\n        uint8 decimals = IERC20Metadata(_token).decimals();\r\n        if (decimals < 18) {\r\n            return _amount * (10**(18 - decimals));\r\n        } else {\r\n            return _amount / (10**(decimals - 18));\r\n        }\r\n    }\r\n\r\n    function _sendToTreasury(address _asset, uint256 _amount) internal {\r\n        _sendAsset(treasury, _asset, _amount);\r\n        emit SentToTreasury(_asset, _amount);\r\n    }\r\n\r\n    function _sendAsset(\r\n        address _to,\r\n        address _asset,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_asset == ETH_REF_ADDRESS) {\r\n            (bool success, ) = _to.call{value: _amount}(\"\");\r\n            if (success == false) revert FailToSendETH();\r\n        } else {\r\n            IERC20(_asset).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function _stake(uint256 _amount) internal {\r\n        IMONStaking(stakingPool).stake(_amount);\r\n    }\r\n\r\n    function _unstake(uint256 _amount) internal {\r\n        IMONStaking(stakingPool).unstake(_amount);\r\n    }\r\n\r\n    /// @notice Unchecked increment of an index for gas optimization purposes\r\n    function _uncheckedInc(uint256 i) internal pure returns (uint256) {\r\n        unchecked {\r\n            return i + 1;\r\n        }\r\n    }\r\n\r\n    function _notProtectedTokens(address _token) internal view returns (bool) {\r\n        if (_token == address(DCHF) || _token == address(MON)) return false;\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            if (assets[i] == _token) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // --- 'Public view' functions --- //\r\n\r\n    function balanceOfDCHF() public view returns (uint256 _balanceDCHF) {\r\n        _balanceDCHF = DCHF.balanceOf(address(this));\r\n    }\r\n\r\n    // Returns the global pending staking rewards that this contract could claim from the stakingPool\r\n    function getGlobalPendingRewardsInDCHF() public view returns (uint256 _rewardsInDCHF) {\r\n        uint256 amountDCHF = IMONStaking(stakingPool).getPendingDCHFGain(address(this));\r\n\r\n        uint256 amountAssetsInDCHF;\r\n        address[] memory assets = ASSET_TYPES;\r\n        for (uint256 i = 0; i < assets.length; i++) {\r\n            uint256 amountAsset = IMONStaking(stakingPool).getPendingAssetGain(assets[i], address(this));\r\n            uint256 priceAsset = getPriceAssetInDCHF(assets[i]);\r\n            uint256 amountAssetInDCHF = (amountAsset * priceAsset) / PRECISION;\r\n            amountAssetsInDCHF += amountAssetInDCHF;\r\n        }\r\n        _rewardsInDCHF = amountDCHF + amountAssetsInDCHF;\r\n    }\r\n\r\n    function getPriceAssetInDCHF(address _asset) public view returns (uint256 _price) {\r\n        _price = IPriceFeed(oracle).getDirectPrice(_asset); // 1e18 precision\r\n    }\r\n\r\n    function getUserSnapshot(address _user, address _asset) public view returns (uint256 _snapshot) {\r\n        if (_asset == address(DCHF)) {\r\n            _snapshot = snapshots[_user].F_DCHF_Snapshot;\r\n        } else {\r\n            _snapshot = snapshots[_user].F_ASSET_Snapshot[_asset];\r\n        }\r\n    }\r\n\r\n    function status() public view returns (uint256 _totalMONVested, uint256 _totalMONStaked) {\r\n        (_totalMONVested, _totalMONStaked) = (totalMONVested, totalMONStaked);\r\n    }\r\n\r\n    function isFreezerUser(address _user) public view returns (bool _freezingUser) {\r\n        if (stakes[_user] > 0) return true;\r\n        return false;\r\n    }\r\n\r\n    // --- 'Require' functions --- //\r\n\r\n    modifier entityRuleVestingExists(address _entity) {\r\n        require(entitiesVesting[_entity].totalMON != 0, \"Missing Vesting Rule\");\r\n        _;\r\n    }\r\n\r\n    modifier stakeExists(address _entity) {\r\n        require(stakes[_entity] > 0, \"Missing Stake\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFeeManagers() {\r\n        require(msg.sender == owner() || msg.sender == feeContract, \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier callerIsStakingPool() {\r\n        if (msg.sender != stakingPool) revert NotStakingPool(msg.sender);\r\n        _;\r\n    }\r\n\r\n    receive() external payable callerIsStakingPool {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}