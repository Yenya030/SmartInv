{{
  "language": "Solidity",
  "sources": {
    "contracts/KumaleonMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"./Kumaleon.sol\";\n\ncontract KumaleonMinter is Ownable, ReentrancyGuard {\n    uint256 private constant OWNER_ALLOTMENT = 450;\n    uint256 private _totalOwnerMinted;\n    bytes32 public merkleRoot;\n    bool public isAllowlistMintActive;\n    bool public isPublicMintActive;\n    mapping(bytes32 => bool) public isMinted;\n    Kumaleon public kumaleon;\n\n    function allowlistMint(\n        uint8[] memory _grades,\n        uint256[] memory _quantities,\n        bytes32[][] calldata proofs\n    ) external nonReentrant {\n        require(isAllowlistMintActive, \"KumaleonMinter: mint is not opened\");\n        require(_grades.length != 0, \"KumaleonMinter: no mint is available\");\n        require(\n            _grades.length == _quantities.length && _quantities.length == proofs.length,\n            \"KumaleonMinter: invalid length\"\n        );\n\n        uint256 quantity;\n        for (uint256 i = 0; i < _grades.length; i++) {\n            bytes32 leaf = keccak256(abi.encode(msg.sender, _grades[i], _quantities[i]));\n            require(\n                MerkleProof.verify(proofs[i], merkleRoot, leaf),\n                \"KumaleonMinter: Invalid proof\"\n            );\n            require(!isMinted[leaf], \"KumaleonMinter: already minted\");\n\n            isMinted[leaf] = true;\n            quantity += _quantities[i];\n        }\n        kumaleon.mint(msg.sender, quantity);\n    }\n\n    function publicMint() external nonReentrant {\n        require(isPublicMintActive, \"KumaleonMinter: mint is not opened\");\n        kumaleon.mint(msg.sender, 1);\n    }\n\n    function ownerMint(address _to, uint256 _quantity) external onlyOwner {\n        require(\n            _totalOwnerMinted + _quantity <= OWNER_ALLOTMENT,\n            \"KumaleonMinter: invalid quantity\"\n        );\n        _totalOwnerMinted += _quantity;\n        kumaleon.mint(_to, _quantity);\n    }\n\n    function setIsAllowlistMintActive(bool _isAllowlistMintActive) external onlyOwner {\n        require(merkleRoot != 0, \"KumaleonMinter: merkleRoot is not set\");\n        isAllowlistMintActive = _isAllowlistMintActive;\n    }\n\n    function setIsPublicMintActive(bool _isPublicMintActive) external onlyOwner {\n        isPublicMintActive = _isPublicMintActive;\n    }\n\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        merkleRoot = _merkleRoot;\n    }\n\n    function setKumaleonAddress(address _kumaleonAddress) external onlyOwner {\n        kumaleon = Kumaleon(_kumaleonAddress);\n    }\n}\n"
    },
    "contracts/Kumaleon.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./IERC998.sol\";\nimport \"./KumaleonGenArt.sol\";\n\n// LICENSE\n// Kumaleon.sol is a modified version of MoonCatAcclimator.sol:\n// https://github.com/cryptocopycats/contracts/blob/master/mooncats-acclimated/MoonCatAcclimator.sol\n//\n// MoonCatAcclimator.sol source code licensed under the GPL-3.0-only license.\n// Additional conditions of GPL-3.0-only can be found here: https://spdx.org/licenses/GPL-3.0-only.html\n//\n// MODIFICATIONS\n// Kumaleon.sol modifies MoonCatAcclimator to use IERC2981 and original mint().\n// And it controls the child tokens so that only authorized tokens are reflected in the NFT visual.\n\ncontract Kumaleon is\n    ERC721,\n    ERC721Holder,\n    Ownable,\n    IERC998ERC721TopDown,\n    IERC998ERC721TopDownEnumerable,\n    IERC2981,\n    ReentrancyGuard\n{\n    // ERC998\n    bytes32 private constant ERC998_MAGIC_VALUE =\n        0x00000000000000000000000000000000000000000000000000000000cd740db5;\n    bytes4 private constant _INTERFACE_ID_ERC998ERC721TopDown = 0xcde244d9;\n    bytes4 private constant _INTERFACE_ID_ERC998ERC721TopDownEnumerable = 0xa344afe4;\n\n    // kumaleon\n    struct AllowlistEntry {\n        uint256 minTokenId;\n        uint256 maxTokenId;\n        address beneficiary;\n    }\n\n    uint256 public constant MAX_SUPPLY = 3_000;\n    uint256 public totalSupply;\n    uint256 public royaltyPercentage = 10;\n    uint256 public parentLockAge = 25;\n    uint256 private constant FEE_DENOMINATOR = 100;\n    address public minter;\n    address public moltingHelper;\n    address public genArt;\n    address private defaultBeneficiary;\n    address public constant OKAZZ = 0x783dFB5811B0540875f451c48C13aF6Dd8D42DF5;\n    string private baseURI;\n    mapping(uint256 => bytes32) public tokenIdToHash;\n    mapping(uint256 => bool) public isMolted;\n    mapping(uint256 => uint256) public lastTransferChildBlockNumbers;\n    mapping(address => AllowlistEntry[]) public childTokenAllowlist;\n    bool public isMetadataFrozen;\n    bool public isGenArtFrozen;\n    bool public isRevealStarted;\n    bool public isChildTokenAcceptable;\n\n    event KumaleonTransfer(uint256 tokenId, address childToken, uint256 childTokenId);\n    event StartReveal();\n    event BaseURIUpdated(string baseURI);\n    event SetChildTokenAllowlist(address _address, uint256 minTokenId, uint256 maxTokenId);\n    event DeleteChildTokenAllowlist(address _address, uint256 _index);\n    event SetGenArt(address _address);\n\n    constructor(address _defaultBeneficiary) ERC721(\"KUMALEON\", \"KUMA\") {\n        setDefaultBeneficiary(_defaultBeneficiary);\n    }\n\n    function mint(address _to, uint256 _quantity) external nonReentrant {\n        require(totalSupply + _quantity <= MAX_SUPPLY, \"Kumaleon: invalid quantity\");\n        require(msg.sender == minter, \"Kumaleon: call from only minter\");\n\n        for (uint256 i = 0; i < _quantity; i++) {\n            uint256 tokenId = totalSupply;\n            totalSupply++;\n            tokenIdToHash[tokenId] = keccak256(\n                abi.encodePacked(tokenId, block.number, blockhash(block.number - 1), _to)\n            );\n            _safeMint(OKAZZ, tokenId);\n            _safeTransfer(OKAZZ, _to, tokenId, \"\");\n        }\n    }\n\n    function molt(\n        address _to,\n        uint256[] memory _tokenIds,\n        uint256[] memory _childTokenIds\n    ) external nonReentrant {\n        require(msg.sender == moltingHelper, \"Kumaleon: call from only molting helper\");\n        require(_tokenIds.length == _childTokenIds.length, \"Kumaleon: invalid length\");\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenIds[i]))));\n            require(rootOwner == _to, \"Kumaleon: Token not owned\");\n\n            isMolted[_tokenIds[i]] = true;\n            lastTransferChildBlockNumbers[_tokenIds[i]] = block.number;\n            KumaleonGenArt(genArt).mintWithHash(\n                address(this),\n                _to,\n                _childTokenIds[i],\n                tokenIdToHash[_tokenIds[i]]\n            );\n            IERC721(genArt).safeTransferFrom(address(this), _to, _childTokenIds[i]);\n            emit TransferChild(_tokenIds[i], _to, genArt, _childTokenIds[i]);\n        }\n    }\n\n    function setBaseURI(string memory _newBaseURI) external onlyOwner {\n        require(!isMetadataFrozen, \"Kumaleon: Already frozen\");\n        baseURI = _newBaseURI;\n        emit BaseURIUpdated(_newBaseURI);\n    }\n\n    function freezeMetadata() external onlyOwner {\n        require(!isMetadataFrozen, \"Kumaleon: Already frozen\");\n        isMetadataFrozen = true;\n    }\n\n    function startReveal() external onlyOwner {\n        require(!isRevealStarted, \"Kumaleon: Already revealed\");\n        isRevealStarted = true;\n        emit StartReveal();\n    }\n\n    function setIsChildTokenAcceptable(bool _bool) external onlyOwner {\n        isChildTokenAcceptable = _bool;\n    }\n\n    function setMinterAddress(address _minterAddress) external onlyOwner {\n        minter = _minterAddress;\n    }\n\n    function setMoltingHelperAddress(address _helperAddress) external onlyOwner {\n        moltingHelper = _helperAddress;\n        isChildTokenAcceptable = true;\n    }\n\n    function setChildTokenAllowlist(\n        address _address,\n        uint256 _minTokenId,\n        uint256 _maxTokenId,\n        address _beneficiary\n    ) external onlyOwner {\n        childTokenAllowlist[_address].push(AllowlistEntry(_minTokenId, _maxTokenId, _beneficiary));\n        emit SetChildTokenAllowlist(_address, _minTokenId, _maxTokenId);\n    }\n\n    function updateChildTokenAllowlistBeneficiary(\n        address _childContract,\n        uint256 _index,\n        address _beneficiary\n    ) public onlyOwner {\n        childTokenAllowlist[_childContract][_index].beneficiary = _beneficiary;\n    }\n\n    function updateChildTokenAllowlistsBeneficiary(\n        address[] memory _childContracts,\n        uint256[] memory _indices,\n        address[] memory _beneficiaries\n    ) external onlyOwner {\n        require(\n            _childContracts.length == _indices.length && _indices.length == _beneficiaries.length,\n            \"Kumaleon: invalid length\"\n        );\n\n        for (uint256 i = 0; i < _childContracts.length; i++) {\n            updateChildTokenAllowlistBeneficiary(\n                _childContracts[i],\n                _indices[i],\n                _beneficiaries[i]\n            );\n        }\n    }\n\n    // This function could break the original order of array to save gas fees.\n    function deleteChildTokenAllowlist(address _address, uint256 _index) external onlyOwner {\n        require(_index < childTokenAllowlist[_address].length, \"Kumaleon: allowlist not found\");\n\n        childTokenAllowlist[_address][_index] = childTokenAllowlist[_address][\n            childTokenAllowlist[_address].length - 1\n        ];\n        childTokenAllowlist[_address].pop();\n        if (childTokenAllowlist[_address].length == 0) {\n            delete childTokenAllowlist[_address];\n        }\n        emit DeleteChildTokenAllowlist(_address, _index);\n    }\n\n    function childTokenAllowlistByAddress(address _childContract)\n        external\n        view\n        returns (AllowlistEntry[] memory)\n    {\n        return childTokenAllowlist[_childContract];\n    }\n\n    function setGenArt(address _address) external onlyOwner {\n        require(!isGenArtFrozen, \"Kumaleon: Already frozen\");\n        genArt = _address;\n        emit SetGenArt(_address);\n    }\n\n    function freezeGenArt() external onlyOwner {\n        require(!isGenArtFrozen, \"Kumaleon: Already frozen\");\n        isGenArtFrozen = true;\n    }\n\n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _childTokenId,\n        bytes memory _data\n    ) public override(ERC721Holder, IERC998ERC721TopDown) returns (bytes4) {\n        require(\n            _data.length > 0,\n            \"Kumaleon: _data must contain the uint256 tokenId to transfer the child token to.\"\n        );\n        // convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes\n        uint256 tokenId;\n        assembly {\n            tokenId := calldataload(164)\n        }\n        if (_data.length < 32) {\n            tokenId = tokenId >> (256 - _data.length * 8);\n        }\n        require(\n            IERC721(msg.sender).ownerOf(_childTokenId) == address(this),\n            \"Kumaleon: Child token not owned.\"\n        );\n        _receiveChild(_from, tokenId, msg.sender, _childTokenId);\n        return ERC721Holder.onERC721Received(_operator, _from, _childTokenId, _data);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n        require(isParentTransferable(tokenId), \"Kumaleon: transfer is not allowed\");\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal override {\n        address childContract = childContracts[tokenId].length() > 0\n            ? childContractByIndex(tokenId, 0)\n            : address(0);\n        emit KumaleonTransfer(\n            tokenId,\n            childContract,\n            childContract != address(0) ? childTokenByIndex(tokenId, childContract, 0) : 0\n        );\n    }\n\n    ///// ERC998 /////\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev mapping of local token IDs, and which addresses they own children at.\n    /// tokenId => child contract\n    mapping(uint256 => EnumerableSet.AddressSet) private childContracts;\n\n    /// @dev mapping of local token IDs, addresses they own children at, and IDs of the specific child tokens\n    /// tokenId => (child address => array of child tokens)\n    mapping(uint256 => mapping(address => EnumerableSet.UintSet)) private childTokens;\n\n    /// @dev mapping of addresses of child tokens, the specific child token IDs, and which local token owns them\n    /// child address => childId => tokenId\n    mapping(address => mapping(uint256 => uint256)) internal childTokenOwner;\n\n    /**\n     * @dev a token has been transferred to this contract mark which local token is to now own it\n     * Emits a {ReceivedChild} event.\n     *\n     * @param _from the address who sent the token to this contract\n     * @param _tokenId the local token ID that is to be the parent\n     * @param _childContract the address of the child token's contract\n     * @param _childTokenId the ID value of teh incoming child token\n     */\n    function _receiveChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) private {\n        // kumaleon <--\n        require(isChildTokenAcceptable, \"Kumaleon: Child received while paused\");\n        require(isMolted[_tokenId], \"Kumaleon: Child received before molt\");\n        require(\n            _msgSender() == _childContract || _msgSender() == _from,\n            \"Kumaleon: invalid msgSender\"\n        );\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_tokenId))));\n        require(_from == rootOwner, \"Kumaleon: only owner can transfer child tokens\");\n        require(_isTokenAllowed(_childContract, _childTokenId), \"Kumaleon: Token not allowed\");\n\n        if (childContracts[_tokenId].length() != 0) {\n            address oldChildContract = childContractByIndex(_tokenId, 0);\n            uint256 oldChildTokenId = childTokenByIndex(_tokenId, oldChildContract, 0);\n\n            _removeChild(_tokenId, oldChildContract, oldChildTokenId);\n            ERC721(oldChildContract).safeTransferFrom(address(this), rootOwner, oldChildTokenId);\n            emit TransferChild(_tokenId, rootOwner, oldChildContract, oldChildTokenId);\n        }\n        require(\n            childContracts[_tokenId].length() == 0,\n            \"Kumaleon: Cannot receive child token because it has already had\"\n        );\n        // kumaleon -->\n        childContracts[_tokenId].add(_childContract);\n        childTokens[_tokenId][_childContract].add(_childTokenId);\n        childTokenOwner[_childContract][_childTokenId] = _tokenId;\n        emit ReceivedChild(_from, _tokenId, _childContract, _childTokenId);\n    }\n\n    function _isTokenAllowed(address _childContract, uint256 _childTokenId)\n        private\n        view\n        returns (bool)\n    {\n        bool allowed;\n        for (uint256 i = 0; i < childTokenAllowlist[_childContract].length; i++) {\n            if (\n                childTokenAllowlist[_childContract][i].minTokenId <= _childTokenId &&\n                _childTokenId <= childTokenAllowlist[_childContract][i].maxTokenId\n            ) {\n                allowed = true;\n                break;\n            }\n        }\n        return allowed;\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-getChild}.\n     */\n    function getChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) external override {\n        _receiveChild(_from, _tokenId, _childContract, _childTokenId);\n        IERC721(_childContract).transferFrom(_from, address(this), _childTokenId);\n    }\n\n    /**\n     * @dev Given a child address/ID that is owned by some token in this contract, return that owning token's owner\n     * @param _childContract the address of the child asset being queried\n     * @param _childTokenId the specific ID of the child asset being queried\n     * @return parentTokenOwner the address of the owner of that child's parent asset\n     * @return parentTokenId the local token ID that is the parent of that child asset\n     */\n    function _ownerOfChild(address _childContract, uint256 _childTokenId)\n        internal\n        view\n        returns (address parentTokenOwner, uint256 parentTokenId)\n    {\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\n        require(\n            childTokens[parentTokenId][_childContract].contains(_childTokenId),\n            \"Kumaleon: That child is not owned by a token in this contract\"\n        );\n        return (ownerOf(parentTokenId), parentTokenId);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-ownerOfChild}.\n     */\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\n        external\n        view\n        override\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId)\n    {\n        parentTokenId = childTokenOwner[_childContract][_childTokenId];\n        require(\n            childTokens[parentTokenId][_childContract].contains(_childTokenId),\n            \"Kumaleon: That child is not owned by a token in this contract\"\n        );\n        return (\n            (ERC998_MAGIC_VALUE << 224) | bytes32(uint256(uint160(ownerOf(parentTokenId)))),\n            parentTokenId\n        );\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-rootOwnerOf}.\n     */\n    function rootOwnerOf(uint256 _tokenId) public view override returns (bytes32 rootOwner) {\n        return rootOwnerOfChild(address(0), _tokenId);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-rootOwnerOfChild}.\n     */\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\n        public\n        view\n        override\n        returns (bytes32 rootOwner)\n    {\n        address rootOwnerAddress;\n        if (_childContract != address(0)) {\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(_childContract, _childTokenId);\n        } else {\n            rootOwnerAddress = ownerOf(_childTokenId);\n        }\n        // Case 1: Token owner is this contract and token.\n        while (rootOwnerAddress == address(this)) {\n            (rootOwnerAddress, _childTokenId) = _ownerOfChild(rootOwnerAddress, _childTokenId);\n        }\n\n        (bool callSuccess, bytes memory data) = rootOwnerAddress.staticcall(\n            abi.encodeWithSelector(0xed81cdda, address(this), _childTokenId)\n        );\n        if (data.length != 0) {\n            rootOwner = abi.decode(data, (bytes32));\n        }\n\n        if (callSuccess == true && rootOwner >> 224 == ERC998_MAGIC_VALUE) {\n            // Case 2: Token owner is other top-down composable\n            return rootOwner;\n        } else {\n            // Case 3: Token owner is other contract\n            // Or\n            // Case 4: Token owner is user\n            return (ERC998_MAGIC_VALUE << 224) | bytes32(uint256(uint160(rootOwnerAddress)));\n        }\n    }\n\n    /**\n     * @dev remove internal records linking a given child to a given parent\n     * @param _tokenId the local token ID that is the parent of the child asset\n     * @param _childContract the address of the child asset to remove\n     * @param _childTokenId the specific ID representing the child asset to be removed\n     */\n    function _removeChild(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) private {\n        require(\n            childTokens[_tokenId][_childContract].contains(_childTokenId),\n            \"Kumaleon: Child token not owned by token\"\n        );\n\n        // remove child token\n        childTokens[_tokenId][_childContract].remove(_childTokenId);\n        delete childTokenOwner[_childContract][_childTokenId];\n\n        // kumaleon\n        lastTransferChildBlockNumbers[_tokenId] = block.number;\n\n        // remove contract\n        if (childTokens[_tokenId][_childContract].length() == 0) {\n            childContracts[_tokenId].remove(_childContract);\n        }\n    }\n\n    /**\n     * @dev check permissions are correct for a transfer of a child asset\n     * @param _fromTokenId the local ID of the token that is the parent\n     * @param _to the address this child token is being transferred to\n     * @param _childContract the address of the child asset's contract\n     * @param _childTokenId the specific ID for the child asset being transferred\n     */\n    function _checkTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) private view {\n        uint256 tokenId = childTokenOwner[_childContract][_childTokenId];\n        require(\n            childTokens[tokenId][_childContract].contains(_childTokenId),\n            \"Kumaleon: Child asset is not owned by a token in this contract\"\n        );\n        require(tokenId == _fromTokenId, \"Kumaleon: Parent does not own that asset\");\n        address rootOwner = address(uint160(uint256(rootOwnerOf(_fromTokenId))));\n        require(\n            _msgSender() == rootOwner ||\n                getApproved(_fromTokenId) == _msgSender() ||\n                isApprovedForAll(rootOwner, _msgSender()),\n            \"Kumaleon: Not allowed to transfer child assets of parent\"\n        );\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-safeTransferChild}.\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) public override {\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\n        ERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId);\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-safeTransferChild}.\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) public override {\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\n        ERC721(_childContract).safeTransferFrom(address(this), _to, _childTokenId, _data);\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-transferChild}.\n     */\n    function transferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) public override {\n        _checkTransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\n        //this is here to be compatible with cryptokitties and other old contracts that require being owner and approved\n        // before transferring.\n        //does not work with current standard which does not allow approving self, so we must let it fail in that case.\n        //0x095ea7b3 == \"approve(address,uint256)\"\n        (bool success, bytes memory data) = _childContract.call(\n            abi.encodeWithSelector(0x095ea7b3, this, _childTokenId)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"Kumaleon: Failed to Approve\"\n        );\n        ERC721(_childContract).transferFrom(address(this), _to, _childTokenId);\n        emit TransferChild(_fromTokenId, _to, _childContract, _childTokenId);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDown-transferChildToParent}.\n     */\n    function transferChildToParent(\n        uint256 _fromTokenId,\n        address _toContract,\n        uint256 _toTokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) public override {\n        _checkTransferChild(_fromTokenId, _toContract, _childContract, _childTokenId);\n        _removeChild(_fromTokenId, _childContract, _childTokenId);\n        IERC998ERC721BottomUp(_childContract).transferToParent(\n            address(this),\n            _toContract,\n            _toTokenId,\n            _childTokenId,\n            _data\n        );\n        emit TransferChild(_fromTokenId, _toContract, _childContract, _childTokenId);\n    }\n\n    ///// ERC998 Enumerable\n\n    /**\n     * @dev See {IERC998ERC721TopDownEnumerable-totalChildContracts}.\n     */\n    function totalChildContracts(uint256 _tokenId) public view override returns (uint256) {\n        return childContracts[_tokenId].length();\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDownEnumerable-childContractByIndex}.\n     */\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\n        public\n        view\n        override\n        returns (address childContract)\n    {\n        return childContracts[_tokenId].at(_index);\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDownEnumerable-totalChildTokens}.\n     */\n    function totalChildTokens(uint256 _tokenId, address _childContract)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return childTokens[_tokenId][_childContract].length();\n    }\n\n    /**\n     * @dev See {IERC998ERC721TopDownEnumerable-childTokenByIndex}.\n     */\n    function childTokenByIndex(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _index\n    ) public view override returns (uint256 childTokenId) {\n        return childTokens[_tokenId][_childContract].at(_index);\n    }\n\n    // kumaleon ERC998\n\n    function isParentTransferable(uint256 _tokenId) public view returns (bool) {\n        return\n            lastTransferChildBlockNumbers[_tokenId] + parentLockAge < block.number;\n    }\n\n    function updateParentLockAge(uint256 _age) external onlyOwner {\n        parentLockAge = _age;\n    }\n\n    function childTokenDetail(uint256 _tokenId)\n        external\n        view\n        returns (address _childContract, uint256 _childTokenId)\n    {\n        require(super._exists(_tokenId), \"Kumaleon: _tokenId does not exist\");\n\n        _childContract = childContracts[_tokenId].length() > 0\n            ? childContractByIndex(_tokenId, 0)\n            : address(0);\n        _childTokenId = _childContract != address(0)\n            ? childTokenByIndex(_tokenId, _childContract, 0)\n            : 0;\n    }\n\n    // interface\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(IERC165, ERC721)\n        returns (bool)\n    {\n        return\n            interfaceId == _INTERFACE_ID_ERC998ERC721TopDown ||\n            interfaceId == _INTERFACE_ID_ERC998ERC721TopDownEnumerable ||\n            interfaceId == type(IERC721Receiver).interfaceId ||\n            interfaceId == type(IERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    // royalty\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        public\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        bool isTokenHasChild = totalChildContracts(_tokenId) != 0;\n        uint256 defaultRoyaltyAmount = (_salePrice * royaltyPercentage) / FEE_DENOMINATOR;\n        if (!isTokenHasChild) {\n            return (defaultBeneficiary, defaultRoyaltyAmount);\n        }\n\n        address childContract = Kumaleon(address(this)).childContractByIndex(_tokenId, 0);\n        uint256 childTokenId = Kumaleon(address(this)).childTokenByIndex(\n            _tokenId,\n            childContract,\n            0\n        );\n\n        for (uint256 i = 0; i < childTokenAllowlist[childContract].length; i++) {\n            if (\n                childTokenAllowlist[childContract][i].minTokenId <= childTokenId &&\n                childTokenId <= childTokenAllowlist[childContract][i].maxTokenId\n            ) {\n                receiver = childTokenAllowlist[childContract][i].beneficiary;\n                royaltyAmount = (_salePrice * royaltyPercentage) / FEE_DENOMINATOR;\n                return (receiver, royaltyAmount);\n            }\n        }\n\n        return (defaultBeneficiary, defaultRoyaltyAmount);\n    }\n\n    function setDefaultBeneficiary(address _receiver) public onlyOwner {\n        require(_receiver != address(0), \"Kumaleon: invalid receiver\");\n\n        defaultBeneficiary = _receiver;\n    }\n\n    function setRoyaltyPercentage(uint256 _feeNumerator) external onlyOwner {\n        require(_feeNumerator <= FEE_DENOMINATOR, \"Kumaleon: royalty fee will exceed salePrice\");\n\n        royaltyPercentage = _feeNumerator;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/KumaleonGenArt.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity =0.8.9;\n\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./IKumaleonGenArt.sol\";\n\n// LICENSE\n// KumaleonGenArt.sol is a modified version of ArtBlocks' GenArt721CoreV2_PBAB.sol:\n// https://github.com/ArtBlocks/artblocks-contracts/blob/main/contracts/PBAB%2BCollabs/GenArt721CoreV2_PBAB.sol\n//\n// GenArt721CoreV2_PBAB.sol source code licensed under the LGPL-3.0-only license.\n// Additional conditions of LGPL-3.0-only can be found here: https://spdx.org/licenses/LGPL-3.0-only.html\n//\n// MODIFICATIONS\n// KumaleonGenArt.sol modifies GenArt721CoreV2_PBAB to use IERC2981 and original mintWithHash().\n\ncontract KumaleonGenArt is ERC721, IKumaleonGenArt, IERC2981, ReentrancyGuard {\n    struct Project {\n        string name;\n        string artist;\n        string description;\n        string website;\n        string license;\n        string projectBaseURI;\n        uint256 invocations;\n        uint256 maxInvocations;\n        string scriptJSON;\n        mapping(uint256 => string) scripts;\n        uint256 scriptCount;\n        string ipfsHash;\n        bool active;\n        bool locked;\n        bool paused;\n    }\n\n    uint256 constant ONE_MILLION = 1_000_000;\n    mapping(uint256 => Project) projects;\n\n    //All financial functions are stripped from struct for visibility\n    mapping(uint256 => address payable) public override(IKumaleonGenArt) projectIdToArtistAddress;\n    mapping(uint256 => string) public override(IKumaleonGenArt) projectIdToCurrencySymbol;\n    mapping(uint256 => address) public override(IKumaleonGenArt) projectIdToCurrencyAddress;\n    mapping(uint256 => uint256) public override(IKumaleonGenArt) projectIdToPricePerTokenInWei;\n    mapping(uint256 => address payable) public override(IKumaleonGenArt) projectIdToAdditionalPayee;\n    mapping(uint256 => uint256)\n        public\n        override(IKumaleonGenArt) projectIdToAdditionalPayeePercentage;\n    mapping(uint256 => uint256) public projectIdToSecondaryMarketRoyaltyPercentage;\n\n    address payable public override(IKumaleonGenArt) renderProviderAddress;\n    /// Percentage of mint revenue allocated to render provider\n    uint256 public override(IKumaleonGenArt) renderProviderPercentage = 10;\n\n    mapping(uint256 => uint256) public override(IKumaleonGenArt) tokenIdToProjectId;\n    mapping(uint256 => bytes32) public tokenIdToHash;\n    mapping(bytes32 => uint256) public hashToTokenId;\n\n    /// admin for contract\n    address public override(IKumaleonGenArt) admin;\n    /// true if address is whitelisted\n    mapping(address => bool) public override(IKumaleonGenArt) isWhitelisted;\n    /// true if minter is whitelisted\n    mapping(address => bool) public isMintWhitelisted;\n\n    /// next project ID to be created\n    uint256 public override(IKumaleonGenArt) nextProjectId = 0;\n\n    // kumaleon\n    address public kumaleon;\n    bool public isKumaleonFrozen;\n\n    modifier onlyValidTokenId(uint256 _tokenId) {\n        require(_exists(_tokenId), \"Token ID does not exist\");\n        _;\n    }\n\n    modifier onlyUnlocked(uint256 _projectId) {\n        require(!projects[_projectId].locked, \"Only if unlocked\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin\");\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        require(isWhitelisted[msg.sender], \"Only whitelisted\");\n        _;\n    }\n\n    /**\n     * @notice Initializes contract.\n     * @param _tokenName Name of token.\n     * @param _tokenSymbol Token symbol.\n     */\n    constructor(string memory _tokenName, string memory _tokenSymbol)\n        ERC721(_tokenName, _tokenSymbol)\n    {\n        admin = msg.sender;\n        isWhitelisted[msg.sender] = true;\n        renderProviderAddress = payable(msg.sender);\n    }\n\n    /**\n     * @notice Mints a token from project `_projectId` and sets the\n     * token's owner to `_to`.\n     * @param _to Address to be the minted token's owner.\n     * @param _projectId Project ID to mint a token on.\n     * @param _by Purchaser of minted token.\n     * @dev sender must be a whitelisted minter\n     */\n    function mint(\n        address _to,\n        uint256 _projectId,\n        address _by\n    ) external override(IKumaleonGenArt) returns (uint256 _tokenId) {\n        revert(\"disabled\");\n    }\n\n    /**\n     * @notice Mints a token from hash `_hash` and sets the\n     * token's owner to `_to`.\n     * @param _to Address to be the minted token's owner.\n     * @param _by Purchaser of minted token.\n     * @param _tokenId TokenId of minted token.\n     * @param _hash hash of minted token.\n     * @dev sender must be a whitelisted minter\n     */\n    function mintWithHash(\n        address _to,\n        address _by,\n        uint256 _tokenId,\n        bytes32 _hash\n    ) external nonReentrant returns (uint256 _mintedTokenId) {\n        require(kumaleon == msg.sender, \"Must mint from kumaleon contract.\");\n        uint256 _projectId = _tokenId / ONE_MILLION;\n        require(\n            _tokenId % ONE_MILLION < projects[_projectId].maxInvocations,\n            \"Must not exceed max invocations\"\n        );\n        require(\n            projects[_projectId].active || _by == projectIdToArtistAddress[_projectId],\n            \"Project must exist and be active\"\n        );\n        require(\n            !projects[_projectId].paused || _by == projectIdToArtistAddress[_projectId],\n            \"Purchases are paused.\"\n        );\n\n        uint256 mintedTokenId = _mintToken(_to, _projectId, _tokenId, _hash);\n\n        return mintedTokenId;\n    }\n\n    function _mintToken(\n        address _to,\n        uint256 _projectId,\n        uint256 _tokenId,\n        bytes32 _hash\n    ) internal returns (uint256 _mintedTokenId) {\n        projects[_projectId].invocations = projects[_projectId].invocations + 1;\n\n        tokenIdToHash[_tokenId] = _hash;\n        hashToTokenId[_hash] = _tokenId;\n\n        _mint(_to, _tokenId);\n\n        tokenIdToProjectId[_tokenId] = _projectId;\n\n        emit Mint(_to, _tokenId, _projectId);\n\n        return _tokenId;\n    }\n\n    /**\n     * @notice Updates contract admin to `_adminAddress`.\n     */\n    function updateAdmin(address _adminAddress) public onlyAdmin {\n        admin = _adminAddress;\n    }\n\n    /**\n     * @notice Updates render provider address to `_renderProviderAddress`.\n     */\n    function updateRenderProviderAddress(address payable _renderProviderAddress) public onlyAdmin {\n        renderProviderAddress = _renderProviderAddress;\n    }\n\n    /**\n     * @notice Updates render provider mint revenue percentage to\n     * `_renderProviderPercentage`.\n     */\n    function updateRenderProviderPercentage(uint256 _renderProviderPercentage) public onlyAdmin {\n        require(_renderProviderPercentage <= 25, \"Max of 25%\");\n        renderProviderPercentage = _renderProviderPercentage;\n    }\n\n    /**\n     * @notice Whitelists `_address`.\n     */\n    function addWhitelisted(address _address) public onlyAdmin {\n        isWhitelisted[_address] = true;\n    }\n\n    /**\n     * @notice Revokes whitelisting of `_address`.\n     */\n    function removeWhitelisted(address _address) public onlyAdmin {\n        isWhitelisted[_address] = false;\n    }\n\n    /**\n     * @notice Whitelists minter `_address`.\n     */\n    function addMintWhitelisted(address _address) public onlyAdmin {\n        isMintWhitelisted[_address] = true;\n    }\n\n    /**\n     * @notice Revokes whitelisting of minter `_address`.\n     */\n    function removeMintWhitelisted(address _address) public onlyAdmin {\n        isMintWhitelisted[_address] = false;\n    }\n\n    /**\n     * @notice Locks project `_projectId`.\n     */\n    function toggleProjectIsLocked(uint256 _projectId)\n        public\n        onlyWhitelisted\n        onlyUnlocked(_projectId)\n    {\n        projects[_projectId].locked = true;\n    }\n\n    /**\n     * @notice Toggles project `_projectId` as active/inactive.\n     */\n    function toggleProjectIsActive(uint256 _projectId) public onlyWhitelisted {\n        projects[_projectId].active = !projects[_projectId].active;\n    }\n\n    /**\n     * @notice Updates artist of project `_projectId` to `_artistAddress`.\n     */\n    function updateProjectArtistAddress(uint256 _projectId, address payable _artistAddress)\n        public\n        onlyWhitelisted\n    {\n        projectIdToArtistAddress[_projectId] = _artistAddress;\n    }\n\n    /**\n     * @notice Toggles paused state of project `_projectId`.\n     */\n    function toggleProjectIsPaused(uint256 _projectId) public onlyWhitelisted {\n        projects[_projectId].paused = !projects[_projectId].paused;\n    }\n\n    /**\n     * @notice Adds new project `_projectName` by `_artistAddress`.\n     * @param _projectName Project name.\n     * @param _artistAddress Artist's address.\n     * @param _pricePerTokenInWei Price to mint a token, in Wei.\n     */\n    function addProject(\n        string memory _projectName,\n        address payable _artistAddress,\n        uint256 _pricePerTokenInWei\n    ) public onlyWhitelisted {\n        uint256 projectId = nextProjectId;\n        projectIdToArtistAddress[projectId] = _artistAddress;\n        projects[projectId].name = _projectName;\n        projectIdToCurrencySymbol[projectId] = \"ETH\";\n        projectIdToPricePerTokenInWei[projectId] = _pricePerTokenInWei;\n        projects[projectId].paused = true;\n        projects[projectId].maxInvocations = ONE_MILLION;\n        nextProjectId = nextProjectId + 1;\n    }\n\n    /**\n     * @notice Updates payment currency of project `_projectId` to be\n     * `_currencySymbol`.\n     * @param _projectId Project ID to update.\n     * @param _currencySymbol Currency symbol.\n     * @param _currencyAddress Currency address.\n     */\n    function updateProjectCurrencyInfo(\n        uint256 _projectId,\n        string memory _currencySymbol,\n        address _currencyAddress\n    ) public onlyWhitelisted {\n        projectIdToCurrencySymbol[_projectId] = _currencySymbol;\n        projectIdToCurrencyAddress[_projectId] = _currencyAddress;\n    }\n\n    /**\n     * @notice Updates price per token of project `_projectId` to be\n     * '_pricePerTokenInWei`, in Wei.\n     */\n    function updateProjectPricePerTokenInWei(uint256 _projectId, uint256 _pricePerTokenInWei)\n        public\n        onlyWhitelisted\n    {\n        projectIdToPricePerTokenInWei[_projectId] = _pricePerTokenInWei;\n    }\n\n    /**\n     * @notice Updates name of project `_projectId` to be `_projectName`.\n     */\n    function updateProjectName(uint256 _projectId, string memory _projectName)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].name = _projectName;\n    }\n\n    /**\n     * @notice Updates artist name for project `_projectId` to be\n     * `_projectArtistName`.\n     */\n    function updateProjectArtistName(uint256 _projectId, string memory _projectArtistName)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].artist = _projectArtistName;\n    }\n\n    /**\n     * @notice Updates additional payee for project `_projectId` to be\n     * `_additionalPayee`, receiving `_additionalPayeePercentage` percent\n     * of artist mint and royalty revenues.\n     */\n    function updateProjectAdditionalPayeeInfo(\n        uint256 _projectId,\n        address payable _additionalPayee,\n        uint256 _additionalPayeePercentage\n    ) public onlyWhitelisted {\n        require(_additionalPayeePercentage <= 100, \"Max of 100%\");\n        projectIdToAdditionalPayee[_projectId] = _additionalPayee;\n        projectIdToAdditionalPayeePercentage[_projectId] = _additionalPayeePercentage;\n    }\n\n    /**\n     * @notice Updates artist secondary market royalties for project\n     * `_projectId` to be `_secondMarketRoyalty` percent.\n     */\n    function updateProjectSecondaryMarketRoyaltyPercentage(\n        uint256 _projectId,\n        uint256 _secondMarketRoyalty\n    ) public onlyWhitelisted {\n        require(_secondMarketRoyalty <= 100, \"Max of 100%\");\n        projectIdToSecondaryMarketRoyaltyPercentage[_projectId] = _secondMarketRoyalty;\n    }\n\n    /**\n     * @notice Updates description of project `_projectId`.\n     */\n    function updateProjectDescription(uint256 _projectId, string memory _projectDescription)\n        public\n        onlyWhitelisted\n    {\n        projects[_projectId].description = _projectDescription;\n    }\n\n    /**\n     * @notice Updates website of project `_projectId` to be `_projectWebsite`.\n     */\n    function updateProjectWebsite(uint256 _projectId, string memory _projectWebsite)\n        public\n        onlyWhitelisted\n    {\n        projects[_projectId].website = _projectWebsite;\n    }\n\n    /**\n     * @notice Updates license for project `_projectId`.\n     */\n    function updateProjectLicense(uint256 _projectId, string memory _projectLicense)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].license = _projectLicense;\n    }\n\n    /**\n     * @notice Updates maximum invocations for project `_projectId` to\n     * `_maxInvocations`.\n     */\n    function updateProjectMaxInvocations(uint256 _projectId, uint256 _maxInvocations)\n        public\n        onlyWhitelisted\n    {\n        require(\n            (!projects[_projectId].locked || _maxInvocations < projects[_projectId].maxInvocations),\n            \"Only if unlocked\"\n        );\n        require(\n            _maxInvocations > projects[_projectId].invocations,\n            \"You must set max invocations greater than current invocations\"\n        );\n        require(_maxInvocations <= ONE_MILLION, \"Cannot exceed 1000000\");\n        projects[_projectId].maxInvocations = _maxInvocations;\n    }\n\n    /**\n     * @notice Adds a script to project `_projectId`.\n     * @param _projectId Project to be updated.\n     * @param _script Script to be added.\n     */\n    function addProjectScript(uint256 _projectId, string memory _script)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].scripts[projects[_projectId].scriptCount] = _script;\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount + 1;\n    }\n\n    /**\n     * @notice Updates script for project `_projectId` at script ID `_scriptId`.\n     * @param _projectId Project to be updated.\n     * @param _scriptId Script ID to be updated.\n     * @param _script Script to be added.\n     */\n    function updateProjectScript(\n        uint256 _projectId,\n        uint256 _scriptId,\n        string memory _script\n    ) public onlyUnlocked(_projectId) onlyWhitelisted {\n        require(_scriptId < projects[_projectId].scriptCount, \"scriptId out of range\");\n        projects[_projectId].scripts[_scriptId] = _script;\n    }\n\n    /**\n     * @notice Removes last script from project `_projectId`.\n     */\n    function removeProjectLastScript(uint256 _projectId)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        require(projects[_projectId].scriptCount > 0, \"there are no scripts to remove\");\n        delete projects[_projectId].scripts[projects[_projectId].scriptCount - 1];\n        projects[_projectId].scriptCount = projects[_projectId].scriptCount - 1;\n    }\n\n    /**\n     * @notice Updates script json for project `_projectId`.\n     */\n    function updateProjectScriptJSON(uint256 _projectId, string memory _projectScriptJSON)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].scriptJSON = _projectScriptJSON;\n    }\n\n    /**\n     * @notice Updates ipfs hash for project `_projectId`.\n     */\n    function updateProjectIpfsHash(uint256 _projectId, string memory _ipfsHash)\n        public\n        onlyUnlocked(_projectId)\n        onlyWhitelisted\n    {\n        projects[_projectId].ipfsHash = _ipfsHash;\n    }\n\n    /**\n     * @notice Updates base URI for project `_projectId` to `_newBaseURI`.\n     */\n    function updateProjectBaseURI(uint256 _projectId, string memory _newBaseURI)\n        public\n        onlyWhitelisted\n    {\n        projects[_projectId].projectBaseURI = _newBaseURI;\n    }\n\n    /**\n     * @notice Returns project details for project `_projectId`.\n     * @param _projectId Project to be queried.\n     * @return projectName Name of project\n     * @return artist Artist of project\n     * @return description Project description\n     * @return website Project website\n     * @return license Project license\n     */\n    function projectDetails(uint256 _projectId)\n        public\n        view\n        returns (\n            string memory projectName,\n            string memory artist,\n            string memory description,\n            string memory website,\n            string memory license\n        )\n    {\n        projectName = projects[_projectId].name;\n        artist = projects[_projectId].artist;\n        description = projects[_projectId].description;\n        website = projects[_projectId].website;\n        license = projects[_projectId].license;\n    }\n\n    /**\n     * @notice Returns project token information for project `_projectId`.\n     * @param _projectId Project to be queried.\n     * @return artistAddress Project Artist's address\n     * @return pricePerTokenInWei Price to mint a token, in Wei\n     * @return invocations Current number of invocations\n     * @return maxInvocations Maximum allowed invocations\n     * @return active Boolean representing if project is currently active\n     * @return additionalPayee Additional payee address\n     * @return additionalPayeePercentage Percentage of artist revenue\n     * to be sent to the additional payee's address\n     * @return currency Symbol of project's currency\n     * @return currencyAddress Address of project's currency\n     */\n    function projectTokenInfo(uint256 _projectId)\n        public\n        view\n        override(IKumaleonGenArt)\n        returns (\n            address artistAddress,\n            uint256 pricePerTokenInWei,\n            uint256 invocations,\n            uint256 maxInvocations,\n            bool active,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            string memory currency,\n            address currencyAddress\n        )\n    {\n        artistAddress = projectIdToArtistAddress[_projectId];\n        pricePerTokenInWei = projectIdToPricePerTokenInWei[_projectId];\n        invocations = projects[_projectId].invocations;\n        maxInvocations = projects[_projectId].maxInvocations;\n        active = projects[_projectId].active;\n        additionalPayee = projectIdToAdditionalPayee[_projectId];\n        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[_projectId];\n        currency = projectIdToCurrencySymbol[_projectId];\n        currencyAddress = projectIdToCurrencyAddress[_projectId];\n    }\n\n    /**\n     * @notice Returns script information for project `_projectId`.\n     * @param _projectId Project to be queried.\n     * @return scriptJSON Project's script json\n     * @return scriptCount Count of scripts for project\n     * @return ipfsHash IPFS hash for project\n     * @return locked Boolean representing if project is locked\n     * @return paused Boolean representing if project is paused\n     */\n    function projectScriptInfo(uint256 _projectId)\n        public\n        view\n        returns (\n            string memory scriptJSON,\n            uint256 scriptCount,\n            string memory ipfsHash,\n            bool locked,\n            bool paused\n        )\n    {\n        scriptJSON = projects[_projectId].scriptJSON;\n        scriptCount = projects[_projectId].scriptCount;\n        ipfsHash = projects[_projectId].ipfsHash;\n        locked = projects[_projectId].locked;\n        paused = projects[_projectId].paused;\n    }\n\n    /**\n     * @notice Returns script for project `_projectId` at script index `_index`.\n     */\n    function projectScriptByIndex(uint256 _projectId, uint256 _index)\n        public\n        view\n        returns (string memory)\n    {\n        return projects[_projectId].scripts[_index];\n    }\n\n    /**\n     * @notice Returns base URI for project `_projectId`.\n     */\n    function projectURIInfo(uint256 _projectId) public view returns (string memory projectBaseURI) {\n        projectBaseURI = projects[_projectId].projectBaseURI;\n    }\n\n    /**\n     * @notice Gets royalty data for token ID `_tokenId`.\n     * @param _tokenId Token ID to be queried.\n     * @return artistAddress Artist's payment address\n     * @return additionalPayee Additional payee's payment address\n     * @return additionalPayeePercentage Percentage of artist revenue\n     * to be sent to the additional payee's address\n     * @return royaltyFeeByID Total royalty percentage to be sent to\n     * combination of artist and additional payee\n     */\n    function getRoyaltyData(uint256 _tokenId)\n        public\n        view\n        override(IKumaleonGenArt)\n        returns (\n            address artistAddress,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            uint256 royaltyFeeByID\n        )\n    {\n        artistAddress = projectIdToArtistAddress[tokenIdToProjectId[_tokenId]];\n        additionalPayee = projectIdToAdditionalPayee[tokenIdToProjectId[_tokenId]];\n        additionalPayeePercentage = projectIdToAdditionalPayeePercentage[\n            tokenIdToProjectId[_tokenId]\n        ];\n        royaltyFeeByID = projectIdToSecondaryMarketRoyaltyPercentage[tokenIdToProjectId[_tokenId]];\n    }\n\n    /**\n     * @notice Gets token URI for token ID `_tokenId`.\n     */\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        onlyValidTokenId(_tokenId)\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked(\n                    projects[tokenIdToProjectId[_tokenId]].projectBaseURI,\n                    Strings.toString(_tokenId)\n                )\n            );\n    }\n\n    /* royalty */\n\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        uint256 projectId = tokenIdToProjectId[_tokenId];\n        uint256 royaltyPercentage = projectIdToSecondaryMarketRoyaltyPercentage[projectId];\n        royaltyAmount = (_salePrice * royaltyPercentage) / 100;\n        receiver = projectIdToAdditionalPayee[projectId];\n\n        return (receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721)\n        returns (bool)\n    {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    // kumaleon\n\n    function setKumaleon(address _address) external onlyAdmin {\n        require(!isKumaleonFrozen, \"KumaleonGenArt: Already frozen\");\n        kumaleon = _address;\n    }\n\n    function freezeKumaleon() external onlyAdmin {\n        require(!isKumaleonFrozen, \"KumaleonGenArt: Already frozen\");\n        isKumaleonFrozen = true;\n    }\n}\n"
    },
    "contracts/IERC998.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.9;\n\n/**\n * @title ERC998ERC721 Top-Down Composable Non-Fungible Token\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-998.md\n * Note: the ERC-165 identifier for this interface is 0x1efdf36a\n */\ninterface IERC998ERC721TopDown {\n    /**\n     * @dev This emits when a token receives a child token.\n     * @param _from The prior owner of the token.\n     * @param _toTokenId The token that receives the child token.\n     */\n    event ReceivedChild(\n        address indexed _from,\n        uint256 indexed _toTokenId,\n        address indexed _childContract,\n        uint256 _childTokenId\n    );\n\n    /**\n     * @dev This emits when a child token is transferred from a token to an address.\n     * @param _fromTokenId The parent token that the child token is being transferred from.\n     * @param _to The new owner address of the child token.\n     */\n    event TransferChild(\n        uint256 indexed _fromTokenId,\n        address indexed _to,\n        address indexed _childContract,\n        uint256 _childTokenId\n    );\n\n    /**\n     * @notice Get the root owner of tokenId.\n     * @param _tokenId The token to query for a root owner address\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\n     */\n    function rootOwnerOf(uint256 _tokenId) external view returns (bytes32 rootOwner);\n\n    /**\n     * @notice Get the root owner of a child token.\n     * @param _childContract The contract address of the child token.\n     * @param _childTokenId The tokenId of the child.\n     * @return rootOwner The root owner at the top of tree of tokens and ERC998 magic value.\n     */\n    function rootOwnerOfChild(address _childContract, uint256 _childTokenId)\n        external\n        view\n        returns (bytes32 rootOwner);\n\n    /**\n     * @notice Get the parent tokenId of a child token.\n     * @param _childContract The contract address of the child token.\n     * @param _childTokenId The tokenId of the child.\n     * @return parentTokenOwner The parent address of the parent token and ERC998 magic value\n     * @return parentTokenId The parent tokenId of _tokenId\n     */\n    function ownerOfChild(address _childContract, uint256 _childTokenId)\n        external\n        view\n        returns (bytes32 parentTokenOwner, uint256 parentTokenId);\n\n    /**\n     * @notice A token receives a child token\n     * @param _operator The address that caused the transfer.\n     * @param _from The owner of the child token.\n     * @param _childTokenId The token that is being transferred to the parent.\n     * @param _data Up to the first 32 bytes contains an integer which is the receiving parent tokenId.\n     */\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    /**\n     * @notice Transfer child token from top-down composable to address.\n     * @param _fromTokenId The owning token to transfer from.\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token.\n     * @param _childTokenId The tokenId of the token that is being transferred.\n     */\n    function transferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n\n    /**\n     * @notice Transfer child token from top-down composable to address.\n     * @param _fromTokenId The owning token to transfer from.\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token.\n     * @param _childTokenId The tokenId of the token that is being transferred.\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n\n    /**\n     * @notice Transfer child token from top-down composable to address.\n     * @param _fromTokenId The owning token to transfer from.\n     * @param _to The address that receives the child token\n     * @param _childContract The ERC721 contract of the child token.\n     * @param _childTokenId The tokenId of the token that is being transferred.\n     * @param _data Additional data with no specified format\n     */\n    function safeTransferChild(\n        uint256 _fromTokenId,\n        address _to,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Transfer bottom-up composable child token from top-down composable to other ERC721 token.\n     * @param _fromTokenId The owning token to transfer from.\n     * @param _toContract The ERC721 contract of the receiving token\n     * @param _toTokenId The receiving token\n     * @param _childContract The bottom-up composable contract of the child token.\n     * @param _childTokenId The token that is being transferred.\n     * @param _data Additional data with no specified format\n     */\n    function transferChildToParent(\n        uint256 _fromTokenId,\n        address _toContract,\n        uint256 _toTokenId,\n        address _childContract,\n        uint256 _childTokenId,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Get a child token from an ERC721 contract.\n     * @param _from The address that owns the child token.\n     * @param _tokenId The token that becomes the parent owner\n     * @param _childContract The ERC721 contract of the child token\n     * @param _childTokenId The tokenId of the child token\n     */\n    function getChild(\n        address _from,\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _childTokenId\n    ) external;\n}\n\n/**\n * @dev The ERC-165 identifier for this interface is 0xa344afe4\n */\ninterface IERC998ERC721TopDownEnumerable {\n    /**\n     * @notice Get the total number of child contracts with tokens that are owned by tokenId.\n     * @param _tokenId The parent token of child tokens in child contracts\n     * @return uint256 The total number of child contracts with tokens owned by tokenId.\n     */\n    function totalChildContracts(uint256 _tokenId) external view returns (uint256);\n\n    /**\n     * @notice Get child contract by tokenId and index\n     * @param _tokenId The parent token of child tokens in child contract\n     * @param _index The index position of the child contract\n     * @return childContract The contract found at the tokenId and index.\n     */\n    function childContractByIndex(uint256 _tokenId, uint256 _index)\n        external\n        view\n        returns (address childContract);\n\n    /**\n     * @notice Get the total number of child tokens owned by tokenId that exist in a child contract.\n     * @param _tokenId The parent token of child tokens\n     * @param _childContract The child contract containing the child tokens\n     * @return uint256 The total number of child tokens found in child contract that are owned by tokenId.\n     */\n    function totalChildTokens(uint256 _tokenId, address _childContract)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get child token owned by tokenId, in child contract, at index position\n     * @param _tokenId The parent token of the child token\n     * @param _childContract The child contract of the child token\n     * @param _index The index position of the child token.\n     * @return childTokenId The child tokenId for the parent token, child token and index\n     */\n    function childTokenByIndex(\n        uint256 _tokenId,\n        address _childContract,\n        uint256 _index\n    ) external view returns (uint256 childTokenId);\n}\n\ninterface IERC998ERC721BottomUp {\n    /**\n     * @notice Transfer token from owner address to a token\n     * @param _from The owner address\n     * @param _toContract The ERC721 contract of the receiving token\n     * @param _toTokenId The receiving token\n     * @param _data Additional data with no specified format\n     */\n    function transferToParent(\n        address _from,\n        address _toContract,\n        uint256 _toTokenId,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/IKumaleonGenArt.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n// Based on IGenArt721CoreV2_PBAB.\n\npragma solidity =0.8.9;\n\ninterface IKumaleonGenArt {\n    /**\n     * @notice Token ID `_tokenId` minted on project ID `_projectId` to `_to`.\n     */\n    event Mint(address indexed _to, uint256 indexed _tokenId, uint256 indexed _projectId);\n\n    // getter function of public variable\n    function admin() external view returns (address);\n\n    // getter function of public variable\n    function nextProjectId() external view returns (uint256);\n\n    // getter function of public mapping\n    function tokenIdToProjectId(uint256 tokenId) external view returns (uint256 projectId);\n\n    function isWhitelisted(address sender) external view returns (bool);\n\n    function projectIdToCurrencySymbol(uint256 _projectId) external view returns (string memory);\n\n    function projectIdToCurrencyAddress(uint256 _projectId) external view returns (address);\n\n    function projectIdToArtistAddress(uint256 _projectId) external view returns (address payable);\n\n    function projectIdToPricePerTokenInWei(uint256 _projectId) external view returns (uint256);\n\n    function projectIdToAdditionalPayee(uint256 _projectId) external view returns (address payable);\n\n    function projectIdToAdditionalPayeePercentage(uint256 _projectId)\n        external\n        view\n        returns (uint256);\n\n    function projectTokenInfo(uint256 _projectId)\n        external\n        view\n        returns (\n            address,\n            uint256,\n            uint256,\n            uint256,\n            bool,\n            address,\n            uint256,\n            string memory,\n            address\n        );\n\n    function renderProviderAddress() external view returns (address payable);\n\n    function renderProviderPercentage() external view returns (uint256);\n\n    function mint(\n        address _to,\n        uint256 _projectId,\n        address _by\n    ) external returns (uint256 tokenId);\n\n    function getRoyaltyData(uint256 _tokenId)\n        external\n        view\n        returns (\n            address artistAddress,\n            address additionalPayee,\n            uint256 additionalPayeePercentage,\n            uint256 royaltyFeeByID\n        );\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}