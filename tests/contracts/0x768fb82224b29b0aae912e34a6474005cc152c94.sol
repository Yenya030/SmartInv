{{
  "language": "Solidity",
  "sources": {
    "/contracts/ETHRefund.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interface/IApes.sol\";\r\n\r\n/// @title Bulls and Apes Project - 6-Month ETH back\r\n/// @author BAP Dev Team\r\n/// @notice Helper Contract to handle Apes ETH-back\r\ncontract ETHRefund is ReentrancyGuard, Ownable {\r\n    /// @notice BAP Apes contract\r\n    IApes public apesContract;\r\n    /// @notice Address of the signer wallet\r\n    address public secret;\r\n\r\n    bool public isRefundActive;\r\n\r\n    event Equipped(uint256 tokenId, string changeCode, address operator);\r\n\r\n    /// @notice Deploys the contract\r\n    /// @param _apes BAP Apes address\r\n    /// @param _secret Signer address\r\n    constructor(address _apes, address _secret) {\r\n        apesContract = IApes(_apes);\r\n        secret = _secret;\r\n    }\r\n\r\n    /// @notice Helper function to request ETH-Back refund\r\n    /// @param tokenId ID of the Ape to ask refund\r\n    /// @param to Owner of the Ape to send the funds\r\n    /// @param signature Signature to verify above parameters\r\n    function requestRefund(\r\n        uint256 tokenId,\r\n        address to,\r\n        bytes memory signature\r\n    ) external nonReentrant {\r\n        require(tokenId <= 10000, \"requestRefund: Can't refund equipped Ape\");\r\n        require(apesContract.exists(tokenId), \"requestRefund: Ape doesn't exists\");\r\n        require(\r\n            _verifyHashSignature(\r\n                keccak256(abi.encode(tokenId, to, msg.sender, \"BAP Refund\")),\r\n                signature\r\n            ), // Checks validity of back-end provided signatre\r\n            \"requestRefund: Signature is invalid\"\r\n        );\r\n        require(isRefundActive, \"requestRefund: Refund is not active\");\r\n\r\n        apesContract.refund(to, tokenId);\r\n    }\r\n\r\n    /// @notice Batch request to check refund status on Apes\r\n    /// @param ids IDs of Apes to check refund status\r\n    function batchCheckRefund(uint256[] memory ids)\r\n        external\r\n        view\r\n        returns (bool[] memory status, uint256[] memory prices)\r\n    {\r\n        uint256 tokenCount = ids.length;\r\n\r\n        status = new bool[](tokenCount);\r\n        prices = new uint256[](tokenCount);\r\n\r\n        for (uint256 i; i < tokenCount; i++) {\r\n            uint256 tokenId = ids[i];\r\n            try apesContract.notRefundable(tokenId) returns (\r\n                bool isRefundable\r\n            ) {\r\n                status[i] = isRefundable;\r\n            } catch {\r\n                status[i] = false;\r\n            }\r\n\r\n            prices[i] = apesContract.mintingPrice(tokenId);\r\n        }\r\n    }\r\n\r\n    /// @notice Set new contracts addresses for Apes\r\n    /// @param _apes New address for BAP Apes\r\n    /// @dev Can only be called by the contract owner\r\n    function setContracts(address _apes) external onlyOwner {\r\n        apesContract = IApes(_apes);\r\n    }\r\n\r\n    /// @notice Change the signer address\r\n    /// @param _secret new signer for encrypted signatures\r\n    /// @dev Can only be called by the contract owner\r\n    function setSecret(address _secret) external onlyOwner {\r\n        secret = _secret;\r\n    }\r\n\r\n    /// @notice Change the refund status\r\n    /// @param status new refund status\r\n    /// @dev Can only be called by the contract owner\r\n    function setRefundStatus(bool status) external onlyOwner {\r\n        isRefundActive = status;\r\n    }\r\n\r\n    function _verifyHashSignature(bytes32 freshHash, bytes memory signature)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", freshHash)\r\n        );\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        if (signature.length != 65) {\r\n            return false;\r\n        }\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n        }\r\n\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        address signer = address(0);\r\n        if (v == 27 || v == 28) {\r\n            // solium-disable-next-line arg-overflow\r\n            signer = ecrecover(hash, v, r, s);\r\n        }\r\n        return secret == signer;\r\n    }\r\n}\r\n"
    },
    "/contracts/interface/IApes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n// solhint-disable-next-line\r\npragma solidity 0.8.12;\r\n\r\ninterface IApes {\r\n    function confirmChange(uint256 tokenId) external;\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function refund(address depositAddress, uint256 tokenId) external;\r\n\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    function notRefundable(uint256 tokenId) external view returns (bool);\r\n\r\n    function mintingPrice(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}