{{
  "language": "Solidity",
  "sources": {
    "contracts/PublicMint.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/*\n\n███╗░░░███╗███████╗████████╗░█████╗░██╗░░░░░░█████╗░██████╗░███████╗██╗░░░░░\n████╗░████║██╔════╝╚══██╔══╝██╔══██╗██║░░░░░██╔══██╗██╔══██╗██╔════╝██║░░░░░\n██╔████╔██║█████╗░░░░░██║░░░███████║██║░░░░░███████║██████╦╝█████╗░░██║░░░░░\n██║╚██╔╝██║██╔══╝░░░░░██║░░░██╔══██║██║░░░░░██╔══██║██╔══██╗██╔══╝░░██║░░░░░\n██║░╚═╝░██║███████╗░░░██║░░░██║░░██║███████╗██║░░██║██████╦╝███████╗███████╗\n╚═╝░░░░░╚═╝╚══════╝░░░╚═╝░░░╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═════╝░╚══════╝╚══════╝\n\n██████╗░██╗░░░██╗██████╗░██╗░░░░░██╗░█████╗░  ███╗░░░███╗██╗███╗░░██╗████████╗\n██╔══██╗██║░░░██║██╔══██╗██║░░░░░██║██╔══██╗  ████╗░████║██║████╗░██║╚══██╔══╝\n██████╔╝██║░░░██║██████╦╝██║░░░░░██║██║░░╚═╝  ██╔████╔██║██║██╔██╗██║░░░██║░░░\n██╔═══╝░██║░░░██║██╔══██╗██║░░░░░██║██║░░██╗  ██║╚██╔╝██║██║██║╚████║░░░██║░░░\n██║░░░░░╚██████╔╝██████╦╝███████╗██║╚█████╔╝  ██║░╚═╝░██║██║██║░╚███║░░░██║░░░\n╚═╝░░░░░░╚═════╝░╚═════╝░╚══════╝╚═╝░╚════╝░  ╚═╝░░░░░╚═╝╚═╝╚═╝░░╚══╝░░░╚═╝░░░\n\nMetalabel - Public Mint\n\nPublic Mint is a living collection of free-to-mint NFTs that celebrate releases\nand meaningful events in the Metalabel universe\n\nDeployed by Metalabel with 💖 as a permanent application on the Ethereum blockchain.\n\nhttps://public-mint.metalabel.xyz\n\nAnna Bulbrook (Curator)\nAustin Robey (Community)\nBrandon Valosek (Engineer)\nIlya Yudanov (Designer)\nLauren Dorman (Engineer)\nRob Kalin (Board member)\nYancey Strickler (CEO)\n\n*/\n\nimport {ERC721} from \"@metalabel/solmate/src/tokens/ERC721.sol\";\nimport {Owned} from \"@metalabel/solmate/src/auth/Owned.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/interfaces/IERC721.sol\";\n\n/// @notice Contract that can compute tokenURI values for a given token ID.\ninterface IMetadataResolver {\n    function resolve(address _contract, uint256 _id)\n        external\n        view\n        returns (string memory);\n}\n\n/// @notice Data stored for each token series\nstruct SeriesConfig {\n    string metadataBaseURI;\n    uint32 variationCount;\n    IMetadataResolver metadataResolver;\n}\n\n/// @notice ERC721 NFT contract for Metalabel Public Mint\ncontract PublicMint is ERC721, Owned {\n    // ---\n    // errors\n    // ---\n\n    /// @notice Minting is not allowed currently\n    error MintingPaused();\n\n    /// @notice External mint from an invalid msg.sender\n    error UnallowedExternalMinter();\n\n    // ---\n    // events\n    // ---\n\n    /// @notice A token series was configured\n    event SeriesConfigSet(\n        uint16 indexed seriesId,\n        string metadataBaseURI,\n        uint32 variationCount,\n        IMetadataResolver metadataResolver\n    );\n\n    /// @notice An address was added or removed as an allowed minter for a\n    /// series.\n    event SeriesAllowedMinterSet(\n        uint16 indexed seriesId,\n        address indexed minter,\n        bool isAllowed\n    );\n\n    /// @notice The contract owner updated the current active mint.\n    event ActiveMintSet(uint16 indexed seriesId, uint64 mintingPausesAt);\n\n    // ---\n    // storage\n    // ---\n\n    /// @notice Total number of minted tokens.\n    uint256 public totalSupply;\n\n    /// @notice The URI for the collection-level metadata, only set during\n    /// deployment. Checked by OpenSea.\n    string public contractURI;\n\n    /// @notice The address of the ASSEMBLY 001 NFT contract\n    IERC721 public immutable assemblyNFT;\n\n    /// @notice The token series actively being minted from this contract.\n    /// External minting contracts may mint from any series.\n    uint16 public currentMintingSeries = 1;\n\n    /// @notice Timestamp after which minting will be paused. External minting\n    /// contracts can mint at any time.\n    uint64 public mintingPausesAt = 0;\n\n    /// @notice The token series configurations.\n    mapping(uint16 => SeriesConfig) public seriesConfigs;\n\n    /// @notice Addresses that are allowed to mint a specific token series.\n    mapping(uint16 => mapping(address => bool)) public seriesAllowedMinters;\n\n    /// @notice Flag to indicate if an address has claimed an NFT with their\n    /// ASSEMBLY NFT already\n    mapping(address => bool) public assemblyNFTClaimed;\n\n    // ---\n    // constructor\n    // ---\n\n    constructor(\n        string memory _contractURI,\n        address _contractOwner,\n        IERC721 _assemblyNFT,\n        SeriesConfig[] memory _initialSeries\n    )\n        ERC721(\"Metalabel Public Mint\", \"METALABEL-PM\")\n        Owned(_contractOwner == address(0) ? msg.sender : _contractOwner)\n    {\n        contractURI = _contractURI;\n        assemblyNFT = _assemblyNFT;\n\n        // initialize the first series\n        for (uint16 i = 0; i < _initialSeries.length; i++) {\n            SeriesConfig memory config = _initialSeries[i];\n            seriesConfigs[i] = config;\n            emit SeriesConfigSet(\n                i,\n                config.metadataBaseURI,\n                config.variationCount,\n                config.metadataResolver\n            );\n        }\n    }\n\n    // ---\n    // Owner functionality\n    // ---\n\n    /// @notice Set the active minting series and cutoff time. Only callable by\n    /// owner.\n    function setActiveMint(uint16 _seriesId, uint64 _mintingPausesAt)\n        external\n        onlyOwner\n    {\n        currentMintingSeries = _seriesId;\n        mintingPausesAt = _mintingPausesAt;\n        emit ActiveMintSet(_seriesId, _mintingPausesAt);\n    }\n\n    /// @notice Set the configuration for a specific token series. Only callable\n    /// by owner.\n    function setSeriesConfig(\n        uint16 _seriesId,\n        SeriesConfig memory _config,\n        address[] memory _allowedMinters\n    ) external onlyOwner {\n        seriesConfigs[_seriesId] = _config;\n\n        emit SeriesConfigSet(\n            _seriesId,\n            _config.metadataBaseURI,\n            _config.variationCount,\n            _config.metadataResolver\n        );\n\n        setSeriesAllowedMinters(_seriesId, _allowedMinters, true);\n    }\n\n    /// @notice Set or unset the allowed minters for a specific token series.\n    /// Only callable by owner.\n    function setSeriesAllowedMinters(\n        uint16 _seriesId,\n        address[] memory _allowedMinters,\n        bool isAllowed\n    ) public onlyOwner {\n        for (uint256 i = 0; i < _allowedMinters.length; i++) {\n            seriesAllowedMinters[_seriesId][_allowedMinters[i]] = isAllowed;\n            emit SeriesAllowedMinterSet(\n                _seriesId,\n                _allowedMinters[i],\n                isAllowed\n            );\n        }\n    }\n\n    // ---\n    // external minter functionality\n    // ---\n\n    /// @notice Mint from an external allowed minting account with a prandom\n    /// seed.\n    function externalMint(address to, uint16 seriesId)\n        external\n        returns (uint256)\n    {\n        if (!seriesAllowedMinters[seriesId][msg.sender]) {\n            revert UnallowedExternalMinter();\n        }\n\n        return _mintToSeries(to, seriesId);\n    }\n\n    /// @notice Mint from an external allowed minting contract with a custom\n    /// seed.\n    function externalMint(\n        address to,\n        uint16 seriesId,\n        uint48 seed\n    ) external returns (uint256) {\n        if (!seriesAllowedMinters[seriesId][msg.sender]) {\n            revert UnallowedExternalMinter();\n        }\n\n        uint256 tokenId = ++totalSupply;\n        _mint(to, tokenId, seriesId, seed);\n        return tokenId;\n    }\n\n    // ---\n    // public functionality\n    // ---\n\n    /// @notice Mint a new token from the currently active series.\n    /// @param to The address to mint the token to.\n    /// @param mintBonusNFT If true, and \"to\" has an OG ASSEMBLY NFT they\n    /// haven't yet used to mint an NFT from the ASSEMBLY series, then a bonus\n    /// NFT will also be minted.\n    function mint(address to, bool mintBonusNFT) external returns (uint256) {\n        if (block.timestamp >= mintingPausesAt) revert MintingPaused();\n\n        // If the caller wants to also their bonus NFT for assembly, check to\n        // see if they own the OG assembly NFT and havent yet claimed\n        if (\n            mintBonusNFT &&\n            assemblyNFT.balanceOf(to) > 0 && // assemblyNFT is never 0x0\n            !assemblyNFTClaimed[to]\n        ) {\n            _mintToSeries(\n                to,\n                0 /* assembly series */\n            );\n            assemblyNFTClaimed[to] = true;\n        }\n\n        return _mintToSeries(to, currentMintingSeries);\n    }\n\n    /// @notice Internal mint logic\n    function _mintToSeries(address to, uint16 seriesId)\n        internal\n        returns (uint256)\n    {\n        uint256 tokenId = ++totalSupply;\n        uint48 seed = uint48(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        tokenId,\n                        seriesId,\n                        msg.sender,\n                        blockhash(block.number - 1)\n                    )\n                )\n            )\n        );\n        _mint(to, tokenId, seriesId, seed);\n        return tokenId;\n    }\n\n    // ---\n    // metadata logic\n    // ---\n\n    /// @notice Return the metadata URI for a token.\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        SeriesConfig memory config = seriesConfigs[\n            _tokenData[tokenId].seriesId\n        ];\n\n        // use an external resolver if set\n        if (config.metadataResolver != IMetadataResolver(address(0))) {\n            return config.metadataResolver.resolve(address(this), tokenId);\n        }\n\n        // determine the variation psuedorandomly as a function of token seed\n        uint256 variation = uint256(\n            keccak256(abi.encodePacked(_tokenData[tokenId].seed))\n        ) % config.variationCount;\n\n        // otherwise concatenate the base URI and the token ID\n        return\n            string(\n                abi.encodePacked(\n                    config.metadataBaseURI,\n                    \"variation-\",\n                    Strings.toString(variation),\n                    \".json\"\n                )\n            );\n    }\n}\n"
    },
    "@metalabel/solmate/src/tokens/ERC721.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Data stored per-token, fits into a single storage word\nstruct TokenData {\n    address owner;\n    uint32 truncatedTimestamp;\n    uint16 seriesId;\n    uint48 seed;\n}\n\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\n\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    event TokenDataSet(uint256 indexed id, uint16 indexed seriesId, uint48 indexed seed);\n\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => TokenData) internal _tokenData;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        require((owner = _tokenData[id].owner) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) public getApproved;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(string memory _name, string memory _symbol) {\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public virtual {\n        address owner = _tokenData[id].owner;\n\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        require(from == _tokenData[id].owner, \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        unchecked {\n            _balanceOf[from]--;\n\n            _balanceOf[to]++;\n        }\n\n        _tokenData[id].owner = to;\n\n        delete getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        return _mint(to, id, 0, 0);\n    }\n\n    function _mint(address to, uint256 id, uint16 seriesId, uint48 seed) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_tokenData[id].owner == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n        unchecked {\n            _balanceOf[to]++;\n        }\n\n        _tokenData[id] = TokenData({\n            owner: to,\n            truncatedTimestamp: uint32(block.timestamp / 10),\n            seriesId: seriesId,\n            seed: seed\n        });\n\n        emit Transfer(address(0), to, id);\n        emit TokenDataSet(id, seriesId, seed);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _tokenData[id].owner;\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        // Ownership check above ensures no underflow.\n        unchecked {\n            _balanceOf[owner]--;\n        }\n\n        delete _tokenData[id];\n\n        delete getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\") ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(\n        address to,\n        uint256 id,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, id);\n\n        require(\n            to.code.length == 0 ||\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\n                ERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    METALABEL ADDED FUNCTIONALITY\n    //////////////////////////////////////////////////////////////*/\n\n    function getTokenData(uint256 id) external view virtual returns (TokenData memory) {\n        TokenData memory data = _tokenData[id];\n        require(data.owner != address(0), \"NOT_MINTED\");\n        return data;\n    }\n\n    function getApproximateTokenMintTimestamp(uint256 id) external view virtual returns (uint256) {\n        TokenData memory data = _tokenData[id];\n        require(data.owner != address(0), \"NOT_MINTED\");\n        return uint256(data.truncatedTimestamp) * 10;\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\nabstract contract ERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721TokenReceiver.onERC721Received.selector;\n    }\n}\n"
    },
    "@metalabel/solmate/src/auth/Owned.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setOwner(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}