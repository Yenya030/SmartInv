{{
  "language": "Solidity",
  "sources": {
    "contracts/AnimeMetaverseTicket.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.15;\n\n/// @title Anime Metaverse Ticket Smart Contract\n/// @author LiquidX\n/// @notice This contract is used to mint free ticket and premium ticket\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IAnimeMetaverseTicket.sol\";\nimport \"./AmvUtils.sol\";\n\n/// @notice Thrown when free ticket it's not able to be minted\nerror FreeTicketMintingNotActive();\n/// @notice Thrown when invalid destination address specified (address(0) or address(this))\nerror InvalidAddress();\n/// @notice Thrown when burning less than 1 ticket\nerror InvalidBurnAmount();\n/// @notice Thrown when max supply is less than total supply\nerror InvalidMaxSupply();\n/// @notice Thrown when current token ID is already used by other token\nerror InvalidTokenId();\n/// @notice Thrown when minting ticket more than its limit\nerror MaximumLimitToMintTicketExceeded();\n/// @notice Thrown when the address is not allowed/exist in the burner list\nerror NotAllowedToBurn();\n/// @notice Thrown when premium ticket it's not able to be minted\nerror PremiumTicketMintingNotActive();\n/// @notice Thrown when inputting 0 as value\nerror ValueCanNotBeZero();\n/// @notice Thrown when the length of array does not match with other array\nerror InvalidArrayLength();\n/// @notice Thrown when an address is already whitelisted\nerror AlreadyWhiteListed(address wlAddress);\n/// @notice Thrown when an address is not whitelisted\nerror NotWhiteListed(address wlAddress);\n\ncontract AnimeMetaverseTicket is\n    Ownable,\n    ERC1155,\n    AmvUtils,\n    IAnimeMetaverseTicket\n{\n    /// @dev Address who can withdraw the balance\n    address payable withdrawalWallet;\n\n    uint256 constant FREE_TICKET_TOKEN_ID = 1;\n    uint256 constant PREMIUM_TICKET_TOKEN_ID = 2;\n    /// @notice Initial premium ticket price when the contract was deployed\n    uint256 public constant DEFAULT_PREMIUM_TICKET_PRICE = 0.06 ether;\n\n    /// @dev State that decides whether user can mint free ticket or not\n    bool public freeTicketMintingActive = false;\n    /// @dev State that decides whether user can mint premium ticket or not\n    bool public premiumTicketMintingActive = false;\n\n    /// @notice Maximum free ticket supply\n    /// @dev The maximum limit should not be less than total supply\n    uint256 public freeTicketMaxSupply = 16000;\n    /// @notice Maximum premium ticket supply\n    /// @dev The maximum limit should not be less than total supply\n    uint256 public premiumTicketMaxSupply = 20000;\n\n    /// @notice Total free ticket that has been minted\n    /// @dev The number will increase everytime there is a mint transaction\n    uint256 public freeTicketTotalSupply = 0;\n    /// @notice Total premium ticket that has been minted\n    /// @dev The number will increase everytime there is a mint transaction\n    uint256 public premiumTicketTotalSupply = 0;\n\n    /// @notice Maximum limit for minting premium ticket in one transaction\n    uint256 public maxPremiumTicketMintLimit = 100;\n\n    /// @notice Current premium ticket price\n    /// @dev This variable value can change since it's\n    ///      storing the default price only for the first time\n    uint256 public premiumTicketPrice = DEFAULT_PREMIUM_TICKET_PRICE;\n\n    /// @notice Storing base URL for ticket metadata\n    string public baseURI = \"\";\n\n    /// @notice Store detail information related to whitelisted address\n    /// @dev Whitelisted user are those who can mint free ticket\n    /// @param maxAllowedToMint maximum free ticket user can mint\n    /// @param alreadyMinted amount of free ticket that is already minted by user\n    struct WhiteListedUser {\n        uint256 maxAllowedToMint;\n        uint256 alreadyMinted;\n    }\n\n    /// @notice List of whitelisted address and their eligible free ticket amount\n    /// @dev Every address will contain information in the WhiteListedUser struct\n    mapping(address => WhiteListedUser) public whiteListedUsersInfo;\n    /// @notice List of address who's allowed to burn the ticket\n    /// @dev The burner address list can only be set by the contract owner\n    ///      and the value will be boolean. 'true' means allowed, otherwise\n    ///      it's not.\n    mapping(address => bool) public burnerList;\n\n    /// @notice Check whether the address is a wallet address\n    /// @dev Check if address is not 0x0 or contract address\n    /// @param _address Any valid ethereum address\n    modifier validAddress(address _address) {\n        if (_address == address(0) || _address == address(this)) {\n            revert InvalidAddress();\n        }\n        _;\n    }\n\n    /// @notice Check whether current token ID is either free ticket or premium ticket ID\n    /// @param _tokenId Any unsigned integer number\n    modifier validTokenId(uint256 _tokenId) {\n        if (\n            _tokenId != FREE_TICKET_TOKEN_ID &&\n            _tokenId != PREMIUM_TICKET_TOKEN_ID\n        ) {\n            revert InvalidTokenId();\n        }\n        _;\n    }\n\n    /// @notice Check whether the length of 2 lists are same.\n    /// @dev Check whether the length of 2 arrays of unsigned integer are same.\n    /// @param _length1 First array\n    /// @param _length2 Second array\n    modifier validInputArrayLength(uint256 _length1, uint256 _length2) {\n        if (_length1 != _length2) {\n            revert InvalidArrayLength();\n        }\n        _;\n    }\n\n    /// @notice Check whether the input is zero\n    /// @param amount Any unsigned integer number\n    modifier NotZero(uint256 amount) {\n        if (amount == 0) {\n            revert ValueCanNotBeZero();\n        }\n        _;\n    }\n\n    /// @notice Whether there is a mint transaction for free ticket\n    /// @dev This event can also be used to audit the total supply of free ticket\n    /// @param _receiver Address who mint the ticket\n    /// @param _mintAmount How many ticket is minted in the transaction\n    /// @param _tokenId The ticket token ID\n    event MintFreeTicket(\n        address _receiver,\n        uint256 _mintAmount,\n        uint256 _tokenId\n    );\n    /// @notice Whether there is a mint transaction for premium ticket\n    /// @dev This event can also be used to audit the total supply of premium ticket\n    /// @param _receiver Address who mint the ticket\n    /// @param _mintAmount How many ticket is minted in the transaction\n    /// @param _tokenId The ticket token ID\n    event MintPremiumTicket(\n        address _receiver,\n        uint256 _mintAmount,\n        uint256 _tokenId\n    );\n    /// @notice Emit whenever a ticket is burned\n    /// @dev This event can also be used to audit the total of burned ticket\n    /// @param _ticketOwner Owner of the ticket\n    /// @param _burnAmount How many ticket is burned\n    /// @param _tokenId The ticket token ID\n    event BurnTicket(\n        address _ticketOwner,\n        uint256 _burnAmount,\n        uint256 _tokenId\n    );\n\n    /// @notice Set initial address who can withdraw the balance in this contract\n    /// @dev The ERC1155 function is derived from Open Zeppelin ERC1155 library\n    constructor() ERC1155(\"\") {\n        withdrawalWallet = payable(msg.sender);\n    }\n\n    /// @notice Add address to whitelist and set their free ticket quota\n    /// @param _accounts list of address that will be added to whitelist\n    /// @param _ticketAmounts amount of free ticket each user can mint\n    function addToWhitelistBatch(\n        address[] memory _accounts,\n        uint256[] memory _ticketAmounts\n    )\n        public\n        onlyOwner\n        validInputArrayLength(_accounts.length, _ticketAmounts.length)\n    {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            if (_accounts[i] == address(0) || _accounts[i] == address(this)) {\n                revert InvalidAddress();\n            }\n            if (whiteListedUsersInfo[_accounts[i]].maxAllowedToMint != 0) {\n                revert AlreadyWhiteListed(_accounts[i]);\n            }\n            if (_ticketAmounts[i] < 1) {\n                revert ValueCanNotBeZero();\n            }\n            whiteListedUsersInfo[_accounts[i]] = WhiteListedUser({\n                maxAllowedToMint: _ticketAmounts[i],\n                alreadyMinted: 0\n            });\n        }\n    }\n    \n    /// @notice updates whitelistedusers for free minting\n    /// @dev This function can be used to override maximum quota of\n    ///      the free ticket that user can mint\n    /// @param _accounts list of address that will be updated\n    /// @param _ticketAmounts amount of free ticket each user can mint\n    function updateWhitelistBatch(\n        address[] memory _accounts,\n        uint256[] memory _ticketAmounts\n    )\n        public\n        onlyOwner\n        validInputArrayLength(_accounts.length, _ticketAmounts.length)\n    {\n        for (uint256 i = 0; i < _accounts.length; i++) {\n            if (_accounts[i] == address(0) || _accounts[i] == address(this)) {\n                revert InvalidAddress();\n            }\n            if (whiteListedUsersInfo[_accounts[i]].maxAllowedToMint == 0) {\n                revert NotWhiteListed(_accounts[i]);\n            }\n            require(\n                _ticketAmounts[i] >=\n                    whiteListedUsersInfo[_accounts[i]].alreadyMinted,\n                \"max allowed to mint ticket needs to be greate or equal than already minted ticket for this address.\"\n            );\n            whiteListedUsersInfo[_accounts[i]]\n                .maxAllowedToMint = _ticketAmounts[i];\n        }\n    }\n\n    /// @notice Mint free ticket that only available for whitelisted address\n    /// @dev Use _mint method from ERC1155 function which derived from Open Zeppelin ERC1155 library. It will increase alreadyMinted value based on amount of minted ticket\n    /// @param _mintAmount How many free ticket to mint\n    function mintFreeTicket(uint256 _mintAmount) external NotZero(_mintAmount) {\n        if (!freeTicketMintingActive) {\n            revert FreeTicketMintingNotActive();\n        }\n        require(\n            freeTicketTotalSupply + _mintAmount <= freeTicketMaxSupply,\n            \"Total minted Ticket count has reached the mint limit.\"\n        );\n\n        require(\n            IsMintRequestValid(msg.sender, _mintAmount),\n            \"you are not whitelisted or already exceeded maximum limit to mint Free Ticket.\"\n        );\n        freeTicketTotalSupply += _mintAmount;\n        whiteListedUsersInfo[msg.sender].alreadyMinted += _mintAmount;\n        _mint(msg.sender, FREE_TICKET_TOKEN_ID, _mintAmount, \"\");\n        emit MintFreeTicket(msg.sender, _mintAmount, FREE_TICKET_TOKEN_ID);\n    }\n\n    /// @notice Mint permium ticket that available for any address\n    /// @dev Whitelisted address can also mint premium ticket and doesn't\n    ///      increase the alreadyMinted value\n    /// @param _mintAmount How many premium ticket to mint\n    function mintPremiumTicket(uint256 _mintAmount)\n        external\n        payable\n        NotZero(_mintAmount)\n    {\n        if (!premiumTicketMintingActive) {\n            revert PremiumTicketMintingNotActive();\n        }\n        if (_mintAmount > maxPremiumTicketMintLimit) {\n            revert MaximumLimitToMintTicketExceeded();\n        }\n        require(\n            msg.value == premiumTicketPrice * _mintAmount,\n            \"insufficient or excess ETH provided.\"\n        );\n        require(\n            premiumTicketTotalSupply + _mintAmount <= premiumTicketMaxSupply,\n            \"Total minted Ticket count has reached the mint limit.\"\n        );\n        premiumTicketTotalSupply += _mintAmount;\n        _mint(msg.sender, PREMIUM_TICKET_TOKEN_ID, _mintAmount, \"\");\n        emit MintPremiumTicket(\n            msg.sender,\n            _mintAmount,\n            PREMIUM_TICKET_TOKEN_ID\n        );\n    }\n\n    /// @notice this is an owner function which airdrops permium tickets\n    /// @param _addresses these will get airdropped premium tickets.\n    /// @param _amounts number of premium tickets to be airdropped.\n    function airDropPremiumTicket(\n        address[] memory _addresses,\n        uint256[] memory _amounts\n    )\n        external\n        onlyOwner\n        validInputArrayLength(_addresses.length, _amounts.length)\n    {\n        uint256 amount = 0;\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            amount += _amounts[i];\n        }\n        require(\n            premiumTicketTotalSupply + amount <= premiumTicketMaxSupply,\n            \"Total minted Ticket count has reached the mint limit.\"\n        );\n        premiumTicketTotalSupply += amount;\n        for (uint256 i = 0; i < _addresses.length; i++) {\n            _mint(_addresses[i], PREMIUM_TICKET_TOKEN_ID, _amounts[i], \"\");\n        }\n        \n    }\n\n    /// @notice Check whether the whitelisted address still eligible to\n    ///         mint free ticket\n    /// @dev It will calculate the alreadyMinted value + the _mintAmount\n    ///      and the value should be less than equal to maxAllowedToMint\n    /// @param _walletAddress Any valid wallet address\n    /// @param _mintAmount How many free tickets to mint\n    function IsMintRequestValid(address _walletAddress, uint256 _mintAmount)\n        public\n        view\n        returns (bool)\n    {\n        if (\n            whiteListedUsersInfo[_walletAddress].alreadyMinted + _mintAmount <=\n            whiteListedUsersInfo[_walletAddress].maxAllowedToMint\n        ) return true;\n        else return false;\n    }\n\n    /// @notice Burn ticket\n    /// @dev It will use _burn method from Open Zeppelin ERC1155 library\n    /// @param tokenId Ticket token ID\n    /// @param _account Address who burn the ticket\n    /// @param _numberofTickets How many tickets to burn\n    function burn(\n        uint256 tokenId,\n        address _account,\n        uint256 _numberofTickets\n    ) public validTokenId(tokenId) {\n        if (!burnerList[msg.sender]) {\n            revert NotAllowedToBurn();\n        }\n        if (_numberofTickets < 1) {\n            revert InvalidBurnAmount();\n        }\n        _burn(_account, tokenId, _numberofTickets);\n        emit BurnTicket(_account, _numberofTickets, tokenId);\n    }\n\n    /// @notice Update max supply for premium ticket\n    /// @dev Max supply should not be less than the premium ticket total supply\n    /// @param _newMaxSupply New maximum supply for premium ticket\n    function updateMaxSupplyForPremiumTicket(uint256 _newMaxSupply)\n        external\n        onlyOwner\n    {\n        if (_newMaxSupply < premiumTicketTotalSupply) {\n            revert InvalidMaxSupply();\n        }\n        premiumTicketMaxSupply = _newMaxSupply;\n    }\n\n    /// @notice Update max supply for free ticket\n    /// @dev Max supply should not be less than the free ticket total supply\n    /// @param _newMaxSupply New maximum supply for free ticket\n    function updateMaxSupplyForFreeTicket(uint256 _newMaxSupply)\n        external\n        onlyOwner\n    {\n        if (_newMaxSupply < freeTicketTotalSupply) {\n            revert InvalidMaxSupply();\n        }\n        freeTicketMaxSupply = _newMaxSupply;\n    }\n\n    /// @notice Set wallet address that can withdraw the balance\n    /// @dev Only owner of the contract can execute this function.\n    ///      The address should not be 0x0 or contract address\n    /// @param _wallet Any valid address\n    function setWithdrawWallet(address _wallet)\n        external\n        onlyOwner\n        validAddress(_wallet)\n    {\n        withdrawalWallet = payable(_wallet);\n    }\n\n    /// @notice Set address that can burn ticket\n    /// @dev Only owner of the contract can execute this function.\n    ///      The address should not be 0x0 or contract address\n    /// @param _burner The address that will be registered in burner list\n    /// @param _flag Whether the address can burn the ticket or not\n    function setBurnerAddress(address _burner, bool _flag)\n        external\n        onlyOwner\n        validAddress(_burner)\n    {\n        burnerList[_burner] = _flag;\n    }\n\n    /// @notice Transfer balance on this contract to withdrawal address\n    function withdrawETH() external onlyOwner {\n        withdrawalWallet.transfer(address(this).balance);\n    }\n\n    /// @notice Update premium ticket price\n    function updateMintPrice(uint256 _newPrice) external onlyOwner {\n        premiumTicketPrice = _newPrice;\n    }\n\n    /// @notice Reset premium ticket price to default price\n    /// @dev The default price is the value of DEFAULT_PREMIUM_TICKET_PRICE variable\n    function resetMintPrice() external onlyOwner {\n        premiumTicketPrice = DEFAULT_PREMIUM_TICKET_PRICE;\n    }\n\n    /// @notice Set base URL for metadata\n    /// @param _newuri URL for metadata\n    function setURI(string memory _newuri) public onlyOwner {\n        baseURI = _newuri;\n    }\n\n    /// @notice Set maximum limit for minting premium ticket in one transaction\n    /// @dev The limit should not be more than the difference of maximum\n    ///      premium ticket supply and premium ticket total supply\n    /// @param _maxLimit New maximum limit for minting premium ticket\n    function updateMaxMintLimitForPremiumTicket(uint256 _maxLimit)\n        external\n        onlyOwner\n        NotZero(_maxLimit)\n    {\n        if (_maxLimit > (premiumTicketMaxSupply - premiumTicketTotalSupply)) {\n            revert();\n        }\n        maxPremiumTicketMintLimit = _maxLimit;\n    }\n\n    /// @notice Activate free ticket mint functionality\n    /// @dev This will either prevent/allow minting transaction in this contract\n    /// @param _flag Whether to enable or disable the minting functionality\n    function ActivateFreeTicketMinting(bool _flag) external onlyOwner {\n        freeTicketMintingActive = _flag;\n    }\n\n    /// @notice Activate premium ticket mint functionality\n    /// @dev This will either prevent/allow minting transaction in this contract\n    /// @param _flag Whether to enable or disable the minting functionality\n    function ActivatePremiumTicketMinting(bool _flag) external onlyOwner {\n        premiumTicketMintingActive = _flag;\n    }\n\n    /// @notice Append token ID to base URL\n    /// @param _tokenId Ticket token ID\n    function uri(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, intToString(_tokenId)))\n                : \"\";\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/IAnimeMetaverseTicket.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.15;\n\ninterface IAnimeMetaverseTicket {\n    function burn(\n        uint256 tokenId,\n        address _account,\n        uint256 _numberofTickets\n    ) external;\n\n    function mintFreeTicket(uint256 _mintAmount) external;\n\n    function mintPremiumTicket(uint256 _mintAmount) external payable;\n}\n"
    },
    "contracts/AmvUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ncontract AmvUtils {\n    function intToString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    function singletonArray(uint256 element)\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}