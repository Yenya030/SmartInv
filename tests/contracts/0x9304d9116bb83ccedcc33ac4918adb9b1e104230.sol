{"BaseTokenURI.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./Dependencies.sol\";\nimport \"./Fiefdoms.sol\";\nimport \"./FiefdomArchetype.sol\";\n\ncontract BaseTokenURI {\n  using Strings for uint256;\n\n  Fiefdoms private immutable fiefdoms;\n\n  constructor() {\n    fiefdoms = Fiefdoms(msg.sender);\n  }\n\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    bytes memory name = abi.encodePacked(\u0027Fiefdom Vassal #\u0027, tokenId.toString());\n    address fiefdomAddr = fiefdoms.tokenIdToFiefdom(tokenId);\n\n    bool isActivated = FiefdomArchetype(fiefdomAddr).isActivated();\n    uint256 foundedAt = FiefdomArchetype(fiefdomAddr).foundedAt();\n\n    string memory pColor = isActivated ? \u0027#fff\u0027 : \u0027#000\u0027;\n    string memory sColor = isActivated ? \u0027#000\u0027 : \u0027#fff\u0027;\n    string memory state = isActivated ? \u0027Activated\u0027 : \u0027Unactivated\u0027;\n\n    bytes memory attributes = abi.encodePacked(\n      \u0027[{\"trait_type\": \"Activated\", \"value\":\u0027,\n      isActivated ? \u0027\"true\"\u0027 : \u0027\"false\"\u0027,\n      \u0027},{\"trait_type\": \"Fiefdom\", \"value\": \"0x\u0027,\n      toString(fiefdomAddr),\n      \u0027\"},{\"trait_type\": \"Founded At\", \"value\": \"\u0027,\n      foundedAt.toString(),\n      \u0027\"}]\u0027\n    );\n\n\n    bytes memory background = abi.encodePacked(\n      \u0027\u003crect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"\u0027, pColor,\u0027\"/\u003e\u0027,\n      \u0027\u003crect x=\"23.78px\" y=\"23.78px\" width=\"1141.44\" height=\"793.44px\" fill=\"none\" stroke=\"\u0027, sColor,\u0027\" stroke-width=\"2\"/\u003e\u0027\n    );\n\n    bytes memory textName = abi.encodePacked(\n      \u0027\u003ctext x=\"50%\" y=\"47%\" font-size=\"105px\" fill=\"\u0027,\n      sColor,\n      \u0027\" dominant-baseline=\"middle\" text-anchor=\"middle\"\u003e\u0027,\n      name,\n      \u0027\u003c/text\u003e\u0027\n    );\n\n    bytes memory textAddr = abi.encodePacked(\n      \u0027\u003ctext x=\"50%\" y=\"58%\" font-size=\"42px\" fill=\"\u0027, sColor,\u0027\" font-family=\"monospace\" dominant-baseline=\"middle\" text-anchor=\"middle\"\u003e0x\u0027,\n      toString(fiefdomAddr),\n      \u0027\u003c/text\u003e\u0027\n    );\n\n    bytes memory encodedImage = abi.encodePacked(\n      \u0027\"data:image/svg+xml;base64,\u0027,\n      Base64.encode(abi.encodePacked(\n        \u0027\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1189 841\"\u003e\u0027,\n        background,\n        textName,\n        textAddr,\n        \u0027\u003c/svg\u003e\u0027\n      )),\n      \u0027\",\u0027\n    );\n\n    bytes memory description = abi.encodePacked(\n      \u0027\"\u0027,\n      state,\n      \u0027 \u0027,\n      name,\n      \u0027 of 0x\u0027,\n      toString(fiefdomAddr),\n      \u0027\",\u0027\n    );\n\n    bytes memory json = abi.encodePacked(\n      \u0027data:application/json;utf8,\u0027,\n      \u0027{\"name\": \"\u0027, name,\u0027\",\u0027,\n      \u0027\"description\": \u0027, description,\n      \u0027\"external_url\": \"https://steviep.xyz/fiefdoms\",\u0027\n      \u0027\"image\": \u0027, encodedImage,\n      \u0027\"attributes\":\u0027, attributes,\n      \u0027}\u0027\n    );\n    return string(json);\n  }\n\n  function toString(address x) internal pure returns (string memory) {\n    bytes memory s = new bytes(40);\n    for (uint i = 0; i \u003c 20; i++) {\n      bytes1 b = bytes1(uint8(uint(uint160(x)) / (2**(8*(19 - i)))));\n      bytes1 hi = bytes1(uint8(b) / 16);\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n      s[2*i] = char(hi);\n      s[2*i+1] = char(lo);\n    }\n    return string(s);\n  }\n\n  function char(bytes1 b) internal pure returns (bytes1 c) {\n    if (uint8(b) \u003c 10) return bytes1(uint8(b) + 0x30);\n    else return bytes1(uint8(b) + 0x57);\n  }\n}\n"},"DefaultTokenURI.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./Dependencies.sol\";\nimport \"./Fiefdoms.sol\";\nimport \"./FiefdomArchetype.sol\";\n\ncontract DefaultTokenURI {\n  using Strings for uint256;\n\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\n    FiefdomArchetype fiefdom = FiefdomArchetype(msg.sender);\n\n\n    bytes memory name = abi.encodePacked(\u0027Fiefdom \u0027, fiefdom.fiefdomId().toString(), \u0027, Token \u0027, tokenId.toString());\n\n    bytes memory background = abi.encodePacked(\n      \u0027\u003crect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"#000\"/\u003e\u0027,\n      \u0027\u003crect x=\"23.78px\" y=\"23.78px\" width=\"1141.44\" height=\"793.44px\" fill=\"none\" stroke=\"#fff\" stroke-width=\"5\"/\u003e\u0027\n    );\n\n    bytes memory textFiefdom = abi.encodePacked(\n      \u0027\u003ctext x=\"50%\" y=\"38%\" class=\"t\"\u003e\u0027,\n      \u0027Fiefdom \u0027,\n      fiefdom.fiefdomId().toString(),\n      \u0027\u003c/text\u003e\u0027\n    );\n\n    bytes memory textToken = abi.encodePacked(\n      \u0027\u003ctext x=\"50%\" y=\"62%\" class=\"t\"\u003e\u0027,\n      \u0027Token \u0027,\n      tokenId.toString(),\n      \u0027\u003c/text\u003e\u0027\n    );\n\n    bytes memory encodedImage = abi.encodePacked(\n      \u0027\"data:image/svg+xml;base64,\u0027,\n      Base64.encode(abi.encodePacked(\n        \u0027\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1189 841\"\u003e\u003cstyle\u003e.t{font-size:160px;font-family:sans-serif;fill:#fff;dominant-baseline:middle;text-anchor:middle;}\u003c/style\u003e\u0027,\n        background,\n        textFiefdom,\n        textToken,\n        \u0027\u003c/svg\u003e\u0027\n      )),\n      \u0027\"\u0027\n    );\n\n\n    bytes memory json = abi.encodePacked(\n      \u0027data:application/json;utf8,\u0027,\n      \u0027{\"name\": \"\u0027, name,\u0027\",\u0027,\n      \u0027\"description\": \"The start of something new.\",\u0027,\n      \u0027\"image\": \u0027, encodedImage,\n      \u0027}\u0027\n    );\n    return string(json);\n  }\n}\n"},"Dependencies.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /*\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /*\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 =\u003e address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address =\u003e uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 =\u003e address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``\u0027s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``\u0027s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _burn(tokenId);\n    }\n}\n\n\n\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don\u0027t know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n\n\n/// [MIT License]\n/// @title Base64\n/// @notice Provides a function for encoding some bytes in base64\n/// @author Brecht Devos \u003cbrecht@loopring.org\u003e\nlibrary Base64 {\n    bytes internal constant TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /// @notice Encodes some bytes to the base64 representation\n    function encode(bytes memory data) internal pure returns (string memory) {\n        uint256 len = data.length;\n        if (len == 0) return \"\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((len + 2) / 3);\n\n        // Add some extra buffer at the end\n        bytes memory result = new bytes(encodedLen + 32);\n\n        bytes memory table = TABLE;\n\n        assembly {\n            let tablePtr := add(table, 1)\n            let resultPtr := add(result, 32)\n\n            for {\n                let i := 0\n            } lt(i, len) {\n\n            } {\n                i := add(i, 3)\n                let input := and(mload(add(data, i)), 0xffffff)\n\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\n                out := shl(8, out)\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\n                out := shl(224, out)\n\n                mstore(resultPtr, out)\n\n                resultPtr := add(resultPtr, 4)\n            }\n\n            switch mod(len, 3)\n            case 1 {\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n            }\n            case 2 {\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\n            }\n\n            mstore(result, encodedLen)\n        }\n\n        return string(result);\n    }\n}\n"},"ERC721Hooks.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./Dependencies.sol\";\n\ninterface IERC721Hooks {\n  function parent() external returns (address);\n  function beforeTokenTransfer(address from, address to, uint256 tokenId) external;\n  function beforeApprove(address to, uint256 tokenId) external;\n  function beforeSetApprovalForAll(address operator, bool approved) external;\n}\n\ncontract ERC721HooksBase is IERC721Hooks {\n  address public parent;\n\n  constructor(address _parent) {\n    parent = _parent;\n  }\n\n  modifier onlyParent() {\n    require(msg.sender == parent, \"Only parent ERC721 can call hooks\");\n    _;\n  }\n\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {}\n  function beforeTokenTransfer(address from, address to, uint256 tokenId) external onlyParent {\n    _beforeTokenTransfer(from, to, tokenId);\n  }\n\n  function _beforeApprove(address to, uint256 tokenId) internal virtual {}\n  function beforeApprove(address to, uint256 tokenId) external onlyParent {\n    _beforeApprove(to, tokenId);\n  }\n\n  function _beforeSetApprovalForAll(address operator, bool approved) internal virtual {}\n  function beforeSetApprovalForAll(address operator, bool approved) external onlyParent {\n    _beforeSetApprovalForAll(operator, approved);\n  }\n}"},"FiefdomArchetype.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\n ________  _____  ________  ________  ______      ___   ____    ____\n|_   __  ||_   _||_   __  ||_   __  ||_   _ `.  .\u0027   `.|_   \\  /   _|\n  | |_ \\_|  | |    | |_ \\_|  | |_ \\_|  | | `. \\/  .-.  \\ |   \\/   |\n  |  _|     | |    |  _| _   |  _|     | |  | || |   | | | |\\  /| |\n _| |_     _| |_  _| |__/ | _| |_     _| |_.\u0027 /\\  `-\u0027  /_| |_\\/_| |_\n|_____|   |_____||________||_____|   |______.\u0027  `.___.\u0027|_____||_____|\n      _       _______      ______  ____  ____  ________  _________  ____  ____  _______  ________\n     / \\     |_   __ \\   .\u0027 ___  ||_   ||   _||_   __  ||  _   _  ||_  _||_  _||_   __ \\|_   __  |\n    / _ \\      | |__) | / .\u0027   \\_|  | |__| |    | |_ \\_||_/ | | \\_|  \\ \\  / /    | |__) | | |_ \\_|\n   / ___ \\     |  __ /  | |         |  __  |    |  _| _     | |       \\ \\/ /     |  ___/  |  _| _\n _/ /   \\ \\_  _| |  \\ \\_\\ `.___.\u0027\\ _| |  | |_  _| |__/ |   _| |_      _|  |_    _| |_    _| |__/ |\n|____| |____||____| |___|`.____ .\u0027|____||____||________|  |_____|    |______|  |_____|  |________|\n\nby steviep.eth (2022)\n\n\nAll Fiefdom Proxy contracts inherit the behavior of the Fiefdom Archetype.\n\nUpon publication, a fiefdom contract will set a placeholder name and symbol, record the timestamp\nof its founding at, and will mint token #0 to itself.\n\nOwnership over the Fiefdom will follow the owner of the corresponding Vassal token, which is manage by\nthe Fiefdom Kingdom contract.\n\nAt any point, the Vassal owner may choose to activate the Fiefdom. This will set the contract\u0027s name,\nsymbol, license, max supply of tokens, tokenURI contract, and hooks contract. While name and symbol are fixed, maxSupply\nand tokenURIContract can be updated later. maxSupply and tokenURI can also be frozen by the Vassal owner. The passed hooks\ncontract address allows for the Vassal owner to define extra behavior that runs before transfers and approvals.\n\nThe Vassal owner will be the default minter of the contract, but can also set the minter to another\naddress. In practice, the minter will be a separate minting contract. The minter can mint tokens using\nany of three methods: mint, mintBatch, and mintBatchTo.\n\nIf set to 0x0, tokenURI logic will default to the default token URI contract set at the kingdom level. Otherwise,\nthe Fiefdom may freely change its token URI contract.\n\n*/\n\nimport \"./DefaultTokenURI.sol\";\nimport \"./BaseTokenURI.sol\";\nimport \"./ERC721Hooks.sol\";\nimport \"./Dependencies.sol\";\nimport \"./Fiefdoms.sol\";\n\npragma solidity ^0.8.17;\n\ninterface ITokenURI {\n  function tokenURI(uint256 tokenId) external view returns (string memory uri);\n}\n\n/// @title Fiefdom Archetype\n/// @author steviep.eth, julien.eth\n/// @notice ERC721 collection contract controlled by the vassal that holds its corresponding fiefdom token\ncontract FiefdomArchetype is ERC721Burnable {\n  using Strings for uint256;\n\n  /// @notice Main Fiefdoms contract address\n  Fiefdoms public kingdom;\n\n  /// @notice Called when tokens are minted, transferred, burned, and when approvals are set\n  /// @dev To use, extend the ERC721HooksBase contract, override the required virtual functions, deploy with this\n  ///      fiefdom contract\u0027s address set as its parent, and pass its address to activate()\n  IERC721Hooks public erc721Hooks;\n\n  /// @notice True after activate() has been called\n  bool public isActivated;\n\n  /// @notice True when token URI contract can no longer be changed\n  bool public tokenURIFrozen;\n\n  /// @notice True when max supply can no longer change\n  bool public maxSupplyFrozen;\n\n  /// @notice Address that is allowed to mint tokens\n  address public minter;\n\n  /// @notice ID of this fiefdom\n  uint256 public fiefdomId;\n\n  /// @notice License of project\n  string public license;\n\n  /// @notice Max supply of collection\n  uint256 public maxSupply;\n\n  /// @notice Timestamp when this contract was created\n  uint256 public foundedAt;\n\n  string private _name;\n  string private _symbol;\n  uint256 private _totalSupply;\n  bool private _isInitialized;\n  address private _royaltyBeneficiary;\n  uint16 private _royaltyBasisPoints;\n  address private _tokenURIContract;\n\n  /// @notice Arbitrary event emitted by contract owner\n  /// @param poster Address of initiator\n  /// @param eventType Type of event\n  /// @param content Content of event\n  event ProjectEvent(address indexed poster, string indexed eventType, string content);\n\n  /// @notice Arbitrary event related to a specific token emitted by contract owner or token holder\n  /// @param poster Address of initiator\n  /// @param tokenId ID of token\n  /// @param eventType Type of event\n  /// @param content Content of event\n  event TokenEvent(address indexed poster, uint256 indexed tokenId, string indexed eventType, string content);\n\n  /// @notice Emitted when a range of tokens has their metadata updated\n  /// @param _fromTokenId The first ID of the token in the range\n  /// @param _toTokenId The last ID of the token in the range\n  /// @dev See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n  /// @notice Emitted when a token\u0027s metadata is updated\n  /// @param _tokenId The ID of the updated token\n  /// @dev See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  event MetadataUpdate(uint256 _tokenId);\n\n  /// @dev This is only called when the first archetype contract is initially published\n  constructor() ERC721(\u0027\u0027, \u0027\u0027) {\n    initialize(msg.sender, 0);\n  }\n\n  /// @notice Initializes contract by minting token 0 to itself and setting a default name and symbol\n  /// @param _kingdom Address of the main Fiefdoms contract\n  /// @param _fiefdomId Token ID of this fiefdom\n  /// @dev Called by the proxy contract immediately after a copy of this contract is published\n  function initialize(address _kingdom, uint256 _fiefdomId) public {\n    require(!_isInitialized, \"Can\u0027t initialize more than once\");\n    _isInitialized = true;\n\n    // Since constructor is not called (or called the first time with empty values)\n    _name = string(abi.encodePacked(\u0027Fiefdom \u0027, _fiefdomId.toString()));\n    _symbol = string(abi.encodePacked(\u0027FIEF\u0027, _fiefdomId.toString()));\n    kingdom = Fiefdoms(_kingdom);\n    fiefdomId = _fiefdomId;\n    foundedAt = block.timestamp;\n\n    _totalSupply = 1;\n    _mint(address(this), 0);\n  }\n\n  /// @notice Instantiates the collection beyond the 0th mint and sends the 0th token to the caller\n  /// @param name_ Name to be set on collection\n  /// @param symbol_ Symbol to be set on collection\n  /// @param license_ License to be set on project\n  /// @param maxSupply_ Max supply to be set on collection\n  /// @param tokenURIContract_ Contract used to return metadata for each token (optional)\n  /// @param erc721Hooks_ Contract called when tokens are minted, transferred, burned, and when approvals are set (optional)\n  function activate(\n    string memory name_,\n    string memory symbol_,\n    string memory license_,\n    uint256 maxSupply_,\n    address tokenURIContract_,\n    address erc721Hooks_\n  ) public onlyOwner {\n    // Require that it can only be called once\n    require(!isActivated, \"Fiefdom has already been activated\");\n\n    // Set the name/symbol\n    _name = name_;\n    _symbol = symbol_;\n\n    // Set the max token supply\n    maxSupply = maxSupply_;\n\n    // Set the defailt minter address + ERC2981 royalty beneficiary\n    minter = msg.sender;\n    _royaltyBeneficiary = msg.sender;\n    _royaltyBasisPoints = 1000;\n\n    // Set the tokenURI contract\n    _tokenURIContract = tokenURIContract_;\n\n    license = license_;\n    isActivated = true;\n\n    // Recover the 0th token\n    _transfer(address(this), msg.sender, 0);\n    emit MetadataUpdate(0);\n    kingdom.activation(fiefdomId);\n\n    // Set hooks if contract address provided\n    if (address(erc721Hooks_) != address(0)) {\n      erc721Hooks = IERC721Hooks(erc721Hooks_);\n      require(erc721Hooks.parent() == address(this), \"Passed ERC721Hooks contract is not configured for this Fiefdom\");\n    }\n  }\n\n  // HOOKS\n\n  /// @notice Register calls to erc721Hooks on transfers (including mints and burns)\n  /// @param from Address of sender (zero when being minted)\n  /// @param to Address of receiver (zero when burning)\n  /// @param tokenId ID of token being transferred (or minted or burned)\n  function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n    if (address(erc721Hooks) != address(0)) erc721Hooks.beforeTokenTransfer(from, to, tokenId);\n  }\n\n  /// @notice Register calls to erc721Hooks on token approvals\n  /// @param to Address to be approved\n  /// @param tokenId ID of token being approved of\n  function approve(address to, uint256 tokenId) public virtual override {\n    if (address(erc721Hooks) != address(0)) erc721Hooks.beforeApprove(to, tokenId);\n    super.approve(to, tokenId);\n  }\n\n  /// @notice Register calls to erc721Hooks on operator approvals\n  /// @param operator Address of operator\n  /// @param approved True when operator is being approved, false when approval is being revoked\n  function setApprovalForAll(address operator, bool approved) public virtual override {\n    if (address(erc721Hooks) != address(0)) erc721Hooks.beforeSetApprovalForAll(operator, approved);\n    super.setApprovalForAll(operator, approved);\n  }\n\n\n  // OWNERSHIP\n\n  /// @notice Emitted when fiefdom token is transferred to a new owner\n  /// @param previousOwner Previous owner of fiefdom token\n  /// @param newOwner New owner of fiefdom token\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /// @notice Contract owner\n  /// @dev The owner of this contract is the owner of the corresponding fiefdom token\n  function owner() public view virtual returns (address) {\n    return kingdom.ownerOf(fiefdomId);\n  }\n\n  modifier onlyOwner() {\n    require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n    _;\n  }\n\n  /// @notice Notes a transfer in contract ownership\n  /// @param previousOwner Previous owner of fiefdom token\n  /// @param newOwner New owner of fiefdom token\n  /// @dev Called by Fiefdoms whenever the corresponding fiefdom token is traded\n  function transferOwnership(address previousOwner, address newOwner) external {\n    require(msg.sender == address(kingdom), \u0027Ownership can only be transferred by the kingdom\u0027);\n    emit OwnershipTransferred(previousOwner, newOwner);\n  }\n\n  // VARIABLES\n\n  // BASE FUNCTIONALITY\n\n  /// @notice Current total supply of collection\n  /// @return Total supply\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /// @notice Checks if given token ID exists\n  /// @param tokenId Token to run existence check on\n  /// @return True if token exists\n  function exists(uint256 tokenId) external view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  /// @notice Name of collection\n  /// @return Name\n  function name() public view virtual override(ERC721) returns (string memory) {\n   return  _name;\n  }\n\n  /// @notice Symbol of collection\n  /// @return Symbol\n  function symbol() public view virtual override(ERC721) returns (string memory) {\n    return _symbol;\n  }\n\n  // MINTING\n\n  /// @notice Mints a new token\n  /// @param to Address to receive new token\n  /// @param tokenId ID of new token\n  function mint(address to, uint256 tokenId) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(_totalSupply \u003c maxSupply, \u0027Cannot create more tokens\u0027);\n\n    _mint(to, tokenId);\n    _totalSupply += 1;\n  }\n\n  /// @notice Mints one new token to each provided address\n  /// @param to Addresses to each receive one new token\n  /// @param tokenIdStart ID of first new token\n  function mintBatch(address[] calldata to, uint256 tokenIdStart) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n\n    uint256 amount = to.length;\n    require(_totalSupply + amount \u003c= maxSupply, \u0027Cannot create more tokens\u0027);\n\n    for (uint256 i; i \u003c amount; i++) {\n      _mint(to[i], tokenIdStart + i);\n      _totalSupply++;\n    }\n  }\n\n  /// @notice Mints a batch of new tokens to a single address\n  /// @param to Address to receive all new tokens\n  /// @param amount Amount of tokens to mint\n  /// @param tokenIdStart ID of first new token\n  function mintBatchTo(address to, uint256 amount, uint256 tokenIdStart) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(_totalSupply + amount \u003c= maxSupply, \u0027Cannot create more tokens\u0027);\n\n    for (uint256 i; i \u003c amount; i++) {\n      _mint(to, tokenIdStart + i);\n      _totalSupply++;\n    }\n  }\n\n  /// @notice Token URI\n  /// @param tokenId Token ID to look up URI of\n  /// @return Token URI\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    return ITokenURI(tokenURIContract()).tokenURI(tokenId);\n  }\n\n  /// @notice Address of Token URI contract\n  /// @return Address of custom Token URI contract if set, otherwise the Kingdom\u0027s default\n  function tokenURIContract() public view returns (address) {\n    return _tokenURIContract == address(0)\n      ? kingdom.defaultTokenURIContract()\n      : _tokenURIContract;\n  }\n\n  // Contract owner actions\n\n  /// @notice Sets a custom Token URI contract\n  /// @param tokenURIContract_ Address of Token URI contract to set\n  function setTokenURIContract(address tokenURIContract_) external onlyOwner {\n    require(!tokenURIFrozen, \u0027Token URI has been frozen\u0027);\n    _tokenURIContract = tokenURIContract_;\n    emit BatchMetadataUpdate(0, _totalSupply);\n  }\n\n  /// @notice Disallow changes to Token URI contract address\n  function freezeTokenURI() external onlyOwner {\n    require(isActivated, \u0027Fiefdom must be activated\u0027);\n    tokenURIFrozen = true;\n  }\n\n  /// @notice Sets the max supply of the collection\n  /// @param newMaxSupply Max supply to set\n  function setMaxSupply(uint256 newMaxSupply) external onlyOwner {\n    require(isActivated, \u0027Fiefdom must be activated\u0027);\n    require(newMaxSupply \u003e= _totalSupply, \u0027maxSupply must be \u003e= than totalSupply\u0027);\n    require(!maxSupplyFrozen, \u0027maxSupply has been frozen\u0027);\n    maxSupply = newMaxSupply;\n  }\n\n  /// @notice Disallow changes to max supply\n  function freezeMaxSupply() external onlyOwner {\n    require(isActivated, \u0027Fiefdom must be activated\u0027);\n    maxSupplyFrozen = true;\n  }\n\n  /// @notice Sets the license of the project\n  /// @param newLicense License\n  function setLicense(string calldata newLicense) external onlyOwner {\n    license = newLicense;\n  }\n\n  /// @notice Sets minter address\n  /// @param newMinter Minter address to set\n  function setMinter(address newMinter) external onlyOwner {\n    minter = newMinter;\n  }\n\n  /// @notice Sets royalty info for the collection\n  /// @param royaltyBeneficiary Address to receive royalties\n  /// @param royaltyBasisPoints Basis points of royalty commission\n  /// @dev See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  function setRoyaltyInfo(\n    address royaltyBeneficiary,\n    uint16 royaltyBasisPoints\n  ) external onlyOwner {\n    _royaltyBeneficiary = royaltyBeneficiary;\n    _royaltyBasisPoints = royaltyBasisPoints;\n  }\n\n  /// @notice Called with the sale price to determine how much royalty is owed and to whom.\n  /// @param (unused)\n  /// @param _salePrice The sale price of the NFT asset specified by _tokenId\n  /// @return receiver Address of who should be sent the royalty payment\n  /// @return royaltyAmount The royalty payment amount for _salePrice\n  /// @dev See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  function royaltyInfo(uint256, uint256 _salePrice) external view returns (address, uint256) {\n    return (_royaltyBeneficiary, _salePrice * _royaltyBasisPoints / 10000);\n  }\n\n  /// @notice Query if a contract implements an interface\n  /// @param interfaceId The interface identifier, as specified in ERC-165\n  /// @return `true` if the contract implements `interfaceId` and\n  ///         `interfaceId` is not 0xffffffff, `false` otherwise\n  /// @dev Interface identification is specified in ERC-165. This function\n  ///      uses less than 30,000 gas. See: https://eips.ethereum.org/EIPS/eip-165\n  ///      See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  ///      See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n    // ERC2981 \u0026 ERC4906\n    return interfaceId == bytes4(0x2a55205a) || interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n  }\n\n  // Events\n\n  /// @notice Emit an arbitrary event related to a token\n  /// @param tokenId ID of the token this event is related to\n  /// @param eventType Type of event to emit\n  /// @param content Text to be included in event\n  /// @dev Can be called either by contract owner or token holder\n  function emitTokenEvent(uint256 tokenId, string calldata eventType, string calldata content) external {\n    require(\n      owner() == msg.sender || ERC721.ownerOf(tokenId) == msg.sender,\n      \u0027Only project or token owner can emit token event\u0027\n    );\n    emit TokenEvent(msg.sender, tokenId, eventType, content);\n  }\n\n  /// @notice Emit an arbitrary event related to the project\n  /// @param eventType Type of event to emit\n  /// @param content Text to be included in event\n  /// @dev Can only be called either by contract owner\n  function emitProjectEvent(string calldata eventType, string calldata content) external onlyOwner {\n    emit ProjectEvent(msg.sender, eventType, content);\n  }\n}\n"},"FiefdomProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./Dependencies.sol\";\nimport \"./Fiefdoms.sol\";\n\n\ncontract FiefdomProxy is Proxy {\n  bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  struct AddressSlot {\n    address value;\n  }\n\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n    assembly {\n      r.slot := slot\n    }\n  }\n\n  function _implementation() internal override view returns (address) {\n    return getAddressSlot(_IMPLEMENTATION_SLOT).value;\n  }\n\n  function implementation() public view returns (address) {\n    return _implementation();\n  }\n\n  // Defer all functionality to the given archetype contract\n  constructor() {\n    address fiefdomArchetype = Fiefdoms(msg.sender).fiefdomArchetype();\n    uint256 fiefdomId = Fiefdoms(msg.sender).totalSupply();\n    getAddressSlot(_IMPLEMENTATION_SLOT).value = fiefdomArchetype;\n\n    // Invoke the preInitialize function on itself, as defined by the archetype contract\n    Address.functionDelegateCall(\n        fiefdomArchetype,\n        abi.encodeWithSignature(\"initialize(address,uint256)\", msg.sender, fiefdomId),\n        \"Address: low-level delegate call failed\"\n    );\n  }\n}\n"},"Fiefdoms.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/*\n ________  _____  ________  ________  ______      ___   ____    ____\n|_   __  ||_   _||_   __  ||_   __  ||_   _ `.  .\u0027   `.|_   \\  /   _|\n  | |_ \\_|  | |    | |_ \\_|  | |_ \\_|  | | `. \\/  .-.  \\ |   \\/   |\n  |  _|     | |    |  _| _   |  _|     | |  | || |   | | | |\\  /| |\n _| |_     _| |_  _| |__/ | _| |_     _| |_.\u0027 /\\  `-\u0027  /_| |_\\/_| |_\n|_____|   |_____||________||_____|   |______.\u0027  `.___.\u0027|_____||_____|\n ___  ____   _____  ____  _____   ______  ______      ___   ____    ____\n|_  ||_  _| |_   _||_   \\|_   _|.\u0027 ___  ||_   _ `.  .\u0027   `.|_   \\  /   _|\n  | |_/ /     | |    |   \\ | | / .\u0027   \\_|  | | `. \\/  .-.  \\ |   \\/   |\n  |  __\u0027.     | |    | |\\ \\| | | |   ____  | |  | || |   | | | |\\  /| |\n _| |  \\ \\_  _| |_  _| |_\\   |_\\ `.___]  |_| |_.\u0027 /\\  `-\u0027  /_| |_\\/_| |_\n|____||____||_____||_____|\\____|`._____.\u0027|______.\u0027  `.___.\u0027|_____||_____|\n\nby steviep.eth (2022)\n\n\nThe Fiefdoms Kingdom is an ERC721 collection of 721 Vassal tokens.\n\nEach Vassal token gives the token holder ownership over a separate, unique ERC721\ncontract (a \"Fiefdom\").\n\nTransferring a Vassal token will also transfer ownership over that Fiefdom.\n\nMinting a Vassal token will create a proxy contract, which inherits all of its behavior\nfrom the Fiefdom Archetype.\n\nVassal #0 controls the domain of the Fiefdom Archetype directly.\n\nFiefdoms may collect own royalties without restriction on all tokens within their domain,\nbut Vassal tokens are subject to the strict trading rules of the broader kingdom.\n\n*/\n\nimport \"./Dependencies.sol\";\nimport \"./BaseTokenURI.sol\";\nimport \"./DefaultTokenURI.sol\";\nimport \"./FiefdomProxy.sol\";\nimport \"./FiefdomArchetype.sol\";\n\npragma solidity ^0.8.17;\n\n/// @title Fiefdoms\n/// @author steviep.eth, julien.eth\n/// @notice ERC721 collection contract where ownership of a token grants the tooken holder ownership over a Fiefdom contract\ncontract Fiefdoms is ERC721, Ownable {\n  /// @notice License of Fiefdoms parent project - Does not pertain to the license of any tokens minted by Fiefdom contracts\n  string public license = \u0027CC0\u0027;\n\n  /// @notice Address that is permissioned to mint new tokens\n  address public minter;\n\n  /// @notice Address of the default tokenURI contract used by fiefdoms for mint 0\n  address public fiefdomArchetype;\n\n  /// @notice Address of the default tokenURI contract used by fiefdoms for mint 0\n  address public defaultTokenURIContract;\n\n  /// @notice True when only operators on the allow list may be approved\n  bool public useOperatorAllowList = true;\n\n  /// @notice Max supply of collection\n  uint256 public constant maxSupply = 721;\n\n  /// @notice Mapping from vassal\u0027s token id to fiefdom address\n  mapping(uint256 =\u003e address) public tokenIdToFiefdom;\n\n  /// @notice Allow lise of all operators allowed t\n  mapping(address =\u003e bool) public operatorAllowList;\n\n  BaseTokenURI private _tokenURIContract;\n  uint256 private _totalSupply = 1;\n  address private _royaltyBeneficiary;\n  uint16 private _royaltyBasisPoints = 1000;\n\n  /// @notice Arbitrary event emitted by contract owner\n  /// @param poster Address of initiator\n  /// @param eventType Type of event\n  /// @param content Content of event\n  event ProjectEvent(address indexed poster, string indexed eventType, string content);\n\n  /// @notice Arbitrary event related to a specific token emitted by contract owner or token holder\n  /// @param poster Address of initiator\n  /// @param tokenId ID of token\n  /// @param eventType Type of event\n  /// @param content Content of event\n  event TokenEvent(address indexed poster, uint256 indexed tokenId, string indexed eventType, string content);\n\n  /// @notice Emitted when a range of tokens has their metadata updated\n  /// @param _fromTokenId The first ID of the token in the range\n  /// @param _toTokenId The last ID of the token in the range\n  /// @dev See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n\n  /// @notice Emitted when a token\u0027s metadata is updated\n  /// @param _tokenId The ID of the updated token\n  /// @dev See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  event MetadataUpdate(uint256 _tokenId);\n\n  /// @notice Emitted when a fiefdom is first activated\n  /// @param fiefdom The ID of the fiefdom being activated\n  event Activation(uint256 fiefdom);\n\n  // SETUP\n\n  /// @dev Sets base variables, mints token #0 to the deployer, and publishes the FiefdomArchetype contract\n  constructor() ERC721(\u0027Fiefdoms\u0027, \u0027FIEF\u0027) {\n    minter = msg.sender;\n    _royaltyBeneficiary = msg.sender;\n    _tokenURIContract = new BaseTokenURI();\n    defaultTokenURIContract = address(new DefaultTokenURI());\n\n    // Publish an archetype contract. All proxy contracts will derive its functionality from this\n    fiefdomArchetype = address(new FiefdomArchetype());\n\n    // Token 0 will use the archetype contract directly instead of a proxy\n    _mint(msg.sender, 0);\n\n    tokenIdToFiefdom[0] = fiefdomArchetype;\n  }\n\n\n  // BASE FUNCTIONALITY\n\n  /// @notice Current total supply of collection\n  /// @return Total supply\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /// @notice Checks if given token ID exists\n  /// @param tokenId Token to run existence check on\n  /// @return True if token exists\n  function exists(uint256 tokenId) external view returns (bool) {\n    return _exists(tokenId);\n  }\n\n  /// @notice Alias of Fiefdoms contract owner\n  function overlord() external view returns (address) {\n    return owner();\n  }\n\n  /// @dev Override\u0027s the default _transfer function to also transfer ownership over the corresponding fiefdom\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual override {\n    // When this token is transferred, also transfer ownership over its fiefdom\n    FiefdomArchetype(tokenIdToFiefdom[tokenId]).transferOwnership(from, to);\n    return super._transfer(from, to, tokenId);\n  }\n\n  /// @notice Emits Activation and MetadataUpdate events upon fiefdom activation\n  /// @param tokenId Token Id of fiefdom being activated\n  /// @dev This can only be called by the fiefdom upon its activation\n  function activation(uint256 tokenId) external {\n    require(tokenIdToFiefdom[tokenId] == msg.sender);\n    emit MetadataUpdate(tokenId);\n    emit Activation(tokenId);\n  }\n\n  // MINTING\n\n  /// @notice Mints a new token\n  /// @param to Address to receive new token\n  function mint(address to) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(_totalSupply \u003c maxSupply, \u0027Cannot create more fiefdoms\u0027);\n\n    _mint(to, _totalSupply);\n\n    // Publish a new proxy contract for this token\n    FiefdomProxy proxy = new FiefdomProxy();\n    tokenIdToFiefdom[_totalSupply] = address(proxy);\n\n    _totalSupply += 1;\n  }\n\n  /// @notice Mints a batch of new tokens to a single address\n  /// @param to Address to receive all new tokens\n  /// @param amount Amount of tokens to mint\n  function mintBatch(address to, uint256 amount) external {\n    require(minter == msg.sender, \u0027Caller is not the minting address\u0027);\n    require(_totalSupply + amount \u003c= maxSupply, \u0027Cannot create more fiefdoms\u0027);\n\n    for (uint256 i; i \u003c amount; i++) {\n      _mint(to, _totalSupply);\n      FiefdomProxy proxy = new FiefdomProxy();\n      tokenIdToFiefdom[_totalSupply] = address(proxy);\n      _totalSupply++;\n    }\n  }\n\n  /// @notice Reassigns the minter permission\n  /// @param newMinter Address of new minter\n  function setMinter(address newMinter) external onlyOwner {\n    minter = newMinter;\n  }\n\n  // ROYALTIES\n  // Fiefdoms may collect their own royalties without restriction, but must follow the rules of the broader kingdom\n\n  /// @notice Override the standard approve function to revert if approving an un-ALed operator\n  /// @param to Address of operator\n  /// @param tokenId Id of token to approve\n  function approve(address to, uint256 tokenId) public virtual override {\n    if (useOperatorAllowList) require(operatorAllowList[to], \u0027Operator must be on Allow List\u0027);\n    super.approve(to, tokenId);\n  }\n\n  /// @notice Override the standard setApprovalForAll function to revert if approving an un-ALed operator\n  /// @param operator Address of operator\n  /// @param approved Approval status of operator\n  function setApprovalForAll(address operator, bool approved) public virtual override {\n    if (useOperatorAllowList \u0026\u0026 approved) require(operatorAllowList[operator], \u0027Operator must be on Allow List\u0027);\n    super.setApprovalForAll(operator, approved);\n  }\n\n  /// @notice Override the standard getApproved function to return false for un-ALed operators\n  /// @param tokenId Id of token\n  function getApproved(uint256 tokenId) public view virtual override returns (address) {\n    address operator = super.getApproved(tokenId);\n    if (useOperatorAllowList) {\n      return operatorAllowList[operator] ? operator : address(0);\n    } else {\n      return operator;\n    }\n  }\n\n  /// @notice Override the standard isApprovedForAll function to return false for un-ALed operators\n  /// @param owner Address of owner\n  /// @param operator Address of operator\n  function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n    if (useOperatorAllowList \u0026\u0026 !operatorAllowList[operator]) {\n      return false;\n    } else {\n      return super.isApprovedForAll(owner, operator);\n    }\n  }\n\n  /// @notice Denotes whether an operator allow list should be used\n  /// @param _useOperatorAllowList New useOperatorAllowList value\n  function updateUseOperatorAllowList(bool _useOperatorAllowList) external onlyOwner {\n    useOperatorAllowList = _useOperatorAllowList;\n  }\n\n  /// @notice Update the allow list status of a single operator\n  /// @param operator Address of operator\n  /// @param allowListStatus New allow list status\n  function updateOperatorAllowList(address operator, bool allowListStatus) external onlyOwner {\n    operatorAllowList[operator] = allowListStatus;\n  }\n\n  /// @notice Sets royalty info for the collection\n  /// @param royaltyBeneficiary Address to receive royalties\n  /// @param royaltyBasisPoints Basis points of royalty commission\n  /// @dev See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  function setRoyaltyInfo(\n    address royaltyBeneficiary,\n    uint16 royaltyBasisPoints\n  ) external onlyOwner {\n    _royaltyBeneficiary = royaltyBeneficiary;\n    _royaltyBasisPoints = royaltyBasisPoints;\n  }\n\n  /// @notice Called with the sale price to determine how much royalty is owed and to whom.\n  /// @param (unused)\n  /// @param _salePrice The sale price of the NFT asset specified by _tokenId\n  /// @return receiver Address of who should be sent the royalty payment\n  /// @return royaltyAmount The royalty payment amount for _salePrice\n  /// @dev See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  function royaltyInfo(uint256, uint256 _salePrice) external view returns (address, uint256) {\n    return (_royaltyBeneficiary, _salePrice * _royaltyBasisPoints / 10000);\n  }\n\n  /// @notice Query if a contract implements an interface\n  /// @param interfaceId The interface identifier, as specified in ERC-165\n  /// @return `true` if the contract implements `interfaceId` and\n  ///         `interfaceId` is not 0xffffffff, `false` otherwise\n  /// @dev Interface identification is specified in ERC-165. This function\n  ///      uses less than 30,000 gas. See: https://eips.ethereum.org/EIPS/eip-165\n  ///      See EIP-2981: https://eips.ethereum.org/EIPS/eip-2981\n  ///      See EIP-4906: https://eips.ethereum.org/EIPS/eip-4906\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\n    // ERC2981 \u0026 ERC4906\n    return interfaceId == bytes4(0x2a55205a) || interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n  }\n\n\n  // TOKEN URI\n\n  /// @notice Token URI\n  /// @param tokenId Token ID to look up URI of\n  /// @return Token URI\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n    return _tokenURIContract.tokenURI(tokenId);\n  }\n\n  /// @notice Set the Token URI contract for Vassal tokens\n  /// @param _tokenURIAddress New address of Token URI contract\n  function setTokenURIContract(address _tokenURIAddress) external onlyOwner {\n    _tokenURIContract = BaseTokenURI(_tokenURIAddress);\n    emit BatchMetadataUpdate(0, _totalSupply);\n  }\n\n  /// @notice Set the default Token URI contract for all Fiefdoms in the Kingdom\n  /// @param newDefault Address of the new default Token URI contract\n  function setDefaultTokenURIContract(address newDefault) external onlyOwner {\n    defaultTokenURIContract = newDefault;\n  }\n\n  /// @notice Address of Token URI contract\n  /// @return Address of the Token URI contract\n  function tokenURIContract() external view returns (address) {\n    return address(_tokenURIContract);\n  }\n\n  // EVENTS\n\n  /// @notice Emit an arbitrary event related to a token\n  /// @param tokenId ID of the token this event is related to\n  /// @param eventType Type of event to emit\n  /// @param content Text to be included in event\n  /// @dev Can be called either by contract owner or token holder\n  function emitTokenEvent(uint256 tokenId, string calldata eventType, string calldata content) external {\n    require(\n      owner() == msg.sender || ERC721.ownerOf(tokenId) == msg.sender,\n      \u0027Only project or token owner can emit token event\u0027\n    );\n    emit TokenEvent(msg.sender, tokenId, eventType, content);\n  }\n\n  /// @notice Emit an arbitrary event related to the project\n  /// @param eventType Type of event to emit\n  /// @param content Text to be included in event\n  /// @dev Can only be called either by contract owner\n  function emitProjectEvent(string calldata eventType, string calldata content) external onlyOwner {\n    emit ProjectEvent(msg.sender, eventType, content);\n  }\n}\n\n"}}