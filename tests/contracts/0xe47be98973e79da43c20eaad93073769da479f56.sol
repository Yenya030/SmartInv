{{
  "language": "Solidity",
  "sources": {
    "/contracts/NFTPreSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// Developed by itxToledo\r\n\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\n/**\r\n * @notice Represents MetaGodsERC721 Smart Contract\r\n */\r\ncontract IMetaGodsERC721 {\r\n    /**\r\n     * @dev ERC-721 INTERFACE\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {}\r\n\r\n    /**\r\n     * @dev CUSTOM INTERFACE\r\n     */\r\n    function mintTo(uint256 amount, address _to) external {}\r\n\r\n    function maxMintPerTransaction() public returns (uint256) {}\r\n}\r\n\r\n/**\r\n * @title NFTPreSaleContract.\r\n *\r\n * @author itxToledo\r\n *\r\n * @notice This Smart Contract can be used to sell any fixed amount of NFTs where only permissioned\r\n * wallets are allowed to buy. Buying is limited to a certain time period.\r\n *\r\n * @dev The primary mode of verifying permissioned actions is through Merkle Proofs\r\n * which are generated off-chain.\r\n */\r\ncontract NFTPreSale is Ownable {\r\n    /**\r\n     * @notice The Smart Contract of the NFT being sold\r\n     * @dev ERC-721 Smart Contract\r\n     */\r\n    IMetaGodsERC721 public immutable nft;\r\n\r\n    /**\r\n     * @dev MINT DATA\r\n     */\r\n    uint256 public publicMintPrice = 0.0888 * 1e16;\r\n    uint256 public publicMaxMintPerWallet = 2;\r\n    bool public isPublicSale = false;\r\n\r\n    uint256 public maxSupply = 888;\r\n    uint256 public minted = 0;\r\n\r\n    mapping(address => uint256) public addressToMints;\r\n\r\n    /**\r\n     * @dev MERKLE ROOTS\r\n     */\r\n    bytes32 public merkleRoot = \"\";\r\n\r\n    /**\r\n     * @dev Events\r\n     */\r\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\r\n    event Purchase(address indexed buyer, uint256 indexed amount);\r\n    event setMaxSupplyEvent(uint256 indexed maxSupply);\r\n    event setMerkleRootEvent(bytes32 indexed merkleRoot);\r\n    event WithdrawAllEvent(address indexed to, uint256 amount);\r\n    event setPublicMintPriceEvent(uint256 indexed publicMintPrice);\r\n    event setPublicMaxMintPerWalletEvent(\r\n        uint256 indexed publicMaxMintPerWallet\r\n    );\r\n    event setIsPublicSaleEvent(bool indexed isPublicSale);\r\n\r\n    constructor(address _nftaddress) Ownable() {\r\n        nft = IMetaGodsERC721(_nftaddress);\r\n    }\r\n\r\n    /**\r\n     * @dev SALE\r\n     */\r\n\r\n    modifier canMint(uint256 amount) {\r\n        require(address(nft) != address(0), \"NFT SMART CONTRACT NOT SET\");\r\n        require(amount > 0, \"HAVE TO BUY AT LEAST 1\");\r\n        require(\r\n            amount <= nft.maxMintPerTransaction(),\r\n            \"CANNOT MINT MORE PER TX\"\r\n        );\r\n        require(\r\n            minted + amount <= maxSupply,\r\n            \"MINT AMOUNT GOES OVER MAX SUPPLY\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Updates contract variables and mints `amount` NFTs to users wallet\r\n    function computeNewPurchase(uint256 amount) internal {\r\n        minted += amount;\r\n        addressToMints[msg.sender] += amount;\r\n        nft.mintTo(amount, msg.sender);\r\n\r\n        emit Purchase(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to buy one or more NFTs.\r\n     * @dev First the Merkle Proof is verified.\r\n     * Then the mint is verified with the data embedded in the Merkle Proof.\r\n     * Finally the NFTs are minted to the user's wallet.\r\n     *\r\n     * @param amount. The amount of NFTs to buy.\r\n     * @param mintStart. The start date of the mint.\r\n     * @param mintEnd. The end date of the mint.\r\n     * @param mintPrice. The mint price for the user.\r\n     * @param mintMaxAmount. The max amount the user can mint.\r\n     * @param proof. The Merkle Proof of the user.\r\n     */\r\n    function buy(\r\n        uint256 amount,\r\n        uint256 mintStart,\r\n        uint256 mintEnd,\r\n        uint256 mintPrice,\r\n        uint256 mintMaxAmount,\r\n        bytes32[] calldata proof\r\n    ) external payable canMint(amount) {\r\n        /// @dev Verifies Merkle Proof submitted by user.\r\n        /// @dev All mint data is embedded in the merkle proof.\r\n\r\n        bytes32 leaf = keccak256(\r\n            abi.encodePacked(\r\n                msg.sender,\r\n                mintStart,\r\n                mintEnd,\r\n                mintPrice,\r\n                mintMaxAmount\r\n            )\r\n        );\r\n        require(MerkleProof.verify(proof, merkleRoot, leaf), \"INVALID PROOF\");\r\n\r\n        /// @dev Verifies that user can mint based on the provided parameters.\r\n\r\n        require(merkleRoot != \"\", \"PERMISSIONED SALE CLOSED\");\r\n\r\n        require(block.timestamp >= mintStart, \"SALE HASN'T STARTED YET\");\r\n        require(block.timestamp < mintEnd, \"SALE IS CLOSED\");\r\n\r\n        require(\r\n            addressToMints[_msgSender()] + amount <= mintMaxAmount,\r\n            \"MINT AMOUNT EXCEEDS MAX FOR USER\"\r\n        );\r\n\r\n        require(msg.value == mintPrice * amount, \"ETHER SENT NOT CORRECT\");\r\n\r\n        computeNewPurchase(amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Function to buy one or more NFTs in public sale.\r\n     * @param amount. The amount of NFTs to buy.\r\n     */\r\n    function publicBuy(uint256 amount) external payable canMint(amount) {\r\n        require(isPublicSale == true, \"PUBLIC SALE IS DISABLED\");\r\n        require(\r\n            msg.value == publicMintPrice * amount,\r\n            \"ETHER SENT NOT CORRECT\"\r\n        );\r\n\r\n        require(\r\n            addressToMints[_msgSender()] + amount <= publicMaxMintPerWallet,\r\n            \"MINT AMOUNT EXCEEDS MAX FOR USER\"\r\n        );\r\n\r\n        computeNewPurchase(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev OWNER ONLY\r\n     */\r\n\r\n    /**\r\n     * @notice Change the maximum supply of NFTs that are for sale.\r\n     *\r\n     * @param newMaxSupply. The new max supply.\r\n     */\r\n    function setMaxSupply(uint256 newMaxSupply) external onlyOwner {\r\n        maxSupply = newMaxSupply;\r\n        emit setMaxSupplyEvent(newMaxSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the merkleRoot of the sale.\r\n     *\r\n     * @param newRoot. The new merkleRoot.\r\n     */\r\n    function setMerkleRoot(bytes32 newRoot) external onlyOwner {\r\n        merkleRoot = newRoot;\r\n        emit setMerkleRootEvent(newRoot);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the public mint price per NFT.\r\n     *\r\n     * @param newPublicMintPrice. The new public mint price per NFT.\r\n     */\r\n    function setPublicMintPrice(uint256 newPublicMintPrice) external onlyOwner {\r\n        publicMintPrice = newPublicMintPrice;\r\n        emit setPublicMintPriceEvent(publicMintPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the public max mint amount per user.\r\n     *\r\n     * @param newPublicMaxMintPerWallet. The new public max mint amount per user.\r\n     */\r\n    function setPublicMaxMintPerWallet(uint256 newPublicMaxMintPerWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        publicMaxMintPerWallet = newPublicMaxMintPerWallet;\r\n        emit setPublicMaxMintPerWalletEvent(newPublicMaxMintPerWallet);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the public sale state.\r\n     *\r\n     * @param newIsPublicSale. The new public sale state.\r\n     */\r\n    function setIsPublicSale(bool newIsPublicSale) external onlyOwner {\r\n        isPublicSale = newIsPublicSale;\r\n        emit setIsPublicSaleEvent(newIsPublicSale);\r\n    }\r\n\r\n    /**\r\n     * @dev FINANCE\r\n     */\r\n\r\n    /**\r\n     * @notice Allows owner to withdraw funds generated from sale.\r\n     *\r\n     * @param _to. The address to send the funds to.\r\n     */\r\n    function withdrawAll(address _to) external onlyOwner {\r\n        require(_to != address(0), \"CANNOT WITHDRAW TO ZERO ADDRESS\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n\r\n        require(contractBalance > 0, \"NO ETHER TO WITHDRAW\");\r\n\r\n        payable(_to).transfer(contractBalance);\r\n\r\n        emit WithdrawAllEvent(_to, contractBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function for receiving Ether\r\n     */\r\n    receive() external payable {\r\n        emit ReceivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}