{{
  "language": "Solidity",
  "sources": {
    "contracts/router/ReservoirV5_0_0.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport {ExchangeKind} from \"./interfaces/IExchangeKind.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\n\nimport {IFoundation} from \"./interfaces/IFoundation.sol\";\nimport {ILooksRare, ILooksRareTransferSelectorNFT} from \"./interfaces/ILooksRare.sol\";\nimport {ISeaport} from \"./interfaces/ISeaport.sol\";\nimport {IWyvernV23, IWyvernV23ProxyRegistry} from \"./interfaces/IWyvernV23.sol\";\nimport {IX2Y2} from \"./interfaces/IX2Y2.sol\";\nimport {IZeroExV4} from \"./interfaces/IZeroExV4.sol\";\n\ncontract ReservoirV5_0_0 is Ownable, ReentrancyGuard {\n    address public immutable weth;\n\n    address public immutable looksRare;\n    address public immutable looksRareTransferManagerERC721;\n    address public immutable looksRareTransferManagerERC1155;\n\n    address public immutable wyvernV23;\n    address public immutable wyvernV23Proxy;\n\n    address public immutable zeroExV4;\n\n    address public immutable foundation;\n\n    address public immutable x2y2;\n    address public immutable x2y2ERC721Delegate;\n\n    address public immutable seaport;\n\n    error UnexpectedOwnerOrBalance();\n    error UnexpectedSelector();\n    error UnsuccessfulCall();\n    error UnsuccessfulFill();\n    error UnsuccessfulPayment();\n    error UnsupportedExchange();\n\n    constructor(\n        address wethAddress,\n        address looksRareAddress,\n        address wyvernV23Address,\n        address zeroExV4Address,\n        address foundationAddress,\n        address x2y2Address,\n        address x2y2ERC721DelegateAddress,\n        address seaportAddress\n    ) {\n        weth = wethAddress;\n\n        // --- LooksRare setup ---\n\n        looksRare = looksRareAddress;\n\n        // Cache the transfer manager contracts\n        address transferSelectorNFT = ILooksRare(looksRare)\n            .transferSelectorNFT();\n        looksRareTransferManagerERC721 = ILooksRareTransferSelectorNFT(\n            transferSelectorNFT\n        ).TRANSFER_MANAGER_ERC721();\n        looksRareTransferManagerERC1155 = ILooksRareTransferSelectorNFT(\n            transferSelectorNFT\n        ).TRANSFER_MANAGER_ERC1155();\n\n        // --- WyvernV23 setup ---\n\n        wyvernV23 = wyvernV23Address;\n\n        // Create a user proxy\n        address proxyRegistry = IWyvernV23(wyvernV23).registry();\n        IWyvernV23ProxyRegistry(proxyRegistry).registerProxy();\n        wyvernV23Proxy = IWyvernV23ProxyRegistry(proxyRegistry).proxies(\n            address(this)\n        );\n\n        // Approve the token transfer proxy\n        IERC20(weth).approve(\n            IWyvernV23(wyvernV23).tokenTransferProxy(),\n            type(uint256).max\n        );\n\n        // --- ZeroExV4 setup ---\n\n        zeroExV4 = zeroExV4Address;\n\n        // --- Foundation setup ---\n\n        foundation = foundationAddress;\n\n        // --- X2Y2 setup ---\n\n        x2y2 = x2y2Address;\n        x2y2ERC721Delegate = x2y2ERC721DelegateAddress;\n\n        // --- Seaport setup ---\n\n        seaport = seaportAddress;\n\n        // Approve the exchange\n        IERC20(weth).approve(seaport, type(uint256).max);\n    }\n\n    receive() external payable {\n        // For unwrapping WETH\n    }\n\n    function makeCalls(\n        address[] calldata targets,\n        bytes[] calldata data,\n        uint256[] calldata values\n    ) external payable onlyOwner nonReentrant {\n        bool success;\n\n        uint256 length = targets.length;\n        for (uint256 i = 0; i < length; ) {\n            (success, ) = payable(targets[i]).call{value: values[i]}(data[i]);\n            if (!success) {\n                revert UnsuccessfulCall();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // Terminology:\n    // - \"single\" -> buy single token\n    // - \"batch\" -> buy multiple tokens (natively, only 0xv4, Seaport and X2Y2 support this)\n    // - \"multi\" -> buy multiple tokens (via the router)\n\n    function singleERC721ListingFill(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        uint256 tokenId,\n        address receiver,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            if (\n                selector !=\n                ILooksRare.matchAskWithTakerBidUsingETHAndWETH.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            if (selector != IZeroExV4.buyERC721.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.X2Y2) {\n            target = x2y2;\n            if (selector != IX2Y2.run.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.FOUNDATION) {\n            target = foundation;\n            if (selector != IFoundation.buyV2.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = target.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        if (\n            exchangeKind != ExchangeKind.SEAPORT &&\n            exchangeKind != ExchangeKind.WYVERN_V23\n        ) {\n            // When filling anything other than Wyvern or Seaport we need to send\n            // the NFT to the taker's wallet after the fill (since we cannot have\n            // a recipient other than the taker)\n            IERC721(collection).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId\n            );\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function singleERC721ListingFillWithPrecheck(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        uint256 tokenId,\n        address receiver,\n        address expectedOwner,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        if (\n            expectedOwner != address(0) &&\n            IERC721(collection).ownerOf(tokenId) != expectedOwner\n        ) {\n            revert UnexpectedOwnerOrBalance();\n        }\n\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            if (\n                selector !=\n                ILooksRare.matchAskWithTakerBidUsingETHAndWETH.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            if (selector != IZeroExV4.buyERC721.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.X2Y2) {\n            target = x2y2;\n            if (selector != IX2Y2.run.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.FOUNDATION) {\n            target = foundation;\n            if (selector != IFoundation.buyV2.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = target.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        if (\n            exchangeKind != ExchangeKind.SEAPORT &&\n            exchangeKind != ExchangeKind.WYVERN_V23\n        ) {\n            // When filling anything other than Wyvern or Seaport we need to send\n            // the NFT to the taker's wallet after the fill (since we cannot have\n            // a recipient other than the taker)\n            IERC721(collection).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId\n            );\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function batchERC721ListingFill(\n        bytes calldata data,\n        address[] calldata collections,\n        uint256[] calldata tokenIds,\n        address receiver,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        // Only `zeroExV4` is supported\n        if (bytes4(data[:4]) != IZeroExV4.batchBuyERC721s.selector) {\n            revert UnexpectedSelector();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = zeroExV4.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        // When filling anything other than Wyvern or Seaport we need to send\n        // the NFT to the taker's wallet after the fill (since we cannot have\n        // a recipient other than the taker)\n        uint256 length = collections.length;\n        for (uint256 i = 0; i < length; ) {\n            IERC721(collections[i]).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenIds[i]\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function singleERC721BidFill(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        address receiver,\n        bool unwrapWeth\n    ) external payable nonReentrant {\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        address operator;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            operator = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            operator = wyvernV23Proxy;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            operator = looksRareTransferManagerERC721;\n            if (selector != ILooksRare.matchBidWithTakerAsk.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            operator = zeroExV4;\n            if (selector != IZeroExV4.sellERC721.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.X2Y2) {\n            target = x2y2;\n            operator = x2y2ERC721Delegate;\n            if (selector != IX2Y2.run.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        // Approve the exchange to transfer the NFT out of the router\n        bool isApproved = IERC721(collection).isApprovedForAll(\n            address(this),\n            operator\n        );\n        if (!isApproved) {\n            IERC721(collection).setApprovalForAll(operator, true);\n        }\n\n        // Get the WETH balance before filling\n        uint256 wethBalanceBefore = IERC20(weth).balanceOf(address(this));\n\n        (bool success, ) = target.call{value: msg.value}(data);\n        if (!success) {\n            revert UnsuccessfulPayment();\n        }\n\n        // Send the payment to the actual taker\n        uint256 balance = IERC20(weth).balanceOf(address(this)) -\n            wethBalanceBefore;\n        if (unwrapWeth) {\n            IWETH(weth).withdraw(balance);\n\n            (success, ) = payable(receiver).call{value: balance}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        } else {\n            IERC20(weth).transfer(receiver, balance);\n        }\n    }\n\n    function singleERC1155ListingFill(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        uint256 tokenId,\n        uint256 amount,\n        address receiver,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            if (\n                selector !=\n                ILooksRare.matchAskWithTakerBidUsingETHAndWETH.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            if (selector != IZeroExV4.buyERC1155.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = target.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        if (\n            exchangeKind != ExchangeKind.SEAPORT &&\n            exchangeKind != ExchangeKind.WYVERN_V23\n        ) {\n            // When filling anything other than Wyvern or Seaport we need to send\n            // the NFT to the taker's wallet after the fill (since we cannot have\n            // a recipient other than the taker)\n            IERC1155(collection).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId,\n                amount,\n                \"\"\n            );\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function singleERC1155ListingFillWithPrecheck(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        uint256 tokenId,\n        uint256 amount,\n        address receiver,\n        address expectedOwner,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        if (\n            expectedOwner != address(0) &&\n            IERC1155(collection).balanceOf(expectedOwner, tokenId) < amount\n        ) {\n            revert UnexpectedOwnerOrBalance();\n        }\n\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            if (\n                selector !=\n                ILooksRare.matchAskWithTakerBidUsingETHAndWETH.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            if (selector != IZeroExV4.buyERC1155.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = target.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        if (\n            exchangeKind != ExchangeKind.SEAPORT &&\n            exchangeKind != ExchangeKind.WYVERN_V23\n        ) {\n            // When filling anything other than Wyvern or Seaport we need to send\n            // the NFT to the taker's wallet after the fill (since we cannot have\n            // a recipient other than the taker)\n            IERC1155(collection).safeTransferFrom(\n                address(this),\n                receiver,\n                tokenId,\n                amount,\n                \"\"\n            );\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function batchERC1155ListingFill(\n        bytes calldata data,\n        address[] calldata collections,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts,\n        address receiver,\n        address feeRecipient,\n        uint16 feeBps\n    ) external payable nonReentrant {\n        // Only `zeroExV4` is supported\n        if (bytes4(data[:4]) != IZeroExV4.batchBuyERC1155s.selector) {\n            revert UnexpectedSelector();\n        }\n\n        uint256 payment = (10000 * msg.value) / (10000 + feeBps);\n\n        (bool success, ) = zeroExV4.call{value: payment}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        // Avoid \"Stack too deep\" errors\n        {\n            // When filling anything other than Wyvern or Seaport we need to send\n            // the NFT to the taker's wallet after the fill (since we cannot have\n            // a recipient other than the taker)\n            uint256 length = collections.length;\n            for (uint256 i = 0; i < length; ) {\n                IERC1155(collections[i]).safeTransferFrom(\n                    address(this),\n                    receiver,\n                    tokenIds[i],\n                    amounts[i],\n                    \"\"\n                );\n\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        uint256 fee = msg.value - payment;\n        if (fee > 0) {\n            (success, ) = payable(feeRecipient).call{value: fee}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    function singleERC1155BidFill(\n        bytes calldata data,\n        ExchangeKind exchangeKind,\n        address collection,\n        address receiver,\n        bool unwrapWeth\n    ) external payable nonReentrant {\n        bytes4 selector = bytes4(data[:4]);\n\n        address target;\n        address operator;\n        if (exchangeKind == ExchangeKind.SEAPORT) {\n            target = seaport;\n            operator = seaport;\n            if (\n                selector != ISeaport.fulfillAdvancedOrder.selector &&\n                selector != ISeaport.matchAdvancedOrders.selector\n            ) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.WYVERN_V23) {\n            target = wyvernV23;\n            operator = wyvernV23Proxy;\n            if (selector != IWyvernV23.atomicMatch_.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.LOOKS_RARE) {\n            target = looksRare;\n            operator = looksRareTransferManagerERC1155;\n            if (selector != ILooksRare.matchBidWithTakerAsk.selector) {\n                revert UnexpectedSelector();\n            }\n        } else if (exchangeKind == ExchangeKind.ZEROEX_V4) {\n            target = zeroExV4;\n            operator = zeroExV4;\n            if (selector != IZeroExV4.sellERC1155.selector) {\n                revert UnexpectedSelector();\n            }\n        } else {\n            revert UnsupportedExchange();\n        }\n\n        // Approve the exchange to transfer the NFT out of the router\n        bool isApproved = IERC1155(collection).isApprovedForAll(\n            address(this),\n            operator\n        );\n        if (!isApproved) {\n            IERC1155(collection).setApprovalForAll(operator, true);\n        }\n\n        // Get the WETH balance before filling\n        uint256 wethBalanceBefore = IERC20(weth).balanceOf(address(this));\n\n        (bool success, ) = target.call{value: msg.value}(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        // Send the payment to the actual taker\n        uint256 balance = IERC20(weth).balanceOf(address(this)) -\n            wethBalanceBefore;\n        if (unwrapWeth) {\n            IWETH(weth).withdraw(balance);\n\n            (success, ) = payable(receiver).call{value: balance}(\"\");\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        } else {\n            IERC20(weth).transfer(receiver, balance);\n        }\n    }\n\n    function multiListingFill(\n        bytes[] calldata data,\n        uint256[] calldata values,\n        bool revertIfIncomplete\n    ) external payable {\n        bool success;\n\n        uint256 balanceBefore = address(this).balance - msg.value;\n\n        uint256 length = data.length;\n        for (uint256 i = 0; i < length; ) {\n            (success, ) = address(this).call{value: values[i]}(data[i]);\n            if (revertIfIncomplete && !success) {\n                revert UnsuccessfulFill();\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256 balanceAfter = address(this).balance;\n\n        if (balanceAfter > balanceBefore) {\n            (success, ) = msg.sender.call{value: balanceAfter - balanceBefore}(\n                \"\"\n            );\n            if (!success) {\n                revert UnsuccessfulPayment();\n            }\n        }\n    }\n\n    // ERC721 / ERC1155 overrides\n\n    function onERC721Received(\n        address, // operator,\n        address, // from\n        uint256, // tokenId,\n        bytes calldata data\n    ) external returns (bytes4) {\n        if (data.length == 0) {\n            return this.onERC721Received.selector;\n        }\n\n        bytes4 selector = bytes4(data[:4]);\n        if (selector != this.singleERC721BidFill.selector) {\n            revert UnexpectedSelector();\n        }\n\n        (bool success, ) = address(this).call(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        return this.onERC721Received.selector;\n    }\n\n    function onERC1155Received(\n        address, // operator\n        address, // from\n        uint256, // tokenId\n        uint256, // amount\n        bytes calldata data\n    ) external returns (bytes4) {\n        if (data.length == 0) {\n            return this.onERC1155Received.selector;\n        }\n\n        bytes4 selector = bytes4(data[:4]);\n        if (selector != this.singleERC1155BidFill.selector) {\n            revert UnexpectedSelector();\n        }\n\n        (bool success, ) = address(this).call(data);\n        if (!success) {\n            revert UnsuccessfulFill();\n        }\n\n        return this.onERC1155Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/router/interfaces/IExchangeKind.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nenum ExchangeKind {\n    WYVERN_V23,\n    LOOKS_RARE,\n    ZEROEX_V4,\n    FOUNDATION,\n    X2Y2,\n    SEAPORT\n}\n"
    },
    "contracts/router/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "contracts/router/interfaces/IFoundation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IFoundation {\n    function buyV2(\n        address nftContract,\n        uint256 tokenId,\n        uint256 maxPrice,\n        address referrer\n    ) external payable;\n}\n"
    },
    "contracts/router/interfaces/ILooksRare.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IOrderTypes {\n    struct MakerOrder {\n        bool isOrderAsk;\n        address signer;\n        address collection;\n        uint256 price;\n        uint256 tokenId;\n        uint256 amount;\n        address strategy;\n        address currency;\n        uint256 nonce;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 minPercentageToAsk;\n        bytes params;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk;\n        address taker;\n        uint256 price;\n        uint256 tokenId;\n        uint256 minPercentageToAsk;\n        bytes params;\n    }\n}\n\ninterface ILooksRare {\n    function transferSelectorNFT() external view returns (address);\n\n    function matchAskWithTakerBidUsingETHAndWETH(\n        IOrderTypes.TakerOrder calldata takerBid,\n        IOrderTypes.MakerOrder calldata makerAsk\n    ) external payable;\n\n    function matchBidWithTakerAsk(\n        IOrderTypes.TakerOrder calldata takerAsk,\n        IOrderTypes.MakerOrder calldata makerBid\n    ) external;\n}\n\ninterface ILooksRareTransferSelectorNFT {\n    function TRANSFER_MANAGER_ERC721() external view returns (address);\n\n    function TRANSFER_MANAGER_ERC1155() external view returns (address);\n}\n"
    },
    "contracts/router/interfaces/ISeaport.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface ISeaport {\n    enum OrderType {\n        FULL_OPEN,\n        PARTIAL_OPEN,\n        FULL_RESTRICTED,\n        PARTIAL_RESTRICTED\n    }\n\n    enum ItemType {\n        NATIVE,\n        ERC20,\n        ERC721,\n        ERC1155,\n        ERC721_WITH_CRITERIA,\n        ERC1155_WITH_CRITERIA\n    }\n\n    enum Side {\n        OFFER,\n        CONSIDERATION\n    }\n\n    struct OfferItem {\n        ItemType itemType;\n        address token;\n        uint256 identifierOrCriteria;\n        uint256 startAmount;\n        uint256 endAmount;\n    }\n\n    struct ConsiderationItem {\n        ItemType itemType;\n        address token;\n        uint256 identifierOrCriteria;\n        uint256 startAmount;\n        uint256 endAmount;\n        address recipient;\n    }\n\n    struct ReceivedItem {\n        ItemType itemType;\n        address token;\n        uint256 identifier;\n        uint256 amount;\n        address recipient;\n    }\n\n    struct OrderParameters {\n        address offerer;\n        address zone;\n        OfferItem[] offer;\n        ConsiderationItem[] consideration;\n        OrderType orderType;\n        uint256 startTime;\n        uint256 endTime;\n        bytes32 zoneHash;\n        uint256 salt;\n        bytes32 conduitKey;\n        uint256 totalOriginalConsiderationItems;\n    }\n\n    struct AdvancedOrder {\n        OrderParameters parameters;\n        uint120 numerator;\n        uint120 denominator;\n        bytes signature;\n        bytes extraData;\n    }\n\n    struct CriteriaResolver {\n        uint256 orderIndex;\n        Side side;\n        uint256 index;\n        uint256 identifier;\n        bytes32[] criteriaProof;\n    }\n\n    struct FulfillmentComponent {\n        uint256 orderIndex;\n        uint256 itemIndex;\n    }\n\n    struct Fulfillment {\n        FulfillmentComponent[] offerComponents;\n        FulfillmentComponent[] considerationComponents;\n    }\n\n    struct Execution {\n        ReceivedItem item;\n        address offerer;\n        bytes32 conduitKey;\n    }\n\n    function fulfillAdvancedOrder(\n        AdvancedOrder calldata advancedOrder,\n        CriteriaResolver[] calldata criteriaResolvers,\n        bytes32 fulfillerConduitKey,\n        address recipient\n    ) external payable returns (bool fulfilled);\n\n    function fulfillAvailableAdvancedOrders(\n        AdvancedOrder[] memory advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        FulfillmentComponent[][] calldata offerFulfillments,\n        FulfillmentComponent[][] calldata considerationFulfillments,\n        bytes32 fulfillerConduitKey,\n        address recipient,\n        uint256 maximumFulfilled\n    )\n        external\n        payable\n        returns (bool[] memory availableOrders, Execution[] memory executions);\n\n    function matchAdvancedOrders(\n        AdvancedOrder[] calldata advancedOrders,\n        CriteriaResolver[] calldata criteriaResolvers,\n        Fulfillment[] calldata fulfillments\n    ) external payable returns (Execution[] memory executions);\n}\n"
    },
    "contracts/router/interfaces/IWyvernV23.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IWyvernV23 {\n    function registry() external view returns (address);\n\n    function tokenTransferProxy() external view returns (address);\n\n    function atomicMatch_(\n        address[14] calldata addrs,\n        uint256[18] calldata uints,\n        uint8[8] calldata feeMethodsSidesKindsHowToCalls,\n        bytes calldata calldataBuy,\n        bytes calldata calldataSell,\n        bytes calldata replacementPatternBuy,\n        bytes calldata replacementPatternSell,\n        bytes calldata staticExtradataBuy,\n        bytes calldata staticExtradataSell,\n        uint8[2] calldata vs,\n        bytes32[5] calldata rssMetadata\n    ) external payable;\n}\n\ninterface IWyvernV23ProxyRegistry {\n    function registerProxy() external;\n\n    function proxies(address user) external view returns (address);\n}\n"
    },
    "contracts/router/interfaces/IX2Y2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IX2Y2 {\n    struct OrderItem {\n        uint256 price;\n        bytes data;\n    }\n\n    struct Order {\n        uint256 salt;\n        address user;\n        uint256 network;\n        uint256 intent;\n        uint256 delegateType;\n        uint256 deadline;\n        address currency;\n        bytes dataMask;\n        OrderItem[] items;\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        uint8 signVersion;\n    }\n\n    struct SettleShared {\n        uint256 salt;\n        uint256 deadline;\n        uint256 amountToEth;\n        uint256 amountToWeth;\n        address user;\n        bool canFail;\n    }\n\n    struct Fee {\n        uint256 percentage;\n        address to;\n    }\n\n    enum Op {\n        INVALID,\n        COMPLETE_SELL_OFFER,\n        COMPLETE_BUY_OFFER,\n        CANCEL_OFFER,\n        BID,\n        COMPLETE_AUCTION,\n        REFUND_AUCTION,\n        REFUND_AUCTION_STUCK_ITEM\n    }\n\n    struct SettleDetail {\n        Op op;\n        uint256 orderIdx;\n        uint256 itemIdx;\n        uint256 price;\n        bytes32 itemHash;\n        address executionDelegate;\n        bytes dataReplacement;\n        uint256 bidIncentivePct;\n        uint256 aucMinIncrementPct;\n        uint256 aucIncDurationSecs;\n        Fee[] fees;\n    }\n\n    struct RunInput {\n        Order[] orders;\n        SettleDetail[] details;\n        SettleShared shared;\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n    }\n\n    function run(RunInput calldata input) external payable;\n}\n"
    },
    "contracts/router/interfaces/IZeroExV4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IZeroExV4 {\n    struct Property {\n        address propertyValidator;\n        bytes propertyData;\n    }\n\n    struct Fee {\n        address recipient;\n        uint256 amount;\n        bytes feeData;\n    }\n\n    struct ERC721Order {\n        uint8 direction;\n        address maker;\n        address taker;\n        uint256 expiry;\n        uint256 nonce;\n        address erc20Token;\n        uint256 erc20TokenAmount;\n        Fee[] fees;\n        address erc721Token;\n        uint256 erc721TokenId;\n        Property[] erc721TokenProperties;\n    }\n\n    struct ERC1155Order {\n        uint8 direction;\n        address maker;\n        address taker;\n        uint256 expiry;\n        uint256 nonce;\n        address erc20Token;\n        uint256 erc20TokenAmount;\n        Fee[] fees;\n        address erc1155Token;\n        uint256 erc1155TokenId;\n        Property[] erc1155TokenProperties;\n        uint128 erc1155TokenAmount;\n    }\n\n    struct Signature {\n        uint8 signatureType;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    function buyERC721(\n        ERC721Order calldata sellOrder,\n        Signature calldata signature,\n        bytes memory callbackData\n    ) external payable;\n\n    function batchBuyERC721s(\n        ERC721Order[] calldata sellOrders,\n        Signature[] calldata signatures,\n        bytes[] calldata callbackData,\n        bool revertIfIncomplete\n    ) external payable returns (bool[] memory);\n\n    function sellERC721(\n        ERC721Order calldata buyOrder,\n        Signature calldata signature,\n        uint256 erc721TokenId,\n        bool unwrapNativeToken,\n        bytes memory callbackData\n    ) external;\n\n    function buyERC1155(\n        ERC1155Order calldata sellOrder,\n        Signature calldata signature,\n        uint128 erc1155BuyAmount,\n        bytes calldata callbackData\n    ) external payable;\n\n    function batchBuyERC1155s(\n        ERC1155Order[] calldata sellOrders,\n        Signature[] calldata signatures,\n        uint128[] calldata erc1155FillAmounts,\n        bytes[] calldata callbackData,\n        bool revertIfIncomplete\n    ) external payable returns (bool[] memory successes);\n\n    function sellERC1155(\n        ERC1155Order calldata buyOrder,\n        Signature calldata signature,\n        uint256 erc1155TokenId,\n        uint128 erc1155SellAmount,\n        bool unwrapNativeToken,\n        bytes calldata callbackData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}