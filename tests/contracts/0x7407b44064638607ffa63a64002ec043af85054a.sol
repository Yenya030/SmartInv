{{
  "language": "Solidity",
  "sources": {
    "contracts/CryptoMason.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.13;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ERC721A.sol\";\r\n\r\ncontract CryptoMason is ERC721A, Ownable {\r\n    string private baseTokenURI;\r\n\r\n    uint256 public publicSalePrice;\r\n\r\n    uint256 private totalNFTs;\r\n\r\n    mapping(address => uint256) mintedNFTs;\r\n\r\n    mapping(address => uint256) public NFTtracker;\r\n\r\n    bool public isMintActive;\r\n    bool public isStakeActive;\r\n\r\n    mapping(address => address[]) public adrToAllRefs;\r\n    mapping(address => address) public adrToParentRef;\r\n\r\n    mapping(address => uint256) adrToCycle;\r\n\r\n    uint256 internal refLevel1Percent;\r\n\r\n    uint256 public NFTLimitPublic;\r\n\r\n    uint256 public maxNFTs;\r\n\r\n    event BaseURIChanged(string baseURI);\r\n\r\n    event PublicSaleMint(address mintTo, uint256 tokensCount);\r\n\r\n    event Received();\r\n\r\n    address founderAddress;\r\n\r\n    mapping(address => bool) registeredUsers;\r\n\r\n    mapping(address => claim[]) claimInfo;\r\n    mapping(address => uint256) public adrToClaimAmount;\r\n    mapping(address => uint256) public adrToUsedClaimAmount;\r\n    mapping(address => uint256[]) adrToIdsArray;\r\n    mapping(address => uint256[]) adrToStakes;\r\n\r\n    mapping(address => uint256) moneyFromAllRefs;\r\n    mapping(address => refs[]) adrToRefsInfo;\r\n\r\n    uint256 allMoneyForUsers;\r\n\r\n    struct refs {\r\n        address ref;\r\n        uint256 money;\r\n        uint256 date;\r\n    }\r\n\r\n    bool rewardAvailable;\r\n\r\n    struct claim {\r\n        address user;\r\n        uint256 nftAmount;\r\n        uint256 nftStartAmount;\r\n        uint256[] nftIds;\r\n        uint256 startTime;\r\n        uint256 lockTime;\r\n        uint256 percent;\r\n        uint256 floor;\r\n        uint256 rewardAmount;\r\n        uint256 alreadyGiven;\r\n        uint256 allowTime;\r\n    }\r\n\r\n    mapping(address => bool) isAdmin;\r\n    address[] admins;\r\n\r\n    constructor(\r\n        string memory baseURI,\r\n        address _founderAddress,\r\n        uint256 maxNFT\r\n    ) ERC721A(\"CryptoMason\", \"MASON\", 100, 9999) {\r\n        baseTokenURI = baseURI;\r\n\r\n        founderAddress = _founderAddress;\r\n\r\n        NFTLimitPublic = 4;\r\n\r\n        maxNFTs = maxNFT;\r\n        publicSalePrice = 74000000000000000;\r\n\r\n        refLevel1Percent = 20;\r\n\r\n        registeredUsers[founderAddress] = true;\r\n        adrToParentRef[founderAddress] = _founderAddress;\r\n    }\r\n\r\n    function setPrices(uint256 _newPublicSalePrice) public onlyOwner {\r\n        publicSalePrice = _newPublicSalePrice;\r\n    }\r\n\r\n    function setNFTLimits(uint256 _newLimitPublic) public onlyOwner {\r\n        NFTLimitPublic = _newLimitPublic;\r\n    }\r\n\r\n    function setNFTHardcap(uint256 _newMax) public onlyOwner {\r\n        maxNFTs = _newMax;\r\n    }\r\n\r\n    function registerInSystem(address referal) external {\r\n        require(\r\n            registeredUsers[referal] == true,\r\n            \"referal address is not registered\"\r\n        );\r\n        require(referal != msg.sender, \"You cannot be referal of yourself\");\r\n        registeredUsers[msg.sender] = true;\r\n        adrToParentRef[msg.sender] = referal;\r\n        adrToAllRefs[referal].push(msg.sender);\r\n        adrToRefsInfo[adrToParentRef[msg.sender]].push(refs(msg.sender, 0, 0));\r\n    }\r\n\r\n    function freeMint() external {\r\n        require(registeredUsers[msg.sender], \"Not registered in system\");\r\n        require(totalNFTs + 1 <= maxNFTs, \"Exceeded max NFTs amount\");\r\n\r\n        require(isMintActive, \"mint is paused\");\r\n\r\n        require(\r\n            adrToCycle[msg.sender] > 9,\r\n            \"Not enough nfts minted with your referal\"\r\n        );\r\n\r\n        totalNFTs += 1;\r\n\r\n        mintedNFTs[msg.sender] += 1;\r\n\r\n        NFTtracker[msg.sender] += 1;\r\n\r\n        adrToCycle[msg.sender] -= 10;\r\n\r\n        _safeMint(msg.sender, 1, true, \"\");\r\n    }\r\n\r\n    function PublicMint(uint256 quantity) external payable {\r\n        require(registeredUsers[msg.sender], \"Not registered in system\");\r\n        require(totalNFTs + quantity <= maxNFTs, \"Exceeded max NFTs amount\");\r\n        require(isMintActive, \"mint is paused\");\r\n\r\n        require(\r\n            NFTtracker[msg.sender] + quantity <= NFTLimitPublic,\r\n            \"Minting would exceed wallet limit\"\r\n        );\r\n        require(quantity > 0, \"Quantity has to be more than 0\");\r\n\r\n        require(\r\n            msg.value >= publicSalePrice * quantity,\r\n            \"Fund amount is incorrect\"\r\n        );\r\n\r\n        _safeMint(msg.sender, quantity, true, \"\");\r\n\r\n        totalNFTs += quantity;\r\n\r\n        NFTtracker[msg.sender] += quantity;\r\n        mintedNFTs[msg.sender] += quantity;\r\n\r\n        uint256 money = msg.value;\r\n\r\n        address par = adrToParentRef[msg.sender];\r\n\r\n        uint256 mon = (refLevel1Percent * money) / 100;\r\n\r\n        _widthdraw(par, mon);\r\n        moneyFromAllRefs[par] += mon;\r\n\r\n        bool found;\r\n        uint256 place;\r\n        for (uint256 i; i < adrToRefsInfo[par].length; i++) {\r\n            if (adrToRefsInfo[par][i].ref == msg.sender) {\r\n                found = true;\r\n                place = i;\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            adrToRefsInfo[par][place].money += mon;\r\n            adrToRefsInfo[par][place].date = block.timestamp;\r\n        } else {\r\n            adrToRefsInfo[par].push(refs(msg.sender, mon, block.timestamp));\r\n        }\r\n\r\n        money -= mon;\r\n\r\n        _widthdraw(founderAddress, money);\r\n        adrToCycle[par] += quantity;\r\n    }\r\n\r\n    function Airdrop(uint256 quantity, address wallet)\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        require(totalNFTs + quantity <= maxNFTs, \"Exceeded max NFTs amount\");\r\n\r\n        require(quantity <= 150, \"Exceeded max transaction amount\");\r\n\r\n        _safeMint(wallet, quantity, true, \"\");\r\n\r\n        totalNFTs += quantity;\r\n\r\n        NFTtracker[wallet] += quantity;\r\n    }\r\n\r\n    function allowUser(\r\n        uint256[] memory tokenIds,\r\n        uint256 floor,\r\n        uint256 time,\r\n        uint256 perc,\r\n        address user1\r\n    ) external {\r\n        require(\r\n            msg.sender == owner() || isAdmin[msg.sender],\r\n            \"Not enough rights\"\r\n        );\r\n        require(registeredUsers[user1], \"Not registered in system\");\r\n\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            require(\r\n                this.ownerOf(tokenIds[i]) == user1,\r\n                \"This user is not owner of the nft\"\r\n            );\r\n        }\r\n\r\n        uint256 divide = 1 days * 100;\r\n\r\n        uint256 myReward = (floor * tokenIds.length * perc * time * 60) /\r\n            divide;\r\n\r\n        if (adrToClaimAmount[user1] == adrToUsedClaimAmount[user1]) {\r\n            adrToClaimAmount[user1]++;\r\n\r\n            claimInfo[user1].push(\r\n                claim(\r\n                    user1,\r\n                    tokenIds.length,\r\n                    tokenIds.length,\r\n                    tokenIds,\r\n                    0,\r\n                    time * 60,\r\n                    perc,\r\n                    floor,\r\n                    myReward,\r\n                    0,\r\n                    block.timestamp\r\n                )\r\n            );\r\n            allMoneyForUsers += myReward;\r\n        } else {\r\n            claimInfo[user1][claimInfo[user1].length - 1] = claim(\r\n                user1,\r\n                tokenIds.length,\r\n                tokenIds.length,\r\n                tokenIds,\r\n                0,\r\n                time * 60,\r\n                perc,\r\n                floor,\r\n                myReward,\r\n                0,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function stake() external {\r\n        require(registeredUsers[msg.sender], \"Not registered in system\");\r\n        require(isStakeActive, \"Stake is paused\");\r\n\r\n        require(\r\n            adrToUsedClaimAmount[msg.sender] < adrToClaimAmount[msg.sender],\r\n            \"Don't have stakes\"\r\n        );\r\n        require(\r\n            claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]].nftAmount >\r\n                0,\r\n            \"Do not have stakes at all\"\r\n        );\r\n        require(\r\n            block.timestamp <=\r\n                claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]]\r\n                    .allowTime +\r\n                    1 hours,\r\n            \"Stake deadline is over\"\r\n        );\r\n\r\n        adrToStakes[msg.sender].push(adrToClaimAmount[msg.sender]);\r\n\r\n        for (\r\n            uint256 i;\r\n            i <\r\n            claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]]\r\n                .nftIds\r\n                .length;\r\n            i++\r\n        ) {\r\n            require(\r\n                ownerOf(\r\n                    claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]]\r\n                        .nftIds[i]\r\n                ) == msg.sender,\r\n                \"This user is not owner of the nft\"\r\n            );\r\n\r\n            safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]].nftIds[\r\n                    i\r\n                ]\r\n            );\r\n            adrToIdsArray[msg.sender].push(\r\n                claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]].nftIds[\r\n                    i\r\n                ]\r\n            );\r\n        }\r\n        claimInfo[msg.sender][adrToUsedClaimAmount[msg.sender]]\r\n            .startTime = block.timestamp;\r\n        adrToUsedClaimAmount[msg.sender]++;\r\n    }\r\n\r\n    function checkReferals(address user, uint256 startPoint)\r\n        external\r\n        view\r\n        returns (refs[] memory referalInfo)\r\n    {\r\n        uint256 amount = 8;\r\n\r\n        require(startPoint % 8 == 0, \"startPoint must be 0, 8, 16 ... etc.\");\r\n        require(startPoint < adrToRefsInfo[user].length, \"startPoint too big\");\r\n\r\n        uint256 count;\r\n        bool a;\r\n\r\n        if (adrToRefsInfo[user].length < startPoint + amount) {\r\n            uint256 newStartPoint = startPoint - (startPoint % 8);\r\n            refs[] memory adrArray = new refs[](\r\n                adrToRefsInfo[user].length - newStartPoint\r\n            );\r\n            for (\r\n                uint256 i = newStartPoint;\r\n                i < adrToRefsInfo[user].length;\r\n                i++\r\n            ) {\r\n                if (adrToRefsInfo[user][i].ref != address(0)) {\r\n                    adrArray[count] = adrToRefsInfo[user][i];\r\n                    count++;\r\n                }\r\n            }\r\n            return adrArray;\r\n        } else {\r\n            refs[] memory adrArray = new refs[](amount);\r\n            for (uint256 i = startPoint; i < startPoint + amount; i++) {\r\n                if (adrToRefsInfo[user][i].ref != address(0)) {\r\n                    adrArray[count] = adrToRefsInfo[user][i];\r\n                    count++;\r\n                    a = true;\r\n                }\r\n            }\r\n\r\n            return adrArray;\r\n        }\r\n    }\r\n\r\n    function checkUserStakings(address user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalRewards,\r\n            uint256 _totalNFTs,\r\n            uint256[] memory stakeNumbers,\r\n            uint256[] memory stakeNotZero\r\n        )\r\n    {\r\n        uint256 len = adrToStakes[user].length;\r\n        uint256[] memory array = new uint256[](len);\r\n\r\n        for (uint256 i; i < adrToStakes[user].length; i++) {\r\n            if (checkMyRewards(user, adrToStakes[user][i]) != 0) {\r\n                array[i] = adrToStakes[user][i];\r\n            }\r\n        }\r\n\r\n        return (\r\n            checkMyAllRewards(user),\r\n            adrToIdsArray[user].length,\r\n            adrToStakes[user],\r\n            array\r\n        );\r\n    }\r\n\r\n    function checkGeneralRefInfo(address user)\r\n        external\r\n        view\r\n        returns (uint256 totalMoney, uint256 refAmount)\r\n    {\r\n        return (moneyFromAllRefs[user], adrToRefsInfo[user].length);\r\n    }\r\n\r\n    function checkClaimInfo(address user, uint256 claimNumber)\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory tokenIds,\r\n            uint256 floor,\r\n            uint256 percent,\r\n            uint256 startTime,\r\n            uint256 timeAvailable\r\n        )\r\n    {\r\n        return (\r\n            claimInfo[user][claimNumber - 1].nftIds,\r\n            claimInfo[user][claimNumber - 1].floor,\r\n            claimInfo[user][claimNumber - 1].percent,\r\n            claimInfo[user][claimNumber - 1].startTime,\r\n            claimInfo[user][claimNumber - 1].startTime +\r\n                claimInfo[user][claimNumber - 1].lockTime\r\n        );\r\n    }\r\n\r\n    function batchUnstakeNFTs(uint256[] memory nfts) external {\r\n        for (uint256 i; i < nfts.length; i++) {\r\n            unStakeNFTs(nfts[i]);\r\n            uint256 index = 0;\r\n            for (\r\n                uint256 l;\r\n                l < claimInfo[msg.sender][nfts[i] - 1].nftIds.length;\r\n                l++\r\n            ) {\r\n                for (uint256 j; j < adrToIdsArray[msg.sender].length; j++) {\r\n                    if (\r\n                        adrToIdsArray[msg.sender][j] ==\r\n                        claimInfo[msg.sender][nfts[i] - 1].nftIds[l]\r\n                    ) {\r\n                        index = j;\r\n                    }\r\n                }\r\n                removeNFTs(msg.sender, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    function unStakeNFTs(uint256 numberClaim) internal {\r\n        require(numberClaim != 0, \"Not correct number\");\r\n        numberClaim -= 1;\r\n        require(registeredUsers[msg.sender], \"Not registered in system\");\r\n        require(\r\n            claimInfo[msg.sender][numberClaim].startTime +\r\n                claimInfo[msg.sender][numberClaim].lockTime <\r\n                block.timestamp,\r\n            \"Wait for ending of your deadline\"\r\n        );\r\n\r\n        for (\r\n            uint256 i;\r\n            i < claimInfo[msg.sender][numberClaim].nftIds.length;\r\n            i++\r\n        ) {\r\n            this.safeTransferFrom(\r\n                address(this),\r\n                msg.sender,\r\n                claimInfo[msg.sender][numberClaim].nftIds[i]\r\n            );\r\n        }\r\n\r\n        claimInfo[msg.sender][numberClaim].nftAmount == 0;\r\n        if (claimInfo[msg.sender][numberClaim].rewardAmount == 0) {\r\n            uint256 index = 0;\r\n            for (uint256 j; j < adrToStakes[msg.sender].length; j++) {\r\n                if (adrToStakes[msg.sender][j] == numberClaim) {\r\n                    index = j;\r\n                }\r\n            }\r\n            removeStakes(msg.sender, index);\r\n        }\r\n    }\r\n\r\n    function addAdmin(address user) external onlyOwner {\r\n        require(!isAdmin[user], \"Already admin\");\r\n        isAdmin[user] = true;\r\n        admins.push(user);\r\n    }\r\n\r\n    function deleteAdmin(address user) external onlyOwner {\r\n        require(isAdmin[user], \"Not admin\");\r\n        for (uint256 i; i < admins.length; i++) {\r\n            if (admins[i] == user) {\r\n                removeAdmin(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeAdmin(uint256 index) internal returns (address[] memory) {\r\n        for (uint256 i = index; i < admins.length - 1; i++) {\r\n            admins[i] = admins[i + 1];\r\n        }\r\n        delete admins[admins.length - 1];\r\n        admins.pop();\r\n        return admins;\r\n    }\r\n\r\n    function removeNFTs(address user, uint256 index)\r\n        internal\r\n        returns (uint256[] memory)\r\n    {\r\n        for (uint256 i = index; i < adrToIdsArray[user].length - 1; i++) {\r\n            adrToIdsArray[user][i] = adrToIdsArray[user][i + 1];\r\n        }\r\n        delete adrToIdsArray[user][adrToIdsArray[user].length - 1];\r\n        adrToIdsArray[user].pop();\r\n        return adrToIdsArray[user];\r\n    }\r\n\r\n    function removeStakes(address user, uint256 index)\r\n        internal\r\n        returns (uint256[] memory)\r\n    {\r\n        for (uint256 i = index; i < adrToStakes[user].length - 1; i++) {\r\n            adrToStakes[user][i] = adrToStakes[user][i + 1];\r\n        }\r\n        delete adrToStakes[user][adrToStakes[user].length - 1];\r\n        adrToStakes[user].pop();\r\n        return adrToStakes[user];\r\n    }\r\n\r\n    function checkAllAdmins()\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (address[] memory)\r\n    {\r\n        return admins;\r\n    }\r\n\r\n    function setRewardAmount() external payable onlyOwner {\r\n        rewardAvailable = true;\r\n    }\r\n\r\n    function getRewardsAndNFTs(uint256[] memory numberClaim) external {\r\n        for (uint256 i; i < numberClaim.length; i++) {\r\n            getRewards(numberClaim[i]);\r\n            unStakeNFTs(numberClaim[i]);\r\n        }\r\n    }\r\n\r\n    function batchRewards(uint256[] memory stakeNumbers) external {\r\n        for (uint256 i; i < stakeNumbers.length; i++) {\r\n            getRewards(stakeNumbers[i]);\r\n        }\r\n    }\r\n\r\n    function getRewards(uint256 numberClaim) internal {\r\n        require(numberClaim != 0, \"Not correct number\");\r\n        numberClaim -= 1;\r\n        require(registeredUsers[msg.sender], \"Not registered in system\");\r\n\r\n        require(rewardAvailable, \"Admin didn't set rewardSumm yet\");\r\n\r\n        require(\r\n            adrToUsedClaimAmount[msg.sender] <= adrToClaimAmount[msg.sender],\r\n            \"Don't have stakes\"\r\n        );\r\n        require(\r\n            claimInfo[msg.sender][numberClaim].startTime > 0,\r\n            \"Stake at first\"\r\n        );\r\n        require(\r\n            claimInfo[msg.sender][numberClaim].rewardAmount > 0,\r\n            \"Dont have rewards\"\r\n        );\r\n\r\n        uint256 nows = block.timestamp;\r\n        uint256 myReward;\r\n        bool a;\r\n\r\n        if (\r\n            claimInfo[msg.sender][numberClaim].startTime +\r\n                claimInfo[msg.sender][numberClaim].lockTime <\r\n            nows\r\n        ) {\r\n            myReward = claimInfo[msg.sender][numberClaim].rewardAmount;\r\n            claimInfo[msg.sender][numberClaim].rewardAmount -= myReward;\r\n            a = true;\r\n        } else {\r\n            uint256 divide = 1 days * 100;\r\n\r\n            myReward =\r\n                (claimInfo[msg.sender][numberClaim].floor *\r\n                    claimInfo[msg.sender][numberClaim].nftStartAmount *\r\n                    claimInfo[msg.sender][numberClaim].percent *\r\n                    (block.timestamp -\r\n                        claimInfo[msg.sender][numberClaim].startTime)) /\r\n                divide -\r\n                claimInfo[msg.sender][numberClaim].alreadyGiven;\r\n\r\n            claimInfo[msg.sender][numberClaim].rewardAmount -= myReward;\r\n        }\r\n        claimInfo[msg.sender][numberClaim].alreadyGiven += myReward;\r\n\r\n        allMoneyForUsers -= myReward;\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: myReward}(\"\");\r\n\r\n        require(success, \"Transfer failed\");\r\n        if (a) {\r\n            claimInfo[msg.sender][numberClaim].rewardAmount = 0;\r\n        }\r\n    }\r\n\r\n    function changeStakePauseStatus() external onlyOwner {\r\n        isStakeActive = !isStakeActive;\r\n    }\r\n\r\n    function changeMintPauseStatus() external onlyOwner {\r\n        isMintActive = !isMintActive;\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return baseTokenURI;\r\n    }\r\n\r\n    function checkMyRewards(address user, uint256 numberClaim)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(numberClaim != 0, \"Not correct number\");\r\n        numberClaim -= 1;\r\n        require(registeredUsers[user], \"Not registered in system\");\r\n        uint256 nows = block.timestamp;\r\n        uint256 myReward;\r\n        if (numberClaim + 1 <= adrToUsedClaimAmount[user]) {\r\n            if (\r\n                claimInfo[user][numberClaim].startTime +\r\n                    claimInfo[user][numberClaim].lockTime <\r\n                nows\r\n            ) {\r\n                myReward = claimInfo[user][numberClaim].rewardAmount;\r\n            } else {\r\n                uint256 divide = 1 days * 100;\r\n\r\n                myReward =\r\n                    (claimInfo[user][numberClaim].floor *\r\n                        claimInfo[user][numberClaim].nftStartAmount *\r\n                        claimInfo[user][numberClaim].percent *\r\n                        (block.timestamp -\r\n                            claimInfo[user][numberClaim].startTime)) /\r\n                    divide -\r\n                    claimInfo[user][numberClaim].alreadyGiven;\r\n            }\r\n            return myReward;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function checkMyAllRewards(address user) public view returns (uint256) {\r\n        uint256 sum;\r\n        for (uint256 i; i < adrToStakes[user].length; i++) {\r\n            sum += checkMyRewards(user, adrToStakes[user][i]);\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function userNFTIds(address _owner) public view returns (uint256[] memory) {\r\n        uint256 ownerTokenCount = balanceOf(_owner);\r\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n        for (uint256 i; i < ownerTokenCount; i++) {\r\n            tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n        }\r\n        return tokenIds;\r\n    }\r\n\r\n    function checkReferalPercents() external view returns (uint256 level1) {\r\n        return (refLevel1Percent);\r\n    }\r\n\r\n    function checkAllMoneyForAllUsers() external view returns (uint256) {\r\n        return allMoneyForUsers;\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721A)\r\n        returns (string memory)\r\n    {\r\n        string memory _tokenURI = super.tokenURI(tokenId);\r\n\r\n        return string(abi.encodePacked(_tokenURI, \".json\"));\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI) public onlyOwner {\r\n        baseTokenURI = baseURI;\r\n\r\n        emit BaseURIChanged(baseURI);\r\n    }\r\n\r\n    function isRegistered(address user) external view returns (bool) {\r\n        return registeredUsers[user];\r\n    }\r\n\r\n    function isMinted(address user) external view returns (bool) {\r\n        if (mintedNFTs[user] > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance > 0, \"Insufficent balance\");\r\n\r\n        _widthdraw(founderAddress, balance);\r\n    }\r\n\r\n    function _widthdraw(address _address, uint256 _amount) private {\r\n        (bool success, ) = _address.call{value: _amount}(\"\");\r\n\r\n        require(success, \"Failed to widthdraw Ether\");\r\n    }\r\n\r\n    function changeFounderAddress(address adr) external onlyOwner {\r\n        founderAddress = adr;\r\n    }\r\n\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4) {\r\n        _operator;\r\n        _from;\r\n        _tokenId;\r\n        _data;\r\n        emit Received();\r\n        return 0x150b7a02;\r\n    }\r\n}\r\n"
    },
    "contracts/ERC721A.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n\r\ncontract ERC721A is\r\n    Context,\r\n    ERC165,\r\n    IERC721,\r\n    IERC721Metadata,\r\n    IERC721Enumerable\r\n{\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    struct TokenOwnership {\r\n        address addr;\r\n        uint64 startTimestamp;\r\n    }\r\n\r\n    struct AddressData {\r\n        uint128 balance;\r\n        uint128 numberMinted;\r\n    }\r\n\r\n    mapping(uint256 => bool) burned;\r\n    uint256 burnedCount;\r\n\r\n    uint256 private currentIndex;\r\n\r\n    uint256 public immutable collectionSize;\r\n    uint256 public maxBatchSize;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\r\n    mapping(uint256 => TokenOwnership) private _ownerships;\r\n\r\n    // Mapping owner address to address data\r\n    mapping(address => AddressData) private _addressData;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev\r\n     * maxBatchSize refers to how much a minter can mint at a time.\r\n     * collectionSize_ refers to how many tokens are in the collection.\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 maxBatchSize_,\r\n        uint256 collectionSize_\r\n    ) {\r\n        require(\r\n            collectionSize_ > 0,\r\n            \"ERC721A: collection must have a nonzero supply\"\r\n        );\r\n        require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        maxBatchSize = maxBatchSize_;\r\n        collectionSize = collectionSize_;\r\n        currentIndex = _startTokenId();\r\n    }\r\n\r\n    /**\r\n     * To change the starting tokenId, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalMinted() - burnedCount;\r\n    }\r\n\r\n    function currentTokenId() public view returns (uint256) {\r\n        return _totalMinted();\r\n    }\r\n\r\n    function getNextTokenId() public view returns (uint256) {\r\n        return SafeMath.add(_totalMinted(), 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        unchecked {\r\n            return currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(index < totalSupply(), \"ERC721A: global index out of bounds\");\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\r\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\r\n        uint256 numMintedSoFar = totalSupply();\r\n        uint256 tokenIdsIdx = 0;\r\n        address currOwnershipAddr = address(0);\r\n        for (uint256 i = 0; i < numMintedSoFar; i++) {\r\n            TokenOwnership memory ownership = _ownerships[i];\r\n            if (ownership.addr != address(0)) {\r\n                currOwnershipAddr = ownership.addr;\r\n            }\r\n            if (currOwnershipAddr == owner) {\r\n                if (tokenIdsIdx == index) {\r\n                    return i;\r\n                }\r\n                tokenIdsIdx++;\r\n            }\r\n        }\r\n        revert(\"ERC721A: unable to get token of owner by index\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC165, IERC165)\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            interfaceId == type(IERC721Enumerable).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721A: balance query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].balance);\r\n    }\r\n\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        require(\r\n            owner != address(0),\r\n            \"ERC721A: number minted query for the zero address\"\r\n        );\r\n        return uint256(_addressData[owner].numberMinted);\r\n    }\r\n\r\n    function ownershipOf(uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (TokenOwnership memory)\r\n    {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr && curr < currentIndex) {\r\n                TokenOwnership memory ownership = _ownerships[curr];\r\n                if (true) {\r\n                    return ownership;\r\n                }\r\n\r\n                // Invariant:\r\n                // There will always be an ownership that has an address and is not burned\r\n                // before an ownership that does not have an address and is not burned.\r\n                // Hence, curr will not underflow.\r\n                while (true) {\r\n                    curr--;\r\n                    ownership = _ownerships[curr];\r\n                    if (ownership.addr != address(0)) {\r\n                        return ownership;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        revert(\"ERC721A: unable to determine the owner of token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return ownershipOf(tokenId).addr;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (string memory)\r\n    {\r\n        string memory baseURI = _baseURI();\r\n        return\r\n            bytes(baseURI).length > 0\r\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n                : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the baseURI and the tokenId. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public override {\r\n        address owner = ERC721A.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721A: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId, owner);\r\n    }\r\n\r\n    function batchApprove(address to, uint256[] memory tokenIds) public {\r\n        for (uint256 i; i < tokenIds.length; i++) {\r\n            address owner = ERC721A.ownerOf(tokenIds[i]);\r\n            require(to != owner, \"ERC721A: approval to current owner\");\r\n\r\n            require(\r\n                _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n                \"ERC721A: approve caller is not owner nor approved for all\"\r\n            );\r\n\r\n            _approve(to, tokenIds[i], owner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721A: approved query for nonexistent token\"\r\n        );\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721A: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    function _burn(uint256 tokenId) public {\r\n        require(msg.sender == ownerOf(tokenId), \"it's not owner\");\r\n        setApprovalForAll(address(this), true);\r\n        transferFrom(ownerOf(tokenId), address(0), tokenId);\r\n        burnedCount++;\r\n        burned[tokenId] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public override {\r\n        //require(_tokenApprovals[tokenId] == _msgSender(), \"Not approved for this address\");\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public override {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether tokenId exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (_mint),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _startTokenId() <= tokenId && tokenId < currentIndex;\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bool isAdminMint\r\n    ) internal {\r\n        _safeMint(to, quantity, isAdminMint, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints quantity tokens and transfers them to to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - there must be quantity tokens remaining unminted in the total collection.\r\n     * - to cannot be the zero address.\r\n     * - quantity cannot be larger than the max batch size.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bool isAdminMint,\r\n        bytes memory _data\r\n    ) internal {\r\n        uint256 startTokenId = currentIndex;\r\n        require(to != address(0), \"ERC721A: mint to the zero address\");\r\n        // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\r\n        require(!_exists(startTokenId), \"ERC721A: token already minted\");\r\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        AddressData memory addressData = _addressData[to];\r\n        _addressData[to] = AddressData(\r\n            addressData.balance + uint128(quantity),\r\n            addressData.numberMinted + (isAdminMint ? 0 : uint128(quantity))\r\n        );\r\n\r\n        uint256 updatedIndex = startTokenId;\r\n\r\n        for (uint256 i = 0; i < quantity; i++) {\r\n            _ownerships[updatedIndex] = TokenOwnership(\r\n                to,\r\n                uint64(block.timestamp)\r\n            );\r\n            emit Transfer(address(0), to, updatedIndex);\r\n            require(\r\n                _checkOnERC721Received(address(0), to, updatedIndex, _data),\r\n                \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n            );\r\n\r\n            updatedIndex++;\r\n        }\r\n\r\n        currentIndex = updatedIndex;\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokenId from from to to.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - to cannot be the zero address.\r\n     * - tokenId token must be owned by from.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\r\n\r\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\r\n            getApproved(tokenId) == _msgSender() ||\r\n            isApprovedForAll(prevOwnership.addr, _msgSender()));\r\n\r\n        require(\r\n            isApprovedOrOwner,\r\n            \"ERC721A: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        require(\r\n            prevOwnership.addr == from,\r\n            \"ERC721A: transfer from incorrect owner\"\r\n        );\r\n        //require(to != address(0), \"ERC721A: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId, prevOwnership.addr);\r\n\r\n        _addressData[from].balance -= 1;\r\n        _addressData[to].balance += 1;\r\n        _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\r\n\r\n        // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\r\n        // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\r\n        uint256 nextTokenId = tokenId + 1;\r\n        if (_ownerships[nextTokenId].addr == address(0)) {\r\n            if (_exists(nextTokenId)) {\r\n                _ownerships[nextTokenId] = TokenOwnership(\r\n                    prevOwnership.addr,\r\n                    prevOwnership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve to to operate on tokenId\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(\r\n        address to,\r\n        uint256 tokenId,\r\n        address owner\r\n    ) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    uint256 public nextOwnerToExplicitlySet = 0;\r\n\r\n    /**\r\n     * @dev Explicitly set owners to eliminate loops in future calls of ownerOf().\r\n     */\r\n    function _setOwnersExplicit(uint256 quantity) internal {\r\n        uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\r\n        require(quantity > 0, \"quantity must be nonzero\");\r\n        if (currentIndex == _startTokenId()) revert(\"No Tokens Minted Yet\");\r\n\r\n        uint256 endIndex = oldNextOwnerToSet + quantity - 1;\r\n        if (endIndex > collectionSize - 1) {\r\n            endIndex = collectionSize - 1;\r\n        }\r\n        // We know if the last one in the group exists, all in the group exist, due to serial ordering.\r\n        require(_exists(endIndex), \"not enough minted yet for this cleanup\");\r\n        for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\r\n            if (_ownerships[i].addr == address(0)) {\r\n                TokenOwnership memory ownership = ownershipOf(i);\r\n                _ownerships[i] = TokenOwnership(\r\n                    ownership.addr,\r\n                    ownership.startTimestamp\r\n                );\r\n            }\r\n        }\r\n        nextOwnerToExplicitlySet = endIndex + 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n                IERC721Receiver(to).onERC721Received(\r\n                    _msgSender(),\r\n                    from,\r\n                    tokenId,\r\n                    _data\r\n                )\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\r\n                        \"ERC721A: transfer to non ERC721Receiver implementer\"\r\n                    );\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When from and to are both non-zero, from's tokenId will be\r\n     * transferred to to.\r\n     * - When from is zero, tokenId will be minted for to.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when from and to are both non-zero.\r\n     * - from and to are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}