{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/StakingAggregator.sol": {
      "content": "// SPDX-License-Identifier: NONE\npragma solidity 0.8.17;\nimport \"../interfaces/RocketStorage.sol\";\nimport \"../interfaces/RocketDepositPool.sol\";\nimport \"../interfaces/RocketTokenRETH.sol\";\nimport \"../interfaces/RocketDAOProtocolSettingsDepositInterface.sol\";\nimport \"../interfaces/RocketVault.sol\";\nimport \"../interfaces/ILido.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title A staking aggregation contract for RocketPool and Lido\n/// @author Jack Clancy - Consensys\ncontract StakingAggregator is Ownable2Step, ReentrancyGuard, Pausable {\n    using Address for address payable;\n\n    RocketStorageInterface immutable rocketStorage;\n    LidoInterface public immutable lidoProxyAddress;\n    address public immutable lidoReferralAddress;\n    uint256 public fee; // fee in 1/10th of bps\n    uint256 public constant MAX_FEE = 2000; // maxFee in 1/10th of bps - 2% or 200bps\n    uint256 public constant FEE_BASE = 100000;\n    address payable public feesRecipient;\n\n    constructor(\n        address _owner,\n        address _lidoReferralAddress,\n        RocketStorageInterface _rocketStorageAddress,\n        LidoInterface _lidoProxyAddress,\n        uint256 _fee,\n        address payable _feesRecipient\n    ) {\n        _transferOwnership(_owner);\n        lidoReferralAddress = _lidoReferralAddress;\n        rocketStorage = _rocketStorageAddress;\n        lidoProxyAddress = _lidoProxyAddress;\n        fee = _fee;\n        feesRecipient = _feesRecipient;\n    }\n\n    error TransferFailed(address recipient, uint256 amount);\n    error NoTokensMinted(address recipient);\n    error FeeTooHigh(uint256 fee);\n    error ContractNotFound();\n    error InvalidFeesRecipient(address attemptedRecipient);\n    error IncompatibleFeeRate(uint256 contractRate, uint256 permittedRate);\n\n    event FeeUpdated(uint256 _newFee);\n    event FeesRecipientUpdated(address recipient);\n\n    /// @notice Deposits ETH to Lido and forwards minted stETH to caller\n    function depositToLido(uint256 maxFeeRate) external payable nonReentrant whenNotPaused {\n        // Check that user has allowed the fee rate\n        if (maxFeeRate < fee) revert IncompatibleFeeRate(fee, maxFeeRate);\n        // Forward deposit minus fee to Lido & get amount of stETH\n        uint256 sharesMinted = lidoProxyAddress.submit{value: msg.value - ((msg.value * fee) / FEE_BASE)}(\n            lidoReferralAddress\n        );\n        if (sharesMinted == 0) revert NoTokensMinted(msg.sender);\n        // Forward minted stETH back to user\n        if (lidoProxyAddress.transferShares(msg.sender, sharesMinted) == 0)\n            revert TransferFailed(msg.sender, sharesMinted);\n        // Withdraw fee\n        if (address(this).balance != 0) feesRecipient.sendValue(address(this).balance);        \n    }\n\n    /// @notice Deposits ETH to RocketPool and forwards minted rETH to caller\n    function depositToRP(uint256 maxFeeRate) external payable nonReentrant whenNotPaused {\n        // Check that user has allowed the fee rate\n        if (maxFeeRate < fee) revert IncompatibleFeeRate(fee, maxFeeRate);\n        // Load contracts\n        address rocketDepositPoolAddress = getContractAddress(\n            \"rocketDepositPool\"\n        );\n        RocketDepositPoolInterface rocketDepositPool = RocketDepositPoolInterface(\n                rocketDepositPoolAddress\n            );\n        address rocketTokenRETHAddress = getContractAddress(\"rocketTokenRETH\");\n        RocketTokenRETHInterface rocketTokenRETH = RocketTokenRETHInterface(\n            rocketTokenRETHAddress\n        );\n        // Forward deposit minus fee to RP & get amount of rETH minted\n        uint256 rethBalance1 = rocketTokenRETH.balanceOf(address(this));\n        rocketDepositPool.deposit{value: msg.value - ((msg.value * fee) / FEE_BASE)}();\n        uint256 rethBalance2 = rocketTokenRETH.balanceOf(address(this));\n        if (rethBalance2 <= rethBalance1) revert NoTokensMinted(msg.sender);\n        uint256 rethMinted = rethBalance2 - rethBalance1;\n        // Forward minted rETH back to user\n        if (!rocketTokenRETH.transfer(msg.sender, rethMinted))\n            revert TransferFailed(msg.sender, rethMinted);\n        // Withdraw fee\n        if (address(this).balance != 0) feesRecipient.sendValue(address(this).balance);        \n    }\n\n    /// @notice Updates the fee for staking transactions\n    /// @dev Fee is in 0.1bp increments. i.e. fee = 10 is setting to 1bp\n    /// @param _newFee The new fee for future transactions\n    function updateFee(uint256 _newFee) external onlyOwner {\n        if (_newFee > MAX_FEE) revert FeeTooHigh(_newFee);\n        fee = _newFee;\n        emit FeeUpdated(_newFee);\n    }\n\n    /// @notice Updates the recipient of the fees collected by the contract\n    /// @param _newFeesRecipent The recipient of future fees\n    function updateFeesRecipient(address payable _newFeesRecipent)\n        external\n        onlyOwner\n    {\n        if (_newFeesRecipent == address(0))\n            revert InvalidFeesRecipient(_newFeesRecipent);\n        feesRecipient = _newFeesRecipent;\n        emit FeesRecipientUpdated(_newFeesRecipent);\n    }\n\n    /// @notice Returns several RocketPool constants that the FE needs\n    /// @dev Deposit fee in wei. Number needs to be divided by 1e18 to get in percentage\n    function fetchRPConstants() external view returns (uint256[4] memory) {\n        address rocketTokenRETHAddress = getContractAddress(\"rocketTokenRETH\");\n        address rocketDAOSettingsAddress = getContractAddress(\n            \"rocketDAOProtocolSettingsDeposit\"\n        );\n        address rocketVaultAddress = getContractAddress(\"rocketVault\");\n        RocketDAOProtocolSettingsDepositInterface rocketDAOProtocolSettingsDeposit = RocketDAOProtocolSettingsDepositInterface(\n                rocketDAOSettingsAddress\n            );\n        RocketVaultInterface rocketVault = RocketVaultInterface(\n            rocketVaultAddress\n        );\n        RocketTokenRETHInterface rocketTokenRETH = RocketTokenRETHInterface(\n            rocketTokenRETHAddress\n        );\n        uint256 currentDeposits = rocketVault.balanceOf(\"rocketDepositPool\");\n        uint256 depositFee = rocketDAOProtocolSettingsDeposit.getDepositFee();\n        uint256 depositPoolCap = rocketDAOProtocolSettingsDeposit\n            .getMaximumDepositPoolSize();\n        uint256 exchangeRate = rocketTokenRETH.getExchangeRate();\n        return [currentDeposits, depositFee, depositPoolCap, exchangeRate];\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /// @dev Get the address of a RocketPool network contract by name\n    function getContractAddress(string memory _contractName)\n        internal\n        view\n        returns (address)\n    {\n        address contractAddress = rocketStorage.getAddress(\n            keccak256(abi.encodePacked(\"contract.address\", _contractName))\n        );\n        if (contractAddress == address(0)) revert ContractNotFound();\n        return contractAddress;\n    }\n\n    /// @notice Recovers arbitrary ERC-20 tokens in case any mistakenly get sent to contract\n    /// @param tokenAddress address of the token to be sent\n    /// @param tokenAmount amount of token to be sent\n    /// @param recipient recipient of tokens \n    function recoverERC20(address tokenAddress, uint256 tokenAmount, address recipient) public virtual onlyOwner {\n        IERC20(tokenAddress).transfer(recipient, tokenAmount);\n    }\n\n}\n"
    },
    "interfaces/ILido.sol": {
      "content": "pragma solidity >0.4.24 <0.9.0;\n// SPDX-License-Identifier: GPL-3.0\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Liquid staking pool\n *\n * For the high-level description of the pool operation please refer to the paper.\n * Pool manages withdrawal keys and fees. It receives ether submitted by users on the ETH 1 side\n * and stakes it via the deposit_contract.sol contract. It doesn't hold ether on it's balance,\n * only a small portion (buffer) of it.\n * It also mints new tokens for rewards generated at the ETH 2.0 side.\n *\n * At the moment withdrawals are not possible in the beacon chain and there's no workaround.\n * Pool will be upgraded to an actual implementation when withdrawals are enabled\n * (Phase 1.5 or 2 of Eth2 launch, likely late 2022 or 2023).\n */\ninterface LidoInterface is IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function getTotalShares() external view returns (uint256);\n\n    /**\n     * @notice Stop pool routine operations\n     */\n    function stop() external;\n\n    /**\n     * @notice Resume pool routine operations\n     */\n    function resume() external;\n\n    /**\n     * @notice Stops accepting new Ether to the protocol\n     *\n     * @dev While accepting new Ether is stopped, calls to the `submit` function,\n     * as well as to the default payable function, will revert.\n     *\n     * Emits `StakingPaused` event.\n     */\n    function pauseStaking() external;\n\n    /**\n     * @notice Resumes accepting new Ether to the protocol (if `pauseStaking` was called previously)\n     * NB: Staking could be rate-limited by imposing a limit on the stake amount\n     * at each moment in time, see `setStakingLimit()` and `removeStakingLimit()`\n     *\n     * @dev Preserves staking limit if it was set previously\n     *\n     * Emits `StakingResumed` event\n     */\n    function resumeStaking() external;\n\n    /**\n     * @notice Sets the staking rate limit\n     *\n     * @dev Reverts if:\n     * - `_maxStakeLimit` == 0\n     * - `_maxStakeLimit` >= 2^96\n     * - `_maxStakeLimit` < `_stakeLimitIncreasePerBlock`\n     * - `_maxStakeLimit` / `_stakeLimitIncreasePerBlock` >= 2^32 (only if `_stakeLimitIncreasePerBlock` != 0)\n     *\n     * Emits `StakingLimitSet` event\n     *\n     * @param _maxStakeLimit max stake limit value\n     * @param _stakeLimitIncreasePerBlock stake limit increase per single block\n     */\n    function setStakingLimit(\n        uint256 _maxStakeLimit,\n        uint256 _stakeLimitIncreasePerBlock\n    ) external;\n\n    /**\n     * @notice Removes the staking rate limit\n     *\n     * Emits `StakingLimitRemoved` event\n     */\n    function removeStakingLimit() external;\n\n    /**\n     * @notice Check staking state: whether it's paused or not\n     */\n    function isStakingPaused() external view returns (bool);\n\n    /**\n     * @notice Returns how much Ether can be staked in the current block\n     * @dev Special return values:\n     * - 2^256 - 1 if staking is unlimited;\n     * - 0 if staking is paused or if limit is exhausted.\n     */\n    function getCurrentStakeLimit() external view returns (uint256);\n\n    /**\n     * @notice Returns full info about current stake limit params and state\n     * @dev Might be used for the advanced integration requests.\n     * @return isStakingPaused staking pause state (equivalent to return of isStakingPaused())\n     * @return isStakingLimitSet whether the stake limit is set\n     * @return currentStakeLimit current stake limit (equivalent to return of getCurrentStakeLimit())\n     * @return maxStakeLimit max stake limit\n     * @return maxStakeLimitGrowthBlocks blocks needed to restore max stake limit from the fully exhausted state\n     * @return prevStakeLimit previously reached stake limit\n     * @return prevStakeBlockNumber previously seen block number\n     */\n    function getStakeLimitFullInfo()\n        external\n        view\n        returns (\n            bool isStakingPaused,\n            bool isStakingLimitSet,\n            uint256 currentStakeLimit,\n            uint256 maxStakeLimit,\n            uint256 maxStakeLimitGrowthBlocks,\n            uint256 prevStakeLimit,\n            uint256 prevStakeBlockNumber\n        );\n\n    event Stopped();\n    event Resumed();\n\n    event StakingPaused();\n    event StakingResumed();\n    event StakingLimitSet(\n        uint256 maxStakeLimit,\n        uint256 stakeLimitIncreasePerBlock\n    );\n    event StakingLimitRemoved();\n\n    /**\n     * @notice Set Lido protocol contracts (oracle, treasury, insurance fund).\n     * @param _oracle oracle contract\n     * @param _treasury treasury contract\n     * @param _insuranceFund insurance fund contract\n     */\n    function setProtocolContracts(\n        address _oracle,\n        address _treasury,\n        address _insuranceFund\n    ) external;\n\n    event ProtocolContactsSet(\n        address oracle,\n        address treasury,\n        address insuranceFund\n    );\n\n    /**\n     * @notice Set fee rate to `_feeBasisPoints` basis points.\n     * The fees are accrued when:\n     * - oracles report staking results (beacon chain balance increase)\n     * - validators gain execution layer rewards (priority fees and MEV)\n     * @param _feeBasisPoints Fee rate, in basis points\n     */\n    function setFee(uint16 _feeBasisPoints) external;\n\n    /**\n     * @notice Set fee distribution\n     * @param _treasuryFeeBasisPoints basis points go to the treasury,\n     * @param _insuranceFeeBasisPoints basis points go to the insurance fund,\n     * @param _operatorsFeeBasisPoints basis points go to node operators.\n     * @dev The sum has to be 10 000.\n     */\n    function setFeeDistribution(\n        uint16 _treasuryFeeBasisPoints,\n        uint16 _insuranceFeeBasisPoints,\n        uint16 _operatorsFeeBasisPoints\n    ) external;\n\n    /**\n     * @notice Returns staking rewards fee rate\n     */\n    function getFee() external view returns (uint16 feeBasisPoints);\n\n    /**\n     * @notice Returns fee distribution proportion\n     */\n    function getFeeDistribution()\n        external\n        view\n        returns (\n            uint16 treasuryFeeBasisPoints,\n            uint16 insuranceFeeBasisPoints,\n            uint16 operatorsFeeBasisPoints\n        );\n\n    event FeeSet(uint16 feeBasisPoints);\n\n    event FeeDistributionSet(\n        uint16 treasuryFeeBasisPoints,\n        uint16 insuranceFeeBasisPoints,\n        uint16 operatorsFeeBasisPoints\n    );\n\n    /**\n     * @notice A payable function supposed to be called only by LidoExecutionLayerRewardsVault contract\n     * @dev We need a dedicated function because funds received by the default payable function\n     * are treated as a user deposit\n     */\n    function receiveELRewards() external payable;\n\n    // The amount of ETH withdrawn from LidoExecutionLayerRewardsVault contract to Lido contract\n    event ELRewardsReceived(uint256 amount);\n\n    /**\n     * @dev Sets limit on amount of ETH to withdraw from execution layer rewards vault per LidoOracle report\n     * @param _limitPoints limit in basis points to amount of ETH to withdraw per LidoOracle report\n     */\n    function setELRewardsWithdrawalLimit(uint16 _limitPoints) external;\n\n    // Percent in basis points of total pooled ether allowed to withdraw from LidoExecutionLayerRewardsVault per LidoOracle report\n    event ELRewardsWithdrawalLimitSet(uint256 limitPoints);\n\n    /**\n     * @notice Set credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched to `_withdrawalCredentials`\n     * @dev Note that setWithdrawalCredentials discards all unused signing keys as the signatures are invalidated.\n     * @param _withdrawalCredentials withdrawal credentials field as defined in the Ethereum PoS consensus specs\n     */\n    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external;\n\n    /**\n     * @notice Returns current credentials to withdraw ETH on ETH 2.0 side after the phase 2 is launched\n     */\n    function getWithdrawalCredentials() external view returns (bytes memory);\n\n    event WithdrawalCredentialsSet(bytes32 withdrawalCredentials);\n\n    /**\n     * @dev Sets the address of LidoExecutionLayerRewardsVault contract\n     * @param _executionLayerRewardsVault Execution layer rewards vault contract address\n     */\n    function setELRewardsVault(address _executionLayerRewardsVault) external;\n\n    // The `executionLayerRewardsVault` was set as the execution layer rewards vault for Lido\n    event ELRewardsVaultSet(address executionLayerRewardsVault);\n\n    /**\n     * @notice Ether on the ETH 2.0 side reported by the oracle\n     * @param _epoch Epoch id\n     * @param _eth2balance Balance in wei on the ETH 2.0 side\n     */\n    function handleOracleReport(uint256 _epoch, uint256 _eth2balance) external;\n\n    // User functions\n\n    /**\n     * @notice Adds eth to the pool\n     * @return StETH Amount of StETH generated\n     */\n    function submit(address _referral) external payable returns (uint256 StETH);\n\n    // Records a deposit made by a user\n    event Submitted(address indexed sender, uint256 amount, address referral);\n\n    // The `amount` of ether was sent to the deposit_contract.deposit function\n    event Unbuffered(uint256 amount);\n\n    // Requested withdrawal of `etherAmount` to `pubkeyHash` on the ETH 2.0 side, `tokenAmount` burned by `sender`,\n    // `sentFromBuffer` was sent on the current Ethereum side.\n    event Withdrawal(\n        address indexed sender,\n        uint256 tokenAmount,\n        uint256 sentFromBuffer,\n        bytes32 indexed pubkeyHash,\n        uint256 etherAmount\n    );\n\n    // Info functions\n\n    /**\n     * @notice Gets the amount of Ether controlled by the system\n     */\n    function getTotalPooledEther() external view returns (uint256);\n\n    /**\n     * @notice Moves `_sharesAmount` token shares from the caller's account to the `_recipient` account.\n     *\n     * @return amount of transferred tokens.\n     * Emits a `TransferShares` event.\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `_recipient` cannot be the zero address.\n     * - the caller must have at least `_sharesAmount` shares.\n     * - the contract must not be paused.\n     *\n     * @dev The `_sharesAmount` argument is the amount of shares, not tokens.\n     */\n    function transferShares(address _recipient, uint256 _sharesAmount)\n        external\n        returns (uint256);\n\n    /**\n     * @return the amount of Ether that corresponds to `_sharesAmount` token shares.\n     */\n    function getPooledEthByShares(uint256 _sharesAmount)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Gets the amount of Ether temporary buffered on this contract balance\n     */\n    function getBufferedEther() external view returns (uint256);\n\n    /**\n     * @notice Returns the key values related to Beacon-side\n     * @return depositedValidators - number of deposited validators\n     * @return beaconValidators - number of Lido's validators visible in the Beacon state, reported by oracles\n     * @return beaconBalance - total amount of Beacon-side Ether (sum of all the balances of Lido validators)\n     */\n    function getBeaconStat()\n        external\n        view\n        returns (\n            uint256 depositedValidators,\n            uint256 beaconValidators,\n            uint256 beaconBalance\n        );\n}\n"
    },
    "interfaces/RocketDAOProtocolSettingsDepositInterface.sol": {
      "content": "pragma solidity >0.5.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketDAOProtocolSettingsDepositInterface {\n    function getDepositEnabled() external view returns (bool);\n\n    function getAssignDepositsEnabled() external view returns (bool);\n\n    function getMinimumDeposit() external view returns (uint256);\n\n    function getMaximumDepositPoolSize() external view returns (uint256);\n\n    function getMaximumDepositAssignments() external view returns (uint256);\n\n    function getDepositFee() external view returns (uint256);\n}\n"
    },
    "interfaces/RocketDepositPool.sol": {
      "content": "pragma solidity >0.5.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketDepositPoolInterface {\n    function getBalance() external view returns (uint256);\n\n    function getExcessBalance() external view returns (uint256);\n\n    function deposit() external payable;\n\n    function recycleDissolvedDeposit() external payable;\n\n    function recycleExcessCollateral() external payable;\n\n    function recycleLiquidatedStake() external payable;\n\n    function assignDeposits() external;\n\n    function withdrawExcessBalance(uint256 _amount) external;\n}\n"
    },
    "interfaces/RocketStorage.sol": {
      "content": "pragma solidity >0.5.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\ninterface RocketStorageInterface {\n    // Deploy status\n    function getDeployedStatus() external view returns (bool);\n\n    // Guardian\n    function getGuardian() external view returns (address);\n\n    function setGuardian(address _newAddress) external;\n\n    function confirmGuardian() external;\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n\n    function getUint(bytes32 _key) external view returns (uint256);\n\n    function getString(bytes32 _key) external view returns (string memory);\n\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n\n    function getBool(bytes32 _key) external view returns (bool);\n\n    function getInt(bytes32 _key) external view returns (int256);\n\n    function getBytes32(bytes32 _key) external view returns (bytes32);\n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n\n    function setUint(bytes32 _key, uint256 _value) external;\n\n    function setString(bytes32 _key, string calldata _value) external;\n\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n\n    function setBool(bytes32 _key, bool _value) external;\n\n    function setInt(bytes32 _key, int256 _value) external;\n\n    function setBytes32(bytes32 _key, bytes32 _value) external;\n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n\n    function deleteUint(bytes32 _key) external;\n\n    function deleteString(bytes32 _key) external;\n\n    function deleteBytes(bytes32 _key) external;\n\n    function deleteBool(bytes32 _key) external;\n\n    function deleteInt(bytes32 _key) external;\n\n    function deleteBytes32(bytes32 _key) external;\n\n    // Arithmetic\n    function addUint(bytes32 _key, uint256 _amount) external;\n\n    function subUint(bytes32 _key, uint256 _amount) external;\n\n    // Protected storage\n    function getNodeWithdrawalAddress(address _nodeAddress)\n        external\n        view\n        returns (address);\n\n    function getNodePendingWithdrawalAddress(address _nodeAddress)\n        external\n        view\n        returns (address);\n\n    function setWithdrawalAddress(\n        address _nodeAddress,\n        address _newWithdrawalAddress,\n        bool _confirm\n    ) external;\n\n    function confirmWithdrawalAddress(address _nodeAddress) external;\n}\n"
    },
    "interfaces/RocketTokenRETH.sol": {
      "content": "pragma solidity >0.5.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface RocketTokenRETHInterface is IERC20 {\n    function getEthValue(uint256 _rethAmount) external view returns (uint256);\n\n    function getRethValue(uint256 _ethAmount) external view returns (uint256);\n\n    function getExchangeRate() external view returns (uint256);\n\n    function getTotalCollateral() external view returns (uint256);\n\n    function getCollateralRate() external view returns (uint256);\n\n    function depositExcess() external payable;\n\n    function depositExcessCollateral() external;\n\n    function mint(uint256 _ethAmount, address _to) external;\n\n    function burn(uint256 _rethAmount) external;\n}\n"
    },
    "interfaces/RocketVault.sol": {
      "content": "pragma solidity >0.5.0 <0.9.0;\n\n// SPDX-License-Identifier: GPL-3.0-only\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ninterface RocketVaultInterface {\n    function balanceOf(string memory _networkContractName)\n        external\n        view\n        returns (uint256);\n\n    function depositEther() external payable;\n\n    function withdrawEther(uint256 _amount) external;\n\n    function depositToken(\n        string memory _networkContractName,\n        IERC20 _tokenAddress,\n        uint256 _amount\n    ) external;\n\n    function withdrawToken(\n        address _withdrawalAddress,\n        IERC20 _tokenAddress,\n        uint256 _amount\n    ) external;\n\n    function balanceOfToken(\n        string memory _networkContractName,\n        IERC20 _tokenAddress\n    ) external view returns (uint256);\n\n    function transferToken(\n        string memory _networkContractName,\n        IERC20 _tokenAddress,\n        uint256 _amount\n    ) external;\n\n    function burnToken(ERC20Burnable _tokenAddress, uint256 _amount) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}