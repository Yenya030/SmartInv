{{
  "language": "Solidity",
  "sources": {
    "contracts/FinanceDept.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/**\n * @title SalaryDept v1.2\n *  \n *  This contract determines salaries + pay schedule\n *  \n * @dev\n * - Upon deployment\n *   - In Jobs contract, set FinanceDept address as MINTER role \n *   - In Jobs contract, update address for FinanceDept\n *   - In ERC20 contract, add FinaceDept address as MINTER role\n *   - In FinanceDept contract, update address for Jobs\n *   - In FinanceDept contract, update address for Salaries\n *   - In FinanceDept contract, update Regular Token address\n */\n\nimport \"./Salaries.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ninterface JobsInterface {\n    function setTimestamp(uint _jobId, uint _timestamp) external;\n    function sameOwner(uint _jobId) external view returns (bool);\n    function getTimestamp(uint _jobId) external view returns (uint);\n    function getCompanyId(uint _jobId) external view returns (uint);\n    function getRegId(uint _jobId) external view returns (uint);\n    function isUnassigned(uint _jobId) external view returns (bool);\n    function getCapacity(uint _companyId) external view returns (uint);\n    function ownerOfReg(uint _regId) external view returns (address);\n    function ownerOf(uint _jobId) external view returns (address);\n}\n\ninterface RegularTokenInterface {\n        function mint(address to, uint256 amount) external; \n}\n\ncontract FinanceDept is AccessControl, Pausable {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    uint public payDuration = 1 weeks;\n    uint public maxClaimTime = 24 weeks;\n    uint public maxClaimAmount = 1 ether;\n\tRegularTokenInterface regularsToken;\n    JobsInterface jobs;\n    Salaries salaries;\n\n    event Claimed (address wallet, uint amount);\n\n    constructor() { \n\t    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t    _grantRole(MINTER_ROLE, msg.sender);\n        regularsToken = RegularTokenInterface(0x78b5C6149C87c82EDCffC73C230395abbc56DdD5);  \n        setJobsByAddr(0x878ADc4eF1948180434005D6f2Eb91f0AF3E0d15);\n        setSalariesByAddr(0xF77b7020CFBe496be6E3662a0e81C0c50C2651AC); \n    }\n\n// View Functions\n\n    function unclaimedDuration(uint _jobId) public view returns (uint) {\n        uint _duration = block.timestamp - jobs.getTimestamp(_jobId);\n        return Math.min(_duration, maxClaimTime);\n    }\n\n    function unclaimedByJob(uint _jobId) public view returns (uint) {\n        return salaries.salary(_jobId) * unclaimedDuration(_jobId) / payDuration;\n    } \n\n    // Accepts a 2D array, with the first element of each sub-array being the companyId -- in numerical order\n    function salariesWithBonus(uint[][] memory _sortedIds) public view returns (uint,uint) {\n        uint _numCompanies = _sortedIds.length;\n        uint _salaries = 0;\n        uint _salariesWithBonus;\n        for (uint i = 0; i < _numCompanies; i++) {\n            uint _companyId = _sortedIds[i][0];\n            uint _companySalaries = 0;\n            require(i == 0 || _sortedIds[i-1][0] < _sortedIds[i][0], \"Company IDs must be sequential\");\n            for (uint j = 1; j < _sortedIds[i].length; j++) {\n                uint _jobId = _sortedIds[i][j];\n                require(j == 1 || _sortedIds[i][j-1] < _sortedIds[i][j], \"Ids must be sequential\");\n                require(jobs.getCompanyId(_jobId) == _companyId, \"Not all same company id\");\n                require(!jobs.isUnassigned(_jobId),\"No reg working the job\");\n                _companySalaries += salaries.salary(_jobId);\n            }\n            _salaries += _companySalaries;\n            _salariesWithBonus += salaries.teamworkBonus(_companySalaries, _sortedIds[i].length - 1, jobs.getCapacity(_companyId));\n        }\n        return (_salaries, _salariesWithBonus);\n    }\n\n    // Accepts a 2D array, with the first element of each sub-array being the companyId -- in numerical order\n    function unclaimedWithBonus(uint[][] memory _sortedIds) public view returns (uint,uint) {\n        uint _numCompanies = _sortedIds.length;\n        uint _unclaimed = 0;\n        uint _unclaimedWithBonus = 0;\n        for (uint i = 0; i < _numCompanies; i++) {\n            uint _companyId = _sortedIds[i][0];\n            uint _companyUnclaimed = 0;\n            require(i == 0 || _sortedIds[i-1][0] < _sortedIds[i][0], \"Company IDs must be sequential\");\n            for (uint j = 1; j < _sortedIds[i].length; j++) {\n                uint _jobId = _sortedIds[i][j];\n                require(j == 1 || _sortedIds[i][j-1] < _sortedIds[i][j], \"Ids must be sequential\");\n                require(jobs.getCompanyId(_jobId) == _companyId, \"Not all same company id\");\n                require(!jobs.isUnassigned(_jobId),\"No reg working the job\");\n                _companyUnclaimed += unclaimedByJob(_jobId);\n            }\n            _unclaimed += _companyUnclaimed;\n            _unclaimedWithBonus += salaries.teamworkBonus(_companyUnclaimed, _sortedIds[i].length - 1, jobs.getCapacity(_companyId));\n        }\n        return (_unclaimed, _unclaimedWithBonus);\n    }\n\n// CLAIM\n\n    function claimByJob(uint _jobId, address _ownerAddr) public whenNotPaused {\n        require(jobs.ownerOf(_jobId) == _ownerAddr, \"Not the owner of this job\");\n        require(!jobs.isUnassigned(_jobId),\"No reg working the job\");\n        require(jobs.ownerOfReg(jobs.getRegId(_jobId)) == _ownerAddr,\"This address doesn't own assigned reg\");\n        uint _amount = unclaimedByJob(_jobId);\n        jobs.setTimestamp(_jobId, block.timestamp);\n        sendToken(_ownerAddr,_amount); // SEND THE TOKENS!\n    }\n\n    // Accepts a 2D array, with the first element of each sub-array being the companyId -- in numerical order\n    function claim(uint[][] memory _sortedIds, address _ownerAddr) public whenNotPaused {\n        uint _numCompanies = _sortedIds.length;\n        uint _unclaimedWithBonus = 0;\n        for (uint i = 0; i < _numCompanies; i++) {\n            uint _companyId = _sortedIds[i][0];\n            uint _companyUnclaimed = 0;\n            require(i == 0 || _sortedIds[i-1][0] < _sortedIds[i][0], \"Company IDs must be sequential\");\n            for (uint j = 1; j < _sortedIds[i].length; j++) {\n                uint _jobId = _sortedIds[i][j];\n                require(j == 1 || _sortedIds[i][j-1] < _sortedIds[i][j], \"Ids must be sequential\");\n                require(jobs.getCompanyId(_jobId) == _companyId, \"Not all same company id\");\n                require(jobs.ownerOf(_jobId) == _ownerAddr, \"Not the owner of this job\");\n                require(!jobs.isUnassigned(_jobId),\"No reg working the job\");\n                require(jobs.ownerOfReg(jobs.getRegId(_jobId)) == _ownerAddr,\"This address doesn't own assigned reg\");\n                _companyUnclaimed += unclaimedByJob(_jobId);\n                jobs.setTimestamp(_jobId, block.timestamp); \n            }\n            _unclaimedWithBonus += salaries.teamworkBonus(_companyUnclaimed, _sortedIds[i].length - 1, jobs.getCapacity(_companyId));\n        }\n        sendToken(_ownerAddr,_unclaimedWithBonus); // SEND THE TOKENS!\n    }\n\n// INTERNAL\n\n    function sendToken(address _addr, uint _amount) internal whenNotPaused {\n        require (_amount < maxClaimAmount, \"Exceeds max amount\");\n        regularsToken.mint(_addr,_amount);\n        emit Claimed(_addr, _amount);\n    }\n\n// ADMIN\n\n    function setMaxClaimTime(uint _maxClaimTime) public onlyRole(MINTER_ROLE) {\n        maxClaimTime = _maxClaimTime;\n    }\n\n    function setPayDuration(uint _payDuration) public onlyRole(MINTER_ROLE) {\n        payDuration = _payDuration;\n    }\n\n    function pause() public onlyRole(MINTER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(MINTER_ROLE) {\n        _unpause();\n    }\n\n// CONTRACT MANAGEMENT\n\n    // set\n\n    function setMaxClaimAmount(uint _amount) public onlyRole(MINTER_ROLE) {\n        maxClaimAmount = _amount;\n    }\n\n    function setJobsByAddr(address _addr) public onlyRole(MINTER_ROLE){\n        jobs = JobsInterface(_addr);\n    }\n\n    function setSalariesByAddr(address _addr) public onlyRole(MINTER_ROLE){\n        salaries = Salaries(_addr);\n    }\n\n    function setRegularsTokenAddr(address _addr) public onlyRole(MINTER_ROLE) {\n        regularsToken = RegularTokenInterface(_addr);\n    }\n\n    // get\n\n    function getRegularsTokenAddr() public view returns (address) {\n        return address(regularsToken);\n    }\n\n    function getSalariesAddr() public view returns (address) {\n        return address(salaries);\n    }\n\n    function getJobsAddr() public view returns (address) {\n        return address(jobs);\n    }\n}"
    },
    "contracts/Salaries.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/**\n * @title Regular Salaries v1.1\n * \n * @dev\n * - Upon deployment\n *   - Jobs Contract > Set SalariesAddress\n *   - FinanceDept > Set SalariesAddress\n */\n\nimport \"./Jobs.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract Salaries is AccessControl {\n    uint public constant RANDOM_SEED = 69;\n    uint public constant SALARY_DECIMALS = 2;\n    uint public constant MAX_TEAMWORK_BONUS = 300;\n    uint public SALARY_MULTIPLIER = 100;  // points\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    Jobs jobs;\n\n\tconstructor(address _addr) {\n\t    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t    _grantRole(MINTER_ROLE, msg.sender);\n        jobs = Jobs(_addr);\n\t}\n\n// View Functions\n\n    function basepay(uint _jobId, uint _companyBase, uint _companySpread) public view returns (uint) {\n        uint _baseSalary = _companyBase * 10 ** 18 * SALARY_MULTIPLIER / 100;\n        uint _spread = _baseSalary * _companySpread / 100;                       // Spread value before randomization\n        uint _r = uint(keccak256(abi.encodePacked(_jobId, RANDOM_SEED))) % 100;  // Random integer 0-100\n        uint _result = _baseSalary + (_r * _spread / 100) - (_spread / 2);\n        // return (_result / 10 ** SALARY_DECIMALS);            // NOT ROUNDED\n        return (_result * 4 / 10 ** 20) * 100 / 4 * 10 ** 16;   // ROUNDED\n    }\n\n    function basepay(uint _jobId) public view returns (uint) {\n        uint _companyId = jobs.getCompanyId(_jobId);\n        return basepay(_jobId, companyBase(_companyId), companySpread(_companyId)); \n    }\n\n    function seniorityBonus(uint _level, uint _basePay) public pure returns (uint) {\n        uint _bonusPercent = 0;\n        if (_level > 0)\n            _bonusPercent = (2 ** (_level - 1) * 10); \n        return _bonusPercent * _basePay / 100; \n    }\n\n    function seniorityBonus(uint _jobId) public view returns (uint) {\n        uint _seniorityLevel = jobs.getSeniorityLevel(_jobId);\n        uint _basepay = basepay(_jobId);\n        return seniorityBonus(_seniorityLevel, _basepay);\n    }\n\n    function salary(uint _jobId) public view returns (uint) {\n        uint _basepay = basepay(_jobId);\n        uint _seniorityLevel = jobs.getSeniorityLevel(_jobId);\n        uint _seniorityBonus = seniorityBonus(_seniorityLevel, _basepay);\n        uint _result = _basepay + _seniorityBonus;\n        return _result;\n    }    \n\n    function teamworkBonus(uint _numOwned, uint _capacity) public pure returns (uint) { \n        // 10% bonus for every 1% of the company that you own .. total jobs owned must be > 1\n        // returns a percent\n        uint _result = 0;\n        if (_numOwned > 1)\n          _result = (_numOwned * 100 / _capacity) * 10;\n        return Math.min(_result, MAX_TEAMWORK_BONUS);\n    }\n\n    function teamworkBonus(uint _totalSalaries, uint _numOwned, uint _capacity) public pure returns (uint) { \n        return _totalSalaries + (_totalSalaries * teamworkBonus(_numOwned, _capacity) / 100);\n    }\n\n// External calls to Jobs contract\n\n    function companyBase(uint _companyId) public view returns (uint) {\n        return jobs.getBaseSalary(_companyId);\n    }\n\n    function companySpread(uint _companyId) public view returns (uint) {\n        return jobs.getSpread(_companyId);\n    }\n\n// Admin\n\n    function setJobsAddr(address _addr) public onlyRole(MINTER_ROLE) {\n        jobs = Jobs(_addr);\n    }\n\n    function getJobsAddr() public view returns (address) {\n        return address(jobs);\n    }\n\n    function setSalaryMultiplier(uint _points) public onlyRole(MINTER_ROLE) {\n        SALARY_MULTIPLIER = _points;\n    }\n}"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/Jobs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/*          _       _         \n *         (_)     | |        \n *          _  ___ | |__  ___ \n *         | |/ _ \\| '_ \\/ __|\n *         | | (_) | |_) \\__ \\\n *         | |\\___/|_.__/|___/\n *        _/ |                \n *       |__/                       \n */     \n \nimport \"./JobTransferFunction.sol\";\nimport \"./Companies.sol\";\nimport \"./Seniority.sol\";\nimport \"./Titles.sol\";\nimport \"./FinanceDept.sol\";\nimport \"./Salaries.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract Jobs is ERC721, ERC721Royalty, AccessControl {\n    using Strings for uint256;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    string private baseURI = \"https://jobs.regular.world/cards/id/\"; \n    bool public mintOpen = false;\n\n    mapping(uint => bool) public minted;                // Regular Ids that have already claimed\n    mapping(uint => uint) public timestamps;            // timestamps for claiming salary\n    mapping(uint => uint) public companyIds;            // companyIds              \n    mapping(uint => uint) public regIds;                // Each job NFT has an assigned RegId\n    mapping(uint => uint) public jobByRegId;            // JobID by RegID\n\n    JobTransferFunction jobTransferFunction;\n    Companies companies;\n    FinanceDept financeDept;\n    Salaries salaries;\n    Seniority seniority;\n    Titles titles;\n    ERC721Enumerable regularsNFT;       \n\n    event Mint(uint jobId, uint indexed companyId, uint regularId);\n    event Update(uint jobId, uint indexed companyId, uint regularId, string name);\n    event RegularIdChange (uint256 indexed jobId, uint regId);\n    event ResetJob (uint256 indexed jobId);\n\n    constructor() ERC721(\"Regular Jobs\", \"JOBS\") {\n        _setDefaultRoyalty(msg.sender, 500);\n        regularsNFT = ERC721Enumerable(0x6d0de90CDc47047982238fcF69944555D27Ecb25);\n        salaries = new Salaries(address(this));\n        financeDept = new FinanceDept();\n        jobTransferFunction = new JobTransferFunction();\n        companies = new Companies();\n        seniority = new Seniority();\n        titles = new Titles(address(seniority));\n        financeDept.setJobsByAddr(address(this));\n        financeDept.setSalariesByAddr(address(salaries));\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, address(financeDept));\n        _grantRole(MINTER_ROLE, address(jobTransferFunction)); \n    }\n\n// Primary Functions\n\n    function safeMint(address _to, uint _regId) public {  \n        require(regularsNFT.ownerOf(_regId) == _to, \"Not your Regular\");  \n        require(!minted[_regId], \"Already claimed\");\n        require(mintOpen, \"Not minting\");\n        require(!hasJob(_regId),\"Reg is working another job\");\n        minted[_regId] = true;\n        (uint _jobId, uint _companyId) = companies.makeNewJob(_regId);\n        timestamps[_jobId] = block.timestamp;\n        companyIds[_jobId] = _companyId;\n        regIds[_jobId] = _regId;\n        jobByRegId[_regId] = _jobId;            \n        if (companies.isManager(_regId)){ // set Managers as seniority 2\n            if (seniority.level(_jobId) == 0) \n                seniority.setLevel(_jobId,2);\n            else \n                seniority.incrementLevel(_jobId);\n        }\n        _safeMint(_to, _jobId);\n        emit Mint(_jobId, _companyId, _regId);\n    }\n\n    function setRegularId(uint _jobId, uint _regId) public {\n        require(ownerOf(_jobId) == msg.sender, \"Not owner of this job.\");\n        require(regularsNFT.ownerOf(_regId) == msg.sender, \"Not owner of Regular\");\n        require(regIds[_jobId] != _regId, \"This reg already assigned to this job\");\n        require(hasJob(_regId) == false, \"This reg already assigned to another job\");\n        uint _prevRegId = regIds[_jobId];\n        regIds[_jobId] = _regId;   \n        jobByRegId[_prevRegId] = 0;             \n        jobByRegId[_regId] = _jobId;                 \n        timestamps[_jobId] = block.timestamp;                             \n        emit RegularIdChange(_jobId, _regId);\n    }\n\n    function unassignRegularId(uint _jobId) public {\n        require(ownerOf(_jobId) == msg.sender, \"Not owner of this job.\");\n        uint _oldRegId = regIds[_jobId];\n        regIds[_jobId] = 10000;   \n        jobByRegId[_oldRegId] = 0;              // SAVE REG -> JOB \n        timestamps[_jobId] = block.timestamp;                            \n        emit ResetJob(_jobId);\n    }\n\n    function safeMintMany(address _to, uint[] memory _regIds) public { \n        for (uint i; i< _regIds.length;i++){\n            safeMint(_to, _regIds[i]);\n        }\n    }\n\n// Admin Functions\n\n    function toggleMinting() public onlyRole(MINTER_ROLE) {\n        mintOpen = !mintOpen;\n    }\n\n    function setBaseURI(string memory _newPath) public onlyRole(MINTER_ROLE) {\n        baseURI = _newPath;\n    }\n\n// Other MINTER_ROLE Functions\n\n    function resetJob(uint _jobId) public onlyRole(MINTER_ROLE) {\n        uint _oldRegId = regIds[_jobId];\n        regIds[_jobId] = 10000;                 // There is no #10,000\n        jobByRegId[_oldRegId] = 0;              \n        timestamps[_jobId] = block.timestamp;   // Reset timestamp                         \n        emit ResetJob(_jobId);\n    }\n\n    function setTimestamp(uint _jobId, uint _timestamp) public onlyRole(MINTER_ROLE) {\n        timestamps[_jobId] = _timestamp;\n    }\n\n    function setCompany(uint _jobId, uint _companyId) external onlyRole(MINTER_ROLE){\n        companyIds[_jobId] = _companyId;\n    }\n\n    function setRegId(uint _jobId, uint _regId) external onlyRole(MINTER_ROLE){\n        regIds[_jobId] = _regId;\n    }\n\n    function setJobByRegId(uint _regId, uint _jobId) public onlyRole(MINTER_ROLE) {\n        jobByRegId[_regId] = _jobId;\n    }\n\n// View Functions\n\n    function sameOwner(uint _jobId) public view returns (bool) {\n        return ownerOf(_jobId) == ownerOfReg(regIds[_jobId]);\n    }\n\n    function getTimestamp(uint _jobId) public view returns (uint) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return timestamps[_jobId];\n    }\n\n    function getCompanyId(uint _jobId) public view returns (uint) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return companyIds[_jobId];\n    }\n\n    function getRegId(uint _jobId) public view returns (uint) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return regIds[_jobId];\n    }\n\n    function isUnassigned(uint _jobId) public view returns (bool) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return regIds[_jobId] == 10000; \n    }\n\n    function getJobByRegId(uint _regId) public view returns (uint) {\n        return jobByRegId[_regId];\n    }\n\n    function hasJob(uint _regId) public view returns (bool) {\n        return jobByRegId[_regId] != 0;\n    }\n\n    function getJobFullDetails(uint _jobId) public view returns (uint, uint, uint, string memory, uint, string memory){\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        uint _salary = salaries.salary(_jobId);\n        uint _regId = regIds[_jobId];\n        uint _companyId = companyIds[_jobId];\n        string memory _companyName = companies.getName(_companyId);\n        uint _seniority = seniority.level(_jobId);\n        string memory _title = titles.title(_jobId);\n        return (_salary, _regId, _companyId, _companyName, _seniority, _title);\n    }\n\n// function with external calls\n\n   function getBaseSalary(uint _companyId) public view returns (uint) { \n        return companies.getBaseSalary(_companyId);\n    }\n    \n    function getCompanyName(uint _companyId) public view returns (string memory) {\n        return companies.getName(_companyId);\n    }\n    \n    function getSpread(uint _companyId) public view returns (uint) {\n        return companies.getSpread(_companyId);\n    }\n    \n    function getCapacity(uint _companyId) public view returns (uint) {\n        return companies.getCapacity(_companyId);\n    }\n\n    function getSalary(uint _jobId) public view returns (uint) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return salaries.salary(_jobId);\n    }\n\n    function getSeniorityLevel(uint _jobId) public view returns (uint) {\n        // require(_exists(_jobId), \"Query for nonexistent token\");\n        return seniority.level(_jobId);\n    }\n\n    function title(uint _jobId) public view returns (string memory) {\n        require(_exists(_jobId), \"Query for nonexistent token\");\n        return titles.title(_jobId);\n    }\n\n    function ownerOfReg(uint _regId) public view returns (address) {\n        return regularsNFT.ownerOf(_regId);\n    }\n\n// Setting and getting contract addresses\n\n    // setting\n\n    function setContractAddr(string memory _contractName, address _addr) public onlyRole(MINTER_ROLE){\n        bytes memory _contract = bytes(_contractName);\n        if (keccak256(_contract) == keccak256(bytes(\"JobTransferFunction\"))) {\n            jobTransferFunction = JobTransferFunction(_addr);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Companies\"))) {\n            companies = Companies(_addr);\n        } else if (keccak256(_contract) == keccak256(bytes(\"FinanceDept\"))) {\n            financeDept = FinanceDept(_addr);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Seniority\"))) {\n            seniority = Seniority(_addr);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Titles\"))) {\n            titles = Titles(_addr);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Salaries\"))) {\n            salaries = Salaries(_addr);\n        } else\n            revert(\"No match found\");\n    }\n\n    // getting\n\n    function getContractAddr(string memory _contractName) public view returns (address) {\n        bytes memory _contract = bytes(_contractName);\n        if (keccak256(_contract) == keccak256(bytes(\"JobTransferFunction\"))) {\n            return address(jobTransferFunction);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Companies\"))) {\n            return address(companies);\n        } else if (keccak256(_contract) == keccak256(bytes(\"FinanceDept\"))) {\n            return address(financeDept);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Seniority\"))) {\n            return address(seniority);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Titles\"))) {\n            return address(titles);\n        } else if (keccak256(_contract) == keccak256(bytes(\"Salaries\"))) {\n            return address(salaries);\n        } else\n            revert(\"None found\");\n    }\n\n    function setDefaultRoyalty(address _receiver, uint96 feeNumerator) public onlyRole(MINTER_ROLE){\n        super._setDefaultRoyalty(_receiver, feeNumerator);\n    }\n\n// Overrides\n\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\n        require(_exists(tokenId), \"Query for nonexistent token\");\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721) {\n        if (from != address(0)){ // if not minting, then reset on transfer\n            jobTransferFunction.jobTransfer(from,to,tokenId); \n        }\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, AccessControl, ERC721Royalty) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721Royalty) {\n        super._burn(tokenId);\n    }\n\n// Proxy Methods\n\n    function allRegularsByAddress(address _wallet) public view returns(uint[] memory){\n        uint[] memory nfts = new uint[](regularsNFT.balanceOf(_wallet));\n        for (uint i = 0; i < nfts.length;i++){\n            nfts[i] = regularsNFT.tokenOfOwnerByIndex(_wallet, i);\n        }\n        return nfts;\n    }\n\n    // Should we set a limit here?\n    function unmintedByAddress(address _wallet) public view returns(uint[] memory){\n        uint unmintedCount = 0;\n        // scan through all regs and count the unminted ones\n        for (uint i = 0; i < regularsNFT.balanceOf(_wallet);i++){\n            uint _regId = regularsNFT.tokenOfOwnerByIndex(_wallet, i);\n            if (!minted[_regId])\n                unmintedCount++;\n        }\n        // add unminted to the array\n        uint[] memory nfts = new uint[](unmintedCount);\n        for (uint i = 0; i < nfts.length;i++){\n            uint _regId = regularsNFT.tokenOfOwnerByIndex(_wallet, i);\n            if (!minted[_regId])\n                nfts[i] = _regId;\n        }\n        return nfts;\n    }\n\n}\n"
    },
    "contracts/JobTransferFunction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n/**\n * @title Transfer Function v1.12\n *\n * This function is called when a Job NFT is transferred\n * \n * - after deployment:\n *      + set MINTER roles on Jobs for JobTransferContract\n *      + set MINTER role on JobTransferContract for Jobs\n *      + set contract address on Jobs to JobTransfer Contract\n *      + set contract address on JobTransfer Contract for Jobs\n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface _JobsInterface {\n    function resetJob(uint _jobId) external;\n}\n\ncontract JobTransferFunction is AccessControl {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    address public jobsAddress = 0x878ADc4eF1948180434005D6f2Eb91f0AF3E0d15; \n\n    event TransferHook (address from, address to, uint256 indexed jobId);\n\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, tx.origin);\n        _grantRole(MINTER_ROLE, tx.origin);\n        _grantRole(MINTER_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, jobsAddress);\n    }\n\n    function jobTransfer(address from, address to, uint256 tokenId) public onlyRole(MINTER_ROLE) { \n        _JobsInterface(jobsAddress).resetJob(tokenId);\n        emit TransferHook(from, to, tokenId);\n    }\n\n    function setJobsContract(address _addr) public onlyRole(MINTER_ROLE) {\n        jobsAddress = _addr;\n    }\n\n}\n\n"
    },
    "contracts/Companies.sol": {
      "content": "pragma solidity ^0.8.12;\n// SPDX-License-Identifier: MIT\n\n/**\n * @title Regular Companies v1.0 \n */\n\nimport \"./Random.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n// \"special\" companies are for a set of Regular IDs that share a trait, like McD's workers\n// \"not-special\" companies get assigned to regular IDs randomly.\n\ncontract Companies is AccessControl {\n    using Random for Random.Manifest;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    uint public constant SALARY_DECIMALS = 2;\n    uint public SALARY_MULTIPLIER = 100;                   // basis points\n\n    struct Company {     \n        uint128 baseSalary;   \n        uint128 capacity;        \n    }\n\n    Company[60] companies;                                  // Companies by ID\n    uint16[60] indexes;                                     // the starting index of the company in array of job IDs\n    uint16[60] counts;\n    Random.Manifest private mainDeck;                       // Card deck for non-special companies\n    mapping(uint => Random.Manifest) private specialDecks;  // Card decks for special companies\n    mapping(uint => uint) private specialCompanyIds;        // Company ID by special reg ID\n    uint specialCompanyIdFlag;                              // Company ID for the first special company in the array\n    uint[] _tempArray;                                      // used for parsing special IDs\n    mapping(uint => bool) managerIds;                       // IDs of all McD's manager regs\n    mapping(uint => string) names;                          // Company Names\n\n    event jobIDCreated (uint256 regularId, uint newJobId, uint companyId, address sender);\n    \n\tconstructor() {\n\t    _grantRole(DEFAULT_ADMIN_ROLE, tx.origin);\n\t    _grantRole(MINTER_ROLE, tx.origin);\n\t    _grantRole(MINTER_ROLE, msg.sender);\n\n// Save Names\n\n        names[0] = \"RNN News\";\n        names[1] = \"AAAARP\";\n        names[2] = \"Petstore\";\n        names[3] = \"Foodtime\";\n        names[4] = \"Hats\";\n        names[5] = \"Bed Bath & Bodyworks\";\n        names[6] = \"Bugs Inc.\";\n        names[7] = \"Autoz\";\n        names[8] = \"Office Dept.\";\n        names[9] = \"Express\";\n        names[10] = \"Totally Wine\";\n        names[11] = \"Y'all\";\n        names[12] = \"5 O'clockville\";\n        names[13] = \"Nrfthrup Grrmng\";\n        names[14] = \"Mall Corp.\";\n        names[15] = \"Ice Creams\";\n        names[16] = \"Thanky Candles\";\n        names[17] = \"Hotella\";\n        names[18] = \"Berkshire Thataway\";\n        names[19] = \"Kopies\";\n        names[20] = \"Sprayers\";\n        names[21] = \"'Onuts\";\n        names[22] = \"Tax Inc.\";\n        names[23] = \"Khols\";\n        names[24] = \"Black Pebble\";\n        names[25] = \"Haircuts Inc.\";\n        names[26] = \"Global Gas\";\n        names[27] = \"Block\";\n        names[28] = \"Eyeglasses\";\n        names[29] = \"Books & Mags\";\n        names[30] = \"Meme\";\n        names[31] = \"Coin\";\n        names[32] = \"Wonder\";\n        names[33] = \"iSecurity\";\n        names[34] = \"Dairy Lady\";\n        names[35] = \"Big Deal MGMT\";\n        names[36] = \"Spotlight Talent\";\n        names[37] = \"Rock Solid Insurance\";\n        names[38] = \"Safe Shield Insurance\";\n        names[39] = \"Bit\";\n        names[40] = \"Whoppy Jrs.\";\n        names[41] = \"WGMI Inc.\";\n        names[42] = \"Global International\";\n        names[43] = \"N.E.X.T. Rugs\";\n        names[44] = \"Alpha Limited\";\n        names[45] = \"Best Shack\";\n        names[46] = \"Partners & Partners\";\n        names[47] = \"Boss E-systems\";\n        names[48] = \"Blockbusters\";\n        names[49] = \"Hexagon Research Group\";\n        names[50] = \"Crabby Shack\";\n        names[51] = \"Dollar Store\";\n        names[52] = \"UP Only\";\n        names[53] = \"Frito Pay\";\n        names[54] = \"Hot Pockets\";\n        names[55] = \"Spooky\";\n        names[56] = \"GM\";\n        names[57] = \"McDanny's\";\n        names[58] = \"Wendy's\";\n        names[59] = \"Party Place\";     \n      \n// Init companies\n        \n        companies[0] =  Company({ capacity : 212, baseSalary : 1950 });\n        companies[1] =  Company({ capacity : 350, baseSalary : 1300 });\n        companies[2] =  Company({ capacity : 120, baseSalary : 3725 });\n        companies[3] =  Company({ capacity : 144, baseSalary : 3175 });\n        companies[4] =  Company({ capacity : 168, baseSalary : 2375 });\n        companies[5] =  Company({ capacity : 160, baseSalary : 2475 });\n        companies[6] =  Company({ capacity : 100, baseSalary : 4400 });\n        companies[7] =  Company({ capacity : 184, baseSalary : 2200 });\n        companies[8] =  Company({ capacity : 500, baseSalary : 1025 });\n        companies[9] =  Company({ capacity : 188, baseSalary : 2150 });\n        companies[10] = Company({ capacity : 140, baseSalary : 3250 });\n        companies[11] = Company({ capacity :  96, baseSalary : 4575 });\n        companies[12] = Company({ capacity :  50, baseSalary : 7550 });\n        companies[13] = Company({ capacity : 192, baseSalary : 2100 });\n        companies[14] = Company({ capacity :  92, baseSalary : 4750 });\n        companies[15] = Company({ capacity : 156, baseSalary : 2525 });\n        companies[16] = Company({ capacity : 176, baseSalary : 2275 });\n        companies[17] = Company({ capacity : 148, baseSalary : 3100 });\n        companies[18] = Company({ capacity : 200, baseSalary : 2050 });\n        companies[19] = Company({ capacity : 136, baseSalary : 3350 });\n        companies[20] = Company({ capacity : 204, baseSalary : 2000 });\n        companies[21] = Company({ capacity : 104, baseSalary : 4250 });\n        companies[22] = Company({ capacity : 218, baseSalary : 1900 });\n        companies[23] = Company({ capacity :  57, baseSalary : 6675 });\n        companies[24] = Company({ capacity : 196, baseSalary : 2075 });\n        companies[25] = Company({ capacity : 206, baseSalary : 2000 });\n        companies[26] = Company({ capacity : 210, baseSalary : 1950 });\n        companies[27] = Company({ capacity :  88, baseSalary : 4950 });\n        companies[28] = Company({ capacity : 214, baseSalary : 1925 });\n        companies[29] = Company({ capacity : 242, baseSalary : 1750 });\n        companies[30] = Company({ capacity : 124, baseSalary : 3625 });\n        companies[31] = Company({ capacity : 164, baseSalary : 2425 });\n        companies[32] = Company({ capacity : 116, baseSalary : 3850 });\n        companies[33] = Company({ capacity : 180, baseSalary : 2225 });\n        companies[34] = Company({ capacity : 172, baseSalary : 2325 });\n        companies[35] = Company({ capacity : 132, baseSalary : 3425 });\n        companies[36] = Company({ capacity : 152, baseSalary : 3025 });\n        companies[37] = Company({ capacity : 450, baseSalary : 1100 });\n        companies[38] = Company({ capacity : 600, baseSalary : 900 });\n        companies[39] = Company({ capacity : 112, baseSalary : 3975 });\n        companies[40] = Company({ capacity :  65, baseSalary : 5900 });\n        companies[41] = Company({ capacity :  76, baseSalary : 5500 });\n        companies[42] = Company({ capacity :  80, baseSalary : 5400 });\n        companies[43] = Company({ capacity :  84, baseSalary : 5150 });\n        companies[44] = Company({ capacity : 290, baseSalary : 1500 });\n        companies[45] = Company({ capacity : 108, baseSalary : 4100 });\n        companies[46] = Company({ capacity : 276, baseSalary : 1575 });\n        companies[47] = Company({ capacity : 400, baseSalary : 1200 });\n        companies[48] = Company({ capacity :  53, baseSalary : 7150 });\n        companies[49] = Company({ capacity : 300, baseSalary : 1475 });\n        companies[50] = Company({ capacity :  69, baseSalary : 5875 });\n        companies[51] = Company({ capacity :  72, baseSalary : 5650 });\n        companies[52] = Company({ capacity : 208, baseSalary : 1975 });\n        companies[53] = Company({ capacity : 128, baseSalary : 3525 });\n        companies[54] = Company({ capacity :  73, baseSalary : 5575 });\n\n// Specials companies\n\n        // 55 Spooky\n        _tempArray = [\n            379, 391, 874, 1004, 1245, 1258, 1398, 1584, 1869, 1940, 1952, 2269, 2525, 2772, 3055, 3455, 3472, 3541, // 30 Clowns\n            3544, 3607, 3617, 4103, 4117, 4149, 4195, 4230, 4425, 5065, 5101, 5188,\n            4, 27, 48, 101, 136, 143, 157, 165, 172, 175, 226, 277, 388, 389, 418, 420, 444, 457, 493, 516, 518,  // 31 Heavy Makeup \n            610, 638, 679, 681, 703, 743, 784, 867, 917, 959\n        ];\n        parseSpecialRegIDs(55,_tempArray, 6250); \n\n        // 56 GM\n        _tempArray = [\n            4466, 4684, 5342, 5437, 5932, 6838, 8043, 1175, 1274, 2005, 2497, 2592, 3063, 3285, 3300, 3316,   // 32 Devils\n            3454, 3983, 4541, 4856, 5171, 5219, 5265, 6643, 6719, 6982, 7147, 7303, 8012, 8944, 9644, 9822,\n            1013, 1032, 1042, 1084, 1127, 1142, 1196, 1234, 1279, 1295, 1296, 1297, 1310, 1323, 1356, 1390, 1405  // 17 Heavy makeup\n        ];\n        parseSpecialRegIDs(56,_tempArray, 7700);\n\n        // 57 McDanny's\n        _tempArray = [\n            1617, 1808, 2149, 2632, 2833, 2847, 3301, 3524, 4822, 5139, 5735, 5906, 5946, 6451, 6663, 6762, 6831,  // McD's Workers + Managers\n            7278, 7519, 8365, 9434, 64, 488, 642, 946, 1014, 1650, 1823, 1949, 2178, 2593, 2992, 3070, 3331, 3745, \n            3944, 3961, 4030, 4070, 4090, 4197, 4244, 4719, 5551, 5761, 5779, 5895, 6044, 6048, 6276, 6599, 6681, \n            6832, 6873, 6889, 7124, 7550, 7975, 8130, 8579, 8599, 8689, 8784, 8794, 8903, 9053, 9205, 9254, 9407, 9994\n        ];\n        parseSpecialRegIDs(57,_tempArray, 8250); \n\n        // 58 Wendy's\n        _tempArray = [\n            317, 456, 878, 1588, 2702, 2974, 3047, 3224, 3308, 3441, 4082, 4107, 5490, 5574, 5622, 6232, 6317,  // Wendys Workers\n            6350, 6404, 6539, 7654, 7947, 7961, 8248, 8400, 8437, 8643, 8667, 8728, 9221, 9611, 9709, 9754, 9950\n        ];\n        parseSpecialRegIDs(58,_tempArray, 7900);\n\n        // 59 Party Place - 25 Clowns + 26 heavy makeup\n        _tempArray = [\n            5494, 5845, 6016, 6042, 6073, 6109, 6436, 6649, 7092, 7574, 7863, 8077, 8110, 8326, 8359, 8480, 8629,  // 25 Clowns\n            8825, 9303, 9319, 9339, 9770, 9800, 9858, 9870,\n            1440, 1482, 1566, 1596, 1598, 1660, 1663, 1695, 1700,   // 26 heavy makeup\n            1708, 1905, 1929, 1986, 2018, 2026, 2037, 2067, 2097, 2125, 2148, 2176, 2207, 2247, 2262, 2347, 2494\n        ];\n        parseSpecialRegIDs(59,_tempArray, 7425);\n\n// McD's managers\n\n        // These Ids are only used for seniority level bonus, on mint\n        _tempArray = [1617, 1808, 2149, 2632, 2833, 2847, 3301, 3524, 4822, 5139, 5735, 5906, 5946, 6451, 6663,  // 21 Managers\n        6762, 6831, 7278, 7519, 8365, 9434 ]; \n\n        for (uint i = 0;i < _tempArray.length;i++){\n            managerIds[_tempArray[i]] = true;\n        }\n\n//  \n        specialCompanyIdFlag = 55;\n        \n        uint jobCountNotSpecial = 0;\n        for (uint i = 0; i < specialCompanyIdFlag; i++) {\n            jobCountNotSpecial += companies[i].capacity;\n        }\n        mainDeck.setup(jobCountNotSpecial);\n\n        uint jobCountSpecial = 0;\n        for (uint i = specialCompanyIdFlag; i < numCompanies(); i++) {\n            jobCountSpecial += companies[i].capacity;\n        }\n\n        uint _startIndex = 0;\n        for (uint i = 0; i < numCompanies(); i++) {\n            indexes[i] = uint16(_startIndex);\n            _startIndex += companies[i].capacity;\n        }\n\t}\n\n// Admin Functions\n\n    function makeNewJob(uint _regularId) public onlyRole(MINTER_ROLE) returns (uint, uint) {\n        uint _pull;\n        uint _specialCompanyId = specialCompanyIds[_regularId];\n        uint _newJobId;\n        if (_specialCompanyId == 0) {   \n            // If Regular id is NOT special\n            _pull = mainDeck.draw();\n            uint _companyId = getCompanyId(_pull);\n            counts[_companyId]++;\n            emit jobIDCreated(_regularId, add1(_pull), _companyId, msg.sender);\n            return (add1(_pull), _companyId);             \n        } else {                        \n            // If Regular id IS special\n            _pull = specialDecks[_specialCompanyId].draw();\n            _newJobId = _pull + indexes[_specialCompanyId];\n            counts[_specialCompanyId]++;\n            emit jobIDCreated(_regularId, add1(_newJobId), _specialCompanyId, msg.sender);\n            return (add1(_newJobId), _specialCompanyId); \n        } \n    }\n\n    function updateCompany(uint _companyId, uint128 _baseSalary, string memory _name) public onlyRole(MINTER_ROLE)  {\n        companies[_companyId].baseSalary = _baseSalary;\n        names[_companyId] = _name;\n    } \n\n    function setSalaryMultiplier(uint _basispoints) public onlyRole(MINTER_ROLE) {\n        SALARY_MULTIPLIER = _basispoints;\n    }\n\n// View Functions\n\n    function getCount(uint _companyId) public view returns (uint) {\n        return counts[_companyId];\n    }\n\n    function getBaseSalary(uint _companyId) public view returns (uint) {\n        return companies[_companyId].baseSalary * SALARY_MULTIPLIER / 100;\n    }\n\n    function getSpread(uint _companyId) public pure returns (uint) {\n        uint _nothing = 12345;\n        return uint(keccak256(abi.encodePacked(_companyId + _nothing))) % 40;\n    }\n\n    function getCapacity(uint _companyId) public view returns (uint) {\n        return companies[_companyId].capacity;\n    }\n\n    function numCompanies() public view returns (uint) {\n        return companies.length;\n    }\n\n    function isManager(uint _regId) public view returns (bool) {\n        return managerIds[_regId];\n    }\n\n    function maxJobIds() public view returns (uint) {\n        uint _total = 0;\n        for (uint i = 0; i < numCompanies(); i++) {\n            _total += companies[i].capacity;\n        }\n        return _total;\n    }\n\n    function getName(uint _companyId) public view returns (string memory) {\n        return names[_companyId];\n    }\n\n// Internal\n\n    function getCompanyId(uint _jobId) internal view returns (uint) {\n        uint _numCompanies = companies.length;\n        uint i;\n        for (i = 0; i < _numCompanies -1; i++) {\n            if (_jobId >= indexes[i] && _jobId < indexes[i+1])\n                break;\n        }\n        return i;\n    }\n\n    function parseSpecialRegIDs(uint _companyId, uint[] memory _ids, uint _baseSalary) internal {\n        for (uint i = 0;i < _ids.length; i++) {\n            specialCompanyIds[_ids[i]] = _companyId;\n        }\n        companies[_companyId] = Company({ capacity : uint128(_ids.length), baseSalary : uint128(_baseSalary) }); \n        specialDecks[_companyId].setup(_ids.length);\n    }\n\n    function add1(uint _x) internal pure returns (uint) {\n        return _x + 1;\n    }\n\n}"
    },
    "contracts/Seniority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/**\n * @title Regular Seniority v1.0 \n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract Seniority is AccessControl {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    uint public MAX_LEVELS = 5;\n    mapping(uint => uint) private levels;\n\n    event LevelUpdate (uint _tokenId, uint _newLevel);\n\n    constructor() {\n\t    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t    _grantRole(MINTER_ROLE, msg.sender);\n\t    _grantRole(DEFAULT_ADMIN_ROLE, tx.origin);\n\t    _grantRole(MINTER_ROLE, tx.origin);\n\t}\n\n    function level(uint _jobID) public view returns (uint) {\n        // jobs start with level 0 or 1, based on a cointoss;\n        return levels[_jobID] + cointoss(_jobID);\n    }\n\n    // Admin\n\n    function incrementLevel(uint _jobID) public onlyRole(MINTER_ROLE) {\n        require(level(_jobID) < MAX_LEVELS, \"At max level\");\n        levels[_jobID] += 1;\n        emit LevelUpdate(_jobID, level(_jobID));\n    }\n\n    function setLevel(uint _jobID, uint _newLevel) public onlyRole(MINTER_ROLE) {\n        require(_newLevel <= MAX_LEVELS, \"Level too high\");\n        levels[_jobID] = _newLevel;\n        emit LevelUpdate(_jobID, level(_jobID));\n    }\n\n    function setMaxLevels(uint _newMax) public onlyRole(MINTER_ROLE) {\n        MAX_LEVELS = _newMax;\n    }\n\n    // Internal\n\n    function cointoss(uint _num) internal pure returns (uint){\n        return (uint(keccak256(abi.encodePacked(_num))) % 2);\n    }\n\n}"
    },
    "contracts/Titles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\n/**\n * @title Regular Titles v1.0 \n */\n\nimport \"./Seniority.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n// TO-DO: Titles still exceed the max chars\n\ncontract Titles is AccessControl {\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    uint public constant MAX_LEVELS = 5;\n    uint public MAX_CHARS = 28;\n    mapping(uint => string) private customs;\n    mapping(uint => bool) public customExists;\n    Seniority seniority;\n\n    event SeniorityUpdate (uint _tokenId, uint _newLevel, string _newPrefix);\n    event TitleUpdate (uint _tokenId, string _newTitle);\n\n// define values\n\n    string[] private entryLevelTitles = [\n        \"Asst.\", \n        \"Asst. to\", \n        \"Jr.\"\n    ];\n\n    string[] private PRE = [\n        \"Entry Level\",\n        \"\",\n        \"Lead\",\n        \"Sr.\",\n        \"VP\",\n        \"Chief\"\n    ];\n\n    string[] private A = [\n        // \"Night-shift\",\n        \"Office\",\n        \"Account\",\n        \"Program\",\n        \"Project\",\n        \"Regional\",\n        \"Branch\"\n    ];\n\n    string[] private B = [\n        \"Department\",\n        \"Team\",\n        \"Facilities\",\n        \"Compliance\",\n        \"Mailroom\",\n        \"Finance\",\n        \"Sales\",\n        \"Marketing\",\n        \"IT\",\n        \"HR\",\n        \"Operations\",\n        \"Community\",\n        \"Business\",\n        \"Technical\",\n        \"Helpdesk\",\n        \"Custodial\",\n        \"Data-Entry\"\n    ];\n\n    string[] private C = [\n        \"Officer\",\n        \"Accountant\",\n        \"Associate\",\n        \"Leader\",\n        \"Clerk\",\n        \"Administrator\",\n        \"Consultant\",\n        \"Coordinator\",\n        \"Inspector\",\n        \"Rep.\",\n        \"Support\",\n        \"Auditor\",\n        \"Specialist\",\n        \"Analyst\",\n        \"Executive\",\n        \"Controller\",\n        \"Programmer\",\n        \"Developer\",\n        \"Support\",\n        \"Professional\",\n        \"Salesperson\",\n        \"Receptionist\"\n    ];\n\n//\n\n    constructor(address _addr) {\n\t    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\t    _grantRole(DEFAULT_ADMIN_ROLE, tx.origin);\n\t    _grantRole(MINTER_ROLE, msg.sender);\n\t    _grantRole(MINTER_ROLE, tx.origin);\n        seniority = Seniority(_addr);\n\t}\n\n// Public View\n\n    function title(uint _jobID) public view returns (string memory) {\n        if (customExists[_jobID])\n            return (customs[_jobID]);\n        string memory _prefix = titlePrefix(_jobID);\n        string memory _a;\n        string memory _b;\n        string memory _c;\n        (_a,_b,_c) = titleSeperated(_jobID);\n\n        bool _isAssistant = keccak256(abi.encodePacked((_prefix))) == keccak256(abi.encodePacked((entryLevelTitles[0]))); \n        bool _makeSuffix = (_isAssistant && cointoss(_jobID + 10000)); // move \"assistant\" to end, half the time\n        \n        // shorten job if it's bigger than max characters\n        uint _jobLength = bytes(_prefix).length + bytes(_a).length + bytes(_b).length + bytes(_c).length + 3; // add 3 characters for spaces\n        if (_jobLength > MAX_CHARS) { \n            // reduce number of words\n            if (cointoss(_jobID)){\n                if (_makeSuffix)\n                    return myConcat(_b,_c,_prefix,\"\");\n                else\n                    return myConcat(_prefix,_b,_c,\"\");\n            } else {\n                if (_makeSuffix)\n                    return myConcat(_a, _c, _prefix, \"\");\n                else\n                    return myConcat(_prefix,_a, _c, \"\");\n            }\n        } else {\n            if (_makeSuffix)\n                return myConcat(_a, _b, _c, titlePrefix(_jobID));\n            else \n                return myConcat(titlePrefix(_jobID),_a, _b, _c);\n        }\n    }   \n\n    function level(uint _jobID) public view returns (uint) {\n        return seniority.level(_jobID);\n    }\n\n// Admin\n\n    function setCustomTitle(uint _jobID, string memory _newTitle) public onlyRole(MINTER_ROLE) {\n        customs[_jobID] = _newTitle;\n        customExists[_jobID] = true;\n        emit TitleUpdate(_jobID,_newTitle);\n    }\n\n    function setMaxChars(uint _newMax) public onlyRole(MINTER_ROLE) {\n        MAX_CHARS = _newMax;\n    }\n\n// Contract Management\n    \n    function seniorityContractAddress() public view returns (address) {\n        return address(seniority);\n    }\n\n    function setSeniorityContractAddr(address _addr) public onlyRole(MINTER_ROLE) {\n        seniority = Seniority(_addr);\n    }\n\n// internal\n\n    function titleSeperated(uint _jobID) internal view returns (string memory,string memory,string memory) {\n        uint _a = uint(keccak256(abi.encodePacked(_jobID))) % A.length;\n        uint _b = uint(keccak256(abi.encodePacked(_jobID,\"abc\"))) % B.length;\n        uint _c = uint(keccak256(abi.encodePacked(_jobID,\"def\"))) % C.length;\n        return (A[_a],B[_b],C[_c]);\n    }\n\n    function myConcat(string memory s1, string memory s2, string memory s3, string memory s4) internal pure returns (string memory) {\n        string memory result;\n        if (bytes(s1).length > 0) \n            result = string.concat(s1, \" \", s2,\" \", s3);\n        else    \n            result = string.concat(s2,\" \", s3);\n        if (bytes(s4).length > 0)\n            result = string.concat(result, \" \", s4);\n        return result;\n    }\n\n    function titlePrefix(uint _jobID) internal view returns (string memory) {\n        if (level(_jobID) == 0) {\n            uint _x = uint(keccak256(abi.encodePacked(_jobID))) % entryLevelTitles.length;\n            return entryLevelTitles[_x];\n        } else if (level(_jobID) == 1) {\n            return \"\";\n        } else {\n            return PRE[level(_jobID)];    \n        }\n    }\n\n    function cointoss(uint _num) internal pure returns (bool){\n        return (uint(keccak256(abi.encodePacked(_num))) % 2 == 0);\n    }\n\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Royalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/ERC721Royalty.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../common/ERC2981.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Extension of ERC721 with the ERC2981 NFT Royalty Standard, a standardized way to retrieve royalty payment\n * information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC721Royalty is ERC2981, ERC721 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally clears the royalty information for the token.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n        _resetTokenRoyalty(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Random.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary Random {\n    function random() internal view returns (bytes32) {\n        return keccak256(abi.encodePacked(blockhash(block.number - 1), block.timestamp, msg.sender)) ;\n    }\n\n    struct Manifest {\n        uint256[] _data;\n    }\n\n    function setup(Manifest storage self, uint256 length) internal {\n        uint256[] storage data = self._data;\n\n        require(data.length == 0, \"cannot-setup-during-active-draw\");\n        assembly { sstore(data.slot, length) }\n    }\n\n    function draw(Manifest storage self) internal returns (uint256) {\n        return draw(self, random());\n    }\n\n    function draw(Manifest storage self, bytes32 seed) internal returns (uint256) {\n        uint256[] storage data = self._data;\n\n        uint256 l = data.length;\n        uint256 i = uint256(seed) % l;\n        uint256 x = data[i];\n        uint256 y = data[--l];\n        if (x == 0) { x = i + 1;   }\n        if (y == 0) { y = l + 1;   }\n        if (i != l) { data[i] = y; }\n        data.pop();\n        return x - 1;\n    }\n\n    function put(Manifest storage self, uint256 i) internal {\n        self._data.push(i + 1);\n    }\n\n    function remaining(Manifest storage self) internal view returns (uint256) {\n        return self._data.length;\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n        external\n        view\n        virtual\n        override\n        returns (address, uint256)\n    {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must be already minted.\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}