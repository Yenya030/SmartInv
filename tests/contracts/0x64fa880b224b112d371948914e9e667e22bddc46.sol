{{
  "language": "Solidity",
  "sources": {
    "src/GenericEnsMapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"forge-std/console.sol\";\nimport \"./structs/Config.sol\";\nimport \"./structs/NftDetails.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport \"openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\";\nimport \"openzeppelin-contracts/contracts/utils/Strings.sol\";\nimport \"ens-contracts/registry/ENS.sol\";\nimport \"ens-contracts/resolvers/profiles/IAddressResolver.sol\";\nimport \"ens-contracts/resolvers/profiles/IAddrResolver.sol\";\nimport \"ens-contracts/resolvers/profiles/ITextResolver.sol\";\nimport \"ens-contracts/resolvers/profiles/INameResolver.sol\";\nimport \"ens-contracts/wrapper/INameWrapper.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"EnsPrimaryContractNamer/PrimaryEns.sol\";\nimport \"forge-std/console.sol\";\n\ncontract GenericEnsMapper is\n    IAddressResolver,\n    IAddrResolver,\n    ITextResolver,\n    INameResolver,\n    IERC1155Receiver,\n    PrimaryEns\n{\n    using Strings for *;\n\n    uint256 private constant COIN_TYPE_ETH = 60;\n    address private immutable deployer;\n\n    event addNftContractToEns(\n        uint256 indexed _ensId,\n        IERC721 indexed _nftContract\n    );\n    event updateEnsClaimConfig(\n        uint256 indexed _ensId,\n        bool _numericOnly,\n        bool _canOverwriteSubdomains\n    );\n\n    INameWrapper public EnsNameWrapper;\n\n    ENS public EnsContract = ENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\n    IERC721 public EnsToken =\n        IERC721(0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85);\n\n    mapping(bytes32 => Config) public EnsToConfig;\n    mapping(bytes32 => NftDetails) public SubnodeToNftDetails;\n    mapping(uint256 => Config) public ParentNodeToConfig;\n    mapping(uint256 => IERC721[]) public ParentNodeToNftContracts;\n\n    mapping(bytes32 => mapping(address => mapping(uint256 => bytes))) OtherAddresses;\n    mapping(bytes32 => mapping(bytes32 => string)) TextMappings;\n\n    mapping(bytes32 => bytes32) public SubdomainClaimMap;\n\n    event SubdomainClaimed(\n        bytes32 indexed _nodeHash,\n        IERC721 indexed _nftContract,\n        uint96 indexed _tokenId,\n        string _name\n    );\n\n    event SubdomainRemoved(\n        bytes32 indexed _nodeHash,\n        IERC721 indexed _nftContract,\n        uint96 indexed _tokenId,\n        string _name\n    );\n\n    constructor() {\n        deployer = msg.sender;\n    }\n\n    function addEnsContractMapping(\n        string[] calldata _domainArray,\n        uint256 _ensId,\n        IERC721[] calldata _nftContracts,\n        bool _numericOnly,\n        bool _overWriteUnusedSubdomains\n    ) external payable isEnsApprovedOrOwner(_ensId) {\n        bytes32 domainHash = namehashFromId(_ensId);\n        address owner = EnsContract.owner(domainHash);\n        require(\n            owner == address(this) ||\n                (owner == address(EnsNameWrapper) && owner != address(0)),\n            \"controller of Ens not set to contract\"\n        );\n        require(\n            getDomainHash(_domainArray) == domainHash,\n            \"incorrect namehash\"\n        );\n        require(_nftContracts.length < 6, \"maximum 5 contracts per ENS\");\n        require(_nftContracts.length > 0, \"need at least 1 NFT contract\");\n        require(\n            !(_nftContracts.length > 1 && _numericOnly),\n            \"Numeric only not compatible with multiple contracts\"\n        );\n\n        require(\n            !ParentNodeToConfig[_ensId].Initialised,\n            \"already been configured\"\n        );\n        checkNftContracts(_nftContracts);\n        ParentNodeToConfig[_ensId] = Config(\n            true,\n            _numericOnly,\n            _overWriteUnusedSubdomains,\n            _domainArray\n        );\n        ParentNodeToNftContracts[_ensId] = _nftContracts;\n\n        //output events\n        emit updateEnsClaimConfig(\n            _ensId,\n            _numericOnly,\n            _overWriteUnusedSubdomains\n        );\n\n        for (uint256 i; i < _nftContracts.length; ) {\n            emit addNftContractToEns(_ensId, _nftContracts[i]);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function addContractToExistingEns(uint256 _ensId, IERC721 _nftContract)\n        external\n        payable\n        isEnsApprovedOrOwner(_ensId)\n    {\n        uint256 numberOfContracts = ParentNodeToNftContracts[_ensId].length;\n\n        require(numberOfContracts < 5, \"maximum 5 contracts per ENS\");\n        require(numberOfContracts > 0, \"ens not configured\");\n        require(\n            !isValidNftContract(_ensId, _nftContract),\n            \"duplicate NFT contract\"\n        );\n        require(\n            !ParentNodeToConfig[_ensId].NumericOnly,\n            \"Numeric only not compatible with multiple contracts\"\n        );\n\n        ParentNodeToNftContracts[_ensId].push(_nftContract);\n        emit addNftContractToEns(_ensId, _nftContract);\n    }\n\n    function updateSettingsToExistingEns(\n        uint256 _ensId,\n        bool _numericOnly,\n        bool _overwriteUnusedSubdomains\n    ) external payable isEnsApprovedOrOwner(_ensId) {\n        require(\n            !(ParentNodeToNftContracts[_ensId].length > 1 && _numericOnly),\n            \"Numeric only not compatible with multiple contracts\"\n        );\n        Config memory config = ParentNodeToConfig[_ensId];\n        require(config.Initialised, \"ENS not configured\");\n\n        config.NumericOnly = _numericOnly;\n        config.CanOverwriteSubdomains = _overwriteUnusedSubdomains;\n\n        ParentNodeToConfig[_ensId] = config;\n\n        emit updateEnsClaimConfig(\n            _ensId,\n            _numericOnly,\n            _overwriteUnusedSubdomains\n        );\n    }\n\n    /**\n     * @notice Claim subdomain\n     * @param _ensId parent token id of the subdomain\n     * @param _nftId ID of ERC-721 NFT\n     * @param _nftContract address of the ERC-721 NFT contract\n     * @param _label label for the subdomain\n     */\n    function claimSubdomain(\n        uint256 _ensId,\n        uint96 _nftId,\n        IERC721 _nftContract,\n        string memory _label\n    ) external payable isNftOwner(_nftContract, _nftId) {\n        bytes32 claimHash = keccak256(\n            abi.encodePacked(_ensId, address(_nftContract), _nftId)\n        );\n        require(\n            SubdomainClaimMap[claimHash] == 0x0,\n            \"subdomain claimed for this token\"\n        );\n        require(isValidNftContract(_ensId, _nftContract), \"Not valid contract\");\n        Config memory config = ParentNodeToConfig[_ensId];\n        require(config.Initialised, \"configuration for ENS not enabled\");\n        bytes32 domainHash = namehashFromId(_ensId);\n        string memory label = config.NumericOnly ? _nftId.toString() : _label;\n        bytes32 subnodeHash = keccak256(\n            abi.encodePacked(domainHash, keccak256(abi.encodePacked(label)))\n        );\n        require(\n            SubnodeToNftDetails[subnodeHash].ParentTokenId == 0,\n            \"Subdomain has already been claimed\"\n        );\n        require(\n            !EnsContract.recordExists(subnodeHash) ||\n                config.CanOverwriteSubdomains,\n            \"not allowed previously used subdomain\"\n        );\n\n        NftDetails memory details = NftDetails(\n            _ensId,\n            label,\n            _nftContract,\n            _nftId\n        );\n\n        SubnodeToNftDetails[subnodeHash] = details;\n\n        if (EnsToken.ownerOf(_ensId) == address(EnsNameWrapper)) {\n            EnsNameWrapper.setSubnodeRecord(\n                domainHash,\n                label,\n                address(this),\n                address(this),\n                0, //ttl\n                0, //fuses\n                type(uint64).max\n            );\n        } else {\n            EnsContract.setSubnodeRecord(\n                domainHash,\n                keccak256(abi.encodePacked(label)),\n                address(this),\n                address(this),\n                0\n            );\n        }\n\n        SubdomainClaimMap[claimHash] = subnodeHash;\n\n        emit AddrChanged(subnodeHash, _nftContract.ownerOf(_nftId));\n        emit AddressChanged(\n            subnodeHash,\n            60,\n            abi.encodePacked(_nftContract.ownerOf(_nftId))\n        );\n        emit SubdomainClaimed(\n            subnodeHash,\n            _nftContract,\n            _nftId,\n            name(subnodeHash)\n        );\n    }\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string calldata key)\n        external\n        view\n        returns (string memory)\n    {\n        NftDetails memory details = SubnodeToNftDetails[node];\n        require(details.ParentTokenId != 0, \"subdomain not configured\");\n\n        if (keccak256(abi.encodePacked(key)) == keccak256(\"avatar\")) {\n            string memory str = string(\n                abi.encodePacked(\n                    \"eip155:1/erc721:\",\n                    address(details.NftAddress).toHexString(),\n                    \"/\",\n                    details.NftId.toString()\n                )\n            );\n            return str;\n        } else {\n            return TextMappings[node][keccak256(abi.encodePacked(key))];\n        }\n    }\n\n\n    /**\n     * @notice removes the subdomain mapping from this resolver contract\n     * @param _subdomainHash namehash of the subdomain\n     */\n    function removeSubdomain(bytes32 _subdomainHash)\n        external\n        payable\n        authorised(_subdomainHash)\n    {\n        NftDetails memory details = SubnodeToNftDetails[_subdomainHash];\n        require(details.ParentTokenId != 0, \"subdomain not configured\");\n\n        string memory subdomainName = name(_subdomainHash);\n\n        delete SubdomainClaimMap[\n            keccak256(\n                abi.encodePacked(\n                    details.ParentTokenId,\n                    address(details.NftAddress),\n                    details.NftId\n                )\n            )\n        ];\n        delete SubnodeToNftDetails[_subdomainHash];\n\n        emit AddrChanged(_subdomainHash, address(0));\n        emit AddressChanged(_subdomainHash, 60, abi.encodePacked(address(0)));\n        emit SubdomainRemoved(\n            _subdomainHash,\n            details.NftAddress,\n            details.NftId,\n            subdomainName\n        );\n    }\n\n    //this doesn't need gating as it just outputs events\n    //it's here because etherscan and ens.app both use events\n    //for primary naming\n    function outputEvents(bytes32 _subnodeHash) external payable {\n        address owner = getOwnerFromDetails(_subnodeHash);\n\n        emit AddrChanged(_subnodeHash, owner);\n        emit AddressChanged(_subnodeHash, 60, abi.encodePacked(owner));\n    }\n\n    /**\n     * Sets the text data associated with an ENS node and key.\n     * May only be called by the owner of the linked NFT\n     * @param node The node to update.\n     * @param key The key to set.\n     * @param value The text data value to set.\n     */\n    function setText(\n        bytes32 node,\n        string calldata key,\n        string calldata value\n    ) external payable authorised(node) {\n        TextMappings[node][keccak256(abi.encodePacked(key))] = value;\n        emit TextChanged(node, key, value);\n    }\n\n    function addr(bytes32 node, uint256 coinType)\n        external\n        view\n        returns (bytes memory)\n    {\n        address owner = getOwnerFromDetails(node);\n        if (coinType == COIN_TYPE_ETH) {\n            return abi.encodePacked(owner);\n        } else {\n            return OtherAddresses[node][owner][coinType];\n        }\n    }\n\n    /**\n     * Returns the address associated with an ENS node. Legacy method\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address payable) {\n        return payable(getOwnerFromDetails(node));\n    }\n\n    function setAddr(\n        bytes32 node,\n        uint256 coinType,\n        bytes memory a\n    ) external authorised(node) {\n        emit AddressChanged(node, coinType, a);\n        require(coinType != COIN_TYPE_ETH, \"cannot set eth address\");\n        address nftOwner = getOwnerFromDetails(node);\n        OtherAddresses[node][nftOwner][coinType] = a;\n    }\n\n    //ERC1155 receiver\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        require(false, \"cannot do batch transfer\");\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        external\n        pure\n        returns (bool)\n    {\n        return\n            interfaceId == this.onERC1155Received.selector ||\n            interfaceId == this.onERC1155BatchReceived.selector ||\n            interfaceId == 0x3b3b57de || //addr\n            interfaceId == 0x59d1d43c || //text\n            interfaceId == 0x691f3431 || //name\n            interfaceId == 0x01ffc9a7;\n    }\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) public view returns (string memory) {\n        NftDetails memory details = SubnodeToNftDetails[node];\n        string memory label = details.Label;\n        string[] memory domainArray = ParentNodeToConfig[details.ParentTokenId]\n            .DomainArray;\n\n        require(\n            address(details.NftAddress) != address(0),\n            \"subdomain not configured\"\n        );\n        for (uint256 i; i < domainArray.length; ) {\n            label = string(abi.encodePacked(label, \".\", domainArray[i]));\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return label;\n    }\n\n    ///['hodl', 'pcc', 'eth']\n    function getDomainHash(string[] calldata _domainArray)\n        public\n        pure\n        returns (bytes32 namehash)\n    {\n        namehash = 0x0;\n\n        for (uint256 i = _domainArray.length; i > 0; ) {\n            unchecked {\n                --i;\n            }\n            namehash = keccak256(\n                abi.encodePacked(\n                    namehash,\n                    keccak256(abi.encodePacked(_domainArray[i]))\n                )\n            );\n        }\n    }\n\n    function checkNftContracts(IERC721[] calldata _nftContracts) private view {\n        for (uint256 i; i < _nftContracts.length; ) {\n            require(\n                ERC165Checker.supportsInterface(\n                    address(_nftContracts[i]),\n                    type(IERC721).interfaceId\n                ),\n                \"need to be IERC721 contracts\"\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function isValidNftContract(uint256 _ensId, IERC721 _nftContract)\n        private\n        view\n        returns (bool)\n    {\n        IERC721[] memory contracts = ParentNodeToNftContracts[_ensId];\n        uint256 total = contracts.length;\n        for (uint256 i; i < total; ) {\n            if (contracts[i] == _nftContract) {\n                return true;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ENS resolver interface methods\n    //\n    // ------------------------\n\n\n\n    function getOwnerFromDetails(bytes32 _subnodeHash)\n        private\n        view\n        returns (address)\n    {\n        NftDetails memory details = SubnodeToNftDetails[_subnodeHash];\n        require(details.ParentTokenId != 0, \"subdomain not configured\");\n        address owner = details.NftAddress.ownerOf(details.NftId);\n        return owner;\n    }\n\n    modifier isNftOwner(IERC721 _nftContract, uint96 _id) {\n        require(_nftContract.ownerOf(_id) == msg.sender, \"not owner of NFT\");\n        _;\n    }\n\n    modifier isEnsApprovedOrOwner(uint256 _ensId) {\n        try EnsToken.ownerOf(_ensId) returns (address owner) {\n            require(\n                owner == msg.sender ||\n                    (EnsToken.isApprovedForAll(owner, msg.sender) &&\n                        owner != address(EnsNameWrapper)) ||\n                    (owner == address(EnsNameWrapper) &&\n                        owner != address(0) &&\n                        EnsNameWrapper.isTokenOwnerOrApproved(\n                            bytes32(_ensId),\n                            msg.sender\n                        )),\n                \"not owner or approved\"\n            );\n        } catch {\n            require(false, \"not owner or approved\");\n        }\n        _;\n    }\n\n    function namehashFromId(uint256 _id)\n        public\n        view\n        returns (bytes32 _namehash)\n    {\n        _namehash = bytes32(_id);\n        if (\n            !(address(EnsNameWrapper) != address(0) &&\n                EnsNameWrapper.ownerOf(_id) != address(0))\n        ) {\n            _namehash = keccak256(\n                abi.encodePacked(\n                    bytes32(\n                        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae\n                    ),\n                    _namehash\n                )\n            );\n        }\n    }\n\n    function setNameWrapper(address _addr) external payable {\n        require(msg.sender == deployer, \"only deployer\");\n        EnsNameWrapper = INameWrapper(_addr);\n    }\n\n    //just in case we have any funds being accidently sent to the contract\n    //payable functions are cheaper than none-payable.\n    function withdraw() external payable {\n        payable(deployer).transfer(address(this).balance);\n    }\n\n    modifier authorised(bytes32 _subnodeHash) {\n        address owner = getOwnerFromDetails(_subnodeHash);\n        require(owner == msg.sender, \"not owner of subdomain\");\n        _;\n    }\n}\n"
    },
    "lib/forge-std/src/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(\n                gas(),\n                consoleAddress,\n                payloadStart,\n                payloadLength,\n                0,\n                0\n            )\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,address)\", p0, p1)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint256 p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        uint256 p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        bool p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        uint256 p0,\n        address p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(uint,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        uint256 p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        bool p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        string memory p0,\n        address p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(string,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        uint256 p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3)\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        bool p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        bool p0,\n        address p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(bool,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        uint256 p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,uint,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        string memory p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,string,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        bool p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,bool,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint256 p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint256 p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint256 p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        uint256 p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,uint,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,string,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,string,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,string,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        string memory p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,string,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        bool p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,bool,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2,\n        uint256 p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,address,uint)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2,\n        string memory p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,address,string)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2,\n        bool p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,address,bool)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n\n    function log(\n        address p0,\n        address p1,\n        address p2,\n        address p3\n    ) internal view {\n        _sendLogPayload(\n            abi.encodeWithSignature(\n                \"log(address,address,address,address)\",\n                p0,\n                p1,\n                p2,\n                p3\n            )\n        );\n    }\n}\n"
    },
    "src/structs/Config.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\n\nstruct Config {\n    bool Initialised;\n    bool NumericOnly;\n    bool CanOverwriteSubdomains;\n    string[] DomainArray;\n}\n"
    },
    "src/structs/NftDetails.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\n\nstruct NftDetails {\n    uint256 ParentTokenId;\n    string Label;\n    IERC721 NftAddress;\n    uint96 NftId; //this actually saves about 20,000 gas in the claim subdomain method\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "lib/ens-contracts/contracts/registry/ENS.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface ENS {\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        bytes32 label,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setOwner(bytes32 node, address owner) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function owner(bytes32 node) external view returns (address);\n\n    function resolver(bytes32 node) external view returns (address);\n\n    function ttl(bytes32 node) external view returns (uint64);\n\n    function recordExists(bytes32 node) external view returns (bool);\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "lib/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the new (multicoin) addr function.\n */\ninterface IAddressResolver {\n    event AddressChanged(\n        bytes32 indexed node,\n        uint256 coinType,\n        bytes newAddress\n    );\n\n    function addr(bytes32 node, uint256 coinType)\n        external\n        view\n        returns (bytes memory);\n}\n"
    },
    "lib/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\n/**\n * Interface for the legacy (ETH-only) addr function.\n */\ninterface IAddrResolver {\n    event AddrChanged(bytes32 indexed node, address a);\n\n    /**\n     * Returns the address associated with an ENS node.\n     * @param node The ENS node to query.\n     * @return The associated address.\n     */\n    function addr(bytes32 node) external view returns (address payable);\n}\n"
    },
    "lib/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface ITextResolver {\n    event TextChanged(\n        bytes32 indexed node,\n        string indexed indexedKey,\n        string key\n    );\n\n    /**\n     * Returns the text data associated with an ENS node and key.\n     * @param node The ENS node to query.\n     * @param key The text data key to query.\n     * @return The associated text data.\n     */\n    function text(bytes32 node, string calldata key)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "lib/ens-contracts/contracts/resolvers/profiles/INameResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4;\n\ninterface INameResolver {\n    event NameChanged(bytes32 indexed node, string name);\n\n    /**\n     * Returns the name associated with an ENS node, for reverse records.\n     * Defined in EIP181.\n     * @param node The ENS node to query.\n     * @return The associated name.\n     */\n    function name(bytes32 node) external view returns (string memory);\n}\n"
    },
    "lib/ens-contracts/contracts/wrapper/INameWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../registry/ENS.sol\";\nimport \"../ethregistrar/IBaseRegistrar.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\";\nimport \"./IMetadataService.sol\";\n\nuint32 constant CANNOT_UNWRAP = 1;\nuint32 constant CANNOT_BURN_FUSES = 2;\nuint32 constant CANNOT_TRANSFER = 4;\nuint32 constant CANNOT_SET_RESOLVER = 8;\nuint32 constant CANNOT_SET_TTL = 16;\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\nuint32 constant PARENT_CANNOT_CONTROL = 64;\nuint32 constant CAN_DO_EVERYTHING = 0;\n\ninterface INameWrapper is IERC1155 {\n    event NameWrapped(\n        bytes32 indexed node,\n        bytes name,\n        address owner,\n        uint32 fuses,\n        uint64 expiry\n    );\n\n    event NameUnwrapped(bytes32 indexed node, address owner);\n\n    event FusesSet(bytes32 indexed node, uint32 fuses, uint64 expiry);\n\n    function ens() external view returns (ENS);\n\n    function registrar() external view returns (IBaseRegistrar);\n\n    function metadataService() external view returns (IMetadataService);\n\n    function names(bytes32) external view returns (bytes memory);\n\n    function wrap(\n        bytes calldata name,\n        address wrappedOwner,\n        address resolver\n    ) external;\n\n    function wrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint32 fuses,\n        uint64 _expiry,\n        address resolver\n    ) external returns (uint64 expiry);\n\n    function registerAndWrapETH2LD(\n        string calldata label,\n        address wrappedOwner,\n        uint256 duration,\n        address resolver,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (uint256 registrarExpiry);\n\n    function renew(\n        uint256 labelHash,\n        uint256 duration,\n        uint64 expiry\n    ) external returns (uint256 expires);\n\n    function unwrap(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external;\n\n    function unwrapETH2LD(\n        bytes32 label,\n        address newRegistrant,\n        address newController\n    ) external;\n\n    function setFuses(bytes32 node, uint32 fuses)\n        external\n        returns (uint32 newFuses);\n\n    function setChildFuses(\n        bytes32 parentNode,\n        bytes32 labelhash,\n        uint32 fuses,\n        uint64 expiry\n    ) external;\n\n    function setSubnodeRecord(\n        bytes32 node,\n        string calldata label,\n        address owner,\n        address resolver,\n        uint64 ttl,\n        uint32 fuses,\n        uint64 expiry\n    ) external;\n\n    function setRecord(\n        bytes32 node,\n        address owner,\n        address resolver,\n        uint64 ttl\n    ) external;\n\n    function setSubnodeOwner(\n        bytes32 node,\n        string calldata label,\n        address newOwner,\n        uint32 fuses,\n        uint64 expiry\n    ) external returns (bytes32);\n\n    function isTokenOwnerOrApproved(bytes32 node, address addr)\n        external\n        view\n        returns (bool);\n\n    function setResolver(bytes32 node, address resolver) external;\n\n    function setTTL(bytes32 node, uint64 ttl) external;\n\n    function ownerOf(uint256 id) external view returns (address owner);\n\n    function allFusesBurned(bytes32 node, uint32 fuseMask)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "lib/EnsPrimaryContractNamer/src/PrimaryEns.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@ens/registry/IReverseRegistrar.sol\";\n\npragma solidity ^0.8.16;\n\nabstract contract PrimaryEns {\n\n    IReverseRegistrar immutable public REVERSE_REGISTRAR;\n\n    address immutable private deployer;\n\n    constructor(){\n        deployer = msg.sender;\n        REVERSE_REGISTRAR = IReverseRegistrar(0x084b1c3C81545d370f3634392De611CaaBFf8148);\n    }\n\n    /*\n     * @description Set the primary name of the contract\n     * @param _ens The ENS that is set to the contract address. Must be full name\n     * including the .eth. Can also be a subdomain.\n     */\n    function setPrimaryName(string calldata _ens) public {\n        require(msg.sender == deployer, \"only deployer\");\n        REVERSE_REGISTRAR.setName(_ens);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol": {
      "content": "import \"../registry/ENS.sol\";\nimport \"./IBaseRegistrar.sol\";\nimport \"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\n\ninterface IBaseRegistrar is IERC721 {\n    event ControllerAdded(address indexed controller);\n    event ControllerRemoved(address indexed controller);\n    event NameMigrated(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRegistered(\n        uint256 indexed id,\n        address indexed owner,\n        uint256 expires\n    );\n    event NameRenewed(uint256 indexed id, uint256 expires);\n\n    // Authorises a controller, who can register and renew domains.\n    function addController(address controller) external;\n\n    // Revoke controller permission for an address.\n    function removeController(address controller) external;\n\n    // Set the resolver for the TLD this registrar manages.\n    function setResolver(address resolver) external;\n\n    // Returns the expiration timestamp of the specified label hash.\n    function nameExpires(uint256 id) external view returns (uint256);\n\n    // Returns true iff the specified name is available for registration.\n    function available(uint256 id) external view returns (bool);\n\n    /**\n     * @dev Register a name.\n     */\n    function register(\n        uint256 id,\n        address owner,\n        uint256 duration\n    ) external returns (uint256);\n\n    function renew(uint256 id, uint256 duration) external returns (uint256);\n\n    /**\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\n     */\n    function reclaim(uint256 id, address owner) external;\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "lib/ens-contracts/contracts/wrapper/IMetadataService.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IMetadataService {\n    function uri(uint256) external view returns (string memory);\n}\n"
    },
    "lib/EnsPrimaryContractNamer/lib/ens-contracts/contracts/registry/IReverseRegistrar.sol": {
      "content": "pragma solidity >=0.8.4;\n\ninterface IReverseRegistrar {\n    function setDefaultResolver(address resolver) external;\n\n    function claim(address owner) external returns (bytes32);\n\n    function claimForAddr(\n        address addr,\n        address owner,\n        address resolver\n    ) external returns (bytes32);\n\n    function claimWithResolver(address owner, address resolver)\n        external\n        returns (bytes32);\n\n    function setName(string memory name) external returns (bytes32);\n\n    function setNameForAddr(\n        address addr,\n        address owner,\n        address resolver,\n        string memory name\n    ) external returns (bytes32);\n\n    function node(address addr) external pure returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@ens/=lib/EnsPrimaryContractNamer/lib/ens-contracts/contracts/",
      "EnsPrimaryContractNamer/=lib/EnsPrimaryContractNamer/src/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "ens-contracts/=lib/ens-contracts/contracts/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "script/=lib/EnsPrimaryContractNamer/script/",
      "src/=src/",
      "test/=test/",
      "src/=src/",
      "test/=test/",
      "script/=script/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}