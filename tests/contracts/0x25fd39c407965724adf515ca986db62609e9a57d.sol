{{
  "language": "Solidity",
  "sources": {
    "contracts/YDFVester.sol": {
      "content": "/******************************************************************************************************\nYieldification Vesting Contract\n\nWebsite: https://yieldification.com\nTwitter: https://twitter.com/yieldification\nTelegram: https://t.me/yieldification\n******************************************************************************************************/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/IYDF.sol';\n\ncontract YDFVester is Ownable {\n  IYDF private _ydf;\n\n  uint256 public fullyVestedPeriod = 90 days;\n  uint256 public withdrawsPerPeriod = 10;\n\n  struct TokenVest {\n    uint256 start;\n    uint256 end;\n    uint256 totalWithdraws;\n    uint256 withdrawsCompleted;\n    uint256 amount;\n  }\n  mapping(address => TokenVest[]) public vests;\n  address[] public stakeContracts;\n\n  event CreateVest(address indexed user, uint256 amount);\n  event Withdraw(address indexed user, uint256 index, uint256 amountWithdrawn);\n\n  modifier onlyStake() {\n    bool isStake;\n    for (uint256 i = 0; i < stakeContracts.length; i++) {\n      if (msg.sender == stakeContracts[i]) {\n        isStake = true;\n        break;\n      }\n    }\n    require(isStake, 'not a staking contract');\n    _;\n  }\n\n  constructor(address _token) {\n    _ydf = IYDF(_token);\n  }\n\n  // we expect the staking contract (re: the owner) to transfer tokens to\n  // this contract, so no need to transferFrom anywhere\n  function createVest(address _user, uint256 _amount) external onlyStake {\n    vests[_user].push(\n      TokenVest({\n        start: block.timestamp,\n        end: block.timestamp + fullyVestedPeriod,\n        totalWithdraws: withdrawsPerPeriod,\n        withdrawsCompleted: 0,\n        amount: _amount\n      })\n    );\n    emit CreateVest(_user, _amount);\n  }\n\n  function withdraw(uint256 _index) external {\n    address _user = msg.sender;\n    TokenVest storage _vest = vests[_user][_index];\n    require(_vest.amount > 0, 'vest does not exist');\n    require(\n      _vest.withdrawsCompleted < _vest.totalWithdraws,\n      'already withdrew all tokens'\n    );\n\n    uint256 _tokensPerWithdrawPeriod = _vest.amount / _vest.totalWithdraws;\n    uint256 _withdrawsAllowed = getWithdrawsAllowed(_user, _index);\n\n    // make sure the calculated allowed amount doesn't exceed total amount for vest\n    _withdrawsAllowed = _withdrawsAllowed > _vest.totalWithdraws\n      ? _vest.totalWithdraws\n      : _withdrawsAllowed;\n\n    require(\n      _vest.withdrawsCompleted < _withdrawsAllowed,\n      'currently vesting, please wait for next withdrawable time period'\n    );\n\n    uint256 _withdrawsToComplete = _withdrawsAllowed - _vest.withdrawsCompleted;\n\n    _vest.withdrawsCompleted = _withdrawsAllowed;\n    _ydf.transfer(_user, _tokensPerWithdrawPeriod * _withdrawsToComplete);\n    _ydf.addToBuyTracker(\n      _user,\n      _tokensPerWithdrawPeriod * _withdrawsToComplete\n    );\n\n    // clean up/remove vest entry if it's completed\n    if (_vest.withdrawsCompleted == _vest.totalWithdraws) {\n      vests[_user][_index] = vests[_user][vests[_user].length - 1];\n      vests[_user].pop();\n    }\n\n    emit Withdraw(\n      _user,\n      _index,\n      _tokensPerWithdrawPeriod * _withdrawsToComplete\n    );\n  }\n\n  function getWithdrawsAllowed(address _user, uint256 _index)\n    public\n    view\n    returns (uint256)\n  {\n    TokenVest memory _vest = vests[_user][_index];\n    uint256 _secondsPerWithdrawPeriod = (_vest.end - _vest.start) /\n      _vest.totalWithdraws;\n    return (block.timestamp - _vest.start) / _secondsPerWithdrawPeriod;\n  }\n\n  function getUserVests(address _user)\n    external\n    view\n    returns (TokenVest[] memory)\n  {\n    return vests[_user];\n  }\n\n  function getYDF() external view returns (address) {\n    return address(_ydf);\n  }\n\n  function addStakingContract(address _contract) external onlyOwner {\n    stakeContracts.push(_contract);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IYDF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\n/**\n * @dev YDF token interface\n */\n\ninterface IYDF is IERC20 {\n  function addToBuyTracker(address _user, uint256 _amount) external;\n\n  function burn(uint256 _amount) external;\n\n  function stakeMintToVester(uint256 _amount) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}