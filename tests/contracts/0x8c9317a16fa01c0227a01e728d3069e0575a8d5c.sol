{{
  "language": "Solidity",
  "sources": {
    "contracts/MekaRhinosStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"erc721a/contracts/extensions/IERC721AQueryable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IRHNO{\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\ncontract MekaRhinosStake is Ownable, ReentrancyGuard {\r\n    uint256 public constant DAY = 24 * 60 * 60; // 86400\r\n    uint256 public constant THIRTY_DAYS = 30 * DAY; // 2592000\r\n    uint256 public constant FIFTY_FIVE_DAYS = 55 * DAY; // 4752000\r\n\r\n    uint256 public reward = 10 ether;\r\n\r\n    address public RHNO = 0xc7054002185b5E79Aa8cF0EC05BE81E507DE39f6;\r\n    address public MekaNFT = 0x14DB21F6D5BfbB0451C6aF1F9682CA3e190c9881;\r\n\r\n    bool public emergencyUnstakePaused = true;\r\n\r\n    IERC721AQueryable nft = IERC721AQueryable(MekaNFT);\r\n    IRHNO token = IRHNO(RHNO);\r\n\r\n    struct stakeRecord {\r\n        address tokenOwner;\r\n        uint256 tokenId;\r\n        uint256 stakedAt;\r\n        uint256 lastClaimed;\r\n        uint256 endingTimestamp;\r\n        uint256 timeFrame;\r\n        uint256 earned;\r\n    }\r\n\r\n    mapping(uint256 => stakeRecord) public stakingRecords;\r\n\r\n    mapping(address => uint256) public numOfTokenStaked;\r\n\r\n    event Staked(address owner, uint256 amount, uint256 timeframe);\r\n\r\n    event Unstaked(address owner, uint256 amount);\r\n\r\n    event EmergencyUnstake(address indexed user, uint256 tokenId);\r\n\r\n    constructor() {}\r\n\r\n    // MODIFIER\r\n    modifier checkArgsLength(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata timeframe\r\n    ) {\r\n        require(\r\n            tokenIds.length == timeframe.length,\r\n            \"Token IDs and timeframes must have the same length.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier checkStakingTimeframe(uint256[] calldata timeframe) {\r\n        for (uint256 i = 0; i < timeframe.length; i++) {\r\n            uint256 period = timeframe[i];\r\n            require(\r\n                period == THIRTY_DAYS ||\r\n                    period == FIFTY_FIVE_DAYS,\r\n                \"Invalid staking timeframes.\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    // STAKING\r\n    function batchStake(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata timeframe\r\n    )\r\n        external\r\n        checkStakingTimeframe(timeframe)\r\n        checkArgsLength(tokenIds, timeframe)\r\n    {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _stake(msg.sender, tokenIds[i], timeframe[i]);\r\n        }\r\n    }\r\n\r\n    function _stake(\r\n        address _user,\r\n        uint256 _tokenId,\r\n        uint256 _timeframe\r\n    ) internal {\r\n        require(\r\n            nft.ownerOf(_tokenId) == msg.sender,\r\n            \"You must own the NFT.\"\r\n        );\r\n        uint256 currentTimestamp = block.timestamp;\r\n\r\n        uint256 endingTimestamp = currentTimestamp + _timeframe;\r\n\r\n        stakingRecords[_tokenId] = stakeRecord(\r\n            _user,\r\n            _tokenId,\r\n            currentTimestamp,\r\n            currentTimestamp,\r\n            endingTimestamp,\r\n            _timeframe,\r\n            0\r\n        );\r\n        numOfTokenStaked[_user] = numOfTokenStaked[_user] + 1;\r\n        nft.safeTransferFrom(\r\n            _user,\r\n            address(this),\r\n            _tokenId\r\n        );\r\n\r\n        emit Staked(_user, _tokenId, _timeframe);\r\n    }\r\n\r\n    function batchTotalEarned (uint256[] memory _tokenIds) public view returns (uint256){\r\n        uint256 earned = 0;\r\n\r\n        for(uint256 i = 0; i < _tokenIds.length; i++){\r\n            earned += totalEarned(_tokenIds[i]);\r\n        }\r\n\r\n        return earned;\r\n    }\r\n\r\n    function totalEarned (uint256 _tokenId) public view returns (uint256){\r\n        uint256 claimable = 0;\r\n        uint256 maxEarned = (reward * stakingRecords[_tokenId].timeFrame / DAY) - stakingRecords[_tokenId].earned;\r\n        uint256 earned = reward * (block.timestamp - stakingRecords[_tokenId].lastClaimed) / DAY;\r\n\r\n        if(earned > maxEarned) claimable = maxEarned;\r\n        else claimable = earned;\r\n\r\n        return claimable;\r\n    }\r\n\r\n    function batchClaim(uint256[] memory _tokenIds) external{\r\n        for(uint256 i = 0; i < _tokenIds.length; i++){\r\n            claim(_tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function claim(uint256 _tokenId) internal{\r\n        require(stakingRecords[_tokenId].tokenOwner == msg.sender, \"Token does not belong to you.\");\r\n        require(stakingRecords[_tokenId].lastClaimed < stakingRecords[_tokenId].endingTimestamp, \"Not eligible to claim.\");\r\n\r\n        uint256 claimable = totalEarned(_tokenId);\r\n\r\n        require(claimable > 0, \"Not enough balance.\");\r\n\r\n        stakingRecords[_tokenId].earned = claimable;\r\n        stakingRecords[_tokenId].lastClaimed = block.timestamp;\r\n        \r\n        token.mint(msg.sender, claimable);\r\n    }\r\n\r\n    // RESTAKE\r\n    function batchRestake(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata timeframe\r\n    )\r\n        external\r\n        checkStakingTimeframe(timeframe)\r\n        checkArgsLength(tokenIds, timeframe)\r\n    {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _restake(msg.sender, tokenIds[i], timeframe[i]);\r\n        }\r\n    }\r\n\r\n    function _restake(\r\n        address _user,\r\n        uint256 _tokenId,\r\n        uint256 _timeframe\r\n    ) internal {\r\n        require(\r\n            block.timestamp >= stakingRecords[_tokenId].endingTimestamp,\r\n            \"NFT is locked.\"\r\n        );\r\n        require(\r\n            stakingRecords[_tokenId].tokenOwner == msg.sender,\r\n            \"Token does not belong to you.\"\r\n        );\r\n\r\n        uint256 currentTimestamp = block.timestamp;\r\n\r\n        uint256 endingTimestamp = currentTimestamp + _timeframe;\r\n\r\n        stakingRecords[_tokenId].endingTimestamp = endingTimestamp;\r\n        stakingRecords[_tokenId].timeFrame = _timeframe;\r\n        stakingRecords[_tokenId].earned = 0;\r\n        stakingRecords[_tokenId].lastClaimed = currentTimestamp;\r\n        stakingRecords[_tokenId].stakedAt = currentTimestamp;\r\n\r\n        emit Staked(_user, _tokenId, _timeframe);\r\n    }\r\n\r\n    // UNSTAKE\r\n    function batchUnstake(uint256[] calldata tokenIds) external nonReentrant {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            _unstake(msg.sender, tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function _unstake(address _user, uint256 _tokenId) internal {\r\n        require(\r\n            block.timestamp >= stakingRecords[_tokenId].endingTimestamp,\r\n            \"NFT is locked.\"\r\n        );\r\n        require(\r\n            stakingRecords[_tokenId].tokenOwner == msg.sender,\r\n            \"Token does not belong to you.\"\r\n        );\r\n\r\n        delete stakingRecords[_tokenId];\r\n        numOfTokenStaked[_user]--;\r\n        nft.safeTransferFrom(\r\n            address(this),\r\n            _user,\r\n            _tokenId\r\n        );\r\n\r\n        emit Unstaked(_user, _tokenId);\r\n    }\r\n\r\n    function getStakingRecords(address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory, uint256[] memory)\r\n    {\r\n        uint256[] memory tokenIds = new uint256[](numOfTokenStaked[user]);\r\n        uint256[] memory expiries = new uint256[](numOfTokenStaked[user]);\r\n        uint256 counter = 0;\r\n        for (\r\n            uint256 i = 0;\r\n            i <= IERC721A(MekaNFT).totalSupply();\r\n            i++\r\n        ) {\r\n            if (stakingRecords[i].tokenOwner == user) {\r\n                tokenIds[counter] = stakingRecords[i].tokenId;\r\n                expiries[counter] = stakingRecords[i].endingTimestamp;\r\n                counter++;\r\n            }\r\n        }\r\n        return (tokenIds, expiries);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    // MIGRATION ONLY.\r\n    function setMekaNFTContract (address _address) public onlyOwner {\r\n        MekaNFT = _address;\r\n    }\r\n\r\n    function setTokenContract (address _address) public onlyOwner {\r\n        RHNO = _address;\r\n    }\r\n\r\n    function setReward (uint256 _newReward) public onlyOwner {\r\n        reward = _newReward;\r\n    }\r\n\r\n    // EMERGENCY ONLY.\r\n    function setEmergencyUnstakePaused(bool paused) public onlyOwner {\r\n        emergencyUnstakePaused = paused;\r\n    }\r\n\r\n    function emergencyUnstake(uint256 tokenId) external nonReentrant {\r\n        require(!emergencyUnstakePaused, \"No emergency unstake.\");\r\n        require(\r\n            stakingRecords[tokenId].tokenOwner == msg.sender,\r\n            \"Token does not belong to you.\"\r\n        );\r\n        delete stakingRecords[tokenId];\r\n        numOfTokenStaked[msg.sender]--;\r\n        nft.safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            tokenId\r\n        );\r\n        emit EmergencyUnstake(msg.sender, tokenId);\r\n    }\r\n\r\n    function emergencyUnstakeByOwner(uint256[] calldata tokenIds)\r\n        external\r\n        onlyOwner\r\n        nonReentrant\r\n    {\r\n        require(!emergencyUnstakePaused, \"No emergency unstake.\");\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            address user = stakingRecords[tokenId].tokenOwner;\r\n            require(user != address(0x0), \"Need owner exists.\");\r\n            delete stakingRecords[tokenId];\r\n            numOfTokenStaked[user]--;\r\n            nft.safeTransferFrom(\r\n                address(this),\r\n                user,\r\n                tokenId\r\n            );\r\n            emit EmergencyUnstake(user, tokenId);\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "erc721a/contracts/extensions/IERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of an ERC721AQueryable compliant contract.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *   - `addr` = `address(0)`\n     *   - `startTimestamp` = `0`\n     *   - `burned` = `false`\n     *\n     * If the `tokenId` is burned:\n     *   - `addr` = `<Address of owner before token was burned>`\n     *   - `startTimestamp` = `<Timestamp when token was burned>`\n     *   - `burned = `true`\n     *\n     * Otherwise:\n     *   - `addr` = `<Address of owner>`\n     *   - `startTimestamp` = `<Timestamp of start of ownership>`\n     *   - `burned = `false`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start` < `stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K pfp collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.1.0\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of an ERC721A compliant contract.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\n        uint24 extraData;\n    }\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     *\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // ==============================\n    //            IERC165\n    // ==============================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // ==============================\n    //            IERC721\n    // ==============================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // ==============================\n    //        IERC721Metadata\n    // ==============================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // ==============================\n    //            IERC2309\n    // ==============================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}