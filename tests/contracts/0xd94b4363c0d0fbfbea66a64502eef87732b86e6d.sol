{{
  "language": "Solidity",
  "sources": {
    "contracts/CryptoEddiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CRYPTO EDDIES  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   by @eddietree  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  (LET TRY THIS AGAIN SHALL WE?) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWx'....................................:0WWWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNNNo.                                    ,ONNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNWWNd'..;looooooooooooooooooooooooooooooooooooc,..;OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNNWNl   ,xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.  .kWNNNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWNd,',:llldkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxollc;'';OWWWNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd.  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ,kOOOOOOOOOOO0000000KKKKKKKKKKKKKKKKK00000000Kx.  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOOOOOOKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOO000KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKOl;;ckKKKKKKKKKKKKKKKKkc;;lOXXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKk'  .oKKKKKKKKKKKKKKKXo.  .xXXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNNNXxllc.   ;kOOOOOO0KKKKKKK0occc::::cxKKKKKKKkc:::cccoOKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXNWMMX;       ;kOOOOOO0KKKKKKKKKKXO,    cKKKKKKKl   'OXXXKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXNNNKxoolc:::::::okOOOOOO0KKKKKKK0occc:::::xKKKKKKKxc:::cccoOKXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKK0OOOOOOO0KKKKKKXk'  .oKKKKKKKKKKKKKKXKo.  .xKXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKKK000OOOO0KKKKKKKOl;;:kKKKKKKKKK0000KKKkc;;lOKKOl;;:lddd0NNNXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKKKKKK0OOO0KKKKKKKKKKKKKKKKKKKKK0kkkOKKKKKKKKKKKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXNWWKo;;:coooooookKKKK0000KKKKKKKKKKK0xooookKKKxc::d0KKOdood0KKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXNWWMX;       :0KKKKKKKKKKKKKKKKKXO,    cKKKc   ;0KXo.  .xKKKKKXO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNWWXo,,,,,,,coodkKKKKKKKKKKKKKKK0c''',codo:''':oddc,'':kXKKKKXO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWWWWWNl   ;0KKKKKKKKKKKKKKKKKKKO;   :0K0l.  ,kKKKKKKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWWWWWNx,'':dddkKKKKKKKKKKKKKKKX0l..'oKKKd'..:OXKKKKK0kddo:'',xWWWNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNNNNd.  ,OXKKKKKKKKKKKKKKKK000KKKKK0000KKKKKKKk,  .dNNNNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXNXK000o'..;dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo;..,kWWWNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNWMWo...;k0Ol.                                    'xXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXKK0l...c0KKd'............................     ...,OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWNl...:kOO0KKX0OOOOOOOOOOOOOOOOOOOOOOOOOOOOOc.  .xKKXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXX0c...cKKK0OOO0KKKKKKKKKKKKKKKKKKKKKKKKK0OOOl.  '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNWWXc..'cxkk0KKKo...:OKKKKKKKOkkO0KKKK0kkO0KKKo'...   '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;   lKKKKKKKl.  ,x000KKKKOkkk0KKKKOkkk0KKKl       ,ONNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;   cKKKKKKK0xxxl'..;kXKKK000KKKKKK000KKKKl   .oxxo,'.:OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;  .c000KKKKKKKKo.  .xKKKKKKKKKKKKKKKKKKKKl   'kXXx.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXNNX0kkkc'''oKKKKKKKo.  .xKK0dlloxkkkkkkkk0KKKl   'kXXx.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMNc   :0KKKKKKo.  .xKKOl:::oxxxxxxxxOKKKl   'kKKd.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNNNX0xxxc,,,,,,,;loox0KKOl:::oxxxxxxxxOKKKl    ',,:oxxkKNNNXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNMMWl       'kXKKKKKOl;::oxxxxxxxxOKKKl       '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNNNN0ddd;   'OXXkc,,;;:::oxxxxxxxxOKKKl   .lddkKNNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OXXd.   ':::oxxxxxxxxOKKKl   ,KMMWNXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OKXx.  .lOOO0KKK0o,,,oKKKl   ,KMMWNXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OKKd.  .kMMMMMMMNc   :0XKl   ,KMMWXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWx'..:OXXk;..;OWWWWWWWNo...lKKKd'..cKWWNXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n*/\r\n// special thanks to 0xmetazen and troph for reviewing the code\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport 'base64-sol/base64.sol';\r\n\r\nimport \"./EddieRenderer.sol\";\r\nimport \"./CryptoDeddiesV2.sol\";\r\nimport \"./CryptoEddies.sol\"; // OG\r\n\r\n/// @title CryptoEddies V2\r\n/// @author @eddietree\r\n/// @notice CryptoEddies is an 100% on-chain experimental NFT character project.\r\ncontract CryptoEddiesV2 is ERC721A, Ownable {\r\n    \r\n    uint256 public constant MAX_TOKEN_SUPPLY = 3500;\r\n    uint public constant MAX_HP = 5;\r\n\r\n    // contracts\r\n    CryptoDeddiesV2 public contractGhost;\r\n    CryptoEddies public contractEddieOG;\r\n    address public contractHpEffector;\r\n\r\n    bool public revealed = true;\r\n    bool public rerollingEnabled = true;\r\n    bool public claimEnabled = true;\r\n    bool public burnSacrificeEnabled = false;\r\n\r\n    mapping(uint256 => uint256) public ogTokenId; // tokenId=>ogTokenId (From original contract)\r\n    mapping(uint256 => uint256) public seeds; // seeds for image + stats\r\n    mapping(uint256 => uint) public hp; // health power\r\n\r\n    // events\r\n    event EddieDied(uint256 indexed tokenId); // emitted when an HP goes to zero\r\n    event EddieRerolled(uint256 indexed tokenId); // emitted when an Eddie gets re-rolled\r\n    event EddieSacrificed(uint256 indexed tokenId); // emitted when an Eddie gets sacrificed\r\n\r\n    constructor(address _contractEddieOG) ERC721A(\"CryptoEddiesV2\", \"EDDIEV2\") {\r\n        contractEddieOG = CryptoEddies(_contractEddieOG);\r\n    }\r\n\r\n    modifier verifyTokenId(uint256 tokenId) {\r\n        require(tokenId >= _startTokenId() && tokenId <= _totalMinted(), \"Out of bounds\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\r\n        require(\r\n            _ownershipOf(tokenId).addr == _msgSender() ||\r\n                getApproved(tokenId) == _msgSender(),\r\n            \"Not approved nor owner\"\r\n        );\r\n        \r\n        _;\r\n    }\r\n\r\n    function claimMany(uint256[] calldata tokenIds) external {\r\n        require(claimEnabled == true);\r\n\r\n        // clamp the total minted\r\n        //require(_totalMinted() + tokenIds.length <= MAX_TOKEN_SUPPLY );\r\n\r\n        uint256 num = tokenIds.length;\r\n        uint256 startTokenId = _startTokenId() + _totalMinted();\r\n        address sender = msg.sender;\r\n\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 originalTokenId = tokenIds[i];\r\n            uint256 newTokenId = startTokenId + i;\r\n\r\n            //require(sender == contractEddieOG.ownerOf(originalTokenId)); // check ownership\r\n            //require(ogTokenId[newTokenId] == 0); // check not already claimed\r\n\r\n            // transfer each token to this contract and then call the burn function\r\n            // since the 'burnSacrifice' call can only be called on the owner,\r\n            // we had to first transfer to this contract before excuting burnSacrifice\r\n            contractEddieOG.transferFrom(sender, address(this), originalTokenId);\r\n            contractEddieOG.burnSacrifice(originalTokenId);\r\n\r\n            // save data on new token\r\n            ogTokenId[newTokenId] = originalTokenId;\r\n            hp[newTokenId] = MAX_HP;\r\n            _saveSeed(newTokenId); // reshuffle\r\n            //seeds[newTokenId] = contractEddieOG.seeds(originalTokenId); // copy seed over\r\n        }\r\n\r\n        //_safeMint(sender, num);\r\n        _mint(sender, num);\r\n    }\r\n\r\n    function _rerollEddie(uint256 tokenId) verifyTokenId(tokenId) private {\r\n        require(revealed == true, \"Not revealed\");\r\n        require(hp[tokenId] > 0, \"No HP\");\r\n        require(msg.sender == ownerOf(tokenId), \"Not yours\");\r\n\r\n        _saveSeed(tokenId);   \r\n        _takeDamageHP(tokenId, msg.sender);\r\n\r\n        emit EddieRerolled(tokenId);\r\n    }\r\n\r\n    /// @notice Rerolls the visuals and stats of one CryptoEddie, deals -1 HP damage!\r\n    /// @param tokenId The token ID for the CryptoEddie to reroll\r\n    function rerollEddie(uint256 tokenId) external {\r\n        require(rerollingEnabled == true);\r\n        _rerollEddie(tokenId);\r\n    }\r\n\r\n    /// @notice Rerolls the visuals and stats of many CryptoEddies, deals -1 HP damage!\r\n    /// @param tokenIds An array of token IDs\r\n    function rerollEddieMany(uint256[] calldata tokenIds) external {\r\n        require(rerollingEnabled == true);\r\n        uint256 num = tokenIds.length;\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            _rerollEddie(tokenId);\r\n        }\r\n    }\r\n\r\n    function _saveSeed(uint256 tokenId) private {\r\n        seeds[tokenId] = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), tokenId, msg.sender)));\r\n    }\r\n\r\n    /// @notice Destroys your CryptoEddie, spawning a ghost\r\n    /// @param tokenId The token ID for the CryptoEddie\r\n    function burnSacrifice(uint256 tokenId) external onlyApprovedOrOwner(tokenId) {\r\n        //require(msg.sender == ownerOf(tokenId), \"Not yours\");\r\n        require(burnSacrificeEnabled == true);\r\n\r\n        address ownerOfEddie = ownerOf(tokenId);\r\n\r\n        _burn(tokenId);\r\n\r\n        // if not already dead, force kill and spawn ghost\r\n        if (hp[tokenId] > 0) {\r\n            hp[tokenId] = 0;\r\n        \r\n             // cancel vibing\r\n            _resetAndCancelVibing(tokenId);\r\n\r\n            emit EddieDied(tokenId);\r\n\r\n            if (address(contractGhost) != address(0)) {\r\n                contractGhost.spawnGhost(ownerOfEddie, tokenId, seeds[tokenId]);\r\n            }\r\n        }\r\n\r\n        emit EddieSacrificed(tokenId);\r\n    }\r\n\r\n    function _startTokenId() override internal pure virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    // taken from 'ERC721AQueryable.sol'\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\r\n        unchecked {\r\n            uint256 tokenIdsIdx;\r\n            address currOwnershipAddr;\r\n            uint256 tokenIdsLength = balanceOf(owner);\r\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\r\n            TokenOwnership memory ownership;\r\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\r\n                ownership = _ownershipAt(i);\r\n                if (ownership.burned) {\r\n                    continue;\r\n                }\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    tokenIds[tokenIdsIdx++] = i;\r\n                }\r\n            }\r\n            return tokenIds;\r\n        }\r\n    }\r\n\r\n    function setContractEddieOG(address newAddress) external onlyOwner {\r\n        contractEddieOG = CryptoEddies(newAddress);\r\n    }\r\n\r\n    function setContractGhost(address newAddress) external onlyOwner {\r\n        contractGhost = CryptoDeddiesV2(newAddress);\r\n    }\r\n\r\n    function setClaimEnabled(bool _enabled) external onlyOwner {\r\n        claimEnabled = _enabled;\r\n    }\r\n\r\n    function setContractHpEffector(address newAddress) external onlyOwner {\r\n        contractHpEffector = newAddress;\r\n    }\r\n\r\n    function setRevealed(bool _revealed) external onlyOwner {\r\n        revealed = _revealed;\r\n    }\r\n\r\n    function setRerollingEnabled(bool _enabled) external onlyOwner {\r\n        rerollingEnabled = _enabled;\r\n    }\r\n\r\n    function setBurnSacrificeEnabled(bool _enabled) external onlyOwner {\r\n        burnSacrificeEnabled = _enabled;\r\n    }\r\n\r\n    // props to @cygaar_dev\r\n    //error SteveAokiNotAllowed();\r\n    //address public constant STEVE_AOKI_ADDRESS = 0xe4bBCbFf51e61D0D95FcC5016609aC8354B177C4;\r\n\r\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal override {\r\n        // removed to optimize gas, u are now re-admitted into the club, Mr. Aoki\r\n        /*if (to == STEVE_AOKI_ADDRESS) { // sorry Mr. Aoki\r\n            revert SteveAokiNotAllowed();\r\n        }*/\r\n\r\n        if (from == address(0) || to == address(0))  // bypass for minting and burning\r\n            return;\r\n\r\n        for (uint256 tokenId = startTokenId; tokenId < startTokenId + quantity; ++tokenId) {\r\n            //require(hp[tokenId] > 0, \"No more HP\"); // soulbound?\r\n\r\n            // transfers reduces HP\r\n            _takeDamageHP(tokenId, from);\r\n        }\r\n    }\r\n\r\n    function _takeDamageHP(uint256 tokenId, address mintGhostTo) private verifyTokenId(tokenId){\r\n        if (hp[tokenId] == 0) // to make sure it doesn't wrap around\r\n            return;\r\n\r\n        hp[tokenId] -= 1;\r\n\r\n        // taking damage resets your vibing\r\n        _resetAndCancelVibing(tokenId);\r\n\r\n        if (hp[tokenId] == 0) {\r\n            emit EddieDied(tokenId);\r\n\r\n            if (address(contractGhost) != address(0)) {\r\n                contractGhost.spawnGhost(mintGhostTo, tokenId, seeds[tokenId]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rewardManyHP(uint256[] calldata tokenIds, int hpRewarded) external /*onlyOwner*/ {\r\n        // only admin or another authorized smart contract can change HP\r\n        // perhaps a hook for future content? ;)\r\n        require(owner() == _msgSender() || (contractHpEffector != address(0) && _msgSender() == contractHpEffector), \"Not authorized\");\r\n\r\n        uint256 num = tokenIds.length;\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n\r\n            if (hp[tokenId] > 0 ) { // not dead\r\n\r\n                int newHp = int256(hp[tokenId]) + hpRewarded;\r\n\r\n                // clamping between [0,MAX_HP]\r\n                if (newHp > int(MAX_HP)) \r\n                    newHp = int(MAX_HP);\r\n                \r\n                else if (newHp <= 0) {\r\n                    newHp = 0;\r\n\r\n                    // spawn ghost\r\n                    emit EddieDied(tokenId);\r\n                    if (address(contractGhost) != address(0)) {\r\n                        contractGhost.spawnGhost(ownerOf(tokenId), tokenId, seeds[tokenId]);\r\n                    }\r\n                }\r\n\r\n                hp[tokenId] = uint256(newHp);\r\n\r\n                // taking damage resets your vibing\r\n                if (hpRewarded < 0) {\r\n                     _resetAndCancelVibing(tokenId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Retrieves the HP\r\n    /// @param tokenId The token ID for the CryptoEddie\r\n    /// @return hp the amount of HP for the CryptoEddie\r\n    function getHP(uint256 tokenId) external view verifyTokenId(tokenId) returns(uint){\r\n        return hp[tokenId];\r\n    }\r\n\r\n    function numberMinted(address addr) external view returns(uint256){\r\n        return _numberMinted(addr);\r\n    }\r\n\r\n    ///////////////////////////\r\n    // -- TOKEN URI --\r\n    ///////////////////////////\r\n    function _tokenURI(uint256 tokenId) private view returns (string memory) {\r\n        string[6] memory lookup = [  '0', '1', '2', '3', '4', '5'];\r\n        uint256 seed = seeds[tokenId];\r\n        string memory image = contractEddieOG.getSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoEddie #', Strings.toString(tokenId),'\",',\r\n                    '\"description\": \"CryptoEddies is an 100% on-chain experimental NFT character project with unique functionality, inspired by retro Japanese RPGs. Formerly known as CryptoEddie #', Strings.toString(ogTokenId[tokenId]),'.\",',\r\n                    '\"attributes\":[',\r\n                        contractEddieOG.getTraitsMetadata(seed),\r\n                        _getStatsMetadata(seed),\r\n                        '{\"trait_type\":\"Vibing?\", \"value\":', (vibingStartTimestamp[tokenId] != NULL_VIBING) ? '\"Yes\"' : '\"Nah\"', '},',\r\n                        //'{\"trait_type\":\"OG TokenID\", \"value\":', Strings.toString(ogTokenId[tokenId]), '},',\r\n                        '{\"trait_type\":\"HP\", \"value\":',lookup[hp[tokenId]],', \"max_value\":',lookup[MAX_HP],'}'\r\n                    '],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function _tokenUnrevealedURI(uint256 tokenId) private view returns (string memory) {\r\n        uint256 seed = seeds[tokenId];\r\n        string memory image = contractEddieOG.getUnrevealedSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoEddie #', Strings.toString(tokenId),'\",',\r\n                    '\"description\": \"CryptoEddies is an 100% on-chain experimental character art project, chillin on the Ethereum blockchain.\",',\r\n                    '\"attributes\":[{\"trait_type\":\"Unrevealed\", \"value\":\"True\"}],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override(ERC721A) public view verifyTokenId(tokenId) returns (string memory) {\r\n        if (revealed) \r\n            return _tokenURI(tokenId);\r\n        else\r\n            return _tokenUnrevealedURI(tokenId);\r\n    }\r\n\r\n    function _randStat(uint256 seed, uint256 div, uint256 min, uint256 max) private pure returns (uint256) {\r\n        return min + (seed/div) % (max-min);\r\n    }\r\n\r\n    function _getStatsMetadata(uint256 seed) private pure returns (string memory) {\r\n        string[11] memory lookup = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ];\r\n\r\n        string memory metadata = string(abi.encodePacked(\r\n          '{\"trait_type\":\"Determination\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 2, 2, 10)], '},',\r\n          '{\"trait_type\":\"Love\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 3, 2, 10)], '},',\r\n          '{\"trait_type\":\"Cringe\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 4, 2, 10)], '},',\r\n          '{\"trait_type\":\"Bonk\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 5, 2, 10)], '},',\r\n          '{\"trait_type\":\"Magic Defense\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 6, 2, 10)], '},'\r\n        ));\r\n\r\n        return metadata;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    ///////////////////////////\r\n    // -- VIBING --\r\n    ///////////////////////////\r\n\r\n    bool public isVibingEnabled = false;\r\n\r\n    // vibing\r\n    mapping(uint256 => uint256) private vibingStartTimestamp; // tokenId -> vibing start time (0 = not vibing).\r\n    mapping(uint256 => uint256) private vibingTotalTime; // tokenId -> cumulative vibing time, does not include current time if vibing\r\n    \r\n    uint256 private constant NULL_VIBING = 0;\r\n    event EventStartVibing(uint256 indexed tokenId);\r\n    event EventEndVibing(uint256 indexed tokenId);\r\n    event EventForceEndVibing(uint256 indexed tokenId);\r\n\r\n    // currentVibingTime: current vibing time in secs (0 = not vibing)\r\n    // totalVibingTime: total time of vibing (in secs)\r\n    function getVibingInfoForToken(uint256 tokenId) external view returns (uint256 currentVibingTime, uint256 totalVibingTime)\r\n    {\r\n        currentVibingTime = 0;\r\n        uint256 startTimestamp = vibingStartTimestamp[tokenId];\r\n\r\n        // is vibing?\r\n        if (startTimestamp != NULL_VIBING) { \r\n            currentVibingTime = block.timestamp - startTimestamp;\r\n        }\r\n\r\n        totalVibingTime = currentVibingTime + vibingTotalTime[tokenId];\r\n    }\r\n\r\n    function setVibingEnabled(bool allowed) external onlyOwner {\r\n        require(allowed != isVibingEnabled);\r\n        isVibingEnabled = allowed;\r\n    }\r\n\r\n    function _toggleVibing(uint256 tokenId) private onlyApprovedOrOwner(tokenId)\r\n    {\r\n        require(hp[tokenId] > 0);\r\n\r\n        uint256 startTimestamp = vibingStartTimestamp[tokenId];\r\n\r\n        if (startTimestamp == NULL_VIBING) { \r\n            // start vibing\r\n            require(isVibingEnabled, \"Disabled\");\r\n            vibingStartTimestamp[tokenId] = block.timestamp;\r\n\r\n            emit EventStartVibing(tokenId);\r\n        } else { \r\n            // start unvibing\r\n            vibingTotalTime[tokenId] += block.timestamp - startTimestamp;\r\n            vibingStartTimestamp[tokenId] = NULL_VIBING;\r\n\r\n            emit EventEndVibing(tokenId);\r\n        }\r\n    }\r\n\r\n    function toggleVibing(uint256[] calldata tokenIds) external {\r\n        uint256 num = tokenIds.length;\r\n\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            _toggleVibing(tokenId);\r\n        }\r\n    }\r\n\r\n    function _resetAndCancelVibing(uint256 tokenId) private {\r\n        if (vibingStartTimestamp[tokenId] != NULL_VIBING) {\r\n            vibingStartTimestamp[tokenId] = NULL_VIBING;\r\n            emit EventEndVibing(tokenId);\r\n        }\r\n\r\n        // clear total time\r\n        if (vibingTotalTime[tokenId] != NULL_VIBING)    \r\n            vibingTotalTime[tokenId] = NULL_VIBING;\r\n    }\r\n\r\n    function _adminForceStopVibing(uint256 tokenId) private {\r\n        require(vibingStartTimestamp[tokenId] != NULL_VIBING, \"Character not vibing\");\r\n        \r\n        // accum current time\r\n        uint256 deltaTime = block.timestamp - vibingStartTimestamp[tokenId];\r\n        vibingTotalTime[tokenId] += deltaTime;\r\n\r\n        // no longer vibing\r\n        vibingStartTimestamp[tokenId] = NULL_VIBING;\r\n\r\n        emit EventEndVibing(tokenId);\r\n        emit EventForceEndVibing(tokenId);\r\n    }\r\n\r\n    function adminForceStopVibing(uint256[] calldata tokenIds) external onlyOwner {\r\n        uint256 num = tokenIds.length;\r\n\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            _adminForceStopVibing(tokenId);\r\n        }\r\n    }\r\n}"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Reference type for token approval.\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\n\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aliged.\n            // We will need 1 32-byte word to store the length,\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\n            str := add(mload(0x40), 0x80)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, str)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/EddieRenderer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport 'base64-sol/base64.sol';\r\n\r\nimport \"./EddieData.sol\";\r\n\r\ncontract EddieRenderer is EddieData {\r\n\r\n  string[] public bgPaletteColors = [\r\n    'b5eaea', 'b5c7ea', 'eab6b5', 'c3eab5', 'eab5d9',\r\n    'fafc51', '3a89ff', '5eff8f', 'ff6efa', 'a1a1a1'\r\n  ];\r\n  \r\n  struct CharacterData {\r\n    uint background;\r\n\r\n    uint body;\r\n    uint head;\r\n    uint eyes;\r\n    uint mouth;\r\n    uint hair;\r\n  }\r\n\r\n  function getSVG(uint256 seed) external view returns (string memory) {\r\n    return _getSVG(seed);\r\n  }\r\n\r\n  function _getSVG(uint256 seed) internal view returns (string memory) {\r\n    CharacterData memory data = _generateCharacterData(seed);\r\n\r\n    string memory image = string(abi.encodePacked(\r\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" shape-rendering=\"crispEdges\" width=\"768\" height=\"768\">'\r\n      '<rect width=\"100%\" height=\"100%\" fill=\"#', bgPaletteColors[data.background], '\"/>',\r\n      _renderRects(heads[data.head], fullPalettes),\r\n      _renderRects(bodies[data.body], fullPalettes),\r\n      _renderRects(hair[data.hair], fullPalettes),\r\n      _renderRects(mouths[data.mouth], fullPalettes),\r\n      _renderRects(eyes[data.eyes], fullPalettes),\r\n      '</svg>'\r\n    ));\r\n\r\n    return image;\r\n  }\r\n\r\n  function getGhostSVG(uint256 seed) external view returns (string memory) {\r\n    return _getGhostSVG(seed);\r\n  }\r\n\r\n  function _getGhostSVG(uint256 seed) internal view returns (string memory) {\r\n    CharacterData memory data = _generateCharacterData(seed);\r\n\r\n    string memory image = string(abi.encodePacked(\r\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" shape-rendering=\"crispEdges\" width=\"768\" height=\"768\">'\r\n      '<rect width=\"100%\" height=\"100%\" fill=\"#3b89ff\"/>',\r\n      //_renderRects(bodies[data.body], fullPalettes),\r\n      //_renderRects(heads[data.head], fullPalettes),\r\n      _renderRects(misc[0], fullPalettes), // ghost body\r\n      _renderRects(hair[data.hair], fullPalettes),\r\n      _renderRects(mouths[data.mouth], fullPalettes),\r\n      _renderRects(eyes[data.eyes], fullPalettes),\r\n      '</svg>'\r\n    ));\r\n\r\n    return image;\r\n  }\r\n\r\n  function getUnrevealedSVG(uint256 seed) external view returns (string memory) {\r\n    return _getUnrevealedSVG(seed);\r\n  }\r\n\r\n  function _getUnrevealedSVG(uint256 seed) internal view returns (string memory) {\r\n    CharacterData memory data = _generateCharacterData(seed);\r\n\r\n    string memory image = string(abi.encodePacked(\r\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" shape-rendering=\"crispEdges\" width=\"768\" height=\"768\">'\r\n      '<rect width=\"100%\" height=\"100%\" fill=\"#', bgPaletteColors[data.background], '\"/>',\r\n      _renderRects(misc[1], fullPalettes), // ghost body\r\n      '</svg>'\r\n    ));\r\n\r\n    return image;\r\n  }\r\n\r\n  function getTraitsMetadata(uint256 seed) external view returns (string memory) {\r\n    return _getTraitsMetadata(seed);\r\n  }\r\n\r\n  function _getTraitsMetadata(uint256 seed) internal view returns (string memory) {\r\n    CharacterData memory data = _generateCharacterData(seed);\r\n\r\n    string[24] memory lookup = [\r\n      '0', '1', '2', '3', '4', '5', '6', '7',\r\n      '8', '9', '10', '11', '12', '13', '14', '15',\r\n      '16', '17', '18', '19', '20', '21', '22', '23'\r\n    ];\r\n\r\n    string memory metadata = string(abi.encodePacked(\r\n      '{\"trait_type\":\"Background\", \"value\":\"', lookup[data.background+1], '\"},',\r\n      '{\"trait_type\":\"Outfit\", \"value\":\"', bodies_traits[data.body], '\"},',\r\n      '{\"trait_type\":\"Class\", \"value\":\"', heads_traits[data.head], '\"},',\r\n      '{\"trait_type\":\"Eyes\", \"value\":\"', eyes_traits[data.eyes], '\"},',\r\n      '{\"trait_type\":\"Mouth\", \"value\":\"', mouths_traits[data.mouth], '\"},',\r\n      '{\"trait_type\":\"Head\", \"value\":\"', hair_traits[data.hair], '\"},'\r\n    ));\r\n\r\n    return metadata;\r\n  }\r\n\r\n  function _renderRects(bytes memory data, string[] memory palette) private pure returns (string memory) {\r\n    string[24] memory lookup = [\r\n      '0', '1', '2', '3', '4', '5', '6', '7',\r\n      '8', '9', '10', '11', '12', '13', '14', '15',\r\n      '16', '17', '18', '19', '20', '21', '22', '23'\r\n    ];\r\n\r\n    string memory rects;\r\n    uint256 drawIndex = 0;\r\n\r\n    for (uint256 i = 0; i < data.length; i = i+2) {\r\n      uint8 runLength = uint8(data[i]); // we assume runLength of any non-transparent segment cannot exceed image width (24px)\r\n      uint8 colorIndex = uint8(data[i+1]);\r\n\r\n      if (colorIndex != 0) { // transparent\r\n        uint8 x = uint8(drawIndex % 24);\r\n        uint8 y = uint8(drawIndex / 24);\r\n        string memory color = palette[colorIndex];\r\n\r\n        rects = string(abi.encodePacked(rects, '<rect width=\"', lookup[runLength], '\" height=\"1\" x=\"', lookup[x], '\" y=\"', lookup[y], '\" fill=\"#', color, '\"/>'));\r\n      }\r\n      drawIndex += runLength;\r\n    }\r\n\r\n    return rects;\r\n  }\r\n\r\n  function _generateCharacterData(uint256 seed) private view returns (CharacterData memory) {\r\n    return CharacterData({\r\n      background: seed % bgPaletteColors.length,\r\n      \r\n      body: bodies_indices[(seed/2) % bodies_indices.length],\r\n      head: heads_indices[(seed/3) % heads_indices.length],\r\n      eyes: eyes_indices[(seed/4) % eyes_indices.length],\r\n      mouth: mouths_indices[(seed/5) % mouths_indices.length],\r\n      hair: hair_indices[(seed/6) % hair_indices.length]\r\n    });\r\n  }\r\n}"
    },
    "contracts/CryptoDeddiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n000000000000000000000000000000000000000000  CRYPTO EDDIE GHOST 0000000000000000000000000000000000000\r\n000000000000000000000000000000000000000000    by @eddietree    0000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n000000000000000000000000000000000KXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXK000000000000000000000000000\r\n00000000000000000000000000000000KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK000000000000000000000000000\r\n00000000000000000000000000000KXXKOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxk0XXKK00000000000000000000000\r\n0000000000000000000000000000KNWMK;                                     .kMMWX00000000000000000000000\r\n000000000000000000000000KKKKKOOOxc''''''''''''''''''''''''''''''''''''';dOOO0KKKK0000000000000000000\r\n000000000000000000000000XWWW0,  .xNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO,  .dWWWX0000000000000000000\r\n000000000000000000000KKKK000x;..,OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc..'o000KKKKK000000000000000\r\n00000000000000000000XWWWk'..,kXXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXX0c...oNWWXK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWMMMMWWWWWWWWWWWK:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMWKkxxxxxxxxxxxxxxxxKWMWKkxxxxxxxxxxdc,,;xNMMNK00000000000000\r\n00000000000000000000XWMWx.  .OMMMMMMMMMWWOlccccccccccccccclkNWW0lcccccccccccccclkNMMNK00000000000000\r\n0000000000000000KNNXkc::'   .lkkkkkkkkkkxdlccokO0xl;..';cccoxkxdlccok00x;..';cclkNMMNK00000000000000\r\n0000000000000000NWMWo       .;cccccccccccccccxXWM0o'   ,cccccccccccdXWM0,   ,cclkNMMNK00000000000000\r\n000000000000KXXXxlclloolollodkOOOOOOOOOOOdlccxXWM0o'   ,ccldkOOxlccdXWM0,   ,cclkNMMNK00000000000000\r\n00000000000KNWMNc   cNMMMMMMMMMMMMMMMMMMWOlccxXWM0o'   ,cclONWW0lccdXWM0,   ,cclkNMMNK00000000000000\r\n00000000000KNMMNc   cNMMMMMMMMMMMMMMMMMMWOlccokOOxl;..';cclONMW0lccokOOx;..';cccloookKXXK00000000000\r\n00000000000KNMMNc   cNMMMMMMMMMMMMMMMMMMW0lccccccccccccccclONWW0lccccccccccccccc'   ;XMMNK0000000000\r\n00000000000KXNNXd:;:ldxxxxxxONMMMMMMMMMMWKkxxo;,,;coxxxxxxkKWMWXkxxxxxxxxxxxxxxx;   ;XMMNK0000000000\r\n000000000000000KXWWNo.      'OMMMMMMMMMMMMWWWx.  .cOWWWWWWWWMMMMWWWWWWWWWWWWWWWNl   ;XMMNK0000000000\r\n0000000000000000XNNNx;,,,,,,:dkkOXMMMMMMMMMMM0:,,:ldkkkO000O000Okkk0WMMMMMMMMMMNl   ;XMMNK0000000000\r\n00000000000000000000XNNNNNNNO'  .kWMMMMMMMMMMWWNNOo,  .',,,,;,,'.  ;KMMMMMMMMMMNl   ;XMMNK0000000000\r\n00000000000000000000XNWWWWWW0:..,d000XMMMMMMMMMMMKxc..'',,,,,,,''..cKMMMMMMWX00Ol'..lKWWNK0000000000\r\n0000000000000000000000KKK0K0KXXX0:. .dWMMMMMMMMMMWWNXX0l,,,,,,,l0XXNWMMMMMMXc...lKNXXK0K000000000000\r\n0000000000000000000000000KKKKKKKO:...l0KKKKKKKKKKKKKKKOc'''''''cOKKKKKKKKKKOc...oNWWXK00000000000000\r\n000000000000000000000000KNWW0;..'dKK0l.................         ...........'oKKKKKKK0000000000000000\r\n00000000000000000000000KKXXXk,..'kWMNo..       ... .. .............      . .xWWWX0000000000000000000\r\n00000000000000000000XNWNk;..;x00KNMMWX00000000000000000000000000000o.  .o0000KKKK0000000000000000000\r\n00000000000000000000XNNNx.  '0MMMWNNWWMMMMMMMMMMMMMMMMMMMMMMMMMWWNNk.  .kMMWX00000000000000000000000\r\n0000000000000000XNNNx;,,cxkk0NMMXo,,;kWMMMMMMMMMMMMMMMMMMMMMMMWO:,,.   .kMMWX00000000000000000000000\r\n000000000000000KNWMWo   ;KMMMMMMK;   oNWWMMMMMMMMMMMMMMMMMMMMMWd.      .kWWWX00000000000000000000000\r\n0000000KXNNNNNNNWMMWo   ,KMMMMMMW0xddl:;:xNMMMMMMMMMMMMMMMMMMMWd.  .lxddc;;ckXNNK0000000000000000000\r\n0000000KWMMMMMMMMMMWo   ;KMMMMMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0,  .dWMWX0000000000000000000\r\n000KXNN0occccccl0WMWKdoolcccdXMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0'  .dWMWX0000000000000000000\r\n000XWMMO.       oWMMMMMMx.  .OMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0,  .dWMWX0000000000000000000\r\nXXXOollllllllllllllllllllllllllllllllllllkWMMMMMMMMMMMMMMMMMMMWd.  .:lllllloOXXXK0000000000000000000\r\nMMWx.  '0MMMMMMNc       ;KMMO'       oWMMMMMMMMMMMMMMMMMMMMMMMWd.      .kMMWX00000000000000000000000\r\nNNNOl::coddxXMMWkc::::::dNMMXo::::::cOWMMMMMMMMMMMMMMMMMMMMMMMWd.  .,::l0NNXK00000000000000000000000\r\n000XWWWO.  .kWMMMWWMMWMMMMMMMWWWWMWMMMMMMMMMMMMMMMMMMMMMMMMMMMWd.  ,0WWNK000000000000000000000000000\r\n000KNNN0c,,:oxxkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkkxo;,;lKNNXK000000000000000000000000000\r\n0000000KNWW0;  .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.  :KWWNK0000000000000000000000000000000\r\n0000000KWMMK,   oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl   :XMMNK0000000000000000000000000000000\r\n*/\r\n// thx CB1 for the name\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport 'base64-sol/base64.sol';\r\n\r\nimport \"./EddieRenderer.sol\";\r\nimport \"./CryptoEddiesV2.sol\";\r\n\r\ncontract CryptoDeddiesV2 is ERC721A, Ownable {\r\n    struct GhostData {\r\n        uint256 eddieTokenId;\r\n        uint256 eddieTokenSeed;\r\n    }\r\n\r\n    EddieRenderer public contractRenderer;\r\n    CryptoEddiesV2 public contractEddiesV2;\r\n\r\n    mapping(uint256 => GhostData) public ghostData; // tokenid => ghost data\r\n    error EddieGhostIsSoulbound();\r\n    event EddieGhostSpawned(uint256 indexed tokenId, uint256 indexed eddieTokenId, uint256 indexed eddieTokenSeed); // emitted when an HP goes to zero\r\n\r\n    constructor(address _contractRenderer) ERC721A(\"CryptoDeddiesV2\", \"DEDDIEV2\") {\r\n        contractRenderer = EddieRenderer(_contractRenderer);\r\n    }\r\n\r\n    modifier verifyTokenId(uint256 tokenId) {\r\n        require(tokenId >= _startTokenId() && tokenId <= _totalMinted(), \"Out of bounds\");\r\n        _;\r\n    }\r\n\r\n    function _startTokenId() override internal pure virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function spawnGhost(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) external {\r\n        require(msg.sender == address(contractEddiesV2), \"Only callable from contract\");\r\n        _mintGhost(to, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    function spawnGhostAdmin(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) external onlyOwner {\r\n        _mintGhost(to, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    function _mintGhost(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) private {\r\n        _safeMint(to, 1);\r\n\r\n        // save ghost data\r\n        uint256 tokenId = _totalMinted();\r\n        ghostData[tokenId] = GhostData({\r\n            eddieTokenId: eddieTokenId,\r\n            eddieTokenSeed: eddieTokenSeed\r\n        });\r\n\r\n        emit EddieGhostSpawned(tokenId, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    // block transfers (soulbound)\r\n    function _beforeTokenTransfers(address from, address, uint256, uint256) internal pure override {\r\n        //if (from != address(0) && to != address(0)) {\r\n        if (from != address(0)) { // not burnable\r\n            revert EddieGhostIsSoulbound();\r\n        }\r\n    }\r\n\r\n    function setContractRenderer(address newAddress) external onlyOwner {\r\n        contractRenderer = EddieRenderer(newAddress);\r\n    }\r\n\r\n    function setContractEddieV2(address newAddress) external onlyOwner {\r\n        contractEddiesV2 = CryptoEddiesV2(newAddress);\r\n    }\r\n\r\n\r\n    function tokenURI(uint256 tokenId) override(ERC721A) public view verifyTokenId(tokenId) returns (string memory) {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        GhostData memory ghost = ghostData[tokenId];\r\n        uint256 eddieTokenId = ghost.eddieTokenId;\r\n        uint256 seed = ghost.eddieTokenSeed;\r\n\r\n        string memory image = contractRenderer.getGhostSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoDeddie Ghost #', Strings.toString(eddieTokenId),'\",',\r\n                    '\"description\": \"CryptoDeddie Ghost is a memorialized ghost of your original CryptoEddie, forever soulbound to your wallet.\",',\r\n                    '\"attributes\":[',\r\n                        contractRenderer.getTraitsMetadata(seed),\r\n                        '{\"trait_type\":\"Dead\", \"value\":\"True\"}, {\"trait_type\":\"Soulbound\", \"value\":\"True\"}'\r\n                    '],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}"
    },
    "contracts/CryptoEddies.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  CRYPTO EDDIES  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   by @eddietree  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWx'....................................:0WWWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXNNNo.                                    ,ONNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNWWNd'..;looooooooooooooooooooooooooooooooooooc,..;OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNNWNl   ,xOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOo.  .kWNNNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWNd,',:llldkOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOxollc;'';OWWWNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOd.  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ,kOOOOOOOOOOO0000000KKKKKKKKKKKKKKKKK00000000Kx.  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOOOOOOKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOOO000KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKOl;;ckKKKKKKKKKKKKKKKKkc;;lOXXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMN:   ;kOOOOOO0KKKKKKKk'  .oKKKKKKKKKKKKKKKXo.  .xXXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNNNXxllc.   ;kOOOOOO0KKKKKKK0occc::::cxKKKKKKKkc:::cccoOKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXNWMMX;       ;kOOOOOO0KKKKKKKKKKXO,    cKKKKKKKl   'OXXXKKKk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXNNNKxoolc:::::::okOOOOOO0KKKKKKK0occc:::::xKKKKKKKxc:::cccoOKXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKK0OOOOOOO0KKKKKKXk'  .oKKKKKKKKKKKKKKXKo.  .xKXk'  .xMMMNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKKK000OOOO0KKKKKKKOl;;:kKKKKKKKKK0000KKKkc;;lOKKOl;;:lddd0NNNXXXXXXXXXXXXX\r\nXXXXXXXXXXXNWMM0'  .oKKKKKKKKKKK0OOO0KKKKKKKKKKKKKKKKKKKKK0kkkOKKKKKKKKKKKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXNWWKo;;:coooooookKKKK0000KKKKKKKKKKK0xooookKKKxc::d0KKOdood0KKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXNWWMX;       :0KKKKKKKKKKKKKKKKKXO,    cKKKc   ;0KXo.  .xKKKKKXO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNWWXo,,,,,,,coodkKKKKKKKKKKKKKKK0c''',codo:''':oddc,'':kXKKKKXO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWWWWWNl   ;0KKKKKKKKKKKKKKKKKKKO;   :0K0l.  ,kKKKKKKKKKKO,   oWMMNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWWWWWNx,'':dddkKKKKKKKKKKKKKKKX0l..'oKKKd'..:OXKKKKK0kddo:'',xWWWNXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNNNNd.  ,OXKKKKKKKKKKKKKKKK000KKKKK0000KKKKKKKk,  .dNNNNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXNXK000o'..;dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxo;..,kWWWNXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNWMWo...;k0Ol.                                    'xXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXKK0l...c0KKd'............................     ...,OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNWWNl...:kOO0KKX0OOOOOOOOOOOOOOOOOOOOOOOOOOOOOc.  .xKKXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXX0c...cKKK0OOO0KKKKKKKKKKKKKKKKKKKKKKKKK0OOOl.  '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXNWWXc..'cxkk0KKKo...:OKKKKKKKOkkO0KKKK0kkO0KKKo'...   '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;   lKKKKKKKl.  ,x000KKKKOkkk0KKKKOkkk0KKKl       ,ONNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;   cKKKKKKK0xxxl'..;kXKKK000KKKKKK000KKKKl   .oxxo,'.:OWWWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXWMMX;  .c000KKKKKKKKo.  .xKKKKKKKKKKKKKKKKKKKKl   'kXXx.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXNNX0kkkc'''oKKKKKKKo.  .xKK0dlloxkkkkkkkk0KKKl   'kXXx.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXWMMNc   :0KKKKKKo.  .xKKOl:::oxxxxxxxxOKKKl   'kKKd.  .kMMWNXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXNNNX0xxxc,,,,,,,;loox0KKOl:::oxxxxxxxxOKKKl    ',,:oxxkKNNNXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNMMWl       'kXKKKKKOl;::oxxxxxxxxOKKKl       '0MMWNXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXNNNN0ddd;   'OXXkc,,;;:::oxxxxxxxxOKKKl   .lddkKNNNXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OXXd.   ':::oxxxxxxxxOKKKl   ,KMMWNXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OKXx.  .lOOO0KKK0o,,,oKKKl   ,KMMWNXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNMMMd   'OKKd.  .kMMMMMMMNc   :0XKl   ,KMMWXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXNWWWx'..:OXXk;..;OWWWWWWWNo...lKKKd'..cKWWNXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport 'base64-sol/base64.sol';\r\n\r\nimport \"./EddieRenderer.sol\";\r\nimport \"./CryptoDeddies.sol\";\r\n\r\n/// @title CryptoEddies\r\n/// @author Eddie Lee\r\n/// @notice CryptoEddies is an 100% on-chain experimental NFT character project.\r\ncontract CryptoEddies is EddieRenderer, ERC721A, Ownable {\r\n    \r\n    uint256 public constant MAX_TOKEN_SUPPLY = 3500;\r\n\r\n    // 3 pricing tiers\r\n    uint256 public tier0_price = 0.01 ether;\r\n    uint256 public tier1_price = 0.015 ether;\r\n    uint256 public tier2_price = 0.02 ether;\r\n    uint256 public tier0_supply = 2000;\r\n    uint256 public tier1_supply = 1000;\r\n\r\n    uint256 public maxMintsPerPersonPublic = 150;\r\n    uint256 public maxMintsPerPersonWhitelist = 1;\r\n    uint public constant MAX_HP = 5;\r\n\r\n    CryptoDeddies public contractGhost;\r\n\r\n    enum MintStatus {\r\n        CLOSED, // 0\r\n        WHITELIST, // 1\r\n        PUBLIC // 2\r\n    }\r\n\r\n    MintStatus public mintStatus = MintStatus.CLOSED;\r\n    bool public revealed = false;\r\n\r\n    mapping(uint256 => uint256) public seeds; // seeds for image + stats\r\n    mapping(uint256 => uint) public hp; // health power\r\n\r\n    // events\r\n    event EddieDied(uint256 indexed tokenId); // emitted when an HP goes to zero\r\n    event EddieRerolled(uint256 indexed tokenId); // emitted when an Eddie gets re-rolled\r\n    event EddieSacrificed(uint256 indexed tokenId); // emitted when an Eddie gets sacrificed\r\n\r\n    constructor() ERC721A(\"CryptoEddies\", \"EDDIE\") {\r\n    }\r\n\r\n    modifier verifySupply(uint256 numEddiesToMint) {\r\n        //require(tx.origin == msg.sender,  \"No bots\");\r\n        require(numEddiesToMint > 0, \"Mint at least 1\");\r\n        require(_totalMinted() + numEddiesToMint <= MAX_TOKEN_SUPPLY, \"Exceeds max supply\");\r\n\r\n        _;\r\n    }\r\n\r\n    modifier verifyTokenId(uint256 tokenId) {\r\n        require(tokenId >= _startTokenId() && tokenId <= _totalMinted(), \"Out of bounds\");\r\n        _;\r\n    }\r\n\r\n    function _mintEddies(address to, uint256 numEddiesToMint) private verifySupply(numEddiesToMint) {\r\n        uint256 startTokenId = _startTokenId() + _totalMinted();\r\n         for(uint256 tokenId = startTokenId; tokenId < startTokenId+numEddiesToMint; tokenId++) {\r\n            _saveSeed(tokenId);\r\n            hp[tokenId] = MAX_HP;\r\n         }\r\n\r\n         _safeMint(to, numEddiesToMint);\r\n    }\r\n\r\n    function reserveEddies(address to, uint256 numEddiesToMint) external onlyOwner {\r\n        _mintEddies(to, numEddiesToMint);\r\n    }\r\n\r\n    function reserveEddiesToManyFolk(address[] calldata addresses, uint256 numEddiesToMint) external {\r\n        uint256 num = addresses.length;\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            address to = addresses[i];\r\n            _mintEddies(to, numEddiesToMint);\r\n        }\r\n    }\r\n\r\n    /// @notice Mints CryptoEddies into your wallet! payableAmount is the total amount of ETH to mint all numEddiesToMint (costPerCryptoEddie * numEddiesToMint)\r\n    /// @param numEddiesToMint The number of CryptoEddies you want to mint\r\n    function mintEddies(uint256 numEddiesToMint) external payable {\r\n        require(mintStatus == MintStatus.PUBLIC, \"Public mint closed\");\r\n        require(msg.value >= _getPrice(numEddiesToMint), \"Incorrect ether\" );\r\n        require(_numberMinted(msg.sender) + numEddiesToMint <= maxMintsPerPersonPublic, \"Exceeds max mints\");\r\n\r\n        _mintEddies(msg.sender, numEddiesToMint);\r\n    }\r\n\r\n    function _rerollEddie(uint256 tokenId) verifyTokenId(tokenId) private {\r\n        require(revealed == true, \"Not revealed\");\r\n        require(hp[tokenId] > 0, \"No HP\");\r\n        require(msg.sender == ownerOf(tokenId), \"Not yours\");\r\n\r\n        _saveSeed(tokenId);   \r\n        _takeDamageHP(tokenId, msg.sender);\r\n\r\n        emit EddieRerolled(tokenId);\r\n    }\r\n\r\n    /// @notice Rerolls the visuals and stats of one CryptoEddie, deals -1 HP damage!\r\n    /// @param tokenId The token ID for the CryptoEddie to reroll\r\n    function rerollEddie(uint256 tokenId) external {\r\n        _rerollEddie(tokenId);\r\n    }\r\n\r\n    function rerollEddieMany(uint256[] calldata tokenIds) external {\r\n        uint256 num = tokenIds.length;\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n            _rerollEddie(tokenId);\r\n        }\r\n    }\r\n\r\n    function _saveSeed(uint256 tokenId) private {\r\n        seeds[tokenId] = uint256(keccak256(abi.encodePacked(blockhash(block.number - 1), tokenId, msg.sender)));\r\n    }\r\n\r\n    // @notice Destroys your CryptoEddie, spawning a ghost\r\n    /// @param tokenId The token ID for the CryptoEddie\r\n    function burnSacrifice(uint256 tokenId) external {\r\n        require(msg.sender == ownerOf(tokenId), \"Not yours\");\r\n        _burn(tokenId);\r\n\r\n        // if not already dead, force kill and spawn ghost\r\n        if (hp[tokenId] > 0) {\r\n            hp[tokenId] = 0;\r\n            emit EddieDied(tokenId);\r\n\r\n            if (address(contractGhost) != address(0)) {\r\n                contractGhost.spawnGhost(msg.sender, tokenId, seeds[tokenId]);\r\n            }\r\n        }\r\n\r\n        emit EddieSacrificed(tokenId);\r\n    }\r\n\r\n    function _startTokenId() override internal pure virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    // taken from 'ERC721AQueryable.sol'\r\n    function tokensOfOwner(address owner) external view returns (uint256[] memory) {\r\n        unchecked {\r\n            uint256 tokenIdsIdx;\r\n            address currOwnershipAddr;\r\n            uint256 tokenIdsLength = balanceOf(owner);\r\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\r\n            TokenOwnership memory ownership;\r\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\r\n                ownership = _ownershipAt(i);\r\n                if (ownership.burned) {\r\n                    continue;\r\n                }\r\n                if (ownership.addr != address(0)) {\r\n                    currOwnershipAddr = ownership.addr;\r\n                }\r\n                if (currOwnershipAddr == owner) {\r\n                    tokenIds[tokenIdsIdx++] = i;\r\n                }\r\n            }\r\n            return tokenIds;\r\n        }\r\n    }\r\n\r\n    function _getPrice(uint256 numPayable) private view returns (uint256) {\r\n        uint256 numMintedAlready = _totalMinted();\r\n\r\n        return numPayable \r\n            * (numMintedAlready < tier0_supply ? \r\n                tier0_price \r\n                : ( (numMintedAlready < (tier0_supply+tier1_supply)) ? tier1_price : tier2_price));\r\n    }\r\n\r\n    function setPricing(uint256[] calldata pricingData) external onlyOwner {\r\n        tier0_supply = pricingData[0];\r\n        tier0_price = pricingData[1];\r\n\r\n        tier1_supply = pricingData[2];\r\n        tier1_price = pricingData[3];\r\n\r\n        tier2_price = pricingData[4];\r\n\r\n        require(tier0_supply + tier1_supply <= MAX_TOKEN_SUPPLY);\r\n    }\r\n\r\n    function setPublicMintStatus(uint256 _status) external onlyOwner {\r\n        mintStatus = MintStatus(_status);\r\n    }\r\n\r\n    function setMaxMints(uint256 _maxMintsPublic, uint256 _maxMintsWhitelist) external onlyOwner {\r\n        maxMintsPerPersonPublic = _maxMintsPublic;\r\n        maxMintsPerPersonWhitelist = _maxMintsWhitelist;\r\n    }\r\n\r\n    function setContractGhost(address newAddress) external onlyOwner {\r\n        contractGhost = CryptoDeddies(newAddress);\r\n    }\r\n\r\n    function setRevealed(bool _revealed) external onlyOwner {\r\n        revealed = _revealed;\r\n    }\r\n\r\n    // props to @cygaar_dev\r\n    error SteveAokiNotAllowed();\r\n    address public constant STEVE_AOKI_ADDRESS = 0xe4bBCbFf51e61D0D95FcC5016609aC8354B177C4;\r\n\r\n    function _beforeTokenTransfers(address from, address to, uint256 startTokenId, uint256 quantity) internal override {\r\n        if (to == STEVE_AOKI_ADDRESS) { // sorry Mr. Aoki\r\n            revert SteveAokiNotAllowed();\r\n        }\r\n\r\n        if (from == address(0) || to == address(0))  // bypass for minting and burning\r\n            return;\r\n\r\n        for (uint256 tokenId = startTokenId; tokenId < startTokenId + quantity; ++tokenId) {\r\n            //require(hp[tokenId] > 0, \"No more HP\"); // soulbound?\r\n\r\n            // transfers reduces HP\r\n            _takeDamageHP(tokenId, from);\r\n        }\r\n    }\r\n\r\n    function _takeDamageHP(uint256 tokenId, address mintGhostTo) private verifyTokenId(tokenId){\r\n        if (hp[tokenId] == 0) // to make sure it doesn't wrap around\r\n            return;\r\n\r\n        hp[tokenId] -= 1;\r\n\r\n        if (hp[tokenId] == 0) {\r\n            emit EddieDied(tokenId);\r\n\r\n            if (address(contractGhost) != address(0)) {\r\n                contractGhost.spawnGhost(mintGhostTo, tokenId, seeds[tokenId]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function rewardHP(uint256 tokenId, uint hpRewarded) external onlyOwner verifyTokenId(tokenId) {\r\n        require(hp[tokenId] > 0, \"Already dead\");\r\n        hp[tokenId] += hpRewarded;\r\n\r\n        if (hp[tokenId] > MAX_HP) \r\n            hp[tokenId] = MAX_HP;\r\n    }\r\n\r\n    function rewardManyHP(uint256[] calldata tokenIds, uint hpRewarded) external {\r\n        uint256 num = tokenIds.length;\r\n        for (uint256 i = 0; i < num; ++i) {\r\n            uint256 tokenId = tokenIds[i];\r\n\r\n            if (hp[tokenId] > 0 ) { // not dead\r\n                hp[tokenId] += hpRewarded;\r\n\r\n                if (hp[tokenId] > MAX_HP) \r\n                    hp[tokenId] = MAX_HP;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Retrieves the HP\r\n    /// @param tokenId The token ID for the CryptoEddie\r\n    /// @return hp the amount of HP for the CryptoEddie\r\n    function getHP(uint256 tokenId) external view verifyTokenId(tokenId) returns(uint){\r\n        return hp[tokenId];\r\n    }\r\n\r\n    function numberMinted(address addr) external view returns(uint256){\r\n        return _numberMinted(addr);\r\n    }\r\n\r\n    ///////////////////////////\r\n    // -- MERKLE NERD STUFF --\r\n    ///////////////////////////\r\n    bytes32 public merkleRoot = 0x0;\r\n\r\n    function setMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\r\n        merkleRoot = _merkleRoot;\r\n    }\r\n\r\n    function _verifyMerkle(bytes32[] calldata _proof, bytes32 _leaf) private view returns (bool) {\r\n        return MerkleProof.verify(_proof, merkleRoot, _leaf);\r\n    }\r\n\r\n    function verifyMerkle(bytes32[] calldata _proof, bytes32 _leaf) external view returns (bool) {\r\n        return _verifyMerkle(_proof, _leaf);\r\n    }\r\n\r\n    function verifyMerkleAddress(bytes32[] calldata _proof, address from) external view returns (bool) {\r\n        bytes32 leaf = keccak256(abi.encodePacked(from));\r\n        return _verifyMerkle(_proof, leaf);\r\n    }\r\n\r\n    function mintEddiesMerkle(bytes32[] calldata _merkleProof, uint256 numEddiesToMint) external payable {\r\n        require(mintStatus == MintStatus.WHITELIST || mintStatus == MintStatus.PUBLIC, \"Merkle mint closed\");\r\n        \r\n        uint256 numMintedAlready = _numberMinted(msg.sender);\r\n        require(numMintedAlready + numEddiesToMint <= maxMintsPerPersonPublic, \"Exceeds max mints\");\r\n\r\n        // calculate how much you need to pay beyond whitelisted amount\r\n        uint256 numToMintFromWhitelist = 0;\r\n        if (numMintedAlready < maxMintsPerPersonWhitelist) {\r\n            numToMintFromWhitelist = (maxMintsPerPersonWhitelist - numMintedAlready);\r\n        }\r\n\r\n        // num to actually buy\r\n        uint256 numToMintPayable = numEddiesToMint - numToMintFromWhitelist;\r\n        require(msg.value >= _getPrice(numToMintPayable), \"Incorrect ether sent\" );\r\n    \r\n        // verify merkle        \r\n        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\r\n        require(_verifyMerkle(_merkleProof, leaf), \"Invalid proof\");\r\n\r\n        _mintEddies(msg.sender, numEddiesToMint);\r\n    }\r\n\r\n    ///////////////////////////\r\n    // -- TOKEN URI --\r\n    ///////////////////////////\r\n    function _tokenURI(uint256 tokenId) private view returns (string memory) {\r\n        string[6] memory lookup = [  '0', '1', '2', '3', '4', '5'];\r\n        uint256 seed = seeds[tokenId];\r\n        string memory image = _getSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoEddie #', Strings.toString(tokenId),'\",',\r\n                    '\"description\": \"CryptoEddies is an 100% on-chain experimental NFT character project with unique functionality, inspired by retro Japanese RPGs.\",',\r\n                    '\"attributes\":[',\r\n                        _getTraitsMetadata(seed),\r\n                        _getStatsMetadata(seed),\r\n                        '{\"trait_type\":\"HP\", \"value\":',lookup[hp[tokenId]],', \"max_value\":',lookup[MAX_HP],'}'\r\n                    '],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function _tokenUnrevealedURI(uint256 tokenId) private view returns (string memory) {\r\n        uint256 seed = seeds[tokenId];\r\n        string memory image = _getUnrevealedSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoEddie #', Strings.toString(tokenId),'\",',\r\n                    '\"description\": \"CryptoEddies is an 100% on-chain experimental character art project, chillin on the Ethereum blockchain.\",',\r\n                    '\"attributes\":[{\"trait_type\":\"Unrevealed\", \"value\":\"True\"}],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override(ERC721A) public view verifyTokenId(tokenId) returns (string memory) {\r\n        if (revealed) \r\n            return _tokenURI(tokenId);\r\n        else\r\n            return _tokenUnrevealedURI(tokenId);\r\n    }\r\n\r\n    function _randStat(uint256 seed, uint256 div, uint256 min, uint256 max) private pure returns (uint256) {\r\n        return min + (seed/div) % (max-min);\r\n    }\r\n\r\n    function _getStatsMetadata(uint256 seed) private pure returns (string memory) {\r\n        string[11] memory lookup = [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10' ];\r\n\r\n        string memory metadata = string(abi.encodePacked(\r\n          '{\"trait_type\":\"Determination\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 2, 2, 10)], '},',\r\n          '{\"trait_type\":\"Love\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 3, 2, 10)], '},',\r\n          '{\"trait_type\":\"Cringe\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 4, 2, 10)], '},',\r\n          '{\"trait_type\":\"Bonk\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 5, 2, 10)], '},',\r\n          '{\"trait_type\":\"Magic Defense\", \"display_type\": \"number\", \"value\":', lookup[_randStat(seed, 6, 2, 10)], '},'\r\n        ));\r\n\r\n        return metadata;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.2\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * The caller cannot approve to their own address.\n     */\n    error ApproveToCaller();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/EddieData.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// AUTOGENERATED FILE by @eddietree on Thu Aug 18 2022 01:31:47 GMT-0700 (Pacific Daylight Time)\n\npragma solidity ^0.8.0;\n\ncontract EddieData {\n\tstring[] public fullPalettes = ['ff00ff', '000000', 'ffffff', 'ff0000', '00ff00', '0000ff', '65656e', '212124', '343438', '212123', 'f83a00', 'fff200', 'ff5900', '0096ff', '2e07f2', '1f1f21', '858ac7', 'e31e27', '7e00de', 'f200ff', '292929', 'f5368f', 'ffff00', 'ff8282', '599cff', 'b2e1f8', 'ff9696', 'ff4747', '919191', 'b8b8b8', 'ff5e00', 'ff995e', 'ff3300', 'd32027', 'f3e106', 'd46a6d', '172f3b', '163545', 'f73b3b', '2c7899', '3fabd9', '2e81a5', '2f82a6', '44b0de', '237843', '47a66b', 'f3f700', 'ba6047', 'a85740', '592f23', '44c3c9', 'ede068', 'ffed4f', '68b84d', '599e42', '038604', '9c9083', '7a7166', '696158', '7ddcff', '00bbff', '009bd4', '5ed4ff', 'edda9d', 'eda200', '004f24', '00c458', '00a44b', '00ad4e', 'ff9500', 'f7ff0f', 'eaf041', 'cfd60d', 'faf5aa', 'ced439', 'b5b535', 'ffa3a3', 'a37b46', '966930', '579aff', '217aff', '4eff00', 'fffc00', 'ffff26', '007dfc', '0067cf', 'fcca97', '8a633c', 'cb8d52', 'fcf0c6', '180d1f', 'a16010', 'e5a925', '3a3a3a', '2057a8', 'b82323', 'ff3030', '3c3c3c', '0004fa', '2b2b2b', 'ff0009', '3150d6', '7c541a', 'ba2b00', 'bfb731', '505050', '729144', '9aa6c1', '3f3556', 'd246e8', 'e74dff', '00974c', '9ec45c', '20d47a', 'eded61', '78573e', 'b89174', '2b478f', '0024ff', '363b3c', '202324', '3587ab', '0044ff', '0145fd', 'b4633b', 'b5643b', '40b2e6', '83c6e5', '115c52', 'ffcc99', '64c0e8', '3a8228', 'fcd502', '165c58', 'f7c328', '8a1212', '008787', '2c3aa8', '8a3c3c', 'e8fd4d', '439958', '5e83ec', '00a800', '006600', '404040', 'c5b2a0', 'fd8c69', 'f7e83e', 'f75a3e', 'fccf03', '68d4cc', 'be8ade', 'b778de', '568746', '67ab50', 'fce2a9', '6edbb7', 'fcb39d', '79dbba', 'c74832', '40cfbc', '7dd8ff', 'dbf4ff', '9ce1ff', 'fbdd97', 'f9de9a', 'f9de9b', 'fade9a', 'f9df9b', 'fadf9b', 'fade9b', 'f8dfa0', 'f8e0a0', 'f7e0a0', 'f5e1a6', 'f4e2a6', 'f5e2a6', 'f4e2a7', 'f5e2a7', 'f2e4ad', 'f3e4ad', 'f2e3ad', 'efe6b5', 'efe5b4', 'f0e5b5', 'efe6b4', 'efe5b5', 'ece8bc', 'ece9bd', 'ece8bd', 'ece9bc', 'e9ebc5', 'e8ebc5', 'e9eac5', 'e9ebc4', 'e6edcd', 'e5eecd', 'e5eece', 'e6eecd', 'e5edcd', 'e5edce', 'e2f0d5', 'e2efd6', 'e2f0d6', 'e2efd5', 'dff2de', 'dcf4e5', 'dcf4e4', 'dcf5e5', 'dbf4e5', 'dcf5e4', 'd9f7ec', 'd9f6ec', 'd7f9f2', 'd7f8f2', 'd6f8f2', 'd4f9f7', 'd4faf7', 'd3fbfb', 'b7c6e8', 'e5edff', 'fae848', 'fae248'];\n\n\t///////////////////////////////////////\n\t// eyes\n\tbytes[] public eyes = [\n\t\tbytes(hex'840003061700020616000206040001020d000106090701020a00040604070108040701020a0004060307010801070108030701020d0001060907010217000102'),\n\t\tbytes(hex'c400010201090100010113000102010903020200040a03000101090001020101010201090302010a010b020a0100020101020b000102010901020200030a0300010101020b0003021700010117000101'),\n\t\tbytes(hex'e300020e0300020e0d00040e0202030e0202010e0f00010e0202010e0100010e0202010e1000020e0300020e'),\n\t\tbytes(hex'd300010101020d00040201000402010101020a0004020205030202030102010101020d000102020501020100010202030102010101020d000402010004020101'),\n\t\tbytes(hex'e200040d0100040d0c00040d01020101030d01020101010d0f00010d01020101010d0100010d01020101010d0f00040d0100040d'),\n\t\tbytes(hex'e200040c0100040c0c00040c01020101030c01020101010c0f00010c01020101010c0100010c01020101010c0f00040c0100040c'),\n\t\tbytes(hex'e30001010400010113000101020001011300010104000101'),\n\t\tbytes(hex'df000b011000030102000102010111000301'),\n\t\tbytes(hex'df00050f0210020f0210010f0f00010f0210020f0210010f11000110020f01000110020f'),\n\t\tbytes(hex'df0003110212021302120213100001120213021202130112110001130212010001130212'),\n\t\tbytes(hex'e2000101010001010200010101000101110001010400010111000101010001010200010101000101'),\n\t\tbytes(hex'e200040101000301100001020201020001020201'),\n\t\tbytes(hex'e30001010400010111000101010001010200010101000101'),\n\t\tbytes(hex'e200030102000301110001020101020001020101'),\n\t\tbytes(hex'9c00070110000101060201010f0001010802010101020d00010102020101030201010102010101020a000401040201030302010101020d00010102020101030201010102010101020d00010103020301020201010f0001010602010111000601'),\n\t\tbytes(hex'9c00070110000101060201010f0001010802010101020d00010101020117010101170102011701010117010101020a00040102020118030201180102010101020d0001010202011801010102010101180102010101020d000101020201180102010101020118010201010f0001010102011803020118010111000601'),\n\t\tbytes(hex'9b000801010001020d0001010816010101020c00010108160101010001020c0001010216010103160101011601010e000101081601010e0001010216010103160101011601010e00010103160301021601010f000101081610000801'),\n\t\tbytes(hex'e200031402000314100001140115011402000114011501141000031402000314'),\n\t\tbytes(hex'e2000302020003021000020201010200010102021000030202000302'),\n\t\tbytes(hex'e200030202000302100001020101010202000102010101021000030202000302'),\n\t\tbytes(hex'e300030101000301110001020101020001020101120001020101020001020101'),\n\t\tbytes(hex'cc0001160300011613000b0301030a0001160103010203160102061601160c000b0301030c00011603000116'),\n\t\tbytes(hex'e200030102000301110001020101020001020101120001020101020001020101'),\n\t\tbytes(hex'cc000101030001011100020105000101110001020101030001010102110001020101030001010102'),\n\t\tbytes(hex'b2000319140005191300011903010119030001010f00011901010103010101190100020101020f000119030101190200010101020f0005191200041914000219'),\n\t\tbytes(hex'e200030102000301110001020101020001020101120001010102020001010102'),\n\t\tbytes(hex'e3000301010003011100011a0101011a0100011a0101011a1100031a0100031a'),\n\t\tbytes(hex'e2000301020003011100010201010200010201011200020202000202'),\n\t\tbytes(hex'e900010110000401010002010102110001020101030001010102'),\n\t\tbytes(hex'e200020117000102020101000301110001020101030001010102'),\n\t\tbytes(hex'e200020105000101110001020201010002010102110001020101030001010102'),\n\t\tbytes(hex'e200030102000301290001010102030001010102')\n\t];\n\n\tstring[] public eyes_traits = [\n\t\t'Virtual Reality',\n\t\t'Scouter',\n\t\t'Glasses',\n\t\t'3D Glasses',\n\t\t'Big Blue Glasses',\n\t\t'Big Red Glasses',\n\t\t'Shut',\n\t\t'Pirate',\n\t\t'Future Too Bright',\n\t\t'Stunners',\n\t\t'RIP',\n\t\t'Smug',\n\t\t'Overjoyed',\n\t\t'Sus',\n\t\t'Good Face',\n\t\t'Sad Face',\n\t\t'Happy Note',\n\t\t'Corrupted',\n\t\t'Dizzy',\n\t\t'Low Key Shook',\n\t\t'Optimistic',\n\t\t'Maximalist',\n\t\t'Watchful',\n\t\t'Worried',\n\t\t'Terminatooor',\n\t\t'Senpai',\n\t\t'Stoney Baloney',\n\t\t'Skyward',\n\t\t'Raised Left',\n\t\t'Raise Right',\n\t\t'U Mad Bro',\n\t\t'Naughty'\n\t];\n\n\tuint8[] public eyes_indices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];\n\n\t///////////////////////////////////////\n\t// mouths\n\tbytes[] public mouths = [\n\t\tbytes(hex'ff004400010118000301'),\n\t\tbytes(hex'ff004500010101000101010001011400010101000101'),\n\t\tbytes(hex'ff00450001010300010114000301'),\n\t\tbytes(hex'ff004400010118000101021b010115000203'),\n\t\tbytes(hex'ff001000010117000c010d0001010a1c0e000101021c011d031c011d021c0f000101071c11000101021c011d021c13000101031c15000101011c010116000101'),\n\t\tbytes(hex'ff001000010117000c010d0001010a030e0001010203021e0103021e02030f0001010703110001010103021e0203130001010303150001010103010116000101'),\n\t\tbytes(hex'2d000102300001022e0001021700010248000102170001022f00010229000101011f0202012015000201'),\n\t\tbytes(hex'ff005c000201'),\n\t\tbytes(hex'ff004300010f0600010f1100060f'),\n\t\tbytes(hex'ff005c0002010102010101020201'),\n\t\tbytes(hex'ff00460003011500010101000101'),\n\t\tbytes(hex'ff00460003011400010103000101'),\n\t\tbytes(hex'ff005e000301'),\n\t\tbytes(hex'ff005c000601')\n\t];\n\n\tstring[] public mouths_traits = [\n\t\t'Smirk',\n\t\t'Uwu',\n\t\t'Smile',\n\t\t'Silly',\n\t\t'Grey Bandana',\n\t\t'Red Bandana',\n\t\t'Smoking',\n\t\t'Hmmm',\n\t\t'Big Honkin Smile',\n\t\t'Buck',\n\t\t'Micro Sad',\n\t\t'Sad',\n\t\t'Blah',\n\t\t'Unsatisfied'\n\t];\n\n\tuint8[] public mouths_indices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13];\n\n\t///////////////////////////////////////\n\t// hair\n\tbytes[] public hair = [\n\t\tbytes(hex'200009020e000102090101020c000102010103240625010101020a000102010102240925010101020500050201010124062502000225010101020500010205010124052504000125010101020500010201010424062504260125010106000202030114000302'),\n\t\tbytes(hex'200009020e000102090101020c00010201010921010101020a0001020101042101220121012201210122022101010102090001020101042105220221010101020a0001010b210101010001020900010101210b23020101020b000c230101010214000201010216000102'),\n\t\tbytes(hex'200009020e000102090103020a00010201010129022a022b07010102080001020101022a022b0201072a01010102070001020101012a022b0101092a0101010208000101012a012b01010a2a0101010208000101012a01010a2a01010102'),\n\t\tbytes(hex'200009020e000102090101020c000102010103270628010101020a000102010102270928010101020500050201010127062802000228010101020500010205010127052804000128010101020500010201010427062804260128010106000202030114000302'),\n\t\tbytes(hex'200009020e000102090101020c0001020101032c062d010101020a0001020101022c092d01010102050005020101012c062d0201022d01010102050001020501012c052d0401012d01010102050001020101042c062d042e012d010106000202030114000302'),\n\t\tbytes(hex'0b00010201010202130001020101012f02010102110001020101012f0130022f010101020f0001020101033102300131010101020d0001020101012f0630012f010101020b0001020101012f01300731010101020b000102010101310730022f010101020c000a31'),\n\t\tbytes(hex'200009020e00020204010102030101020c0002020101043501010335010101020b0001020101013501360137010201010236010201010135010101020a0001020101013509360101010209000102010101350a3601010102090001020101013502360300023603000101010209000102010102360900010101020b0002360900010101020b0002360900010101020b0002360900010101020c000136'),\n\t\tbytes(hex'3a00050211000202050102020e00010202010532020101020c00010201010932010101020a000102010101330a34010101020b0001330a34'),\n\t\tbytes(hex'2800010216000102010101020e00070201010102010101020c00010207010202010101020b00010201010a02010101020900010201010b020101010209000102010103020300020203000101010209000102010102020900010101020b0002020900010101020b0002020900010101020b0002020900010101020c000102'),\n\t\tbytes(hex'2100020201000202010002020f0001020201010202010102020102020c000102010102380101023801010238020101020a000102010102380139013802390138013903380101010209000102010101380a390138010108000102010101380c39010108000102010103390300023903000201010208000102010102390900010101020b0002390900010101020b0002390900010101020b0002390900010101020c000139'),\n\t\tbytes(hex'090007020e00030204010102020102020b0001020301043b0101023b02010102090001020101043b033c013b023c023b01010102070001020101023b0b3c01010102060001020101023b043c023d013c023d013c013d013c013b01010102050001020101013b033c0a3d023c01010102040001020101013b013c013d013c033d0600023d013c01010102040001020101013b013c033d0900013d013c01010102040002020101023c023d0900023d01010102040001020101023c033d0900013d01010102050001020101023c033d0900013d01010102060001020101013c0200013d130001020101013d17000101013d160001020101'),\n\t\tbytes(hex'090007020f000202070102020c00010202010738020101020a000102010103380139013802390138013902380101010208000102010102380a3901380101010206000102010102380439013a0339013a0339010101020600010201010539073a03390101010204000102010102380239023a0700023a01390101010204000102010101380239023a0900023a0101010204000102010101380139013a0139013a0900023a01010102040001020101013a0139033a0900013a0101010206000102010101390100023a0b00010206000102010101390200013a130001020101013a160001020101013a160001020101'),\n\t\tbytes(hex'200009020e000102090101020c00010201010938010101020a0001020101023809390101010209000102010101380a39010101020900010201010b3901010102090001020101033908000101010209000102010102390900010101020b0002390900010101020b0002390900010101020b0002390900010101020c000139'),\n\t\tbytes(hex'390008020e000202080101020c0001020201083e010101020a0001020101023e093c01010102080001020101023e0a3c01010102080001020101013e073c0100033c01010102080001020101043c080001010102080001020101033c0900010101020b00023c0900010101020b00023c0900010101020c00013c2b0001020101013c150001020101023c14000202'),\n\t\tbytes(hex'2800010216000102010101020e0007020101013f010101020c0001020701013f0140010101020b00010201010a40010101020900010201010b400101010209000102010103400300024003000101010209000102010102400900010101020b0002400900010101020b0002400900010101020b0002400900010101020c000140'),\n\t\tbytes(hex'2800010216000102010101020e00070201010138010101020c000102070101380139010101020b00010201010a39010101020900010201010b390101010209000102010103390300023903000101010209000102010102390900010101020b0002390900010101020b0002390900010101020b0002390900010101020c000139'),\n\t\tbytes(hex'2100010205000102100001020101010203000102010101020e00010201010103010101020100010201010103010101020d00010201010203010101000101020301010102'),\n\t\tbytes(hex'0a0001020141010215000202014103021100010206410102100001410342014101430142014101020e00014104440142014101440142014101020e00014107440141100003410344024113000341'),\n\t\tbytes(hex'0b00010203010102110002020101014501010145010101020f00010204010145030101020d00010201010846010101020b00010201010346010201010146010201010246010102020800010201010b460301010209000346014709450101010209000246014702000745010101020a000246014715000146014716000146014716000247170001471700014717000148'),\n\t\tbytes(hex'080001020201010203000102010101020d000102010102490101030201010149010101020c00010201010149014602010102010101490146010101020c000102010103460101010001010246010101020e0001010246010102000146020001020d000249064601490e0001490246074a01460d0001490146014a0700014a0d000146014a16000146014a16000146014a16000146014a1700014a'),\n\t\tbytes(hex'2100010205000102100001020101010203000102010101020e00010201010102010101020100010201010102010101020d00010201010202010101000101020201010102'),\n\t\tbytes(hex'08000b020c00020203010302030102020b000102010103020101010201010302010101020b00010201010102014c01020101010001010102014c0102010101020b00010201000102014c0102010102000102014c0102010101020c000a02010101020b00020216000102170001021700010217000102'),\n\t\tbytes(hex'05000402020003020200040209000102020104020101040202010102090001020101014b0101020201010116010102020101011601010102090001020101014b0116020103160201021601010102090001020101024b091601010102090001020101024b011601030216010302160103011601010102090001020101034b081601010b000101'),\n\t\tbytes(hex'ff00'),\n\t\tbytes(hex'090004021300020203010302100001020101034d0301010211000201014e034d010101020d000102020101000101044e014d010101020b0001020101094e014d010101020900010201010b4e01010102090001020101034e0300024e030001010102090001020101024e0900010101020b00024e0900010101020b00024e0900010101020b00024e0900010101020c00014e'),\n\t\tbytes(hex'1d0003021400010203010102120001020101034f0101120001020101014f025003011000010202010b500b00010202000b500a000102020003501500025016000250160002501600025017000150'),\n\t\tbytes(hex'1d000302140001020301010212000102010103530101120001020101035303011000010202010b530b00010202000b530a000102020003531500025316000253160002531600025317000153'),\n\t\tbytes(hex'800001510152015101520151015203510e0003510152015101520151015203510d0003511500025116000251160002511600025117000151'),\n\t\tbytes(hex'63000254170002541700015401550b5401550800025402550b54015507000254'),\n\t\tbytes(hex'6300025a1700025a17000e5a0800105a0700025a')\n\t];\n\n\tstring[] public hair_traits = [\n\t\t'Black Hat',\n\t\t'Bear Market Hat',\n\t\t'Cap Front',\n\t\t'Topo Hat',\n\t\t'Chill Green Hat',\n\t\t'Poop',\n\t\t'Froggy',\n\t\t'Eric',\n\t\t'Old But Still Cool',\n\t\t'Straight Bussin',\n\t\t'Clowin',\n\t\t'Success Perm',\n\t\t'Poppin',\n\t\t'Neetori',\n\t\t'Blonde',\n\t\t'Cool Guy',\n\t\t'Devil Horns',\n\t\t'Leaf',\n\t\t'Ducky',\n\t\t'Pipichu',\n\t\t'Catbot',\n\t\t'Easter',\n\t\t'King',\n\t\t'Bald',\n\t\t'90s',\n\t\t'3000',\n\t\t'Sun Bun',\n\t\t'Too Cool',\n\t\t'Blue Bandana',\n\t\t'Black Bandana'\n\t];\n\n\tuint8[] public hair_indices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,24,25,26,27,28,29];\n\n\t///////////////////////////////////////\n\t// bodies\n\tbytes[] public bodies = [\n\t\tbytes(hex'ff006e000102010101561400010201010356010112000102010104560157015804560101010209000102010103560159015701580659010101020800010201010256025901570158035901580259010101020800010201010256015901570158075901010102080001020101025601590157015802590158045901010102080001020101025601590157015805590158015901010102080001020101025601590157015801590158055901010102'),\n\t\tbytes(hex'ff006e0001020101015b140001020101035b01011200010201010a5b01010102090001020101065b065c01010102080001020101025b025c045b045c01010102080001020101035b055c045b01010102080001020101045b085c01010102080001020101025b015c035b065c01010102080001020101025b035c035b045c01010102'),\n\t\tbytes(hex'ff006e0001020101015f140001020101035f01011200010201010a5f01010102090001020101035f096001010102080001020101025f0a6001010102080001020101025f0a6001010102080001020101025f0a6001010102080001020101025f0a6001010102080001020101025f0a6001010102'),\n\t\tbytes(hex'ff006d0001020101025d140001020201025d0101120002020101045d0101015d0101025d0c0001020101025d0101025d0101015d0101015d0d0001020101015d02000101055d120006011200065e1200015e0400015e1200015e0400015e'),\n\t\tbytes(hex'ff00eb000561120006612a00010304000103'),\n\t\tbytes(hex'ff00eb00050214000302'),\n\t\tbytes(hex'ff008800010101631600046301010100010102630e00026301000363010102630f0001630300016301010363130005641200066312000163040001631200016304000163'),\n\t\tbytes(hex'ff00890001651600046501010100010102650e00026501000365010102650f000165030001650101036513000366010301661200066512000165040001651200016504000165'),\n\t\tbytes(hex'ff00b800010316000303070001030e0002030100050201000103100006621200016204000162'),\n\t\tbytes(hex'ff008900016f1600096f0e00026f0100026f0370016f0f00016f02710100016f017001720170016f010001710e0002710100016f0370016f010001711000066f1200016f0400016f1200016f0400016f'),\n\t\tbytes(hex'ff008900016a1600046a0101016b0101026a0e00026a0100026a0101016c0101016a0f00016a0300016a0101016b0101016a13000268010102681200066912000169040001691200016904000169'),\n\t\tbytes(hex'ff00890001021600040201010167010102020e000202010002020101010a010101020f000102030001020101010a0101010213000268010102681200066912000169040001691200016904000169'),\n\t\tbytes(hex'ff00890001021600040201010100010102020e00020201000302010102020f00010203000502130005681200060212000102040001021200010204000102'),\n\t\tbytes(hex'ff00eb00056d1300046e'),\n\t\tbytes(hex'ff00ff00030006761200017604000176'),\n\t\tbytes(hex'ff00890001731600027301740173017401730174017301740e00027301000173017401730174017301740f000173030001730174017301740173130005731200067512000175040001751200017504000175'),\n\t\tbytes(hex'ff0089000177160009770e000277010006770f00017703000577130005781200067912000179040001791200017904000179'),\n\t\tbytes(hex'ff008900017e1600017e017f017e017f018001000180017f017e0e0002810100017f017e017f0180017f017e0f0001810300017f017e017f017e017f1300017e017f017e017f017e1200017e017f017e017f017e017f1200017e0400017e'),\n\t\tbytes(hex'ff008900017a1600097a0e00017b017a0100067a0f00017a0300057a1300057a1200017c047d017c1200017c0400017c'),\n\t\tbytes(hex'ff0089000182160009820e0002820100028201160182011601820f000182030001820316018213000582120006161200011604000116'),\n\t\tbytes(hex'ff00a3000583120003830184028313000183018401830184018313000583120006851200018504000185'),\n\t\tbytes(hex'ff00a300010203000102120006021300050213000502120006881200018804000188'),\n\t\tbytes(hex'ff0089000189160009890e00028901000389020101890f0001890300018902010289130005891200068a1200018a0400018a'),\n\t\tbytes(hex'ff0089000186160009860e00028601000286012b0186012b01860f00018603000286012b0286130005861200068712000187040001871200018704000187'),\n\t\tbytes(hex'ff008900018b1600098b0e00028b0100038b018c028b0f00018b0300018b038c018b1300058b1200068d1200018d0400018d1200018d0400018d'),\n\t\tbytes(hex'ff00a300019001000190010001901200019001000190010001901400019001000190010001901400019001000190140001900100019001000190'),\n\t\tbytes(hex'ff00ed00018e1600038e1500018e018f018e')\n\t];\n\n\tstring[] public bodies_traits = [\n\t\t'Burrito',\n\t\t'Monk',\n\t\t'Comfy',\n\t\t'Hoodie',\n\t\t'Astro',\n\t\t'Underwear',\n\t\t'Ninja',\n\t\t'Jiu Jitsu Gi Blue',\n\t\t'Boxer',\n\t\t'Andy',\n\t\t'Myles',\n\t\t'Business Time',\n\t\t'Freddie',\n\t\t'Hot Speedo',\n\t\t'Swimmer',\n\t\t'Argyle',\n\t\t'Steve',\n\t\t'Romphim',\n\t\t'Meme Frog',\n\t\t'Go Bruins',\n\t\t'Staying Fit',\n\t\t'LA Summer',\n\t\t'Bicyclist',\n\t\t'Funktronic',\n\t\t'Ganja Shirt From College',\n\t\t'Net',\n\t\t'Leaf'\n\t];\n\n\tuint8[] public bodies_indices = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26];\n\n\t///////////////////////////////////////\n\t// heads\n\tbytes[] public heads = [\n\t\tbytes(hex'500009020e000102090101020c00010201010991010101020a00010201010b910101010209000102010103910881010101020900010201010291098101010102090001020101029109810101010208000102020102910981010101020700010201010281029109810101010207000102010103810191058101920481010101020700010202010c81010101020800020201010b81010101020a00010201010981010101020a00010201010181090101020a00010201010981010101020a00010201010281010102810192018101920181020101020a000102010103810101058101010181010101020a000102010102810101058101010181010101020b00010202010681020101020d0001020101018104010181010101020e00010201010181010102020101018101010102'),\n\t\tbytes(hex'500009020e000102090101020c00010201010993010101020a00010201010b930101010209000102010103930894010101020900010201010293099401010102090001020101029309940101010208000102020102930994010101020700010201010294029309940101010207000102010103940193059401950494010101020700010202010c94010101020800020201010b94010101020a00010201010994010101020a00010201010194090101020a00010201010994010101020a00010201010294010102940195019401950194020101020a000102010103940101059401010194010101020a000102010102940101059401010194010101020b00010202010694020101020d0001020101019404010194010101020e00010201010194010102020101019401010102'),\n\t\tbytes(hex'500009020e000102090101020c00010201010999010101020a00010201010b99010101020900010201010399089a010101020900010201010299099a010101020900010201010299099a010101020800010202010299099a01010102070001020101029a0299099a01010102070001020101039a0199059a0192049a010101020700010202010c9a010101020800020201010b9a010101020a0001020101099a010101020a00010201010136090101020a0001020101099a010101020a0001020101029a01010136059a020101020a0001020101039a01010136049a0101019a010101020a0001020101029a01010136049a0101019a010101020b0001020201069a020101020d0001020101019a0401019a010101020e0001020101019a010102020101019a01010102'),\n\t\tbytes(hex'500009020e000102090101020c0001020101099b010101020a00010201010b9b01010102090001020101039b089c01010102090001020101029b099c01010102090001020101029b099c01010102080001020201029b099c01010102070001020101029c029b099c01010102070001020101039c019b059c019d049c010101020700010202010c9c010101020800020201010b9c010101020a0001020101099c010101020a0001020101019e090101020a0001020101099e010101020a0001020101029e0101029e019f019e019f019e020101020a0001020101039e0101059e010101a0010101020a0001020101029e0101059e010101a0010101020b0001020201069e020101020d0001020101019e0401019e010101020e0001020101019e010102020101019e01010102'),\n\t\tbytes(hex'500009020e000102090101020c00010201010996010101020a00010201010b960101010209000102010103960897010101020900010201010296099701010102090001020101029609970101010208000102020102960997010101020700010201010297029609970101010207000102010103970196059701920497010101020700010202010c97010101020800020201010b97010101020a00010201010997010101020a00010201010198090101020a00010201010998010101020a00010201010298010102980192019801920198020101020a000102010103980101059801010198010101020a000102010102980101059801010198010101020b00010202010698020101020d0001020101019804010198010101020e00010201010198010102020101019801010102'),\n\t\tbytes(hex'500009020e000102090101020c00010201010902010101020a00010201010b02010101020900010201010b02010101020900010201010b02010101020900010201010b02010101020800010202010b02010101020700010201010d0201010102070001020101090201920402010101020700010202010c02010101020800020201010b02010101020a00010201010902010101020a00010201010102090101020a00010201010902010101020a00010201010202010102020192010201920102020101020a000102010103020101050201010102010101020a000102010102020101050201010102010101020b00010202010602020101020d0001020101010204010102010101020e00010201010102010102020101010201010102'),\n\t\tbytes(hex'500009020e000102090101020c000102010109a1010101020a00010201010ba10101010209000102010103a108a20101010209000102010102a109a20101010209000102010102a109a20101010209000102010102a109a20101010209000102010102a109a20101010209000102010102a105a2019204a20101010208000102010102a10aa20101010209000102010101a10aa2010101020a000102010109a2010101020a000102010101a3090101020a000102010108a201a3010101020a000102010102a2010101a305a2020101020a000102010103a2010101a304a2010101a2010101020a000102010102a2010101a304a2010101a2010101020b000102020106a2020101020d000102010101a2040101a2010101020e000102010101a201010202010101a201010102'),\n\t\tbytes(hex'500009020e000102090101020c000102010109a4010101020a00010201010ba40101010209000102010101a505a601a701a801a901a601aa0101010209000102010101ab01ac01ad01ac01ad01ac01ad01ac03ad0101010209000102010101ae01af01b001b102b001b201ae01b001ae01b00101010208000102020102b301b402b301b401b501b401b501b301b40101010207000102010101b601b701b601b801b901b701ba02b604b90101010207000102010101bb01bc01bd01be01bd02bb03bd01bb01be01bc01bd0101010207000102020102bf01c001c101c202c002bf01c001bf01c00101010208000202010101c301c401c501c401c601c402c702c801c3010101020a000102010101c901ca01c902cb01cc01cb01c901cb010101020a000102010101cd090101020a000102010101ce01cf02ce02d001d101d001d2010101020a000102010101d301d4010102d404d3020101020a000102010101d501d601d7010102d601d702d5010101d6010101020a000102010101d801d9010101d804d9010101d9010101020b000102020106da020101020d000102010101da040101da010101020e000102010101da01010202010101da01010102'),\n\t\tbytes(hex'500009020e000102090101020c000102010109dd010101020a000102010102dd070202dd0101010209000102010101dd010209dd0101010209000102010101dd010209dd0101010209000102010101dd010209dd010101020800010202010bdd0101010207000102010102020bdd0101010207000102010103dd010205dd019203dd0102010101020700010202010cdd010101020800020201010bdd010101020a000102010109dd010101020a000102010101de090101020a000102010101dd010207dd010101020a000102010101dd0102010102dd019f01dd019f01dd020101020a000102010102dd0102010105dd01010102010101020a000102010102dd010101dd020202dd010101dd010101020b000102020106dd020101020d000102010101dd040101dd010101020e000102010101dd01010202010101dd01010102')\n\t];\n\n\tstring[] public heads_traits = [\n\t\t'Human',\n\t\t'Tengu',\n\t\t'Meme Frog',\n\t\t'Orc',\n\t\t'Night Elf',\n\t\t'Spoopy',\n\t\t'AI Bot',\n\t\t'Prismatic',\n\t\t'Golden Boy'\n\t];\n\n\tuint8[] public heads_indices = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,5,6,6,7,8];\n\n\t///////////////////////////////////////\n\t// misc\n\tbytes[] public misc = [\n\t\tbytes(hex'500009020e000102090101020c000102010109db010101020a000102010103db08dc0101010209000102010102db09dc0101010209000102010102db09dc0101010209000102010102db09dc0101010208000102020102db09dc0101010207000102010104db09dc0101010207000102010103db03dc029203dc029201dc010101020700010202010cdc010101020800020201010bdc010101020a000102010109dc010101020a000102010101db090101020a000102010104db05dc010101020a000102010102db010106dc0201010208000302010101db02dc010105dc010101dc010101020600010202010202010102dc010105dc010101dc0101010205000102010102db020101db020106dc0201010207000102010104db08dc0101010209000102010103db07dc01010102'),\n\t\tbytes(hex'500009020e000102090101020c0001020b0101020a0001020d0101020900010205010302050101020900010204010502040101020900010203010202030102020301010208000102040102020301020203010102070001020a010202030101020700010209010202050101020700010207010202060101020800020205010202060101020a0001020b0101020a00010205010202040101020a00010206010202030101020a0001020c0101020a0001020d0101020a0001020c0101020b0001020a0101020d000102080101020e0001020301020203010102')\n\t];\n\n\tstring[] public misc_traits = [\n\t\t'Ghost',\n\t\t'Mystery'\n\t];\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/CryptoDeddies.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n000000000000000000000000000000000000000000  CRYPTO EDDIE GHOST 0000000000000000000000000000000000000\r\n000000000000000000000000000000000000000000    by @eddietree    0000000000000000000000000000000000000\r\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n000000000000000000000000000000000KXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXK000000000000000000000000000\r\n00000000000000000000000000000000KNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWK000000000000000000000000000\r\n00000000000000000000000000000KXXKOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxk0XXKK00000000000000000000000\r\n0000000000000000000000000000KNWMK;                                     .kMMWX00000000000000000000000\r\n000000000000000000000000KKKKKOOOxc''''''''''''''''''''''''''''''''''''';dOOO0KKKK0000000000000000000\r\n000000000000000000000000XWWW0,  .xNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO,  .dWWWX0000000000000000000\r\n000000000000000000000KKKK000x;..,OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKc..'o000KKKKK000000000000000\r\n00000000000000000000XWWWk'..,kXXNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNXX0c...oNWWXK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMX:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWMMMMWWWWWWWWWWWK:   lNMMNK00000000000000\r\n00000000000000000000XWMMx.  .OMMMMMMMMMMWKkxxxxxxxxxxxxxxxxKWMWKkxxxxxxxxxxdc,,;xNMMNK00000000000000\r\n00000000000000000000XWMWx.  .OMMMMMMMMMWWOlccccccccccccccclkNWW0lcccccccccccccclkNMMNK00000000000000\r\n0000000000000000KNNXkc::'   .lkkkkkkkkkkxdlccokO0xl;..';cccoxkxdlccok00x;..';cclkNMMNK00000000000000\r\n0000000000000000NWMWo       .;cccccccccccccccxXWM0o'   ,cccccccccccdXWM0,   ,cclkNMMNK00000000000000\r\n000000000000KXXXxlclloolollodkOOOOOOOOOOOdlccxXWM0o'   ,ccldkOOxlccdXWM0,   ,cclkNMMNK00000000000000\r\n00000000000KNWMNc   cNMMMMMMMMMMMMMMMMMMWOlccxXWM0o'   ,cclONWW0lccdXWM0,   ,cclkNMMNK00000000000000\r\n00000000000KNMMNc   cNMMMMMMMMMMMMMMMMMMWOlccokOOxl;..';cclONMW0lccokOOx;..';cccloookKXXK00000000000\r\n00000000000KNMMNc   cNMMMMMMMMMMMMMMMMMMW0lccccccccccccccclONWW0lccccccccccccccc'   ;XMMNK0000000000\r\n00000000000KXNNXd:;:ldxxxxxxONMMMMMMMMMMWKkxxo;,,;coxxxxxxkKWMWXkxxxxxxxxxxxxxxx;   ;XMMNK0000000000\r\n000000000000000KXWWNo.      'OMMMMMMMMMMMMWWWx.  .cOWWWWWWWWMMMMWWWWWWWWWWWWWWWNl   ;XMMNK0000000000\r\n0000000000000000XNNNx;,,,,,,:dkkOXMMMMMMMMMMM0:,,:ldkkkO000O000Okkk0WMMMMMMMMMMNl   ;XMMNK0000000000\r\n00000000000000000000XNNNNNNNO'  .kWMMMMMMMMMMWWNNOo,  .',,,,;,,'.  ;KMMMMMMMMMMNl   ;XMMNK0000000000\r\n00000000000000000000XNWWWWWW0:..,d000XMMMMMMMMMMMKxc..'',,,,,,,''..cKMMMMMMWX00Ol'..lKWWNK0000000000\r\n0000000000000000000000KKK0K0KXXX0:. .dWMMMMMMMMMMWWNXX0l,,,,,,,l0XXNWMMMMMMXc...lKNXXK0K000000000000\r\n0000000000000000000000000KKKKKKKO:...l0KKKKKKKKKKKKKKKOc'''''''cOKKKKKKKKKKOc...oNWWXK00000000000000\r\n000000000000000000000000KNWW0;..'dKK0l.................         ...........'oKKKKKKK0000000000000000\r\n00000000000000000000000KKXXXk,..'kWMNo..       ... .. .............      . .xWWWX0000000000000000000\r\n00000000000000000000XNWNk;..;x00KNMMWX00000000000000000000000000000o.  .o0000KKKK0000000000000000000\r\n00000000000000000000XNNNx.  '0MMMWNNWWMMMMMMMMMMMMMMMMMMMMMMMMMWWNNk.  .kMMWX00000000000000000000000\r\n0000000000000000XNNNx;,,cxkk0NMMXo,,;kWMMMMMMMMMMMMMMMMMMMMMMMWO:,,.   .kMMWX00000000000000000000000\r\n000000000000000KNWMWo   ;KMMMMMMK;   oNWWMMMMMMMMMMMMMMMMMMMMMWd.      .kWWWX00000000000000000000000\r\n0000000KXNNNNNNNWMMWo   ,KMMMMMMW0xddl:;:xNMMMMMMMMMMMMMMMMMMMWd.  .lxddc;;ckXNNK0000000000000000000\r\n0000000KWMMMMMMMMMMWo   ;KMMMMMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0,  .dWMWX0000000000000000000\r\n000KXNN0occccccl0WMWKdoolcccdXMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0'  .dWMWX0000000000000000000\r\n000XWMMO.       oWMMMMMMx.  .OMMMMMMNc   :XMMMMMMMMMMMMMMMMMMMWd.  ,0MM0,  .dWMWX0000000000000000000\r\nXXXOollllllllllllllllllllllllllllllllllllkWMMMMMMMMMMMMMMMMMMMWd.  .:lllllloOXXXK0000000000000000000\r\nMMWx.  '0MMMMMMNc       ;KMMO'       oWMMMMMMMMMMMMMMMMMMMMMMMWd.      .kMMWX00000000000000000000000\r\nNNNOl::coddxXMMWkc::::::dNMMXo::::::cOWMMMMMMMMMMMMMMMMMMMMMMMWd.  .,::l0NNXK00000000000000000000000\r\n000XWWWO.  .kWMMMWWMMWMMMMMMMWWWWMWMMMMMMMMMMMMMMMMMMMMMMMMMMMWd.  ,0WWNK000000000000000000000000000\r\n000KNNN0c,,:oxxkXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkkxo;,;lKNNXK000000000000000000000000000\r\n0000000KNWW0;  .dWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl.  :KWWNK0000000000000000000000000000000\r\n0000000KWMMK,   oWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNl   :XMMNK0000000000000000000000000000000\r\n*/\r\n// thx CB1 for the name\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"erc721a/contracts/ERC721A.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport 'base64-sol/base64.sol';\r\n\r\nimport \"./EddieRenderer.sol\";\r\n\r\ncontract CryptoDeddies is ERC721A, Ownable {\r\n    struct GhostData {\r\n        uint256 eddieTokenId;\r\n        uint256 eddieTokenSeed;\r\n    }\r\n\r\n    EddieRenderer public contractRenderer;\r\n\r\n    mapping(uint256 => GhostData) public ghostData; // tokenid => ghost data\r\n    error EddieGhostIsSoulbound();\r\n    event EddieGhostSpawned(uint256 indexed tokenId, uint256 indexed eddieTokenId, uint256 indexed eddieTokenSeed); // emitted when an HP goes to zero\r\n\r\n    constructor(address _contractRenderer) ERC721A(\"CryptoDeddies\", \"DEDDIE\") {\r\n        contractRenderer = EddieRenderer(_contractRenderer);\r\n    }\r\n\r\n    modifier verifyTokenId(uint256 tokenId) {\r\n        require(tokenId >= _startTokenId() && tokenId <= _totalMinted(), \"Out of bounds\");\r\n        _;\r\n    }\r\n\r\n    function _startTokenId() override internal pure virtual returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    function spawnGhost(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) external {\r\n        require(msg.sender == address(contractRenderer), \"Only callable from contract\");\r\n        _mintGhost(to, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    function spawnGhostAdmin(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) external onlyOwner {\r\n        _mintGhost(to, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    function _mintGhost(address to, uint256 eddieTokenId, uint256 eddieTokenSeed) private {\r\n        _safeMint(to, 1);\r\n\r\n        // save ghost data\r\n        uint256 tokenId = _totalMinted();\r\n        ghostData[tokenId] = GhostData({\r\n            eddieTokenId: eddieTokenId,\r\n            eddieTokenSeed: eddieTokenSeed\r\n        });\r\n\r\n        emit EddieGhostSpawned(tokenId, eddieTokenId, eddieTokenSeed);\r\n    }\r\n\r\n    // block transfers (soulbound)\r\n    function _beforeTokenTransfers(address from, address, uint256, uint256) internal pure override {\r\n        //if (from != address(0) && to != address(0)) {\r\n        if (from != address(0)) { // not burnable\r\n            revert EddieGhostIsSoulbound();\r\n        }\r\n    }\r\n\r\n    function setContractRenderer(address newAddress) external onlyOwner {\r\n        contractRenderer = EddieRenderer(newAddress);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId) override(ERC721A) public view verifyTokenId(tokenId) returns (string memory) {\r\n        require(_exists(tokenId), \"Nonexistent token\");\r\n\r\n        GhostData memory ghost = ghostData[tokenId];\r\n        uint256 eddieTokenId = ghost.eddieTokenId;\r\n        uint256 seed = ghost.eddieTokenSeed;\r\n\r\n        string memory image = contractRenderer.getGhostSVG(seed);\r\n\r\n        string memory json = Base64.encode(\r\n            bytes(string(\r\n                abi.encodePacked(\r\n                    '{\"name\": ', '\"CryptoDeddie Ghost #', Strings.toString(eddieTokenId),'\",',\r\n                    '\"description\": \"CryptoDeddie Ghost is a memorialized ghost of your original CryptoEddie, forever soulbound to your wallet.\",',\r\n                    '\"attributes\":[',\r\n                        contractRenderer.getTraitsMetadata(seed),\r\n                        '{\"trait_type\":\"Dead\", \"value\":\"True\"}, {\"trait_type\":\"Soulbound\", \"value\":\"True\"}'\r\n                    '],',\r\n                    '\"image\": \"data:image/svg+xml;base64,', Base64.encode(bytes(image)), '\"}' \r\n                )\r\n            ))\r\n        );\r\n\r\n        return string(abi.encodePacked('data:application/json;base64,', json));\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}