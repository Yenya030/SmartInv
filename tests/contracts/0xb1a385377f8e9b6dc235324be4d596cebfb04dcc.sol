{{
  "language": "Solidity",
  "sources": {
    "/contracts/StangeStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// ( ˘▽˘)っ♨ cooked by @nftchef\n// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++++++*%%?*+++++++++++++++++++++++++++++++++\n// +++++++++++++++++++++++++*??*+++?%%%%*++++*??*++++++++++++++++++++++++\n// ++++++++++++++++++++++++*S%%%+++?%%%%*+++*%%%%++++++++++++++++++++++++\n// ++++++++++++++++++++++++*S%%S?++?S%%S*+++?%%%?++++++++++++++++++++++++\n// +++++++++++++++++++++++++SS%S?++*S%%%?+++S%%S?++??*+++++++++++++++++++\n// +++++++++++++++++++++++++%%%%%++?S%%%%++?S%%S*+?%%S+++++++++++++++++++\n// +++++++++++++++++++++++++%%%%S*+?S%%%%++%%%%%++%%%S+++++++++++++++++++\n// +++++++++++++++++++++++++*S%%%?+?S%%%%++S%%%%++S%%S+++++++++++++++++++\n// ++++++++++++++++++++++++++%%%%S+?S%%%%+*S%%%?+*S%%S+++++++++++++++++++\n// ++++++++++++++++++++++++++%%%%S*?S%%%S+%%%%%*+%%%S%+++++++++++++++++++\n// +++++++++++++++*???*++++++%%%%%?%S%%%S?S%%%S*?S%%S?+++++++++++++++++++\n// +++++++++++++++%%%%%*+++++?S%%%%%%%%%%%%%%%S?S%%%S++++++++++++++++++++\n// +++++++++++++++*S%%%%*++++?S%%%%%%%%%%%%%%%%%%%%S?++++++++++++++++++++\n// ++++++++++++++++?S%%%?++++%S%%%%%%%%S%%%%%%%%%%%S*++++++++++++++++++++\n// +++++++++++++++++SS%%%?*+*S%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++++\n// +++++++++++++++++*SS%%%%%SS%%%%%%%%%%%%%%%%%%%%%%+++++++++++++++++++++\n// ++++++++++++++++++*%S%%%%%%%%%%%%%%%%%%%%%%%%%%%?+++++++++++++++++++++\n// ++++++++++++++++++++%S%%%%%%%%%%%%%%%%%%%%%%%%%S?+++++++++++++++++++++\n// +++++++++++++++++++++SS%%%%%%%%%%%S%%%%%%%%%%%%S*+++++++++++++++++++++\n// +++++++++++++++++++++*SS%%%%%%%%%%%%%%%%%%%%%%%S*+++++++++++++++++++++\n// ++++++++++++++++++++++*SS%%%%%%%%%%%%%%%%%%%%%%%++++++++++++++++++++++\n// ++++++++++++++++++++++++?SS%%%%%%%%%%%%%%%%%%%S?++++++++++++++++++++++\n// ++++++++++++++++++++++++++%S%%%%%%%%%%%%%%%%%S?+++++++++++++++++++++++\n// +++++++++++++++++++++++++++*%S%%%%%SH%%%%%%%S?++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++?S%%%%%%%%%%%%%%S*++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++*S%%%%%%%%%%%%%%S*++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++*S%%%%%%%%%%%%%%S*++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++*S%%%%%%%%%%%%%%S*++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++*S%%%NFTCHEF%%%%S+++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++?S%%%%%%%%%%%%%%%+++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++?S%%%%%%%%%%%%%S%+++++++++++++++++++++++++\n// ++++++++++++++++++++++++++++?S%%%%%%%%%%%%%S%+++++++++++++++++++++++++\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract StrangeStaking is Pausable, Ownable, ReentrancyGuard {\n    IERC721 public StrangeHandsNFT;\n\n    struct Stake {\n        address owner;\n        uint256 timestamp;\n    }\n\n    struct Cycle {\n        uint256 timestamp;\n        uint256 shares;\n        uint256 reward; // wei\n    }\n\n    uint256 public totalStaked;\n    uint256 public MAX_UNSTAKE = 20;\n    uint256 QUALIFICATION = 30 days;\n\n    // maintain the last deposit cycle state\n    uint256 public LAST_CYCLE_TIME;\n    uint256 public LAST_CYCLE_SHARES;\n    uint256[] public stakedTokens;\n\n    // maps tokenID to Stake details\n    mapping(uint256 => Stake) public stakes;\n\n    mapping(address => uint256[]) public owned;\n    mapping(address => uint256) public redeemedRewards;\n    mapping(address => uint256) public allocatedRewards;\n\n    // track owned array, token order\n    mapping(uint256 => uint256) public index;\n\n    // Array index tracker for all staked tokens\n    mapping(uint256 => uint256) public stakedTokenIndex;\n\n    // all reward cycles tracked over time\n    Cycle[] rewardCycles;\n\n    constructor(address _strange) {\n        StrangeHandsNFT = IERC721(_strange);\n    }\n\n    modifier isApprovedForAll() {\n        require(\n            StrangeHandsNFT.isApprovedForAll(msg.sender, address(this)),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _;\n    }\n\n    /**\n     * @notice This is what you're here for d=(´▽｀)=b.\n     * @param tokenIds array of tokens owned by caller, to be staked.\n     */\n    function stake(uint256[] calldata tokenIds)\n        external\n        isApprovedForAll\n        whenNotPaused\n    {\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                StrangeHandsNFT.ownerOf(tokenIds[i]) == msg.sender,\n                \"Caller is not token owner\"\n            );\n        }\n\n        uint256[] storage ownedTokens = owned[msg.sender];\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            index[tokenIds[i]] = ownedTokens.length;\n            ownedTokens.push(tokenIds[i]);\n            // updates global arr of all stakedTokens\n            stakedTokenIndex[tokenIds[i]] = stakedTokens.length;\n            stakedTokens.push(tokenIds[i]);\n            // create a Stake\n            stakes[tokenIds[i]] = Stake(msg.sender, block.timestamp);\n\n            StrangeHandsNFT.transferFrom(\n                msg.sender,\n                address(this),\n                tokenIds[i]\n            );\n        }\n\n        totalStaked += tokenIds.length;\n    }\n\n    /**\n     * @notice unstake a single token. May only be called by the owner of\n     * the token\n     * @param tokenId token to unstake.\n     */\n    function unstake(uint256 tokenId) public nonReentrant {\n        require(\n            stakes[tokenId].owner == msg.sender,\n            \"Caller is not token owner\"\n        );\n        _unstake(tokenId);\n        totalStaked--;\n    }\n\n    /**\n     * @notice convenience function for calling unstake for multiple arrays in a\n     * single transaction.\n     * @param tokenIds array of token id's\n     */\n    function unstakeMultiple(uint256[] calldata tokenIds)\n        external\n        nonReentrant\n    {\n        require(\n            tokenIds.length <= MAX_UNSTAKE,\n            \"Exceeds maximum number to unstake at once\"\n        );\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            require(\n                stakes[tokenIds[i]].owner == msg.sender,\n                \"Caller is not token owner\"\n            );\n        }\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            _unstake(tokenIds[i]);\n        }\n        totalStaked -= tokenIds.length;\n    }\n\n    /**\n     * @notice Retrieves the token ID's owned by _address that are staked\n     * @param _address owner wallet address.\n     */\n    function getOwned(address _address) public view returns (uint256[] memory) {\n        return owned[_address];\n    }\n\n    /**\n     * @notice convenience view function to get the number of total staked tokens\n     * owned by a given wallet\n     * @param _address owner wallet address\n     */\n    function getOwnedCount(address _address) public view returns (uint256) {\n        return owned[_address].length;\n    }\n\n    /**\n     * @notice determins which tokens owned by an owner are considered\n     *   \"qualified\" for any cycle.\n     * @param _address adress to lookup qualified tokens.\n     * @return qualifed array of booleans that map to the index order of owned tokens\n     */\n    function getAllQualified(address _address)\n        external\n        view\n        returns (bool[] memory)\n    {\n        bool[] memory qualified = new bool[](owned[_address].length);\n\n        for (uint256 nft = 0; nft < owned[_address].length; nft++) {\n            for (uint256 cycle = 0; cycle < rewardCycles.length; cycle++) {\n                if (\n                    stakes[owned[_address][nft]].timestamp + QUALIFICATION <=\n                    rewardCycles[cycle].timestamp\n                ) {\n                    qualified[nft] = true;\n                } else {\n                    qualified[nft] = false;\n                }\n            }\n        }\n\n        return qualified;\n    }\n\n    /**\n     * @notice get all tokenId's that are currently staked.\n     * @dev Can also be used to get the number of staked tokens.\n     *    Does not a 'sorted' order. Sort offchain if needed.\n     * @return tokens array of all staked tokens\n     */\n    function getStakedTokens() public view returns (uint256[] memory) {\n        return stakedTokens;\n    }\n\n    function pendingBalance(address _address)\n        public\n        view\n        returns (uint256 claim)\n    {\n        //  ... calculate qualified tokens\n        for (uint256 nft = 0; nft < owned[_address].length; nft++) {\n            claim += tokenValue(owned[_address][nft]);\n        }\n        // then, subtract claimed\n        claim -= redeemedRewards[_address];\n        // then, add saved\n        claim += allocatedRewards[_address];\n    }\n\n    function collectRewards() external payable nonReentrant {\n        uint256 claim = pendingBalance(msg.sender);\n        require(claim > 0, \"No rewards available\");\n\n        (bool sent, bytes memory data) = msg.sender.call{value: claim}(\"\");\n        require(sent, \"Failed to send Ether\");\n        redeemedRewards[msg.sender] += claim;\n        allocatedRewards[msg.sender] = 0;\n    }\n\n    function tokenValue(uint256 _tokenId)\n        internal\n        view\n        returns (uint256 claim)\n    {\n        // check every cycle for qualification & rewards. accumulate it-\n        for (uint256 cycle = 0; cycle < rewardCycles.length; cycle++) {\n            if (\n                stakes[_tokenId].timestamp + QUALIFICATION <=\n                rewardCycles[cycle].timestamp\n            ) {\n                // accumlate gross, current staked total wei\n                claim += rewardCycles[cycle].reward;\n            }\n        }\n    }\n\n    function _unstake(uint256 tokenId) private {\n        uint256[] storage ownedTokens = owned[msg.sender];\n\n        // get and store unclaimed rewards earned for the token\n        allocatedRewards[msg.sender] += tokenValue(tokenId);\n        // swap and pop to remove token from index\n        ownedTokens[index[tokenId]] = ownedTokens[ownedTokens.length - 1];\n        index[ownedTokens[ownedTokens.length - 1]] = index[tokenId];\n        ownedTokens.pop();\n\n        // set token to \"unowned\"\n        stakes[tokenId] = Stake(address(0), 0);\n        // remove the tokenID from stakedTokens\n        stakedTokens[stakedTokenIndex[tokenId]] = stakedTokens[\n            stakedTokens.length - 1\n        ];\n        // swap the the index mapping for staked tokenId's\n        stakedTokenIndex[\n            stakedTokens[stakedTokens.length - 1]\n        ] = stakedTokenIndex[tokenId];\n        stakedTokens.pop();\n\n        // finally, send the token back to the owners wallet.\n        StrangeHandsNFT.transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    function snapshotAllQualified() public view returns (uint256) {\n        // calculates all qualified tokens (gas intensive) when called\n        // on-chain. only used when dopositing, so it's ok.\n        uint256 totalShares;\n\n        for (uint256 i = 0; i < stakedTokens.length; i++) {\n            if (\n                stakes[stakedTokens[i]].timestamp + QUALIFICATION <=\n                LAST_CYCLE_TIME\n            ) {\n                totalShares++;\n            }\n        }\n        return totalShares;\n    }\n\n    function depositCycle() external payable onlyOwner {\n        LAST_CYCLE_TIME = block.timestamp;\n        LAST_CYCLE_SHARES = snapshotAllQualified();\n        require(LAST_CYCLE_SHARES > 0, \"No qualified shares\");\n\n        // add a new cycle to the contract state. forever.\n        rewardCycles.push(\n            Cycle(\n                block.timestamp,\n                LAST_CYCLE_SHARES,\n                msg.value / LAST_CYCLE_SHARES\n            )\n        );\n    }\n\n    /**\n     * @dev Set the timespan required to consider tokens \"qualified\"\n     * @param _time length of time in seconds\n     */\n    function setQualificationPeriod(uint256 _time) external onlyOwner {\n        QUALIFICATION = _time;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 2200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}