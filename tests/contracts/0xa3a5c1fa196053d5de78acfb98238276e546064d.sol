{{
  "language": "Solidity",
  "sources": {
    "contracts/mondo-megabits.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\nimport \"./mondo-marketplace.sol\";\r\n\r\ncontract MondoTokens is ERC1155, ERC2981, Pausable, AccessControlEnumerable, ReentrancyGuard {\r\n    /* ========================================================================================== */\r\n    /*                                            ROLES                                           */\r\n    /* ========================================================================================== */\r\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\r\n    bytes32 public constant WITHDRAWER_ROLE = keccak256(\"WITHDRAWER_ROLE\");\r\n\r\n    /* --------------------------------------- MARKETPLACE -------------------------------------- */\r\n    MondoMarketplace public _mondoMarketplace;\r\n\r\n    /* ========================================================================================== */\r\n    /*                                     MINTING INFORMATION                                    */\r\n    /* ========================================================================================== */\r\n    enum MintingStatus {\r\n        WAITING,\r\n        PAUSED,\r\n        STANDARD,\r\n        ADVANCED,\r\n        DONE\r\n    }\r\n\r\n    MintingStatus public mintingStatus = MintingStatus.WAITING;\r\n\r\n    // Merkle root for the whitelist\r\n    bytes32 public root = 0x36a3f277fab998f2083548bd5c2787cfea178f0898274a95941a60a2c72a3ca4;\r\n\r\n    // Signer address for verifying signatures\r\n    address public signer = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;\r\n\r\n    string public constant PROVENANCE_RECORD = \"magnet:?xt=urn:btih:000519fbe6f5ffb26f9d505b334265aa0f8b58c3&dn=Mondo%20Megabits%20Drop%201%20-%20Fake%20Tech\";\r\n\r\n    // Total supply\r\n    uint256 public constant TOTAL_COPIES_EVER = 4038;\r\n\r\n    uint256 public totalMinted = 0;\r\n\r\n    bool public whitelistEnabled = true;\r\n\r\n    // Maximum minted tokens for a single address\r\n    uint8 public maxMintCountPerAddress = 5;\r\n\r\n    // Tokens to be minted.\r\n    // Using uint8 because it will be packed to be smaller so that it's possible to fit this many numbers.\r\n    // Gas will be higher due to packing after modifying a storage variable that doesn't take up a full slot.\r\n    // We have to make this tradeoff though.\r\n    uint8[] tokenPool = [\r\n        63,\r\n        11,\r\n        80,\r\n        81,\r\n        42,\r\n        100,\r\n        55,\r\n        60,\r\n        75,\r\n        28,\r\n        16,\r\n        86,\r\n        96,\r\n        81,\r\n        22,\r\n        39,\r\n        62,\r\n        93,\r\n        83,\r\n        5,\r\n        65,\r\n        31,\r\n        25,\r\n        5,\r\n        22,\r\n        29,\r\n        47,\r\n        51,\r\n        12,\r\n        62,\r\n        84,\r\n        100,\r\n        96,\r\n        20,\r\n        100,\r\n        73,\r\n        70,\r\n        51,\r\n        42,\r\n        97,\r\n        29,\r\n        44,\r\n        75,\r\n        55,\r\n        89,\r\n        60,\r\n        49,\r\n        67,\r\n        87,\r\n        93,\r\n        99,\r\n        57,\r\n        34,\r\n        94,\r\n        24,\r\n        45,\r\n        27,\r\n        99,\r\n        55,\r\n        95,\r\n        48,\r\n        23,\r\n        66,\r\n        84,\r\n        20,\r\n        22,\r\n        6,\r\n        80,\r\n        37,\r\n        73,\r\n        52,\r\n        95,\r\n        3,\r\n        96,\r\n        55,\r\n        90,\r\n        13,\r\n        27,\r\n        80,\r\n        89,\r\n        100,\r\n        39,\r\n        63,\r\n        58,\r\n        94,\r\n        45,\r\n        2,\r\n        72,\r\n        60,\r\n        5,\r\n        85,\r\n        16,\r\n        36,\r\n        19,\r\n        14,\r\n        59,\r\n        55,\r\n        7,\r\n        90,\r\n        10,\r\n        83,\r\n        73,\r\n        75,\r\n        89,\r\n        81,\r\n        32,\r\n        51,\r\n        23,\r\n        6,\r\n        93,\r\n        15,\r\n        49,\r\n        100,\r\n        97,\r\n        20,\r\n        51,\r\n        34,\r\n        53,\r\n        56,\r\n        59,\r\n        22,\r\n        75,\r\n        30,\r\n        63,\r\n        42,\r\n        13,\r\n        65,\r\n        12,\r\n        10,\r\n        2,\r\n        3,\r\n        32,\r\n        100,\r\n        90,\r\n        2,\r\n        73,\r\n        19,\r\n        89,\r\n        63,\r\n        89,\r\n        75,\r\n        21,\r\n        55,\r\n        53,\r\n        75,\r\n        95,\r\n        94,\r\n        83,\r\n        85,\r\n        77,\r\n        75,\r\n        58,\r\n        70,\r\n        76,\r\n        41,\r\n        64,\r\n        15,\r\n        97,\r\n        81,\r\n        19,\r\n        32,\r\n        78,\r\n        3,\r\n        35,\r\n        65,\r\n        40,\r\n        33,\r\n        83,\r\n        29,\r\n        43,\r\n        71,\r\n        66,\r\n        61,\r\n        92,\r\n        129,\r\n        13,\r\n        62,\r\n        35,\r\n        12,\r\n        80,\r\n        33,\r\n        28,\r\n        19,\r\n        33,\r\n        85,\r\n        54,\r\n        88,\r\n        54,\r\n        75,\r\n        91,\r\n        10,\r\n        29,\r\n        73,\r\n        55,\r\n        26,\r\n        89,\r\n        49,\r\n        31,\r\n        96,\r\n        81,\r\n        55,\r\n        13,\r\n        100,\r\n        28,\r\n        6,\r\n        10,\r\n        4,\r\n        88,\r\n        49,\r\n        25,\r\n        66,\r\n        85,\r\n        72,\r\n        30,\r\n        67,\r\n        60,\r\n        64,\r\n        26,\r\n        8,\r\n        44,\r\n        65,\r\n        49,\r\n        94,\r\n        81,\r\n        68,\r\n        4,\r\n        68,\r\n        1,\r\n        77,\r\n        16,\r\n        90,\r\n        53,\r\n        42,\r\n        67,\r\n        21,\r\n        73,\r\n        18,\r\n        62,\r\n        21,\r\n        49,\r\n        53,\r\n        92,\r\n        22,\r\n        32,\r\n        42,\r\n        58,\r\n        89,\r\n        72,\r\n        44,\r\n        6,\r\n        38,\r\n        45,\r\n        44,\r\n        34,\r\n        63,\r\n        27,\r\n        91,\r\n        70,\r\n        35,\r\n        37,\r\n        9,\r\n        45,\r\n        53,\r\n        87,\r\n        27,\r\n        10,\r\n        49,\r\n        83,\r\n        30,\r\n        89,\r\n        57,\r\n        55,\r\n        31,\r\n        71,\r\n        4,\r\n        87,\r\n        4,\r\n        73,\r\n        94,\r\n        7,\r\n        9,\r\n        81,\r\n        88,\r\n        70,\r\n        42,\r\n        49,\r\n        22,\r\n        29,\r\n        27,\r\n        77,\r\n        27,\r\n        32,\r\n        52,\r\n        29,\r\n        73,\r\n        21,\r\n        62,\r\n        37,\r\n        78,\r\n        18,\r\n        32,\r\n        34,\r\n        14,\r\n        4,\r\n        85,\r\n        19,\r\n        22,\r\n        39,\r\n        39,\r\n        81,\r\n        84,\r\n        91,\r\n        75,\r\n        35,\r\n        27,\r\n        60,\r\n        67,\r\n        6,\r\n        86,\r\n        53,\r\n        49,\r\n        90,\r\n        94,\r\n        33,\r\n        117,\r\n        22,\r\n        3,\r\n        71,\r\n        93,\r\n        32,\r\n        69,\r\n        21,\r\n        36,\r\n        84,\r\n        37,\r\n        6,\r\n        29,\r\n        27,\r\n        2,\r\n        29,\r\n        28,\r\n        8,\r\n        79,\r\n        63,\r\n        84,\r\n        5,\r\n        13,\r\n        86,\r\n        79,\r\n        94,\r\n        75,\r\n        51,\r\n        75,\r\n        2,\r\n        4,\r\n        90,\r\n        16,\r\n        45,\r\n        47,\r\n        49,\r\n        42,\r\n        65,\r\n        17,\r\n        2,\r\n        49,\r\n        93,\r\n        36,\r\n        31,\r\n        54,\r\n        27,\r\n        19,\r\n        25,\r\n        22,\r\n        84,\r\n        27,\r\n        36,\r\n        86,\r\n        99,\r\n        63,\r\n        66,\r\n        25,\r\n        87,\r\n        4,\r\n        92,\r\n        89,\r\n        88,\r\n        7,\r\n        32,\r\n        7,\r\n        87,\r\n        34,\r\n        7,\r\n        25,\r\n        11,\r\n        55,\r\n        23,\r\n        39,\r\n        21,\r\n        10,\r\n        22,\r\n        28,\r\n        76,\r\n        44,\r\n        76,\r\n        78,\r\n        67,\r\n        78,\r\n        64,\r\n        60,\r\n        22,\r\n        85,\r\n        99,\r\n        60,\r\n        93,\r\n        47,\r\n        44,\r\n        95,\r\n        91,\r\n        84,\r\n        63,\r\n        7,\r\n        75,\r\n        21,\r\n        93,\r\n        54,\r\n        27,\r\n        99,\r\n        30,\r\n        89,\r\n        32,\r\n        6,\r\n        32,\r\n        5,\r\n        87,\r\n        47,\r\n        30,\r\n        11,\r\n        81,\r\n        86,\r\n        12,\r\n        68,\r\n        32,\r\n        62,\r\n        89,\r\n        7,\r\n        79,\r\n        13,\r\n        7,\r\n        12,\r\n        87,\r\n        96,\r\n        63,\r\n        25,\r\n        6,\r\n        38,\r\n        15,\r\n        100,\r\n        94,\r\n        13,\r\n        64,\r\n        32,\r\n        81,\r\n        57,\r\n        110,\r\n        34,\r\n        83,\r\n        90,\r\n        3,\r\n        94,\r\n        28,\r\n        49,\r\n        12,\r\n        97,\r\n        76,\r\n        34,\r\n        23,\r\n        75,\r\n        94,\r\n        95,\r\n        5,\r\n        44,\r\n        24,\r\n        7,\r\n        96,\r\n        81,\r\n        77,\r\n        1,\r\n        95,\r\n        85,\r\n        96,\r\n        81,\r\n        2,\r\n        29,\r\n        10,\r\n        71,\r\n        34,\r\n        96,\r\n        28,\r\n        42,\r\n        24,\r\n        91,\r\n        54,\r\n        44,\r\n        28,\r\n        62,\r\n        59,\r\n        56,\r\n        49,\r\n        25,\r\n        8,\r\n        66,\r\n        2,\r\n        30,\r\n        86,\r\n        95,\r\n        99,\r\n        14,\r\n        85,\r\n        7,\r\n        3,\r\n        100,\r\n        27,\r\n        78,\r\n        6,\r\n        92,\r\n        26,\r\n        11,\r\n        61,\r\n        12,\r\n        7,\r\n        13,\r\n        99,\r\n        52,\r\n        76,\r\n        49,\r\n        106,\r\n        35,\r\n        29,\r\n        78,\r\n        49,\r\n        28,\r\n        33,\r\n        3,\r\n        105,\r\n        7,\r\n        68,\r\n        69,\r\n        34,\r\n        6,\r\n        12,\r\n        73,\r\n        88,\r\n        55,\r\n        54,\r\n        68,\r\n        14,\r\n        63,\r\n        62,\r\n        47,\r\n        73,\r\n        33,\r\n        60,\r\n        89,\r\n        36,\r\n        42,\r\n        12,\r\n        27,\r\n        120,\r\n        3,\r\n        85,\r\n        10,\r\n        57,\r\n        89,\r\n        9,\r\n        66,\r\n        31,\r\n        15,\r\n        83,\r\n        32,\r\n        22,\r\n        16,\r\n        81,\r\n        29,\r\n        71,\r\n        8,\r\n        16,\r\n        25,\r\n        65,\r\n        96,\r\n        51,\r\n        64,\r\n        70,\r\n        90,\r\n        68,\r\n        7,\r\n        7,\r\n        76,\r\n        64,\r\n        13,\r\n        7,\r\n        94,\r\n        52,\r\n        56,\r\n        20,\r\n        73,\r\n        63,\r\n        49,\r\n        7,\r\n        71,\r\n        31,\r\n        27,\r\n        52,\r\n        39,\r\n        27,\r\n        89,\r\n        14,\r\n        24,\r\n        22,\r\n        80,\r\n        20,\r\n        54,\r\n        68,\r\n        42,\r\n        11,\r\n        39,\r\n        44,\r\n        2,\r\n        75,\r\n        17,\r\n        23,\r\n        99,\r\n        92,\r\n        68,\r\n        5,\r\n        90,\r\n        72,\r\n        81,\r\n        76,\r\n        10,\r\n        49,\r\n        23,\r\n        47,\r\n        73,\r\n        81,\r\n        85,\r\n        59,\r\n        25,\r\n        71,\r\n        67,\r\n        90,\r\n        36,\r\n        94,\r\n        63,\r\n        90,\r\n        76,\r\n        39,\r\n        69,\r\n        30,\r\n        69,\r\n        24,\r\n        100,\r\n        42,\r\n        43,\r\n        55,\r\n        43,\r\n        34,\r\n        14,\r\n        6,\r\n        90,\r\n        67,\r\n        67,\r\n        6,\r\n        51,\r\n        5,\r\n        51,\r\n        60,\r\n        22,\r\n        91,\r\n        83,\r\n        39,\r\n        29,\r\n        69,\r\n        19,\r\n        34,\r\n        11,\r\n        73,\r\n        32,\r\n        21,\r\n        45,\r\n        78,\r\n        16,\r\n        59,\r\n        77,\r\n        52,\r\n        97,\r\n        31,\r\n        4,\r\n        44,\r\n        17,\r\n        13,\r\n        25,\r\n        42,\r\n        30,\r\n        28,\r\n        91,\r\n        33,\r\n        91,\r\n        69,\r\n        6,\r\n        56,\r\n        2,\r\n        6,\r\n        12,\r\n        39,\r\n        86,\r\n        68,\r\n        15,\r\n        66,\r\n        10,\r\n        9,\r\n        52,\r\n        75,\r\n        99,\r\n        25,\r\n        12,\r\n        56,\r\n        83,\r\n        5,\r\n        52,\r\n        16,\r\n        37,\r\n        35,\r\n        18,\r\n        32,\r\n        90,\r\n        49,\r\n        71,\r\n        9,\r\n        26,\r\n        51,\r\n        7,\r\n        63,\r\n        62,\r\n        44,\r\n        73,\r\n        16,\r\n        71,\r\n        99,\r\n        23,\r\n        42,\r\n        6,\r\n        33,\r\n        19,\r\n        85,\r\n        33,\r\n        100,\r\n        23,\r\n        96,\r\n        21,\r\n        76,\r\n        34,\r\n        13,\r\n        51,\r\n        30,\r\n        30,\r\n        42,\r\n        27,\r\n        11,\r\n        54,\r\n        88,\r\n        15,\r\n        6,\r\n        88,\r\n        11,\r\n        80,\r\n        18,\r\n        35,\r\n        12,\r\n        15,\r\n        9,\r\n        39,\r\n        37,\r\n        68,\r\n        99,\r\n        44,\r\n        83,\r\n        8,\r\n        30,\r\n        28,\r\n        94,\r\n        21,\r\n        87,\r\n        6,\r\n        24,\r\n        35,\r\n        54,\r\n        75,\r\n        16,\r\n        58,\r\n        97,\r\n        92,\r\n        39,\r\n        62,\r\n        35,\r\n        52,\r\n        3,\r\n        78,\r\n        48,\r\n        97,\r\n        59,\r\n        79,\r\n        88,\r\n        76,\r\n        7,\r\n        37,\r\n        83,\r\n        3,\r\n        22,\r\n        79,\r\n        22,\r\n        64,\r\n        85,\r\n        68,\r\n        34,\r\n        26,\r\n        31,\r\n        75,\r\n        32,\r\n        7,\r\n        70,\r\n        93,\r\n        47,\r\n        44,\r\n        62,\r\n        96,\r\n        5,\r\n        99,\r\n        91,\r\n        84,\r\n        3,\r\n        86,\r\n        47,\r\n        75,\r\n        85,\r\n        9,\r\n        51,\r\n        80,\r\n        39,\r\n        6,\r\n        32,\r\n        11,\r\n        64,\r\n        57,\r\n        48,\r\n        95,\r\n        47,\r\n        85,\r\n        36,\r\n        28,\r\n        39,\r\n        81,\r\n        57,\r\n        75,\r\n        78,\r\n        73,\r\n        42,\r\n        55,\r\n        35,\r\n        92,\r\n        65,\r\n        36,\r\n        5,\r\n        66,\r\n        69,\r\n        8,\r\n        19,\r\n        87,\r\n        69,\r\n        6,\r\n        92,\r\n        86,\r\n        94,\r\n        37,\r\n        19,\r\n        28,\r\n        75,\r\n        72,\r\n        52,\r\n        88,\r\n        62,\r\n        65,\r\n        52,\r\n        13,\r\n        62,\r\n        2,\r\n        68,\r\n        96,\r\n        32,\r\n        7,\r\n        60,\r\n        86,\r\n        44,\r\n        69,\r\n        86,\r\n        22,\r\n        87,\r\n        6,\r\n        2,\r\n        16,\r\n        5,\r\n        70,\r\n        16,\r\n        75,\r\n        47,\r\n        13,\r\n        90,\r\n        52,\r\n        12,\r\n        28,\r\n        71,\r\n        8,\r\n        23,\r\n        67,\r\n        92,\r\n        70,\r\n        75,\r\n        73,\r\n        54,\r\n        89,\r\n        14,\r\n        6,\r\n        80,\r\n        44,\r\n        70,\r\n        95,\r\n        3,\r\n        75,\r\n        73,\r\n        71,\r\n        37,\r\n        6,\r\n        1,\r\n        81,\r\n        25,\r\n        33,\r\n        88,\r\n        15,\r\n        29,\r\n        93,\r\n        93,\r\n        14,\r\n        100,\r\n        81,\r\n        100,\r\n        44,\r\n        34,\r\n        37,\r\n        6,\r\n        12,\r\n        18,\r\n        36,\r\n        4,\r\n        20,\r\n        86,\r\n        38,\r\n        4,\r\n        83,\r\n        4,\r\n        75,\r\n        52,\r\n        49,\r\n        100,\r\n        62,\r\n        33,\r\n        22,\r\n        11,\r\n        13,\r\n        62,\r\n        100,\r\n        44,\r\n        71,\r\n        16,\r\n        47,\r\n        67,\r\n        47,\r\n        6,\r\n        81,\r\n        22,\r\n        31,\r\n        66,\r\n        31,\r\n        12,\r\n        78,\r\n        54,\r\n        94,\r\n        44,\r\n        39,\r\n        93,\r\n        95,\r\n        86,\r\n        20,\r\n        61,\r\n        87,\r\n        12,\r\n        18,\r\n        23,\r\n        76,\r\n        10,\r\n        71,\r\n        36,\r\n        39,\r\n        65,\r\n        57,\r\n        66,\r\n        63,\r\n        54,\r\n        26,\r\n        72,\r\n        16,\r\n        26,\r\n        100,\r\n        60,\r\n        4,\r\n        53,\r\n        95,\r\n        75,\r\n        62,\r\n        43,\r\n        18,\r\n        55,\r\n        32,\r\n        65,\r\n        66,\r\n        75,\r\n        27,\r\n        2,\r\n        3,\r\n        17,\r\n        77,\r\n        54,\r\n        47,\r\n        83,\r\n        27,\r\n        26,\r\n        11,\r\n        63,\r\n        35,\r\n        89,\r\n        78,\r\n        63,\r\n        91,\r\n        75,\r\n        17,\r\n        36,\r\n        75,\r\n        30,\r\n        44,\r\n        92,\r\n        111,\r\n        47,\r\n        14,\r\n        1,\r\n        78,\r\n        125,\r\n        86,\r\n        33,\r\n        92,\r\n        8,\r\n        84,\r\n        81,\r\n        35,\r\n        100,\r\n        66,\r\n        55,\r\n        48,\r\n        62,\r\n        17,\r\n        35,\r\n        9,\r\n        69,\r\n        87,\r\n        91,\r\n        37,\r\n        63,\r\n        39,\r\n        4,\r\n        37,\r\n        88,\r\n        23,\r\n        70,\r\n        28,\r\n        86,\r\n        87,\r\n        93,\r\n        9,\r\n        21,\r\n        92,\r\n        51,\r\n        34,\r\n        62,\r\n        83,\r\n        84,\r\n        28,\r\n        99,\r\n        18,\r\n        11,\r\n        26,\r\n        89,\r\n        19,\r\n        29,\r\n        49,\r\n        92,\r\n        73,\r\n        39,\r\n        32,\r\n        75,\r\n        28,\r\n        63,\r\n        95,\r\n        35,\r\n        38,\r\n        90,\r\n        20,\r\n        2,\r\n        89,\r\n        87,\r\n        19,\r\n        39,\r\n        55,\r\n        76,\r\n        76,\r\n        28,\r\n        10,\r\n        26,\r\n        30,\r\n        65,\r\n        56,\r\n        43,\r\n        25,\r\n        53,\r\n        84,\r\n        34,\r\n        53,\r\n        77,\r\n        46,\r\n        67,\r\n        85,\r\n        90,\r\n        29,\r\n        48,\r\n        85,\r\n        77,\r\n        75,\r\n        90,\r\n        90,\r\n        6,\r\n        24,\r\n        69,\r\n        21,\r\n        49,\r\n        54,\r\n        73,\r\n        15,\r\n        86,\r\n        97,\r\n        65,\r\n        7,\r\n        52,\r\n        76,\r\n        7,\r\n        88,\r\n        6,\r\n        34,\r\n        87,\r\n        9,\r\n        1,\r\n        69,\r\n        60,\r\n        70,\r\n        25,\r\n        11,\r\n        15,\r\n        85,\r\n        10,\r\n        7,\r\n        42,\r\n        70,\r\n        21,\r\n        32,\r\n        58,\r\n        15,\r\n        68,\r\n        28,\r\n        49,\r\n        7,\r\n        44,\r\n        47,\r\n        62,\r\n        26,\r\n        26,\r\n        89,\r\n        29,\r\n        60,\r\n        17,\r\n        49,\r\n        19,\r\n        29,\r\n        57,\r\n        87,\r\n        81,\r\n        30,\r\n        95,\r\n        21,\r\n        73,\r\n        93,\r\n        74,\r\n        60,\r\n        28,\r\n        22,\r\n        32,\r\n        34,\r\n        73,\r\n        52,\r\n        87,\r\n        62,\r\n        4,\r\n        100,\r\n        87,\r\n        22,\r\n        93,\r\n        98,\r\n        14,\r\n        54,\r\n        86,\r\n        77,\r\n        17,\r\n        34,\r\n        29,\r\n        86,\r\n        6,\r\n        42,\r\n        34,\r\n        28,\r\n        87,\r\n        70,\r\n        65,\r\n        103,\r\n        60,\r\n        4,\r\n        13,\r\n        87,\r\n        43,\r\n        88,\r\n        72,\r\n        3,\r\n        29,\r\n        36,\r\n        90,\r\n        49,\r\n        73,\r\n        76,\r\n        88,\r\n        48,\r\n        83,\r\n        92,\r\n        102,\r\n        52,\r\n        28,\r\n        96,\r\n        6,\r\n        39,\r\n        63,\r\n        31,\r\n        44,\r\n        47,\r\n        92,\r\n        81,\r\n        90,\r\n        27,\r\n        33,\r\n        33,\r\n        30,\r\n        38,\r\n        30,\r\n        70,\r\n        93,\r\n        100,\r\n        75,\r\n        39,\r\n        87,\r\n        84,\r\n        62,\r\n        21,\r\n        86,\r\n        80,\r\n        84,\r\n        66,\r\n        3,\r\n        91,\r\n        28,\r\n        100,\r\n        87,\r\n        13,\r\n        60,\r\n        63,\r\n        93,\r\n        35,\r\n        34,\r\n        33,\r\n        68,\r\n        5,\r\n        7,\r\n        63,\r\n        95,\r\n        124,\r\n        99,\r\n        38,\r\n        58,\r\n        89,\r\n        92,\r\n        44,\r\n        64,\r\n        73,\r\n        49,\r\n        20,\r\n        36,\r\n        88,\r\n        32,\r\n        69,\r\n        42,\r\n        81,\r\n        6,\r\n        63,\r\n        92,\r\n        36,\r\n        9,\r\n        13,\r\n        12,\r\n        35,\r\n        57,\r\n        34,\r\n        99,\r\n        27,\r\n        11,\r\n        29,\r\n        21,\r\n        93,\r\n        31,\r\n        60,\r\n        86,\r\n        75,\r\n        95,\r\n        90,\r\n        91,\r\n        91,\r\n        100,\r\n        80,\r\n        5,\r\n        58,\r\n        93,\r\n        84,\r\n        89,\r\n        57,\r\n        16,\r\n        67,\r\n        94,\r\n        62,\r\n        53,\r\n        118,\r\n        89,\r\n        70,\r\n        39,\r\n        85,\r\n        64,\r\n        25,\r\n        94,\r\n        9,\r\n        88,\r\n        10,\r\n        63,\r\n        37,\r\n        1,\r\n        83,\r\n        10,\r\n        27,\r\n        15,\r\n        29,\r\n        94,\r\n        29,\r\n        44,\r\n        51,\r\n        73,\r\n        55,\r\n        6,\r\n        24,\r\n        10,\r\n        89,\r\n        29,\r\n        28,\r\n        73,\r\n        25,\r\n        71,\r\n        26,\r\n        22,\r\n        10,\r\n        95,\r\n        30,\r\n        42,\r\n        20,\r\n        5,\r\n        54,\r\n        114,\r\n        5,\r\n        42,\r\n        36,\r\n        115,\r\n        45,\r\n        72,\r\n        31,\r\n        29,\r\n        79,\r\n        79,\r\n        5,\r\n        44,\r\n        97,\r\n        23,\r\n        35,\r\n        53,\r\n        87,\r\n        62,\r\n        81,\r\n        70,\r\n        49,\r\n        97,\r\n        68,\r\n        108,\r\n        26,\r\n        61,\r\n        29,\r\n        97,\r\n        63,\r\n        45,\r\n        80,\r\n        89,\r\n        38,\r\n        79,\r\n        35,\r\n        70,\r\n        2,\r\n        27,\r\n        57,\r\n        5,\r\n        55,\r\n        21,\r\n        90,\r\n        61,\r\n        52,\r\n        65,\r\n        100,\r\n        49,\r\n        20,\r\n        58,\r\n        4,\r\n        79,\r\n        75,\r\n        81,\r\n        3,\r\n        19,\r\n        76,\r\n        87,\r\n        89,\r\n        44,\r\n        64,\r\n        73,\r\n        23,\r\n        95,\r\n        35,\r\n        99,\r\n        4,\r\n        76,\r\n        42,\r\n        26,\r\n        94,\r\n        39,\r\n        37,\r\n        49,\r\n        90,\r\n        83,\r\n        92,\r\n        100,\r\n        12,\r\n        88,\r\n        37,\r\n        9,\r\n        48,\r\n        13,\r\n        6,\r\n        86,\r\n        8,\r\n        4,\r\n        78,\r\n        64,\r\n        37,\r\n        39,\r\n        19,\r\n        38,\r\n        30,\r\n        27,\r\n        6,\r\n        28,\r\n        83,\r\n        29,\r\n        32,\r\n        9,\r\n        86,\r\n        19,\r\n        20,\r\n        94,\r\n        31,\r\n        13,\r\n        9,\r\n        80,\r\n        2,\r\n        19,\r\n        80,\r\n        68,\r\n        19,\r\n        69,\r\n        49,\r\n        13,\r\n        31,\r\n        70,\r\n        16,\r\n        16,\r\n        93,\r\n        76,\r\n        66,\r\n        92,\r\n        29,\r\n        33,\r\n        17,\r\n        51,\r\n        28,\r\n        52,\r\n        39,\r\n        1,\r\n        22,\r\n        30,\r\n        54,\r\n        126,\r\n        48,\r\n        16,\r\n        90,\r\n        51,\r\n        65,\r\n        35,\r\n        81,\r\n        36,\r\n        64,\r\n        76,\r\n        25,\r\n        88,\r\n        78,\r\n        83,\r\n        4,\r\n        87,\r\n        95,\r\n        26,\r\n        36,\r\n        95,\r\n        69,\r\n        79,\r\n        13,\r\n        54,\r\n        6,\r\n        87,\r\n        9,\r\n        62,\r\n        68,\r\n        22,\r\n        76,\r\n        3,\r\n        30,\r\n        34,\r\n        52,\r\n        11,\r\n        49,\r\n        37,\r\n        33,\r\n        69,\r\n        81,\r\n        78,\r\n        65,\r\n        11,\r\n        29,\r\n        71,\r\n        14,\r\n        27,\r\n        73,\r\n        89,\r\n        53,\r\n        6,\r\n        23,\r\n        73,\r\n        51,\r\n        36,\r\n        91,\r\n        45,\r\n        67,\r\n        79,\r\n        91,\r\n        2,\r\n        61,\r\n        35,\r\n        73,\r\n        44,\r\n        66,\r\n        9,\r\n        19,\r\n        12,\r\n        69,\r\n        93,\r\n        29,\r\n        47,\r\n        89,\r\n        61,\r\n        6,\r\n        28,\r\n        27,\r\n        67,\r\n        35,\r\n        89,\r\n        7,\r\n        62,\r\n        28,\r\n        99,\r\n        24,\r\n        94,\r\n        7,\r\n        71,\r\n        21,\r\n        81,\r\n        69,\r\n        85,\r\n        81,\r\n        71,\r\n        73,\r\n        26,\r\n        88,\r\n        12,\r\n        32,\r\n        85,\r\n        84,\r\n        78,\r\n        28,\r\n        3,\r\n        51,\r\n        65,\r\n        5,\r\n        44,\r\n        39,\r\n        35,\r\n        13,\r\n        83,\r\n        84,\r\n        33,\r\n        77,\r\n        35,\r\n        93,\r\n        9,\r\n        59,\r\n        68,\r\n        76,\r\n        27,\r\n        20,\r\n        19,\r\n        27,\r\n        81,\r\n        59,\r\n        79,\r\n        64,\r\n        73,\r\n        95,\r\n        85,\r\n        77,\r\n        5,\r\n        78,\r\n        75,\r\n        51,\r\n        4,\r\n        24,\r\n        54,\r\n        13,\r\n        33,\r\n        70,\r\n        75,\r\n        11,\r\n        24,\r\n        83,\r\n        3,\r\n        79,\r\n        19,\r\n        97,\r\n        79,\r\n        34,\r\n        95,\r\n        35,\r\n        85,\r\n        33,\r\n        60,\r\n        61,\r\n        85,\r\n        69,\r\n        84,\r\n        96,\r\n        97,\r\n        80,\r\n        69,\r\n        13,\r\n        73,\r\n        37,\r\n        94,\r\n        96,\r\n        75,\r\n        22,\r\n        94,\r\n        60,\r\n        90,\r\n        20,\r\n        6,\r\n        91,\r\n        11,\r\n        75,\r\n        21,\r\n        16,\r\n        93,\r\n        94,\r\n        17,\r\n        97,\r\n        31,\r\n        64,\r\n        75,\r\n        66,\r\n        1,\r\n        58,\r\n        81,\r\n        100,\r\n        49,\r\n        34,\r\n        62,\r\n        59,\r\n        6,\r\n        19,\r\n        100,\r\n        30,\r\n        3,\r\n        71,\r\n        86,\r\n        79,\r\n        57,\r\n        62,\r\n        91,\r\n        29,\r\n        87,\r\n        100,\r\n        94,\r\n        49,\r\n        39,\r\n        28,\r\n        93,\r\n        66,\r\n        5,\r\n        38,\r\n        29,\r\n        27,\r\n        5,\r\n        25,\r\n        54,\r\n        89,\r\n        71,\r\n        92,\r\n        91,\r\n        88,\r\n        51,\r\n        33,\r\n        99,\r\n        72,\r\n        30,\r\n        54,\r\n        89,\r\n        55,\r\n        35,\r\n        54,\r\n        49,\r\n        4,\r\n        84,\r\n        83,\r\n        82,\r\n        68,\r\n        32,\r\n        90,\r\n        21,\r\n        2,\r\n        32,\r\n        53,\r\n        53,\r\n        24,\r\n        33,\r\n        33,\r\n        37,\r\n        64,\r\n        53,\r\n        1,\r\n        78,\r\n        84,\r\n        39,\r\n        19,\r\n        99,\r\n        33,\r\n        7,\r\n        16,\r\n        97,\r\n        99,\r\n        13,\r\n        21,\r\n        70,\r\n        63,\r\n        72,\r\n        104,\r\n        28,\r\n        59,\r\n        66,\r\n        80,\r\n        39,\r\n        22,\r\n        6,\r\n        13,\r\n        85,\r\n        26,\r\n        72,\r\n        20,\r\n        28,\r\n        86,\r\n        70,\r\n        58,\r\n        63,\r\n        100,\r\n        8,\r\n        88,\r\n        90,\r\n        52,\r\n        70,\r\n        85,\r\n        81,\r\n        5,\r\n        21,\r\n        22,\r\n        85,\r\n        32,\r\n        35,\r\n        31,\r\n        78,\r\n        22,\r\n        70,\r\n        84,\r\n        90,\r\n        53,\r\n        8,\r\n        22,\r\n        68,\r\n        83,\r\n        64,\r\n        27,\r\n        30,\r\n        95,\r\n        29,\r\n        96,\r\n        91,\r\n        83,\r\n        64,\r\n        89,\r\n        39,\r\n        78,\r\n        85,\r\n        87,\r\n        23,\r\n        26,\r\n        53,\r\n        3,\r\n        8,\r\n        64,\r\n        96,\r\n        14,\r\n        26,\r\n        67,\r\n        1,\r\n        63,\r\n        69,\r\n        83,\r\n        97,\r\n        55,\r\n        18,\r\n        31,\r\n        52,\r\n        83,\r\n        75,\r\n        94,\r\n        55,\r\n        36,\r\n        62,\r\n        7,\r\n        35,\r\n        68,\r\n        93,\r\n        57,\r\n        3,\r\n        85,\r\n        75,\r\n        99,\r\n        85,\r\n        27,\r\n        1,\r\n        9,\r\n        57,\r\n        62,\r\n        90,\r\n        39,\r\n        34,\r\n        6,\r\n        66,\r\n        37,\r\n        7,\r\n        85,\r\n        71,\r\n        54,\r\n        86,\r\n        69,\r\n        25,\r\n        27,\r\n        99,\r\n        51,\r\n        34,\r\n        16,\r\n        30,\r\n        95,\r\n        70,\r\n        99,\r\n        94,\r\n        62,\r\n        73,\r\n        100,\r\n        62,\r\n        22,\r\n        85,\r\n        49,\r\n        4,\r\n        35,\r\n        73,\r\n        84,\r\n        109,\r\n        71,\r\n        45,\r\n        68,\r\n        14,\r\n        11,\r\n        27,\r\n        38,\r\n        97,\r\n        52,\r\n        36,\r\n        80,\r\n        100,\r\n        62,\r\n        12,\r\n        3,\r\n        16,\r\n        35,\r\n        15,\r\n        32,\r\n        24,\r\n        79,\r\n        55,\r\n        51,\r\n        84,\r\n        26,\r\n        43,\r\n        49,\r\n        7,\r\n        32,\r\n        94,\r\n        70,\r\n        43,\r\n        83,\r\n        96,\r\n        35,\r\n        52,\r\n        94,\r\n        5,\r\n        13,\r\n        66,\r\n        61,\r\n        48,\r\n        1,\r\n        25,\r\n        64,\r\n        64,\r\n        14,\r\n        5,\r\n        91,\r\n        14,\r\n        3,\r\n        85,\r\n        15,\r\n        6,\r\n        4,\r\n        63,\r\n        96,\r\n        5,\r\n        27,\r\n        100,\r\n        94,\r\n        29,\r\n        23,\r\n        101,\r\n        5,\r\n        56,\r\n        90,\r\n        2,\r\n        14,\r\n        31,\r\n        76,\r\n        2,\r\n        100,\r\n        28,\r\n        92,\r\n        97,\r\n        1,\r\n        19,\r\n        33,\r\n        77,\r\n        83,\r\n        52,\r\n        4,\r\n        23,\r\n        8,\r\n        33,\r\n        34,\r\n        16,\r\n        66,\r\n        64,\r\n        31,\r\n        44,\r\n        27,\r\n        80,\r\n        52,\r\n        25,\r\n        38,\r\n        97,\r\n        51,\r\n        89,\r\n        94,\r\n        25,\r\n        25,\r\n        9,\r\n        7,\r\n        12,\r\n        24,\r\n        91,\r\n        26,\r\n        72,\r\n        51,\r\n        34,\r\n        22,\r\n        33,\r\n        97,\r\n        29,\r\n        69,\r\n        21,\r\n        4,\r\n        22,\r\n        89,\r\n        19,\r\n        4,\r\n        44,\r\n        48,\r\n        92,\r\n        62,\r\n        25,\r\n        21,\r\n        67,\r\n        6,\r\n        63,\r\n        96,\r\n        52,\r\n        67,\r\n        92,\r\n        63,\r\n        29,\r\n        95,\r\n        66,\r\n        62,\r\n        51,\r\n        23,\r\n        28,\r\n        95,\r\n        79,\r\n        67,\r\n        52,\r\n        93,\r\n        83,\r\n        35,\r\n        58,\r\n        13,\r\n        51,\r\n        87,\r\n        70,\r\n        79,\r\n        54,\r\n        21,\r\n        96,\r\n        63,\r\n        35,\r\n        2,\r\n        63,\r\n        61,\r\n        73,\r\n        94,\r\n        79,\r\n        19,\r\n        67,\r\n        28,\r\n        60,\r\n        78,\r\n        15,\r\n        29,\r\n        33,\r\n        39,\r\n        71,\r\n        62,\r\n        75,\r\n        33,\r\n        21,\r\n        68,\r\n        79,\r\n        55,\r\n        36,\r\n        52,\r\n        25,\r\n        37,\r\n        12,\r\n        16,\r\n        90,\r\n        31,\r\n        45,\r\n        91,\r\n        9,\r\n        5,\r\n        84,\r\n        94,\r\n        5,\r\n        83,\r\n        30,\r\n        37,\r\n        85,\r\n        33,\r\n        6,\r\n        85,\r\n        30,\r\n        75,\r\n        52,\r\n        33,\r\n        83,\r\n        23,\r\n        94,\r\n        84,\r\n        35,\r\n        60,\r\n        88,\r\n        94,\r\n        25,\r\n        55,\r\n        13,\r\n        38,\r\n        97,\r\n        38,\r\n        23,\r\n        99,\r\n        63,\r\n        100,\r\n        81,\r\n        19,\r\n        37,\r\n        89,\r\n        49,\r\n        7,\r\n        35,\r\n        26,\r\n        86,\r\n        6,\r\n        95,\r\n        2,\r\n        9,\r\n        69,\r\n        97,\r\n        100,\r\n        8,\r\n        34,\r\n        81,\r\n        4,\r\n        69,\r\n        11,\r\n        27,\r\n        37,\r\n        85,\r\n        44,\r\n        38,\r\n        57,\r\n        21,\r\n        65,\r\n        35,\r\n        63,\r\n        69,\r\n        30,\r\n        70,\r\n        55,\r\n        12,\r\n        4,\r\n        16,\r\n        36,\r\n        6,\r\n        33,\r\n        55,\r\n        24,\r\n        100,\r\n        21,\r\n        19,\r\n        94,\r\n        72,\r\n        29,\r\n        94,\r\n        87,\r\n        27,\r\n        38,\r\n        91,\r\n        29,\r\n        51,\r\n        81,\r\n        83,\r\n        94,\r\n        27,\r\n        100,\r\n        95,\r\n        66,\r\n        3,\r\n        90,\r\n        90,\r\n        78,\r\n        3,\r\n        83,\r\n        53,\r\n        73,\r\n        68,\r\n        93,\r\n        31,\r\n        94,\r\n        88,\r\n        39,\r\n        34,\r\n        36,\r\n        71,\r\n        35,\r\n        26,\r\n        66,\r\n        2,\r\n        14,\r\n        69,\r\n        63,\r\n        17,\r\n        64,\r\n        52,\r\n        25,\r\n        61,\r\n        83,\r\n        81,\r\n        81,\r\n        65,\r\n        94,\r\n        96,\r\n        11,\r\n        33,\r\n        2,\r\n        24,\r\n        73,\r\n        34,\r\n        12,\r\n        65,\r\n        36,\r\n        2,\r\n        48,\r\n        43,\r\n        55,\r\n        100,\r\n        17,\r\n        96,\r\n        68,\r\n        52,\r\n        12,\r\n        27,\r\n        54,\r\n        19,\r\n        39,\r\n        69,\r\n        38,\r\n        26,\r\n        33,\r\n        44,\r\n        83,\r\n        54,\r\n        10,\r\n        88,\r\n        80,\r\n        64,\r\n        26,\r\n        68,\r\n        54,\r\n        11,\r\n        76,\r\n        100,\r\n        81,\r\n        57,\r\n        61,\r\n        3,\r\n        14,\r\n        36,\r\n        4,\r\n        32,\r\n        77,\r\n        9,\r\n        11,\r\n        70,\r\n        10,\r\n        84,\r\n        12,\r\n        78,\r\n        83,\r\n        25,\r\n        89,\r\n        64,\r\n        83,\r\n        8,\r\n        66,\r\n        27,\r\n        23,\r\n        10,\r\n        29,\r\n        28,\r\n        53,\r\n        5,\r\n        44,\r\n        97,\r\n        79,\r\n        53,\r\n        85,\r\n        53,\r\n        12,\r\n        11,\r\n        19,\r\n        17,\r\n        33,\r\n        64,\r\n        15,\r\n        85,\r\n        69,\r\n        36,\r\n        31,\r\n        51,\r\n        60,\r\n        22,\r\n        54,\r\n        72,\r\n        54,\r\n        17,\r\n        31,\r\n        57,\r\n        5,\r\n        14,\r\n        60,\r\n        93,\r\n        44,\r\n        92,\r\n        39,\r\n        51,\r\n        34,\r\n        95,\r\n        15,\r\n        32,\r\n        57,\r\n        55,\r\n        34,\r\n        79,\r\n        54,\r\n        6,\r\n        89,\r\n        42,\r\n        17,\r\n        35,\r\n        3,\r\n        51,\r\n        64,\r\n        44,\r\n        13,\r\n        5,\r\n        93,\r\n        75,\r\n        81,\r\n        34,\r\n        47,\r\n        64,\r\n        76,\r\n        95,\r\n        100,\r\n        63,\r\n        58,\r\n        55,\r\n        66,\r\n        59,\r\n        51,\r\n        22,\r\n        12,\r\n        70,\r\n        81,\r\n        49,\r\n        17,\r\n        81,\r\n        1,\r\n        5,\r\n        9,\r\n        85,\r\n        30,\r\n        20,\r\n        15,\r\n        22,\r\n        97,\r\n        80,\r\n        1,\r\n        37,\r\n        75,\r\n        44,\r\n        9,\r\n        51,\r\n        20,\r\n        24,\r\n        62,\r\n        2,\r\n        54,\r\n        89,\r\n        17,\r\n        2,\r\n        70,\r\n        89,\r\n        80,\r\n        19,\r\n        44,\r\n        14,\r\n        29,\r\n        71,\r\n        100,\r\n        20,\r\n        93,\r\n        30,\r\n        44,\r\n        31,\r\n        97,\r\n        83,\r\n        42,\r\n        57,\r\n        13,\r\n        68,\r\n        45,\r\n        94,\r\n        67,\r\n        9,\r\n        37,\r\n        42,\r\n        56,\r\n        99,\r\n        26,\r\n        22,\r\n        62,\r\n        89,\r\n        78,\r\n        35,\r\n        71,\r\n        55,\r\n        33,\r\n        13,\r\n        83,\r\n        30,\r\n        86,\r\n        83,\r\n        5,\r\n        77,\r\n        86,\r\n        8,\r\n        107,\r\n        12,\r\n        69,\r\n        94,\r\n        73,\r\n        31,\r\n        97,\r\n        86,\r\n        26,\r\n        73,\r\n        57,\r\n        37,\r\n        49,\r\n        30,\r\n        88,\r\n        27,\r\n        57,\r\n        13,\r\n        38,\r\n        20,\r\n        39,\r\n        67,\r\n        81,\r\n        81,\r\n        96,\r\n        130,\r\n        94,\r\n        9,\r\n        7,\r\n        85,\r\n        51,\r\n        4,\r\n        33,\r\n        60,\r\n        19,\r\n        35,\r\n        62,\r\n        52,\r\n        4,\r\n        9,\r\n        28,\r\n        36,\r\n        10,\r\n        31,\r\n        22,\r\n        5,\r\n        17,\r\n        63,\r\n        62,\r\n        49,\r\n        2,\r\n        56,\r\n        21,\r\n        49,\r\n        30,\r\n        49,\r\n        33,\r\n        52,\r\n        53,\r\n        95,\r\n        88,\r\n        21,\r\n        60,\r\n        88,\r\n        29,\r\n        67,\r\n        86,\r\n        39,\r\n        68,\r\n        89,\r\n        23,\r\n        25,\r\n        88,\r\n        39,\r\n        36,\r\n        9,\r\n        54,\r\n        2,\r\n        28,\r\n        5,\r\n        10,\r\n        2,\r\n        67,\r\n        75,\r\n        81,\r\n        91,\r\n        97,\r\n        38,\r\n        32,\r\n        94,\r\n        19,\r\n        22,\r\n        51,\r\n        26,\r\n        96,\r\n        12,\r\n        6,\r\n        79,\r\n        62,\r\n        68,\r\n        85,\r\n        34,\r\n        25,\r\n        39,\r\n        14,\r\n        12,\r\n        35,\r\n        83,\r\n        93,\r\n        33,\r\n        112,\r\n        38,\r\n        54,\r\n        94,\r\n        53,\r\n        70,\r\n        97,\r\n        55,\r\n        95,\r\n        32,\r\n        33,\r\n        11,\r\n        85,\r\n        33,\r\n        49,\r\n        76,\r\n        28,\r\n        34,\r\n        73,\r\n        2,\r\n        34,\r\n        86,\r\n        87,\r\n        17,\r\n        43,\r\n        80,\r\n        22,\r\n        33,\r\n        128,\r\n        73,\r\n        61,\r\n        30,\r\n        39,\r\n        26,\r\n        10,\r\n        60,\r\n        20,\r\n        22,\r\n        2,\r\n        6,\r\n        87,\r\n        62,\r\n        67,\r\n        56,\r\n        19,\r\n        76,\r\n        92,\r\n        54,\r\n        69,\r\n        25,\r\n        71,\r\n        55,\r\n        27,\r\n        37,\r\n        6,\r\n        81,\r\n        10,\r\n        10,\r\n        100,\r\n        87,\r\n        43,\r\n        70,\r\n        88,\r\n        86,\r\n        119,\r\n        32,\r\n        64,\r\n        92,\r\n        54,\r\n        90,\r\n        30,\r\n        39,\r\n        89,\r\n        7,\r\n        76,\r\n        94,\r\n        81,\r\n        21,\r\n        27,\r\n        80,\r\n        29,\r\n        9,\r\n        2,\r\n        28,\r\n        86,\r\n        99,\r\n        27,\r\n        72,\r\n        75,\r\n        68,\r\n        29,\r\n        90,\r\n        13,\r\n        47,\r\n        8,\r\n        57,\r\n        51,\r\n        6,\r\n        75,\r\n        27,\r\n        95,\r\n        73,\r\n        13,\r\n        86,\r\n        78,\r\n        77,\r\n        93,\r\n        2,\r\n        20,\r\n        80,\r\n        38,\r\n        38,\r\n        75,\r\n        55,\r\n        85,\r\n        100,\r\n        86,\r\n        70,\r\n        76,\r\n        83,\r\n        91,\r\n        99,\r\n        16,\r\n        60,\r\n        75,\r\n        51,\r\n        73,\r\n        35,\r\n        9,\r\n        5,\r\n        113,\r\n        100,\r\n        73,\r\n        32,\r\n        94,\r\n        13,\r\n        22,\r\n        51,\r\n        78,\r\n        5,\r\n        5,\r\n        6,\r\n        62,\r\n        5,\r\n        95,\r\n        5,\r\n        81,\r\n        8,\r\n        58,\r\n        21,\r\n        52,\r\n        85,\r\n        14,\r\n        97,\r\n        25,\r\n        26,\r\n        7,\r\n        39,\r\n        95,\r\n        76,\r\n        83,\r\n        22,\r\n        67,\r\n        17,\r\n        48,\r\n        88,\r\n        100,\r\n        30,\r\n        27,\r\n        70,\r\n        87,\r\n        33,\r\n        25,\r\n        54,\r\n        8,\r\n        60,\r\n        8,\r\n        7,\r\n        72,\r\n        78,\r\n        65,\r\n        3,\r\n        100,\r\n        36,\r\n        76,\r\n        85,\r\n        13,\r\n        7,\r\n        19,\r\n        70,\r\n        26,\r\n        16,\r\n        78,\r\n        94,\r\n        47,\r\n        87,\r\n        16,\r\n        59,\r\n        2,\r\n        78,\r\n        56,\r\n        6,\r\n        55,\r\n        44,\r\n        65,\r\n        31,\r\n        67,\r\n        49,\r\n        37,\r\n        53,\r\n        11,\r\n        14,\r\n        31,\r\n        62,\r\n        9,\r\n        88,\r\n        58,\r\n        72,\r\n        37,\r\n        9,\r\n        27,\r\n        72,\r\n        19,\r\n        39,\r\n        52,\r\n        70,\r\n        24,\r\n        56,\r\n        34,\r\n        57,\r\n        64,\r\n        34,\r\n        13,\r\n        73,\r\n        53,\r\n        84,\r\n        3,\r\n        55,\r\n        55,\r\n        45,\r\n        45,\r\n        33,\r\n        63,\r\n        73,\r\n        99,\r\n        99,\r\n        44,\r\n        94,\r\n        23,\r\n        62,\r\n        81,\r\n        19,\r\n        33,\r\n        29,\r\n        5,\r\n        27,\r\n        39,\r\n        58,\r\n        39,\r\n        12,\r\n        36,\r\n        16,\r\n        87,\r\n        53,\r\n        5,\r\n        86,\r\n        13,\r\n        70,\r\n        81,\r\n        16,\r\n        2,\r\n        56,\r\n        64,\r\n        22,\r\n        52,\r\n        90,\r\n        22,\r\n        57,\r\n        85,\r\n        13,\r\n        71,\r\n        34,\r\n        55,\r\n        47,\r\n        91,\r\n        76,\r\n        9,\r\n        22,\r\n        57,\r\n        85,\r\n        95,\r\n        32,\r\n        32,\r\n        5,\r\n        71,\r\n        89,\r\n        43,\r\n        63,\r\n        11,\r\n        1,\r\n        18,\r\n        29,\r\n        95,\r\n        13,\r\n        32,\r\n        68,\r\n        71,\r\n        49,\r\n        39,\r\n        48,\r\n        27,\r\n        75,\r\n        39,\r\n        49,\r\n        96,\r\n        68,\r\n        47,\r\n        49,\r\n        68,\r\n        68,\r\n        88,\r\n        70,\r\n        87,\r\n        63,\r\n        68,\r\n        19,\r\n        22,\r\n        28,\r\n        60,\r\n        21,\r\n        70,\r\n        54,\r\n        16,\r\n        67,\r\n        131,\r\n        18,\r\n        11,\r\n        85,\r\n        83,\r\n        89,\r\n        52,\r\n        18,\r\n        26,\r\n        45,\r\n        3,\r\n        29,\r\n        20,\r\n        7,\r\n        58,\r\n        4,\r\n        34,\r\n        1,\r\n        30,\r\n        63,\r\n        86,\r\n        38,\r\n        14,\r\n        76,\r\n        26,\r\n        85,\r\n        78,\r\n        36,\r\n        17,\r\n        88,\r\n        83,\r\n        5,\r\n        34,\r\n        5,\r\n        84,\r\n        34,\r\n        32,\r\n        57,\r\n        7,\r\n        8,\r\n        62,\r\n        36,\r\n        79,\r\n        2,\r\n        62,\r\n        48,\r\n        35,\r\n        3,\r\n        4,\r\n        53,\r\n        72,\r\n        6,\r\n        85,\r\n        49,\r\n        71,\r\n        15,\r\n        60,\r\n        36,\r\n        7,\r\n        99,\r\n        67,\r\n        56,\r\n        44,\r\n        5,\r\n        96,\r\n        26,\r\n        30,\r\n        62,\r\n        57,\r\n        90,\r\n        52,\r\n        58,\r\n        96,\r\n        5,\r\n        31,\r\n        21,\r\n        54,\r\n        7,\r\n        123,\r\n        83,\r\n        99,\r\n        69,\r\n        62,\r\n        54,\r\n        99,\r\n        60,\r\n        86,\r\n        68,\r\n        7,\r\n        31,\r\n        5,\r\n        52,\r\n        33,\r\n        49,\r\n        7,\r\n        87,\r\n        26,\r\n        70,\r\n        83,\r\n        5,\r\n        95,\r\n        42,\r\n        127,\r\n        71,\r\n        30,\r\n        10,\r\n        89,\r\n        48,\r\n        64,\r\n        33,\r\n        11,\r\n        90,\r\n        13,\r\n        9,\r\n        69,\r\n        36,\r\n        36,\r\n        73,\r\n        53,\r\n        13,\r\n        11,\r\n        3,\r\n        2,\r\n        27,\r\n        76,\r\n        67,\r\n        99,\r\n        22,\r\n        5,\r\n        28,\r\n        91,\r\n        52,\r\n        96,\r\n        65,\r\n        68,\r\n        30,\r\n        19,\r\n        75,\r\n        7,\r\n        17,\r\n        4,\r\n        7,\r\n        90,\r\n        33,\r\n        55,\r\n        86,\r\n        23,\r\n        9,\r\n        19,\r\n        52,\r\n        67,\r\n        23,\r\n        16,\r\n        16,\r\n        52,\r\n        79,\r\n        90,\r\n        14,\r\n        71,\r\n        58,\r\n        99,\r\n        100,\r\n        44,\r\n        19,\r\n        81,\r\n        39,\r\n        100,\r\n        88,\r\n        37,\r\n        33,\r\n        5,\r\n        13,\r\n        89,\r\n        59,\r\n        25,\r\n        4,\r\n        75,\r\n        39,\r\n        49,\r\n        83,\r\n        21,\r\n        1,\r\n        44,\r\n        56,\r\n        17,\r\n        100,\r\n        8,\r\n        75,\r\n        4,\r\n        51,\r\n        6,\r\n        87,\r\n        12,\r\n        93,\r\n        90,\r\n        67,\r\n        77,\r\n        100,\r\n        39,\r\n        5,\r\n        30,\r\n        7,\r\n        85,\r\n        53,\r\n        71,\r\n        94,\r\n        31,\r\n        83,\r\n        42,\r\n        32,\r\n        48,\r\n        63,\r\n        70,\r\n        96,\r\n        51,\r\n        71,\r\n        99,\r\n        35,\r\n        100,\r\n        38,\r\n        96,\r\n        71,\r\n        14,\r\n        69,\r\n        85,\r\n        88,\r\n        95,\r\n        29,\r\n        68,\r\n        22,\r\n        23,\r\n        53,\r\n        49,\r\n        63,\r\n        26,\r\n        12,\r\n        48,\r\n        31,\r\n        21,\r\n        33,\r\n        64,\r\n        32,\r\n        59,\r\n        15,\r\n        53,\r\n        52,\r\n        62,\r\n        1,\r\n        55,\r\n        22,\r\n        73,\r\n        47,\r\n        16,\r\n        19,\r\n        61,\r\n        90,\r\n        81,\r\n        65,\r\n        59,\r\n        96,\r\n        86,\r\n        38,\r\n        90,\r\n        84,\r\n        86,\r\n        81,\r\n        27,\r\n        73,\r\n        73,\r\n        66,\r\n        52,\r\n        59,\r\n        76,\r\n        26,\r\n        26,\r\n        86,\r\n        70,\r\n        62,\r\n        87,\r\n        87,\r\n        77,\r\n        16,\r\n        39,\r\n        66,\r\n        39,\r\n        90,\r\n        57,\r\n        44,\r\n        66,\r\n        68,\r\n        8,\r\n        59,\r\n        83,\r\n        16,\r\n        94,\r\n        39,\r\n        19,\r\n        63,\r\n        76,\r\n        69,\r\n        11,\r\n        34,\r\n        35,\r\n        1,\r\n        9,\r\n        83,\r\n        35,\r\n        13,\r\n        68,\r\n        78,\r\n        68,\r\n        88,\r\n        71,\r\n        35,\r\n        9,\r\n        6,\r\n        94,\r\n        78,\r\n        64,\r\n        78,\r\n        88,\r\n        19,\r\n        21,\r\n        34,\r\n        24,\r\n        44,\r\n        57,\r\n        57,\r\n        35,\r\n        100,\r\n        100,\r\n        100,\r\n        47,\r\n        22,\r\n        84,\r\n        39,\r\n        64,\r\n        47,\r\n        28,\r\n        76,\r\n        75,\r\n        17,\r\n        6,\r\n        88,\r\n        88,\r\n        62,\r\n        38,\r\n        78,\r\n        24,\r\n        32,\r\n        84,\r\n        26,\r\n        37,\r\n        44,\r\n        71,\r\n        28,\r\n        69,\r\n        33,\r\n        64,\r\n        9,\r\n        34,\r\n        42,\r\n        90,\r\n        30,\r\n        34,\r\n        91,\r\n        60,\r\n        32,\r\n        60,\r\n        90,\r\n        55,\r\n        29,\r\n        37,\r\n        88,\r\n        73,\r\n        14,\r\n        49,\r\n        86,\r\n        100,\r\n        26,\r\n        19,\r\n        26,\r\n        66,\r\n        95,\r\n        7,\r\n        51,\r\n        26,\r\n        9,\r\n        88,\r\n        38,\r\n        77,\r\n        95,\r\n        5,\r\n        91,\r\n        87,\r\n        62,\r\n        88,\r\n        5,\r\n        91,\r\n        53,\r\n        22,\r\n        12,\r\n        89,\r\n        100,\r\n        90,\r\n        52,\r\n        32,\r\n        73,\r\n        36,\r\n        34,\r\n        90,\r\n        21,\r\n        96,\r\n        66,\r\n        70,\r\n        49,\r\n        34,\r\n        13,\r\n        15,\r\n        95,\r\n        13,\r\n        95,\r\n        92,\r\n        5,\r\n        15,\r\n        67,\r\n        65,\r\n        25,\r\n        88,\r\n        81,\r\n        15,\r\n        90,\r\n        93,\r\n        27,\r\n        32,\r\n        86,\r\n        29,\r\n        76,\r\n        83,\r\n        69,\r\n        22,\r\n        7,\r\n        45,\r\n        69,\r\n        59,\r\n        31,\r\n        70,\r\n        9,\r\n        34,\r\n        55,\r\n        57,\r\n        5,\r\n        57,\r\n        75,\r\n        68,\r\n        11,\r\n        7,\r\n        13,\r\n        33,\r\n        89,\r\n        38,\r\n        22,\r\n        83,\r\n        14,\r\n        22,\r\n        69,\r\n        76,\r\n        54,\r\n        24,\r\n        31,\r\n        99,\r\n        34,\r\n        11,\r\n        29,\r\n        95,\r\n        86,\r\n        8,\r\n        2,\r\n        4,\r\n        67,\r\n        26,\r\n        34,\r\n        38,\r\n        94,\r\n        7,\r\n        49,\r\n        87,\r\n        13,\r\n        16,\r\n        81,\r\n        34,\r\n        57,\r\n        28,\r\n        87,\r\n        26,\r\n        52,\r\n        49,\r\n        79,\r\n        81,\r\n        100,\r\n        71,\r\n        95,\r\n        11,\r\n        35,\r\n        26,\r\n        44,\r\n        91,\r\n        66,\r\n        67,\r\n        29,\r\n        33,\r\n        63,\r\n        52,\r\n        94,\r\n        15,\r\n        79,\r\n        88,\r\n        52,\r\n        1,\r\n        96,\r\n        52,\r\n        21,\r\n        11,\r\n        54,\r\n        87,\r\n        27,\r\n        68,\r\n        70,\r\n        33,\r\n        55,\r\n        68,\r\n        31,\r\n        1,\r\n        96,\r\n        38,\r\n        78,\r\n        21,\r\n        35,\r\n        35,\r\n        36,\r\n        71,\r\n        52,\r\n        57,\r\n        62,\r\n        35,\r\n        12,\r\n        21,\r\n        69,\r\n        25,\r\n        85,\r\n        90,\r\n        42,\r\n        57,\r\n        34,\r\n        33,\r\n        58,\r\n        64,\r\n        52,\r\n        71,\r\n        33,\r\n        69,\r\n        23,\r\n        97,\r\n        76,\r\n        65,\r\n        21,\r\n        55,\r\n        27,\r\n        19,\r\n        85,\r\n        27,\r\n        64,\r\n        27,\r\n        55,\r\n        18,\r\n        16,\r\n        49,\r\n        92,\r\n        70,\r\n        17,\r\n        60,\r\n        9,\r\n        8,\r\n        29,\r\n        96,\r\n        53,\r\n        25,\r\n        79,\r\n        1,\r\n        30,\r\n        95,\r\n        67,\r\n        32,\r\n        79,\r\n        9,\r\n        73,\r\n        11,\r\n        53,\r\n        81,\r\n        96,\r\n        15,\r\n        8,\r\n        23,\r\n        66,\r\n        90,\r\n        7,\r\n        75,\r\n        19,\r\n        78,\r\n        8,\r\n        37,\r\n        13,\r\n        11,\r\n        43,\r\n        11,\r\n        33,\r\n        85,\r\n        30,\r\n        8,\r\n        99,\r\n        73,\r\n        76,\r\n        55,\r\n        52,\r\n        15,\r\n        48,\r\n        37,\r\n        83,\r\n        92,\r\n        16,\r\n        21,\r\n        6,\r\n        57,\r\n        73,\r\n        83,\r\n        94,\r\n        24,\r\n        35,\r\n        15,\r\n        69,\r\n        15,\r\n        57,\r\n        90,\r\n        70,\r\n        39,\r\n        29,\r\n        69,\r\n        81,\r\n        24,\r\n        9,\r\n        80,\r\n        78,\r\n        88,\r\n        52,\r\n        58,\r\n        7,\r\n        62,\r\n        86,\r\n        69,\r\n        78,\r\n        21,\r\n        68,\r\n        31,\r\n        39,\r\n        76,\r\n        100,\r\n        39,\r\n        54,\r\n        52,\r\n        60,\r\n        76,\r\n        44,\r\n        53,\r\n        31,\r\n        91,\r\n        52,\r\n        63,\r\n        99,\r\n        79,\r\n        94,\r\n        3,\r\n        24,\r\n        30,\r\n        76,\r\n        91,\r\n        80,\r\n        63,\r\n        91,\r\n        52,\r\n        95,\r\n        19,\r\n        87,\r\n        27,\r\n        21,\r\n        13,\r\n        35,\r\n        73,\r\n        62,\r\n        67,\r\n        7,\r\n        30,\r\n        53,\r\n        55,\r\n        64,\r\n        56,\r\n        1,\r\n        34,\r\n        1,\r\n        36,\r\n        11,\r\n        63,\r\n        85,\r\n        9,\r\n        73,\r\n        93,\r\n        96,\r\n        54,\r\n        93,\r\n        17,\r\n        26,\r\n        90,\r\n        27,\r\n        85,\r\n        94,\r\n        3,\r\n        64,\r\n        37,\r\n        20,\r\n        76,\r\n        55,\r\n        27,\r\n        43,\r\n        76,\r\n        16,\r\n        66,\r\n        67,\r\n        90,\r\n        7,\r\n        100,\r\n        26,\r\n        54,\r\n        75,\r\n        61,\r\n        81,\r\n        49,\r\n        88,\r\n        6,\r\n        69,\r\n        64,\r\n        88,\r\n        28,\r\n        24,\r\n        10,\r\n        49,\r\n        45,\r\n        54,\r\n        33,\r\n        94,\r\n        2,\r\n        29,\r\n        35,\r\n        85,\r\n        81,\r\n        91,\r\n        65,\r\n        48,\r\n        43,\r\n        93,\r\n        78,\r\n        9,\r\n        11,\r\n        68,\r\n        27,\r\n        22,\r\n        80,\r\n        21,\r\n        10,\r\n        16,\r\n        64,\r\n        73,\r\n        64,\r\n        16,\r\n        25,\r\n        90,\r\n        22,\r\n        16,\r\n        68,\r\n        9,\r\n        45,\r\n        7,\r\n        18,\r\n        90,\r\n        53,\r\n        55,\r\n        22,\r\n        22,\r\n        66,\r\n        21,\r\n        65,\r\n        19,\r\n        1,\r\n        57,\r\n        3,\r\n        35,\r\n        27,\r\n        20,\r\n        93,\r\n        20,\r\n        24,\r\n        96,\r\n        75,\r\n        42,\r\n        18,\r\n        17,\r\n        100,\r\n        95,\r\n        47,\r\n        43,\r\n        24,\r\n        49,\r\n        43,\r\n        55,\r\n        28,\r\n        23,\r\n        86,\r\n        54,\r\n        45,\r\n        30,\r\n        86,\r\n        64,\r\n        95,\r\n        66,\r\n        73,\r\n        10,\r\n        30,\r\n        30,\r\n        53,\r\n        20,\r\n        37,\r\n        14,\r\n        66,\r\n        29,\r\n        52,\r\n        70,\r\n        29,\r\n        93,\r\n        100,\r\n        62,\r\n        87,\r\n        35,\r\n        66,\r\n        76,\r\n        53,\r\n        88,\r\n        73,\r\n        17,\r\n        77,\r\n        63,\r\n        96,\r\n        95,\r\n        49,\r\n        68,\r\n        3,\r\n        88,\r\n        54,\r\n        88,\r\n        60,\r\n        62,\r\n        33,\r\n        21,\r\n        14,\r\n        86,\r\n        13,\r\n        8,\r\n        63,\r\n        12,\r\n        44,\r\n        44,\r\n        70,\r\n        13,\r\n        35,\r\n        80,\r\n        64,\r\n        1,\r\n        20,\r\n        64,\r\n        85,\r\n        21,\r\n        16,\r\n        29,\r\n        28,\r\n        9,\r\n        16,\r\n        21,\r\n        8,\r\n        9,\r\n        39,\r\n        4,\r\n        20,\r\n        68,\r\n        54,\r\n        62,\r\n        5,\r\n        13,\r\n        3,\r\n        57,\r\n        37,\r\n        1,\r\n        76,\r\n        81,\r\n        75,\r\n        39,\r\n        3,\r\n        83,\r\n        121,\r\n        6,\r\n        6,\r\n        66,\r\n        93,\r\n        32,\r\n        24,\r\n        80,\r\n        80,\r\n        17,\r\n        17,\r\n        4,\r\n        78,\r\n        94,\r\n        64,\r\n        57,\r\n        19,\r\n        122,\r\n        83,\r\n        4,\r\n        80,\r\n        60,\r\n        86,\r\n        67,\r\n        35,\r\n        7,\r\n        89,\r\n        99,\r\n        87,\r\n        47,\r\n        1,\r\n        43,\r\n        16,\r\n        83,\r\n        33,\r\n        12,\r\n        61,\r\n        65,\r\n        22,\r\n        68,\r\n        1,\r\n        23,\r\n        29,\r\n        26,\r\n        95,\r\n        60,\r\n        91,\r\n        25,\r\n        47,\r\n        64,\r\n        32,\r\n        87,\r\n        66,\r\n        26,\r\n        31,\r\n        52,\r\n        37,\r\n        92,\r\n        83,\r\n        64,\r\n        25,\r\n        10,\r\n        116,\r\n        91,\r\n        69,\r\n        9,\r\n        55,\r\n        76,\r\n        90,\r\n        29,\r\n        13,\r\n        22,\r\n        16,\r\n        69,\r\n        69,\r\n        61,\r\n        32,\r\n        34,\r\n        61,\r\n        13,\r\n        5,\r\n        13,\r\n        90,\r\n        77,\r\n        83,\r\n        100,\r\n        67,\r\n        67,\r\n        13,\r\n        28,\r\n        28,\r\n        64,\r\n        89,\r\n        93,\r\n        7,\r\n        16\r\n    ];\r\n\r\n    // [owner] -> amount they minted\r\n    mapping(address => uint8) public mintCount;\r\n\r\n    // [owner] -> nonce\r\n    mapping(address => uint16) public ownerNonces;\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                                  CONSTRUCTION                                                  */\r\n    /* ============================================================================================================== */\r\n    constructor() ERC1155(\"https://metadata.mondomegabits.com/{id}\") {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(PAUSER_ROLE, msg.sender);\r\n        _grantRole(WITHDRAWER_ROLE, msg.sender);\r\n        _grantRole(WITHDRAWER_ROLE, 0xe87F4610c48E17ee0EE0c72Fe280450CA660399B);\r\n\r\n        _setDefaultRoyalty(address(this), 1000);\r\n    }\r\n\r\n    bool private hasGiftedTokens = false;\r\n\r\n    function giveGiftTokens(uint256[] memory ids, uint256[] memory counts)\r\n        external\r\n        nonReentrant\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        require(hasGiftedTokens == false, \"Already gave tokens\");\r\n        hasGiftedTokens = true;\r\n\r\n        totalMinted += 80;\r\n\r\n        // Gifted cards\r\n        _mint(0x690892db2FA439A703115D36E4205088E0C55D1a, 43, 1, \"\");\r\n        _mint(0xC2f158234da1956623A0D0E4ceAAcC764A609B81, 61, 1, \"\");\r\n        _mint(0x06056Dcdc6471439e31e878492f594B6F0D8F9D0, 52, 1, \"\");\r\n        _mint(0x1be4AB962fbCA955de52450BB78B46052eac0a62, 62, 1, \"\");\r\n        _mint(0x3cB85f3C1E18f1ec13B425669Cb8F6b7086f1D0C, 50, 1, \"\");\r\n        _mint(0xcbc808e97dCc154B6e8df4c44f05d9C22011BeD1, 18, 1, \"\");\r\n        _mint(0x0Faa2615BaC776207034620Bdb87D8F3d032Ac90, 13, 1, \"\");\r\n        _mint(0x229600cfd8E158A42527E09513BfF42fdFd09Fa8, 94, 1, \"\");\r\n        _mint(0xA4dD7f4A4BAf918D97ED921Dfd918FD2aeF7e451, 30, 1, \"\");\r\n        _mint(0x6D8FB06f9233352CBF4F2274F22b13DD3B37015A, 91, 1, \"\");\r\n        _mint(0xbCB5E08E412Fa901973C638E59eFDA1EcB9Ef354, 48, 1, \"\");\r\n        _mint(0x8A78cEef8752a7E90c27C4aEAcE13f3C4Af56e33, 91, 1, \"\");\r\n        _mint(0x7C4a7d85623CdF7bBf67ceaf2b862E3028Fe9aCb, 36, 1, \"\");\r\n        _mint(0xe873e624431024e46de133987498d45ba9E8A123, 89, 1, \"\");\r\n        _mint(0xbf67e713ddEf50496c6F27C41Eaeecee3A9FA063, 90, 1, \"\");\r\n        _mint(0x395ff02870F6C146E2b50512b9755fECb57E83C0, 56, 1, \"\");\r\n        _mint(0x85dC88dABE0fb9988190B5B228c9Aa5804070864, 69, 1, \"\");\r\n        _mint(0xAE17e8F2aC7C0B8c3a77d29fF60E73Af1A5Bf089, 43, 1, \"\");\r\n        _mint(0x19355237CdB7b76bC166E05F6338F270B084ecFc, 76, 1, \"\");\r\n        _mint(0x524Aa222370690cDc108a2A54d9054dC4C31146c, 72, 1, \"\");\r\n        _mint(0xb7397e25a2e167941dEd07e605953EE620756a22, 39, 1, \"\");\r\n        _mint(0xd4D3A6EACF401Fa50033114A6952220D6f60B648, 37, 1, \"\");\r\n        _mint(0x0e6114613A5e28F628f41Da0Ec204Ca505956be8, 56, 1, \"\");\r\n        _mint(0x81Ed8BC0C08b6871738b7514C36d347B2cC172E8, 42, 1, \"\");\r\n        _mint(0xba1a95c258290Ae6A0cbDAbfA8fB6e471a48032F, 12, 1, \"\");\r\n        _mint(0xEe34a1CcE595270AD3Ecc4D50D34dF978954584c, 20, 1, \"\");\r\n        _mint(0x448A1BF01d6B7cc9D2c8cD1d05d246bcd840517F, 20, 1, \"\");\r\n        _mint(0x386Fa68BeF515dab808358935418e37Fa1748C32, 7, 1, \"\");\r\n        _mint(0x30Da874E35Fbd3a1580ed1E9eFaeEe2E180b4aCD, 90, 1, \"\");\r\n        _mint(0xbCB5E08E412Fa901973C638E59eFDA1EcB9Ef354, 87, 1, \"\");\r\n        _mint(0xAE17e8F2aC7C0B8c3a77d29fF60E73Af1A5Bf089, 62, 1, \"\");\r\n        _mint(0xcAB58f3BacDBe6F8F6e41Ff322ce97b2196024f4, 53, 1, \"\");\r\n        _mint(0x43D588cb4411e83e860c6166763112e1ccF76EA9, 56, 1, \"\");\r\n        _mint(0x24Ef7784caC2c628Eef21b98bE9f70044b5e3Be4, 31, 1, \"\");\r\n        _mint(0xCAC3DDD55551D0ec3176FFb7347C8c290dcb866F, 60, 1, \"\");\r\n        _mint(0x229600cfd8E158A42527E09513BfF42fdFd09Fa8, 51, 1, \"\");\r\n        _mint(0x240224AC042e7F0Eb7A16AF0a49907061c9894C8, 65, 1, \"\");\r\n        _mint(0xDc5CbDF0Ff309b49A332dbFa3264b775c2cAfd09, 85, 1, \"\");\r\n        _mint(0xB3407C29463951902aeF4a6a87265Ff0263b5689, 99, 1, \"\");\r\n        _mint(0xe1677D385bC7c62486ED53c7B6CdE63FE9EE1F2d, 85, 1, \"\");\r\n        _mint(0x1a6763326dE2837048E72190d9842F38ee0C491B, 30, 1, \"\");\r\n        _mint(0xc665AB82Bae93188D39bF6Aa0c2Cf2ca66Fc66b4, 18, 1, \"\");\r\n        _mint(0xDF017621ebdFe522dBA6F08A4a1db6E791216ecF, 38, 1, \"\");\r\n        _mint(0xaA608298eA894013eC76e5D963752bEf6d097a85, 56, 1, \"\");\r\n        _mint(0xaA608298eA894013eC76e5D963752bEf6d097a85, 52, 1, \"\");\r\n        _mintBatch(0xd3DEB100f6Be210F29F087b707F29ffa93F7e50A, ids, counts, \"\");\r\n    }\r\n\r\n    /* ========================================================================================== */\r\n    /*                                          METADATA                                          */\r\n    /* ========================================================================================== */\r\n    function contractURI() external pure returns (string memory) {\r\n        return \"https://metadata.mondomegabits.com/contract\";\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override(ERC1155, ERC2981, AccessControlEnumerable)\r\n        returns (bool)\r\n    {\r\n        return super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                         PSEUDORANDOM NUMBER GENERATION                                         */\r\n    /* ============================================================================================================== */\r\n\r\n    // Generates a random number from 0 to uint256.max\r\n    function rand() private view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));\r\n    }\r\n\r\n    function randomMintIdx() private view returns (uint16) {\r\n        return uint16(rand() % (tokenPool.length));\r\n    }\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                                    ROYALTIES                                                   */\r\n    /* ============================================================================================================== */\r\n    uint256 public constant ROYALTY_DIVISOR = 20; // 5% royalties: 1/.05 = 20\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                                     MINTING                                                    */\r\n    /* ============================================================================================================== */\r\n    event CardMinted(uint256 id, address owner);\r\n\r\n    /* ----------------------------------- START STANDARD MINT ---------------------------------- */\r\n\r\n    function verifyLeaf(bytes32[] calldata proof, bytes32 leaf) internal view returns (bool) {\r\n        return MerkleProof.verifyCalldata(proof, root, leaf);\r\n    }\r\n\r\n    function mint(uint8 count, bytes32[] calldata proof) external payable returns (uint256[] memory ids) {\r\n        /* ====================================================================================== */\r\n        /*                                         CHECKS                                         */\r\n        /* ====================================================================================== */\r\n        require(mintingStatus == MintingStatus.STANDARD);\r\n\r\n        require(msg.value == (.25 ether * count), \"Incorrect price.\");\r\n        require(tx.origin == msg.sender && !Address.isContract(msg.sender), \"Contracts can't mint.\");\r\n        require(count > 0, \"Must mint at least 1\");\r\n        require(totalMinted + count <= TOTAL_COPIES_EVER, \"Cannot mint more than total copies ever\");\r\n        require(mintCount[msg.sender] + count <= maxMintCountPerAddress, \"Above max mintable cards.\");\r\n        if (whitelistEnabled) {\r\n            require(verifyLeaf(proof, bytes32(keccak256(abi.encodePacked(msg.sender)))), \"Not whitelisted\");\r\n        }\r\n\r\n        /* ====================================================================================== */\r\n        /*                                         EFFECTS                                        */\r\n        /* ====================================================================================== */\r\n        ids = new uint256[](count);\r\n\r\n        for (uint8 i = 0; i < count; i++) {\r\n            uint16 tokenPoolIdx = randomMintIdx();\r\n            uint16 tokenPoolLastIdx = uint16(tokenPool.length) - 1;\r\n            uint16 id = uint16(tokenPool[tokenPoolIdx]);\r\n\r\n            // Pop and swap:\r\n            if (tokenPoolIdx == tokenPoolLastIdx) {\r\n                tokenPool.pop();\r\n            } else {\r\n                tokenPool[tokenPoolIdx] = tokenPool[tokenPoolLastIdx];\r\n                tokenPool.pop();\r\n            }\r\n\r\n            ids[i] = id;\r\n            mintCount[msg.sender]++;\r\n\r\n            totalMinted++;\r\n\r\n            if (totalMinted == TOTAL_COPIES_EVER) {\r\n                mintingStatus = MintingStatus.DONE;\r\n            }\r\n\r\n            emit CardMinted(id, msg.sender);\r\n        }\r\n\r\n        /* ====================================================================================== */\r\n        /*                                      INTERACTIONS                                      */\r\n        /* ====================================================================================== */\r\n\r\n        if (count == 1) {\r\n            _mint(msg.sender, ids[0], 1, \"\");\r\n        } else {\r\n            uint256[] memory amounts = new uint256[](count);\r\n            for (uint8 i = 0; i < count; i++) {\r\n                amounts[i] = 1;\r\n            }\r\n\r\n            _mintBatch(msg.sender, ids, amounts, \"\");\r\n        }\r\n\r\n        return ids;\r\n    }\r\n\r\n    /* ------------------------------------ END STANDARD MINT ----------------------------------- */\r\n\r\n    /* ----------------------------------- START ADVANCED MINT ---------------------------------- */\r\n    function advancedMint(\r\n        uint256[] calldata _ids,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _nonce,\r\n        bytes32 _messageHash,\r\n        bytes calldata _signature\r\n    ) external payable returns (uint256[] calldata) {\r\n        /* ====================================================================================== */\r\n        /*                                         CHECKS                                         */\r\n        /* ====================================================================================== */\r\n        require(mintingStatus == MintingStatus.ADVANCED);\r\n\r\n        uint256 count = _ids.length;\r\n        require(count > 0, \"Must mint at least 1\");\r\n        require(msg.value == (.25 ether * count), \"Incorrect price.\");\r\n        require(totalMinted + count <= TOTAL_COPIES_EVER, \"Cannot mint more than total copies ever\");\r\n        require(mintCount[msg.sender] + count <= maxMintCountPerAddress, \"Above max mintable cards.\");\r\n\r\n        require(tx.origin == msg.sender && !Address.isContract(msg.sender), \"Contracts can't mint.\");\r\n        require(block.timestamp < _expiryTimestamp, \"Expired timestamp, try again in a couple minutes.\");\r\n        require(ownerNonces[msg.sender] < _nonce, \"Nonce already used.\");\r\n\r\n        /* ---------------------------------- SIGNATURE CHECKS ---------------------------------- */\r\n        bytes32 ethSignedMessageHash = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                keccak256(abi.encode(_ids, _expiryTimestamp, msg.sender, _nonce))\r\n            )\r\n        );\r\n        require(_messageHash == ethSignedMessageHash, \"Invalid message hash\");\r\n        require(ECDSA.recover(ethSignedMessageHash, _signature) == signer, \"Invalid signature\");\r\n\r\n        /* ====================================================================================== */\r\n        /*                                         EFFECTS                                        */\r\n        /* ====================================================================================== */\r\n        ownerNonces[msg.sender] = uint16(_nonce);\r\n\r\n        for (uint8 i = 0; i < count; ++i) {\r\n            mintCount[msg.sender]++;\r\n\r\n            totalMinted++;\r\n\r\n            if (totalMinted >= TOTAL_COPIES_EVER) {\r\n                mintingStatus = MintingStatus.DONE;\r\n            }\r\n\r\n            emit CardMinted(_ids[i], msg.sender);\r\n        }\r\n\r\n        /* ====================================================================================== */\r\n        /*                                      INTERACTIONS                                      */\r\n        /* ====================================================================================== */\r\n        if (count == 1) {\r\n            _mint(msg.sender, _ids[0], 1, \"\");\r\n        } else {\r\n            uint256[] memory amounts = new uint256[](count);\r\n            for (uint8 i = 0; i < count; i++) {\r\n                amounts[i] = 1;\r\n            }\r\n\r\n            _mintBatch(msg.sender, _ids, amounts, \"\");\r\n        }\r\n\r\n        return _ids;\r\n    }\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                                   MARKETPLACE                                                  */\r\n    /* ============================================================================================================== */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual override(ERC1155) whenNotPaused {\r\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n        if (from != address(0)) {\r\n            uint16 length = uint16(ids.length);\r\n            for (uint16 i = 0; i < length; i++) {\r\n                uint16 amountOwned = uint16(balanceOf(from, ids[i]));\r\n                uint16 amountSelling = uint16(_mondoMarketplace.getForSaleCount(ids[i], from));\r\n                uint16 amountLeftAfterSales = amountOwned - amountSelling;\r\n                uint16 amountToCancel = uint16(amounts[i]) - amountLeftAfterSales;\r\n\r\n                if (amountToCancel > 0) {\r\n                    _mondoMarketplace.cancelSaleToTransfer(from, ids[i], uint8(amountToCancel));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isApprovedForAll(address account, address operator) public view virtual override(ERC1155) returns (bool) {\r\n        if (operator == address(_mondoMarketplace)) {\r\n            return true;\r\n        } else {\r\n            return super.isApprovedForAll(account, operator);\r\n        }\r\n    }\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                          ADMINISTRATIVE FUNCTIONALITY                                          */\r\n    /* ============================================================================================================== */\r\n\r\n    /* --------------------------------------- WITHDRAWING -------------------------------------- */\r\n    function withdraw() external onlyRole(WITHDRAWER_ROLE) {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = msg.sender.call{value: balance}(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n\r\n    function grantWithdrawerRole(address newWithdrawer) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(newWithdrawer != address(0), \"Must provide a valid address\");\r\n        require(newWithdrawer != msg.sender, \"Cannot grant yourself withdrawer role\");\r\n        require(!hasRole(WITHDRAWER_ROLE, newWithdrawer), \"Already has withdrawer role\");\r\n        grantRole(WITHDRAWER_ROLE, newWithdrawer);\r\n    }\r\n\r\n    function removeWithdrawerRole(address oldWithdrawer) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(oldWithdrawer != address(0), \"Must provide a valid address\");\r\n        require(oldWithdrawer != msg.sender, \"Cannot remove yourself withdrawer role\");\r\n        require(hasRole(WITHDRAWER_ROLE, oldWithdrawer), \"Does not have withdrawer role\");\r\n        revokeRole(WITHDRAWER_ROLE, oldWithdrawer);\r\n    }\r\n\r\n    /* --------------------------------------- MARKETPLACE -------------------------------------- */\r\n\r\n    function setMondoMarketplace(address mondoMarketplaceAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _mondoMarketplace = MondoMarketplace(mondoMarketplaceAddress);\r\n    }\r\n\r\n    /* ------------------------------------ MINTING SETTINGS ------------------------------------ */\r\n\r\n    function setWhitelist(bool enabled) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        whitelistEnabled = enabled;\r\n    }\r\n\r\n    function changeMerkleRoot(bytes32 newRoot) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        root = newRoot;\r\n    }\r\n\r\n    function changeSigner(address newSigner) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        signer = newSigner;\r\n    }\r\n\r\n    function setMintingStatus(MintingStatus status) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        mintingStatus = status;\r\n    }\r\n\r\n    function changeMaxMintCountPerAddress(uint8 newMaxMintCountPerAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        maxMintCountPerAddress = newMaxMintCountPerAddress;\r\n    }\r\n\r\n    /* ----------------------------------------- PAUSING ---------------------------------------- */\r\n\r\n    function pause() external onlyRole(PAUSER_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyRole(PAUSER_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    function grantPauserRole(address newPauser) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(newPauser != address(0), \"Must provide a valid address\");\r\n        require(newPauser != msg.sender, \"Cannot grant yourself pauser role\");\r\n        require(!hasRole(PAUSER_ROLE, newPauser), \"Already has pauser role\");\r\n        grantRole(PAUSER_ROLE, newPauser);\r\n    }\r\n\r\n    function removePauserRole(address oldPauser) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(oldPauser != address(0), \"Must provide a valid address\");\r\n        require(oldPauser != msg.sender, \"Cannot remove yourself from the pauser role\");\r\n        require(hasRole(PAUSER_ROLE, oldPauser), \"Does not have pauser role\");\r\n        revokeRole(PAUSER_ROLE, oldPauser);\r\n    }\r\n}\r\n"
    },
    "contracts/mondo-marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol\";\r\nimport \"./mondo-megabits.sol\";\r\n\r\ncontract MondoMarketplace is\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    PullPaymentUpgradeable,\r\n    UUPSUpgradeable\r\n{\r\n    MondoTokens _mondoTokensContract;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() {\r\n        _disableInitializers();\r\n    }\r\n\r\n    function initialize(address mondoTokensAddress) public payable initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        __PullPayment_init();\r\n        __UUPSUpgradeable_init();\r\n\r\n        _mondoTokensContract = MondoTokens(mondoTokensAddress);\r\n    }\r\n\r\n    /* ----------------------------------------- EVENTS ----------------------------------------- */\r\n    event TokenForSale(uint256 id, address owner, uint256 price);\r\n    event TokenSaleCancelled(uint256 id, address owner, uint256 price);\r\n    event TokenSold(uint256 id, address soldBy, uint256 price, address soldTo);\r\n\r\n    /* ========================================================================================== */\r\n    /*                                      SALE INFORMATION                                      */\r\n    /* ========================================================================================== */\r\n\r\n    // [tokenID][owner] -> uint256[] Prices\r\n    mapping(uint256 => mapping(address => uint256[])) private _forSalePrices;\r\n\r\n    // Returns the length of the array of prices for a given tokenID and owner.\r\n    function getForSaleCount(uint256 tokenID, address owner) external view returns (uint256) {\r\n        return _forSalePrices[tokenID][owner].length;\r\n    }\r\n\r\n    /* ========================================================================================== */\r\n    /*                                  MARKETPLACE FUNCTIONALITY                                 */\r\n    /* ========================================================================================== */\r\n\r\n    function putUpForSale(uint256 id, uint256 price) external {\r\n        require(price > 0, \"Price isn't >0\");\r\n        require(\r\n            _mondoTokensContract.balanceOf(_msgSender(), id) > _forSalePrices[id][_msgSender()].length,\r\n            \"None to sell\"\r\n        );\r\n\r\n        _forSalePrices[id][_msgSender()].push(price);\r\n\r\n        emit TokenForSale(id, _msgSender(), price);\r\n    }\r\n\r\n    function cancelSaleToTransfer(\r\n        address owner,\r\n        uint256 id,\r\n        uint8 count\r\n    ) external {\r\n        require(_msgSender() == address(_mondoTokensContract));\r\n\r\n        uint8 amountForSale = uint8(_forSalePrices[id][owner].length);\r\n        require(count > 0 && count <= amountForSale, \"Invalid amount to cancel\");\r\n\r\n        for (uint8 i = 0; i < count; i++) {\r\n            uint256 price = _forSalePrices[id][owner][_forSalePrices[id][owner].length - 1];\r\n            emit TokenSaleCancelled(id, owner, price);\r\n        }\r\n    }\r\n\r\n    function cancelSale(uint256 id, uint256 price) external {\r\n        require(removeFromSale(id, _msgSender(), price));\r\n        emit TokenSaleCancelled(id, _msgSender(), price);\r\n    }\r\n\r\n    function removeFromSale(\r\n        uint256 id,\r\n        address owner,\r\n        uint256 price\r\n    ) private returns (bool) {\r\n        uint8 salesLength = uint8(_forSalePrices[id][owner].length);\r\n        require(salesLength > 0, \"None for sale!\");\r\n\r\n        if (salesLength == 1) {\r\n            if (price == _forSalePrices[id][owner][0]) {\r\n                _forSalePrices[id][owner].pop();\r\n                return true;\r\n            } else {\r\n                revert(\"Price doesn't match\");\r\n            }\r\n        } else {\r\n            uint8 priceIdx;\r\n            bool priceIdxFound = false;\r\n            for (uint8 i = 0; i < salesLength; ++i) {\r\n                if (_forSalePrices[id][owner][i] == price) {\r\n                    priceIdxFound = true;\r\n                    priceIdx = i;\r\n                    break;\r\n                }\r\n            }\r\n            require(priceIdxFound, \"Price not found\");\r\n\r\n            uint16 lastIdx = salesLength - 1;\r\n\r\n            // Pop and swap:\r\n            if (priceIdx == lastIdx) {\r\n                _forSalePrices[id][owner].pop();\r\n            } else {\r\n                _forSalePrices[id][owner][priceIdx] = _forSalePrices[id][owner][lastIdx];\r\n                _forSalePrices[id][owner].pop();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function buy(uint256 id, address owner) external payable nonReentrant {\r\n        uint256 price = (_mondoTokensContract.ROYALTY_DIVISOR() * msg.value) /\r\n            (_mondoTokensContract.ROYALTY_DIVISOR() + 1); // price without royalties\r\n        require(price > 0);\r\n\r\n        uint8 salesLength = uint8(_forSalePrices[id][owner].length);\r\n        require(salesLength > 0, \"None for sale!\");\r\n\r\n        removeFromSale(id, owner, price);\r\n\r\n        emit TokenSold(id, owner, price, _msgSender());\r\n\r\n        // pay the seller\r\n        _asyncTransfer(owner, price);\r\n\r\n        // transfer token to the buyer\r\n        _mondoTokensContract.safeTransferFrom(owner, _msgSender(), id, 1, \"\");\r\n    }\r\n\r\n    /* ============================================================================================================== */\r\n    /*                                          ADMINISTRATIVE FUNCTIONALITY                                          */\r\n    /* ============================================================================================================== */\r\n\r\n    // For transferring all Eth to the owner.\r\n    function withdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        (bool success, ) = _msgSender().call{value: balance}(\"\");\r\n        require(success, \"Failed to send Ether\");\r\n    }\r\n\r\n    function _authorizeUpgrade(address newImplementation) internal virtual override(UUPSUpgradeable) onlyOwner {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PullPaymentUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/PullPayment.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/escrow/EscrowUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Simple implementation of a\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n * strategy, where the paying contract doesn't interact directly with the\n * receiver account, which must withdraw its payments itself.\n *\n * Pull-payments are often considered the best practice when it comes to sending\n * Ether, security-wise. It prevents recipients from blocking execution, and\n * eliminates reentrancy concerns.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n * instead of Solidity's `transfer` function. Payees can query their due\n * payments with {payments}, and retrieve them with {withdrawPayments}.\n *\n * @custom:storage-size 51\n */\nabstract contract PullPaymentUpgradeable is Initializable {\n    EscrowUpgradeable private _escrow;\n\n    function __PullPayment_init() internal onlyInitializing {\n        __PullPayment_init_unchained();\n    }\n\n    function __PullPayment_init_unchained() internal onlyInitializing {\n        _escrow = new EscrowUpgradeable();\n        _escrow.initialize();\n    }\n\n    /**\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n     *\n     * Note that _any_ account can call this function, not just the `payee`.\n     * This means that contracts unaware of the `PullPayment` protocol can still\n     * receive funds this way, by having a separate account call\n     * {withdrawPayments}.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee Whose payments will be withdrawn.\n     *\n     * Causes the `escrow` to emit a {Withdrawn} event.\n     */\n    function withdrawPayments(address payable payee) public virtual {\n        _escrow.withdraw(payee);\n    }\n\n    /**\n     * @dev Returns the payments owed to an address.\n     * @param dest The creditor's address.\n     */\n    function payments(address dest) public view returns (uint256) {\n        return _escrow.depositsOf(dest);\n    }\n\n    /**\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\n     * there is no danger of them being spent before withdrawal.\n     *\n     * @param dest The destination address of the funds.\n     * @param amount The amount to transfer.\n     *\n     * Causes the `escrow` to emit a {Deposited} event.\n     */\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\n        _escrow.deposit{value: amount}(dest);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/escrow/EscrowUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/escrow/Escrow.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../access/OwnableUpgradeable.sol\";\nimport \"../AddressUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @title Escrow\n * @dev Base escrow contract, holds funds designated for a payee until they\n * withdraw them.\n *\n * Intended usage: This contract (and derived escrow contracts) should be a\n * standalone contract, that only interacts with the contract that instantiated\n * it. That way, it is guaranteed that all Ether will be handled according to\n * the `Escrow` rules, and there is no need to check for payable functions or\n * transfers in the inheritance tree. The contract that uses the escrow as its\n * payment method should be its owner, and provide public methods redirecting\n * to the escrow's deposit and withdraw.\n */\ncontract EscrowUpgradeable is Initializable, OwnableUpgradeable {\n    function __Escrow_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Escrow_init_unchained() internal onlyInitializing {\n    }\n    function initialize() public virtual initializer {\n        __Escrow_init();\n    }\n    using AddressUpgradeable for address payable;\n\n    event Deposited(address indexed payee, uint256 weiAmount);\n    event Withdrawn(address indexed payee, uint256 weiAmount);\n\n    mapping(address => uint256) private _deposits;\n\n    function depositsOf(address payee) public view returns (uint256) {\n        return _deposits[payee];\n    }\n\n    /**\n     * @dev Stores the sent amount as credit to be withdrawn.\n     * @param payee The destination address of the funds.\n     *\n     * Emits a {Deposited} event.\n     */\n    function deposit(address payee) public payable virtual onlyOwner {\n        uint256 amount = msg.value;\n        _deposits[payee] += amount;\n        emit Deposited(payee, amount);\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     * @param payee The address whose funds will be withdrawn and transferred to.\n     *\n     * Emits a {Withdrawn} event.\n     */\n    function withdraw(address payable payee) public virtual onlyOwner {\n        uint256 payment = _deposits[payee];\n\n        _deposits[payee] = 0;\n\n        payee.sendValue(payment);\n\n        emit Withdrawn(payee, payment);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 4000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}