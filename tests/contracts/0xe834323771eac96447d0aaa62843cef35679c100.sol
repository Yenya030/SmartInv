{{
  "language": "Solidity",
  "sources": {
    "contracts/Intermediary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IpenguPins.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/*\n                         %@@@@*  @@@  *#####\n                   &@@@@@@@@ ,@@@@@@@@@  #########\n              ,@@@@@@@@  #                  %. @@@@@@@\n           &@@@@@@@@@@ @@@@@@@@@@@ @@@@@@@@@@@@ .@@@@@@@@\n         @@@@@@@@@@@. @@@@@@@@@@@@ @@@@@@@@@@@@@  @@@@@@@@@@\n       ####       @  @@@@@@@@@@@@@ @@@@@@@@@@@@@@.       .&@@@\n     ########. @@@@@@@@@@ @@@@@%#///#%@@@@@@ @@@@@@@@@@@  @@@@@.\n    ########  @@@@@@@@@@  @@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@. @@@@@@\n   ######### @@@@@@@@@@@ &@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@  @@@@@@\n  %@@(       ,@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@,      &@\n  @@@# @@@@@@@@@@@@ ,#####*                 . ,@@@@  %@@@@@@@@@@@@@@/\n  @@@  @@@@@@@@@@@@ ##############  @@@@@@@@@@@@ ,@@@@.   @@@&  @@@@@@..#\n  @@@ &@@@@@@@@@@@@ ##############  @@@@@@@@@@ @@@@@@@@@@@&   @@@@@@@@ #####\n  @@@ @@@@@@@@@@@@@ ##############  @@@@@@@@ *@@@@@@@@@@  @@@. @@@@@@ ########\n  @@        %@@@@@@ ##############  @@@@@@@ @@@@@@@@@@@ @@@@@@@ @@@&@ ####### /\n  &&@@@@@  @@@@@@@@@@&*                    @@@@@@@@@@# @@@@@@@  &&&&&&& ##  @@@\n  &&&&&@@  @@@@@@@@@@@@* @@@@@@@@@@@@@@@@* @@@    .@% @@@@@@ &&&&&&&&&&& @@@@@@\n  @&&&&&&  @@@@@@@@@@@@* @@@@@@@@@@@@@@@@ @@@@@@@@@@ @@@    &&&&&&&&&&&&& @@@@@\n      &&&  &@@@@@@@@@@@* @@@@@@@@@@@@@@@@ @@@@@@@@@ @@@@@@    . #&&&&&&&& @@@@/\n   (((  &&       /@@@@@* @@@@@@@@@@@@@@@,.@@@@@@@@@ @@@@@& &&&&& &&&&&&     @@@\n   (((* &&&&&&&&&/ @@@@@@@@@@@@@@@ @@@@@ .   .@@@@@ @@@@@  &&&&& &&&&&&&& @@@@@\n   (((( &&&&&&&&&/ &&&@@@@@@@@@@@@ @@@@@  ######### %@@@@  &&&&& &&&&&&&& @@@@@\n     (( &&&&&&&&&/ &&&&&&&@@@@@@@@ @@@@@% ######### @@@@@%          &&&&& @@@.\n           .&&&&&/ &&&&&&&&&&&&&&@ @@@@@@ ######### @@@@@@\n                                           ######## @@@@@@\n*/\n\n/**\n * @title Intermediary contract for dropping pengupins\n * @author Pudgy Penguins Penguineering Team (davidbailey.eth, Lorenzo)\n */\ncontract Intermediary is Ownable {\n    // ========================================\n    //     EVENT & ERROR DEFINITIONS\n    // ========================================\n\n    error AddressAlreadySet();\n    error InvalidAddress();\n    error NotAnAdmin();\n    error MaximumAllowanceExceeded();\n\n    // ========================================\n    //     VARIABLE DEFINITIONS\n    // ========================================\n\n    bool private pengupinsAddressSet = false;\n    IpenguPins public pengupins;\n\n    mapping(address => mapping(uint256 => uint256)) public adminAllowance;\n\n    // ========================================\n    //    CONSTRUCTOR AND CORE FUNCTIONS\n    // ========================================\n\n    constructor() {}\n\n    /**\n     * @notice Drops airdrop tokens to a list of holders\n     * @param _id token ID to be received\n     * @param _holders list of addresses to receive tokens\n     * @dev only nominated admins or contract owner can call this function\n     */\n    function airdropPenguPin(\n        uint256 _id,\n        address[] calldata _holders\n    ) external {\n        if (msg.sender != owner()) {\n            if (adminAllowance[msg.sender][_id] < _holders.length)\n                revert MaximumAllowanceExceeded();\n\n            adminAllowance[msg.sender][_id] -= _holders.length;\n        }\n        pengupins.airdropPenguPin(_id, _holders);\n    }\n\n    // ========================================\n    //     OWNER FUNCTIONS\n    // ========================================\n\n    // Function that allows the contract owner to nominate an admin\n    /**\n     * @notice Adds an admin to the contract\n     * @param _newAdmin address of the admin to be added\n     * @param _tokenId token ID that the admin can airdrop\n     * @param _amount amount of tokens that the admin can airdrop\n     */\n    function addAdminForTokenId(\n        address _newAdmin,\n        uint256 _tokenId,\n        uint256 _amount\n    ) external onlyOwner {\n        if (_newAdmin == address(0)) revert InvalidAddress();\n        adminAllowance[_newAdmin][_tokenId] = _amount;\n    }\n\n    /**\n     * @notice Removes an admin from the contract\n     * @param _oldAdmin address of the admin to be removed\n     * @param _tokenId token ID that the admin can airdrop\n     */\n    function removeAdminForTokenId(\n        address _oldAdmin,\n        uint256 _tokenId\n    ) external onlyOwner {\n        if (adminAllowance[_oldAdmin][_tokenId] == 0) revert NotAnAdmin();\n        adminAllowance[_oldAdmin][_tokenId] = 0;\n    }\n\n    /**\n     * @notice Burns a token with the given ID from holder's address\n     * @param _holder address of the token holder\n     * @param _id token ID to be burned\n     */\n    function adminBurnPenguPin(\n        address _holder,\n        uint256 _id\n    ) external onlyOwner {\n        pengupins.adminBurnPenguPin(_holder, _id);\n    }\n\n    /**\n     * @notice Pauses the pengupin contract\n     */\n    function pause() public onlyOwner {\n        pengupins.pause();\n    }\n\n    /**\n     * @notice Unpauses the pengupin contract\n     */\n    function unpause() public onlyOwner {\n        pengupins.unpause();\n    }\n\n    /**\n     * @notice Sets the address of the pengupins contract\n     * @param _pengupinsAddress address of the pengupins contract\n     */\n    function setPengupinsAddress(address _pengupinsAddress) external onlyOwner {\n        if (pengupinsAddressSet) revert AddressAlreadySet();\n        if (_pengupinsAddress == address(0)) revert InvalidAddress();\n        pengupinsAddressSet = true;\n        pengupins = IpenguPins(_pengupinsAddress);\n    }\n\n    /**\n     * @notice Transfers ownership of the pengupins contract\n     * @param _newOwner address of the new owner\n     */\n    function transferOwnershipOfPengupins(\n        address _newOwner\n    ) external onlyOwner {\n        if (_newOwner == address(0)) revert InvalidAddress();\n        pengupins.transferOwnership(_newOwner);\n    }\n\n    /**\n     * @notice Sets the base URI of the pengupins contract\n     * @param _base base URI of the pengupins contract\n     * @param _suffix suffix URI of the pengupins contract\n     */\n    function setURI(\n        string calldata _base,\n        string calldata _suffix\n    ) external onlyOwner {\n        pengupins.setURI(_base, _suffix);\n    }\n\n    /**\n     * @notice Updates the version of the signature that the pengupin contract uses\n     * @param _newVersion new version of the signature\n     */\n    function updateSignVersion(string calldata _newVersion) external onlyOwner {\n        pengupins.updateSignVersion(_newVersion);\n    }\n\n    /**\n     * @notice Updates the wallet that the pengupin contract uses to verify signatures\n     * @param _newSignerWallet address of the new wallet\n     */\n    function updateSignerWallet(address _newSignerWallet) external onlyOwner {\n        pengupins.updateSignerWallet(_newSignerWallet);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/IpenguPins.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IpenguPins {\n    function airdropPenguPin(uint256 id, address[] calldata holders) external;\n\n    function claimPenguPinToWallet(\n        address receiverWallet,\n        uint256 id,\n        uint256 nonce,\n        bytes memory signature\n    ) external;\n\n    function burnTruePengu(uint256 id) external;\n\n    function adminBurnPenguPin(address holder, uint256 id) external;\n\n    function uri(uint256 id) external view returns (string memory);\n\n    function setURI(string calldata _base, string calldata _suffix) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    function claimPaused() external view;\n\n    function balanceOf(\n        address account,\n        uint256 id\n    ) external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function renounceOwnership() external;\n\n    function transferOwnership(address newOwner) external;\n\n    function updateSignVersion(string calldata signVersion_) external;\n\n    function updateSignerWallet(address signerWallet_) external;\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}