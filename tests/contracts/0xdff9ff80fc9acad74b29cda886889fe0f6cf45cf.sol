{{
  "language": "Solidity",
  "sources": {
    "contracts/TokenikV1StakingRNIK.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >0.8.0;\r\n\r\nimport './interfaces/ITokenikV1StakingRNIK.sol';\r\nimport './interfaces/ITokenikV1Rewards.sol';\r\n\r\ncontract TokenikV1StakingRNIK is ITokenikV1StakingRNIK {\r\n    \r\n    struct stake{\r\n        uint256 amount;\r\n        uint256 startDate;\r\n    }\r\n    \r\n    address public override rewards; //rewards contract\r\n    uint256 public override stakingApy; //staking apy 2 decimals\r\n    address public override apySetter; //address of the apy setter\r\n    uint256 public override minStakeDuration; //minimum stake duration (3888000 - 45 days)\r\n    bool public override stakingOpen; //pause new stakes\r\n    uint256 public override stakingCloseDate; //staking deadline\r\n    uint256 public override totalStaked; // total RNIK staked\r\n\r\n    mapping(address => stake) public userStakes;\r\n\r\n    modifier onlySetter() {\r\n        require(msg.sender == apySetter, 'TokenikV1: Forbidden');\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        apySetter = msg.sender;\r\n        stakingApy = 2000; //20%\r\n        minStakeDuration = 3888000; // 45 days\r\n    }\r\n\r\n\r\n    function stakeRNIK(uint256 _amount) external override{\r\n        require(stakingOpen, 'TokenikV1: Staking is disabled');\r\n        require(_amount > 0, 'TokenikV1: Invalid amount');\r\n\r\n        bool useRewards = ITokenikV1Rewards(rewards).removeReward(msg.sender, _amount);\r\n        require(useRewards, 'TokenikV1: Incorrect amount');\r\n        \r\n        uint256 pendingInterest = getInterestInternal(msg.sender);\r\n        uint256 addAmount = pendingInterest + _amount;\r\n        userStakes[msg.sender].amount += addAmount;\r\n        userStakes[msg.sender].startDate = block.timestamp;\r\n        totalStaked += addAmount;\r\n\r\n        emit StakeRNIK(msg.sender, _amount);\r\n        \r\n    }\r\n\r\n    function unstakeRNIK() external override{\r\n        \r\n        require(block.timestamp >= (userStakes[msg.sender].startDate + minStakeDuration), 'TokenikV1: cannot unstake early');\r\n        require(userStakes[msg.sender].amount > 0,'TokenikV1: nothing to unstake');\r\n\r\n        uint256 earnedInterest = getInterestInternal(msg.sender);\r\n\r\n        uint256 totalAmount = userStakes[msg.sender].amount + earnedInterest;\r\n        totalStaked = totalStaked - userStakes[msg.sender].amount;\r\n        userStakes[msg.sender].amount = 0;\r\n\r\n        ITokenikV1Rewards(rewards).addReward(msg.sender, totalAmount);\r\n\r\n        emit UnstakeRNIK(msg.sender, totalAmount);\r\n    }\r\n\r\n    function getInterestInternal(address _account) internal view returns(uint256){\r\n        \r\n        uint256 lastDay = block.timestamp;\r\n\r\n        if(stakingCloseDate !=0 ){\r\n            if(block.timestamp > stakingCloseDate){\r\n                lastDay = stakingCloseDate;\r\n            }\r\n        }\r\n\r\n        uint256 daysStaked = (lastDay - userStakes[_account].startDate) / 86400;\r\n\r\n        if(daysStaked == 0) return(0);\r\n\r\n        uint256 interestEarned = userStakes[_account].amount * stakingApy * daysStaked / 3650000;\r\n\r\n        return interestEarned;\r\n    }\r\n\r\n    function getInterest(address _account) external view override returns(uint256){\r\n        \r\n        return getInterestInternal(_account);\r\n    }\r\n\r\n    function getUserStake(address _account) external view override returns(uint256, uint256) {\r\n \r\n        return (userStakes[_account].amount, userStakes[_account].startDate);\r\n    }\r\n    \r\n    function setRewardsAddress(address _address) external override onlySetter {\r\n        require(_address != address(0), 'TokenikV1: cannot set empty address');\r\n        rewards = _address;\r\n    }\r\n\r\n    function setApySetter(address _address) external override onlySetter {\r\n        require(_address != address(0), 'TokenikV1: cannot set empty address');\r\n        apySetter = _address;\r\n    }\r\n\r\n    function setStakingApy(uint256 _stakingApy) external override onlySetter {\r\n        require(_stakingApy > stakingApy,'TokenikV1: APY can only be increased');\r\n        stakingApy = _stakingApy;\r\n    }\r\n\r\n    function setMinStakeDuration(uint256 _minStakeDuration) external override onlySetter {\r\n        minStakeDuration = _minStakeDuration;\r\n    }\r\n\r\n    function setStakingOpen(bool _stakingOpen) external override onlySetter {\r\n        stakingOpen = _stakingOpen;\r\n    }\r\n\r\n    function setStakingCloseDate(uint256 _stakingCloseDate) external override onlySetter {\r\n        stakingCloseDate = _stakingCloseDate;\r\n    }\r\n\r\n}"
    },
    "contracts/interfaces/ITokenikV1Rewards.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >0.8.0;\r\n\r\ninterface ITokenikV1Rewards {\r\n\r\n    function addReward(address _user, uint256 _amount) external;\r\n    function addSwapReward(address _user, uint256 _amount, address _token) external;\r\n    function removeReward(address _user, uint256 _amount) external returns(bool);\r\n    function claimAirdrop(address _ref) external;\r\n    function getRewards(address _address) external view returns(uint256);\r\n    function getClaimedAirdrop(address _address) external view returns(bool);\r\n    function getApprovedCaller(address _address) external view returns(bool);\r\n    function setCallerSetter(address _callerSetter) external;\r\n    function setApprovedCaller(address _caller, bool _approved) external;\r\n    function setAddRewardPaused(bool  _paused) external;\r\n    function setRemoveRewardPaused(bool  _paused) external;\r\n    function setAirdropAmounts(uint256 _amount, uint256 _refAmount) external;\r\n    function enableAirdrop(bool  _enabled) external;\r\n    function addLiquidityReward(address _user, address _token0, address _token1, uint256 _amount0, uint256 _amount1) external;\r\n    function removeSwapReward(address _user, uint256 _amount, address _token) external returns(bool);\r\n    function getApprovedToken(address _address) external view returns(bool);\r\n    function getApprovedTokens(address _token0, address _token1) external view returns(bool,bool);\r\n    function setApprovedTokens(address _token, bool _approved) external;\r\n}"
    },
    "contracts/interfaces/ITokenikV1StakingRNIK.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >0.8.0;\r\n\r\ninterface ITokenikV1StakingRNIK {\r\n\r\n    event StakeRNIK(address indexed user, uint);\r\n    event UnstakeRNIK(address indexed user, uint);\r\n\r\n    function rewards() external view returns(address);\r\n    function stakingApy() external view returns(uint256);\r\n    function apySetter() external view returns(address);\r\n    function minStakeDuration() external view returns(uint256);\r\n    function stakingOpen() external view returns(bool);\r\n    function stakingCloseDate() external view returns(uint256);\r\n    function totalStaked() external view returns(uint256);\r\n    function stakeRNIK(uint256 _amount) external;\r\n    function unstakeRNIK() external;\r\n    function getInterest(address _account) external view returns(uint256);\r\n    function getUserStake(address _account) external view returns(uint256, uint256); \r\n    function setRewardsAddress(address _address) external;\r\n    function setApySetter(address _address) external;\r\n    function setStakingApy(uint256 _stakingApy) external;\r\n    function setMinStakeDuration(uint256 _minStakeDuration) external;\r\n    function setStakingOpen(bool _stakingOpen) external;\r\n    function setStakingCloseDate(uint256 _stakingCloseDate) external;\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}