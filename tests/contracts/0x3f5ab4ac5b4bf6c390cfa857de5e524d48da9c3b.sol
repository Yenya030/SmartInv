{{
  "language": "Solidity",
  "sources": {
    "src/libraries/SimpleSerialize.sol": {
      "content": "pragma solidity 0.8.16;\n\nstruct BeaconBlockHeader {\n    uint64 slot;\n    uint64 proposerIndex;\n    bytes32 parentRoot;\n    bytes32 stateRoot;\n    bytes32 bodyRoot;\n}\n\nlibrary SSZ {\n    uint256 internal constant HISTORICAL_ROOTS_LIMIT = 16777216;\n    uint256 internal constant SLOTS_PER_HISTORICAL_ROOT = 8192;\n\n    function toLittleEndian(uint256 v) internal pure returns (bytes32) {\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8)\n            | ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16)\n            | ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32)\n            | ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\n        v = ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64)\n            | ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\n        v = (v >> 128) | (v << 128);\n        return bytes32(v);\n    }\n\n    function restoreMerkleRoot(bytes32 leaf, uint256 index, bytes32[] memory branch)\n        internal\n        pure\n        returns (bytes32)\n    {\n        require(2 ** (branch.length + 1) > index);\n        bytes32 value = leaf;\n        uint256 i = 0;\n        while (index != 1) {\n            if (index % 2 == 1) {\n                value = sha256(bytes.concat(branch[i], value));\n            } else {\n                value = sha256(bytes.concat(value, branch[i]));\n            }\n            index /= 2;\n            i++;\n        }\n        return value;\n    }\n\n    function isValidMerkleBranch(bytes32 leaf, uint256 index, bytes32[] memory branch, bytes32 root)\n        internal\n        pure\n        returns (bool)\n    {\n        bytes32 restoredMerkleRoot = restoreMerkleRoot(leaf, index, branch);\n        return root == restoredMerkleRoot;\n    }\n\n    function sszBeaconBlockHeader(BeaconBlockHeader memory header)\n        internal\n        pure\n        returns (bytes32)\n    {\n        bytes32 left = sha256(\n            bytes.concat(\n                sha256(\n                    bytes.concat(toLittleEndian(header.slot), toLittleEndian(header.proposerIndex))\n                ),\n                sha256(bytes.concat(header.parentRoot, header.stateRoot))\n            )\n        );\n        bytes32 right = sha256(\n            bytes.concat(\n                sha256(bytes.concat(header.bodyRoot, bytes32(0))),\n                sha256(bytes.concat(bytes32(0), bytes32(0)))\n            )\n        );\n\n        return sha256(bytes.concat(left, right));\n    }\n\n    function computeDomain(bytes4 forkVersion, bytes32 genesisValidatorsRoot)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return bytes32(uint256(0x07 << 248))\n            | (sha256(abi.encode(forkVersion, genesisValidatorsRoot)) >> 32);\n    }\n\n    function verifyReceiptsRoot(\n        bytes32 receiptsRoot,\n        bytes32[] memory receiptsRootProof,\n        bytes32 headerRoot,\n        uint64 srcSlot,\n        uint64 txSlot\n    ) internal pure returns (bool) {\n        uint256 index;\n        if (srcSlot == txSlot) {\n            index = 8 + 3;\n            index = index * 2 ** 9 + 387;\n        } else if (srcSlot - txSlot <= SLOTS_PER_HISTORICAL_ROOT) {\n            index = 8 + 3;\n            index = index * 2 ** 5 + 6;\n            index = index * SLOTS_PER_HISTORICAL_ROOT + txSlot % SLOTS_PER_HISTORICAL_ROOT;\n            index = index * 2 ** 9 + 387;\n        } else if (txSlot < srcSlot) {\n            index = 8 + 3;\n            index = index * 2 ** 5 + 7;\n            index = index * 2 + 0;\n            index = index * HISTORICAL_ROOTS_LIMIT + txSlot / SLOTS_PER_HISTORICAL_ROOT;\n            index = index * 2 + 1;\n            index = index * SLOTS_PER_HISTORICAL_ROOT + txSlot % SLOTS_PER_HISTORICAL_ROOT;\n            index = index * 2 ** 9 + 387;\n        } else {\n            revert(\"TrustlessAMB: invalid target slot\");\n        }\n        return isValidMerkleBranch(receiptsRoot, index, receiptsRootProof, headerRoot);\n    }\n}\n"
    },
    "src/lightclient/LightClient.sol": {
      "content": "pragma solidity 0.8.16;\n\nimport {SSZ} from \"src/libraries/SimpleSerialize.sol\";\n\nimport {ILightClient} from \"src/lightclient/interfaces/ILightClient.sol\";\nimport {StepVerifier} from \"src/lightclient/StepVerifier.sol\";\nimport {RotateVerifier} from \"src/lightclient/RotateVerifier.sol\";\n\nstruct Groth16Proof {\n    uint256[2] a;\n    uint256[2][2] b;\n    uint256[2] c;\n}\n\nstruct LightClientStep {\n    uint256 attestedSlot;\n    uint256 finalizedSlot;\n    uint256 participation;\n    bytes32 finalizedHeaderRoot;\n    bytes32 executionStateRoot;\n    Groth16Proof proof;\n}\n\nstruct LightClientRotate {\n    LightClientStep step;\n    bytes32 syncCommitteeSSZ;\n    bytes32 syncCommitteePoseidon;\n    Groth16Proof proof;\n}\n\n/// @title Light Client\n/// @author Succinct Labs\n/// @notice Uses Ethereum 2's Sync Committee Protocol to keep up-to-date with block headers from a\n///         Beacon Chain. This is done in a gas-efficient manner using zero-knowledge proofs.\ncontract LightClient is ILightClient, StepVerifier, RotateVerifier {\n    bytes32 public immutable GENESIS_VALIDATORS_ROOT;\n    uint256 public immutable GENESIS_TIME;\n    uint256 public immutable SECONDS_PER_SLOT;\n    uint256 public immutable SLOTS_PER_PERIOD;\n    uint32 public immutable SOURCE_CHAIN_ID;\n    uint16 public immutable FINALITY_THRESHOLD;\n\n    uint256 internal constant MIN_SYNC_COMMITTEE_PARTICIPANTS = 10;\n    uint256 internal constant SYNC_COMMITTEE_SIZE = 512;\n    uint256 internal constant FINALIZED_ROOT_INDEX = 105;\n    uint256 internal constant NEXT_SYNC_COMMITTEE_INDEX = 55;\n    uint256 internal constant EXECUTION_STATE_ROOT_INDEX = 402;\n\n    /// @notice Whether the light client has had conflicting variables for the same slot.\n    bool public consistent = true;\n\n    /// @notice The latest slot the light client has a finalized header for.\n    uint256 public head = 0;\n\n    /// @notice Maps from a slot to a beacon block header root.\n    mapping(uint256 => bytes32) public headers;\n\n    /// @notice Maps from a slot to the timestamp of when the headers mapping was updated with slot as a key\n    mapping(uint256 => uint256) public timestamps;\n\n    /// @notice Maps from a slot to the current finalized ethereum1 execution state root.\n    mapping(uint256 => bytes32) public executionStateRoots;\n\n    /// @notice Maps from a period to the poseidon commitment for the sync committee.\n    mapping(uint256 => bytes32) public syncCommitteePoseidons;\n\n    event HeadUpdate(uint256 indexed slot, bytes32 indexed root);\n    event SyncCommitteeUpdate(uint256 indexed period, bytes32 indexed root);\n\n    constructor(\n        bytes32 genesisValidatorsRoot,\n        uint256 genesisTime,\n        uint256 secondsPerSlot,\n        uint256 slotsPerPeriod,\n        uint256 syncCommitteePeriod,\n        bytes32 syncCommitteePoseidon,\n        uint32 sourceChainId,\n        uint16 finalityThreshold\n    ) {\n        GENESIS_VALIDATORS_ROOT = genesisValidatorsRoot;\n        GENESIS_TIME = genesisTime;\n        SECONDS_PER_SLOT = secondsPerSlot;\n        SLOTS_PER_PERIOD = slotsPerPeriod;\n        SOURCE_CHAIN_ID = sourceChainId;\n        FINALITY_THRESHOLD = finalityThreshold;\n        setSyncCommitteePoseidon(syncCommitteePeriod, syncCommitteePoseidon);\n    }\n\n    /// @notice Updates the head of the light client to the provided slot.\n    /// @dev The conditions for updating the head of the light client involve checking:\n    ///      1) Enough signatures from the current sync committee for n=512\n    ///      2) A valid finality proof\n    ///      3) A valid execution state root proof\n    function step(LightClientStep memory update) external {\n        bool finalized = processStep(update);\n\n        if (getCurrentSlot() < update.attestedSlot) {\n            revert(\"Update slot is too far in the future\");\n        }\n\n        if (update.finalizedSlot < head) {\n            revert(\"Update slot less than current head\");\n        }\n\n        if (finalized) {\n            setSlotRoots(\n                update.finalizedSlot, update.finalizedHeaderRoot, update.executionStateRoot\n            );\n        } else {\n            revert(\"Not enough participants\");\n        }\n    }\n\n    /// @notice Sets the sync committee for the next sync committeee period.\n    /// @dev A commitment to the the next sync committeee is signed by the current sync committee.\n    function rotate(LightClientRotate memory update) external {\n        LightClientStep memory stepUpdate = update.step;\n        bool finalized = processStep(update.step);\n        uint256 currentPeriod = getSyncCommitteePeriod(stepUpdate.finalizedSlot);\n        uint256 nextPeriod = currentPeriod + 1;\n\n        zkLightClientRotate(update);\n\n        if (finalized) {\n            setSyncCommitteePoseidon(nextPeriod, update.syncCommitteePoseidon);\n        }\n    }\n\n    /// @notice Verifies that the header has enough signatures for finality.\n    function processStep(LightClientStep memory update) internal view returns (bool) {\n        uint256 currentPeriod = getSyncCommitteePeriod(update.attestedSlot);\n\n        if (syncCommitteePoseidons[currentPeriod] == 0) {\n            revert(\"Sync committee for current period is not initialized.\");\n        } else if (update.participation < MIN_SYNC_COMMITTEE_PARTICIPANTS) {\n            revert(\"Less than MIN_SYNC_COMMITTEE_PARTICIPANTS signed.\");\n        }\n\n        zkLightClientStep(update);\n\n        return update.participation > FINALITY_THRESHOLD;\n    }\n\n    /// @notice Serializes the public inputs into a compressed form and verifies the step proof.\n    function zkLightClientStep(LightClientStep memory update) internal view {\n        bytes32 attestedSlotLE = SSZ.toLittleEndian(update.attestedSlot);\n        bytes32 finalizedSlotLE = SSZ.toLittleEndian(update.finalizedSlot);\n        bytes32 participationLE = SSZ.toLittleEndian(update.participation);\n        uint256 currentPeriod = getSyncCommitteePeriod(update.attestedSlot);\n        bytes32 syncCommitteePoseidon = syncCommitteePoseidons[currentPeriod];\n\n        bytes32 h;\n        h = sha256(bytes.concat(attestedSlotLE, finalizedSlotLE));\n        h = sha256(bytes.concat(h, update.finalizedHeaderRoot));\n        h = sha256(bytes.concat(h, participationLE));\n        h = sha256(bytes.concat(h, update.executionStateRoot));\n        h = sha256(bytes.concat(h, syncCommitteePoseidon));\n        uint256 t = uint256(SSZ.toLittleEndian(uint256(h)));\n        t = t & ((uint256(1) << 253) - 1);\n\n        Groth16Proof memory proof = update.proof;\n        uint256[1] memory inputs = [uint256(t)];\n        require(verifyProofStep(proof.a, proof.b, proof.c, inputs));\n    }\n\n    /// @notice Serializes the public inputs and verifies the rotate proof.\n    function zkLightClientRotate(LightClientRotate memory update) internal view {\n        Groth16Proof memory proof = update.proof;\n        uint256[65] memory inputs;\n\n        uint256 syncCommitteeSSZNumeric = uint256(update.syncCommitteeSSZ);\n        for (uint256 i = 0; i < 32; i++) {\n            inputs[32 - 1 - i] = syncCommitteeSSZNumeric % 2 ** 8;\n            syncCommitteeSSZNumeric = syncCommitteeSSZNumeric / 2 ** 8;\n        }\n        uint256 finalizedHeaderRootNumeric = uint256(update.step.finalizedHeaderRoot);\n        for (uint256 i = 0; i < 32; i++) {\n            inputs[64 - i] = finalizedHeaderRootNumeric % 2 ** 8;\n            finalizedHeaderRootNumeric = finalizedHeaderRootNumeric / 2 ** 8;\n        }\n        inputs[32] = uint256(SSZ.toLittleEndian(uint256(update.syncCommitteePoseidon)));\n\n        require(verifyProofRotate(proof.a, proof.b, proof.c, inputs));\n    }\n\n    /// @notice Gets the sync committee period from a slot.\n    function getSyncCommitteePeriod(uint256 slot) internal view returns (uint256) {\n        return slot / SLOTS_PER_PERIOD;\n    }\n\n    /// @notice Gets the current slot for the chain the light client is reflecting.\n    function getCurrentSlot() internal view returns (uint256) {\n        return (block.timestamp - GENESIS_TIME) / SECONDS_PER_SLOT;\n    }\n\n    /// @notice Sets the current slot for the chain the light client is reflecting.\n    /// @dev Checks if roots exists for the slot already. If there is, check for a conflict between\n    ///      the given roots and the existing roots. If there is an existing header but no\n    ///      conflict, do nothing. This avoids timestamp renewal DoS attacks.\n    function setSlotRoots(uint256 slot, bytes32 finalizedHeaderRoot, bytes32 executionStateRoot)\n        internal\n    {\n        if (headers[slot] != bytes32(0)) {\n            if (headers[slot] != finalizedHeaderRoot) {\n                consistent = false;\n            }\n            return;\n        }\n        if (executionStateRoots[slot] != bytes32(0)) {\n            if (executionStateRoots[slot] != executionStateRoot) {\n                consistent = false;\n            }\n            return;\n        }\n\n        head = slot;\n        headers[slot] = finalizedHeaderRoot;\n        executionStateRoots[slot] = executionStateRoot;\n        timestamps[slot] = block.timestamp;\n        emit HeadUpdate(slot, finalizedHeaderRoot);\n    }\n\n    /// @notice Sets the sync committee poseidon for a given period.\n    function setSyncCommitteePoseidon(uint256 period, bytes32 poseidon) internal {\n        if (\n            syncCommitteePoseidons[period] != bytes32(0)\n                && syncCommitteePoseidons[period] != poseidon\n        ) {\n            consistent = false;\n            return;\n        }\n        syncCommitteePoseidons[period] = poseidon;\n        emit SyncCommitteeUpdate(period, poseidon);\n    }\n}\n"
    },
    "src/lightclient/RotateVerifier.sol": {
      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.14;\n\nlibrary PairingRotate {\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n    /// @return the generator of G1\n\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n    /// @return the generator of G2\n\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n\n        /*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );*/\n    }\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\n\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\n        // The prime q in the base field F_q for G1\n        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        }\n        return G1Point(p.X, q - (p.Y % q));\n    }\n    /// @return r the sum of two points of G1\n\n    function addition(G1Point memory p1, G1Point memory p2)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-add-failed\");\n    }\n    /// @return r the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\n        require(p1.length == p2.length, \"pairing-lengths-failed\");\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint[](inputSize);\n        for (uint256 i = 0; i < elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint256[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success :=\n                staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n    /// Convenience method for a pairing check for two pairs.\n\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for three pairs.\n\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for four pairs.\n\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n\ncontract RotateVerifier {\n    using PairingRotate for *;\n\n    struct VerifyingKeyRotate {\n        PairingRotate.G1Point alfa1;\n        PairingRotate.G2Point beta2;\n        PairingRotate.G2Point gamma2;\n        PairingRotate.G2Point delta2;\n        PairingRotate.G1Point[] IC;\n    }\n\n    struct ProofRotate {\n        PairingRotate.G1Point A;\n        PairingRotate.G2Point B;\n        PairingRotate.G1Point C;\n    }\n\n    function verifyingKeyRotate() internal pure returns (VerifyingKeyRotate memory vk) {\n        vk.alfa1 = PairingRotate.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = PairingRotate.G2Point(\n            [\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\n            ],\n            [\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\n            ]\n        );\n        vk.gamma2 = PairingRotate.G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n        vk.delta2 = PairingRotate.G2Point(\n            [\n                3675012114472141823353431748838492474116965167545797868888004981062438761191,\n                10919016225287729772152561895455637785621917546560571464331102379931789733219\n            ],\n            [\n                102187551240741282923570240607013148086072939956192338710607906886896151404,\n                5367848349839033463131482183036431902292883341608111320084976497150816008676\n            ]\n        );\n        vk.IC = new PairingRotate.G1Point[](66);\n\n        vk.IC[0] = PairingRotate.G1Point(\n            5470815004869339708023881485772068204912771757179007890054204256558850581949,\n            4017097656779998741510710628117295954432749941107635696146110442372218605472\n        );\n\n        vk.IC[1] = PairingRotate.G1Point(\n            14277312075960031085375048071612101555372035286672331734392395085201225041149,\n            14239461345455039302866813666954330449685909886390271856241643488739478373512\n        );\n\n        vk.IC[2] = PairingRotate.G1Point(\n            10256748840775250798022727853625820196139372710211008731654522604490787003459,\n            20397352715193589290244696330476579119048823352961807809477137990763045264186\n        );\n\n        vk.IC[3] = PairingRotate.G1Point(\n            550075104891859430074462590592661684892297605480719920050615275015711508540,\n            9032201165211335469461508008237078579797938193755295864092980796424301990237\n        );\n\n        vk.IC[4] = PairingRotate.G1Point(\n            21713013256553006628611706827565089795369588919207450378979275353062640142109,\n            2661645625997626369569922372169772081437758044104248909618957550337440494139\n        );\n\n        vk.IC[5] = PairingRotate.G1Point(\n            13691767371801378227924059456388428035967164647023292694391180919564712627486,\n            756065770973511865243597601390091557217745613563990150676273724294507448431\n        );\n\n        vk.IC[6] = PairingRotate.G1Point(\n            17210984791838145359466867649558462207089918294097343317284442476101568076903,\n            16563042484294402555802035774580866281492939197308313773740452628469640810440\n        );\n\n        vk.IC[7] = PairingRotate.G1Point(\n            21652367622408977882130185948903917467398782152573572688460517452235184585130,\n            9456717250971867942266744925479122316030416863980640923048259745172637366725\n        );\n\n        vk.IC[8] = PairingRotate.G1Point(\n            12428061968345789072069730074981543994872620840107009832818380903947462784731,\n            9628665618463208783319788804477124615643602805991242396517345043087341128847\n        );\n\n        vk.IC[9] = PairingRotate.G1Point(\n            7591606751456480272207358723930527667946792703046687083257839541887230600513,\n            5066738728275003710178607972725262923032117471343419051299425541173384033812\n        );\n\n        vk.IC[10] = PairingRotate.G1Point(\n            14488917807089011281047272726099875150571238692019113219825028192575284509581,\n            3883496032433938548361294112846837895152012388047964931324198754228797877220\n        );\n\n        vk.IC[11] = PairingRotate.G1Point(\n            12645787598395228725171373471935087818337812765671916073026450852525761450287,\n            16769199208517164707037753561119296273327233703340885518231256382074870981084\n        );\n\n        vk.IC[12] = PairingRotate.G1Point(\n            8215460069747363365580846005818022489493268911061609705064972529404961966716,\n            6669659888215141314967540985998609102937810373447651153074209742694609294095\n        );\n\n        vk.IC[13] = PairingRotate.G1Point(\n            2844997831056636120836911709923266133367730601282518816015648606919944680684,\n            19610199208595789435810978810597614274285858402731872359124459788255937025996\n        );\n\n        vk.IC[14] = PairingRotate.G1Point(\n            7040110845525952900598881769658949052341010642995548224350638317552310576665,\n            1487161644887832968957801290134731353444352051595741879812259993583216090066\n        );\n\n        vk.IC[15] = PairingRotate.G1Point(\n            12405805793275046993325239811828128198882824151112347193213908986231709070096,\n            15492255937493657362746399833085165717154406677433505821519002161530391720647\n        );\n\n        vk.IC[16] = PairingRotate.G1Point(\n            13285062575679713300238666842781712613277259978595375037257266736470472693734,\n            17488882217616287673270345118177467195439036242880051293611907165945370393183\n        );\n\n        vk.IC[17] = PairingRotate.G1Point(\n            8603566731019335023634627293889179299668875390582323005277165715690663545281,\n            9408560403310074111063179066628126101341395210067416861794078835499868816389\n        );\n\n        vk.IC[18] = PairingRotate.G1Point(\n            1181542675746324377871278475651244460118791808050795628097423364071136531210,\n            16597581308801947899138241527753298624973308153461725212655837446361686781341\n        );\n\n        vk.IC[19] = PairingRotate.G1Point(\n            14408564907247179976621631573939251801623056626888588761518947695781661259431,\n            7271292981933539395227276416353020454175202289781663739615258142432056594341\n        );\n\n        vk.IC[20] = PairingRotate.G1Point(\n            17597295579129750685222005163149670289164331266400199650162523758546359081430,\n            242419869317119527452900448830763183657743377412973281248624953969503788017\n        );\n\n        vk.IC[21] = PairingRotate.G1Point(\n            20124047720139252459109468495559408458493639360052211576952318590325892917503,\n            14008316510305876208122551501589871272450059356861116352652762997086093688531\n        );\n\n        vk.IC[22] = PairingRotate.G1Point(\n            13429010226287571463999973230050502318483188103767219746698970525082092429630,\n            17607024931072105555190552501851311614700269454441117491038856897846484505559\n        );\n\n        vk.IC[23] = PairingRotate.G1Point(\n            627964571426933641572058300878809182262081368423265694511023550606724723852,\n            7373605622742653003693203193757662230639533270431368245427885795203201424820\n        );\n\n        vk.IC[24] = PairingRotate.G1Point(\n            12161353119779742822520962020173667675809269149216188936907052577149093111204,\n            6555344721078959891495725261309309757730705617249729308378872092562368473988\n        );\n\n        vk.IC[25] = PairingRotate.G1Point(\n            9942573813465654211107291217854629923255602950622362298703894692342235427207,\n            20021572331775129788719437837166754838257663222479115248088091028568806131147\n        );\n\n        vk.IC[26] = PairingRotate.G1Point(\n            17910544130511298533517349900760876063185744881593759677884881699548930171332,\n            7566195441873811040992078749824142377659424688172946587073369650740370382053\n        );\n\n        vk.IC[27] = PairingRotate.G1Point(\n            10294006571004095925349367164151343983622516668137117545981916220159082857404,\n            11051424065788213828967323053142067453752210885728523770440122057870479709783\n        );\n\n        vk.IC[28] = PairingRotate.G1Point(\n            17278283156969428338635046359226820440103033906261666777410408218807934373990,\n            12630385670559989967675890775741481340979991232084884378562333580112758868739\n        );\n\n        vk.IC[29] = PairingRotate.G1Point(\n            20719773367000423770103787495754469795737917431647832647547093626506779924857,\n            12241894457863621777618930601757821502077084227388402933846144913385339154274\n        );\n\n        vk.IC[30] = PairingRotate.G1Point(\n            7825569666207241575453093795025524306505131449824573801763077037005575843172,\n            11788956260734339141039890691640575434794809354675227814118671978630056270161\n        );\n\n        vk.IC[31] = PairingRotate.G1Point(\n            10256922205896585948010363832994059866678392695752778911179274200873680504486,\n            20710849495413331015027530557092065338191984434697780936325111489762998359394\n        );\n\n        vk.IC[32] = PairingRotate.G1Point(\n            7572217948185872545017456144279759157591242738079606265720395393961675644333,\n            6192765399438435590717647536649376957292802732415532034804257875057712415415\n        );\n\n        vk.IC[33] = PairingRotate.G1Point(\n            15391560451656587100602586684457458735941689200752320075626947497705342829876,\n            7469915732140427004149238203533591322565954801326586011976294165439258678171\n        );\n\n        vk.IC[34] = PairingRotate.G1Point(\n            2253212938086582304814193274897683117304874968223660198987155742236380011435,\n            3363542076064470851126434129047206220947052523506353352971821345125367070063\n        );\n\n        vk.IC[35] = PairingRotate.G1Point(\n            17987318395821359901152963133368311889165569699804937933016037339230070642262,\n            1022889512148181894044975791615851243035079161202273448049368472740702704664\n        );\n\n        vk.IC[36] = PairingRotate.G1Point(\n            2595191674370476748249132758864046203842783028970388255482808886766485458335,\n            15999872848065408374250027264594185256390522888165323431229975753580595435412\n        );\n\n        vk.IC[37] = PairingRotate.G1Point(\n            17310802424312407177327231604308398662368636546188087853824155787735954852657,\n            17492267087305379320377201137032057700653202094081338764785614411379003265135\n        );\n\n        vk.IC[38] = PairingRotate.G1Point(\n            19692305970501129432989117858162812421089112183797295270345301988227225701596,\n            13407066371238340125981115105014778822174694414863209614311286575950290183122\n        );\n\n        vk.IC[39] = PairingRotate.G1Point(\n            10280280821816150338698341999809174508877893892146508999367975655101013502337,\n            12873664672144000638692091121716563297523913813351462683381257837764257361266\n        );\n\n        vk.IC[40] = PairingRotate.G1Point(\n            15269942102931108304861180822000044831078625258211177465421373923889797003713,\n            315941659904404805162515697500885926641592106285202599044695865981944934148\n        );\n\n        vk.IC[41] = PairingRotate.G1Point(\n            18720117707393600985668734258470788963109345994486804125334415623779965685579,\n            17610066291159506858109565731510415537915008213026426702411450752803499563945\n        );\n\n        vk.IC[42] = PairingRotate.G1Point(\n            17473387575701915793165316810554838264284294799431693872192608671518586775589,\n            11046638250273238988420881477549685125663400537658322931163724522834081071681\n        );\n\n        vk.IC[43] = PairingRotate.G1Point(\n            1131444062811679831409684930556592770674157096923417994117545757895843843257,\n            14806880463376902602792568628979400757229760418808213797901706596473177402855\n        );\n\n        vk.IC[44] = PairingRotate.G1Point(\n            3333565255438508727133914474431341407114665924124016209746252498172716323458,\n            1349287382207655945922193622904780432125650897659617214713798793227947453335\n        );\n\n        vk.IC[45] = PairingRotate.G1Point(\n            13940028459121008532016253983362465702704402122643253107590554855038192214997,\n            3225433852783273107896062941479423211005648219618800554123220051023809342710\n        );\n\n        vk.IC[46] = PairingRotate.G1Point(\n            19717004403074439755349281295381478852157253003797216955970992000449301302719,\n            3186328678318977319722138906369583685190567800290840806157855829071842708219\n        );\n\n        vk.IC[47] = PairingRotate.G1Point(\n            16642147433186556950008995817628233060579719469362516887521909650865254862277,\n            17897379145764357424229771761211803103403399226293603355593766947402488749261\n        );\n\n        vk.IC[48] = PairingRotate.G1Point(\n            14166167796010346344607806834057017465158432711277897940882635412943787832957,\n            1466421523646102279306143855466046078434093416565439179577859342596077968495\n        );\n\n        vk.IC[49] = PairingRotate.G1Point(\n            9121323577197934089656479126834443288009296095992819343687934158311952648102,\n            20838803026465071526824216109672143097735131861681728912431346891805254673021\n        );\n\n        vk.IC[50] = PairingRotate.G1Point(\n            16527506110553414978978752440663074476403014249564253944322759266695960317283,\n            20784110511802989598239803900829001702846512565882851871209620824570342959741\n        );\n\n        vk.IC[51] = PairingRotate.G1Point(\n            21239710915708343421769893254944423412302146109622846670164778866011467089334,\n            21673205856698640090132731274991397146356957558897797067201376224645693508319\n        );\n\n        vk.IC[52] = PairingRotate.G1Point(\n            8077054060841997795055664844350639621813278263496855282589846327672529047441,\n            7836528458814616258001093258469921488745632058376319287462221490756158150755\n        );\n\n        vk.IC[53] = PairingRotate.G1Point(\n            14516329420235345440149324792936235254195325657174837822744049638896307191009,\n            20722856186071063267009035722206599642529515584360229343481151178919568667656\n        );\n\n        vk.IC[54] = PairingRotate.G1Point(\n            2669418772363680637663665025335332245703927178960036706320145551701239085099,\n            21877663481941323417151526405025523153611074545818563846226114918852433289787\n        );\n\n        vk.IC[55] = PairingRotate.G1Point(\n            5741991653539626114303961719014055119659011005869852659937084977252640589389,\n            18376104754519076330669694554115737208000577444106874582540891451657284147033\n        );\n\n        vk.IC[56] = PairingRotate.G1Point(\n            8028575798791411367183643439532739195517530885357926087717772517691790990720,\n            18883759566594356674404094589651421579134482900437360695545733243237480747440\n        );\n\n        vk.IC[57] = PairingRotate.G1Point(\n            16855740526826858784404294435476672051544769847039765832010554156813731500735,\n            659320399176788531847946680054100455785626824551846564053384763521994791623\n        );\n\n        vk.IC[58] = PairingRotate.G1Point(\n            19988225821830608710578630073688777389429278183733539199536068639850161003968,\n            13955046145626853781355698616181858322515747170102298011267491749553021068605\n        );\n\n        vk.IC[59] = PairingRotate.G1Point(\n            15410537293735377459773895058434203425750985393204437521319290173095968032576,\n            12169824789351460419228154813849731234386233054285207598923427959734874612330\n        );\n\n        vk.IC[60] = PairingRotate.G1Point(\n            2159062713955330031251957758273078405414148150460871899054446806500793547230,\n            5879182752663104625737625098296688013210189092653213235878521327556194561168\n        );\n\n        vk.IC[61] = PairingRotate.G1Point(\n            4174895122075502369038039999781532490288044058012153099254766261447417221242,\n            10002098427920629174530381032587014535008462144357498361035555806129992916818\n        );\n\n        vk.IC[62] = PairingRotate.G1Point(\n            15335284926841897062681527472356815727299146551895045501122685010036931177370,\n            15836442636274538856030584403981280347198833751029912415192018487311436469357\n        );\n\n        vk.IC[63] = PairingRotate.G1Point(\n            15162884727148196758524310643047361429630186986459976124858953592650939212470,\n            21420261991093949703915232730226827651029889087964456544705761681774879713164\n        );\n\n        vk.IC[64] = PairingRotate.G1Point(\n            11897567539623576790784466821129399882362071349295534039069611825756071290043,\n            13382525927073502847360453300076919468700768256030677349337425404866209364848\n        );\n\n        vk.IC[65] = PairingRotate.G1Point(\n            1770704955919074560139787492400225011230234734329412973959714160679435405051,\n            1103550123340193874347219466412240366118503028463942223452924232215815583842\n        );\n    }\n\n    function verifyRotate(uint256[] memory input, ProofRotate memory proof)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 snark_scalar_field =\n            21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKeyRotate memory vk = verifyingKeyRotate();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        PairingRotate.G1Point memory vk_x = PairingRotate.G1Point(0, 0);\n        for (uint256 i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field, \"verifier-gte-snark-scalar-field\");\n            vk_x = PairingRotate.addition(vk_x, PairingRotate.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = PairingRotate.addition(vk_x, vk.IC[0]);\n        if (\n            !PairingRotate.pairingProd4(\n                PairingRotate.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n    /// @return r  bool true if proof is valid\n\n    function verifyProofRotate(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[65] memory input\n    ) public view returns (bool r) {\n        ProofRotate memory proof;\n        proof.A = PairingRotate.G1Point(a[0], a[1]);\n        proof.B = PairingRotate.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = PairingRotate.G1Point(c[0], c[1]);\n        uint256[] memory inputValues = new uint[](input.length);\n        for (uint256 i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verifyRotate(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "src/lightclient/StepVerifier.sol": {
      "content": "//\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// 2019 OKIMS\n//      ported to solidity 0.6\n//      fixed linter warnings\n//      added requiere error messages\n//\n//\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.14;\n\nlibrary PairingStep {\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n    // Encoding of field elements is: X[0] * z + X[1]\n\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n    /// @return the generator of G1\n\n    function P1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n    /// @return the generator of G2\n\n    function P2() internal pure returns (G2Point memory) {\n        // Original code point\n        return G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n\n        /*\n        // Changed by Jordi point\n        return G2Point(\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\n        );*/\n    }\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\n\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\n        // The prime q in the base field F_q for G1\n        uint256 q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        }\n        return G1Point(p.X, q - (p.Y % q));\n    }\n    /// @return r the sum of two points of G1\n\n    function addition(G1Point memory p1, G1Point memory p2)\n        internal\n        view\n        returns (G1Point memory r)\n    {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-add-failed\");\n    }\n    /// @return r the product of a point on G1 and a scalar, i.e.\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\n\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-mul-failed\");\n    }\n    /// @return the result of computing the pairing check\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\n    /// return true.\n\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\n        require(p1.length == p2.length, \"pairing-lengths-failed\");\n        uint256 elements = p1.length;\n        uint256 inputSize = elements * 6;\n        uint256[] memory input = new uint[](inputSize);\n        for (uint256 i = 0; i < elements; i++) {\n            input[i * 6 + 0] = p1[i].X;\n            input[i * 6 + 1] = p1[i].Y;\n            input[i * 6 + 2] = p2[i].X[0];\n            input[i * 6 + 3] = p2[i].X[1];\n            input[i * 6 + 4] = p2[i].Y[0];\n            input[i * 6 + 5] = p2[i].Y[1];\n        }\n        uint256[1] memory out;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success :=\n                staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 { invalid() }\n        }\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n    /// Convenience method for a pairing check for two pairs.\n\n    function pairingProd2(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](2);\n        G2Point[] memory p2 = new G2Point[](2);\n        p1[0] = a1;\n        p1[1] = b1;\n        p2[0] = a2;\n        p2[1] = b2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for three pairs.\n\n    function pairingProd3(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](3);\n        G2Point[] memory p2 = new G2Point[](3);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        return pairing(p1, p2);\n    }\n    /// Convenience method for a pairing check for four pairs.\n\n    function pairingProd4(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        G1Point[] memory p1 = new G1Point[](4);\n        G2Point[] memory p2 = new G2Point[](4);\n        p1[0] = a1;\n        p1[1] = b1;\n        p1[2] = c1;\n        p1[3] = d1;\n        p2[0] = a2;\n        p2[1] = b2;\n        p2[2] = c2;\n        p2[3] = d2;\n        return pairing(p1, p2);\n    }\n}\n\ncontract StepVerifier {\n    using PairingStep for *;\n\n    struct VerifyingKeyStep {\n        PairingStep.G1Point alfa1;\n        PairingStep.G2Point beta2;\n        PairingStep.G2Point gamma2;\n        PairingStep.G2Point delta2;\n        PairingStep.G1Point[] IC;\n    }\n\n    struct ProofStep {\n        PairingStep.G1Point A;\n        PairingStep.G2Point B;\n        PairingStep.G1Point C;\n    }\n\n    function verifyingKeyStep() internal pure returns (VerifyingKeyStep memory vk) {\n        vk.alfa1 = PairingStep.G1Point(\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\n        );\n\n        vk.beta2 = PairingStep.G2Point(\n            [\n                4252822878758300859123897981450591353533073413197771768651442665752259397132,\n                6375614351688725206403948262868962793625744043794305715222011528459656738731\n            ],\n            [\n                21847035105528745403288232691147584728191162732299865338377159692350059136679,\n                10505242626370262277552901082094356697409835680220590971873171140371331206856\n            ]\n        );\n        vk.gamma2 = PairingStep.G2Point(\n            [\n                11559732032986387107991004021392285783925812861821192530917403151452391805634,\n                10857046999023057135944570762232829481370756359578518086990519993285655852781\n            ],\n            [\n                4082367875863433681332203403145435568316851327593401208105741076214120093531,\n                8495653923123431417604973247489272438418190587263600148770280649306958101930\n            ]\n        );\n        vk.delta2 = PairingStep.G2Point(\n            [\n                9148034046527158989101020029579194033324545680690921079621927354300102378298,\n                10428510773771669101337698551840898995662926411592295461427040701160903222524\n            ],\n            [\n                2059005959130125518966387482690762396878640026867853728991912122619823366140,\n                8608655831713798153467395128429618873818784843644748205739399791673552717322\n            ]\n        );\n        vk.IC = new PairingStep.G1Point[](2);\n\n        vk.IC[0] = PairingStep.G1Point(\n            21097338684422677437460982984988891660959866360162656316176294386916372703826,\n            3398895913860087272363404566039149647887053857985313627926493221433540324753\n        );\n\n        vk.IC[1] = PairingStep.G1Point(\n            17453610618095138353005253409143141334272691316524473752585732650144486997453,\n            17395545982498249053105146333634640028536711052867181025149351332882425139542\n        );\n    }\n\n    function verifyStep(uint256[] memory input, ProofStep memory proof)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 snark_scalar_field =\n            21888242871839275222246405745257275088548364400416034343698204186575808495617;\n        VerifyingKeyStep memory vk = verifyingKeyStep();\n        require(input.length + 1 == vk.IC.length, \"verifier-bad-input\");\n        // Compute the linear combination vk_x\n        PairingStep.G1Point memory vk_x = PairingStep.G1Point(0, 0);\n        for (uint256 i = 0; i < input.length; i++) {\n            require(input[i] < snark_scalar_field, \"verifier-gte-snark-scalar-field\");\n            vk_x = PairingStep.addition(vk_x, PairingStep.scalar_mul(vk.IC[i + 1], input[i]));\n        }\n        vk_x = PairingStep.addition(vk_x, vk.IC[0]);\n        if (\n            !PairingStep.pairingProd4(\n                PairingStep.negate(proof.A),\n                proof.B,\n                vk.alfa1,\n                vk.beta2,\n                vk_x,\n                vk.gamma2,\n                proof.C,\n                vk.delta2\n            )\n        ) return 1;\n        return 0;\n    }\n    /// @return r  bool true if proof is valid\n\n    function verifyProofStep(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[1] memory input\n    ) public view returns (bool r) {\n        ProofStep memory proof;\n        proof.A = PairingStep.G1Point(a[0], a[1]);\n        proof.B = PairingStep.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\n        proof.C = PairingStep.G1Point(c[0], c[1]);\n        uint256[] memory inputValues = new uint[](input.length);\n        for (uint256 i = 0; i < input.length; i++) {\n            inputValues[i] = input[i];\n        }\n        if (verifyStep(inputValues, proof) == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "src/lightclient/interfaces/ILightClient.sol": {
      "content": "pragma solidity ^0.8.0;\n\ninterface ILightClient {\n    function consistent() external view returns (bool);\n\n    function head() external view returns (uint256);\n\n    function headers(uint256 slot) external view returns (bytes32);\n\n    function executionStateRoots(uint256 slot) external view returns (bytes32);\n\n    function timestamps(uint256 slot) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@optimism-bedrock/=lib/optimism-bedrock-contracts/",
      "@uniswap/=lib/",
      "Solidity-RLP/=lib/Solidity-RLP/contracts/",
      "curve-merkle-oracle/=lib/curve-merkle-oracle/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
      "optimism-bedrock-contracts/=lib/optimism-bedrock-contracts/",
      "v3-core/=lib/v3-core/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}}