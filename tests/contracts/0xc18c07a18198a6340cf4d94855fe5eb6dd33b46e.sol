{{
  "language": "Solidity",
  "sources": {
    "contracts/QLINDO.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./arteq-tech/contracts/abstract/task-managed/AccountLocker.sol\";\nimport \"./arteq-tech/contracts/abstract/task-managed/BatchTransferEnabled.sol\";\nimport \"./arteq-tech/contracts/abstract/task-managed/TaskManagedERC20VaultEnabled.sol\";\nimport \"./arteq-tech/contracts/abstract/task-managed/TaskManagedERC721VaultEnabled.sol\";\nimport \"./arteq-tech/contracts/abstract/task-managed/TaskManagedERC1155VaultEnabled.sol\";\n\n/// @author Kam Amini <kam@arteq.io> <kam.cpp@gmail.com>\n///\n/// @notice Use at your own risk\ncontract QLINDO is\n  ERC20,\n  AccountLocker,\n  BatchTransferEnabled,\n  TaskManagedERC20VaultEnabled,\n  TaskManagedERC721VaultEnabled,\n  TaskManagedERC1155VaultEnabled\n{\n    constructor(address taskManager)\n      ERC20(\"Qlindo Realestate Investment Token\", \"QLINDO\")\n    {\n        require(taskManager != address(0), \"QLINDO: zero address set for task manager\");\n        _setTaskManager(taskManager);\n        _mint(_getTaskManager(), 10 * 10 ** 9); // 10 billion tokens\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 0;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address /*to*/,\n        uint256 /*amount*/\n    ) internal virtual override {\n        require(!_isLocked(from), \"QLINDO: account cannot transfer tokens\");\n    }\n\n    function _batchTransferSingle(\n        address source,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        _transfer(source, to, amount);\n    }\n\n    receive() external payable {\n        revert(\"QLINDO: cannot accept ether\");\n    }\n\n    fallback() external payable {\n        revert(\"QLINDO: cannot accept ether\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/AccountLocker.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"./TaskExecutor.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract AccountLocker is TaskExecutor {\n\n    mapping (address => uint256) private _lockedAccounts;\n\n    event LockTsChanged(address account, uint256 lockTimestamp);\n\n    function updateLockTs(\n        uint256 taskId,\n        address[] memory accounts,\n        uint256[] memory lockTss\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        require(accounts.length == lockTss.length, \"AccountLocker: inputs have incorrect lengths\");\n        require(accounts.length > 0, \"AccountLocker: empty inputs\");\n        for (uint256 i = 0; i < accounts.length; i++) {\n            _updateLockTs(accounts[i], lockTss[i]);\n        }\n    }\n\n    function _getLockTs(address account) internal view returns (uint256) {\n        return _lockedAccounts[account];\n    }\n\n    function _updateLockTs(address account, uint256 lockTs) internal {\n        uint256 oldLockTs = _lockedAccounts[account];\n        _lockedAccounts[account] = lockTs;\n        if (oldLockTs != lockTs) {\n            emit LockTsChanged(account, lockTs);\n        }\n    }\n\n    function _isLocked(address account) internal view returns (bool) {\n        uint256 lockTs = _getLockTs(account);\n        return lockTs > 0 && block.timestamp <= lockTs;\n    }\n}\n\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/BatchTransferEnabled.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"./AccountLocker.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract BatchTransferEnabled is AccountLocker {\n\n    function doBatchTransferWithLock(\n        uint256 taskId,\n        address[] memory tos,\n        uint256[] memory amounts,\n        uint256[] memory lockTss\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _doBatchTransferWithLock(tos, amounts, lockTss);\n    }\n\n    function _batchTransferSingle(address source, address to, uint256 amount) internal virtual;\n\n    function _doBatchTransferWithLock(\n        address[] memory tos,\n        uint256[] memory amounts,\n        uint256[] memory lockTss\n    ) private {\n        require(_getTaskManager() != address(0), \"BatchTransferEnabled: batch transfer source is not set\");\n        require(tos.length == amounts.length, \"BatchTransferEnabled: inputs have incorrect lengths\");\n        require(tos.length == lockTss.length, \"BatchTransferEnabled: inputs have incorrect lengths\");\n        require(tos.length > 0, \"BatchTransferEnabled: empty inputs\");\n        for (uint256 i = 0; i < tos.length; i++) {\n            require(tos[i] != address(0), \"BatchTransferEnabled: target with zero address\");\n            require(tos[i] != _getTaskManager(), \"BatchTransferEnabled: invalid target\");\n            if (amounts[i] > 0) {\n                _batchTransferSingle(_getTaskManager(), tos[i], amounts[i]);\n            }\n            if (lockTss[i] > 0) {\n                _updateLockTs(tos[i], lockTss[i]);\n            }\n        }\n    }\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/TaskManagedERC20VaultEnabled.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"../ERC20Vault.sol\";\nimport \"./TaskExecutor.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract TaskManagedERC20VaultEnabled is TaskExecutor, ERC20Vault {\n\n    function ERC20Transfer(\n        uint256 taskId,\n        address tokenContract,\n        address to,\n        uint256 amount\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC20Transfer(tokenContract, to, amount);\n    }\n\n    function ERC20Approve(\n        uint256 taskId,\n        address tokenContract,\n        address spender,\n        uint256 amount\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC20Approve(tokenContract, spender, amount);\n    }\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/TaskManagedERC721VaultEnabled.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"../ERC721Vault.sol\";\nimport \"./TaskExecutor.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract TaskManagedERC721VaultEnabled is TaskExecutor, ERC721Vault {\n\n    function ERC721Transfer(\n        uint256 taskId,\n        address tokenContract,\n        address to,\n        uint256 tokenId\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC721Transfer(tokenContract, to, tokenId);\n    }\n\n    function ERC721Approve(\n        uint256 taskId,\n        address tokenContract,\n        address operator,\n        uint256 tokenId\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC721Approve(tokenContract, operator, tokenId);\n    }\n\n    function ERC721SetApprovalForAll(\n        uint256 taskId,\n        address tokenContract,\n        address operator,\n        bool approved\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC721SetApprovalForAll(tokenContract, operator, approved);\n    }\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/TaskManagedERC1155VaultEnabled.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"../ERC1155Vault.sol\";\nimport \"./TaskExecutor.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract TaskManagedERC1155VaultEnabled is TaskExecutor, ERC1155Vault {\n\n    function ERC1155Transfer(\n        uint256 taskId,\n        address tokenContract,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC1155Transfer(tokenContract, to, tokenId, amount);\n    }\n\n    function ERC1155SetApprovalForAll(\n        uint256 taskId,\n        address tokenContract,\n        address operator,\n        bool approved\n    ) external\n      tryExecuteTaskAfterwards(taskId)\n    {\n        _ERC1155SetApprovalForAll(tokenContract, operator, approved);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/task-managed/TaskExecutor.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"@openzeppelin/contracts/interfaces/IERC165.sol\";\nimport \"../../interfaces/ITaskExecutor.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract TaskExecutor {\n\n    address private _taskManager;\n\n    event TaskManagerChanged(address newTaskManager);\n\n    modifier tryExecuteTaskAfterwards(uint256 taskId) {\n        require(_taskManager != address(0), \"TaskExecutor: task manager is not set\");\n        _;\n        ITaskExecutor(_taskManager).executeTask(msg.sender, taskId);\n    }\n\n    function getTaskManager() external view returns (address) {\n        return _getTaskManager();\n    }\n\n    function setTaskManager(\n        uint256 adminTaskId,\n        address newTaskManager\n    ) external {\n        address oldTaskManager = _taskManager;\n        _setTaskManager(newTaskManager);\n        if (oldTaskManager != address(0)) {\n            ITaskExecutor(oldTaskManager).executeAdminTask(msg.sender, adminTaskId);\n        }\n    }\n\n    function _getTaskManager() internal view returns (address) {\n        return _taskManager;\n    }\n\n    function _setTaskManager(address newTaskManager) internal {\n        require(newTaskManager != address(0), \"TaskExecutor: zero address cannot be set\");\n        require(IERC165(newTaskManager).supportsInterface(type(ITaskExecutor).interfaceId),\n            \"TaskExecutor: invalid contract\");\n        _taskManager = newTaskManager;\n        emit TaskManagerChanged(_taskManager);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "contracts/arteq-tech/contracts/interfaces/ITaskExecutor.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\ninterface ITaskExecutor {\n\n    event TaskExecuted(address finalizer, address executor, uint256 taskId);\n\n    function executeTask(address executor, uint256 taskId) external;\n\n    function executeAdminTask(address executor, uint256 taskId) external;\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/ERC20Vault.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract ERC20Vault {\n\n    event ERC20Transferred(address tokenContract, address to, uint256 amount);\n    event ERC20Approved(address tokenContract, address spender, uint256 amount);\n\n    function _ERC20Transfer(\n        address tokenContract,\n        address to,\n        uint256 amount\n    ) internal {\n        require(tokenContract != address(0), \"ERC20Vault: zero token address\");\n        require(to != address(0), \"ERC20Vault: cannot transfer to zero\");\n        require(amount > 0, \"ERC20Vault: amount is zero\");\n        require(amount <= IERC20(tokenContract).balanceOf(address(this)),\n                                \"ERC20Vault: transfer more than balance\");\n\n        IERC20(tokenContract).transfer(to, amount);\n        emit ERC20Transferred(tokenContract, to, amount);\n    }\n\n    function _ERC20Approve(\n        address tokenContract,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(tokenContract != address(0), \"ERC20Vault: zero token address\");\n        require(spender != address(0), \"ERC20Vault: zero address for spender\");\n\n        IERC20(tokenContract).approve(spender, amount);\n        emit ERC20Approved(tokenContract, spender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "contracts/arteq-tech/contracts/abstract/ERC721Vault.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract ERC721Vault is IERC721Receiver {\n\n    event ERC721Transferred(address tokenContract, address to, uint256 tokenId);\n    event ERC721Approved(address tokenContract, address to, uint256 tokenId);\n    event ERC721ApprovedForAll(address tokenContract, address operator, bool approved);\n\n    function onERC721Received(\n        address /* operator */,\n        address /* from */,\n        uint256 /* tokenId */,\n        bytes calldata /* data */\n    ) external pure override returns (bytes4) {\n        return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n    }\n\n    function _ERC721Transfer(\n        address tokenContract,\n        address to,\n        uint256 tokenId\n    ) internal {\n        require(tokenContract != address(0), \"ERC721Vault: zero token address\");\n        require(to != address(0), \"ERC721Vault: cannot transfer to zero\");\n\n        IERC721(tokenContract).safeTransferFrom(address(this), to, tokenId, \"\");\n        emit ERC721Transferred(tokenContract, to, tokenId);\n    }\n\n    // operator can be the zero address.\n    function _ERC721Approve(\n        address tokenContract,\n        address operator,\n        uint256 tokenId\n    ) internal {\n        require(tokenContract != address(0), \"ERC721Vault: zero token address\");\n\n        IERC721(tokenContract).approve(operator, tokenId);\n        emit ERC721Approved(tokenContract, operator, tokenId);\n    }\n\n    function _ERC721SetApprovalForAll(\n        address tokenContract,\n        address operator,\n        bool approved\n    ) internal {\n        require(tokenContract != address(0), \"ERC721Vault: zero token address\");\n        require(operator != address(0), \"ERC721Vault: zero address for operator\");\n\n        IERC721(tokenContract).setApprovalForAll(operator, approved);\n        emit ERC721ApprovedForAll(tokenContract, operator, approved);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/arteq-tech/contracts/abstract/ERC1155Vault.sol": {
      "content": "/*\n * This file is part of the artèQ Technologies contracts (https://github.com/arteq-tech/contracts).\n * Copyright (c) 2022 artèQ Technologies (https://arteq.tech)\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n// SPDX-License-Identifier: GNU General Public License v3.0\n\npragma solidity 0.8.1;\n\nimport \"@openzeppelin/contracts/interfaces/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n/// @author Kam Amini <kam@arteq.io>\n///\n/// @notice Use at your own risk\nabstract contract ERC1155Vault is IERC1155Receiver {\n\n    event ERC1155Transferred(address tokenContract, address to, uint256 tokenId, uint256 amount);\n    event ERC1155ApprovedForAll(address tokenContract, address operator, bool approved);\n\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId;\n    }\n\n    function onERC1155Received(\n        address /* operator */,\n        address /* from */,\n        uint256 /* id */,\n        uint256 /* value */,\n        bytes calldata /* data */\n    ) external pure override returns (bytes4) {\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\n    }\n\n    function onERC1155BatchReceived(\n        address /* operator */,\n        address /* from */,\n        uint256[] calldata /* ids */,\n        uint256[] calldata /* values */,\n        bytes calldata /* data */\n    ) external pure override returns (bytes4) {\n        return bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"));\n    }\n\n    function _ERC1155Transfer(\n        address tokenContract,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        require(tokenContract != address(0), \"ERC1155Vault: zero token address\");\n        require(to != address(0), \"ERC1155Vault: cannot transfer to zero\");\n\n        IERC1155(tokenContract).safeTransferFrom(address(this), to, tokenId, amount, \"\");\n        emit ERC1155Transferred(tokenContract, to, tokenId, amount);\n    }\n\n    function _ERC1155SetApprovalForAll(\n        address tokenContract,\n        address operator,\n        bool approved\n    ) internal {\n        require(tokenContract != address(0), \"ERC1155Vault: zero token address\");\n        require(operator != address(0), \"ERC1155Vault: zero address for operator\");\n\n        IERC1155(tokenContract).setApprovalForAll(operator, approved);\n        emit ERC1155ApprovedForAll(tokenContract, operator, approved);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}