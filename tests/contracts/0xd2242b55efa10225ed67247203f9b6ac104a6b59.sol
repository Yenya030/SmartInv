{{
  "language": "Solidity",
  "sources": {
    "contracts/FixStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./lib/UintSet.sol\";\n\ncontract FixStaking is AccessControl, Pausable {\n    using UintSet for Set;\n\n    event RemovePool(uint256 poolIndex);\n    event SetMinMax(uint256 minStake, uint256 maxStake);\n    event SetPenDay(uint256 penaltyDuration);\n    event PoolFunded(uint256 poolIndex, uint256 fundAmount);\n    event ReserveWithdrawed(uint256 poolIndex);\n    event Claimed(\n        address user,\n        uint256 depositAmountIncludePen,\n        uint256 reward,\n        uint256 stakerIndex,\n        uint256 poolIndex\n    );\n    event Deposit(\n        address indexed staker,\n        uint256 amount,\n        uint256 startTime,\n        uint256 closedTime,\n        uint256 indexed poolIndex,\n        uint256 indexed stakerIndex\n    );\n\n    event Restake(\n        address indexed staker,\n        uint256 amount,\n        uint256 indexed poolIndex,\n        uint256 indexed stakerIndex\n    );\n\n    event Withdraw(\n        address indexed staker,\n        uint256 withdrawAmount,\n        uint256 reward,\n        uint256 mainPenaltyAmount,\n        uint256 subPenaltyAmount,\n        uint256 indexed poolIndex,\n        uint256 indexed stakerIndex\n    );\n\n    event EmergencyWithdraw(\n        address indexed staker,\n        uint256 withdrawAmount,\n        uint256 reward,\n        uint256 mainPenaltyAmount,\n        uint256 subPenaltyAmount,\n        uint256 indexed poolIndex,\n        uint256 indexed stakerIndex\n    );\n    event NewPool(\n        uint256 indexed poolIndex,\n        uint256 startTime,\n        uint256 duration,\n        uint256 apy,\n        uint256 mainPenaltyRate,\n        uint256 subPenaltyRate,\n        uint256 lockedLimit,\n        uint256 promisedReward,\n        bool nftReward\n    );\n\n    struct PoolInfo {\n        uint256 startTime;\n        uint256 duration;\n        uint256 apy;\n        uint256 mainPenaltyRate;\n        uint256 subPenaltyRate;\n        uint256 lockedLimit;\n        uint256 stakedAmount;\n        uint256 reserve;\n        uint256 promisedReward;\n        bool nftReward;\n    }\n\n    struct StakerInfo {\n        uint256 poolIndex;\n        uint256 startTime;\n        uint256 amount;\n        uint256 lastIndex;\n        uint256 pendingStart;\n        uint256 reward;\n        bool isFinished;\n        bool pendingRequest;\n    }\n\n    mapping(address => mapping(uint256 => StakerInfo)) public stakers;\n    mapping(address => uint256) public currentStakerIndex;\n\n    // user address => pool index => total deposit amount\n    mapping(address => mapping(uint256 => uint256)) public amountByPool;\n\n    // Minumum amount the user can deposit in 1 pool.We will not look at the total amount deposited by the user into the pool.\n    uint256 public minStake;\n\n    // Maximum amount the user can deposit in 1 pool. We will look at the total amount the user deposited into the pool.\n    uint256 public maxStake;\n\n    // Time for penalized users have to wait.\n    uint256 public penaltyDuration;\n    // Pool Index => Pool Info\n    PoolInfo[] public pools;\n\n    IERC20 public token;\n    uint256 private unlocked = 1;\n\n    /**\n     * @notice Checks if the pool exists\n     */\n    modifier isPoolExist(uint256 _poolIndex) {\n        require(\n            pools[_poolIndex].startTime > 0,\n            \"isPoolExist: This pool not exist\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Checks if the already finish.\n     */\n    modifier isFinished(address _user, uint256 _stakerIndex) {\n        StakerInfo memory staker = stakers[_user][_stakerIndex];\n        require(\n            staker.isFinished == false,\n            \"isFinished: This index already finished.\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Check if these values are valid\n     */\n    modifier isValid(\n        uint256 _startTime,\n        uint256 _duration,\n        uint256 _apy\n    ) {\n        require(\n            _startTime >= block.timestamp,\n            \"isValid: Start time must be greater than current time\"\n        );\n        require(_duration != 0, \"isValid: duration can not be ZERO.\");\n        require(_apy != 0, \"isValid: Apy can not be ZERO.\");\n\n        _;\n    }\n\n    modifier lock() {\n        require(unlocked == 1, \"FixStaking: LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    constructor(address _token) {\n        require(_token != address(0), \"FixStaking: token can not be ZERO.\");\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        token = IERC20(_token);\n    }\n\n    /**\n     * Pauses the contract\n     */\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * removes the pause\n     */\n    function unPause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * Sets minumum and maximum deposit amount for user\n     */\n    function setMinMaxStake(uint256 _minStake, uint256 _maxStake)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            _minStake >= 0,\n            \"setMinMaxStake: minumum amount cannot be ZERO\"\n        );\n        require(\n            _maxStake > _minStake,\n            \"setMinMaxStake: maximum amount cannot be lower than minimum amount\"\n        );\n\n        minStake = _minStake;\n        maxStake = _maxStake;\n        emit SetMinMax(_minStake, _maxStake);\n    }\n\n    /**\n     * Admin can set penalty time with this function\n     * @param _duration penalty time in seconds\n     */\n    function setPenaltyDuration(uint256 _duration)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            _duration <= 5 days,\n            \"setPenaltyDuration: duration must be less than 5 days\"\n        );\n        penaltyDuration = _duration;\n\n        emit SetPenDay(_duration);\n    }\n\n    /**\n     * Admin has to fund the pool for rewards. Using this function, he can finance any pool he wants.\n     * @param _poolIndex the index of the pool it wants to fund.\n     * @param _fundingAmount amount of funds to be added to the pool.\n     */\n    function fundPool(uint256 _poolIndex, uint256 _fundingAmount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        isPoolExist(_poolIndex)\n    {\n        require(\n            token.transferFrom(msg.sender, address(this), _fundingAmount),\n            \"fundPool: token transfer failed.\"\n        );\n\n        pools[_poolIndex].reserve += _fundingAmount;\n\n        emit PoolFunded(_poolIndex, _fundingAmount);\n    }\n\n    /**\n     * Used when tokens are accidentally sent to the contract.\n     * @param _token address will be recover.\n     */\n    function withdrawERC20(address _token, uint256 _amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            _token != address(token),\n            \"withdrawERC20: token can not be Reward Token.\"\n        );\n        require(\n            IERC20(_token).transfer(msg.sender, _amount),\n            \"withdrawERC20: Transfer failed\"\n        );\n    }\n\n    function withdrawFunds(uint256 _poolIndex, uint256 _amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        PoolInfo memory pool = pools[_poolIndex];\n        require(\n            pool.reserve - pool.promisedReward >= _amount,\n            \"withdrawFunds: Amount should be lower that promised rewards.\"\n        );\n\n        require(\n            token.transferFrom(msg.sender, address(this), _amount),\n            \"withdrawFunds: token transfer failed.\"\n        );\n    }\n\n    /**\n     * With this function, the administrator can create an interest period.\n     * Periods of 30 - 90 - 365 days can be created.\n     *\n     * Example:\n     * -------------------------------------\n     * | Apy ve altındakiler 1e16 %1 olacak şekilde ayarlanır.\n     * | duration = 2592000                   => 30  Days\n     * | apy = 100000000000000000             => %10 Monthly\n     * | mainPenaltyRate = 100000000000000000 => %10 Main penalty rate\n     * | subPenaltyRate = 50000000000000000   => %5  Sub penalty rate\n     * |\n     *  -------------------------------------\n     *\n     * @param _startTime in seconds.\n     * @param _duration in seconds.\n     * @param _apy 1 month rate should be 18 decimal.\n     * @param _mainPenaltyRate Percentage of penalty to be deducted from the user's deposit amount.\n     * @param _subPenaltyRate Percentage of penalty to be deducted from the reward won by the user.\n     */\n    function createPool(\n        uint256 _startTime,\n        uint256 _duration,\n        uint256 _apy,\n        uint256 _mainPenaltyRate,\n        uint256 _subPenaltyRate,\n        uint256 _lockedLimit,\n        bool _nftReward\n    )\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        isValid(_startTime, _duration, _apy)\n    {\n        PoolInfo memory pool = PoolInfo(\n            _startTime,\n            _duration,\n            _apy,\n            _mainPenaltyRate,\n            _subPenaltyRate,\n            _lockedLimit,\n            0,\n            0,\n            0,\n            _nftReward\n        );\n\n        pools.push(pool);\n\n        uint256 poolIndex = pools.length - 1;\n\n        emit NewPool(\n            poolIndex,\n            _startTime,\n            _duration,\n            _apy,\n            _mainPenaltyRate,\n            _subPenaltyRate,\n            _lockedLimit,\n            pool.promisedReward,\n            _nftReward\n        );\n    }\n\n    /**\n     * The created period can be edited by the admin.\n     * @param _poolIndex the index of the pool to be edited.\n     * @param _startTime pool start time in seconds.\n     * @param _duration pool duration time in seconds.\n     * @param _apy the new apy ratio.\n     * @param _mainPenaltyRate the new main penalty rate.\n     * @param _subPenaltyRate the new sub penalty rate.\n     * @param _lockedLimit maximum amount of tokens that can be locked for this pool\n     * @dev Reverts if the pool is not empty.\n     * @dev Reverts if the pool is not created before.\n     */\n    function editPool(\n        uint256 _poolIndex,\n        uint256 _startTime,\n        uint256 _duration,\n        uint256 _apy,\n        uint256 _mainPenaltyRate,\n        uint256 _subPenaltyRate,\n        uint256 _lockedLimit,\n        bool _nftReward\n    )\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        isPoolExist(_poolIndex)\n        isValid(_startTime, _duration, _apy)\n    {\n        require(\n            _mainPenaltyRate == 0,\n            \"editPool: main penalty rate must be equal to 0\"\n        );\n        PoolInfo storage pool = pools[_poolIndex];\n\n        pool.startTime = _startTime;\n        pool.duration = _duration;\n        pool.apy = _apy;\n        pool.mainPenaltyRate = _mainPenaltyRate;\n        pool.subPenaltyRate = _subPenaltyRate;\n        pool.lockedLimit = _lockedLimit;\n        pool.nftReward = _nftReward;\n\n        emit NewPool(\n            _poolIndex,\n            _startTime,\n            _duration,\n            _apy,\n            _mainPenaltyRate,\n            _subPenaltyRate,\n            _lockedLimit,\n            pool.promisedReward,\n            _nftReward\n        );\n    }\n\n    /**\n     * The created period can be remove by the admin.\n     * @param _poolIndex the index of the to be removed pool.\n     * @dev Reverts if the pool is not empty.\n     * @dev Reverts if the pool is not created before.\n     */\n    function removePool(uint256 _poolIndex)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        isPoolExist(_poolIndex)\n    {\n        if (pools[_poolIndex].reserve > 0) {\n            require(\n                token.transfer(msg.sender, pools[_poolIndex].reserve),\n                \"removePool: transfer failed.\"\n            );\n        }\n\n        delete pools[_poolIndex];\n\n        emit RemovePool(_poolIndex);\n    }\n\n    /**\n     * Users can deposit money into any pool they want.\n     * @notice Each time the user makes a deposit, the structer is kept at a different stakerIndex so it can be in more than one or the same pool at the same time.\n     * @notice Users can join the same pool more than once at the same time.\n     * @notice Users can join different pools at the same time.\n     * @param _amount amount of money to be deposited.\n     * @param _poolIndex index of the period to be entered.\n     * @dev reverts if the user tries to deposit it less than the minimum amount.\n     * @dev reverts if the user tries to deposit more than the maximum amount into the one pool.\n     * @dev reverts if the pool does not have enough funds.\n     */\n    function deposit(uint256 _amount, uint256 _poolIndex)\n        external\n        whenNotPaused\n        lock\n        isPoolExist(_poolIndex)\n    {\n        uint256 index = currentStakerIndex[msg.sender];\n        StakerInfo storage staker = stakers[msg.sender][index];\n        PoolInfo storage pool = pools[_poolIndex];\n        uint256 reward = calculateRew(_amount, pool.apy, pool.duration);\n        uint256 totStakedAmount = pool.stakedAmount + _amount;\n        pool.promisedReward += reward;\n        require(\n            _amount >= minStake,\n            \"deposit: You cannot deposit below the minimum amount.\"\n        );\n\n        require(\n            (amountByPool[msg.sender][_poolIndex] + _amount) <= maxStake,\n            \"deposit: You cannot deposit, have reached the maximum deposit amount.\"\n        );\n        require(\n            pool.reserve >= reward,\n            \"deposit: This pool has no enough reward reserve\"\n        );\n        require(\n            pool.lockedLimit >= totStakedAmount,\n            \"deposit: The pool has reached its maximum capacity.\"\n        );\n\n        require(\n            block.timestamp >= pool.startTime,\n            \"deposit: This pool hasn't started yet.\"\n        );\n\n        uint256 duration = pool.duration;\n        uint256 timestamp = block.timestamp;\n\n        require(\n            token.transferFrom(msg.sender, address(this), _amount),\n            \"deposit: Token transfer failed.\"\n        );\n\n        staker.startTime = timestamp;\n        staker.amount = _amount;\n        staker.poolIndex = _poolIndex;\n        pool.stakedAmount += _amount;\n\n        currentStakerIndex[msg.sender] += 1;\n        amountByPool[msg.sender][_poolIndex] += _amount;\n\n        emit Deposit(\n            msg.sender,\n            _amount,\n            timestamp,\n            (timestamp + duration),\n            _poolIndex,\n            index\n        );\n    }\n\n    /**\n     * Users can exit the period they are in at any time.\n     * @notice Users who are not penalized can withdraw their money directly with this function. Users who are penalized should execut the claimPending function after this process.\n     * @notice If the period has not finished, they will be penalized at the rate of mainPeanltyRate from their deposit.\n     * @notice If the period has not finished, they will be penalized at the rate of subPenaltyRate from their rewards.\n     * @notice Penalized users will be able to collect their rewards later with the claim function.\n     * @param _stakerIndex of the period want to exit.\n     * @dev reverts if the user's deposit amount is ZERO\n     * @dev reverts if the pool does not have enough funds to cover the reward\n     */\n    function withdraw(uint256 _stakerIndex)\n        external\n        whenNotPaused\n        lock\n        isFinished(msg.sender, _stakerIndex)\n    {\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\n        PoolInfo storage pool = pools[staker.poolIndex];\n\n        require(\n            staker.pendingRequest == false,\n            \"withdraw: you have already requested claim.\"\n        );\n        require(staker.amount > 0, \"withdraw: Insufficient amount.\");\n\n        uint256 closedTime = getClosedTime(msg.sender, _stakerIndex);\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\n        uint256 reward = calculateRew(staker.amount, pool.apy, duration);\n        // If the user tries exits before the pool end time they should be penalized\n        (uint256 mainPen, uint256 subPen) = getPenalty(\n            msg.sender,\n            _stakerIndex\n        );\n        uint256 totalReward = (reward - subPen);\n        uint256 totalWithdraw = (staker.amount + totalReward);\n\n        staker.reward = totalReward;\n        pool.reserve -= staker.reward;\n        pool.promisedReward = pool.promisedReward <= totalReward\n            ? 0\n            : pool.promisedReward - totalReward;\n\n        pool.stakedAmount -= staker.amount;\n        amountByPool[msg.sender][staker.poolIndex] -= staker.amount;\n        // ELSE user tries withdraw before the period end time he needs to be wait cooldown\n\n        if (closedTime <= block.timestamp) {\n            _transferAndRemove(msg.sender, totalWithdraw, _stakerIndex);\n        } else {\n            staker.pendingStart = block.timestamp;\n            staker.pendingRequest = true;\n        }\n\n        emit Withdraw(\n            msg.sender,\n            totalReward,\n            totalWithdraw,\n            mainPen,\n            subPen,\n            staker.poolIndex,\n            _stakerIndex\n        );\n    }\n\n    /**\n     * After the user has completed enough duration in the pool, he can stake to the same pool again with this function.\n     * @notice The same stakerIndex is used to save gas.\n     * @notice The reward he won from the pool will be added to the amount he deposited.\n     */\n    function restake(uint256 _stakerIndex)\n        external\n        whenNotPaused\n        lock\n        isFinished(msg.sender, _stakerIndex)\n    {\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\n        PoolInfo storage pool = pools[staker.poolIndex];\n\n        uint256 poolIndex = staker.poolIndex;\n        uint256 closedTime = getClosedTime(msg.sender, _stakerIndex);\n\n        require(staker.amount > 0, \"restake: Insufficient amount.\");\n        require(\n            staker.pendingRequest == false,\n            \"restake: You have already requested claim.\"\n        );\n        require(\n            block.timestamp >= closedTime,\n            \"restake: Time has not expired.\"\n        );\n\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\n        uint256 reward = calculateRew(staker.amount, pool.apy, duration);\n        uint256 totalDeposit = staker.amount + reward;\n        uint256 promisedReward = calculateRew(\n            totalDeposit,\n            pool.apy,\n            pool.duration\n        );\n        pool.promisedReward += promisedReward;\n        // we are checking only reward because staker amount currently staked.\n        require(\n            pool.reserve >=\n                calculateRew(\n                    pool.stakedAmount + reward,\n                    pool.apy,\n                    pool.duration\n                ),\n            \"restake: This pool has no enough reward reserve\"\n        );\n\n        require(\n            (amountByPool[msg.sender][poolIndex] + reward) <= maxStake,\n            \"restake: You cannot deposit, have reached the maximum deposit amount.\"\n        );\n\n        pool.stakedAmount += reward;\n        staker.startTime = block.timestamp;\n        staker.amount = totalDeposit;\n        amountByPool[msg.sender][poolIndex] += reward;\n\n        emit Restake(msg.sender, totalDeposit, poolIndex, _stakerIndex);\n    }\n\n    /**\n     * @notice Emergency function\n     * Available only when the contract is paused. Users can withdraw their inside amount without receiving the rewards.\n     */\n    function emergencyWithdraw(uint256 _stakerIndex)\n        external\n        whenPaused\n        isFinished(msg.sender, _stakerIndex)\n    {\n        StakerInfo memory staker = stakers[msg.sender][_stakerIndex];\n        PoolInfo storage pool = pools[staker.poolIndex];\n\n        require(staker.amount > 0, \"withdraw: Insufficient amount.\");\n\n        uint256 withdrawAmount = staker.amount;\n        pool.stakedAmount -= withdrawAmount;\n        pool.promisedReward -= calculateRew(\n            withdrawAmount,\n            pool.apy,\n            pool.duration\n        );\n        amountByPool[msg.sender][staker.poolIndex] -= withdrawAmount;\n        _transferAndRemove(msg.sender, withdrawAmount, _stakerIndex);\n        emit EmergencyWithdraw(\n            msg.sender,\n            withdrawAmount,\n            staker.reward,\n            pool.mainPenaltyRate,\n            pool.subPenaltyRate,\n            staker.poolIndex,\n            _stakerIndex\n        );\n    }\n\n    /**\n     * Users who have been penalized can withdraw their tokens with this function when the 4-day penalty period expires.\n     * @param _stakerIndex of the period want to claim.\n     */\n    function claimPending(uint256 _stakerIndex)\n        external\n        whenNotPaused\n        lock\n        isFinished(msg.sender, _stakerIndex)\n    {\n        StakerInfo storage staker = stakers[msg.sender][_stakerIndex];\n        PoolInfo memory pool = pools[staker.poolIndex];\n\n        require(staker.amount > 0, \"claim: You do not have a pending amount.\");\n\n        require(\n            block.timestamp >= staker.pendingStart + penaltyDuration,\n            \"claim: Please wait your time has not been up.\"\n        );\n\n        uint256 mainAmount = staker.amount;\n        // If a penalty rate is defined that will be deducted from the amount deposited by the user\n        // Deduct this penalty from the amount deposited by the user and transfer the penalty amount to the reward reserve.\n        if (pool.mainPenaltyRate > 0) {\n            (uint256 mainPen, ) = getPenalty(msg.sender, _stakerIndex);\n            mainAmount = mainAmount - mainPen;\n            pool.reserve += mainPen;\n        }\n\n        staker.pendingRequest = false;\n\n        // There is no need to deduct the amount from the reward earned as much as the penalty rate.\n        // We already did in the withdraw function.\n        uint256 totalPending = mainAmount + staker.reward;\n        pool.promisedReward -= staker.reward;\n\n        _transferAndRemove(msg.sender, totalPending, _stakerIndex);\n\n        emit Claimed(\n            msg.sender,\n            mainAmount,\n            staker.reward,\n            _stakerIndex,\n            staker.poolIndex\n        );\n    }\n\n    /**\n     * Returns the penalty, if any, of the user whose address and index are given.\n     * @param _staker address of the person whose penalty will be calculated.\n     * @param _stakerIndex user index to be calculated.\n     * @return mainPenalty penalty amount, to be deducted from the deposited amount by the user.\n     * @return subPenalty penalty amount, to be deducted from the reward amount.\n     */\n    function getPenalty(address _staker, uint256 _stakerIndex)\n        public\n        view\n        returns (uint256 mainPenalty, uint256 subPenalty)\n    {\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\n        PoolInfo memory pool = pools[staker.poolIndex];\n\n        uint256 closedTime = getClosedTime(_staker, _stakerIndex);\n        if (closedTime > block.timestamp) {\n            uint256 duration = block.timestamp - staker.startTime;\n            uint256 reward = calculateRew(staker.amount, pool.apy, duration);\n            uint256 amountPen = (staker.amount * pool.mainPenaltyRate) / 1e18;\n            uint256 rewardPen = (reward * pool.subPenaltyRate) / 1e18;\n\n            return (amountPen, rewardPen);\n        }\n        return (0, 0);\n    }\n\n    /**\n     * Calculates the current reward of the user whose address and index are given.\n     * @param _amount amount of deposit.\n     * @param _apy monthly rate.\n     * @param _duration amount of time spent inside.\n     * @return reward amount of earned by the user.\n     */\n    function calculateRew(\n        uint256 _amount,\n        uint256 _apy,\n        uint256 _duration\n    ) public pure returns (uint256) {\n        uint256 rateToSec = (_apy * 1e36) / 30 days;\n        uint256 percent = (rateToSec * _duration) / 1e18;\n        return (_amount * percent) / 1e36;\n    }\n\n    /**\n     * Calculates the current reward of the user whose address and index are given.\n     * @param _staker address of the person whose reward will be calculated.\n     * @param _stakerIndex user index to be calculated.\n     * @return reward amount of earned by the user.\n     * @return mainPenalty penalty amount, to be deducted from the deposited amount by the user.\n     * @return subPenalty penalty amount, to be deducted from the reward amount.\n     * @return closedTime user end time.\n     * @return futureReward reward for completing the pool\n     * @return stakerInf Information owned by the user for this index.\n     */\n    function stakerInfo(address _staker, uint256 _stakerIndex)\n        external\n        view\n        returns (\n            uint256 reward,\n            uint256 mainPenalty,\n            uint256 subPenalty,\n            uint256 closedTime,\n            uint256 futureReward,\n            StakerInfo memory stakerInf\n        )\n    {\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\n        PoolInfo memory pool = pools[staker.poolIndex];\n\n        closedTime = getClosedTime(_staker, _stakerIndex);\n        uint256 duration = _getStakerDuration(closedTime, staker.startTime);\n        reward = calculateRew(staker.amount, pool.apy, duration);\n        (mainPenalty, subPenalty) = getPenalty(_staker, _stakerIndex);\n        futureReward = calculateRew(staker.amount, pool.apy, pool.duration);\n\n        return (\n            reward,\n            mainPenalty,\n            subPenalty,\n            closedTime,\n            futureReward,\n            staker\n        );\n    }\n\n    function getClosedTime(address _staker, uint256 _stakerIndex)\n        public\n        view\n        returns (uint256)\n    {\n        StakerInfo memory staker = stakers[_staker][_stakerIndex];\n        PoolInfo memory pool = pools[staker.poolIndex];\n\n        uint256 closedTime = staker.startTime + pool.duration;\n\n        return closedTime;\n    }\n\n    /**\n     * Returns the available allocation for the given pool index.\n     */\n    function getAvaliableAllocation(uint256 _poolIndex)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory pool = pools[_poolIndex];\n\n        return pool.lockedLimit - pool.stakedAmount;\n    }\n\n    /**\n     * Returns a list of all pools.\n     */\n    function getPoolList() external view returns (PoolInfo[] memory) {\n        return pools;\n    }\n\n    /**\n     * Returns the total staked amount and remaining allocation all pools.\n     * @notice We are aware of the gas problem that will occur with the for loop here. This won't be a problem as we won't have more than 10-20 pools.\n     */\n    function getTotStakedAndAlloc()\n        external\n        view\n        returns (uint256 totStakedAmount, uint256 totAlloc)\n    {\n        for (uint256 i = 0; i < pools.length; i++) {\n            PoolInfo memory pool = pools[i];\n\n            totStakedAmount += pool.stakedAmount;\n            totAlloc += pool.lockedLimit - pool.stakedAmount;\n        }\n\n        return (totStakedAmount, totAlloc);\n    }\n\n    function _getStakerDuration(uint256 _closedTime, uint256 _startTime)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 endTime = block.timestamp > _closedTime\n            ? _closedTime\n            : block.timestamp;\n        uint256 duration = endTime - _startTime;\n\n        return duration;\n    }\n\n    function _transferAndRemove(\n        address _user,\n        uint256 _transferAmount,\n        uint256 _stakerIndex\n    ) private {\n        StakerInfo storage staker = stakers[_user][_stakerIndex];\n        require(\n            token.transfer(_user, _transferAmount),\n            \"_transferAndRemove: transfer failed.\"\n        );\n\n        staker.isFinished = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/lib/UintSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nstruct Set {\n    // Storage of set values\n    uint256[] _values;\n    // Position of the value in the `values` array, plus 1 because index 0\n    // means a value is not in the set.\n    mapping(uint256 => uint256) _indexes;\n}\n\nlibrary UintSet {\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Set storage set, uint256 value) internal returns (bool) {\n        if (!contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Set storage set, uint256 value) internal returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                uint256 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Set storage set, uint256 value)\n        internal\n        view\n        returns (bool)\n    {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(Set storage set) internal view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Set storage set, uint256 index)\n        internal\n        view\n        returns (uint256)\n    {\n        return set._values[index];\n    }\n\n    function getArray(Set storage set)\n        internal\n        view\n        returns (uint256[] memory)\n    {\n        return set._values;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}