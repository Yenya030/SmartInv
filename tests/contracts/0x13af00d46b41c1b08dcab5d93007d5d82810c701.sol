{{
  "language": "Solidity",
  "sources": {
    "/contracts/WhitelistPing/Subscriptions/WLPSubscriptions.sol": {
      "content": "\n// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../../Common/Delegated.sol\";\n\ninterface IERC721WLP{\n  function balanceOf(address) external returns(uint256);\n}\n\ninterface IERC1155WLP{\n  function balanceOf(address, uint256) external returns(uint256);\n}\n\ncontract WLPSubscriptions is Delegated, ReentrancyGuard{\n  event CollectionUpdate(address indexed collection, bool isActive, uint256 price);\n  event SubscriptionUpdate(address indexed account, uint32 started, uint32 expires);\n\n  using Address for address;\n\n  uint256 constant public ERC721 = 1;\n  uint256 constant public ERC1155 = 2;\n\n  struct CollectionSettings{\n    uint256 ethPrice;\n\n    address payable royaltyReceiver;\n    uint16 royaltyNum;\n    uint16 royaltyDenom;\n\n    uint32 duration;\n    uint16 index;\n    bool isActive;\n\n    address collectionAddress;\n    uint8 collectionType;\n    uint8 collectionId;\n  }\n\n  struct Subscription{\n    uint256 value;\n    uint32 created;\n    uint32 started;\n    uint32 expires;\n  }\n\n  bytes22[] public collections;\n  mapping( bytes22 => CollectionSettings ) public collectionSettings;\n  mapping( address => Subscription ) public subscriptions;\n\n  constructor()\n    Delegated()\n    ReentrancyGuard()\n    //solhint-disable-next-line no-empty-blocks\n  {\n    collections.push();\n  }\n\n\n  //safety first\n  receive() external payable {}\n\n  function withdraw() external onlyOwner {\n    require(address(this).balance >= 0, \"No funds available\");\n    Address.sendValue(payable(owner()), address(this).balance);\n  }\n\n\n  //view\n  function getCollectionKey(address collection, uint16 tokenId) public pure returns(bytes22){\n    return bytes22((uint176(uint160(collection)) << 16) + tokenId);\n  }\n\n  function getSubscription(address account) external view returns( Subscription memory ){\n    if( block.timestamp < subscriptions[ account ].expires  ){\n      return subscriptions[ account ];\n    }\n    else{\n      //expired\n      return subscriptions[address(0)];\n    }\n  }\n\n  function countCollections() external view returns(uint256){\n    return collections.length - 1;\n  }\n\n  function listCollections(uint256 start, uint256 count) external view returns(CollectionSettings[] memory activeCollections){\n    if( start == 0 )\n      ++start;\n\n    uint256 index = 0;\n    uint256 end = start + count;\n    if(collections.length < end){\n      end = collections.length;\n      count = end - start;\n    }\n\n    activeCollections = new CollectionSettings[](count);\n    for(uint256 i = start; i < end; ++i){\n      activeCollections[index++] = collectionSettings[collections[i]];\n    }\n  }\n\n\n  //payable\n  function subscribe( address collection, uint16 tokenId, uint16 periods ) external payable nonReentrant{\n    CollectionSettings memory cfg = collectionSettings[getCollectionKey(collection, tokenId)];\n    require( cfg.isActive,                        \"Sales/Subscriptions are currently closed\" );\n    require( msg.value == periods * cfg.ethPrice, \"Not enough ETH for selected duration\" );\n\n    if(cfg.collectionType == ERC721)\n      require( IERC721WLP(collection).balanceOf(msg.sender) > 0, \"Not a token holder\" );\n    else if(cfg.collectionType == ERC1155)\n      require( IERC1155WLP(collection).balanceOf(msg.sender, cfg.collectionId) > 0, \"Not a token holder\" );\n    else\n      revert(\"Unsupported collection/token\");\n\n    uint32 seconds_ = uint32( periods * cfg.duration );\n    _updateSubscription( seconds_, msg.sender );\n\n    uint256 royaltyAmount = msg.value * cfg.royaltyNum / cfg.royaltyDenom;\n    Address.sendValue(cfg.royaltyReceiver,royaltyAmount);\n  }\n\n\n  //payable onlyDelegates\n  function gift(uint32[] calldata seconds_, address[] calldata accounts) external payable onlyDelegates {\n    for(uint256 i = 0; i < seconds_.length; ++i){\n      _updateSubscription(seconds_[i], accounts[i]);\n    }\n  }\n\n  function refund(address payable account, uint256 value, bool setExpired) external payable nonReentrant onlyDelegates {\n    require(value < address( this ).balance, \"Not enough ETH on contract\");\n    require(value <= subscriptions[ account ].value, \"Refund exceeds cost\");\n\n    if(setExpired){\n      uint32 expires = uint32(block.timestamp);\n      uint32 started = subscriptions[ account ].started;\n      subscriptions[ account ].expires = expires;\n      emit SubscriptionUpdate(account, started, expires);\n    }\n\n    Address.sendValue(account, value);\n  }\n\n\n  //writable onlyDelegates\n  function setCollection( CollectionSettings memory newConfig ) external onlyDelegates{\n    bytes22 collectionKey = getCollectionKey(newConfig.collectionAddress, newConfig.collectionId);\n    CollectionSettings memory prevConfig = collectionSettings[ collectionKey ];\n    if( prevConfig.index == 0 ){\n      newConfig.index = uint16(collections.length);\n      collections.push( collectionKey );\n    }\n    else{\n      newConfig.index = prevConfig.index;\n    }\n\n    collectionSettings[ collectionKey ] = newConfig;\n    emit CollectionUpdate(newConfig.collectionAddress, newConfig.isActive, newConfig.ethPrice);\n  }\n\n\n  //internal\n  function _updateSubscription( uint32 seconds_, address account ) internal {\n    uint32 ts = uint32( block.timestamp );\n    Subscription memory sub = subscriptions[ account ];\n\n    //new subscription\n    if( sub.created == 0 ){\n      subscriptions[ account ] = Subscription(\n        msg.value,\n        ts,\n        ts,\n        ts + seconds_\n      );\n      emit SubscriptionUpdate(account, ts, ts + seconds_);\n    }\n    //expired re-sub\n    else if( sub.expires < ts ){\n      subscriptions[ account ] = Subscription(\n        msg.value,\n        sub.created,\n        ts,\n        ts + seconds_\n      );\n      emit SubscriptionUpdate(account, ts, ts + seconds_);\n    }\n    //extension\n    else{\n      subscriptions[ account ] = Subscription(\n        sub.value + msg.value,\n        sub.created,\n        sub.started,\n        sub.expires + seconds_\n      );\n      emit SubscriptionUpdate(account, sub.started, sub.expires + seconds_);\n    }\n  }\n}\n"
    },
    "/contracts/Common/Delegated.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable{\n  mapping(address => bool) internal _delegates;\n\n  modifier onlyContracts {\n    require(_delegates[msg.sender], \"Unauthorized delegate\" );\n    require(msg.sender.code.length > 0, \"Non-contract delegate\" );\n    _;\n  }\n\n  modifier onlyDelegates {\n    require(_delegates[msg.sender], \"Unauthorized delegate\" );\n    _;\n  }\n\n  constructor()\n    Ownable(){\n    setDelegate(owner(), true);\n  }\n\n  //onlyOwner\n  function isDelegate(address addr) external view onlyOwner returns(bool) {\n    return _delegates[addr];\n  }\n\n  function setDelegate(address addr, bool isDelegate_) public onlyOwner {\n    _delegates[addr] = isDelegate_;\n  }\n\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\n    setDelegate(newOwner, true);\n    super.transferOwnership(newOwner);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}