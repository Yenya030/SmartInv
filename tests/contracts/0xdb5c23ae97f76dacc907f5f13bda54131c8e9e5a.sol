{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/IncentivesControllerV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IMultiFeeDistribution.sol\";\nimport \"./interfaces/IOnwardIncentivesController.sol\";\nimport \"./interfaces/IChefIncentivesController.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract IncentivesControllerV2 is Ownable {\n  using SafeMath for uint;\n  using SafeERC20 for IERC20;\n\n  // Info of each user.\n  struct UserInfo {\n    uint amount;\n    uint rewardDebt;\n  }\n  // Info of each pool.\n  struct PoolInfo {\n    uint totalSupply;\n    uint allocPoint; // How many allocation points assigned to this pool.\n    uint lastRewardTime; // Last second that reward distribution occurs.\n    uint accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\n    IOnwardIncentivesController onwardIncentives;\n  }\n  // Info about token emissions for a given time period.\n  struct EmissionPoint {\n    uint128 startTimeOffset;\n    uint128 rewardsPerSecond;\n  }\n\n  address public poolConfigurator;\n\n  IMultiFeeDistribution public rewardMinter;\n  IChefIncentivesController public immutable incentivesController;\n  uint public rewardsPerSecond;\n  uint public immutable maxMintableTokens;\n  uint public mintedTokens;\n\n  // Info of each pool.\n  address[] public registeredTokens;\n  mapping(address => PoolInfo) public poolInfo;\n\n  // Data about the future reward rates. emissionSchedule stored in reverse chronological order,\n  // whenever the number of blocks since the start block exceeds the next block offset a new\n  // reward rate is applied.\n  EmissionPoint[] public emissionSchedule;\n  // token => user => Info of each user that stakes LP tokens.\n  mapping(address => mapping(address => UserInfo)) public userInfo;\n  // user => base claimable balance\n  mapping(address => uint) public userBaseClaimable;\n  // Total allocation poitns. Must be the sum of all allocation points in all pools.\n  uint public totalAllocPoint = 0;\n  // The block number when reward mining starts.\n  uint public startTime;\n\n  // account earning rewards => receiver of rewards for this account\n  // if receiver is set to address(0), rewards are paid to the earner\n  // this is used to aid 3rd party contract integrations\n  mapping (address => address) public claimReceiver;\n\n  event BalanceUpdated(\n    address indexed token,\n    address indexed user,\n    uint balance,\n    uint totalSupply\n  );\n\n  bool private setuped;\n  mapping(address => mapping(address => bool)) private userInfoInitiated;\n  mapping(address => bool) private userBaseClaimableInitiated;\n\n  constructor(\n    uint128[] memory _startTimeOffset,\n    uint128[] memory _rewardsPerSecond,\n    address _poolConfigurator,\n    IMultiFeeDistribution _rewardMinter,\n    uint _maxMintable,\n    IChefIncentivesController _incentivesController\n  ) {\n    poolConfigurator = _poolConfigurator;\n    rewardMinter = _rewardMinter;\n    uint length = _startTimeOffset.length;\n    for (uint i = length; i > 0; i--) {\n      emissionSchedule.push(\n        EmissionPoint({\n          startTimeOffset: _startTimeOffset[i - 1],\n          rewardsPerSecond: _rewardsPerSecond[i - 1]\n        })\n      );\n    }\n    maxMintableTokens = _maxMintable;\n    incentivesController = _incentivesController;\n  }\n\n  // Start the party\n  function start() public onlyOwner {\n    require(startTime == 0);\n    startTime = block.timestamp;\n  }\n\n  // Add a new lp to the pool. Can only be called by the poolConfigurator.\n  function addPool(address _token, uint _allocPoint) external {\n    require(msg.sender == poolConfigurator);\n    require(poolInfo[_token].lastRewardTime == 0);\n    _updateEmissions();\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\n    registeredTokens.push(_token);\n    poolInfo[_token] = PoolInfo({\n      totalSupply: 0,\n      allocPoint: _allocPoint,\n      lastRewardTime: block.timestamp,\n      accRewardPerShare: 0,\n      onwardIncentives: IOnwardIncentivesController(address(0))\n    });\n  }\n\n  // Update the given pool's allocation point. Can only be called by the owner.\n  function batchUpdateAllocPoint(\n    address[] calldata _tokens,\n    uint[] calldata _allocPoints\n  ) public onlyOwner {\n    require(_tokens.length == _allocPoints.length);\n    _massUpdatePools();\n    uint _totalAllocPoint = totalAllocPoint;\n    for (uint i = 0; i < _tokens.length; i++) {\n      PoolInfo storage pool = poolInfo[_tokens[i]];\n      require(pool.lastRewardTime > 0);\n      _totalAllocPoint = _totalAllocPoint.sub(pool.allocPoint).add(_allocPoints[i]);\n      pool.allocPoint = _allocPoints[i];\n    }\n    totalAllocPoint = _totalAllocPoint;\n  }\n\n  function setOnwardIncentives(\n    address _token,\n    IOnwardIncentivesController _incentives\n  )\n    external\n    onlyOwner\n  {\n    require(poolInfo[_token].lastRewardTime != 0);\n    poolInfo[_token].onwardIncentives = _incentives;\n  }\n\n  function setClaimReceiver(address _user, address _receiver) external {\n    require(msg.sender == _user || msg.sender == owner());\n    claimReceiver[_user] = _receiver;\n  }\n\n  function poolLength() external view returns (uint) {\n    return registeredTokens.length;\n  }\n\n  function claimableReward(address _user, address[] calldata _tokens)\n    external\n    view\n    returns (uint[] memory)\n  {\n    uint256[] memory claimable = new uint256[](_tokens.length);\n    for (uint256 i = 0; i < _tokens.length; i++) {\n      address token = _tokens[i];\n      PoolInfo memory pool = poolInfo[token];\n      UserInfo memory user;\n      if (userInfoInitiated[token][_user]) {\n        user = userInfo[token][_user];\n      } else {\n        IChefIncentivesController.UserInfo memory userInfoV1 = incentivesController.userInfo(token, _user);\n        user = UserInfo({\n          amount: userInfoV1.amount,\n          rewardDebt: userInfoV1.rewardDebt\n        });\n      }\n      uint256 accRewardPerShare = pool.accRewardPerShare;\n      uint256 lpSupply = pool.totalSupply;\n      if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n        uint256 duration = block.timestamp.sub(pool.lastRewardTime);\n        uint256 reward = duration.mul(rewardsPerSecond).mul(pool.allocPoint).div(totalAllocPoint);\n        accRewardPerShare = accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\n      }\n      claimable[i] = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\n    }\n    return claimable;\n  }\n\n  function _updateEmissions() internal {\n    uint length = emissionSchedule.length;\n    if (startTime > 0 && length > 0) {\n      EmissionPoint memory e = emissionSchedule[length-1];\n      if (block.timestamp.sub(startTime) > e.startTimeOffset) {\n        _massUpdatePools();\n        rewardsPerSecond = uint(e.rewardsPerSecond);\n        emissionSchedule.pop();\n      }\n    }\n  }\n\n  // Update reward variables for all pools\n  function _massUpdatePools() internal {\n    uint totalAP = totalAllocPoint;\n    uint length = registeredTokens.length;\n    for (uint i = 0; i < length; ++i) {\n      _updatePool(poolInfo[registeredTokens[i]], totalAP);\n    }\n  }\n\n  // Update reward variables of the given pool to be up-to-date.\n  function _updatePool(PoolInfo storage pool, uint _totalAllocPoint) internal {\n    if (block.timestamp <= pool.lastRewardTime) {\n      return;\n    }\n    uint lpSupply = pool.totalSupply;\n    if (lpSupply == 0) {\n      pool.lastRewardTime = block.timestamp;\n      return;\n    }\n    uint duration = block.timestamp.sub(pool.lastRewardTime);\n    uint reward = duration.mul(rewardsPerSecond).mul(pool.allocPoint).div(_totalAllocPoint);\n    pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e12).div(lpSupply));\n    pool.lastRewardTime = block.timestamp;\n  }\n\n  function _mint(address _user, uint _amount) internal {\n    uint minted = mintedTokens;\n    if (minted.add(_amount) > maxMintableTokens) {\n      _amount = maxMintableTokens.sub(minted);\n    }\n    if (_amount > 0) {\n      mintedTokens = minted.add(_amount);\n      address receiver = claimReceiver[_user];\n      if (receiver == address(0)) receiver = _user;\n      rewardMinter.mint(receiver, _amount);\n    }\n  }\n\n  function handleAction(address _user, uint _balance, uint _totalSupply) external {\n    initiateUserInfo(_user, msg.sender);\n    initiateUserBaseClaimable(_user);\n    PoolInfo storage pool = poolInfo[msg.sender];\n    require(pool.lastRewardTime > 0);\n    _updateEmissions();\n    _updatePool(pool, totalAllocPoint);\n    UserInfo storage user = userInfo[msg.sender][_user];\n    uint256 amount = user.amount;\n    uint256 accRewardPerShare = pool.accRewardPerShare;\n    if (amount > 0) {\n      uint256 pending = amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt);\n      if (pending > 0) {\n        userBaseClaimable[_user] = userBaseClaimable[_user].add(pending);\n      }\n    }\n    user.amount = _balance;\n    user.rewardDebt = _balance.mul(accRewardPerShare).div(1e12);\n    pool.totalSupply = _totalSupply;\n    if (pool.onwardIncentives != IOnwardIncentivesController(address(0))) {\n      pool.onwardIncentives.handleAction(msg.sender, _user, _balance, _totalSupply);\n    }\n    emit BalanceUpdated(msg.sender, _user, _balance, _totalSupply);\n  }\n\n  function initiateUserBaseClaimable(address user) internal {\n    require(address(incentivesController) != address(0), 'incentives controller not set');\n    if(!userBaseClaimableInitiated[user]) {\n      userBaseClaimable[user] = incentivesController.userBaseClaimable(user);\n      userBaseClaimableInitiated[user] = true;\n    }\n  }\n\n  function initiateUserInfo(address user, address token) internal {\n    require(address(incentivesController) != address(0), 'incentives controller not set');\n    if(!userInfoInitiated[token][user]) {\n      IChefIncentivesController.UserInfo memory userInfoV1 = incentivesController.userInfo(token, user);\n      userInfo[token][user] = UserInfo({\n        amount: userInfoV1.amount,\n        rewardDebt: userInfoV1.rewardDebt\n      });\n      userInfoInitiated[token][user] = true;\n    }\n  }\n\n  // Claim pending rewards for one or more pools.\n  // Rewards are not received directly, they are minted by the rewardMinter.\n  function claim(address _user, address[] calldata _tokens) external {\n    for (uint i = 0; i < _tokens.length; i++) {\n      initiateUserInfo(_user, _tokens[i]);\n    }\n    initiateUserBaseClaimable(_user);\n    _updateEmissions();\n    uint256 pending = userBaseClaimable[_user];\n    userBaseClaimable[_user] = 0;\n    uint256 _totalAllocPoint = totalAllocPoint;\n    for (uint i = 0; i < _tokens.length; i++) {\n      PoolInfo storage pool = poolInfo[_tokens[i]];\n      require(pool.lastRewardTime > 0);\n      _updatePool(pool, _totalAllocPoint);\n      UserInfo storage user = userInfo[_tokens[i]][_user];\n      uint256 rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\n      pending = pending.add(rewardDebt.sub(user.rewardDebt));\n      user.rewardDebt = rewardDebt;\n    }\n    _mint(_user, pending);\n  }\n\n  function setup() external onlyOwner {\n    require(!setuped, \"already setuped\");\n    uint length = incentivesController.poolLength();\n    for (uint i = 0; i < length; i++) {\n      address token = incentivesController.registeredTokens(i);\n      IChefIncentivesController.PoolInfo memory oldInfo = incentivesController.poolInfo(token);\n      poolInfo[token] = PoolInfo(\n        oldInfo.totalSupply,\n        oldInfo.allocPoint,\n        oldInfo.lastRewardTime,\n        oldInfo.accRewardPerShare,\n        oldInfo.onwardIncentives\n      );\n      registeredTokens.push(token);\n      totalAllocPoint = totalAllocPoint.add(poolInfo[token].allocPoint);\n    }\n    startTime = incentivesController.startTime();\n    rewardsPerSecond = incentivesController.rewardsPerSecond();\n    mintedTokens = incentivesController.mintedTokens();\n    setuped = true;\n  }\n}"
    },
    "contracts/interfaces/IChefIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IOnwardIncentivesController.sol\";\n\ninterface IChefIncentivesController {\n  struct UserInfo {\n    uint amount;\n    uint rewardDebt;\n  }\n  struct PoolInfo {\n    uint totalSupply;\n    uint allocPoint; // How many allocation points assigned to this pool.\n    uint lastRewardTime; // Last second that reward distribution occurs.\n    uint accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\n    IOnwardIncentivesController onwardIncentives;\n  }\n  function mintedTokens() external view returns (uint);\n  function rewardsPerSecond() external view returns (uint);\n  function startTime() external view returns(uint);\n  function poolInfo(address token) external view returns(PoolInfo memory);\n  function registeredTokens(uint idx) external view returns(address);\n  function poolLength() external view returns(uint);\n  function userInfo(address token, address user) external view returns(UserInfo memory);\n  function userBaseClaimable(address user) external view returns(uint);\n  function handleAction(address user, uint256 userBalance, uint256 totalSupply) external;\n  function addPool(address _token, uint256 _allocPoint) external;\n  function claim(address _user, address[] calldata _tokens) external;\n  function setClaimReceiver(address _user, address _receiver) external;\n}"
    },
    "contracts/interfaces/IMultiFeeDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMultiFeeDistribution {\n  function mint(address user, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IOnwardIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOnwardIncentivesController {\n  function handleAction(address _token, address _user, uint256 _balance, uint256 _totalSupply) external;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}