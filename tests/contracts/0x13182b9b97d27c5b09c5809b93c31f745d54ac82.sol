{{
  "language": "Solidity",
  "sources": {
    "contracts/RevisedPixelmonTrainerAdventure/PxTrainerAdventure.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./PxWeekManager.sol\";\nimport \"./IPxChainlinkManager.sol\";\n\n/// @notice Thrown when all treasures are already claimed\nerror AlreadyClaimed();\n/// @notice Thrown when address is not a winner\nerror NotAWinner();\n/// @notice Thrown when input is not as expected condition\nerror InvalidInput();\n/// @notice Thrown when treasure index doesn't exist\nerror InvalidTreasureIndex();\n/// @notice Thrown when no available treasures to be transferred to the winner\nerror InsufficientToken();\n/// @notice Thrown when the input signature is invalid.\nerror InvalidSignature();\n\ncontract PxTrainerAdventure is PxWeekManager, ReentrancyGuard {\n    /// @notice code number for ERC1155 token\n    uint8 public constant ERC_1155_TYPE = 1;\n    /// @notice code number for ERC721 token\n    uint8 public constant ERC_721_TYPE = 2;\n\n    /// @notice Wallet address that keeps all treasures\n    address public vaultWalletAddress;\n\n    /// @notice Variable to store Sponsored Trips treasure information such\n    ///         as the collection address, token ID, amount, and token type\n    Treasure public sponsoredTrip;\n    /// @notice List of addresses who have won Sponsored Trips \n    /// @custom:key wallet address\n    /// @custom:value 'true' means already owns Sponsored Trips\n    mapping(address => bool) public sponsoredTripWinners;\n\n    /// @notice Check whether both array input has the same length or not\n    /// @param length1 first length of the array input\n    /// @param length2 second length of the array input\n    modifier validArrayLength(uint256 length1, uint256 length2) {\n        if (length1 != length2) {\n            revert InvalidLength();\n        }\n        _;\n    }\n\n    /// @notice Check treasure token type and token ID input\n    /// @dev Only ERC1155 and ERC721 are supported\n    /// @param _treasure Treasure information\n    modifier validTreasure(Treasure memory _treasure) {\n        if (_treasure.contractType != ERC_1155_TYPE && _treasure.contractType != ERC_721_TYPE) {\n            revert InvalidInput();\n        }\n        if (\n            (_treasure.contractType == ERC_1155_TYPE && _treasure.tokenIds.length > 0) ||\n            (_treasure.contractType == ERC_721_TYPE && _treasure.tokenIds.length == 0)\n        ) {\n            revert InvalidInput();\n        }\n        _;\n    }\n\n    /// @notice Emits when a treasure is claimed\n    /// @param weekNumber Week number when the treasure is claimed\n    /// @param userWallet Wallet address who claims the treasure\n    /// @param collectionAddress The contract address of the treasure\n    /// @param tokenId The treasure token ID in its contract address\n    /// @param tokenType The token type \n    event TreasureTransferred(uint256 weekNumber, address userWallet, address collectionAddress, uint256 tokenId, uint256 tokenType);\n\n    /// @notice The contract constructor\n    /// @dev The constructor parameters only used as input\n    ///      from PxWeekManager contract\n    ///        More https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\n    /// @param _pxChainlinkContractAddress signature contract address\n    constructor(address _pxChainlinkContractAddress) PxWeekManager() {\n        pxChainlinkManagerContract = IPxChainlinkManager(_pxChainlinkContractAddress);\n    }\n\n    /// @notice Sets Chainlink manager contract address\n    /// @dev Chainlink manager is used as signer and to interact with Chainlink\n    /// @param _pxChainlinkContractAddress Chainlink manager contract address\n    function setpxChainlinkManagerContractAddress(address _pxChainlinkContractAddress) external onlyOwner {\n        pxChainlinkManagerContract = IPxChainlinkManager(_pxChainlinkContractAddress);\n    }\n\n    /// @notice Set address to become vault\n    /// @param _walletAddress Wallet address that will be the vault\n    function setVaultWalletAddress(address _walletAddress) external onlyOwner {\n        vaultWalletAddress = _walletAddress;\n    }\n\n    /// @notice Adds treasure information\n    /// @dev This method is used to add information about the treasure that exists\n    ///      in the vault wallet address. Only admin can call this method\n    /// @param _treasure Treasure information\n    function addTreasures(Treasure memory _treasure) external onlyAdmin(msg.sender) validTreasure(_treasure) {\n        totalTreasureCount++;\n        _treasure.claimedToken = 0;\n        treasures[totalTreasureCount] = _treasure;\n    }\n\n    /// @notice Update existing treasure information\n    /// @dev Only admin can call this method\n    /// @param _index Treasure index\n    /// @param _treasure New treasure information\n    function updateTreasure(uint256 _index, Treasure memory _treasure) external onlyAdmin(msg.sender) validTreasure(_treasure) {\n        _treasure.claimedToken = 0;\n        treasures[_index] = _treasure;\n    }\n\n    /// @notice Add Sponsored Trips treasure to the smart contract\n    /// @dev Can only be called by administrators\n    /// @param _treasure Sponsored Trips information according to Treasure struct\n    function addSponsoredTripTreasure(Treasure memory _treasure) external onlyAdmin(msg.sender) {\n        if (_treasure.claimedToken != 0 || _treasure.contractType != ERC_1155_TYPE || _treasure.tokenIds.length > 0) {\n            revert InvalidInput();\n        }\n        sponsoredTrip = _treasure;\n    }\n\n    /// @notice claim function for the winner\n    /// @dev Only winner of the week can call this method\n    /// @param _weekNumber The week number to claim treasure\n    /// @param _signature Signature from signer wallet\n    function claimTreasure(uint256 _weekNumber, bytes calldata _signature) external noContracts nonReentrant {\n        if (!(block.timestamp >= weekInfos[_weekNumber].claimStartTimeStamp && block.timestamp <= weekInfos[_weekNumber].endTimeStamp)) {\n            revert InvalidClaimingPeriod();\n        }\n        bool isValidSigner = pxChainlinkManagerContract.isSignerVerifiedFromSignature(\n            _weekNumber,\n            weekInfos[_weekNumber].winners[msg.sender].claimed,\n            msg.sender,\n            _signature\n        );\n\n        if (!isValidSigner) {\n            revert InvalidSignature();\n        }\n\n        if (weekInfos[_weekNumber].winners[msg.sender].claimLimit == 0) {\n            revert NotAWinner();\n        }\n        if (weekInfos[_weekNumber].winners[msg.sender].claimed == weekInfos[_weekNumber].winners[msg.sender].claimLimit) {\n            revert AlreadyClaimed();\n        }\n        if (weekInfos[_weekNumber].winners[msg.sender].claimed == 0) {\n            primaryClaim(_weekNumber);\n        } else {\n            secondaryClaim(_weekNumber);\n        }\n    }\n\n    /// @notice Method to claim the first treasure\n    /// @dev This method is also used to claim Sponsor Trips if\n    ///      the caller is selected as a sponsored trip winner\n    /// @param _weekNumber The week number to claim treasure\n    function primaryClaim(uint256 _weekNumber) internal {\n        Week storage week = weekInfos[_weekNumber];\n        if (week.tripWinnersMap[msg.sender]) {\n            sponsoredTripWinners[msg.sender] = true;\n            week.tripWinnersMap[msg.sender] = false;\n\n            unchecked {\n                week.winners[msg.sender].claimed++;\n                week.availabletripsCount--;\n                sponsoredTrip.claimedToken++;\n            }\n            transferToken(_weekNumber, sponsoredTrip);\n        } else {\n            uint256 randomNumber = getRandomNumber();\n            uint256 random = randomNumber - ((randomNumber / week.remainingSupply) * week.remainingSupply) + 1;\n\n            uint256 selectedIndex;\n            uint16 sumOfTotalSupply;\n\n            for (uint256 index = 1; index <= week.treasureCount; index = _uncheckedInc(index)) {\n                if (week.distributions[index].totalSupply == 0) {\n                    continue;\n                }\n                unchecked {\n                    sumOfTotalSupply += week.distributions[index].totalSupply;\n                }\n                if (random <= sumOfTotalSupply) {\n                    selectedIndex = index;\n                    break;\n                }\n            }\n            uint256 selectedTreasureIndex = week.distributions[selectedIndex].treasureIndex;\n            week.winners[msg.sender].treasureTypeClaimed[treasures[selectedTreasureIndex].treasureType] = true;\n\n            unchecked {\n                week.distributions[selectedIndex].totalSupply--;\n                week.winners[msg.sender].claimed++;\n                week.remainingSupply--;\n                treasures[selectedTreasureIndex].claimedToken++;\n            }\n\n            transferToken(_weekNumber, treasures[selectedTreasureIndex]);\n        }\n    }\n\n    /// @notice Method to claim the next treasure\n    /// @dev This method will give different treasures than the first\n    ///      one if there are still other treasure option available\n    /// @param _weekNumber The week number to claim treasure\n    function secondaryClaim(uint256 _weekNumber) internal {\n        Week storage week = weekInfos[_weekNumber];\n        uint16 remaining;\n        uint16 altRemaining;\n\n        for (uint256 index = 1; index <= week.treasureCount; index = _uncheckedInc(index)) {\n            uint256 treasureType = treasures[week.distributions[index].treasureIndex].treasureType;\n            if (week.winners[msg.sender].treasureTypeClaimed[treasureType]) {\n                unchecked {\n                    altRemaining += week.distributions[index].totalSupply;\n                }\n            } else {\n                unchecked {\n                    remaining += week.distributions[index].totalSupply;\n                }\n            }\n        }\n        uint256 randomNumber = getRandomNumber();\n\n        uint256 selectedIndex;\n        uint256 sumOfTotalSupply;\n        if (altRemaining == week.remainingSupply) {\n            uint256 random = randomNumber - ((randomNumber / altRemaining) * altRemaining) + 1;\n            for (uint256 index = 1; index <= week.treasureCount; index = _uncheckedInc(index)) {\n                uint256 treasureType = treasures[week.distributions[index].treasureIndex].treasureType;\n                if (week.distributions[index].totalSupply == 0 || !week.winners[msg.sender].treasureTypeClaimed[treasureType]) {\n                    continue;\n                }\n                unchecked {\n                    sumOfTotalSupply += week.distributions[index].totalSupply;\n                }\n                if (random <= sumOfTotalSupply) {\n                    selectedIndex = index;\n                    break;\n                }\n            }\n        } else {\n            uint256 random = randomNumber - ((randomNumber / remaining) * remaining) + 1;\n\n            for (uint256 index = 1; index <= week.treasureCount; index = _uncheckedInc(index)) {\n                uint256 treasureType = treasures[week.distributions[index].treasureIndex].treasureType;\n                if (week.distributions[index].totalSupply == 0 || week.winners[msg.sender].treasureTypeClaimed[treasureType]) {\n                    continue;\n                }\n                unchecked {\n                    sumOfTotalSupply += week.distributions[index].totalSupply;\n                }\n                if (random <= sumOfTotalSupply) {\n                    selectedIndex = index;\n                    break;\n                }\n            }\n        }\n\n        uint256 selectedTreasureIndex = week.distributions[selectedIndex].treasureIndex;\n        week.winners[msg.sender].treasureTypeClaimed[treasures[selectedTreasureIndex].treasureType] = true;\n        unchecked {\n            week.distributions[selectedIndex].totalSupply--;\n            week.winners[msg.sender].claimed++;\n            week.remainingSupply--;\n            treasures[selectedTreasureIndex].claimedToken++;\n        }\n\n        transferToken(_weekNumber, treasures[selectedTreasureIndex]);\n    }\n\n    /// @notice Transfers token from vault to the method caller's wallet address\n    /// @dev This method will be used in a public method and user who call the\n    ///      method will get a token from vault wallet address\n    /// @param _treasure Treasure to transfer\n    function transferToken(uint256 _weekNumber, Treasure memory _treasure) internal {\n        if (_treasure.contractType == ERC_1155_TYPE) {\n            IERC1155 erc1155Contract = IERC1155(_treasure.collectionAddress);\n            erc1155Contract.safeTransferFrom(vaultWalletAddress, msg.sender, _treasure.tokenId, 1, \"\");\n            emit TreasureTransferred(_weekNumber, msg.sender, _treasure.collectionAddress, _treasure.tokenId, _treasure.contractType);\n        }\n        if (_treasure.contractType == ERC_721_TYPE) {\n            IERC721 erc721Contract = IERC721(_treasure.collectionAddress);\n            if (_treasure.tokenIds.length < _treasure.claimedToken) {\n                revert InsufficientToken();\n            }\n            erc721Contract.transferFrom(vaultWalletAddress, msg.sender, _treasure.tokenIds[_treasure.claimedToken - 1]);\n            emit TreasureTransferred(_weekNumber, msg.sender, _treasure.collectionAddress,_treasure.tokenIds[_treasure.claimedToken - 1] , _treasure.contractType);\n        }\n\n        \n    }\n\n    /// @notice Set treasure distributions for a week\n    /// @dev Only admin can call this method\n    /// @param _weekNumber The week number\n    /// @param _treasureindexes The index of the treasure in 'treasures' mapping variable\n    /// @param _treasureCounts Amount of treasure that will be available to claim during the week\n    function setWeeklyTreasureDistribution(\n        uint256 _weekNumber,\n        uint8[] memory _treasureindexes,\n        uint16[] memory _treasureCounts,\n        uint8 _sponsoredTripsCount\n    ) external onlyAdmin(msg.sender) validTreaureDistributionPeriod(_weekNumber) validArrayLength(_treasureindexes.length, _treasureCounts.length) {\n        Week storage week = weekInfos[_weekNumber];\n        week.sponsoredTripsCount = _sponsoredTripsCount;\n        week.availabletripsCount = _sponsoredTripsCount;\n        week.treasureCount = 0;\n        for (uint256 index = 0; index < _treasureindexes.length; index = _uncheckedInc(index)) {\n            if (_treasureindexes[index] == 0 || _treasureindexes[index] > totalTreasureCount) {\n                revert InvalidTreasureIndex();\n            }\n            week.treasureCount++;\n            week.distributions[week.treasureCount].treasureIndex = _treasureindexes[index];\n            week.distributions[week.treasureCount].totalSupply = _treasureCounts[index];\n            week.remainingSupply += _treasureCounts[index];\n        }\n    }\n\n    /// @notice Set a list of winners for a particular week\n    /// @param _weekNumber The current week number\n    /// @param _winners List of wallet addresses that have been selected as winners\n    /// @param _treasureCounts Amount of treasure that have been awarded to the corresponding winner\n    function updateWeeklyWinners(\n        uint256 _weekNumber,\n        address[] memory _winners,\n        uint8[] memory _treasureCounts\n    ) external onlyModerator(msg.sender) validArrayLength(_winners.length, _treasureCounts.length) validWinnerUpdationPeriod(_weekNumber) {\n        for (uint256 index = 0; index < weekInfos[_weekNumber].tripWinners.length; index++) {\n            address tripWinner = weekInfos[_weekNumber].tripWinners[index];\n            weekInfos[_weekNumber].tripWinnersMap[tripWinner] = false;\n        }\n        uint256 randomNumber = getRandomNumber();\n        uint256 randomIndex = randomNumber - ((randomNumber / _treasureCounts.length) * _treasureCounts.length);\n        uint256 counter = 0;\n        uint256 tripWinnerCount = 0;\n        uint256 treasureCount = 0;\n        address[] memory tmpTripWinners = new address[](weekInfos[_weekNumber].sponsoredTripsCount);\n        while (counter < _treasureCounts.length) {\n            if (randomIndex == _treasureCounts.length) {\n                randomIndex = 0;\n            }\n            if (\n                !sponsoredTripWinners[_winners[randomIndex]] &&\n                tripWinnerCount < weekInfos[_weekNumber].sponsoredTripsCount &&\n                _treasureCounts[randomIndex] > 0\n            ) {\n                weekInfos[_weekNumber].tripWinnersMap[_winners[randomIndex]] = true;\n                tmpTripWinners[tripWinnerCount] = _winners[randomIndex];\n                tripWinnerCount++;\n            }\n\n            weekInfos[_weekNumber].winners[_winners[randomIndex]].claimLimit = _treasureCounts[randomIndex];\n            treasureCount += _treasureCounts[randomIndex];\n            unchecked {\n                randomIndex++;\n                counter++;\n            }\n        }\n        if (treasureCount > weekInfos[_weekNumber].remainingSupply + weekInfos[_weekNumber].sponsoredTripsCount) {\n            revert(\"Invalid Treasure Amount\");\n        }\n\n        weekInfos[_weekNumber].tripWinners = tmpTripWinners;\n        emit WeeklyWinnersSet(_weekNumber, tmpTripWinners);\n    }\n\n    /// @notice Add a list of wallet addresses that have won Sponsored Trip\n    /// @param _previousWinners List of addresses that have won Sponsored Trip\n    /// @param _flags 'true' means already won\n    function setSponsoredTripWinnerMap(\n        address[] memory _previousWinners,\n        bool[] memory _flags\n    ) external onlyAdmin(msg.sender) validArrayLength(_previousWinners.length, _flags.length) {\n        for (uint256 index = 0; index < _flags.length; index = _uncheckedInc(index)) {\n            sponsoredTripWinners[_previousWinners[index]] = _flags[index];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "contracts/RevisedPixelmonTrainerAdventure/PxWeekManager.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.16;\n\n/// @title Pixelmon Trainer Adventure Smart Contract\n/// @author LiquidX\n/// @notice This smart contract provides configuration for the Trainer Adventure event on Pixelmon\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./IPxChainlinkManager.sol\";\nimport \"./PxUtils.sol\";\n\n/// @notice Thrown when end timestamp is less than or equal to start timestamp\nerror InvalidTimeStamp();\n/// @notice Thrown when week number doesn't exist\nerror InvalidWeekNumber();\n/// @notice Thrown when week duration is less than total period for updating treasure and set the winners\nerror InvalidDuration();\n/// @notice Thrown when updating treasure is beyond the schedule\nerror InvalidUpdationPeriod();\n/// @notice Thrown when claiming treasure is beyond the schedule\nerror InvalidClaimingPeriod();\n/// @notice Thrown when address has no \"Admin\" role\nerror NotAdmin();\n/// @notice Thrown when address has no \"Moderator\" role\nerror NotModerator();\n/// @notice Thrown when length of both arrays are not equal\nerror InvalidLength();\n\ncontract PxWeekManager is Ownable, PxUtils {\n    \n    /// @notice Struct object for winner information\n    /// @param claimLimit Maximum treasure that can be claimed by winner for a particular week\n    /// @param claimed Number of treasure that has been claimed by winner for a particular week\n    /// @param treasureTypeClaimed Type of treasure that has been claimed by a winner for a particular week\n    struct Winner {\n        uint8 claimLimit;\n        uint8 claimed;\n        mapping(uint256 => bool) treasureTypeClaimed;\n    }\n\n    /// @notice Struct object to store treasure information\n    /// @dev If the treasure is ERC1155,tokenIds is an  empty array\n    ///      if the treasure is ERC721,tokenId value is a dummy\n    /// @param collectionAddress Contract address of the treasure\n    /// @param tokenId ERC1155 Treasure token ID \n    /// @param tokenIds ERC721 Treasure token IDs\n    /// @param claimedToken Amount of token that has been claimed\n    /// @param contractType 1 for ERC1155, 2 for ERC721\n    /// @param treasureType Similar IDs for the treasure.Treasure ID is used\n    ///        to identify the treasure that claimed by winner and it's used to make\n    ///        sure the winner will get different set of prizes.\n    struct Treasure {\n        address collectionAddress;\n        uint256 tokenId;\n        uint256[] tokenIds;\n        uint256 claimedToken;\n        uint8 contractType;\n        uint8 treasureType;\n    }\n\n    /// @notice Struct object to store information about treasure that distributed within a week\n    /// @param treasureIndex Index of the treasure in the smart contract\n    /// @param totalSupply Total supply of the treasure within a week\n    struct TreasureDistribution {\n        uint8 treasureIndex;\n        uint16 totalSupply;\n    }\n\n    /// @notice Struct object to store week information\n    /// @param startTimeStamp Start timestamp of the week\n    /// @param ticketDrawTimeStamp ticket draw timestamp \n    /// @param claimStartTimeStamp claiming start timestamp\n    /// @param endTimeStamp End timestamp of a week\n    /// @param remainingSupply The remaining treasure supply that hasn't been claimed during\n    ///        the week. This supply is the sum of every treasure supply excluding Sponsored Trips\n    /// @param treasureCount How many treasure option is available\n    /// @param sponsoredTripsCount How many Sponsored Trips is available in a week\n    /// @param availabletripsCount How many Sponsored Trips treasure that has not been claimed\n    /// @param tripWinners Winners of Sponsored Trips\n    /// @param tripWinnersMap Map that contains address of the Sponsored Trips winner.\n    ///        Map is used to easily validate whether the address is a winner rather than\n    ///        iterating every index in a list/array to find a winner\n    /// @param distributions Map of treasure that is distributed during the week\n    /// @param winners List of winner of the week\n    struct Week {\n        uint256 startTimeStamp;\n        uint256 ticketDrawTimeStamp;\n        uint256 claimStartTimeStamp;\n        uint256 endTimeStamp;\n        uint256 remainingSupply;\n        uint8 treasureCount;\n        uint8 sponsoredTripsCount;\n        uint8 availabletripsCount;\n        address[] tripWinners;\n        mapping(address => bool) tripWinnersMap;\n        mapping(uint256 => TreasureDistribution) distributions;\n        mapping(address => Winner) winners;\n    }\n\n    /// @notice Struct object for week information\n    /// @dev This struct is only used as return type for getWeekInfo method\n    /// @param tripWinners Winner of Sponsored Trips\n    struct WeekData {\n        address[] tripWinners;\n        uint256[] randomNumbers;\n    }\n\n    /// @notice Total treasure options\n    uint256 public totalTreasureCount;\n\n    /// @notice Variable to store treasure information such as the collection\n    ///         address, token ID, amount, and token type\n    /// @custom:key treasure ID\n    /// @custom:value Treasure information\n    mapping(uint256 => Treasure) public treasures;\n\n    /// @notice Total week to claim treasure\n    uint256 public totalWeek;\n    /// @notice Collection of information for each week\n    mapping(uint256 => Week) public weekInfos;\n\n    /// @notice List of address that has \"Admin\" role, 'true' means it has the privilege\n    mapping(address => bool) public adminWallets;\n    /// @notice List of address that has \"Moderator\" role, 'true' means it has the privilege\n    mapping(address => bool) public moderatorWallets;\n\n    /// @dev Signature Contract\n    IPxChainlinkManager public pxChainlinkManagerContract;\n\n    /// @notice Check whether address has \"Admin\" role\n    /// @param _walletAddress Valid ethereum address\n    modifier onlyAdmin(address _walletAddress) {\n        if (!adminWallets[_walletAddress]) {\n            revert NotAdmin();\n        }\n        _;\n    }\n\n    /// @notice Check whether address has \"Moderator\" role\n    /// @param _walletAddress Valid ethereum address\n    modifier onlyModerator(address _walletAddress) {\n        if (!moderatorWallets[_walletAddress]) {\n            revert NotModerator();\n        }\n        _;\n    }\n\n    /// @notice Check whether block.timestamp is within the schedule\n    ///         to set treasure distribution\n    /// @param _weekNumber Number of the week\n    modifier validTreaureDistributionPeriod(uint256 _weekNumber) {\n        if (!(block.timestamp >= weekInfos[_weekNumber].startTimeStamp && block.timestamp < weekInfos[_weekNumber].ticketDrawTimeStamp)) {\n            revert InvalidUpdationPeriod();\n        }\n        _;\n    }\n\n    /// @notice Check whether block.timestamp is beyond the schedule\n    ///         to update winner merkle root and chainlink\n    /// @param _weekNumber Number of the week\n    modifier validWinnerUpdationPeriod(uint256 _weekNumber) {\n        if (!(block.timestamp >= weekInfos[_weekNumber].ticketDrawTimeStamp && block.timestamp < weekInfos[_weekNumber].claimStartTimeStamp)) {\n            revert InvalidUpdationPeriod();\n        }\n        _;\n    }\n\n    /// @notice Check whether the input week number is valid\n    /// @param _weekNumber Number of the week\n    modifier validWeekNumber(uint256 _weekNumber) {\n        if (_weekNumber == 0 || _weekNumber > totalWeek) {\n            revert InvalidWeekNumber();\n        }\n        _;\n    }\n\n    /// @notice Emit when winners of the week has been selected\n    /// @param weekNumber The week number\n    /// @param tripWinners The winner for Sponsored Trips treasure\n    event WeeklyWinnersSet(uint256 weekNumber, address[] tripWinners);\n\n    /// @notice Constructor function\n    constructor() {}\n\n    /// @notice Set \"Admin\" role for specific address, 'true' means it has privilege\n    /// @dev Only owner can call this method\n    /// @param _walletAddress The address that will be set as admin\n    /// @param _flag 'true' means the address is an admin\n    function setAdminWallet(address _walletAddress, bool _flag) external onlyOwner {\n        adminWallets[_walletAddress] = _flag;\n    }\n\n    /// @notice Set \"Moderator\" role for specific address, 'true' means it has privilege\n    /// @dev Only owner can call this method\n    /// @param _walletAddress The address that will be set as moderator\n    /// @param _flag 'true' means the address is a moderator\n    function setModeratorWallet(address _walletAddress, bool _flag) external onlyOwner {\n        moderatorWallets[_walletAddress] = _flag;\n    }\n\n    /// @notice Update the week information related with timestamp\n    /// @param _weekNumber Number of the week\n    /// @param _startTimeStamp The start time of the event\n    /// @param _prizeUpdationDuration Duration to update the treasure distribution\n    /// @param _winnerUpdationDuration Duration to update winner list \n    /// @param _weeklyDuration How long the event will be held within a week\n    function updateWeeklyTimeStamp(\n        uint256 _weekNumber,\n        uint256 _startTimeStamp,\n        uint256 _prizeUpdationDuration,\n        uint256 _winnerUpdationDuration,\n        uint256 _weeklyDuration\n    ) external onlyAdmin(msg.sender) validWeekNumber(_weekNumber) {\n        if (_weeklyDuration <= (_prizeUpdationDuration + _winnerUpdationDuration)) {\n            revert InvalidDuration();\n        }\n        if (_weekNumber != 1 && _startTimeStamp <= weekInfos[_weekNumber - 1].endTimeStamp) {\n            revert InvalidTimeStamp();\n        }\n        if (_weekNumber != totalWeek && _startTimeStamp + _weeklyDuration - 1 >= weekInfos[_weekNumber + 1].startTimeStamp) {\n            revert InvalidTimeStamp();\n        }\n\n        weekInfos[_weekNumber].startTimeStamp = _startTimeStamp;\n        weekInfos[_weekNumber].ticketDrawTimeStamp = _startTimeStamp + _prizeUpdationDuration;\n        weekInfos[_weekNumber].claimStartTimeStamp = _startTimeStamp + _prizeUpdationDuration + _winnerUpdationDuration;\n        weekInfos[_weekNumber].endTimeStamp = _startTimeStamp + _weeklyDuration - 1;\n    }\n\n    /// @notice Set the week information related with timestamp\n    /// @param _numberOfWeeks How many weeks the event will be held\n    /// @param _startTimeStamp The start time of the event\n    /// @param _prizeUpdationDuration Duration to update the treasure distribution\n    /// @param _winnerUpdationDuration Duration to update winner list i\n    /// @param _weeklyDuration How long the event will be held within a week\n    function setWeeklyTimeStamp(\n        uint256 _numberOfWeeks,\n        uint256 _startTimeStamp,\n        uint256 _prizeUpdationDuration,\n        uint256 _winnerUpdationDuration,\n        uint256 _weeklyDuration\n    ) external onlyAdmin(msg.sender) {\n        if (_weeklyDuration <= (_prizeUpdationDuration + _winnerUpdationDuration)) {\n            revert InvalidDuration();\n        }\n        for (uint256 index = 0; index < _numberOfWeeks; index = _uncheckedInc(index)) {\n            totalWeek++;\n            weekInfos[totalWeek].startTimeStamp = _startTimeStamp;\n            weekInfos[totalWeek].ticketDrawTimeStamp = _startTimeStamp + _prizeUpdationDuration;\n            weekInfos[totalWeek].claimStartTimeStamp = _startTimeStamp + _prizeUpdationDuration + _winnerUpdationDuration;\n            weekInfos[totalWeek].endTimeStamp = _startTimeStamp + _weeklyDuration - 1;\n            _startTimeStamp += _weeklyDuration;\n        }\n    }\n\n    // @notice Generate random number from Chainlink\n    /// @param _weekNumber Number of the week\n    function generateChainLinkRandomNumbers(uint256 _weekNumber) external onlyModerator(msg.sender) validWinnerUpdationPeriod(_weekNumber) {\n        pxChainlinkManagerContract.generateChainLinkRandomNumbers(_weekNumber);\n    }\n\n    /// @notice Get week informations for specific week\n    /// @param _weekNumber The number of the week\n    /// @return week Information for specific week\n    function getWeekInfo(uint256 _weekNumber) external view returns (WeekData memory week) {\n        week.tripWinners = weekInfos[_weekNumber].tripWinners;\n        week.randomNumbers = pxChainlinkManagerContract.getWeeklyRandomNumbers(_weekNumber);\n    }\n\n    /// @notice Get claimed count for a winner for specific week\n    /// @param _weekNumber The number of the week\n    /// @param _walletAddress wallet address of the winner\n    /// @return count claim count\n    function getWeeklyClaimedCount(uint256 _weekNumber, address _walletAddress) external view returns (uint8 count) {\n        return weekInfos[_weekNumber].winners[_walletAddress].claimed;\n    }\n\n    /// @notice Get treasure distribution for specific week\n    /// @param _weekNumber The number of the week\n    /// @return tmp distribution for specific week\n    function getWeeklyDistributions(uint256 _weekNumber) external view returns (TreasureDistribution[] memory tmp) {\n        TreasureDistribution[] memory distributions = new TreasureDistribution[](weekInfos[_weekNumber].treasureCount);\n        for (uint256 index = 1; index <= weekInfos[_weekNumber].treasureCount; index++) {\n            distributions[index - 1] = weekInfos[_weekNumber].distributions[index];\n        }\n        return distributions;\n    }\n\n    /// @notice Get all treasures information\n    /// @return tmp all treasures information\n    function getTreasures() external view returns (Treasure[] memory tmp) {\n        Treasure[] memory allTreasures = new Treasure[](totalTreasureCount);\n        for (uint256 index = 1; index <= totalTreasureCount; index++) {\n            allTreasures[index - 1] = treasures[index];\n        }\n        return allTreasures;\n    }\n    \n    /// @notice Get treasures information by index\n    /// @param _index treasure index\n    /// @return tmp particular treasure information\n    function getTreasureById(uint256 _index) external view returns (Treasure memory tmp) {\n        return treasures[_index];\n    }\n}\n"
    },
    "contracts/RevisedPixelmonTrainerAdventure/IPxChainlinkManager.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.16;\n\ninterface IPxChainlinkManager {\n    /// @notice Recovers signer wallet from signature\n    /// @dev View function for signature recovering\n    /// @param weekNumber Week number for claim\n    /// @param claimIndex Claim index for a particular user for a week\n    /// @param walletAddress Token owner wallet address\n    /// @param signature Signature from signer wallet\n    function isSignerVerifiedFromSignature (\n        uint256 weekNumber,\n        uint256 claimIndex,\n        address walletAddress,\n        bytes calldata signature\n    ) external returns (bool);\n\n    /// @notice Generate random number from Chainlink\n    /// @param _weekNumber Number of the week\n    /// @return requestId Chainlink requestId\n    function generateChainLinkRandomNumbers(uint256 _weekNumber) external returns (uint256 requestId);\n\n    /// @notice Get weekly random numbers for specific week\n    /// @param _weekNumber The number of the week\n    function getWeeklyRandomNumbers(uint256 _weekNumber) external view returns (uint256[] memory randomNumbers);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/RevisedPixelmonTrainerAdventure/PxUtils.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.16;\n\ncontract PxUtils {\n    modifier noContracts() {\n        uint256 size;\n        address acc = msg.sender;\n        assembly {\n            size := extcodesize(acc)\n        }\n        require(msg.sender == tx.origin, \"tx.origin != msg.sender\");\n        require(size == 0, \"Contract calls are not allowed\");\n        _;\n    }\n\n    function _uncheckedInc(uint256 value) internal pure returns (uint256) {\n        unchecked {\n            return value + 1;\n        }\n    }\n\n    function getRandomNumber() internal view returns (uint256) {\n        uint256 randomNumber = uint256(\n            keccak256(\n                abi.encodePacked(\n                    block.timestamp +\n                        block.difficulty +\n                        ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\n                        block.gaslimit +\n                        ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\n                        block.number\n                )\n            )\n        );\n\n        return randomNumber;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}