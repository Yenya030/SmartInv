{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IERC20\r\n{\r\n  function name () external view returns (string memory);\r\n\r\n  function symbol () external view returns (string memory);\r\n\r\n  function decimals () external view returns (uint8);\r\n\r\n  function totalSupply () external view returns (uint256);\r\n\r\n  function balanceOf (address account) external view returns (uint256);\r\n\r\n\r\n  function allowance (address owner, address spender) external view returns (uint256);\r\n\r\n  function approve (address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n  function transfer (address to, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom (address from, address to, uint256 amount) external returns (bool);\r\n\r\n\r\n  function mint (address account, uint256 amount) external;\r\n\r\n  function burn (address account, uint256 amount) external;\r\n}"
    },
    "contracts/interfaces/IFrontender.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IFrontender\r\n{\r\n  function isRegistered (address account) external view returns (bool);\r\n\r\n  function refer (address account, uint256 amount, address referrer) external;\r\n}\r\n"
    },
    "contracts/interfaces/IGlove.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IGlove\r\n{\r\n  function balanceOf (address account) external view returns (uint256);\r\n\r\n\r\n  function creditOf (address account) external view returns (uint256);\r\n\r\n  function creditlessOf (address account) external view returns (uint256);\r\n\r\n\r\n  function transfer (address to, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom (address from, address to, uint256 amount) external returns (bool);\r\n\r\n  function transferCreditless (address to, uint256 amount) external returns (bool);\r\n\r\n\r\n  function mint (address account, uint256 amount) external;\r\n\r\n  function mintCreditless (address account, uint256 amount) external;\r\n\r\n  function creditize (address account, uint256 credits) external returns (bool);\r\n\r\n\r\n  function burn (address account, uint256 amount) external;\r\n\r\n  function decreditize (address account, uint256 credits) external returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\ninterface IRegistry\r\n{\r\n  function get (string calldata name) external view returns (address);\r\n\r\n\r\n  function provisioner () external view returns (address);\r\n\r\n  function frontender () external view returns (address);\r\n\r\n  function collector () external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IWUSD.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\nstruct Snapshot\r\n{\r\n  uint32 epoch;\r\n  uint112 last;\r\n  uint112 cumulative;\r\n}\r\n\r\ninterface IWUSD\r\n{\r\n  function balanceOf (address account) external view returns (uint256);\r\n\r\n\r\n  function snapshot () external view returns (Snapshot memory);\r\n\r\n  function epochOf (address account) external view returns (uint256);\r\n\r\n\r\n  function allowance (address owner, address spender) external view returns (uint256);\r\n\r\n  function approve (address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n  function transfer (address to, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom (address from, address to, uint256 amount ) external returns (bool);\r\n}\r\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\n\r\nabstract contract ReentrancyGuard\r\n{\r\n  uint256 private _status = 1;\r\n\r\n\r\n  modifier nonReentrant ()\r\n  {\r\n    require(_status == 1, \"reentrance\");\r\n\r\n\r\n    _status = 2;\r\n\r\n    _;\r\n\r\n    _status = 1;\r\n  }\r\n}\r\n"
    },
    "contracts/utils/SafeToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport { IERC20 } from \"../interfaces/IERC20.sol\";\r\n\r\n\r\nlibrary SafeToken\r\n{\r\n  function _getRevertErr (bytes memory data, string memory message) private pure returns (string memory)\r\n  {\r\n    if (data.length < 68)\r\n    {\r\n      return message;\r\n    }\r\n\r\n\r\n    assembly\r\n    {\r\n      data := add(data, 0x04)\r\n    }\r\n\r\n\r\n    return abi.decode(data, (string));\r\n  }\r\n\r\n\r\n  function _call (address token, bytes memory encoded, string memory message) private\r\n  {\r\n    (bool success, bytes memory data) = token.call(encoded);\r\n\r\n\r\n    require(success && (data.length == 0 || abi.decode(data, (bool))), _getRevertErr(data, message));\r\n  }\r\n\r\n  function safeApprove (IERC20 token, address spender, uint256 amount) internal\r\n  {\r\n    _call(address(token), abi.encodeWithSelector(IERC20.approve.selector, spender, amount), \"!sa\");\r\n  }\r\n\r\n  function safeTransfer (IERC20 token, address to, uint256 amount) internal\r\n  {\r\n    _call(address(token), abi.encodeWithSelector(IERC20.transfer.selector, to, amount), \"!st\");\r\n  }\r\n\r\n  function safeTransferFrom (IERC20 token, address from, address to, uint256 amount) internal\r\n  {\r\n    _call(address(token), abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount), \"!stf\");\r\n  }\r\n}\r\n"
    },
    "contracts/WUSD.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.17;\r\n\r\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport { EnumerableSet } from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport { ISwapRouter } from \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\r\n\r\nimport { ReentrancyGuard } from \"./utils/ReentrancyGuard.sol\";\r\nimport { SafeToken } from \"./utils/SafeToken.sol\";\r\n\r\nimport { IERC20 } from \"./interfaces/IERC20.sol\";\r\nimport { IGlove } from \"./interfaces/IGlove.sol\";\r\nimport { IRegistry } from \"./interfaces/IRegistry.sol\";\r\nimport { IFrontender } from \"./interfaces/IFrontender.sol\";\r\nimport { Snapshot, IWUSD } from \"./interfaces/IWUSD.sol\";\r\n\r\n\r\ncontract WUSD is IWUSD, ReentrancyGuard\r\n{\r\n  using SafeToken for IERC20;\r\n  using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n\r\n  bytes32 private constant _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n  bytes32 private constant _DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\r\n\r\n  bytes32 private constant _NAME_HASH = keccak256(\"Wrapped USD\");\r\n  bytes32 private constant _VERSION_HASH = keccak256(\"1\");\r\n\r\n\r\n  ISwapRouter private constant _ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n\r\n  IRegistry private constant _REGISTRY = IRegistry(0x4E23524aA15c689F2d100D49E27F28f8E5088C0D);\r\n\r\n  address private constant _GLOVE = 0x70c5f366dB60A2a0C59C4C24754803Ee47Ed7284;\r\n  address private constant _USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n  address private constant _USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n  uint256 private constant _MIN_GLOVABLE = 100e18;\r\n  uint256 private constant _MID_GLOVE = 0.01e18;\r\n  uint256 private constant _MAX_GLOVE = 2e18;\r\n  uint256 private constant _EPOCH = 100_000e18;\r\n\r\n  uint24 private constant _ROUTE = 500;\r\n\r\n\r\n  bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n  uint256 private immutable _CACHED_CHAIN_ID;\r\n  address private immutable _CACHED_THIS;\r\n\r\n\r\n  Snapshot private _snapshot;\r\n  EnumerableSet.AddressSet private _fiatcoins;\r\n\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  mapping(address => uint256) private _epoch;\r\n  mapping(address => uint256) private _decimal;\r\n\r\n  mapping(address => uint256) private _nonce;\r\n\r\n  mapping(address => uint256) private _balance;\r\n  mapping(address => mapping(address => uint256)) private _allowance;\r\n\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  event Wrap(address indexed account, address fiatcoin, uint256 amount, address referrer);\r\n  event Unwrap(address indexed account, address fiatcoin, uint256 amount);\r\n\r\n\r\n  constructor (address[] memory fiatcoins)\r\n  {\r\n    uint256 decimal;\r\n    address fiatcoin;\r\n\r\n    for (uint256 i; i < fiatcoins.length;)\r\n    {\r\n      fiatcoin = fiatcoins[i];\r\n      decimal = IERC20(fiatcoin).decimals();\r\n\r\n      _fiatcoins.add(fiatcoin);\r\n      _decimal[fiatcoin] = decimal;\r\n\r\n      IERC20(fiatcoin).safeApprove(address(_ROUTER), type(uint128).max);\r\n\r\n\r\n      unchecked { i++; }\r\n    }\r\n\r\n\r\n    _CACHED_THIS = address(this);\r\n    _CACHED_CHAIN_ID = block.chainid;\r\n    _CACHED_DOMAIN_SEPARATOR = _separator();\r\n\r\n\r\n    _snapshot = Snapshot({ epoch: 1, last: 0, cumulative: 0 });\r\n  }\r\n\r\n  function name () public pure returns (string memory)\r\n  {\r\n    return \"Wrapped USD\";\r\n  }\r\n\r\n  function symbol () public pure returns (string memory)\r\n  {\r\n    return \"WUSD\";\r\n  }\r\n\r\n  function decimals () public pure returns (uint8)\r\n  {\r\n    return 18;\r\n  }\r\n\r\n  function totalSupply () public view returns (uint256)\r\n  {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf (address account) public view returns (uint256)\r\n  {\r\n    return _balance[account];\r\n  }\r\n\r\n\r\n  function snapshot () public view returns (Snapshot memory)\r\n  {\r\n    return _snapshot;\r\n  }\r\n\r\n  function epochOf (address account) public view returns (uint256)\r\n  {\r\n    return _epoch[account];\r\n  }\r\n\r\n\r\n  function _separator () private view returns (bytes32)\r\n  {\r\n    return keccak256(abi.encode(_DOMAIN_TYPEHASH, _NAME_HASH, _VERSION_HASH, block.chainid, address(this)));\r\n  }\r\n\r\n  function DOMAIN_SEPARATOR () public view returns (bytes32)\r\n  {\r\n    return (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) ? _CACHED_DOMAIN_SEPARATOR : _separator();\r\n  }\r\n\r\n  function nonces (address owner) public view returns (uint256)\r\n  {\r\n    return _nonce[owner];\r\n  }\r\n\r\n  function allowance (address owner, address spender) public view returns (uint256)\r\n  {\r\n    return _allowance[owner][spender];\r\n  }\r\n\r\n\r\n  function _approve (address owner, address spender, uint256 amount) internal\r\n  {\r\n    _allowance[owner][spender] = amount;\r\n\r\n\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function approve (address spender, uint256 amount) public returns (bool)\r\n  {\r\n    _approve(msg.sender, spender, amount);\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance (address spender, uint256 amount) public returns (bool)\r\n  {\r\n    _approve(msg.sender, spender, _allowance[msg.sender][spender] + amount);\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance (address spender, uint256 amount) public returns (bool)\r\n  {\r\n    uint256 currentAllowance = _allowance[msg.sender][spender];\r\n\r\n    require(currentAllowance >= amount, \"WUSD: decreasing < 0\");\r\n\r\n\r\n    unchecked\r\n    {\r\n      _approve(msg.sender, spender, currentAllowance - amount);\r\n    }\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  function permit (address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public\r\n  {\r\n    require(block.timestamp <= deadline, \"WUSD: expired deadline\");\r\n\r\n\r\n    bytes32 hash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _nonce[owner]++, deadline));\r\n    address signer = ecrecover(keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR(), hash)), v, r, s);\r\n\r\n    require(signer != address(0) && signer == owner, \"WUSD: !valid signature\");\r\n\r\n\r\n    _approve(owner, spender, value);\r\n  }\r\n\r\n\r\n  function _transfer (address from, address to, uint256 amount) internal\r\n  {\r\n    require(to != address(0), \"WUSD: transfer to 0 addr\");\r\n\r\n\r\n    uint256 balance = _balance[from];\r\n\r\n    require(balance >= amount, \"WUSD: amount > balance\");\r\n\r\n\r\n    unchecked\r\n    {\r\n      _balance[from] = balance - amount;\r\n      _balance[to] += amount;\r\n    }\r\n\r\n\r\n    emit Transfer(from, to, amount);\r\n  }\r\n\r\n  function transfer (address to, uint256 amount) public returns (bool)\r\n  {\r\n    _transfer(msg.sender, to, amount);\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom (address from, address to, uint256 amount) public returns (bool)\r\n  {\r\n    uint256 currentAllowance = _allowance[from][msg.sender];\r\n\r\n\r\n    if (currentAllowance != type(uint256).max)\r\n    {\r\n      require(currentAllowance >= amount, \"WUSD: !enough allowance\");\r\n\r\n\r\n      unchecked\r\n      {\r\n        _approve(from, msg.sender, currentAllowance - amount);\r\n      }\r\n    }\r\n\r\n\r\n    _transfer(from, to, amount);\r\n\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  function _percent (uint256 amount, uint256 percent) internal pure returns (uint256)\r\n  {\r\n    return (amount * percent) / 100_00;\r\n  }\r\n\r\n  function _normalize (uint256 amount, uint256 decimal) internal pure returns (uint256)\r\n  {\r\n    return (amount * 1e18) / (10 ** decimal);\r\n  }\r\n\r\n  function _denormalize (uint256 amount, uint256 decimal) internal pure returns (uint256)\r\n  {\r\n    return (amount * (10 ** decimal)) / 1e18;\r\n  }\r\n\r\n\r\n  function _isFiatcoin (address token) internal view\r\n  {\r\n    require(_fiatcoins.contains(token), \"WUSD: !fiatcoin\");\r\n  }\r\n\r\n\r\n  function _snap (uint256 wrapping) internal\r\n  {\r\n    Snapshot memory snap = _snapshot;\r\n\r\n\r\n    if ((snap.cumulative - snap.last) >= _EPOCH)\r\n    {\r\n      _snapshot.epoch = snap.epoch + 1;\r\n      _snapshot.last = snap.cumulative;\r\n    }\r\n\r\n    if (wrapping >= _MIN_GLOVABLE || _epoch[msg.sender] > 0)\r\n    {\r\n      _epoch[msg.sender] = _snapshot.epoch;\r\n    }\r\n\r\n\r\n    _snapshot.cumulative = snap.cumulative + uint112(wrapping);\r\n  }\r\n\r\n  function _englove (uint256 wrapping) internal\r\n  {\r\n    uint256 gloves = IGlove(_GLOVE).balanceOf(msg.sender);\r\n\r\n\r\n    if (wrapping >= _MIN_GLOVABLE && gloves < _MAX_GLOVE)\r\n    {\r\n      IGlove(_GLOVE).mintCreditless(msg.sender, Math.min(_MAX_GLOVE - gloves, wrapping > 1_000e18 ? ((_MAX_GLOVE * wrapping) / _EPOCH) : ((_MID_GLOVE * wrapping) / 1_000e18)));\r\n    }\r\n  }\r\n\r\n  function _mint (address account, uint256 amount) internal\r\n  {\r\n    require(account != address(0), \"WUSD: mint to 0 addr\");\r\n\r\n\r\n    _totalSupply += amount;\r\n\r\n\r\n    unchecked\r\n    {\r\n      _balance[account] += amount;\r\n    }\r\n\r\n\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function _parse (uint256 amount, uint256 decimal) internal pure returns (uint256, uint256)\r\n  {\r\n    return (Math.max(10 ** decimal, _percent(amount, 1_00)), _normalize(amount, decimal));\r\n  }\r\n\r\n  function wrap (address fiatcoin, uint256 amount, address referrer) external nonReentrant\r\n  {\r\n    _isFiatcoin(fiatcoin);\r\n    require(amount > 0, \"WUSD: wrap(0)\");\r\n\r\n\r\n    (uint256 fee, uint256 wrapping) = _parse(amount, _decimal[fiatcoin]);\r\n\r\n\r\n    _snap(wrapping);\r\n    _mint(msg.sender, wrapping);\r\n\r\n    _englove(wrapping);\r\n    IERC20(fiatcoin).safeTransferFrom(msg.sender, address(this), amount + fee);\r\n\r\n\r\n    if (fiatcoin != _USDT && fiatcoin != _USDC)\r\n    {\r\n      _ROUTER.exactInputSingle(ISwapRouter.ExactInputSingleParams\r\n      ({\r\n        tokenIn: fiatcoin,\r\n        tokenOut: _USDC,\r\n        fee: fiatcoin != 0x0000000000085d4780B73119b644AE5ecd22b376 ? _ROUTE : 100,\r\n        recipient: _REGISTRY.collector(),\r\n        deadline: block.timestamp,\r\n        amountIn: fee,\r\n        amountOutMinimum: _percent(_denormalize(_normalize(fee, _decimal[fiatcoin]), 6), 95_00),\r\n        sqrtPriceLimitX96: 0\r\n      }));\r\n    }\r\n    else\r\n    {\r\n      IERC20(fiatcoin).safeTransfer(_REGISTRY.collector(), fee);\r\n    }\r\n\r\n\r\n    if (referrer != address(0))\r\n    {\r\n      IFrontender(_REGISTRY.frontender()).refer(msg.sender, wrapping, referrer);\r\n    }\r\n\r\n\r\n    emit Wrap(msg.sender, fiatcoin, amount, referrer);\r\n  }\r\n\r\n\r\n  function _burn (address account, uint256 amount) internal\r\n  {\r\n    uint256 balance = _balance[account];\r\n\r\n    require(balance >= amount, \"WUSD: burn > balance\");\r\n\r\n\r\n    unchecked\r\n    {\r\n      _balance[account] = balance - amount;\r\n      _totalSupply -= amount;\r\n    }\r\n\r\n\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function _deglove (uint256 amount, uint256 balance) internal\r\n  {\r\n    uint256 creditless = IGlove(_GLOVE).creditlessOf(msg.sender);\r\n\r\n    uint256 credits = _percent(creditless, Math.min((amount * 100_00) / balance, (_snapshot.epoch - _epoch[msg.sender]) * 100));\r\n\r\n\r\n    if (_epoch[msg.sender] > 0)\r\n    {\r\n      if (amount == balance)\r\n      {\r\n        _epoch[msg.sender] = 0;\r\n\r\n        IGlove(_GLOVE).burn(msg.sender, creditless - credits);\r\n      }\r\n      else\r\n      {\r\n        _epoch[msg.sender] = _snapshot.epoch;\r\n      }\r\n\r\n\r\n      IGlove(_GLOVE).creditize(msg.sender, credits);\r\n    }\r\n  }\r\n\r\n  function unwrap (address fiatcoin, uint256 amount) external nonReentrant\r\n  {\r\n    _isFiatcoin(fiatcoin);\r\n\r\n\r\n    uint256 balance = _balance[msg.sender];\r\n    uint256 unwrapping = _denormalize(amount, _decimal[fiatcoin]);\r\n\r\n    require(amount > 0, \"WUSD: unwrap(0)\");\r\n    require((IERC20(fiatcoin).balanceOf(address(this)) - (10 ** _decimal[fiatcoin])) >= unwrapping, \"WUSD: !enough fiatcoin\");\r\n\r\n\r\n    _burn(msg.sender, amount);\r\n    _deglove(amount, balance);\r\n    IERC20(fiatcoin).safeTransfer(msg.sender, unwrapping);\r\n\r\n\r\n    emit Unwrap(msg.sender, fiatcoin, amount);\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}