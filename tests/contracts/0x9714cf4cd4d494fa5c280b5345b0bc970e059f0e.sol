{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/DropFactory/IDropFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\npragma solidity 0.8.19;\n\nimport \"../Global/IConfigStructures.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDropFactory is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                     EVENTS\n   * =====================================================================================================================\n   */\n  event DefaultMetadropPrimaryShareBasisPointsSet(\n    uint256 defaultPrimaryFeeBasisPoints\n  );\n  event DefaultMetadropRoyaltyBasisPointsSet(\n    uint256 defaultMetadropRoyaltyBasisPoints\n  );\n  event PrimaryFeeOverrideByDropSet(string dropId, uint256 percentage);\n  event RoyaltyBasisPointsOverrideByDropSet(\n    string dropId,\n    uint256 royaltyBasisPoints\n  );\n  event PlatformTreasurySet(address platformTreasury);\n  event TemplateAdded(\n    TemplateStatus status,\n    uint256 templateNumber,\n    uint256 loadedDate,\n    address templateAddress,\n    string templateDescription\n  );\n  event TemplateTerminated(uint16 templateNumber);\n  event DropApproved(\n    string indexed dropId,\n    address indexed dropOwner,\n    bytes32 dropHash\n  );\n  event DropDetailsDeleted(string indexed dropId);\n  event DropExpiryInDaysSet(uint32 expiryInDays);\n  event pauseCutOffInDaysSet(uint8 cutOffInDays);\n  event SubmissionFeeETHUpdated(uint256 oldFee, uint256 newFee);\n  event InitialInstanceOwnerSet(address initialInstanceOwner);\n  event DropDeployed(\n    string dropId,\n    address nftInstance,\n    address vestingInstance,\n    PrimarySaleModuleInstance[],\n    address royaltySplitterInstance\n  );\n  event vrfSubscriptionIdSet(uint64 vrfSubscriptionId_);\n  event vrfKeyHashSet(bytes32 vrfKeyHash);\n  event vrfCallbackGasLimitSet(uint32 vrfCallbackGasLimit);\n  event vrfRequestConfirmationsSet(uint16 vrfRequestConfirmations);\n  event vrfNumWordsSet(uint32 vrfNumWords);\n  event metadropOracleAddressSet(address metadropOracleAddress);\n  event messageValidityInSecondsSet(uint80 messageValidityInSeconds);\n\n  /** ====================================================================================================================\n   *                                                     ERRORS\n   * =====================================================================================================================\n   */\n  error MetadropOnly();\n  error ValueExceedsMaximum();\n  error TemplateCannotBeAddressZero();\n  error ProjectOwnerCannotBeAddressZero();\n  error PlatformAdminCannotBeAddressZero();\n  error ReviewAdminCannotBeAddressZero();\n  error PlatformTreasuryCannotBeAddressZero();\n  error InitialInstanceOwnerCannotBeAddressZero();\n  error MetadropOracleCannotBeAddressZero();\n  error VRFCoordinatorCannotBeAddressZero();\n\n  /** ====================================================================================================================\n   *                                                    FUNCTIONS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getPlatformTreasury  return the treasury address (provided as explicit method rather than public var)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return platformTreasury_  Treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPlatformTreasury()\n    external\n    view\n    returns (address platformTreasury_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) getDropDetails   Getter for the drop details held on chain\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_  The drop ID being queries\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return dropDetails_  The drop details struct for the provided drop Id.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDropDetails(\n    string memory dropId_\n  ) external view returns (DropApproval memory dropDetails_);\n\n  /** ====================================================================================================================\n   *                                                 PRIVILEGED ACCESS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFSubscriptionId    Set the chainlink subscription id..\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfSubscriptionId_    The VRF subscription that this contract will consume chainlink from.\n\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFSubscriptionId(uint64 vrfSubscriptionId_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFKeyHash   Set the chainlink keyhash (gas lane).\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfKeyHash_  The desired VRF keyhash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFKeyHash(bytes32 vrfKeyHash_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFCallbackGasLimit  Set the chainlink callback gas limit\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfCallbackGasLimit_  Callback gas limit\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFCallbackGasLimit(uint32 vrfCallbackGasLimit_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFRequestConfirmations  Set the chainlink number of confirmations required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfRequestConfirmations_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFRequestConfirmations(uint16 vrfRequestConfirmations_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) setVRFNumWords  Set the chainlink number of words required\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vrfNumWords_  Required number of confirmations\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setVRFNumWords(uint32 vrfNumWords_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMetadropOracleAddress  Set the metadrop trusted oracle address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param metadropOracleAddress_   Trusted metadrop oracle address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropOracleAddress(address metadropOracleAddress_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->ORACLE\n   * @dev (function) setMessageValidityInSeconds  Set the validity period of signed messages\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param messageValidityInSeconds_   Validity period in seconds for messages signed by the trusted oracle\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMessageValidityInSeconds(\n    uint80 messageValidityInSeconds_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawETH   A withdraw function to allow ETH to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawETH(uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) withdrawERC20   A withdraw function to allow ERC20s to be withdrawn to the treasury\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param token_   The contract address of the token being withdrawn\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param amount_  The amount to withdraw\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getDefaultMetadropPrimaryShareBasisPoints   Getter for the default platform primary fee basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return defaultMetadropPrimaryShareBasisPoints_   The metadrop primary share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getDefaultMetadropPrimaryShareBasisPoints()\n    external\n    view\n    returns (uint256 defaultMetadropPrimaryShareBasisPoints_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyBasisPoints   Getter for the metadrop royalty share in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyBasisPoints_   The metadrop royalty share in basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyBasisPoints()\n    external\n    view\n    returns (uint256 metadropRoyaltyBasisPoints_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getPrimaryFeeOverrideByDrop    Getter for any drop specific primary fee override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                      The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                      If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return primaryFeeOverrideByDrop_   The primary fee override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPrimaryFeeOverrideByDrop(\n    string memory dropId_\n  ) external view returns (bool isSet_, uint256 primaryFeeOverrideByDrop_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) getMetadropRoyaltyOverrideByDrop    Getter for any drop specific royalty basis points override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                               The drop Id being queried\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isSet_                               If this override is set\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return metadropRoyaltyOverrideByDrop_       Royalty basis points override for the drop (if any)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getMetadropRoyaltyOverrideByDrop(\n    string memory dropId_\n  ) external view returns (bool isSet_, uint256 metadropRoyaltyOverrideByDrop_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) getPauseCutOffInDays    Getter for the default pause cutoff period\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function getPauseCutOffInDays()\n    external\n    view\n    returns (uint8 pauseCutOffInDays_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->PAUSABLE\n   * @dev (function) setpauseCutOffInDays    Set the number of days from the start date that a contract can be paused for\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutOffInDays_    Default pause cutoff in days\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setpauseCutOffInDays(uint8 pauseCutOffInDays_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDropFeeETH    Set drop fee (if any)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fee_    New drop fee\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropFeeETH(uint256 fee_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPlatformTreasury    Set the platform treasury address\n   *\n   * Set the address that platform fees will be paid to / can be withdrawn to.\n   * Note that this is restricted to the highest authority level, the default\n   * admin. Platform admins can trigger a withdrawal to the treasury, but only\n   * the default admin can set or alter the treasury address. It is recommended\n   * that the default admin is highly secured and restrited e.g. a multi-sig.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param platformTreasury_    New treasury address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPlatformTreasury(address platformTreasury_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setinitialInstanceOwner    Set the owner on all created instances\n   *\n   * The 'initial instance owner' is the address that will be set as the Owner\n   * on all cloned instances of contracts created in this factory. Note that we the\n   * contract instances are clones we do not call a constructor when an instance\n   * is created, rather we set the owner on the call to initialise.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param initialInstanceOwner_    New owner address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setinitialInstanceOwner(address initialInstanceOwner_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setDefaultMetadropPrimaryShareBasisPoints    Setter for the metadrop primary basis points fee\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropPrimaryShareBasisPoints_    New default meradrop primary share\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultMetadropPrimaryShareBasisPoints(\n    uint32 defaultMetadropPrimaryShareBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyBasisPoints   Setter for the metadrop royalty percentate in\n   *                                                basis points i.e. 100 = 1%\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param defaultMetadropRoyaltyBasisPoints_      New default royalty basis points\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyBasisPoints(\n    uint32 defaultMetadropRoyaltyBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setPrimaryFeeOverrideByDrop   Setter for the metadrop primary percentage fee, in basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_           The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param basisPoints_      The basis points override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPrimaryFeeOverrideByDrop(\n    string memory dropId_,\n    uint256 basisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) setMetadropRoyaltyOverrideByDrop   Setter to override royalty basis points\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                  The drop for the override\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyBasisPoints_      Royalty basis points verride\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMetadropRoyaltyOverrideByDrop(\n    string memory dropId_,\n    uint256 royaltyBasisPoints_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) setDropExpiryInDays   Setter for the number of days that must pass since a drop was last changed\n   *                                       before it can be removed from storage\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropExpiryInDays_              The number of days that must pass for a submitted drop to be considered expired\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDropExpiryInDays(uint32 dropExpiryInDays_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) grantPlatformAdmin  Allows the super user Default Admin to add an address to the platform admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_              The address of the new platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantPlatformAdmin(address newPlatformAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) grantReviewAdmin  Allows the super user Default Admin to add an address to the review admin group.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newReviewAdmin_              The address of the new review admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantReviewAdmin(address newReviewAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) revokePlatformAdmin  Allows the super user Default Admin to revoke from the platform admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param oldPlatformAdmin_              The address of the old platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function revokePlatformAdmin(address oldPlatformAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) revokeReviewAdmin  Allows the super user Default Admin to revoke an address to the review admin group\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param oldReviewAdmin_              The address of the old review admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function revokeReviewAdmin(address oldReviewAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferDefaultAdmin  Allows the super user Default Admin to transfer this right to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newDefaultAdmin_              The address of the new default admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferDefaultAdmin(address newDefaultAdmin_) external;\n\n  /** ====================================================================================================================\n   *                                                    VRF SERVER\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                                -->VRF\n   * @dev (function) requestVRFRandomness  Get the metadata start position for use on reveal of the calling collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function requestVRFRandomness() external;\n\n  /** ====================================================================================================================\n   *                                                    TEMPLATES\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) addTemplate  Add a contract to the template library\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param contractAddress_              The address of the deployed contract that will be a template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateDescription_          The description of the template\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function addTemplate(\n    address payable contractAddress_,\n    string memory templateDescription_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->TEMPLATES\n   * @dev (function) terminateTemplate  Mark a template as terminated\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param templateNumber_              The number of the template to be marked as terminated\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function terminateTemplate(uint16 templateNumber_) external;\n\n  /** ====================================================================================================================\n   *                                                    DROP CREATION\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) removeExpiredDropDetails  A review admin user can remove details for a drop that has expired.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id for which details are to be removed\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function removeExpiredDropDetails(string memory dropId_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) approveDrop  A review admin user can approve the drop.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_              The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_        Address of the project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropConfigHash_      The config hash for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function approveDrop(\n    string memory dropId_,\n    address projectOwner_,\n    bytes32 dropConfigHash_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createDrop     Create a drop using the stored and approved configuration if called by the address\n   *                                that the user has designated as project admin\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param collectionURIs_                An array of collection URIs (pre-reveal, ipfs and arweave)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createDrop(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_,\n    string[3] memory collectionURIs_\n  ) external payable;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) configHashMatches  Check the passed config against the stored config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return matches_                      Whether the hash matches (true) or not (false)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function configHashMatches(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) external view returns (bool matches_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->DROPS\n   * @dev (function) createConfigHash  Create the config hash\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param dropId_                        The drop Id being approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param vestingModule_                 Struct containing the relevant config for the vesting module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_                     Struct containing the relevant config for the NFT module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModulesConfig_      Array of structs containing the config details for all primary sale modules\n   *                                       associated with this drop (can be 1 to n)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitterModule_  Struct containing the relevant config for the royalty splitter module\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param salesPageHash_                 A hash of sale page data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param customNftAddress_              If this drop uses a custom NFT this will hold that contract's address\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return configHash_                   The bytes32 config hash\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function createConfigHash(\n    string memory dropId_,\n    VestingModuleConfig memory vestingModule_,\n    NFTModuleConfig memory nftModule_,\n    PrimarySaleModuleConfig[] memory primarySaleModulesConfig_,\n    RoyaltySplitterModuleConfig memory royaltyPaymentSplitterModule_,\n    bytes32 salesPageHash_,\n    address customNftAddress_\n  ) external pure returns (bytes32 configHash_);\n}\n"
    },
    "contracts/Global/AuthorityModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title AuthorityModel.sol. Library for global authority components\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\n/**\n *\n * @dev Inheritance details:\n *      AccessControl           OZ access control implementation - used for authority control\n *\n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract AuthorityModel is AccessControl {\n  // Platform admin: The role for platform admins. Platform admins can be added. These addresses have privileged\n  // access to maintain configuration like the platform fee.\n  bytes32 public constant PLATFORM_ADMIN = keccak256(\"PLATFORM_ADMIN\");\n\n  // Review admin: access to perform reviews of drops, in this case the authority to maintain the drop status parameter, and\n  // set it from review to editable (when sending back to the project owner), or from review to approved (when)\n  // the drop is ready to go).\n  bytes32 public constant REVIEW_ADMIN = keccak256(\"REVIEW_ADMIN\");\n\n  // Project owner: This is the role for the project itself, i.e. the team that own this drop.\n  bytes32 internal constant PROJECT_OWNER = keccak256(\"PROJECT_OWNER\");\n\n  // Address for the factory:\n  address public factory;\n\n  /** ====================================================================================================================\n   *                                                        ERRORS\n   * =====================================================================================================================\n   */\n  error CallerIsNotDefaultAdmin(address caller);\n  error CallerIsNotPlatformAdmin(address caller);\n  error CallerIsNotReviewAdmin(address caller);\n  error CallerIsNotPlatformAdminOrProjectOwner(address caller);\n  error CallerIsNotPlatformAdminOrFactory(address caller);\n  error CallerIsNotProjectOwner(address caller);\n\n  /** ====================================================================================================================\n   *                                                       MODIFIERS\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyDefaultAdmin. The associated action can only be taken by an address with the\n   * default admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyDefaultAdmin() {\n    if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender))\n      revert CallerIsNotDefaultAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdmin() {\n    if (!hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyReviewAdmin. The associated action can only be taken by an address with the\n   * review admin role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyReviewAdmin() {\n    if (!hasRole(REVIEW_ADMIN, msg.sender))\n      revert CallerIsNotReviewAdmin(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyPlatformAdminOrProjectOwner. The associated action can only be taken by an address with the\n   * platform admin role or project owner role\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyPlatformAdminOrProjectOwner() {\n    if (\n      !hasRole(PLATFORM_ADMIN, msg.sender) &&\n      !hasRole(PROJECT_OWNER, msg.sender)\n    ) revert CallerIsNotPlatformAdminOrProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyProjectOwner. The associated action can only be taken by an address with the\n   * project owner role.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyProjectOwner() {\n    if (!hasRole(PROJECT_OWNER, msg.sender))\n      revert CallerIsNotProjectOwner(msg.sender);\n    _;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (modifier) onlyFactoryOrPlatformAdmin. The associated action can only be taken by an address with the\n   * platform admin role or the factory.\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  modifier onlyFactoryOrPlatformAdmin() {\n    if (msg.sender != factory && !hasRole(PLATFORM_ADMIN, msg.sender))\n      revert CallerIsNotPlatformAdminOrFactory(msg.sender);\n    _;\n  }\n}\n"
    },
    "contracts/Global/IConfigStructures.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title IConfigStructures.sol. Interface for common config structures used accross the platform\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\ninterface IConfigStructures {\n  enum DropStatus {\n    approved,\n    deployed,\n    cancelled\n  }\n\n  enum TemplateStatus {\n    live,\n    terminated\n  }\n\n  enum TokenAllocationMethod {\n    sequential,\n    random\n  }\n\n  // The current status of the mint:\n  //   - notEnabled: This type of mint is not part of this drop\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\n  //   - open: it's ready for ya, get in there.\n  //   - finished: been and gone.\n  //   - unknown: theoretically impossible.\n  enum MintStatus {\n    notEnabled,\n    notYetOpen,\n    open,\n    finished,\n    unknown\n  }\n\n  struct SubListConfig {\n    uint256 start;\n    uint256 end;\n    uint256 phaseMaxSupply;\n  }\n\n  struct PrimarySaleModuleInstance {\n    address instanceAddress;\n    string instanceDescription;\n  }\n\n  struct NFTModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct PrimarySaleModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct VestingModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct RoyaltySplitterModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModuleConfig {\n    uint256 templateId;\n    bytes configData;\n  }\n\n  struct InLifeModules {\n    InLifeModuleConfig[] modules;\n  }\n\n  struct NFTConfig {\n    uint256 supply;\n    uint256 mintingMethod;\n    string name;\n    string symbol;\n    bytes32 positionProof;\n  }\n\n  struct DropApproval {\n    DropStatus status;\n    uint32 lastChangedDate;\n    address dropOwnerAddress;\n    bytes32 configHash;\n  }\n\n  struct Template {\n    TemplateStatus status;\n    uint16 templateNumber;\n    uint32 loadedDate;\n    address payable templateAddress;\n    string templateDescription;\n  }\n\n  struct NumericOverride {\n    bool isSet;\n    uint248 overrideValue;\n  }\n}\n"
    },
    "contracts/NFT/ERC721M.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title ERC721M.sol. Metadrop implementation of ERC721\n *\n * @author metadrop https://metadrop.com/\n *\n * @notice Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n *\n * Included features:\n * - LayerZero ONFT\n * - gas efficient batch minting\n * - clonable\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol\";\nimport \"../ThirdParty/LayerZero/onft/IONFT721.sol\";\nimport \"../ThirdParty/LayerZero/onft/ONFT721Core.sol\";\n\ncontract ERC721M is\n  Context,\n  ERC165,\n  IERC721,\n  IERC721Metadata,\n  ONFT721Core,\n  IONFT721,\n  ERC2981,\n  AccessControl\n{\n  using Address for address;\n  using Strings for uint256;\n\n  address internal constant BURN_ADDRESS =\n    0x000000000000000000000000000000000000dEaD;\n\n  // Boolean to indicate if this contract is a layerZero base contract\n  bool private immutable layerZeroBase;\n\n  // EPS Register\n  IEPSDelegationRegister internal immutable epsRegister;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  uint256 internal remainingSupply;\n  uint256 public maxSupply;\n\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) private _owners;\n\n  // Mapping owner address to token count\n  mapping(address => uint256) private _balances;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  error CallerIsNotOwnerOrApproved();\n  error SendFromIncorrectOwner();\n  error InvalidToken();\n  error QuantityExceedsRemainingSupply();\n\n  /** ====================================================================================================================\n   *                                              CONSTRUCTOR AND INTIIALISE\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                        -->CONSTRUCTOR\n   * @dev constructor           The constructor is not called when the contract is cloned. In this\n   *                            constructor we just setup default values and set the template contract to initialised.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param epsRegister_        The EPS register address (0x888888888888660F286A7C06cfa3407d09af44B2 on most chains)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param lzEndpoint_         The LZ endpoint for this chain\n   *                            (see https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param layerZeroBase_      If this contract is the base layerZero contract. For this ONFT implementation the base\n   *                            contract is where intial minting can occue. NFTs can then be sent to any supporting chain\n   *                            but cannot be 'freshly' minted on other chains and sent to the base contract.\n   * _____________________________________________________________________________________________________________________\n   */\n  constructor(\n    address epsRegister_,\n    address lzEndpoint_,\n    bool layerZeroBase_\n  ) ONFT721Core(lzEndpoint_) {\n    epsRegister = IEPSDelegationRegister(epsRegister_);\n    layerZeroBase = layerZeroBase_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseNFT  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param name_               The name of the NFT\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param symbol_             The symbol of the NFT\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param maxSupply_          The maximum supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param owner_              The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                            platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _initialiseERC721M(\n    string memory name_,\n    string memory symbol_,\n    uint256 maxSupply_,\n    address owner_\n  ) internal {\n    _name = name_;\n    _symbol = symbol_;\n    maxSupply = maxSupply_;\n    remainingSupply = maxSupply_;\n    _transferOwnership(owner_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->LAYERZERO\n   * @dev (function) _debitFrom  debit an item from a holder on layerzero call. While off-chain the NFT is custodied in\n   * this contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param from_               The current owner of the asset\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId_            The tokenId being sent via LayerZero\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _debitFrom(\n    address from_,\n    uint16,\n    bytes memory,\n    uint256 tokenId_\n  ) internal virtual override {\n    if (!(_isApprovedOrOwner(_msgSender(), tokenId_))) {\n      revert CallerIsNotOwnerOrApproved();\n    }\n\n    if (!(ownerOf(tokenId_) == from_)) {\n      revert SendFromIncorrectOwner();\n    }\n\n    _transfer(from_, address(this), tokenId_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                          -->LAYERZERO\n   * @dev (function) _creditTo  credit an item to a holder on layerzero call. While off-chain the NFT is custodied in\n   * this contract, this transfers it back to the holder\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param toAddress_          The recipient of the asset\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId_            The tokenId that has been sent via LayerZero\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _creditTo(\n    uint16,\n    address toAddress_,\n    uint256 tokenId_\n  ) internal virtual override {\n    if (!(_exists(tokenId_) && ownerOf(tokenId_) == address(this))) {\n      revert InvalidToken();\n    }\n    // Different behaviour depending on whether this has been deployed on\n    // the base chain or a satellite chain:\n    if (layerZeroBase) {\n      // Base chain. For us to be crediting the owner this token MUST be\n      // owned by the contract, as they can only be minted on the base chain\n      if (!(_exists(tokenId_) && ownerOf(tokenId_) == address(this))) {\n        revert InvalidToken();\n      }\n\n      _transfer(address(this), toAddress_, tokenId_);\n    } else {\n      // Satellite chain. We can be crediting the user as a result of this reaching\n      // this chain for the first time (mint) OR from a token that has been minted\n      // here previously and is currently custodied by the contract.\n      if (_exists(tokenId_) && ownerOf(tokenId_) != address(this)) {\n        revert InvalidToken();\n      }\n\n      if (!_exists(tokenId_)) {\n        _safeMint(toAddress_, tokenId_);\n      } else {\n        _transfer(address(this), toAddress_, tokenId_);\n      }\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) _mintIdWithoutBalanceUpdate  Mint an item without updating a holder's balance, so that this can\n   * be performed just once per batch.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param to_          The recipient of the asset\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId_            The tokenId that has been sent via LayerZero\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _mintIdWithoutBalanceUpdate(address to_, uint256 tokenId_) private {\n    _beforeTokenTransfer(address(0), to_, tokenId_, 1);\n\n    _owners[tokenId_] = to_;\n\n    emit Transfer(address(0), to_, tokenId_);\n\n    _afterTokenTransfer(address(0), to_, tokenId_, 1);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) _mintSequential  Mint NFTs in order (0,1,2,3 etc)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param to_          The recipient of the asset\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantity_    The number of tokens to mint\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _mintSequential(\n    address to_,\n    uint256 quantity_\n  ) internal virtual returns (uint256[] memory mintedTokenIds_) {\n    if (quantity_ > remainingSupply) {\n      revert QuantityExceedsRemainingSupply();\n    }\n\n    mintedTokenIds_ = new uint256[](quantity_);\n\n    uint256 tokenId = maxSupply - remainingSupply;\n\n    for (uint256 i = 0; i < quantity_; ) {\n      _mintIdWithoutBalanceUpdate(to_, tokenId + i);\n\n      mintedTokenIds_[i] = tokenId + i;\n\n      unchecked {\n        i++;\n      }\n    }\n\n    remainingSupply = remainingSupply - quantity_;\n    _balances[to_] += quantity_;\n\n    return (mintedTokenIds_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *\n   * @dev (function) totalSupply  Returns total supply (minted - burned)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalSupply_   The total supply of this collection (minted - burned)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalSupply() external view virtual returns (uint256 totalSupply_) {\n    //\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalUnminted  Returns the remaining unminted supply\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalUnminted_   The total unminted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalUnminted()\n    external\n    view\n    virtual\n    returns (uint256 totalUnminted_)\n  {\n    //\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalMinted  Returns the total number of tokens ever minted\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalMinted_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalMinted() external view virtual returns (uint256 totalMinted_) {\n    //\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalBurned  Returns the count of tokens sent to the burn address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalBurned_   The total burned supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalBurned() external view virtual returns (uint256 totalBurned_) {\n    //\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  )\n    public\n    view\n    virtual\n    override(ERC165, IERC165, ERC2981, ONFT721Core, AccessControl)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(\n    address owner\n  ) public view virtual override returns (uint256) {\n    require(owner != address(0), \"Non-owner\");\n    return _balances[owner];\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(\n    uint256 tokenId\n  ) public view virtual override returns (address) {\n    address owner = _ownerOf(tokenId);\n    require(owner != address(0), \"Invalid token\");\n    return owner;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(\n    uint256 tokenId\n  ) public view virtual override returns (string memory) {\n    _requireMinted(tokenId);\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overridden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    address owner = ERC721M.ownerOf(tokenId);\n    require(to != owner, \"Approve to owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"Unauthorised\"\n    );\n\n    _approve(to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(\n    uint256 tokenId\n  ) public view virtual override returns (address) {\n    _requireMinted(tokenId);\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(\n    address operator,\n    bool approved\n  ) public virtual override {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  ) public view virtual override returns (bool) {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    //solhint-disable-next-line max-line-length\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Unauthorised\");\n\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public virtual override {\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Unauthorised\");\n    _safeTransfer(from, to, tokenId, data);\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * `data` is additional data, it has no specified format and it is sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _transfer(from, to, tokenId);\n    require(_checkOnERC721Received(from, to, tokenId, data), \"Non-receiver\");\n  }\n\n  /**\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n   */\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n    return _owners[tokenId];\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _ownerOf(tokenId) != address(0);\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isApprovedOrOwner(\n    address spender,\n    uint256 tokenId\n  ) internal view virtual returns (bool) {\n    address owner = ERC721M.ownerOf(tokenId);\n    return (spender == owner ||\n      isApprovedForAll(owner, spender) ||\n      getApproved(tokenId) == spender);\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 tokenId) internal virtual {\n    _safeMint(to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, data),\n      \"Non-receiver\"\n    );\n  }\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 tokenId) internal virtual {\n    require(to != address(0), \"0 address\");\n    require(!_exists(tokenId), \"Already minted\");\n\n    _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n    require(!_exists(tokenId), \"Already minted\");\n\n    unchecked {\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\n      // Given that tokens are minted one by one, it is impossible in practice that\n      // this ever happens. Might change if we allow batch minting.\n      // The ERC fails to describe this case.\n      _balances[to] += 1;\n    }\n\n    _owners[tokenId] = to;\n\n    emit Transfer(address(0), to, tokenId);\n\n    _afterTokenTransfer(address(0), to, tokenId, 1);\n  }\n\n  /**\n   * @dev Burns `tokenId`. See {ERC721-_burn}.\n   *\n   * Requirements:\n   *\n   * - The caller must own `tokenId` or be an approved operator.\n   */\n  function burn(uint256 tokenId) public virtual {\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Unauthorised\");\n    _burn(tokenId);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address owner = ERC721M.ownerOf(tokenId);\n\n    _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n    // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n    owner = ERC721M.ownerOf(tokenId);\n\n    // Clear approvals\n    delete _tokenApprovals[tokenId];\n\n    unchecked {\n      // Cannot overflow, as that would require more tokens to be burned/transferred\n      // out than the owner initially received through minting and transferring in.\n      _balances[owner] -= 1;\n      _owners[tokenId] = BURN_ADDRESS;\n      _balances[BURN_ADDRESS] += 1;\n    }\n    delete _owners[tokenId];\n\n    emit Transfer(owner, BURN_ADDRESS, tokenId);\n\n    _afterTokenTransfer(owner, BURN_ADDRESS, tokenId, 1);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual {\n    require(ERC721M.ownerOf(tokenId) == from, \"Non-owner\");\n    require(to != address(0), \"0 address\");\n\n    _beforeTokenTransfer(from, to, tokenId, 1);\n\n    // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n    require(ERC721M.ownerOf(tokenId) == from, \"Non-owner\");\n\n    // Clear approvals from the previous owner\n    delete _tokenApprovals[tokenId];\n\n    unchecked {\n      // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n      // `from`'s balance is the number of token held, which is at least one before the current\n      // transfer.\n      // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n      // all 2**256 token ids to be minted, which in practice is impossible.\n      _balances[from] -= 1;\n      _balances[to] += 1;\n    }\n    _owners[tokenId] = to;\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfer(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits an {Approval} event.\n   */\n  function _approve(address to, uint256 tokenId) internal virtual {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(ERC721M.ownerOf(tokenId), to, tokenId);\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(\n    address owner,\n    address operator,\n    bool approved\n  ) internal virtual {\n    require(owner != operator, \"Approve to caller\");\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  /**\n   * @dev Reverts if the `tokenId` has not been minted yet.\n   */\n  function _requireMinted(uint256 tokenId) internal view virtual {\n    require(_exists(tokenId), \"Invalid token\");\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n        } else {\n          /// @solidity memory-safe-assembly\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n   * - When `from` is zero, the tokens will be minted for `to`.\n   * - When `to` is zero, ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 /* firstTokenId */,\n    uint256 batchSize\n  ) internal virtual {\n    if (batchSize > 1) {\n      if (from != address(0)) {\n        _balances[from] -= batchSize;\n      }\n      if (to != address(0)) {\n        _balances[to] += batchSize;\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n   * - When `from` is zero, the tokens were minted for `to`.\n   * - When `to` is zero, ``from``'s tokens were burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 firstTokenId,\n    uint256 batchSize\n  ) internal virtual {}\n}\n"
    },
    "contracts/NFT/INFTByMetadrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title INFTByMetadrop.sol. Interface for metadrop NFT standard\n *\n * @author metadrop https://metadrop.com/\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Global/IConfigStructures.sol\";\n\ninterface INFTByMetadrop is IConfigStructures {\n  /** ====================================================================================================================\n   *                                                     EVENTS\n   * =====================================================================================================================\n   */\n  event Revealed();\n  event RandomNumberReceived(uint256 indexed requestId, uint256 randomNumber);\n  event VRFPositionSet(uint256 VRFPosition);\n  event PositionProofSet(bytes32 positionProof);\n  event MetadropMint(\n    address indexed allowanceAddress,\n    address indexed recipientAddress,\n    address callerAddress,\n    address primarySaleModuleAddress,\n    uint256 unitPrice,\n    uint256[] tokenIds\n  );\n\n  /** ====================================================================================================================\n   *                                                     ERRORS\n   * =====================================================================================================================\n   */\n  error TransferFailed();\n  error AlreadyInitialised();\n  error MetadataIsLocked();\n  error InvalidTokenAllocationMethod();\n  error InvalidAddress();\n  error IncorrectConfirmationValue();\n  error MintingIsClosedForever();\n  error VRFAlreadySet();\n  error PositionProofAlreadySet();\n  error MetadropFactoryOnly();\n  error InvalidRecipient();\n  error PauseCutOffHasPassed();\n  error AdditionalAddressesCannotBeAddedToRolesUseTransferToTransferRoleToAnotherAddress();\n\n  /** ====================================================================================================================\n   *                                                    FUNCTIONS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseNFT  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param owner_              The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                            platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_       The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModules_ The primary sale modules for this drop. These are the contract addresses that are\n   *                            authorised to call mint on this contract.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_          The drop specific configuration for this NFT. This is decoded and used to set\n   *                            configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitter_  The address of the deployed royalty payment splitted for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param totalRoyaltyPercentage_  The total royalty percentage (project + metadrop) for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialiseNFT(\n    address owner_,\n    address projectOwner_,\n    PrimarySaleModuleInstance[] calldata primarySaleModules_,\n    NFTModuleConfig calldata nftModule_,\n    address royaltyPaymentSplitter_,\n    uint96 totalRoyaltyPercentage_,\n    string[3] calldata collectionURIs_,\n    uint8 pauseCutOffInDays_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) metadropCustom  Returns if this contract is a custom NFT (true) or is a standard metadrop\n   *                                 ERC721M (false)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isMetadropCustom_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropCustom() external pure returns (bool isMetadropCustom_);\n\n  /** ____________________________________________________________________________________________________________________\n   *\n   * @dev (function) totalSupply  Returns total supply (minted - burned)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalSupply_   The total supply of this collection (minted - burned)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalSupply() external view returns (uint256 totalSupply_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalUnminted  Returns the remaining unminted supply\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalUnminted_   The total unminted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalUnminted() external view returns (uint256 totalUnminted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalMinted  Returns the total number of tokens ever minted\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalMinted_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalMinted() external view returns (uint256 totalMinted_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalBurned  Returns the count of tokens sent to the burn address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalBurned_   The total burned supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalBurned() external view returns (uint256 totalBurned_);\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferProjectOwner  Allows the current project owner to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_   New project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(address newProjectOwner_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferPlatformAdmin  Allows the current platform admin to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_   New platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferPlatformAdmin(address newPlatformAdmin_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setURIs  Set the URI data for this contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param preRevealURI_   The URI to use pre-reveal\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param arweaveURI_     The URI for arweave\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param ipfsURI_     The URI for IPFS\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setURIs(\n    string calldata preRevealURI_,\n    string calldata arweaveURI_,\n    string calldata ipfsURI_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) lockURIsCannotBeUndone  Lock the URI data for this contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_   The confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function lockURIsCannotBeUndone(string calldata confirmation_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                       -->LOCK MINTING\n   * @dev (function) setMintingCompleteForeverCannotBeUndone  Allow project owner OR platform admin to set minting\n   *                                                          complete\n   *\n   * @notice Enter confirmation value of \"MintingComplete\" to confirm that you are closing minting.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_  Confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMintingCompleteForeverCannotBeUndone(\n    string calldata confirmation_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) revealCollection  Set the collection to revealed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function revealCollection() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setPositionProof  Set the metadata position proof\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param positionProof_  The metadata proof\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPositionProof(bytes32 positionProof_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setUseArweave  Guards against either arweave or IPFS being no more\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param useArweave_   Boolean to indicate whether arweave should be used or not (true = use arweave, false = use IPFS)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setUseArweave(bool useArweave_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) setDefaultRoyalty  Set the royalty percentage\n   *\n   * @notice - we have specifically NOT implemented the ability to have different royalties on a token by token basis.\n   * This reduces the complexity of processing on multi-buys, and also avoids challenges to decentralisation (e.g. the\n   * project targetting one users tokens with larger royalties)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_   Royalty receiver\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fraction_   Royalty fraction\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultRoyalty(address recipient_, uint96 fraction_) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) deleteDefaultRoyalty  Delete the royalty percentage claimed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function deleteDefaultRoyalty() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) metadropMint  Mint tokens. Can only be called from a valid primary market contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The address that has called mint through the primary sale module.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param allowanceAddress_      The address that has an allowance being used in this mint. This will be the same as the\n   *                               calling address in almost all cases. An example of when they may differ is in a list\n   *                               mint where the caller is a delegate of another address with an allowance in the list.\n   *                               The caller is performing the mint, but it is the allowance for the allowance address\n   *                               that is being checked and decremented in this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_   The quantity of tokens to be minted\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param unitPrice_        The unit price for each token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropMint(\n    address caller_,\n    address recipient_,\n    address allowanceAddress_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  ) external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setStartPosition  Get the metadata start position for use on reveal of this collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setStartPosition() external;\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) fulfillRandomWords  Callback from the chainlinkv2 oracle (on factory) with randomness\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param requestId_      The Id of this request (this contract will submit a single request)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param randomWords_   The random words returned from chainlink\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function fulfillRandomWords(\n    uint256 requestId_,\n    uint256[] memory randomWords_\n  ) external;\n}\n"
    },
    "contracts/NFT/NFTByMetadrop.sol": {
      "content": "// SPDX-License-Identifier: BUSL 1.0\n// Metadrop Contracts (v0.0.1)\n\n/**\n *\n * @title NFTByMetadrop.sol. This contract is the clonable template contract for\n * all metadrop NFT deployments.\n *\n * @author metadrop https://metadrop.com/\n *\n * @notice This contract does not include logic associated with the primary\n * sale of the NFT, that functionality being provided by other contracts within\n * the metadrop platform (e.g. an auction, or a public and list based sale) that\n * form a suite of primary sale modules.\n *\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\nimport \"./ERC721M.sol\";\nimport \"./INFTByMetadrop.sol\";\nimport \"../DropFactory/IDropFactory.sol\";\nimport \"../Global/AuthorityModel.sol\";\n\n/**\n *\n * @dev Inheritance details:\n *      ERC721M                 ERC721Metadrop token standard, based on openzeppelin ERC721\n *      INFTMetadrop            Interface definition for the metadrop NFT\n *      DefaultOperatorFilterer Implemented for royalty compliant filtering\n *      Pausable                Allow contract to be paused by an authorised user\n *\n */\n\ncontract NFTByMetadrop is\n  ERC721M,\n  INFTByMetadrop,\n  DefaultOperatorFilterer,\n  Pausable,\n  AuthorityModel\n{\n  using Strings for uint256;\n\n  // Which metadata source are we using:\n  bool public useArweave;\n\n  // Is metadata locked?:\n  bool public metadataLocked;\n\n  // Minting complete confirmation\n  bool public mintingComplete;\n\n  // Are we revealed:\n  bool public collectionRevealed;\n\n  // Bool that controls initialisation and only allows it to occur ONCE. This is\n  // needed as this contract is clonable, threfore the constructor is not called\n  // on cloned instances. We setup state of this contract through the initialise\n  // function.\n  bool public initialised;\n\n  // Token Allocation method enum\n  TokenAllocationMethod private allocationMethod;\n\n  uint8 public pauseCutOffInDays;\n\n  uint32 public deployTimeStamp;\n\n  // URI details:\n  string public preRevealURI;\n  string public arweaveURI;\n  string public ipfsURI;\n\n  // Proof and VRF results for metadata reveal:\n  bytes32 public positionProof;\n  uint256 public recordedRandomWord;\n  uint256 public vrfStartPosition;\n\n  // Valid primary market addresses\n  mapping(address => bool) public validPrimaryMarketAddress;\n\n  /** ====================================================================================================================\n   *                                              CONSTRUCTOR AND INTIIALISE\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                        -->CONSTRUCTOR\n   * @dev constructor           The constructor is not called when the contract is cloned. In this\n   *                            constructor we just setup default values and set the template contract to initialised.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param epsRegister_        The EPS register address (0x888888888888660F286A7C06cfa3407d09af44B2 on most chains)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param lzEndpoint_         The LZ endpoint for this chain\n   *                            (see https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param layerZeroBase_      If this contract is the base layerZero contract. For this ONFT implementation the base\n   *                            contract is where intial minting can occue. NFTs can then be sent to any supporting chain\n   *                            but cannot be 'freshly' minted on other chains and sent to the base contract.\n   * _____________________________________________________________________________________________________________________\n   */\n  constructor(\n    address epsRegister_,\n    address lzEndpoint_,\n    bool layerZeroBase_\n  ) ERC721M(epsRegister_, lzEndpoint_, layerZeroBase_) {\n    // Initialise this template instance:\n    _initialiseERC721M(\"NFT\", \"NFT\", 0, msg.sender);\n\n    initialised = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) initialiseNFT  Load configuration into storage for a new instance.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param owner_                   The owner for this contract. Will be used to set the owner in ERC721M and also the\n   *                                 platform admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_            The project owner for this drop. Sets the project admin AccessControl role\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param primarySaleModules_      The primary sale modules for this drop. These are the contract addresses that are\n   *                                 authorised to call mint on this contract.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_               The drop specific configuration for this NFT. This is decoded and used to set\n   *                                 configuration for this metadrop drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyPaymentSplitter_  The address of the deployed royalty payment splitted for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param royaltyFromSalesInBasisPoints_  The royalty basis points for this drop\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param collectionURIs_          The URIs for this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param pauseCutOffInDays_       The number of days from deployment that this contract can be paused\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function initialiseNFT(\n    address owner_,\n    address projectOwner_,\n    PrimarySaleModuleInstance[] calldata primarySaleModules_,\n    NFTModuleConfig calldata nftModule_,\n    address royaltyPaymentSplitter_,\n    uint96 royaltyFromSalesInBasisPoints_,\n    string[3] calldata collectionURIs_,\n    uint8 pauseCutOffInDays_\n  ) public {\n    // This clone instance can only be initialised ONCE\n    if (initialised) revert AlreadyInitialised();\n\n    // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n    // will not revert, but the contract will need to be registered with the registry once it is deployed in\n    // order for the modifier to filter addresses.\n    if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n      OPERATOR_FILTER_REGISTRY.registerAndSubscribe(\n        address(this),\n        CANONICAL_CORI_SUBSCRIPTION\n      );\n    }\n\n    _decodeAndSetParams(projectOwner_, nftModule_);\n\n    // Setup the platform admin and the project owner roles\n    _grantRole(PLATFORM_ADMIN, owner_);\n    // We set the role admin to the role itself. This means that the holder of this role can transfer\n    // it to another address\n    _setRoleAdmin(PLATFORM_ADMIN, PLATFORM_ADMIN);\n    _grantRole(PROJECT_OWNER, projectOwner_);\n    // We set the role admin to the role itself. This means that the holder of this role can transfer\n    // it to another address\n    _setRoleAdmin(PROJECT_OWNER, PROJECT_OWNER);\n\n    // Set the token allocation method (note - only sequential supported in v1)\n    if (allocationMethod != TokenAllocationMethod.sequential) {\n      revert InvalidTokenAllocationMethod();\n    }\n\n    // Load the primary sale modules to the mappings\n    for (uint256 i = 0; i < primarySaleModules_.length; ) {\n      validPrimaryMarketAddress[primarySaleModules_[i].instanceAddress] = true;\n      unchecked {\n        i++;\n      }\n    }\n\n    // Royalty setup\n    // If the royalty contract is address(0) then the royalty module\n    // has been flagged as not required for this drop.\n    // To avoid any possible loss of funds from incorrect configuation we don't\n    // set the royalty receiver address to address(0), but rather to the owner\n    if (royaltyPaymentSplitter_ == address(0)) {\n      _setDefaultRoyalty(owner_, royaltyFromSalesInBasisPoints_);\n    } else {\n      _setDefaultRoyalty(\n        royaltyPaymentSplitter_,\n        royaltyFromSalesInBasisPoints_\n      );\n    }\n\n    useArweave = false;\n    metadataLocked = false;\n    mintingComplete = false;\n    collectionRevealed = false;\n\n    preRevealURI = collectionURIs_[0];\n    ipfsURI = collectionURIs_[1];\n    arweaveURI = collectionURIs_[2];\n\n    factory = msg.sender;\n\n    pauseCutOffInDays = pauseCutOffInDays_;\n    deployTimeStamp = uint32(block.timestamp);\n\n    // Set this clone to initialised\n    initialised = true;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                         -->INITIALISE\n   * @dev (function) _decodeAndSetParams  Decode NFT Parameters\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param projectOwner_     The project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param nftModule_        NFT module data\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function _decodeAndSetParams(\n    address projectOwner_,\n    NFTModuleConfig calldata nftModule_\n  ) internal {\n    // Decode the config\n    (\n      uint256 decodedSupply,\n      uint256 decodedMintingMethod,\n      string memory decodedName,\n      string memory decodedSymbol,\n      bytes32 decodedPositionProof\n    ) = abi.decode(\n        nftModule_.configData,\n        (uint256, uint256, string, string, bytes32)\n      );\n\n    // Initialise values on ERC721M\n    _initialiseERC721M(\n      decodedName,\n      decodedSymbol,\n      decodedSupply,\n      projectOwner_\n    );\n\n    positionProof = decodedPositionProof;\n\n    allocationMethod = TokenAllocationMethod(decodedMintingMethod);\n  }\n\n  /** ====================================================================================================================\n   *                                            OPERATOR FILTER REGISTRY\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                    -->OPERATOR FILTER\n   * @dev (function) setApprovalForAll  Operator filter registry override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param operator            The operator for the approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param approved            If the operator is approved\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setApprovalForAll(\n    address operator,\n    bool approved\n  ) public override onlyAllowedOperatorApproval(operator) whenNotPaused {\n    super.setApprovalForAll(operator, approved);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                    -->OPERATOR FILTER\n   * @dev (function) approve  Operator filter registry override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param operator            The operator for the approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId             The tokenId for this approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function approve(\n    address operator,\n    uint256 tokenId\n  ) public override onlyAllowedOperatorApproval(operator) whenNotPaused {\n    super.approve(operator, tokenId);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                    -->OPERATOR FILTER\n   * @dev (function) transferFrom  Operator filter registry override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param from                The sender of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param to                  The recipient of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId             The tokenId for this approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override onlyAllowedOperator(from) whenNotPaused {\n    super.transferFrom(from, to, tokenId);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                    -->OPERATOR FILTER\n   * @dev (function) safeTransferFrom  Operator filter registry override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param from                The sender of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param to                  The recipient of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId             The tokenId for this approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override onlyAllowedOperator(from) whenNotPaused {\n    super.safeTransferFrom(from, to, tokenId);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                    -->OPERATOR FILTER\n   * @dev (function) safeTransferFrom  Operator filter registry override\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param from                The sender of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param to                  The recipient of the token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param tokenId             The tokenId for this approval\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param data                bytes data accompanying this transfer operation\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public override onlyAllowedOperator(from) whenNotPaused {\n    super.safeTransferFrom(from, to, tokenId, data);\n  }\n\n  /** ====================================================================================================================\n   *                                                 PRIVILEGED ACCESS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->PAUSE\n   * @dev (function) grantRole    Override the external grant role method such that additional addresses cannot be granted\n   * roles. The existing project owner and platform admins can transfer their roles, but they cannot create additional\n   * authorised addresses at those roles. This maintains consistency with the single owner address that most projects are\n   * familiar with (from Ownable.sol), and reduces the admin burden of tracking potentialy n authorised addresses.\n   * _____________________________________________________________________________________________________________________\n   */\n  function grantRole(bytes32, address) public pure override {\n    revert AdditionalAddressesCannotBeAddedToRolesUseTransferToTransferRoleToAnotherAddress();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->PAUSE\n   * @dev (function) pause    Allow platform admin to pause\n   * _____________________________________________________________________________________________________________________\n   */\n  function pause() external onlyPlatformAdminOrProjectOwner {\n    unchecked {\n      if (block.timestamp > (deployTimeStamp + pauseCutOffInDays * 1 days)) {\n        revert PauseCutOffHasPassed();\n      }\n    }\n    _pause();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                              -->PAUSE\n   * @dev (function) unpause    Allow platform admin to unpause\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function unpause() external onlyPlatformAdminOrProjectOwner {\n    _unpause();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                       -->LOCK MINTING\n   * @dev (function) setMintingCompleteForeverCannotBeUndone  Allow project owner OR platform admin to set minting\n   *                                                          complete\n   *\n   * @notice Enter confirmation value of \"MintingComplete\" to confirm that you are closing minting.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_  Confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setMintingCompleteForeverCannotBeUndone(\n    string calldata confirmation_\n  ) external onlyPlatformAdminOrProjectOwner {\n    if (\n      keccak256(abi.encodePacked(confirmation_)) ==\n      keccak256(abi.encodePacked(\"MintingComplete\"))\n    ) {\n      mintingComplete = true;\n    } else {\n      revert IncorrectConfirmationValue();\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) revealCollection  Set the collection to revealed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function revealCollection() external onlyPlatformAdminOrProjectOwner {\n    collectionRevealed = true;\n\n    emit Revealed();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setPositionProof  Set the metadata position proof\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param positionProof_  The metadata proof\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setPositionProof(bytes32 positionProof_) external onlyPlatformAdmin {\n    positionProof = positionProof_;\n\n    emit PositionProofSet(positionProof_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) setStartPosition  Get the metadata start position for use on reveal of this collection\n   * _____________________________________________________________________________________________________________________\n   */\n  function setStartPosition() external onlyPlatformAdminOrProjectOwner {\n    if (recordedRandomWord != 0) {\n      revert VRFAlreadySet();\n    }\n    IDropFactory(factory).requestVRFRandomness();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->REVEAL\n   * @dev (function) fulfillRandomWords  Callback from the chainlinkv2 oracle (on factory) with randomness\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param requestId_      The Id of this request (this contract will submit a single request)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param randomWords_   The random words returned from chainlink\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function fulfillRandomWords(\n    uint256 requestId_,\n    uint256[] memory randomWords_\n  ) external {\n    if (msg.sender == factory) {\n      recordedRandomWord = randomWords_[0];\n      unchecked {\n        vrfStartPosition = (randomWords_[0] % maxSupply) + 1;\n      }\n      emit RandomNumberReceived(requestId_, randomWords_[0]);\n      emit VRFPositionSet(vrfStartPosition);\n    } else {\n      revert MetadropFactoryOnly();\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferProjectOwner  Allows the current project owner to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newProjectOwner_   New project owner\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferProjectOwner(\n    address newProjectOwner_\n  ) external onlyProjectOwner {\n    _grantRole(PROJECT_OWNER, newProjectOwner_);\n    _revokeRole(PROJECT_OWNER, msg.sender);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                     -->ACCESS CONTROL\n   * @dev (function) transferPlatformAdmin  Allows the current platform admin to transfer this role to another address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param newPlatformAdmin_   New platform admin\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function transferPlatformAdmin(\n    address newPlatformAdmin_\n  ) external onlyPlatformAdmin {\n    _grantRole(PLATFORM_ADMIN, newPlatformAdmin_);\n    _revokeRole(PLATFORM_ADMIN, msg.sender);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setURIs  Set the URI data for this contracts\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param preRevealURI_   The URI to use pre-reveal\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param arweaveURI_     The URI for arweave\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param ipfsURI_     The URI for IPFS\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setURIs(\n    string calldata preRevealURI_,\n    string calldata arweaveURI_,\n    string calldata ipfsURI_\n  ) external onlyPlatformAdmin {\n    if (metadataLocked) {\n      revert MetadataIsLocked();\n    }\n\n    preRevealURI = preRevealURI_;\n    arweaveURI = arweaveURI_;\n    ipfsURI = ipfsURI_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) lockURIsCannotBeUndone  Lock the URI data for this contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param confirmation_   The confirmation string\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function lockURIsCannotBeUndone(\n    string calldata confirmation_\n  ) external onlyPlatformAdmin {\n    if (\n      keccak256(abi.encodePacked(confirmation_)) ==\n      keccak256(abi.encodePacked(\"LockURIs\"))\n    ) {\n      metadataLocked = true;\n    } else {\n      revert IncorrectConfirmationValue();\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                           -->METADATA\n   * @dev (function) setUseArweave  Guards against either arweave or IPFS being no more\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param useArweave_   Boolean to indicate whether arweave should be used or not (true = use arweave, false = use IPFS)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setUseArweave(\n    bool useArweave_\n  ) external onlyPlatformAdminOrProjectOwner {\n    useArweave = useArweave_;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) setDefaultRoyalty  Set the royalty percentage\n   *\n   * @notice - we have specifically NOT implemented the ability to have different royalties on a token by token basis.\n   * This reduces the complexity of processing on multi-buys, and also avoids challenges to decentralisation (e.g. the\n   * project targetting one users tokens with larger royalties)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_   Royalty receiver\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param fraction_   Royalty fraction\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function setDefaultRoyalty(\n    address recipient_,\n    uint96 fraction_\n  ) public onlyPlatformAdminOrProjectOwner {\n    _setDefaultRoyalty(recipient_, fraction_);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->ROYALTY\n   * @dev (function) deleteDefaultRoyalty  Delete the royalty percentage claimed\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  function deleteDefaultRoyalty() public onlyPlatformAdminOrProjectOwner {\n    _deleteDefaultRoyalty();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) receive  This contract does not handle ETH. Explicitly revert on receive()\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  receive() external payable {\n    revert();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                            -->FINANCE\n   * @dev (function) fallback  Explicitly revert on fallback()\n   *\n   * _____________________________________________________________________________________________________________________\n   */\n  fallback() external payable {\n    revert();\n  }\n\n  /** ====================================================================================================================\n   *                                             COLLECTION INFORMATION GETTERS\n   * =====================================================================================================================\n   */\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) metadropCustom  Returns if this contract is a custom NFT (true) or is a standard metadrop\n   *                                 ERC721M (false)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return isMetadropCustom_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropCustom() external pure returns (bool isMetadropCustom_) {\n    return (false);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalSupply  Returns total supply (minted - burned)\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalSupply_   The total supply of this collection (minted - burned)\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalSupply()\n    external\n    view\n    override(ERC721M, INFTByMetadrop)\n    returns (uint256 totalSupply_)\n  {\n    return totalMinted() - totalBurned();\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalUnminted  Returns the remaining unminted supply\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalUnminted_   The total unminted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalUnminted()\n    public\n    view\n    override(ERC721M, INFTByMetadrop)\n    returns (uint256 totalUnminted_)\n  {\n    return remainingSupply;\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalMinted  Returns the total number of tokens ever minted\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalMinted_   The total minted supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalMinted()\n    public\n    view\n    override(ERC721M, INFTByMetadrop)\n    returns (uint256 totalMinted_)\n  {\n    return (maxSupply - remainingSupply);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) totalBurned  Returns the count of tokens sent to the burn address\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return totalBurned_   The total burned supply of this collection\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function totalBurned()\n    public\n    view\n    override(ERC721M, INFTByMetadrop)\n    returns (uint256 totalBurned_)\n  {\n    return ERC721M.balanceOf(BURN_ADDRESS);\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) tokenURI  Returns the URI for the passed token\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return tokenURI_   The token URI\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function tokenURI(\n    uint256 tokenId\n  ) public view virtual override returns (string memory tokenURI_) {\n    _requireMinted(tokenId);\n\n    unchecked {\n      if (!collectionRevealed) {\n        return\n          bytes(preRevealURI).length > 0\n            ? string(abi.encodePacked(preRevealURI))\n            : \"\";\n      } else {\n        if (useArweave) {\n          return\n            bytes(arweaveURI).length > 0\n              ? string(\n                abi.encodePacked(\n                  arweaveURI,\n                  ((tokenId + vrfStartPosition) % maxSupply).toString(),\n                  \".json\"\n                )\n              )\n              : \"\";\n        } else {\n          return\n            bytes(ipfsURI).length > 0\n              ? string(\n                abi.encodePacked(\n                  ipfsURI,\n                  ((tokenId + vrfStartPosition) % maxSupply).toString(),\n                  \".json\"\n                )\n              )\n              : \"\";\n        }\n      }\n    }\n  }\n\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                             -->GETTER\n   * @dev (function) supportsInterface   Override is required by Solidity.\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @return bool    If the interface is supported\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view override(AccessControl, ERC721M) returns (bool) {\n    return super.supportsInterface(interfaceId);\n  }\n\n  /** ====================================================================================================================\n   *                                                    MINTING\n   * =====================================================================================================================\n   */\n  /** ____________________________________________________________________________________________________________________\n   *                                                                                                               -->MINT\n   * @dev (function) metadropMint  Mint tokens. Can only be called from a valid primary market contract\n   *\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param caller_                The address that has called mint through the primary sale module.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param recipient_             The address that will receive new assets.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param allowanceAddress_      The address that has an allowance being used in this mint. This will be the same as the\n   *                               calling address in almost all cases. An example of when they may differ is in a list\n   *                               mint where the caller is a delegate of another address with an allowance in the list.\n   *                               The caller is performing the mint, but it is the allowance for the allowance address\n   *                               that is being checked and decremented in this mint.\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param quantityToMint_        The quantity of tokens to be minted\n   * ---------------------------------------------------------------------------------------------------------------------\n   * @param unitPrice_             The unit price for each token\n   * ---------------------------------------------------------------------------------------------------------------------\n   * _____________________________________________________________________________________________________________________\n   */\n  function metadropMint(\n    address caller_,\n    address recipient_,\n    address allowanceAddress_,\n    uint256 quantityToMint_,\n    uint256 unitPrice_\n  ) external {\n    if (recipient_ == address(0) || recipient_ == BURN_ADDRESS) {\n      revert InvalidRecipient();\n    }\n\n    if (mintingComplete) {\n      revert MintingIsClosedForever();\n    }\n\n    if (!validPrimaryMarketAddress[msg.sender]) revert InvalidAddress();\n\n    if (allocationMethod != TokenAllocationMethod.sequential) {\n      revert InvalidTokenAllocationMethod();\n    }\n\n    uint256[] memory tokenIds = _mintSequential(recipient_, quantityToMint_);\n\n    emit MetadropMint(\n      allowanceAddress_,\n      recipient_,\n      caller_,\n      msg.sender,\n      unitPrice_,\n      tokenIds\n    );\n  }\n  /** ====================================================================================================================\n   */\n}\n"
    },
    "contracts/ThirdParty/EPS/EPSDelegationRegister/IEPSDelegationRegister.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev EPS Delegation Register - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport \"../EPSRewardToken/IOAT.sol\";\nimport \"../EPSRewardToken/IERCOmnReceiver.sol\";\n\n/**\n *\n * @dev Implementation of the EPS proxy register interface.\n *\n */\ninterface IEPSDelegationRegister {\n  // ======================================================\n  // ENUMS and STRUCTS\n  // ======================================================\n\n  // Scope of a delegation: global, collection or token\n  enum DelegationScope {\n    global,\n    collection,\n    token\n  }\n\n  // Time limit of a delegation: eternal or time limited\n  enum DelegationTimeLimit {\n    eternal,\n    limited\n  }\n\n  // The Class of a delegation: primary, secondary or rental\n  enum DelegationClass {\n    primary,\n    secondary,\n    rental\n  }\n\n  // The status of a delegation:\n  enum DelegationStatus {\n    live,\n    pending\n  }\n\n  // Data output format for a report (used to output both hot and cold\n  // delegation details)\n  struct DelegationReport {\n    address hot;\n    address cold;\n    DelegationScope scope;\n    DelegationClass class;\n    DelegationTimeLimit timeLimit;\n    address collection;\n    uint256 tokenId;\n    uint40 startDate;\n    uint40 endDate;\n    bool validByDate;\n    bool validBilaterally;\n    bool validTokenOwnership;\n    bool[25] usageTypes;\n    address key;\n    uint96 controlInteger;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Delegation record\n  struct DelegationRecord {\n    address hot;\n    uint96 controlInteger;\n    address cold;\n    uint40 startDate;\n    uint40 endDate;\n    DelegationStatus status;\n  }\n\n  // If a delegation is for a collection, or has additional data, it will need to read the delegation metadata\n  struct DelegationMetadata {\n    address collection;\n    uint256 tokenId;\n    bytes data;\n  }\n\n  // Details of a hot wallet lock\n  struct LockDetails {\n    uint40 lockStart;\n    uint40 lockEnd;\n  }\n\n  // Validity dates when checking a delegation\n  struct ValidityDates {\n    uint40 start;\n    uint40 end;\n  }\n\n  // Delegation struct to hold details of a new delegation\n  struct Delegation {\n    address hot;\n    address cold;\n    address[] targetAddresses;\n    uint256 tokenId;\n    bool tokenDelegation;\n    uint8[] usageTypes;\n    uint40 startDate;\n    uint40 endDate;\n    uint16 providerCode;\n    DelegationClass delegationClass;\n    uint96 subDelegateKey;\n    bytes data;\n    DelegationStatus status;\n  }\n\n  // Addresses associated with a delegation check\n  struct DelegationCheckAddresses {\n    address hot;\n    address cold;\n    address targetCollection;\n  }\n\n  // Classes associated with a delegation check\n  struct DelegationCheckClasses {\n    bool secondary;\n    bool rental;\n    bool token;\n  }\n\n  // Migrated record data\n  struct MigratedRecord {\n    address hot;\n    address cold;\n  }\n\n  // ======================================================\n  // CUSTOM ERRORS\n  // ======================================================\n\n  error UsageTypeAlreadyDelegated(uint256 usageType);\n  error CannotDeleteValidDelegation();\n  error CannotDelegatedATokenYouDontOwn();\n  error IncorrectAdminLevel(uint256 requiredLevel);\n  error OnlyParticipantOrAuthorisedSubDelegate();\n  error HotAddressIsLockedAndCannotBeDelegatedTo();\n  error InvalidDelegation();\n  error ToMuchETHForPendingPayments(uint256 sent, uint256 required);\n  error UnknownAmount();\n  error InvalidERC20Payment();\n  error IncorrectProxyRegisterFee();\n  error UnrecognisedEPSAPIAmount();\n  error CannotRevokeAllForRegisterAdminHierarchy();\n\n  // ======================================================\n  // EVENTS\n  // ======================================================\n\n  event DelegationMade(\n    address indexed hot,\n    address indexed cold,\n    address targetAddress,\n    uint256 tokenId,\n    bool tokenDelegation,\n    uint8[] usageTypes,\n    uint40 startDate,\n    uint40 endDate,\n    uint16 providerCode,\n    DelegationClass delegationClass,\n    uint96 subDelegateKey,\n    bytes data,\n    DelegationStatus status\n  );\n  event DelegationRevoked(address hot, address cold, address delegationKey);\n  event DelegationPaid(address delegationKey);\n  event AllDelegationsRevokedForHot(address hot);\n  event AllDelegationsRevokedForCold(address cold);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   *\n   *\n   * @dev getDelegationRecord\n   *\n   *\n   */\n  function getDelegationRecord(address delegationKey_)\n    external\n    view\n    returns (DelegationRecord memory);\n\n  /**\n   *\n   *\n   * @dev isValidDelegation\n   *\n   *\n   */\n  function isValidDelegation(\n    address hot_,\n    address cold_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (bool isValid_);\n\n  /**\n   *\n   *\n   * @dev getAddresses - Get all currently valid addresses for a hot address.\n   * - Pass in address(0) to return records that are for ALL collections\n   * - Pass in a collection address to get records for just that collection\n   * - Usage type must be supplied. Only records that match usage type will be returned\n   *\n   *\n   */\n  function getAddresses(\n    address hot_,\n    address collection_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (address[] memory addresses_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryBalanceOf: Returns the beneficiary balance\n   *\n   *\n   */\n  function beneficiaryBalanceOf(\n    address queryAddress_,\n    address contractAddress_,\n    uint256 usageType_,\n    bool erc1155_,\n    uint256 id_,\n    bool includeSecondary_,\n    bool includeRental_\n  ) external view returns (uint256 balance_);\n\n  /**\n   *\n   *\n   * @dev beneficiaryOf\n   *\n   *\n   */\n  function beneficiaryOf(\n    address collection_,\n    uint256 tokenId_,\n    uint256 usageType_,\n    bool includeSecondary_,\n    bool includeRental_\n  )\n    external\n    view\n    returns (\n      address primaryBeneficiary_,\n      address[] memory secondaryBeneficiaries_\n    );\n\n  /**\n   *\n   *\n   * @dev delegationFromColdExists - check a cold delegation exists\n   *\n   *\n   */\n  function delegationFromColdExists(address cold_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev delegationFromHotExists - check a hot delegation exists\n   *\n   *\n   */\n  function delegationFromHotExists(address hot_, address delegationKey_)\n    external\n    view\n    returns (bool);\n\n  /**\n   *\n   *\n   * @dev getAllForHot - Get all delegations at a hot address, formatted nicely\n   *\n   *\n   */\n  function getAllForHot(address hot_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev getAllForCold - Get all delegations at a cold address, formatted nicely\n   *\n   *\n   */\n  function getAllForCold(address cold_)\n    external\n    view\n    returns (DelegationReport[] memory);\n\n  /**\n   *\n   *\n   * @dev makeDelegation - A direct call to setup a new proxy record\n   *\n   *\n   */\n  function makeDelegation(\n    address hot_,\n    address cold_,\n    address[] memory targetAddresses_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint8[] memory usageTypes_,\n    uint40 startDate_,\n    uint40 endDate_,\n    uint16 providerCode_,\n    DelegationClass delegationClass_, //0 = primary, 1 = secondary, 2 = rental\n    uint96 subDelegateKey_,\n    bytes memory data_\n  ) external payable;\n\n  /**\n   *\n   *\n   * @dev getDelegationKey - get the link hash to the delegation metadata\n   *\n   *\n   */\n  function getDelegationKey(\n    address hot_,\n    address cold_,\n    address targetAddress_,\n    uint256 tokenId_,\n    bool tokenDelegation_,\n    uint96 controlInteger_,\n    uint40 startDate_,\n    uint40 endDate_\n  ) external pure returns (address);\n\n  /**\n   *\n   *\n   * @dev getHotAddressLockDetails\n   *\n   *\n   */\n  function getHotAddressLockDetails(address hot_)\n    external\n    view\n    returns (LockDetails memory, address[] memory);\n\n  /**\n   *\n   *\n   * @dev lockAddressUntilDate\n   *\n   *\n   */\n  function lockAddressUntilDate(uint40 unlockDate_) external;\n\n  /**\n   *\n   *\n   * @dev lockAddress\n   *\n   *\n   */\n  function lockAddress() external;\n\n  /**\n   *\n   *\n   * @dev unlockAddress\n   *\n   *\n   */\n  function unlockAddress() external;\n\n  /**\n   *\n   *\n   * @dev addLockBypassAddress\n   *\n   *\n   */\n  function addLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev removeLockBypassAddress\n   *\n   *\n   */\n  function removeLockBypassAddress(address bypassAddress_) external;\n\n  /**\n   *\n   *\n   * @dev revokeRecord: Revoking a single record with Key\n   *\n   *\n   */\n  function revokeRecord(address delegationKey_, uint96 subDelegateKey_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeGlobalAll\n   *\n   *\n   */\n  function revokeRecordOfGlobalScopeForAllUsages(address participant2_)\n    external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForCold: Cold calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForCold(address cold_, uint96 subDelegateKey_) external;\n\n  /**\n   *\n   *\n   * @dev revokeAllForHot: Hot calls and revokes ALL\n   *\n   *\n   */\n  function revokeAllForHot() external;\n\n  /**\n   *\n   *\n   * @dev deleteExpired: ANYONE can delete expired records\n   *\n   *\n   */\n  function deleteExpired(address delegationKey_) external;\n\n  /**\n   *\n   *\n   * @dev setRegisterFee: set the fee for accepting a registration:\n   *\n   *\n   */\n  function setRegisterFees(\n    uint256 registerFee_,\n    address erc20_,\n    uint256 erc20Fee_\n  ) external;\n\n  /**\n   *\n   *\n   * @dev setRewardTokenAndRate\n   *\n   *\n   */\n  function setRewardTokenAndRate(address rewardToken_, uint88 rewardRate_)\n    external;\n\n  /**\n   *\n   *\n   * @dev lockRewardRate\n   *\n   *\n   */\n  function lockRewardRate() external;\n\n  /**\n   *\n   *\n   * @dev setLegacyOff\n   *\n   *\n   */\n  function setLegacyOff() external;\n\n  /**\n   *\n   *\n   * @dev setENSName (used to set reverse record so interactions with this contract are easy to\n   * identify)\n   *\n   *\n   */\n  function setENSName(string memory ensName_) external;\n\n  /**\n   *\n   *\n   * @dev setENSReverseRegistrar\n   *\n   *\n   */\n  function setENSReverseRegistrar(address ensReverseRegistrar_) external;\n\n  /**\n   *\n   *\n   * @dev setTreasuryAddress: set the treasury address:\n   *\n   *\n   */\n  function setTreasuryAddress(address treasuryAddress_) external;\n\n  /**\n   *\n   *\n   * @dev setDecimalsAndBalance\n   *\n   *\n   */\n  function setDecimalsAndBalance(uint8 decimals_, uint256 balance_) external;\n\n  /**\n   *\n   *\n   * @dev withdrawETH: withdraw eth to the treasury:\n   *\n   *\n   */\n  function withdrawETH(uint256 amount_) external returns (bool success_);\n\n  /**\n   *\n   *\n   * @dev withdrawERC20: Allow any ERC20s to be withdrawn Note, this is provided to enable the\n   * withdrawal of payments using valid ERC20s. Assets sent here in error are retrieved with\n   * rescueERC20\n   *\n   *\n   */\n  function withdrawERC20(IERC20 token_, uint256 amount_) external;\n\n  /**\n   *\n   *\n   * @dev isLevelAdmin\n   *\n   *\n   */\n  function isLevelAdmin(\n    address receivedAddress_,\n    uint256 level_,\n    uint96 key_\n  ) external view returns (bool);\n}\n"
    },
    "contracts/ThirdParty/EPS/EPSRewardToken/IERCOmnReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IERCOmnReceiver - Interface\n\n */\n\npragma solidity 0.8.19;\n\ninterface IERCOmnReceiver {\n  function onTokenTransfer(\n    address sender,\n    uint256 value,\n    bytes memory data\n  ) external payable;\n}\n"
    },
    "contracts/ThirdParty/EPS/EPSRewardToken/IOAT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// EPS Contracts v2.0.0\n// www.eternalproxy.com\n\n/**\n \n@dev IOAT - Interface\n\n */\n\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev OAT interface\n */\ninterface IOAT is IERC20 {\n  /**\n   *\n   * @dev emitToken\n   *\n   */\n  function emitToken(address receiver_, uint256 amount_) external;\n\n  /**\n   *\n   * @dev addEmitter\n   *\n   */\n  function addEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev removeEmitter\n   *\n   */\n  function removeEmitter(address emitter_) external;\n\n  /**\n   *\n   * @dev setTreasury\n   *\n   */\n  function setTreasury(address treasury_) external;\n}\n"
    },
    "contracts/ThirdParty/LayerZero/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "contracts/ThirdParty/LayerZero/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "contracts/ThirdParty/LayerZero/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "contracts/ThirdParty/LayerZero/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../util/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is\n  Ownable,\n  ILayerZeroReceiver,\n  ILayerZeroUserApplicationConfig\n{\n  using BytesLib for bytes;\n\n  ILayerZeroEndpoint public immutable lzEndpoint;\n  mapping(uint16 => bytes) public trustedRemoteLookup;\n  mapping(uint16 => mapping(uint16 => uint256)) public minDstGasLookup;\n  address public precrime;\n\n  event SetPrecrime(address precrime);\n  event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n  event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n  event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\n\n  error InvalidEndpointCaller();\n  error InvalidSourceSendingContract();\n  error DestinationIsNotTrustedSource();\n  error MinGasLimitNotSet();\n  error GasLimitIsTooLow();\n  error InvalidAdapterParams();\n  error NoTrustedPathRecord();\n  error InvalidMinGas();\n\n  constructor(address _endpoint) {\n    lzEndpoint = ILayerZeroEndpoint(_endpoint);\n  }\n\n  function lzReceive(\n    uint16 _srcChainId,\n    bytes calldata _srcAddress,\n    uint64 _nonce,\n    bytes calldata _payload\n  ) public virtual override {\n    // lzReceive must be called by the endpoint for security\n    if (_msgSender() != address(lzEndpoint)) {\n      revert InvalidEndpointCaller();\n    }\n    // require(\n    //   _msgSender() == address(lzEndpoint),\n    //   \"LzApp: invalid endpoint caller\"\n    // );\n\n    bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n    // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n    if (\n      !(_srcAddress.length == trustedRemote.length &&\n        trustedRemote.length > 0 &&\n        keccak256(_srcAddress) == keccak256(trustedRemote))\n    ) {\n      revert InvalidSourceSendingContract();\n    }\n    // require(\n    //   _srcAddress.length == trustedRemote.length &&\n    //     trustedRemote.length > 0 &&\n    //     keccak256(_srcAddress) == keccak256(trustedRemote),\n    //   \"LzApp: invalid source sending contract\"\n    // );\n\n    _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n  }\n\n  // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n  function _blockingLzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64 _nonce,\n    bytes memory _payload\n  ) internal virtual;\n\n  function _lzSend(\n    uint16 _dstChainId,\n    bytes memory _payload,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams,\n    uint256 _nativeFee\n  ) internal virtual {\n    bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n\n    if (trustedRemote.length == 0) {\n      revert DestinationIsNotTrustedSource();\n    }\n    // require(\n    //   trustedRemote.length != 0,\n    //   \"LzApp: destination chain is not a trusted source\"\n    // );\n\n    lzEndpoint.send{value: _nativeFee}(\n      _dstChainId,\n      trustedRemote,\n      _payload,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams\n    );\n  }\n\n  function _checkGasLimit(\n    uint16 _dstChainId,\n    uint16 _type,\n    bytes memory _adapterParams,\n    uint256 _extraGas\n  ) internal view virtual {\n    uint256 providedGasLimit = _getGasLimit(_adapterParams);\n    uint256 minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n\n    if (minGasLimit == 0) {\n      revert MinGasLimitNotSet();\n    }\n    //require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n\n    if (providedGasLimit < minGasLimit) {\n      revert GasLimitIsTooLow();\n    }\n    //require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n  }\n\n  function _getGasLimit(bytes memory _adapterParams)\n    internal\n    pure\n    virtual\n    returns (uint256 gasLimit)\n  {\n    if (_adapterParams.length < 34) {\n      revert InvalidAdapterParams();\n    }\n    //require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n\n    assembly {\n      gasLimit := mload(add(_adapterParams, 34))\n    }\n  }\n\n  //---------------------------UserApplication config----------------------------------------\n  function getConfig(\n    uint16 _version,\n    uint16 _chainId,\n    address,\n    uint256 _configType\n  ) external view returns (bytes memory) {\n    return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n  }\n\n  // generic config for LayerZero user Application\n  function setConfig(\n    uint16 _version,\n    uint16 _chainId,\n    uint256 _configType,\n    bytes calldata _config\n  ) external override onlyOwner {\n    lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n  }\n\n  function setSendVersion(uint16 _version) external override onlyOwner {\n    lzEndpoint.setSendVersion(_version);\n  }\n\n  function setReceiveVersion(uint16 _version) external override onlyOwner {\n    lzEndpoint.setReceiveVersion(_version);\n  }\n\n  function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\n    external\n    override\n    onlyOwner\n  {\n    lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n  }\n\n  // _path = abi.encodePacked(remoteAddress, localAddress)\n  // this function set the trusted path for the cross-chain communication\n  function setTrustedRemote(uint16 _srcChainId, bytes calldata _path)\n    external\n    onlyOwner\n  {\n    trustedRemoteLookup[_srcChainId] = _path;\n    emit SetTrustedRemote(_srcChainId, _path);\n  }\n\n  function setTrustedRemoteAddress(\n    uint16 _remoteChainId,\n    bytes calldata _remoteAddress\n  ) external onlyOwner {\n    trustedRemoteLookup[_remoteChainId] = abi.encodePacked(\n      _remoteAddress,\n      address(this)\n    );\n    emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n  }\n\n  function getTrustedRemoteAddress(uint16 _remoteChainId)\n    external\n    view\n    returns (bytes memory)\n  {\n    bytes memory path = trustedRemoteLookup[_remoteChainId];\n    if (path.length == 0) {\n      revert NoTrustedPathRecord();\n    }\n    //require(path.length != 0, \"LzApp: no trusted path record\");\n\n    return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n  }\n\n  function setPrecrime(address _precrime) external onlyOwner {\n    precrime = _precrime;\n    emit SetPrecrime(_precrime);\n  }\n\n  function setMinDstGas(\n    uint16 _dstChainId,\n    uint16 _packetType,\n    uint256 _minGas\n  ) external onlyOwner {\n    if (_minGas == 0) {\n      revert InvalidMinGas();\n    }\n    //require(_minGas > 0, \"LzApp: invalid minGas\");\n\n    minDstGasLookup[_dstChainId][_packetType] = _minGas;\n    emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n  }\n\n  //--------------------------- VIEW FUNCTION ----------------------------------------\n  function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress)\n    external\n    view\n    returns (bool)\n  {\n    bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n    return keccak256(trustedSource) == keccak256(_srcAddress);\n  }\n}\n"
    },
    "contracts/ThirdParty/LayerZero/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../util/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\n        // try-catch all errors/exceptions\n        if (!success) {\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "contracts/ThirdParty/LayerZero/onft/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @dev Interface of the ONFT standard\n */\ninterface IONFT721 is IONFT721Core, IERC721 {\n\n}\n"
    },
    "contracts/ThirdParty/LayerZero/onft/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the ONFT Core standard\n */\ninterface IONFT721Core is IERC165 {\n  /**\n   * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n   * _dstChainId - L0 defined chain id to send tokens too\n   * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n   * _tokenId - token Id to transfer\n   * _useZro - indicates to use zro to pay L0 fees\n   * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\n   */\n  function estimateSendFee(\n    uint16 _dstChainId,\n    bytes calldata _toAddress,\n    uint256 _tokenId,\n    bool _useZro,\n    bytes calldata _adapterParams\n  ) external view returns (uint256 nativeFee, uint256 zroFee);\n\n  /**\n   * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\n   * `_toAddress` can be any size depending on the `dstChainId`.\n   * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n   * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n   */\n  function sendFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes calldata _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes calldata _adapterParams\n  ) external payable;\n\n  /**\n   * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n   * `_nonce` is the outbound nonce from\n   */\n  event SendToChain(\n    uint16 indexed _dstChainId,\n    address indexed _from,\n    bytes indexed _toAddress,\n    uint256 _tokenId\n  );\n\n  /**\n   * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\n   */\n  event ReceiveFromChain(\n    uint16 indexed _srcChainId,\n    bytes indexed _srcAddress,\n    address indexed _toAddress,\n    uint256 _tokenId\n  );\n}\n"
    },
    "contracts/ThirdParty/LayerZero/onft/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"../../LayerZero/lzApp/NonblockingLzApp.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\n  uint256 public constant NO_EXTRA_GAS = 0;\n  uint16 public constant FUNCTION_TYPE_SEND = 1;\n  bool public useCustomAdapterParams;\n\n  event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\n\n  error AdapterParamsMustBeEmpty();\n\n  constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\n\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override(ERC165, IERC165) returns (bool) {\n    return\n      interfaceId == type(IONFT721Core).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function estimateSendFee(\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    bool _useZro,\n    bytes memory _adapterParams\n  ) public view virtual override returns (uint256 nativeFee, uint256 zroFee) {\n    // mock the payload for send()\n    bytes memory payload = abi.encode(_toAddress, _tokenId);\n    return\n      lzEndpoint.estimateFees(\n        _dstChainId,\n        address(this),\n        payload,\n        _useZro,\n        _adapterParams\n      );\n  }\n\n  function sendFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams\n  ) public payable virtual override {\n    _send(\n      _from,\n      _dstChainId,\n      _toAddress,\n      _tokenId,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams\n    );\n  }\n\n  function _send(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams\n  ) internal virtual {\n    _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\n\n    bytes memory payload = abi.encode(_toAddress, _tokenId);\n\n    if (useCustomAdapterParams) {\n      _checkGasLimit(\n        _dstChainId,\n        FUNCTION_TYPE_SEND,\n        _adapterParams,\n        NO_EXTRA_GAS\n      );\n    } else {\n      if (_adapterParams.length != 0) {\n        revert AdapterParamsMustBeEmpty();\n      }\n      // require(\n      //   _adapterParams.length == 0,\n      //   \"LzApp: _adapterParams must be empty.\"\n      // );\n    }\n    _lzSend(\n      _dstChainId,\n      payload,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams,\n      msg.value\n    );\n\n    emit SendToChain(_dstChainId, _from, _toAddress, _tokenId);\n  }\n\n  function _nonblockingLzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64 /*_nonce*/,\n    bytes memory _payload\n  ) internal virtual override {\n    (bytes memory toAddressBytes, uint256 tokenId) = abi.decode(\n      _payload,\n      (bytes, uint256)\n    );\n    address toAddress;\n    assembly {\n      toAddress := mload(add(toAddressBytes, 20))\n    }\n\n    _creditTo(_srcChainId, toAddress, tokenId);\n\n    emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId);\n  }\n\n  function setUseCustomAdapterParams(\n    bool _useCustomAdapterParams\n  ) external onlyOwner {\n    useCustomAdapterParams = _useCustomAdapterParams;\n    emit SetUseCustomAdapterParams(_useCustomAdapterParams);\n  }\n\n  function _debitFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId\n  ) internal virtual;\n\n  function _creditTo(\n    uint16 _srcChainId,\n    address _toAddress,\n    uint256 _tokenId\n  ) internal virtual;\n}\n"
    },
    "contracts/ThirdParty/LayerZero/util/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/ThirdParty/LayerZero/util/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\nimport {CANONICAL_CORI_SUBSCRIPTION} from \"./lib/Constants.sol\";\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n * @dev    Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor() OperatorFilterer(CANONICAL_CORI_SUBSCRIPTION, true) {}\n}\n"
    },
    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    /**\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\n     *         true if supplied registrant address is not registered.\n     */\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n\n    /**\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\n     */\n    function register(address registrant) external;\n\n    /**\n     * @notice Registers an address with the registry and \"subscribes\" to another address's filtered operators and codeHashes.\n     */\n    function registerAndSubscribe(address registrant, address subscription) external;\n\n    /**\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\n     *         address without subscribing.\n     */\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\n     *         Note that this does not remove any filtered addresses or codeHashes.\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\n     */\n    function unregister(address addr) external;\n\n    /**\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\n     */\n    function updateOperator(address registrant, address operator, bool filtered) external;\n\n    /**\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\n     */\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n\n    /**\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\n     */\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n\n    /**\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\n     */\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n\n    /**\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\n     *         subscription if present.\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\n     *         used.\n     */\n    function subscribe(address registrant, address registrantToSubscribe) external;\n\n    /**\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\n     */\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n\n    /**\n     * @notice Get the subscription address of a given registrant, if any.\n     */\n    function subscriptionOf(address addr) external returns (address registrant);\n\n    /**\n     * @notice Get the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscribers(address registrant) external returns (address[] memory);\n\n    /**\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\n     */\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n\n    /**\n     * @notice Returns true if operator is filtered by a given address or its subscription.\n     */\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n\n    /**\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\n     */\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n\n    /**\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\n     */\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n\n    /**\n     * @notice Returns a list of filtered operators for a given address or its subscription.\n     */\n    function filteredOperators(address addr) external returns (address[] memory);\n\n    /**\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n\n    /**\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n\n    /**\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\n     *         its subscription.\n     *         Note that order is not guaranteed as updates are made.\n     */\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n\n    /**\n     * @notice Returns true if an address has registered\n     */\n    function isRegistered(address addr) external returns (bool);\n\n    /**\n     * @dev Convenience method to compute the code hash of an arbitrary contract\n     */\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    },
    "operator-filter-registry/src/lib/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\naddress constant CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS = 0x000000000000AAeB6D7670E522A718067333cd4E;\naddress constant CANONICAL_CORI_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n"
    },
    "operator-filter-registry/src/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\nimport {CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS} from \"./lib/Constants.sol\";\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n *         Please note that if your token contract does not provide an owner with EIP-173, it must provide\n *         administration methods on the contract itself to interact with the registry otherwise the subscription\n *         will be locked to the options set during construction.\n */\n\nabstract contract OperatorFilterer {\n    /// @dev Emitted when an operator is not allowed.\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(CANONICAL_OPERATOR_FILTER_REGISTRY_ADDRESS);\n\n    /// @dev The constructor that is called when the contract is being deployed.\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator approval is allowed.\n     */\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    /**\n     * @dev A helper function to check if an operator is allowed.\n     */\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            // under normal circumstances, this function will revert rather than return false, but inheriting contracts\n            // may specify their own OperatorFilterRegistry implementations, which may behave differently\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}