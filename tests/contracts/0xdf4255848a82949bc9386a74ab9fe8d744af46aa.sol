{{
  "language": "Solidity",
  "sources": {
    "contracts/Deathrow.sol": {
      "content": "//MMMMMMMMMMMMMMMMMMMMMMMMMMMWKOdlc,... ..''..   ...,:ldkKWMMMMMMMMMMMMMMMMMMMMMMM\n//MMMMMMMMMMMMMMMMMMMMMMWXOdc,.         :KXNX:           .,cokXWMMMMMMMMMMMMMMMMMM\n//MMMMMMMMMMMMMMMMMMMW0d:.              oMMMWc           ..   .;oONMMMMMMMMMMMMMMM\n//MMMMMMMMMMMMMMMMWKd,.                 oMMMWc           .:oo:.   ,o0WMMMMMMMMMMMM\n//MMMMMMMMMMMMMMNk:. .'.                oMMMWc             .:l'     .;xNMMMMMMMMMM\n//MMMMMMMMMMMMNk;  'xXK;                oMMMWc                 .oxc.   ,xNMMMMMMMM\n//MMMMMMMMMMW0:   .xMMX;                oMMMWc                 :XMWo     ,kWMMMMMM\n//MMMMMMMMMNd.    .xMMX;                oMMMWc                 ;XMMd  .,  .lXMMMMM\n//MMMMMMMMK:      .xMMX;                oMMMWc                 ;XMMd. ;0x.  ,0WMMM\n//MMMMMMM0,       .xMMX;                oMMMWc                 ;XMMx. ,KM0;  'OWMM\n//MMMMMM0,        .xMMX;                oMMMWc                 ;XMMx. ,0MMX:  .kWM\n//MMMMMK;         .xMMX;                oMMMWc                 ;XMMx. .OMMMX:  'OM\n//MMMMNl          .xMMX;                oMMMWc                 ;XMMx.  cNMMMK;  :X\n//MMMMk.          .xMMX;                oMMMWc                 ;XMMx.  .kMMMMk. .d\n//MMMWl           .xMMX;                oMMMWc                 ;XMMx.   cNMMMN:  ;\n//MMMK,           .xMMX;                oMMMWc                 ;XMMx.   '0MMMMd  .\n//MMMO'           .xMMX;                oMMMWc                 ;XMMx.   .OMMMMk. .\n//MMMk.           .xMMX;                oMMMWc                 ;XMMx.   .xMMMM0'\n//MMMk.           .xMMX;                oMMMWc                 ;XMMx.   .xMMMMK,\n//MMMx.           .xMMX;                oMMMWc                 ;XMMx.   .xMMMMK,\n//MMMk.           .xMMX;                oMMMWc                 ;XMMx.   .xMMMMK,\n//MMMk.           .xMMX;                oMMMWc                 ;XMMx.   .xMMMMK,\n//MMMk.           .xMMX;                oMMMWc                 ;XMMx.   .kMMMMK,\n//MMMO.           .xMMX;                oMMMWc                 ;XMMx.   .kMMMMK,\n//MMMO.           .xMMX;                oMMMWc                 ;XMMx.   .kMMMMK,\n//MMMO.           .xMMX;                oMMMWc                 ;XMMx.   .kMMMMK,\n//MMMO.           .xMMX;                oMMMWc                 ;XMMx.   .kMMMMK, .\n//MMMO.           .xMMX;                oMMMWc                 ;XMMx.   .OMMMMK, .\n//MMMO.           .xMMX;                oMMMWl                 ;XMMx.   .kMMMMK,\n//MMMO.           .xMMX;                oWMMWc                 ;XMMx.   .kMMMMX;\n//MMMO.           .oKKO,                cKKKK:                 ,OKKo.   .oKKKK0,\n//MMMK,             ...                  ....                   ...       .....  .\n//MMMWl                                                                         .x\n\n//   CELMATES - DEATHROW\n\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface ICelmates {\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        external\n        view\n        returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n\nstruct Infos {\n    bool status;\n    address owner;\n    uint256 timestamp;\n}\n\ncontract Deathrow is Ownable {\n    ICelmates private CELMATES;\n    mapping(uint256 => Infos) public deathRowInfos;\n    mapping(uint256 => uint256) public points;\n    mapping(uint256 => uint256) public celmateToType;\n    bool private opened;\n\n    // ------------------ External ------------------ //\n\n    function deathRow(uint256 _celId, bool _status) external {\n        require(opened, \"Deathrow is closed.\");\n        require(\n            CELMATES.ownerOf(_celId) == msg.sender,\n            \"You don't own this Celmate\"\n        );\n        Infos memory currDeathRow = deathRowInfos[_celId];\n        if (_status) {\n            Infos memory newDeathRow = Infos(true, msg.sender, block.timestamp);\n            deathRowInfos[_celId] = newDeathRow;\n        } else {\n            require(deathRowInfos[_celId].status, \"Not on DeathRow\");\n            currDeathRow.status = false;\n            deathRowInfos[_celId] = currDeathRow;\n        }\n    }\n\n    // ------------------ Public ------------------ //\n\n    function getDeathrow(uint256 _celId)\n        public\n        view\n        returns (Infos memory infos)\n    {\n        return deathRowInfos[_celId];\n    }\n\n    function getPoints(address _owner)\n        public\n        view\n        returns (uint256 pointsToReturn)\n    {\n        uint256 totalPoints;\n        uint256 balance = CELMATES.balanceOf(_owner);\n        for (uint256 i = 0; i < balance; i++) {\n            uint256 tokenId = CELMATES.tokenOfOwnerByIndex(_owner, i);\n            Infos memory infos = deathRowInfos[tokenId];\n            if (infos.owner == _owner && infos.status) {\n                uint256 daysStaked = (block.timestamp - infos.timestamp) /\n                    60 /\n                    60 /\n                    24;\n                totalPoints += points[celmateToType[tokenId]] * daysStaked;\n            }\n        }\n        return totalPoints;\n    }\n\n    // ------------------ Owner ------------------ //\n\n    function setPoints(uint256[] memory _points) external onlyOwner {\n        for (uint256 i = 0; i < _points.length; i++) {\n            points[i] = _points[i];\n        }\n    }\n\n    function setTypes(uint256[] memory _types) external onlyOwner {\n        for (uint256 i = 0; i < _types.length; i++) {\n            celmateToType[i] = _types[i];\n        }\n    }\n\n    function editStake(\n        uint256 _stakeId,\n        address _owner,\n        uint256 _timestamp,\n        bool _status\n    ) external onlyOwner {\n        Infos memory infoToEdit = deathRowInfos[_stakeId];\n        infoToEdit.owner = _owner;\n        infoToEdit.timestamp = _timestamp;\n        infoToEdit.status = _status;\n        deathRowInfos[_stakeId] = infoToEdit;\n    }\n\n    function editTypes(uint256[] memory _ids, uint256[] memory _types)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < _ids.length; i++) {\n            celmateToType[_ids[i]] = _types[i];\n        }\n    }\n\n    function setOpened(bool _flag) external onlyOwner {\n        opened = _flag;\n    }\n\n    function setCelmates(address _celmates) external onlyOwner {\n        CELMATES = ICelmates(_celmates);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}