{{
  "language": "Solidity",
  "sources": {
    "contracts/Gridcraft_MintCoordinator.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n//   ██████╗ ██████╗ ██╗██████╗  ██████╗██████╗  █████╗ ███████╗████████╗\r\n//  ██╔════╝ ██╔══██╗██║██╔══██╗██╔════╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝\r\n//  ██║  ███╗██████╔╝██║██║  ██║██║     ██████╔╝███████║█████╗     ██║   \r\n//  ██║   ██║██╔══██╗██║██║  ██║██║     ██╔══██╗██╔══██║██╔══╝     ██║   \r\n//  ╚██████╔╝██║  ██║██║██████╔╝╚██████╗██║  ██║██║  ██║██║        ██║   \r\n//   ╚═════╝ ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝        ╚═╝   \r\n//\r\n// Website: https://gridcraft.net/\r\n// Twitter: https://twitter.com/gridcraft\r\n// Discord: https://discord.gg/gridcraft\r\n//\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"./INFT.sol\";\r\nimport \"./IERC1155.sol\";\r\nimport \"./ILlamaZoo.sol\";\r\n\r\ncontract Gridcraft_MintCoordinator is Ownable {\r\n  using ECDSA for bytes32;\r\n  address public signer = 0x48e1Db3054C67974ab06C33293708C0491aE6eA3;\r\n\r\n  mapping(uint256 => bool) public llamaVerseIdUsed;\r\n  mapping(address => uint256) public boostsClaimed;\r\n\r\n  mapping(address => uint256) public identityMints;\r\n  mapping(address => uint256) public landMints; \r\n  mapping(address => bool) public bundleMint;\r\n\r\n  INFT public gridcraftIdentities;\r\n  INFT public llamascapeLand;\r\n  INFT LlamaVerse = INFT(0x9df8Aa7C681f33E442A0d57B838555da863504f3);\r\n  ILlamaZoo LlamaStake = ILlamaZoo(0x48193776062991c2fE024D9c99C35576A51DaDe0);\r\n  IERC1155 LlamaBoost = IERC1155(0x0BD4D37E0907C9F564aaa0a7528837B81B25c605);\r\n\r\n  bool public allowSaleIsActive = false;\r\n  bool public publicSaleIsActive = false;\r\n  \r\n  uint256 public identityPrice = 0.3 ether;\r\n  uint256 public landPrice = 0.3 ether;\r\n  uint256 public bundleSave = 0.04 ether;\r\n\r\n  uint256[][] allowListMax = [[3,1], [1,2], [3,3]];\r\n  uint256 public identityMax = 5;\r\n  uint256 public landMax = 3;\r\n\r\n  uint256 public bundlesAvailable = 1600;\r\n\r\n  uint256 public landFreeMints;\r\n\r\n  address withdrawWallet = 0x5d28e347583e70b5F7B0631CA5ab5575bD37Cbcd;\r\n\r\n  constructor(address _gridcraftIdentitiesAddress,\r\n              address _llamascapeLandAddress\r\n  ) {\r\n    gridcraftIdentities = INFT(_gridcraftIdentitiesAddress);\r\n    llamascapeLand = INFT(_llamascapeLandAddress);\r\n  }\r\n\r\n  function allowListSale(uint256 _gridcraftAmount, uint256 _llamascapeAmount, bool _bundle, uint256 _wl, bool _stake, bytes memory _signature) external payable {\r\n    require (allowSaleIsActive, \"Not active\");\r\n    require (_gridcraftAmount <= gridcraftIdentities.remaining(), \"Max identities supply reached\");\r\n    require (_llamascapeAmount <= llamascapeLand.remaining(), \"Max land supply reached\");\r\n    require (msg.value == priceOfRequest(_gridcraftAmount, _llamascapeAmount, _bundle), \"Wrong amount sent\");\r\n\r\n    bytes32 hash = hashTransaction(_msgSender(), _gridcraftAmount, _llamascapeAmount, _bundle, _wl);\r\n    require(matchSignerAdmin(signTransaction(hash), _signature), \"Signature mismatch\");\r\n    require (msg.sender == tx.origin, \"bm8gcm9ib3Rz\");\r\n\r\n    if (_wl == 0) {\r\n      require(_bundle || _llamascapeAmount == 0, \"No land without bundle\"); //❄️\r\n    }\r\n    if (_wl == 1) {\r\n      require(_bundle || _llamascapeAmount == 1, \"One land without bundle\"); //❄️\r\n    }\r\n\r\n    if (_bundle){\r\n      require (bundlesAvailable > 0, \"Bundles exhausted\");\r\n      require (!bundleMint[msg.sender], \"One bundle per wallet\");\r\n      unchecked{ --bundlesAvailable; }\r\n      bundleMint[msg.sender] = true;\r\n    }\r\n    if (_gridcraftAmount > 0){\r\n      require ( identityMints[msg.sender] + _gridcraftAmount <= allowListMax[_wl][0], \"Exceeds allowance\" );\r\n      unchecked { identityMints[msg.sender] += _gridcraftAmount; }\r\n      gridcraftIdentities.saleMint(msg.sender, _gridcraftAmount, _stake);\r\n    }\r\n    if (_llamascapeAmount > 0){\r\n      require ( landMints[msg.sender] + _llamascapeAmount <= allowListMax[_wl][1], \"Exceeds allowance\" );\r\n      unchecked { landMints[msg.sender] += _llamascapeAmount; }\r\n      llamascapeLand.saleMint(msg.sender, _llamascapeAmount, _stake);\r\n    }\r\n  }\r\n\r\n  function publicSale(uint256 _gridcraftAmount, uint256 _llamascapeAmount, bool _bundle, bool _stake) external payable {\r\n    require(publicSaleIsActive, \"Not active\");\r\n    require (_gridcraftAmount <= gridcraftIdentities.remaining(), \"Max identities supply reached\");\r\n    require (_llamascapeAmount <= llamascapeLand.remaining(), \"Max land supply reached\");\r\n    require (msg.value == priceOfRequest(_gridcraftAmount, _llamascapeAmount, _bundle), \"Wrong amount sent\");\r\n    require (msg.sender == tx.origin, \"bm8gcm9ib3Rz\");\r\n\r\n    if (_bundle){\r\n      require (bundlesAvailable > 0, \"Bundles exhausted\");\r\n      require (!bundleMint[msg.sender], \"One bundle per wallet\");\r\n      unchecked{ --bundlesAvailable; }\r\n      bundleMint[msg.sender] = true;\r\n    } \r\n    if (_gridcraftAmount > 0){\r\n      require ( identityMints[msg.sender] + _gridcraftAmount <= identityMax, \"Exceeds allowance\" );\r\n      unchecked { identityMints[msg.sender] += _gridcraftAmount; }\r\n      gridcraftIdentities.saleMint(msg.sender, _gridcraftAmount, _stake);\r\n    }\r\n    if (_llamascapeAmount > 0){\r\n      require ( landMints[msg.sender] + _llamascapeAmount <= landMax, \"Exceeds allowance\" );\r\n      unchecked { landMints[msg.sender] += _llamascapeAmount; }\r\n      llamascapeLand.saleMint(msg.sender, _llamascapeAmount, _stake);\r\n    }\r\n\r\n  }\r\n\r\n  function llamaverseSaleUnstaked(uint256[] memory _llamaVerseIds, uint256 _boostsAmount, bool _stake, bytes memory _signature) external payable {\r\n    require (allowSaleIsActive || publicSaleIsActive, \"Not active\");\r\n    uint256 amount = _llamaVerseIds.length;\r\n    require ( amount <= llamascapeLand.remaining(), \"Max land supply reached\");\r\n    require ( msg.sender == tx.origin, \"bm8gcm9ib3Rz\");\r\n\r\n    if (_boostsAmount > 0 && boostsClaimed[msg.sender] < _boostsAmount){\r\n      uint256 freeLeft;\r\n      unchecked { freeLeft = _boostsAmount - boostsClaimed[msg.sender]; }\r\n      if (freeLeft < amount) {\r\n        require(msg.value == (amount - freeLeft) * landPrice, \"Wrong amount sent\");\r\n        boostsClaimed[msg.sender] = _boostsAmount;\r\n        unchecked { landFreeMints += freeLeft; }\r\n      } else {\r\n        require(msg.value == 0, \"Mint is free\");\r\n        unchecked{ boostsClaimed[msg.sender] += amount; }\r\n        unchecked { landFreeMints += amount; }\r\n      }\r\n      bytes32 hash = hashBoostTransaction(_msgSender(), _boostsAmount);\r\n      require(matchSignerAdmin(signTransaction(hash), _signature), \"Signature mismatch\");\r\n    } else {\r\n      require(msg.value == amount* landPrice, \"Wrong amount sent\");\r\n    }\r\n\r\n    for (uint i; i < amount; ) {\r\n      require ( LlamaVerse.ownerOf(_llamaVerseIds[i]) == msg.sender, \"Llamaverse id not owned\");\r\n      require ( !llamaVerseIdUsed[_llamaVerseIds[i]], \"Id already used\");\r\n      llamaVerseIdUsed[_llamaVerseIds[i]] = true;\r\n      unchecked { ++i; }\r\n    }\r\n    llamascapeLand.saleMint(msg.sender, amount, _stake);\r\n  }\r\n\r\n  function llamaverseSaleStaked(uint256 _amount, uint256 _boostsAmount, bool _stake, bytes memory _signature) external payable {\r\n    require (allowSaleIsActive || publicSaleIsActive, \"Not active\");\r\n    require ( _amount <= llamascapeLand.remaining(), \"Max land supply reached\");\r\n    require ( msg.sender == tx.origin, \"bm8gcm9ib3Rz\");\r\n\r\n    (uint256[] memory llamas, , , , ) = LlamaStake.getStakedTokens(msg.sender);\r\n\r\n    if (_boostsAmount > 0 && boostsClaimed[msg.sender] < _boostsAmount){\r\n      uint256 freeLeft;\r\n      unchecked { freeLeft = _boostsAmount - boostsClaimed[msg.sender]; }\r\n      if (freeLeft < _amount) {\r\n        require(msg.value == (_amount - freeLeft) * landPrice, \"Wrong amount sent\");\r\n        boostsClaimed[msg.sender] = _boostsAmount;\r\n        unchecked { landFreeMints += freeLeft; }\r\n      } else {\r\n        require(msg.value == 0, \"Mint is free\");\r\n        unchecked{ boostsClaimed[msg.sender] += _amount; }\r\n        unchecked { landFreeMints += _amount; }\r\n      }\r\n      bytes32 hash = hashBoostTransaction(_msgSender(), _boostsAmount);\r\n      require(matchSignerAdmin(signTransaction(hash), _signature), \"Signature mismatch\");\r\n    } else {\r\n      require(msg.value == _amount* landPrice, \"Wrong amount sent\");\r\n    }\r\n\r\n    bool good;\r\n    uint unusedLlamas;\r\n    for (uint i; i < llamas.length; ) {\r\n      if (!llamaVerseIdUsed[llamas[i]]){\r\n        unchecked{ ++unusedLlamas; }\r\n        llamaVerseIdUsed[llamas[i]] = true;\r\n        if (unusedLlamas == _amount){\r\n          good = true;\r\n          break;\r\n        }\r\n      }\r\n      unchecked { ++i; }\r\n    }\r\n    require(good, \"Not enough unused staked llamas\");\r\n    llamascapeLand.saleMint(msg.sender, _amount, _stake);\r\n  }\r\n\r\n\r\n  // viewers\r\n\r\n  function priceOfRequest(uint256 _gridcraftAmount, uint256 _llamascapeAmount, bool _bundle) public view returns(uint256 price) {\r\n    price = _gridcraftAmount * identityPrice + _llamascapeAmount * landPrice;\r\n    if (_bundle) {\r\n      require(_gridcraftAmount > 0 && _llamascapeAmount > 0, \"Bundles require both NFTs\");\r\n      unchecked { price -= bundleSave; }\r\n    }\r\n  }\r\n\r\n  function gridcraftTotalSupply() external view returns(uint256) {\r\n    return gridcraftIdentities.totalSupply();\r\n  }\r\n\r\n  function llamascapeTotalSupply() external view returns(uint256) {\r\n    return llamascapeLand.totalSupply();\r\n  }\r\n\r\n  function stakedLlamasUnused(address _user) public view returns(uint256 unused) {\r\n    (uint256[] memory llamas, , , , ) = LlamaStake.getStakedTokens(_user);\r\n    for (uint i; i < llamas.length ; ) {\r\n      if (!llamaVerseIdUsed[llamas[i]]){\r\n        unchecked { ++unused; }\r\n      }\r\n      unchecked { ++i; }\r\n    }\r\n  }\r\n\r\n  // Owner setters\r\n\r\n  function withdraw() external {\r\n    require(msg.sender == withdrawWallet || msg.sender == owner(), \"Not allowed\");\r\n\r\n    uint balance = address(this).balance;\r\n    payable(withdrawWallet).transfer(balance);\r\n  }\r\n\r\n  function toggleAllowSale() external onlyOwner {\r\n    allowSaleIsActive = !allowSaleIsActive;\r\n  }\r\n\r\n  function togglePublicSale() external onlyOwner {\r\n    publicSaleIsActive = !publicSaleIsActive;\r\n  }\r\n\r\n  function setGridcraftIdentitiesAddress(address _gridcraftIdentitiesAddress) external onlyOwner {\r\n    gridcraftIdentities = INFT(_gridcraftIdentitiesAddress);\r\n  }\r\n\r\n  function setLlamascapeLandAddress(address _llamascapeLandAddress) external onlyOwner {\r\n    llamascapeLand = INFT(_llamascapeLandAddress);\r\n  }\r\n\r\n  function setPrices(uint256 _newIdentityPrice, uint256 _newLandPrice, uint256 _newDiscount) external onlyOwner {\r\n    identityPrice = _newIdentityPrice;\r\n    landPrice = _newLandPrice;\r\n    bundleSave = _newDiscount;\r\n  }\r\n\r\n  function setSigner(address _newSigner) external onlyOwner {\r\n    signer = _newSigner;\r\n  }\r\n\r\n  function setMaxIdentitiesPerWallet(uint256 _max) external onlyOwner {\r\n    identityMax = _max;\r\n  }\r\n\r\n    function setMaxLandPerWallet(uint256 _max) external onlyOwner {\r\n    landMax = _max;\r\n  }\r\n\r\n  // ECDSA related\r\n\r\n  function hashTransaction(address _sender, uint256 _gridcraftAmount, uint256 _llamascapeAmount, bool _bundle, uint256 _wl) public pure returns (bytes32 _hash) {\r\n    _hash = keccak256(abi.encode(_sender, _gridcraftAmount, _llamascapeAmount, _bundle, _wl));\r\n  }\r\n\r\n  function hashBoostTransaction(address _sender, uint256 _boostsAmount) public pure returns (bytes32 _hash) {\r\n    _hash = keccak256(abi.encode(_sender, _boostsAmount));\r\n  }\r\n\t\r\n  function signTransaction(bytes32 _hash) public pure returns (bytes32) {\r\n\t  return _hash.toEthSignedMessageHash();\r\n  }\r\n\r\n  function matchSignerAdmin(bytes32 _payload, bytes memory _signature) public view returns (bool) {\r\n\t  return signer == _payload.recover(_signature);\r\n  }\r\n\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/INFT.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface INFT {\r\n  function saleMint(address _recepient, uint256 _amount, bool stake) external;\r\n  function transferFrom(address from, address to, uint256 tokenId) external;\r\n  function tokensOfOwner(address owner) external view returns (uint256[] memory);\r\n  function totalSupply() external view returns (uint256);\r\n  function ownerOf(uint256 tokenId) external view returns (address owner);\r\n  function remaining() external view returns (uint256 nftsRemaining);\r\n}"
    },
    "contracts/IERC1155.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC1155 {\r\n  function balanceOf(address account, uint256 id) external view returns (uint256);\r\n}"
    },
    "contracts/ILlamaZoo.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface ILlamaZoo {\r\n  function getStakedTokens(address account) external view returns (uint256[] memory llamas, uint256 pixletCanvas, uint256 llamaDraws, uint128 silverBoosts, uint128 goldBoosts);\r\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}