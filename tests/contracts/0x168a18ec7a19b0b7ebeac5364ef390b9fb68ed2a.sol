{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"DigitalRelic.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n██████╗ ██╗ ██████╗ ██╗████████╗ █████╗ ██╗     ██████╗ ███████╗██╗     ██╗ ██████╗\r\n██╔══██╗██║██╔════╝ ██║╚══██╔══╝██╔══██╗██║     ██╔══██╗██╔════╝██║     ██║██╔════╝\r\n██║  ██║██║██║  ███╗██║   ██║   ███████║██║     ██████╔╝█████╗  ██║     ██║██║     \r\n██║  ██║██║██║   ██║██║   ██║   ██╔══██║██║     ██╔══██╗██╔══╝  ██║     ██║██║     \r\n██████╔╝██║╚██████╔╝██║   ██║   ██║  ██║███████╗██║  ██║███████╗███████╗██║╚██████╗\r\n╚═════╝ ╚═╝ ╚═════╝ ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝ ╚═════╝                                                             \r\n\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!i~~~i!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!iiiiiiiii!\u003e?fYYXf_!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!\u003e-{\u003c!!iii!!\u003c}tjfjrtcr?iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii![tt(t1_\u003e!\u003e_tjf/\\\\fc/\\Xf!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii}vx]\u003c~_}1-)0j\\\\\\fnr/\\v(\u003ciiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\u003exn[+{}\u003c\u003e~]xm/\\\\jYY|\\\\z1!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\u003er1\u003c\u003e+(1~\u003e+(vj\\tcXvx\\\\z1!!\u003c\u003c!!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiix\\_\u003c~}u)+{j/v/xJYnn\\\\Y1_jYCx+!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!iiiiiiiiiiiiiiiiiiiYXf/trxnffjnOnYYvxfjc)~1CwZJ[!!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!\u003e\u003c\u003c\u003c\u003c{?\u003c\u003e!iiiiiiiiiiiiiiii+XJfjjfunfxJ0CzuvcnjcJUYLmwCCc}!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!\u003c1)fcuxj\\fnj{iiiiiiiiiiiiiiii!|ccxffuxnLpLUYUc|+\u003enQZmZOdqOz{!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!i\u003e+(rjffjf1{)fj)_iiiiiiiiiiiiiiiiil\u003e{ncxvc0Zr?__-\u003cl!i!+~nb0wqU]!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!!iiiiiiiii!\u003e]\\rrf\\\\\\/|)(\\X|\u003e!iiiiiiiiiiiiiiiiiiiil!{LCYX/l!!!!iiiii!]XqmO0J{iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!i1/}iiiiiiii\u003c{fjt\\\\\\\\//){\\\\rj-!iiiiiiiiiiiiiiiiiii!i_\\cXn)~l!!iiiiiiiiiYdZZ}]\u003e!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!~|YYvYXiiiii!?vj/|\\\\|\\j/{)/|/Y|~iiiiiiiiiiiiiiiiii!\u003e[jXXj[\u003e!!_)1\u003c!l!iii\u003ezZqC-!!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!i]rU0\\xUZQiiii!}cf\\\\\\\\/f/v[)\\/xccm)liiiiiiiiiiiiiiiii|xUX\\_!!i!(CQOCj/}\u003eii\u003eOqqJI!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!\u003e1cCUv1nXOU_iiii!)Y\\\\\\\\\\jv/}rtfcvfcZX[!iiiiiiiiiiiii!\u003ctYXc)l!iiii}YwzwZOmu!i\u003ejQqQ|\u003e!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\u003c(vLcrr{XzvOXliii!(Xcu/||jxnm[nfrzcncvbc!iiiiiiiiiiiii_tCvc]!iiii!fQ0QCpZwQt\u003c\u003c\u003ciXbqq+\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003eiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!]LUXCCv|?j/xOX!iii!uqccujfnxnb[xzccccccYOcliiiiiiiiiiil(Ztm]liiiii!_/Jp*0CCLCccccJQLLcccccccccccccccccZnliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiil}CJcczCz{)jccOX!iii!zdvccczzxxd}xrncccczvQQ)iiiiiiiiiii!)OtZ[!iiiiiiil]QonfnvvvvvvvuuuvvvvvvvvvvvvvvvrfqYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii-xOcvzcUr}zzccZY!iii!/QCcccczufuZ\\\\nzccvr/j0p\u003eiiiiiiiiii!(Z/m]liiiiiiiil?azQJzXXXXXXXXXXXXXXXXXXXXXXzXOzqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiIj0cc/fuzt}czzvZU!!iiil/kccccruJfhXtxznf/jvvQq\u003eiiiiiiiiii!]cvJt+!ii!iiiil]azOYuYQQQQQQQQQQQQQQQQQQQQCcumzqYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii]zQcccn)(\\/zcr/nLz\u003c\u003c\u003c\u003c\u003ejaXXXYjrCva(jvjfnzXXzOp~\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003e[qjw/i\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003e}oYmCj/nnnnnnnnnnnnnnnuunnur\\um/QYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!cCvccczYr\\jt\\rvOkwcccccYLUUUUJYcJQXYXzUUUUUUCLcvccccccccccvzCYCXvcccccvvvz0JCJZZ/ttttttttttttt\\}}\\t((num|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!vOLCcccXQn-fLYvwbn?---[)111)1)))11)))))))11111))))))))))))))1)1))))))))){----\\Zbnuuuuuuuuuuuuuuccunvvnum|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiii!!iii!JaqqdzccY0pdmbZdbn??-tuvzccccccccccccccccccccccccccccccccccccccccccccczcvx]??jqbXXXXXXXXXXXXXXXXXXXXXzum|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiii!]}!li!JabppQzczxvaQo*#bn?--Jc_\u003c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{+~rO]??jqqjjjjjjjjjjjjjjjjjjjjjn0q|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiXpmY(\u003e!xOpbwd0XcJZQhobabn?--UX--00000000000000000000000000000000000000000000Z{+u0]??jqpxnxxxxxxxxxxxxxxxxxxxvqq(LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiivwwdk\u003cl;udmaXaQvZkXbwLpbn??-UX--Q0000000000000000000000000000000000000000000O1+n0]??jqbYYYYYYYYYYYYYYYYYYYYYY0q|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiii!lfmdb/|+~xa*ZodJOkYanxwbn??-UX--Q0000000000000000000000000000000000000000000O1~n0]??jqbYUUUUYYYYYYYYYYUUUUUYcum|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiii!i{zCOhoooq0w*odpmpoamoxxqbn?--UX--Q00000O0000000000000000000000000000000000000O1+n0]??jqpxnnnnnnnnnnnnnnnnnnnnnuw|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiii\u003c(ULJuJO1)1YZ0QOahdh*bZ*ZrQkn?--UX--Q0000Jz0000000000000000000000000000000000000O1+n0]??jqpxnnnnnnnnnnnnnnnnnnnnnuw|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiil1oQt}{XZ}ll!!!!\u003e)(YdadwdY/Qbu{{?UX-?Q0000Jv0O0000000OOOOOOOOOO0000O0000000000000O1+n0]?-jqduzXzzzzXzXXXXXXXXzXcnnuw|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiil)OQzt?}/cZ|\u003c!!!l!ll!-jQdd0qodznn}UX--Q00000OQvL000O0Qcuvt[uvvuUO0O0cJ000000000000O1+n0[{{xwkJCLLLLLLLLLLLLLLLLLCYnuw|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiilfhvf\\)1(\\tJCUJv[iii!ll\u003c|bqwhdznn}UX--Q000000QvL00Jj?\\i,::,::::i+[x?_vO00000000000O1+n0}xucwduzzXXXXzXXXXXXXXXXXcnnuw|LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiilfbx\\\\t{[\\\\\\jcXUCUUJt)]lixqk*dznn}UX--Q0000000O00c?\":~;,,,,,,,,!_[x?+uO00000000000O1+n0[rucwdnnnnnnnnnnnnnnnnnnnnnnvmumYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiilfhc\\\\\\{[(\\\\|nzxtzzzJQCv\\khwkdznn)JX--Q00000000000Juun]+_____juUOOOOcU000000000000O1+n0[rucwdnnnnnnnnnnnnnnnnnnnnunumXqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiil|Zz/\\1)/|[|\\tjnvccccvcY0oZOkdcnnn0z--Q000000000000OOO0000000OO00000O0000000000000O1+nZjnucwdnnnnnnnnnnnnnnnnnnnnunumzqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiii!)kt|\\\\\\\\({[1|xJzccccccvjmZdbcnnn0z?-Q0000000000000000000000000000000000000000000O1+nmvnncwdnnnnnnnnnnnnnnnnnnnnunumzqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiii!)h/\\\\((/fjvzQ0zYCnucczu[ZqkbXuuxOX?-Q0000000000000000000000000000000000000000000O1+nmunncwdnnnnnnnnnnnnnnnnnnnnunumzqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiii!}OJt|()\\\\\\rucCwC|mCczzzur0obUYYjnYt-Q0000000000000000000000000000000000000000000O1+nmunncwdnnnnnnnnnnnnnnnnnnnnunumXqXliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiii!_0QYnftt\\|nYYCkQ\\mh0JJZqLczUYYUwY??0OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOZ1+nmunncwdnnnnnnnnnnnnnnnnnnnnunvmf0Yliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiii)XO0JvuzQmOCZ0CtCbUCbjcbdXvvn0z?!--------------------------------------------?i+nmunncwdnnnnnnnnnnnnnnnnnnnnunvm(LYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiii!!]|xqQmwOCXcc#tzbJptXQkdzunnLv{{)1)))))))))))))))))))))))))))))))))))))))))))1{r0unncwdnnnnnnnnnnnnnuuuunnnunumnmYliiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiii~)nXvtzCJCJJquJoOtY0Ymbznuufff(((((((((((((((((((((((((((((((((((((((((((((((tj/nuncwdnnnnnnnnnuuuuxfjuuununumXqXIiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiii!XC|p-li\u003c\u003e_xa?C#LrCZYYpbcnn/|ff\\jrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrxxnnnvwdnnnnnnnun}?(x\\l!-|xunnumzqL_!iiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiilYJ)b+!iiil+o)ZLxCf|\\+XoJxxxxxxxnnnnnnnxxxxxxxxxxxxxxxxxxxxxxxxxxxxxrxnnnnnnnnnnnxrxXdbnnnnnnnux_{|jr|(+~\\uunumJZwLc\u003eiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiilYwck~!ii!]JtLwunC!ll![/\\\\\\\\\\|((((((((fmkqqqqqqqqqqqqqqqqqqqqqqwwqwqkqn)(((((((||/h0wwYnnnnnnnnnnuuuuuunnnnnnuwdcfQp\u003ciiiii!!!iiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiii!xmQO1\u003e!!l1h[b)vLIliii!ll!!!l~]]]]]]]]])dQJJJJJJJJJJJJJJJJJJJJJJJJUC#j][[]]]?]]_I\u003ebUCYfjjjjjfjjfjjjjjjjjjjjjfrbv|jQq\u003ci!!l\u003e1v)~!iiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiii!\\Zvm|?]?faxhuLkXX\u003c!!!!!ii!+YkO0O00000QYCCCQZ00000000000000000ZOC0kxjrrXdpppZd0_\u003ckXfnvvvvvvvvvvvvvvvvvvvvvvvzkUfrQqil_-\\J0qr_!iiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiii!!~)zmuZv//tf\\/\\\\/tfxjjr\\-!!_QOvuuvnnnnnnnuvvvcYJJJJJJJJJJJJJJJYzvuYd1\u003c\u003ei\u003e+_fjYXJb1ZUvvvccccccccccccccccccvvvvck0YXYLXzwbbmLw_!iiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiii\u003e-\\t}\u003e\u003e\u003c_+\u003c\u003c\u003c\u003c!lllli\u003e_\u003c\u003ei+\\t[d0zzzcjvzzzzzzzzzzzczzzzzzzzzzzzzzzzzzzzYhv)?~~\u003ei!])(jjuc/{[~+~\u003c~\u003c~++~~~~~+++\u003c?})jf|)/vXJaqdq0Y\\\u003ciiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiii!\u003em/!ll\u003e\u003e\u003e\u003e\u003c\u003c\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e!iI(n][pYjtff/-|tttttttttttttttttttttttttttttttttfjUc\\(}-czrvc\u003c++\\L0/!!_//-!!!-\u003c!i!l!?}rYt[+-1nZhhmmc}\u003e!!!iiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiii+vj-\u003e\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003exCYzvvLcrrxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxjjnLdQx\\xuunf?[fYc{\u003c[rzzn1i[jzc1li}jfzfi~1rpX|ft/~\u003e!l!!!?\u003c!iiiiiii\r\niiiiiiiiiiiiiiiiiiiiii!?b1++___\u003eiii\u003e\u003e\u003eiiiii!!!lLQ|/Xqavjzcccf//tttttttttttttfttttttffffffffttr**k0zCkQt))1\\dhj~\u003c1zCXj?l]Jz0x]i}Yffxx}i{rcq/IlIl?]/unxuo|!iiiiiii\r\niiiiiiiiiiiiiiiiiiiiii!-O/}]][]]]]]]]]]]]]]]]]?0mnxxxqCvcvvvx}_+llII;;II;;IIIllllllllllllllllitLUccvxt//fcZkZJzQ0Yk?I\u003e(cJQn~lI\\h)k\\I{znCf+lli}vJCn\\fczx_!iiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiii+wt_]]]]]]]]]]]]]]]]]]]fLQcvtXqCjjrvUmJ{!!_runxnnnnu(_+!iiiiiiiiiiiiiil\u003e|cYXcf/J0f\u003c~tf0mQmJcxmhZZ*{__\\C00Y{~zoQ*vjvYYUuxxnnUm-l!iiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiii\u003e/j(}]~~~~~~~~~~~~~~~~~\u003e/OZYc/~_n0Jr?~\u003el~rOJYznjfjjfnYJf\u003ciiiiiiiiiiiiiiil\u003e+]xLQOY1!!l;Cqz0wmUZmwMbCmpO0kdzOp0CboUvmkLj\\pQYUx\u003e!iiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiii!\u003c{/txxxxxxxxxxxxxxxxxxftj/f|f}|Y+!!!ii\u003e_tYJUUYvxxxvv\\_i!iiiiiiiiiiiiiiii!!!~++\u003e!iiilQQnp~~~CwLhjt-)QdYOk){LpJa}~\u003cjmzzuYCJUui!iiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiii!!i++++++++++++++++++\u003ell!\u003c+~[}\u003eiiiiiii!l\u003c(jffffff{\u003e!!iiiiiiiiiiiiiiiiiiiii!!!iiiii!)zYuz~lzLXw-!!I[XC/k);]nvUn_!\u003e]fjYYvfxQx~!iiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!iiiiiiiii!!!iiiiiii!!i!!iiiiiiiiiii!llll!!l!iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiil}nnr~iir0xm_!il)w|k)!!!_|-\u003eii!l!~|cCYuj~iiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!i~liiii]/~iiiii_rp{!ii!!!iiiiiiil\u003e+~~!iiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!!iiiiii!!\u003c\u003eiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii!iiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\niiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii\r\n*/\r\n\r\npragma solidity \u003e=0.8.9 \u003c0.9.0;\r\n\r\nimport \"./ERC721A.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\nimport \"./Strings.sol\";\r\n\r\ncontract DigitalRelic is ERC721A, Ownable, ReentrancyGuard {\r\n  using Strings for uint256;\r\n\r\n  mapping(address =\u003e bool) private _approvedMarketplaces;\r\n\r\n  uint256 public cost = 0 ether;\r\n  uint256 public maxDigitalRelics = 2000;\r\n  uint256 public txnMax = 1;\r\n  uint256 public maxFreeMintEach = 1;\r\n  uint256 public maxMintAmount = 1;\r\n\r\n  string public uriPrefix = \u0027\u0027;\r\n  string public uriSuffix = \u0027.json\u0027;\r\n  string public hiddenMetadataUri;\r\n\r\n  bool public revealed = true;\r\n  bool public paused = true;\r\n\r\n  constructor(\r\n  ) ERC721A(\"DigitalRelic\", \"DR\") {\r\n  }\r\n\r\n  modifier DigitalRelicCompliance(uint256 _mintAmount) {\r\n    require(!paused, \"DigitalRelic season has not started.\");\r\n    require(_mintAmount \u003e 0 \u0026\u0026 _mintAmount \u003c= txnMax, \"Maximum of 1 DigitalRelics per txn!\");\r\n    require(totalSupply() + _mintAmount \u003c= maxDigitalRelics, \"No DigitalRelics lefts!\");\r\n    require(\r\n      _mintAmount \u003e 0 \u0026\u0026 numberMinted(msg.sender) + _mintAmount \u003c= maxMintAmount,\r\n       \"You may have minted max number of DigitalRelics!\"\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier DigitalRelicPriceCompliance(uint256 _mintAmount) {\r\n    uint256 realCost = 0;\r\n    \r\n    if (numberMinted(msg.sender) \u003c maxFreeMintEach) {\r\n      uint256 freeMintsLeft = maxFreeMintEach - numberMinted(msg.sender);\r\n      realCost = cost * freeMintsLeft;\r\n    }\r\n   \r\n    require(msg.value \u003e= cost * _mintAmount - realCost, \"Insufficient/incorrect funds.\");\r\n    _;\r\n  }\r\n\r\n  function Digitalized(uint256 _mintAmount) public payable DigitalRelicCompliance(_mintAmount) DigitalRelicPriceCompliance(_mintAmount) {\r\n    _safeMint(_msgSender(), _mintAmount);\r\n  }\r\n  \r\n  function mintForAddress(uint256 _mintAmount, address _receiver) public onlyOwner {\r\n    require(totalSupply() + _mintAmount \u003c= maxDigitalRelics, \"Max supply exceeded!\");\r\n    _safeMint(_receiver, _mintAmount);\r\n  }\r\n\r\n  function _startTokenId() internal view virtual override returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\r\n    require(_exists(_tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n    if (revealed == false) {\r\n      return hiddenMetadataUri;\r\n    }\r\n\r\n    string memory currentBaseURI = _baseURI();\r\n    return bytes(currentBaseURI).length \u003e 0\r\n        ? string(abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix))\r\n        : \u0027\u0027;\r\n  }\r\n\r\n  function setCost(uint256 _cost) public onlyOwner {\r\n    cost = _cost;\r\n  }\r\n\r\n  function setmaxFreeMintEach(uint256 _maxFreeMintEach) public onlyOwner {\r\n    maxFreeMintEach = _maxFreeMintEach;\r\n  }\r\n\r\n  function setRevealed(bool _state) public onlyOwner {\r\n    revealed = _state;\r\n  }\r\n\r\n   function setHiddenMetadataUri(string memory _hiddenMetadataUri) public onlyOwner {\r\n    hiddenMetadataUri = _hiddenMetadataUri;\r\n  }\r\n\r\n  function setUriPrefix(string memory _uriPrefix) public onlyOwner {\r\n    uriPrefix = _uriPrefix;\r\n  }\r\n\r\n  function setUriSuffix(string memory _uriSuffix) public onlyOwner {\r\n    uriSuffix = _uriSuffix;\r\n  }\r\n\r\n  function setPaused(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n\r\n  function setMaxMintAmount(uint256 _maxMintAmount) public onlyOwner {\r\n    maxMintAmount = _maxMintAmount;\r\n  }\r\n\r\n  function withdraw() public onlyOwner nonReentrant {\r\n    (bool withdrawFunds, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(withdrawFunds);\r\n  }\r\n\r\n  function numberMinted(address owner) public view returns (uint256) {\r\n    return _numberMinted(owner);\r\n  }\r\n\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return uriPrefix;\r\n  }\r\n\r\n  function approve(address to, uint256 tokenId) public virtual override {\r\n    require(_approvedMarketplaces[to], \"Invalid marketplace\");\r\n    super.approve(to, tokenId);\r\n  }\r\n\r\n  function setApprovalForAll(address operator, bool approved) public virtual override {\r\n    require(_approvedMarketplaces[operator], \"Invalid marketplace\");\r\n    super.setApprovalForAll(operator, approved);\r\n  }\r\n\r\n  function setApprovedMarketplace(address market, bool approved) public onlyOwner {\r\n    _approvedMarketplaces[market] = approved;\r\n  }\r\n}\r\n"},"ERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.0.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \u0027./IERC721A.sol\u0027;\r\n\r\n/**\r\n * @dev ERC721 token receiver interface.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension. Built to optimize for lower gas during batch mints.\r\n *\r\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\r\n *\r\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n *\r\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 \u003c\u003c 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 \u003c\u003c 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant BITMASK_BURNED = 1 \u003c\u003c 224;\r\n    \r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 \u003c\u003c 225;\r\n\r\n    // The tokenId of the next token to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See `_packedOwnershipOf` implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    mapping(uint256 =\u003e uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address =\u003e uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 =\u003e address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the starting token ID. \r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count. \r\n     * To get the total number of tokens minted, please see `_totalMinted`.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view returns (uint256) {\r\n        // Counter underflow is impossible as _currentIndex does not decrement,\r\n        // and it is initialized to `_startTokenId()`\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\r\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\r\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] \u0026 BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] \u003e\u003e BITPOS_NUMBER_MINTED) \u0026 BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] \u003e\u003e BITPOS_NUMBER_BURNED) \u0026 BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] \u003e\u003e BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        assembly { // Cast aux without masking.\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed \u0026 BITMASK_AUX_COMPLEMENT) | (auxCasted \u003c\u003c BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() \u003c= curr)\r\n                if (curr \u003c _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed \u0026 BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an ownership that has an address and is not burned\r\n                        // before an ownership that does not have an address and is not burned.\r\n                        // Hence, curr will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed is zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed \u003e\u003e BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed \u0026 BITMASK_BURNED != 0;\r\n    }\r\n\r\n    /**\r\n     * Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : \u0027\u0027;\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \u0027\u0027;\r\n    }\r\n\r\n    /**\r\n     * @dev Casts the address to uint256 without masking.\r\n     */\r\n    function _addressToUint256(address value) private pure returns (uint256 result) {\r\n        assembly {\r\n            result := value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Casts the boolean to uint256 without branching.\r\n     */\r\n    function _boolToUint256(bool value) private pure returns (uint256 result) {\r\n        assembly {\r\n            result := value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = address(uint160(_packedOwnershipOf(tokenId)));\r\n        if (to == owner) revert ApprovalToCurrentOwner();\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \u0027\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        _transfer(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return\r\n            _startTokenId() \u003c= tokenId \u0026\u0026\r\n            tokenId \u003c _currentIndex \u0026\u0026 // If within bounds,\r\n            _packedOwnerships[tokenId] \u0026 BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, \u0027\u0027)`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal {\r\n        _safeMint(to, quantity, \u0027\u0027);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity \u003e 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity \u003e 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the balance and number minted.\r\n            _packedAddressData[to] += quantity * ((1 \u003c\u003c BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\r\n                (_boolToUint256(quantity == 1) \u003c\u003c BITPOS_NEXT_INITIALIZED);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            if (to.code.length != 0) {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex);\r\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (updatedIndex \u003c end);\r\n                // Reentrancy protection\r\n                if (_currentIndex != startTokenId) revert();\r\n            } else {\r\n                do {\r\n                    emit Transfer(address(0), to, updatedIndex++);\r\n                } while (updatedIndex \u003c end);\r\n            }\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // balance or numberMinted overflow if current value of either + quantity \u003e 1.8e19 (2**64) - 1\r\n        // updatedIndex overflows if _currentIndex + quantity \u003e 1.2e77 (2**256) - 1\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the balance and number minted.\r\n            _packedAddressData[to] += quantity * ((1 \u003c\u003c BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\r\n                (_boolToUint256(quantity == 1) \u003c\u003c BITPOS_NEXT_INITIALIZED);\r\n\r\n            uint256 updatedIndex = startTokenId;\r\n            uint256 end = updatedIndex + quantity;\r\n\r\n            do {\r\n                emit Transfer(address(0), to, updatedIndex++);\r\n            } while (updatedIndex \u003c end);\r\n\r\n            _currentIndex = updatedIndex;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) private {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\r\n            isApprovedForAll(from, _msgSenderERC721A()) ||\r\n            getApproved(tokenId) == _msgSenderERC721A());\r\n\r\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        // Underflow of the sender\u0027s balance is impossible because we check for\r\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] =\r\n                _addressToUint256(to) |\r\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\r\n                BITMASK_NEXT_INITIALIZED;\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked \u0026 BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        if (approvalCheck) {\r\n            bool isApprovedOrOwner = (_msgSenderERC721A() == from ||\r\n                isApprovedForAll(from, _msgSenderERC721A()) ||\r\n                getApproved(tokenId) == _msgSenderERC721A());\r\n\r\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        // Underflow of the sender\u0027s balance is impossible because we check for\r\n        // ownership above and the recipient\u0027s balance can\u0027t realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 \u003c\u003c BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 \u003c\u003c BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] =\r\n                _addressToUint256(from) |\r\n                (block.timestamp \u003c\u003c BITPOS_START_TIMESTAMP) |\r\n                BITMASK_BURNED | \r\n                BITMASK_NEXT_INITIALIZED;\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked \u0026 BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot\u0027s address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`\u0027s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\r\n     * minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * startTokenId - the first token id to be transferred\r\n     * quantity - the amount to be transferred\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`\u0027s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), \r\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\r\n            // We will need 1 32-byte word to store the length, \r\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\r\n            ptr := add(mload(0x40), 128)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, ptr)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := ptr\r\n\r\n            // We write the string from the rightmost digit to the leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // Costs a bit more than early returning for the zero case,\r\n            // but cheaper in terms of deployment and overall runtime costs.\r\n            for { \r\n                // Initialize and perform the first pass without check.\r\n                let temp := value\r\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\r\n                ptr := sub(ptr, 1)\r\n                // Write the character to the pointer. 48 is the ASCII index of \u00270\u0027.\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n                temp := div(temp, 10)\r\n            } temp { \r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n            } { // Body of the for loop.\r\n                ptr := sub(ptr, 1)\r\n                mstore8(ptr, add(48, mod(temp, 10)))\r\n            }\r\n            \r\n            let length := sub(end, ptr)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            ptr := sub(ptr, 32)\r\n            // Store the length.\r\n            mstore(ptr, length)\r\n        }\r\n    }\r\n}"},"IERC721A.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// ERC721A Contracts v4.0.0\r\n// Creator: Chiru Labs\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Interface of an ERC721A compliant contract.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * The caller cannot approve to the current owner.\r\n     */\r\n    error ApprovalToCurrentOwner();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     *\r\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // ==============================\r\n    //            IERC165\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // ==============================\r\n    //            IERC721\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``\u0027s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // ==============================\r\n    //        IERC721Metadata\r\n    // ==============================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}"},"Strings.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI\u0027s implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp \u003e\u003e= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\r\n            value \u003e\u003e= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}"}}