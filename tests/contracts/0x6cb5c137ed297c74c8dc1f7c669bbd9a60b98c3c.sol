{{
  "language": "Solidity",
  "sources": {
    "contracts/VFToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./erc721vf/contracts/ERC721VF.sol\";\nimport \"./VFAccessControl.sol\";\nimport \"./IVFAccessControl.sol\";\nimport \"./VFRoyalties.sol\";\nimport \"./IVFRoyalties.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ncontract VFToken is ERC721VF, IERC2981 {\n    //Token base URI\n    string private _baseUri;\n\n    //Flag to permanently lock minting\n    bool public mintingPermanentlyLocked = false;\n    //Flag to activate or disable minting\n    bool public isMintActive = false;\n    //Flag to activate or disable burning\n    bool public isBurnActive = false;\n\n    //Contract for function access control\n    VFAccessControl private _controlContract;\n\n    //Contract for royalties\n    VFRoyalties private _royaltiesContract;\n\n    /**\n     * @dev Initializes the contract by setting a `initialBaseUri`, `name`, `symbol`,\n     * and a `controlContractAddress` to the token collection.\n     */\n    constructor(\n        string memory initialBaseUri,\n        string memory name,\n        string memory symbol,\n        address controlContractAddress\n    ) ERC721VF(name, symbol) {\n        _controlContract = VFAccessControl(controlContractAddress);\n        setBaseURI(initialBaseUri);\n    }\n\n    modifier onlyRole(bytes32 role) {\n        _controlContract.checkRole(role, _msgSender());\n        _;\n    }\n\n    modifier onlyRoles(bytes32[] memory roles) {\n        bool hasRequiredRole = false;\n        for (uint256 i; i < roles.length; i++) {\n            bytes32 role = roles[i];\n            if (_controlContract.hasRole(role, _msgSender())) {\n                hasRequiredRole = true;\n                break;\n            }\n        }\n        require(hasRequiredRole, \"Missing required role\");\n        _;\n    }\n\n    modifier notLocked() {\n        require(!mintingPermanentlyLocked, \"Minting permanently locked\");\n        _;\n    }\n\n    modifier mintActive() {\n        require(isMintActive, \"Mint is not active\");\n        _;\n    }\n\n    modifier burnActive() {\n        require(isBurnActive, \"Burn is not active\");\n        _;\n    }\n\n    /**\n     * @dev Get the base token URI\n     */\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseUri;\n    }\n\n    /**\n     * @dev Update the base token URI\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function setBaseURI(string memory baseUri)\n        public\n        onlyRole(_controlContract.getAdminRole())\n    {\n        _baseUri = baseUri;\n    }\n\n    /**\n     * @dev Update the access control contract\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     * - `controlContractAddress` must support the IVFAccesControl interface\n     */\n    function setControlContract(address controlContractAddress)\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        require(\n            IERC165(controlContractAddress).supportsInterface(\n                type(IVFAccessControl).interfaceId\n            ),\n            \"Contract does not support required interface\"\n        );\n        _controlContract = VFAccessControl(controlContractAddress);\n    }\n\n    /**\n     * @dev Update the royalties contract\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     * - `royaltiesContractAddress` must support the IVFRoyalties interface\n     */\n    function setRoyaltiesContract(address royaltiesContractAddress)\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        require(\n            IERC165(royaltiesContractAddress).supportsInterface(\n                type(IVFRoyalties).interfaceId\n            ),\n            \"Contract does not support required interface\"\n        );\n        _royaltiesContract = VFRoyalties(royaltiesContractAddress);\n    }\n\n    /**\n     * @dev Permanently lock minting\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function lockMintingPermanently()\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        mintingPermanentlyLocked = true;\n    }\n\n    /**\n     * @dev Set the active/inactive state of minting\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function toggleMintActive()\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        isMintActive = !isMintActive;\n    }\n\n    /**\n     * @dev Set the active/inactive state of burning\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function toggleBurnActive()\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        isBurnActive = !isBurnActive;\n    }\n\n    /**\n     * @dev Airdrop `addresses` for `quantity` starting at `startTokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     * - `addresses` and `quantities` must have the same length\n     */\n    function airdrop(\n        address[] memory addresses,\n        uint16[] memory quantities,\n        uint256 startTokenId\n    )\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        require(\n            addresses.length == quantities.length,\n            \"Address and quantities need to be equal length\"\n        );\n\n        for (uint256 i; i < addresses.length; i++) {\n            startTokenId = _mintBatch(\n                addresses[i],\n                quantities[i],\n                startTokenId\n            );\n        }\n    }\n\n    /**\n     * @dev Airdrop `addresses` for `quantity` starting at `startTokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     * - `addresses` and `quantities` must have the same length\n     */\n    function safeAirdrop(\n        address[] memory addresses,\n        uint16[] memory quantities,\n        uint256 startTokenId\n    )\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        require(\n            addresses.length == quantities.length,\n            \"Address and quantities need to be equal length\"\n        );\n\n        for (uint256 i; i < addresses.length; i++) {\n            startTokenId = _safeMintBatch(\n                addresses[i],\n                quantities[i],\n                startTokenId\n            );\n        }\n    }\n\n    /**\n     * @dev mint batch `to` for `quantity` starting at `startTokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     */\n    function mintBatch(\n        address to,\n        uint8 quantity,\n        uint256 startTokenId\n    )\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        _mintBatch(to, quantity, startTokenId);\n    }\n\n    /**\n     * @dev mint batch `to` for `quantity` starting at `startTokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     */\n    function safeMintBatch(\n        address to,\n        uint8 quantity,\n        uint256 startTokenId\n    )\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        _safeMintBatch(to, quantity, startTokenId);\n    }\n\n    /**\n     * @dev mint `to` token `tokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     */\n    function mint(address to, uint256 tokenId)\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        _mint(to, tokenId);\n    }\n\n    /**\n     * @dev mint `to` token `tokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a minter role\n     * - minting must not be locked and must be active\n     */\n    function safeMint(address to, uint256 tokenId)\n        external\n        onlyRoles(_controlContract.getMinterRoles())\n        notLocked\n        mintActive\n    {\n        _safeMint(to, tokenId);\n    }\n\n    /**\n     * @dev burn `from` token `tokenId`\n     *\n     * Requirements:\n     *\n     * - the caller must be a burner role\n     * - burning must be active\n     */\n    function burn(address from, uint256 tokenId)\n        external\n        onlyRole(_controlContract.getBurnerRole())\n        burnActive\n    {\n        _burn(from, tokenId);\n    }\n\n    /**\n     * @dev Get royalty information for a token based on the `salePrice`\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return\n            _royaltiesContract.royaltyInfo(tokenId, address(this), salePrice);\n    }\n\n    /**\n     * @dev Widthraw balance on contact to msg sender\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function withdrawMoney()\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        address payable to = payable(_msgSender());\n        to.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/erc721vf/contracts/ERC721VF.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721VF/ERC721VF.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721VF.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, and a queryable extenstion defined in {IERC721VF}.\n */\ncontract ERC721VF is Context, ERC165, IERC721, IERC721Metadata, IERC721VF {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // The number of tokens minted\n    uint256 private _mintCounter;\n\n    // The number of tokens burned\n    uint256 private _burnCounter;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            interfaceId == type(IERC721VF).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721VF.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev See {IERC721VF-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        unchecked {\n            return _mintCounter - _burnCounter;\n        }\n    }\n\n    /**\n     * @dev See {IERC721VF-totalMinted}.\n     */\n    function totalMinted() public view returns (uint256) {\n        unchecked {\n            return _mintCounter;\n        }\n    }\n\n    /**\n     * @dev See {IERC721VF-totalBurned}.\n     */\n    function totalBurned() public view returns (uint256) {\n        unchecked {\n            return _burnCounter;\n        }\n    }\n\n    /**\n     * @dev See {IERC721VF-tokensOfOwner}.\n     */\n    function tokensOfOwner(address owner)\n        public\n        view\n        returns (uint256[] memory ownerTokens)\n    {\n        address currentOwnerAddress;\n        uint256 tokenCount = balanceOf(owner);\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 resultIndex = 0;\n\n            uint256 index;\n            for (index = 0; resultIndex != tokenCount; index++) {\n                currentOwnerAddress = _owners[index];\n                if (currentOwnerAddress == owner) {\n                    result[resultIndex++] = index;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    /**\n     * @dev See {IERC721VF-tokensOfOwnerIn}.\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 startIndex,\n        uint256 endIndex\n    ) public view returns (uint256[] memory ownerTokens) {\n        address currentOwnerAddress;\n        uint256 tokenCount = balanceOf(owner);\n\n        if (tokenCount == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 resultIndex = 0;\n\n            uint256 index = startIndex;\n            for (index; index <= endIndex; index++) {\n                currentOwnerAddress = _owners[index];\n                if (currentOwnerAddress == owner) {\n                    result[resultIndex++] = index;\n                }\n            }\n\n            // Downsize the array to fit.\n            assembly {\n                mstore(result, resultIndex)\n            }\n\n            return result;\n        }\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721VF.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Safely batch mints tokens starting at `startTokenId` until `quantity` is met and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     * - Transfer to only ERC721Reciever implementers\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMintBatch(\n        address to,\n        uint256 quantity,\n        uint256 startTokenId\n    ) internal returns (uint256 endToken) {\n        uint256 tokenId = startTokenId;\n        for (uint256 i; i < quantity; i++) {\n            require(to != address(0), \"ERC721: mint to the zero address\");\n            require(!_exists(tokenId), \"ERC721: token already minted\");\n\n            _beforeTokenTransfer(address(0), to, tokenId);\n\n            _balances[to] += 1;\n            _owners[tokenId] = to;\n\n            emit Transfer(address(0), to, tokenId);\n\n            _afterTokenTransfer(address(0), to, tokenId);\n\n            require(\n                _checkOnERC721Received(address(0), to, tokenId, \"\"),\n                \"ERC721: transfer to non ERC721Receiver implementer\"\n            );\n\n            tokenId++;\n        }\n\n        unchecked {\n            _mintCounter += quantity;\n        }\n\n        return tokenId;\n    }\n\n    /**\n     * @dev Batch mints tokens starting at `startTokenId` until `quantity` is met and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mintBatch(\n        address to,\n        uint256 quantity,\n        uint256 startTokenId\n    ) internal returns (uint256 endToken) {\n        uint256 tokenId = startTokenId;\n        for (uint256 i; i < quantity; i++) {\n            require(to != address(0), \"ERC721: mint to the zero address\");\n            require(!_exists(tokenId), \"ERC721: token already minted\");\n\n            _beforeTokenTransfer(address(0), to, tokenId);\n\n            _owners[tokenId] = to;\n\n            emit Transfer(address(0), to, tokenId);\n\n            _afterTokenTransfer(address(0), to, tokenId);\n\n            tokenId++;\n        }\n\n        unchecked {\n            _balances[to] += quantity;\n            _mintCounter += quantity;\n        }\n\n        return tokenId;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        unchecked {\n            _mintCounter++;\n        }\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    function _burn(address from, uint256 tokenId) internal virtual {\n        require(\n            _isApprovedOrOwner(from, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721VF.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721VF.ownerOf(tokenId) == from,\n            \"ERC721VF: transfer from incorrect owner\"\n        );\n        require(to != address(0), \"ERC721VF: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721VF.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/VFAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IVFAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract VFAccessControl is IVFAccessControl, Context, ERC165, ReentrancyGuard {\n    //Struct for maintaining role information\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    //Role information\n    mapping(bytes32 => RoleData) private _roles;\n\n    //Admin role\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n    //Token contract role\n    bytes32 public constant TOKEN_CONTRACT_ROLE =\n        keccak256(\"TOKEN_CONTRACT_ROLE\");\n    //Sales contract role\n    bytes32 public constant SALES_CONTRACT_ROLE =\n        keccak256(\"SALES_CONTRACT_ROLE\");\n    //Burner role\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    //Minter role\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    //Array of addresses that can mint\n    address[] public minterAddresses;\n    //Index of next minter in minterAddresses\n    uint8 private _currentMinterIndex = 0;\n\n    //Array of roles that can mint\n    bytes32[] public minterRoles;\n\n    /**\n     * @dev Initializes the contract by assigning the msg sender the admin, minter,\n     * and burner role. Along with adding the minter role and sales contract role\n     * to the minter roles array.\n     */\n    constructor() {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _grantRole(MINTER_ROLE, _msgSender());\n        _grantRole(BURNER_ROLE, _msgSender());\n        minterRoles.push(MINTER_ROLE);\n        minterRoles.push(SALES_CONTRACT_ROLE);\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IVFAccessControl).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IVFAccessControl-hasRole}.\n     */\n    function hasRole(bytes32 role, address account)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev See {IVFAccessControl-checkRole}.\n     */\n    function checkRole(bytes32 role, address account) public view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getAdminRole}.\n     */\n    function getAdminRole() external view virtual returns (bytes32) {\n        return DEFAULT_ADMIN_ROLE;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getTokenContractRole}.\n     */\n    function getTokenContractRole() external view virtual returns (bytes32) {\n        return TOKEN_CONTRACT_ROLE;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getSalesContractRole}.\n     */\n    function getSalesContractRole() external view virtual returns (bytes32) {\n        return SALES_CONTRACT_ROLE;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getBurnerRole}.\n     */\n    function getBurnerRole() external view virtual returns (bytes32) {\n        return BURNER_ROLE;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getMinterRole}.\n     */\n    function getMinterRole() external view virtual returns (bytes32) {\n        return MINTER_ROLE;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getMinterRoles}.\n     */\n    function getMinterRoles() external view virtual returns (bytes32[] memory) {\n        return minterRoles;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-getRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-grantRole}.\n     */\n    function grantRole(bytes32 role, address account)\n        public\n        virtual\n        onlyRole(getRoleAdmin(role))\n    {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev See {IVFAccessControl-revokeRole}.\n     */\n    function revokeRole(bytes32 role, address account)\n        external\n        virtual\n        onlyRole(getRoleAdmin(role))\n    {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {IVFAccessControl-renounceRole}.\n     */\n    function renounceRole(bytes32 role, address account) external virtual {\n        require(\n            account == _msgSender(),\n            \"AccessControl: can only renounce roles for self\"\n        );\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev See {IVFAccessControl-selectNextMinter}.\n     */\n    function selectNextMinter()\n        external\n        onlyRole(SALES_CONTRACT_ROLE)\n        returns (address payable)\n    {\n        address nextMinter = minterAddresses[_currentMinterIndex];\n        if (_currentMinterIndex + 1 < minterAddresses.length) {\n            _currentMinterIndex++;\n        } else {\n            _currentMinterIndex = 0;\n        }\n        return payable(nextMinter);\n    }\n\n    /**\n     * @dev See {IVFAccessControl-grantMinterRole}.\n     */\n    function grantMinterRole(address minter)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _grantRole(MINTER_ROLE, minter);\n        minterAddresses.push(minter);\n        _currentMinterIndex = 0;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-revokeMinterRole}.\n     */\n    function revokeMinterRole(address minter)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _revokeRole(MINTER_ROLE, minter);\n        uint256 index;\n        for (index = 0; index < minterAddresses.length; index++) {\n            if (minter == minterAddresses[index]) {\n                minterAddresses[index] = minterAddresses[\n                    minterAddresses.length - 1\n                ];\n                break;\n            }\n        }\n        minterAddresses.pop();\n        _currentMinterIndex = 0;\n    }\n\n    /**\n     * @dev See {IVFAccessControl-fundMinters}.\n     */\n    function fundMinters() external payable nonReentrant {\n        uint256 totalMinters = minterAddresses.length;\n        uint256 amount = msg.value / totalMinters;\n        for (uint256 index = 0; index < totalMinters; index++) {\n            payable(minterAddresses[index]).transfer(amount);\n        }\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Widthraw balance on contact to msg sender\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function withdrawMoney() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        address payable to = payable(_msgSender());\n        to.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/IVFAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IVFAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(\n        bytes32 indexed role,\n        bytes32 indexed previousAdminRole,\n        bytes32 indexed newAdminRole\n    );\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(\n        bytes32 indexed role,\n        address indexed account,\n        address indexed sender\n    );\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function checkRole(bytes32 role, address account) external view;\n\n    /**\n     * @dev Returns bytes of default admin role\n     */\n    function getAdminRole() external view returns (bytes32);\n\n    /**\n     * @dev Returns bytes of token contract role\n     */\n    function getTokenContractRole() external view returns (bytes32);\n\n    /**\n     * @dev Returns bytes of sales contract role\n     */\n    function getSalesContractRole() external view returns (bytes32);\n\n    /**\n     * @dev Returns bytes of burner role\n     */\n    function getBurnerRole() external view returns (bytes32);\n\n    /**\n     * @dev Returns bytes of minter role\n     */\n    function getMinterRole() external view returns (bytes32);\n\n    /**\n     * @dev Returns a bytes array of roles that can be minters\n     */\n    function getMinterRoles() external view returns (bytes32[] memory);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Selects the next minter from the minters array using the current minter index.\n     * The current minter index should be incremented after each selection.  If the\n     * current minter index + 1 is equal to the minters array length then the current\n     * minter index should be set back to 0\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function selectNextMinter() external returns (address payable);\n\n    /**\n     * @dev Grants `minter` minter role and adds `minter` to minters array\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function grantMinterRole(address minter) external;\n\n    /**\n     * @dev Revokes minter role from `minter` and removes `minter` from minters array\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     */\n    function revokeMinterRole(address minter) external;\n\n    /**\n     * @dev Distributes ETH evenly to all addresses in minters array\n     */\n    function fundMinters() external payable;\n}\n"
    },
    "contracts/VFRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./IVFRoyalties.sol\";\nimport \"./VFAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\ncontract VFRoyalties is IVFRoyalties, Context, ERC165 {\n    //Struct for maintaining royalty information\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    //Default royalty informations\n    RoyaltyInfo private _defaultRoyaltyInfo;\n\n    //Contract address to royalty information map\n    mapping(address => RoyaltyInfo) private _contractRoyalInfo;\n\n    //Contract for function access control\n    VFAccessControl private _controlContract;\n\n    /**\n     * @dev Initializes the contract by setting a `controlContractAddress`, `defaultReceiver`,\n     * and `defaultFeeNumerator` for the royalties contract.\n     */\n    constructor(\n        address controlContractAddress,\n        address defaultReceiver,\n        uint96 defaultFeeNumerator\n    ) {\n        _controlContract = VFAccessControl(controlContractAddress);\n        setDefaultRoyalty(defaultReceiver, defaultFeeNumerator);\n    }\n\n    modifier onlyRole(bytes32 role) {\n        _controlContract.checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IVFRoyalties).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IVFRoyalties-setControlContract}.\n     */\n    function setControlContract(address controlContractAddress)\n        external\n        onlyRole(_controlContract.getAdminRole())\n    {\n        require(\n            IERC165(controlContractAddress).supportsInterface(\n                type(IVFAccessControl).interfaceId\n            ),\n            \"Contract does not support required interface\"\n        );\n        _controlContract = VFAccessControl(controlContractAddress);\n    }\n\n    /**\n     * @dev See {IVFRoyalties-royaltyInfo}.\n     */\n    function royaltyInfo(\n        uint256,\n        address contractAddress,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount) {\n        RoyaltyInfo memory contractRoyaltyInfo = _contractRoyalInfo[\n            contractAddress\n        ];\n\n        if (contractRoyaltyInfo.receiver == address(0)) {\n            contractRoyaltyInfo = _defaultRoyaltyInfo;\n        }\n\n        royaltyAmount =\n            (salePrice * contractRoyaltyInfo.royaltyFraction) /\n            _feeDenominator();\n\n        return (contractRoyaltyInfo.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev See {IVFRoyalties-setDefaultRoyalty}.\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator)\n        public\n        virtual\n        onlyRole(_controlContract.getAdminRole())\n    {\n        require(\n            feeNumerator <= _feeDenominator(),\n            \"ERC2981: royalty fee will exceed salePrice\"\n        );\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev See {IVFRoyalties-deleteDefaultRoyalty}.\n     */\n    function deleteDefaultRoyalty()\n        external\n        virtual\n        onlyRole(_controlContract.getAdminRole())\n    {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev See {IVFRoyalties-setContractRoyalties}.\n     */\n    function setContractRoyalties(\n        address contractAddress,\n        address receiver,\n        uint96 feeNumerator\n    ) external onlyRole(_controlContract.getAdminRole()) {\n        require(\n            feeNumerator <= _feeDenominator(),\n            \"ERC2981: royalty fee will exceed salePrice\"\n        );\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _contractRoyalInfo[contractAddress] = RoyaltyInfo(\n            receiver,\n            feeNumerator\n        );\n    }\n\n    /**\n     * @dev See {IVFRoyalties-resetContractRoyalty}.\n     */\n    function resetContractRoyalty(address contractAddress)\n        external\n        virtual\n        onlyRole(_controlContract.getAdminRole())\n    {\n        delete _contractRoyalInfo[contractAddress];\n    }\n\n    /**\n     * @dev Get the fee denominator\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n}\n"
    },
    "contracts/IVFRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IVFRoyalties {\n    /**\n     * @dev Update the access control contract\n     *\n     * Requirements:\n     *\n     * - the caller must be an admin role\n     * - `controlContractAddress` must support the IVFAccesControl interface\n     */\n    function setControlContract(address controlContractAddress) external;\n\n    /**\n     * @dev Get royalty information for a contract based on the `salePrice` of a token\n     */\n    function royaltyInfo(\n        uint256,\n        address contractAddress,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function deleteDefaultRoyalty() external;\n\n    /**\n     * @dev Sets the royalty information for `contractAddress`.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function setContractRoyalties(\n        address contractAddress,\n        address receiver,\n        uint96 feeNumerator\n    ) external;\n\n    /**\n     * @dev Removes royalty information for `contractAddress`.\n     */\n    function resetContractRoyalty(address contractAddress) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/erc721vf/contracts/IERC721VF.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC721VF {\n    /**\n     * @dev Burned tokens are calculated here, use totalMinted() if you want to count just minted tokens.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * Returns the total amount of tokens minted in the contract.\n     */\n    function totalMinted() external view returns (uint256);\n\n    /**\n     * Returns the total amount of tokens burned in the contract.\n     */\n    function totalBurned() external view returns (uint256);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K pfp collections should be fine).\n     */\n    function tokensOfOwner(address owner)\n        external\n        view\n        returns (uint256[] memory ownerTokens);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start` < `stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 startIndex,\n        uint256 endIndex\n    ) external view returns (uint256[] memory ownerTokens);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}