{{
  "language": "Solidity",
  "sources": {
    "contracts/XENWalletManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./interfaces/IXENCrypto.sol\";\r\nimport \"./XENWallet.sol\";\r\nimport \"./XELCrypto.sol\";\r\n\r\ncontract XENWalletManager is Ownable {\r\n    using Clones for address;\r\n    using SafeERC20 for IXENCrypto;\r\n\r\n    event WalletsCreated(address indexed owner, uint256 amount, uint256 term);\r\n    event TokensClaimed(\r\n        address indexed owner,\r\n        uint256 totalXEN,\r\n        uint256 totalWallets,\r\n        uint256 weightedTerm,\r\n        uint256 weightedRank,\r\n        uint256 weightedMaturity,\r\n        uint256 totalXEL\r\n    );\r\n    event FeeReceiverChanged(address newReceiver);\r\n\r\n    address public feeReceiver;\r\n    address internal immutable implementation;\r\n    address public immutable XENCrypto;\r\n    uint256 public immutable deployTimestamp;\r\n    XELCrypto public immutable xelCrypto;\r\n\r\n    uint256 public totalWallets;\r\n    uint256 public activeWallets;\r\n    mapping(address => address[]) internal unmintedWallets;\r\n\r\n    uint32[250] internal cumulativeWeeklyRewardMultiplier;\r\n\r\n    uint256 internal constant SECONDS_IN_DAY = 3_600 * 24;\r\n    uint256 internal constant SECONDS_IN_WEEK = SECONDS_IN_DAY * 7;\r\n    uint256 internal constant MIN_TOKEN_MINT_TERM = 50;\r\n    uint256 internal constant MIN_REWARD_LIMIT = SECONDS_IN_DAY * 2;\r\n    uint256 internal constant MINT_FEE = 1_000; // 10%\r\n\r\n    constructor(\r\n        address xenCrypto,\r\n        address walletImplementation,\r\n        address feeAddress\r\n    ) {\r\n        require(\r\n            xenCrypto != address(0x0) &&\r\n                walletImplementation != address(0x0) &&\r\n                feeAddress != address(0x0),\r\n            \"Invalid addresses\"\r\n        );\r\n        XENCrypto = xenCrypto;\r\n        implementation = walletImplementation;\r\n        feeReceiver = feeAddress;\r\n        xelCrypto = new XELCrypto(address(this));\r\n        deployTimestamp = block.timestamp;\r\n\r\n        populateRates();\r\n    }\r\n\r\n    // PUBLIC CONVENIENCE GETTERS\r\n\r\n    /**\r\n     * @dev generate a unique salt based on message sender and id value\r\n     */\r\n    function getSalt(uint256 id) public view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(msg.sender, id));\r\n    }\r\n\r\n    /**\r\n     * @dev derive a deterministic address based on a salt value\r\n     */\r\n    function getDeterministicAddress(bytes32 salt)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return implementation.predictDeterministicAddress(salt);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates elapsed number of weeks after contract deployment\r\n     */\r\n    function getElapsedWeeks() public view returns (uint256) {\r\n        return (block.timestamp - deployTimestamp) / SECONDS_IN_WEEK;\r\n    }\r\n\r\n    /**\r\n     * @dev returns wallet count associated with wallet owner\r\n     */\r\n    function getWalletCount(address owner) public view returns (uint256) {\r\n        return unmintedWallets[owner].length;\r\n    }\r\n\r\n    /**\r\n     * @dev returns wallet addresses based on pagination approach\r\n     */\r\n    function getWallets(\r\n        address owner,\r\n        uint256 startId,\r\n        uint256 endId\r\n    ) external view returns (address[] memory) {\r\n        require(\r\n            endId < unmintedWallets[owner].length,\r\n            \"endId exceeds wallet count\"\r\n        );\r\n        uint256 size = endId - startId + 1;\r\n        address[] memory wallets = new address[](size);\r\n        for (uint256 id = startId; id <= endId; id++) {\r\n            wallets[id - startId] = unmintedWallets[owner][id];\r\n        }\r\n        return wallets;\r\n    }\r\n\r\n    /**\r\n     * @dev returns Mint objects for an array of addresses\r\n     */\r\n    function getUserInfos(address[] calldata owners)\r\n        external\r\n        view\r\n        returns (IXENCrypto.MintInfo[] memory infos)\r\n    {\r\n        infos = new IXENCrypto.MintInfo[](owners.length);\r\n        for (uint256 id = 0; id < owners.length; id++) {\r\n            infos[id] = XENWallet(owners[id]).getUserMint();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev returns cumulative weekly reward multiplier at a specific week index\r\n     */\r\n    function getCumulativeWeeklyRewardMultiplier(int256 index)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (index < 0) return 0;\r\n        if (index >= int256(cumulativeWeeklyRewardMultiplier.length)) {\r\n            // Return the last multiplier\r\n            return\r\n                cumulativeWeeklyRewardMultiplier[\r\n                    cumulativeWeeklyRewardMultiplier.length - 1\r\n                ];\r\n        }\r\n        return cumulativeWeeklyRewardMultiplier[uint256(index)];\r\n    }\r\n\r\n    /**\r\n     * @dev returns weekly reward multiplier\r\n     */\r\n    function getWeeklyRewardMultiplier(int256 index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            getCumulativeWeeklyRewardMultiplier(index) -\r\n            getCumulativeWeeklyRewardMultiplier(index - 1);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates reward multiplier\r\n     * @param finalWeek defines the the number of weeks that has elapsed\r\n     * @param termWeeks defines the term limit in weeks\r\n     */\r\n    function getRewardMultiplier(uint256 finalWeek, uint256 termWeeks)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            getCumulativeWeeklyRewardMultiplier(int256(finalWeek)) -\r\n            getCumulativeWeeklyRewardMultiplier(\r\n                int256(finalWeek) - int256(termWeeks) - 1\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev calculates adjusted mint amount based on reward multiplier\r\n     * @param originalAmount defines the original amount without adjustment\r\n     * @param termDays defines the term limit in days\r\n     */\r\n    function getAdjustedMintAmount(uint256 originalAmount, uint256 termDays)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        uint256 elapsedWeeks = getElapsedWeeks();\r\n        uint256 termWeeks = termDays / 7;\r\n        return\r\n            (originalAmount * getRewardMultiplier(elapsedWeeks, termWeeks)) /\r\n            1_000_000_000;\r\n    }\r\n\r\n    // STATE CHANGING FUNCTIONS\r\n\r\n    /**\r\n     * @dev create wallet using a specific index and term\r\n     */\r\n    function createWallet(uint256 id, uint256 term) internal {\r\n        bytes32 salt = getSalt(id);\r\n        XENWallet clone = XENWallet(implementation.cloneDeterministic(salt));\r\n\r\n        clone.initialize(XENCrypto, address(this));\r\n        clone.claimRank(term);\r\n\r\n        unmintedWallets[msg.sender].push(address(clone));\r\n    }\r\n\r\n    /**\r\n     * @dev batch create wallets with a specific term\r\n     * @param amount defines the number of wallets\r\n     * @param term defines the term limit in seconds\r\n     */\r\n    function batchCreateWallets(uint256 amount, uint256 term) external {\r\n        require(amount >= 1, \"More than one wallet\");\r\n        require(term >= MIN_TOKEN_MINT_TERM, \"Too short term\");\r\n\r\n        uint256 existing = unmintedWallets[msg.sender].length;\r\n        for (uint256 id = 0; id < amount; id++) {\r\n            createWallet(id + existing, term);\r\n        }\r\n\r\n        totalWallets += amount;\r\n        activeWallets += amount;\r\n\r\n        emit WalletsCreated(msg.sender, amount, term);\r\n    }\r\n\r\n    /**\r\n     * @dev claims rewards and sends them to the wallet owner\r\n     */\r\n    function batchClaimAndTransferMintReward(uint256 startId, uint256 endId)\r\n        external\r\n    {\r\n        require(endId >= startId, \"Forward ordering\");\r\n\r\n        uint256 claimedTotal = 0;\r\n        uint256 claimedWallets = 0;\r\n\r\n        uint256 weightedTerm = 0;\r\n        uint256 weightedRank = 0;\r\n        uint256 weightedMaturity = 0;\r\n\r\n        for (uint256 id = startId; id <= endId; id++) {\r\n            address proxy = unmintedWallets[msg.sender][id];\r\n            IXENCrypto.MintInfo memory info = XENWallet(proxy).getUserMint();\r\n            uint256 claimed = XENWallet(proxy).claimAndTransferMintReward(\r\n                msg.sender\r\n            );\r\n\r\n            claimedTotal += claimed;\r\n            claimedWallets += 1;\r\n\r\n            weightedTerm += (info.term * claimed);\r\n            weightedRank += (info.rank * claimed);\r\n            weightedMaturity += (info.maturityTs * claimed);\r\n\r\n            unmintedWallets[msg.sender][id] = address(0x0);\r\n        }\r\n\r\n        if (claimedTotal > 0) {\r\n            activeWallets -= claimedWallets;\r\n\r\n            weightedTerm = weightedTerm / claimedTotal;\r\n            weightedRank = weightedRank / claimedTotal;\r\n            weightedMaturity = weightedMaturity / claimedTotal;\r\n\r\n            uint256 toBeMinted = getAdjustedMintAmount(\r\n                claimedTotal,\r\n                weightedTerm\r\n            );\r\n            uint256 fee = (toBeMinted * MINT_FEE) / 10_000; // reduce minting fee\r\n            xelCrypto.mint(msg.sender, toBeMinted - fee);\r\n            xelCrypto.mint(feeReceiver, fee);\r\n\r\n            emit TokensClaimed(\r\n                msg.sender,\r\n                claimedTotal,\r\n                claimedWallets,\r\n                weightedTerm,\r\n                weightedRank,\r\n                weightedMaturity,\r\n                toBeMinted - fee\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev change fee receiver address\r\n     */\r\n    function changeFeeReceiver(address newReceiver) external onlyOwner {\r\n        require(newReceiver != address(0x0), \"Invalid address\");\r\n        feeReceiver = newReceiver;\r\n\r\n        emit FeeReceiverChanged(newReceiver);\r\n    }\r\n\r\n    function populateRates() internal virtual {\r\n        /*\r\n        Precalculated values for the formula:\r\n        // integrate 0.10000026975 * 0.95^x from 0 to index\r\n        // Calculate 5% weekly decline and compound rewards\r\n        let current = precisionMultiplier * 0.10000026975;\r\n        let cumulative = current;\r\n        for (let i = 0; i < elapsedWeeks; i++) {\r\n            current = (current * 95) / 100;\r\n            cumulative += current;\r\n        }\r\n        return cumulative;\r\n        */\r\n        cumulativeWeeklyRewardMultiplier[0] = 100000269;\r\n        cumulativeWeeklyRewardMultiplier[1] = 195000526;\r\n        cumulativeWeeklyRewardMultiplier[2] = 285250769;\r\n        cumulativeWeeklyRewardMultiplier[3] = 370988500;\r\n        cumulativeWeeklyRewardMultiplier[4] = 452439345;\r\n        cumulativeWeeklyRewardMultiplier[5] = 529817647;\r\n        cumulativeWeeklyRewardMultiplier[6] = 603327035;\r\n        cumulativeWeeklyRewardMultiplier[7] = 673160953;\r\n        cumulativeWeeklyRewardMultiplier[8] = 739503175;\r\n        cumulativeWeeklyRewardMultiplier[9] = 802528286;\r\n        cumulativeWeeklyRewardMultiplier[10] = 862402141;\r\n        cumulativeWeeklyRewardMultiplier[11] = 919282304;\r\n        cumulativeWeeklyRewardMultiplier[12] = 973318458;\r\n        cumulativeWeeklyRewardMultiplier[13] = 1024652805;\r\n        cumulativeWeeklyRewardMultiplier[14] = 1073420435;\r\n        cumulativeWeeklyRewardMultiplier[15] = 1119749683;\r\n        cumulativeWeeklyRewardMultiplier[16] = 1163762468;\r\n        cumulativeWeeklyRewardMultiplier[17] = 1205574615;\r\n        cumulativeWeeklyRewardMultiplier[18] = 1245296154;\r\n        cumulativeWeeklyRewardMultiplier[19] = 1283031616;\r\n        cumulativeWeeklyRewardMultiplier[20] = 1318880305;\r\n        cumulativeWeeklyRewardMultiplier[21] = 1352936559;\r\n        cumulativeWeeklyRewardMultiplier[22] = 1385290001;\r\n        cumulativeWeeklyRewardMultiplier[23] = 1416025771;\r\n        cumulativeWeeklyRewardMultiplier[24] = 1445224752;\r\n        cumulativeWeeklyRewardMultiplier[25] = 1472963784;\r\n        cumulativeWeeklyRewardMultiplier[26] = 1499315864;\r\n        cumulativeWeeklyRewardMultiplier[27] = 1524350341;\r\n        cumulativeWeeklyRewardMultiplier[28] = 1548133094;\r\n        cumulativeWeeklyRewardMultiplier[29] = 1570726709;\r\n        cumulativeWeeklyRewardMultiplier[30] = 1592190643;\r\n        cumulativeWeeklyRewardMultiplier[31] = 1612581381;\r\n        cumulativeWeeklyRewardMultiplier[32] = 1631952581;\r\n        cumulativeWeeklyRewardMultiplier[33] = 1650355222;\r\n        cumulativeWeeklyRewardMultiplier[34] = 1667837731;\r\n        cumulativeWeeklyRewardMultiplier[35] = 1684446114;\r\n        cumulativeWeeklyRewardMultiplier[36] = 1700224078;\r\n        cumulativeWeeklyRewardMultiplier[37] = 1715213144;\r\n        cumulativeWeeklyRewardMultiplier[38] = 1729452756;\r\n        cumulativeWeeklyRewardMultiplier[39] = 1742980388;\r\n        cumulativeWeeklyRewardMultiplier[40] = 1755831638;\r\n        cumulativeWeeklyRewardMultiplier[41] = 1768040326;\r\n        cumulativeWeeklyRewardMultiplier[42] = 1779638580;\r\n        cumulativeWeeklyRewardMultiplier[43] = 1790656920;\r\n        cumulativeWeeklyRewardMultiplier[44] = 1801124344;\r\n        cumulativeWeeklyRewardMultiplier[45] = 1811068397;\r\n        cumulativeWeeklyRewardMultiplier[46] = 1820515246;\r\n        cumulativeWeeklyRewardMultiplier[47] = 1829489754;\r\n        cumulativeWeeklyRewardMultiplier[48] = 1838015536;\r\n        cumulativeWeeklyRewardMultiplier[49] = 1846115029;\r\n        cumulativeWeeklyRewardMultiplier[50] = 1853809547;\r\n        cumulativeWeeklyRewardMultiplier[51] = 1861119339;\r\n        cumulativeWeeklyRewardMultiplier[52] = 1868063642;\r\n        cumulativeWeeklyRewardMultiplier[53] = 1874660730;\r\n        cumulativeWeeklyRewardMultiplier[54] = 1880927963;\r\n        cumulativeWeeklyRewardMultiplier[55] = 1886881835;\r\n        cumulativeWeeklyRewardMultiplier[56] = 1892538013;\r\n        cumulativeWeeklyRewardMultiplier[57] = 1897911382;\r\n        cumulativeWeeklyRewardMultiplier[58] = 1903016082;\r\n        cumulativeWeeklyRewardMultiplier[59] = 1907865548;\r\n        cumulativeWeeklyRewardMultiplier[60] = 1912472540;\r\n        cumulativeWeeklyRewardMultiplier[61] = 1916849183;\r\n        cumulativeWeeklyRewardMultiplier[62] = 1921006994;\r\n        cumulativeWeeklyRewardMultiplier[63] = 1924956914;\r\n        cumulativeWeeklyRewardMultiplier[64] = 1928709338;\r\n        cumulativeWeeklyRewardMultiplier[65] = 1932274141;\r\n        cumulativeWeeklyRewardMultiplier[66] = 1935660703;\r\n        cumulativeWeeklyRewardMultiplier[67] = 1938877938;\r\n        cumulativeWeeklyRewardMultiplier[68] = 1941934311;\r\n        cumulativeWeeklyRewardMultiplier[69] = 1944837865;\r\n        cumulativeWeeklyRewardMultiplier[70] = 1947596241;\r\n        cumulativeWeeklyRewardMultiplier[71] = 1950216699;\r\n        cumulativeWeeklyRewardMultiplier[72] = 1952706134;\r\n        cumulativeWeeklyRewardMultiplier[73] = 1955071097;\r\n        cumulativeWeeklyRewardMultiplier[74] = 1957317812;\r\n        cumulativeWeeklyRewardMultiplier[75] = 1959452191;\r\n        cumulativeWeeklyRewardMultiplier[76] = 1961479851;\r\n        cumulativeWeeklyRewardMultiplier[77] = 1963406128;\r\n        cumulativeWeeklyRewardMultiplier[78] = 1965236091;\r\n        cumulativeWeeklyRewardMultiplier[79] = 1966974557;\r\n        cumulativeWeeklyRewardMultiplier[80] = 1968626099;\r\n        cumulativeWeeklyRewardMultiplier[81] = 1970195063;\r\n        cumulativeWeeklyRewardMultiplier[82] = 1971685580;\r\n        cumulativeWeeklyRewardMultiplier[83] = 1973101571;\r\n        cumulativeWeeklyRewardMultiplier[84] = 1974446762;\r\n        cumulativeWeeklyRewardMultiplier[85] = 1975724693;\r\n        cumulativeWeeklyRewardMultiplier[86] = 1976938728;\r\n        cumulativeWeeklyRewardMultiplier[87] = 1978092062;\r\n        cumulativeWeeklyRewardMultiplier[88] = 1979187728;\r\n        cumulativeWeeklyRewardMultiplier[89] = 1980228612;\r\n        cumulativeWeeklyRewardMultiplier[90] = 1981217451;\r\n        cumulativeWeeklyRewardMultiplier[91] = 1982156848;\r\n        cumulativeWeeklyRewardMultiplier[92] = 1983049275;\r\n        cumulativeWeeklyRewardMultiplier[93] = 1983897081;\r\n        cumulativeWeeklyRewardMultiplier[94] = 1984702497;\r\n        cumulativeWeeklyRewardMultiplier[95] = 1985467642;\r\n        cumulativeWeeklyRewardMultiplier[96] = 1986194529;\r\n        cumulativeWeeklyRewardMultiplier[97] = 1986885073;\r\n        cumulativeWeeklyRewardMultiplier[98] = 1987541089;\r\n        cumulativeWeeklyRewardMultiplier[99] = 1988164304;\r\n        cumulativeWeeklyRewardMultiplier[100] = 1988756359;\r\n        cumulativeWeeklyRewardMultiplier[101] = 1989318810;\r\n        cumulativeWeeklyRewardMultiplier[102] = 1989853140;\r\n        cumulativeWeeklyRewardMultiplier[103] = 1990360752;\r\n        cumulativeWeeklyRewardMultiplier[104] = 1990842984;\r\n        cumulativeWeeklyRewardMultiplier[105] = 1991301105;\r\n        cumulativeWeeklyRewardMultiplier[106] = 1991736319;\r\n        cumulativeWeeklyRewardMultiplier[107] = 1992149773;\r\n        cumulativeWeeklyRewardMultiplier[108] = 1992542554;\r\n        cumulativeWeeklyRewardMultiplier[109] = 1992915696;\r\n        cumulativeWeeklyRewardMultiplier[110] = 1993270181;\r\n        cumulativeWeeklyRewardMultiplier[111] = 1993606942;\r\n        cumulativeWeeklyRewardMultiplier[112] = 1993926864;\r\n        cumulativeWeeklyRewardMultiplier[113] = 1994230791;\r\n        cumulativeWeeklyRewardMultiplier[114] = 1994519521;\r\n        cumulativeWeeklyRewardMultiplier[115] = 1994793815;\r\n        cumulativeWeeklyRewardMultiplier[116] = 1995054394;\r\n        cumulativeWeeklyRewardMultiplier[117] = 1995301944;\r\n        cumulativeWeeklyRewardMultiplier[118] = 1995537116;\r\n        cumulativeWeeklyRewardMultiplier[119] = 1995760530;\r\n        cumulativeWeeklyRewardMultiplier[120] = 1995972774;\r\n        cumulativeWeeklyRewardMultiplier[121] = 1996174405;\r\n        cumulativeWeeklyRewardMultiplier[122] = 1996365954;\r\n        cumulativeWeeklyRewardMultiplier[123] = 1996547926;\r\n        cumulativeWeeklyRewardMultiplier[124] = 1996720799;\r\n        cumulativeWeeklyRewardMultiplier[125] = 1996885029;\r\n        cumulativeWeeklyRewardMultiplier[126] = 1997041048;\r\n        cumulativeWeeklyRewardMultiplier[127] = 1997189265;\r\n        cumulativeWeeklyRewardMultiplier[128] = 1997330071;\r\n        cumulativeWeeklyRewardMultiplier[129] = 1997463837;\r\n        cumulativeWeeklyRewardMultiplier[130] = 1997590915;\r\n        cumulativeWeeklyRewardMultiplier[131] = 1997711639;\r\n        cumulativeWeeklyRewardMultiplier[132] = 1997826327;\r\n        cumulativeWeeklyRewardMultiplier[133] = 1997935280;\r\n        cumulativeWeeklyRewardMultiplier[134] = 1998038786;\r\n        cumulativeWeeklyRewardMultiplier[135] = 1998137117;\r\n        cumulativeWeeklyRewardMultiplier[136] = 1998230530;\r\n        cumulativeWeeklyRewardMultiplier[137] = 1998319274;\r\n        cumulativeWeeklyRewardMultiplier[138] = 1998403580;\r\n        cumulativeWeeklyRewardMultiplier[139] = 1998483670;\r\n        cumulativeWeeklyRewardMultiplier[140] = 1998559757;\r\n        cumulativeWeeklyRewardMultiplier[141] = 1998632039;\r\n        cumulativeWeeklyRewardMultiplier[142] = 1998700706;\r\n        cumulativeWeeklyRewardMultiplier[143] = 1998765941;\r\n        cumulativeWeeklyRewardMultiplier[144] = 1998827913;\r\n        cumulativeWeeklyRewardMultiplier[145] = 1998886787;\r\n        cumulativeWeeklyRewardMultiplier[146] = 1998942718;\r\n        cumulativeWeeklyRewardMultiplier[147] = 1998995852;\r\n        cumulativeWeeklyRewardMultiplier[148] = 1999046329;\r\n        cumulativeWeeklyRewardMultiplier[149] = 1999094282;\r\n        cumulativeWeeklyRewardMultiplier[150] = 1999139838;\r\n        cumulativeWeeklyRewardMultiplier[151] = 1999183116;\r\n        cumulativeWeeklyRewardMultiplier[152] = 1999224230;\r\n        cumulativeWeeklyRewardMultiplier[153] = 1999263288;\r\n        cumulativeWeeklyRewardMultiplier[154] = 1999300393;\r\n        cumulativeWeeklyRewardMultiplier[155] = 1999335643;\r\n        cumulativeWeeklyRewardMultiplier[156] = 1999369131;\r\n        cumulativeWeeklyRewardMultiplier[157] = 1999400944;\r\n        cumulativeWeeklyRewardMultiplier[158] = 1999431166;\r\n        cumulativeWeeklyRewardMultiplier[159] = 1999459878;\r\n        cumulativeWeeklyRewardMultiplier[160] = 1999487154;\r\n        cumulativeWeeklyRewardMultiplier[161] = 1999513066;\r\n        cumulativeWeeklyRewardMultiplier[162] = 1999537682;\r\n        cumulativeWeeklyRewardMultiplier[163] = 1999561068;\r\n        cumulativeWeeklyRewardMultiplier[164] = 1999583284;\r\n        cumulativeWeeklyRewardMultiplier[165] = 1999604390;\r\n        cumulativeWeeklyRewardMultiplier[166] = 1999624440;\r\n        cumulativeWeeklyRewardMultiplier[167] = 1999643488;\r\n        cumulativeWeeklyRewardMultiplier[168] = 1999661583;\r\n        cumulativeWeeklyRewardMultiplier[169] = 1999678774;\r\n        cumulativeWeeklyRewardMultiplier[170] = 1999695105;\r\n        cumulativeWeeklyRewardMultiplier[171] = 1999710619;\r\n        cumulativeWeeklyRewardMultiplier[172] = 1999725358;\r\n        cumulativeWeeklyRewardMultiplier[173] = 1999739360;\r\n        cumulativeWeeklyRewardMultiplier[174] = 1999752661;\r\n        cumulativeWeeklyRewardMultiplier[175] = 1999765298;\r\n        cumulativeWeeklyRewardMultiplier[176] = 1999777303;\r\n        cumulativeWeeklyRewardMultiplier[177] = 1999788707;\r\n        cumulativeWeeklyRewardMultiplier[178] = 1999799542;\r\n        cumulativeWeeklyRewardMultiplier[179] = 1999809834;\r\n        cumulativeWeeklyRewardMultiplier[180] = 1999819612;\r\n        cumulativeWeeklyRewardMultiplier[181] = 1999828902;\r\n        cumulativeWeeklyRewardMultiplier[182] = 1999837726;\r\n        cumulativeWeeklyRewardMultiplier[183] = 1999846110;\r\n        cumulativeWeeklyRewardMultiplier[184] = 1999854074;\r\n        cumulativeWeeklyRewardMultiplier[185] = 1999861640;\r\n        cumulativeWeeklyRewardMultiplier[186] = 1999868828;\r\n        cumulativeWeeklyRewardMultiplier[187] = 1999875656;\r\n        cumulativeWeeklyRewardMultiplier[188] = 1999882143;\r\n        cumulativeWeeklyRewardMultiplier[189] = 1999888305;\r\n        cumulativeWeeklyRewardMultiplier[190] = 1999894160;\r\n        cumulativeWeeklyRewardMultiplier[191] = 1999899722;\r\n        cumulativeWeeklyRewardMultiplier[192] = 1999905005;\r\n        cumulativeWeeklyRewardMultiplier[193] = 1999910025;\r\n        cumulativeWeeklyRewardMultiplier[194] = 1999914793;\r\n        cumulativeWeeklyRewardMultiplier[195] = 1999919323;\r\n        cumulativeWeeklyRewardMultiplier[196] = 1999923627;\r\n        cumulativeWeeklyRewardMultiplier[197] = 1999927715;\r\n        cumulativeWeeklyRewardMultiplier[198] = 1999931599;\r\n        cumulativeWeeklyRewardMultiplier[199] = 1999935289;\r\n        cumulativeWeeklyRewardMultiplier[200] = 1999938794;\r\n        cumulativeWeeklyRewardMultiplier[201] = 1999942124;\r\n        cumulativeWeeklyRewardMultiplier[202] = 1999945288;\r\n        cumulativeWeeklyRewardMultiplier[203] = 1999948293;\r\n        cumulativeWeeklyRewardMultiplier[204] = 1999951148;\r\n        cumulativeWeeklyRewardMultiplier[205] = 1999953860;\r\n        cumulativeWeeklyRewardMultiplier[206] = 1999956437;\r\n        cumulativeWeeklyRewardMultiplier[207] = 1999958885;\r\n        cumulativeWeeklyRewardMultiplier[208] = 1999961211;\r\n        cumulativeWeeklyRewardMultiplier[209] = 1999963420;\r\n        cumulativeWeeklyRewardMultiplier[210] = 1999965518;\r\n        cumulativeWeeklyRewardMultiplier[211] = 1999967512;\r\n        cumulativeWeeklyRewardMultiplier[212] = 1999969406;\r\n        cumulativeWeeklyRewardMultiplier[213] = 1999971206;\r\n        cumulativeWeeklyRewardMultiplier[214] = 1999972915;\r\n        cumulativeWeeklyRewardMultiplier[215] = 1999974539;\r\n        cumulativeWeeklyRewardMultiplier[216] = 1999976082;\r\n        cumulativeWeeklyRewardMultiplier[217] = 1999977548;\r\n        cumulativeWeeklyRewardMultiplier[218] = 1999978940;\r\n        cumulativeWeeklyRewardMultiplier[219] = 1999980263;\r\n        cumulativeWeeklyRewardMultiplier[220] = 1999981519;\r\n        cumulativeWeeklyRewardMultiplier[221] = 1999982713;\r\n        cumulativeWeeklyRewardMultiplier[222] = 1999983847;\r\n        cumulativeWeeklyRewardMultiplier[223] = 1999984924;\r\n        cumulativeWeeklyRewardMultiplier[224] = 1999985948;\r\n        cumulativeWeeklyRewardMultiplier[225] = 1999986920;\r\n        cumulativeWeeklyRewardMultiplier[226] = 1999987844;\r\n        cumulativeWeeklyRewardMultiplier[227] = 1999988722;\r\n        cumulativeWeeklyRewardMultiplier[228] = 1999989555;\r\n        cumulativeWeeklyRewardMultiplier[229] = 1999990347;\r\n        cumulativeWeeklyRewardMultiplier[230] = 1999991100;\r\n        cumulativeWeeklyRewardMultiplier[231] = 1999991814;\r\n        cumulativeWeeklyRewardMultiplier[232] = 1999992493;\r\n        cumulativeWeeklyRewardMultiplier[233] = 1999993138;\r\n        cumulativeWeeklyRewardMultiplier[234] = 1999993751;\r\n        cumulativeWeeklyRewardMultiplier[235] = 1999994333;\r\n        cumulativeWeeklyRewardMultiplier[236] = 1999994886;\r\n        cumulativeWeeklyRewardMultiplier[237] = 1999995412;\r\n        cumulativeWeeklyRewardMultiplier[238] = 1999995911;\r\n        cumulativeWeeklyRewardMultiplier[239] = 1999996385;\r\n        cumulativeWeeklyRewardMultiplier[240] = 1999996836;\r\n        cumulativeWeeklyRewardMultiplier[241] = 1999997264;\r\n        cumulativeWeeklyRewardMultiplier[242] = 1999997670;\r\n        cumulativeWeeklyRewardMultiplier[243] = 1999998056;\r\n        cumulativeWeeklyRewardMultiplier[244] = 1999998423;\r\n        cumulativeWeeklyRewardMultiplier[245] = 1999998772;\r\n        cumulativeWeeklyRewardMultiplier[246] = 1999999103;\r\n        cumulativeWeeklyRewardMultiplier[247] = 1999999417;\r\n        cumulativeWeeklyRewardMultiplier[248] = 1999999716;\r\n        cumulativeWeeklyRewardMultiplier[249] = 2000000000;\r\n    }\r\n}\r\n"
    },
    "contracts/XENWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./interfaces/IXENCrypto.sol\";\r\n\r\ncontract XENWallet is Initializable {\r\n    IXENCrypto public XENCrypto;\r\n    address public manager;\r\n\r\n    function initialize(address xenAddress, address managerAddress)\r\n        public\r\n        initializer\r\n    {\r\n        XENCrypto = IXENCrypto(xenAddress);\r\n        manager = managerAddress;\r\n    }\r\n\r\n    function getUserMint() external view returns (IXENCrypto.MintInfo memory) {\r\n        return XENCrypto.getUserMint();\r\n    }\r\n\r\n    // Claim ranks\r\n    function claimRank(uint256 _term) public {\r\n        require(msg.sender == manager, \"No access\");\r\n\r\n        XENCrypto.claimRank(_term);\r\n    }\r\n\r\n    // Claim mint reward\r\n    function claimAndTransferMintReward(address target)\r\n        external\r\n        returns (uint256 reward)\r\n    {\r\n        require(msg.sender == manager, \"No access\");\r\n\r\n        uint256 balanceBefore = XENCrypto.balanceOf(target);\r\n        XENCrypto.claimMintRewardAndShare(target, 100);\r\n        reward = XENCrypto.balanceOf(target) - balanceBefore;\r\n    }\r\n}\r\n"
    },
    "contracts/XELCrypto.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract XELCrypto is ERC20 {\r\n    address public minter;\r\n\r\n    constructor(address _minter) ERC20(\"XEL Crypto\", \"XEL\") {\r\n        minter = _minter;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        require(msg.sender == minter, \"No access\");\r\n        _mint(account, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IXENCrypto.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nabstract contract IXENCrypto is IERC20 {\r\n    struct MintInfo {\r\n        address user;\r\n        uint256 term;\r\n        uint256 maturityTs;\r\n        uint256 rank;\r\n        uint256 amplifier;\r\n        uint256 eaaRate;\r\n    }\r\n\r\n    mapping(address => MintInfo) public userMints;\r\n\r\n    function claimRank(uint256 term) external virtual;\r\n\r\n    function claimMintReward() external virtual;\r\n\r\n    function claimMintRewardAndShare(address other, uint256 pct)\r\n        external\r\n        virtual;\r\n\r\n    function getUserMint() external view virtual returns (MintInfo memory);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}