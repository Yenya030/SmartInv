{{
  "language": "Solidity",
  "sources": {
    "contracts/KithFriendsMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\n/*\n                              ..............               ascii art by community member\n                        ..::....          ....::..                           rqueue#4071\n                    ..::..                        ::..\n                  ::..                              ..--..\n          ███████████████████████████████::..............::::..\n          ██  ███  █  █        █  ███  ██                    ..::..\n          ██  ██  ██  ████  ████  ███  ██                        ::::\n          ██     ███  ████  ████       ██                          ..::\n          ██  ██  ██  ████  ████  ███  ██                            ....\n        ..██  ███  █  ████  ████  ███  ██                              ::\n        ::███████████████████████████████                                ::\n        ....    ::                                ....::::::::::..        ::\n        --::......                    ..::==--::::....          ..::..    ....\n      ::::  ..                  ..--..  ==@@++                      ::      ..\n      ::                    ..------      ++..                        ..    ..\n    ::                  ..::--------::  ::..    ::------..            ::::==++--..\n  ....                ::----------------    ..**%%##****##==        --######++**##==\n  ..              ::----------------..    ..####++..    --**++    ::####++::    --##==\n....          ..----------------..        **##**          --##--::**##++..        --##::\n..        ..--------------++==----------**####--          ..**++..::##++----::::::::****\n..    ::==------------++##############%%######..            ++**    **++++++------==**##\n::  ::------------++**::..............::**####..            ++**..::##..          ..++##\n::....::--------++##..                  ::####::          ::****++####..          ..**++\n..::  ::--==--==%%--                      **##++        ..--##++::####==          --##--\n  ::..::----  ::==                        --####--..    ::**##..  ==%%##::      ::****\n  ::      ::                                **####++--==####::      **%%##==--==####::\n    ::    ..::..                    ....::::..--########++..          ==**######++..\n      ::      ..::::::::::::::::::....      ..::::....                    ....\n        ::::..                      ....::....\n            ..::::::::::::::::::::....\n\n*/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ninterface IKithFriends {\n  function mint(uint256 id, uint256 amount, address destination) external;\n}\n\ncontract KithFriendsMinter is Ownable {\n  using Strings for uint256;\n\n  uint256 public constant KithFriend_1 = 10;\n  uint256 public constant KithFriend_2 = 11;\n  uint256 public constant KithFriend_3 = 12;\n\n  uint256 public price;\n\n  bool public saleActive = false;\n\n  bytes32 public merkleRoot;\n  mapping(address => uint256) private _alreadyMinted;\n\n  IKithFriends public collection;\n\n  constructor(address collectionAddress, uint256 initialPrice) {\n    collection = IKithFriends(collectionAddress);\n    price = initialPrice;\n  }\n\n  function setSaleActive(bool active) public onlyOwner {\n    saleActive = active;\n  }\n\n  function setMerkleRoot(bytes32 merkleRoot_) public onlyOwner {\n    merkleRoot = merkleRoot_;\n  }\n\n  function alreadyMinted(address account) public view returns (uint256) {\n    return _alreadyMinted[account];\n  }\n\n  function mintEditions(\n    uint256[] calldata tokenIDs,\n    uint256[] calldata amounts,\n    bytes32[] calldata merkleProof,\n    uint256 maxAmount\n  ) public payable {\n    require(saleActive, \"Sale is closed\");\n    require(tokenIDs.length == amounts.length, \"Unequal count of tokens/amounts\");\n\n    uint256 totalAmount = sum(amounts);\n    require(msg.value == price * totalAmount, \"Incorrect payable amount\");\n\n    address sender = _msgSender();\n\n    require(totalAmount <= maxAmount - _alreadyMinted[sender], \"Insufficient mints left\");\n    require(_verify(merkleProof, sender, maxAmount), \"Invalid proof\");\n\n    uint256 tokenID;\n    uint256 tokenAmount;\n    for (uint256 i = 0; i < tokenIDs.length; i++) {\n      tokenID = tokenIDs[i];\n      tokenAmount = amounts[i];\n\n      require(knownTokenID(tokenID), \"Unknown token\");\n\n      _alreadyMinted[sender] += tokenAmount;\n      collection.mint(tokenID, tokenAmount, sender);\n    }\n  }\n\n  function withdraw(address payable recipient) public virtual onlyOwner {\n    payable(recipient).transfer(address(this).balance);\n  }\n\n  // Private\n\n  function knownTokenID(uint256 tokenID) private pure returns (bool) {\n    return tokenID == KithFriend_1 || tokenID == KithFriend_2 || tokenID == KithFriend_3;\n  }\n\n  function sum(uint256[] calldata amounts) private pure returns (uint256 result) {\n    for (uint256 i = 0; i < amounts.length; i++) {\n      result += amounts[i];\n    }\n\n    return result;\n  }\n\n  function _verify(\n    bytes32[] calldata merkleProof,\n    address sender,\n    uint256 maxAmount\n  ) private view returns (bool) {\n    bytes32 leaf = keccak256(abi.encodePacked(sender, maxAmount.toString()));\n    return MerkleProof.verify(merkleProof, merkleRoot, leaf);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}