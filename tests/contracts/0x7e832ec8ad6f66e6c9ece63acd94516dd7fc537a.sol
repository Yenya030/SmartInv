{{
  "language": "Solidity",
  "sources": {
    "contracts/BendExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n// OpenZeppelin contracts\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {SignatureChecker} from \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// Bend interfaces\nimport {IAuthorizationManager} from \"./interfaces/IAuthorizationManager.sol\";\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {IBendExchange} from \"./interfaces/IBendExchange.sol\";\nimport {ITransferManager} from \"./interfaces/ITransferManager.sol\";\nimport {IInterceptorManager} from \"./interfaces/IInterceptorManager.sol\";\n\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {IAuthenticatedProxy} from \"./interfaces/IAuthenticatedProxy.sol\";\n\n// Bend libraries\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {SafeProxy} from \"./libraries/SafeProxy.sol\";\n\n/**\n * @title BendExchange\n * @notice It is the core contract of the Bend exchange.\n */\ncontract BendExchange is IBendExchange, ReentrancyGuard, Ownable {\n    using SafeProxy for IAuthenticatedProxy;\n    using SafeERC20 for IERC20;\n\n    using OrderTypes for OrderTypes.MakerOrder;\n    using OrderTypes for OrderTypes.TakerOrder;\n\n    string public constant NAME = \"BendExchange\";\n    string public constant VERSION = \"1\";\n\n    bytes32 public immutable DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    address public immutable WETH;\n\n    address public protocolFeeRecipient;\n\n    IAuthorizationManager public authorizationManager;\n    ICurrencyManager public currencyManager;\n    IExecutionManager public executionManager;\n    IRoyaltyFeeManager public royaltyFeeManager;\n    ITransferManager public transferManager;\n    IInterceptorManager public interceptorManager;\n\n    mapping(address => uint256) public userMinOrderNonce;\n    mapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\n\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\n    event NewCurrencyManager(address indexed currencyManager);\n    event NewExecutionManager(address indexed executionManager);\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\n    event NewTransferManager(address indexed transferManager);\n    event NewAuthorizationManager(address indexed authorizationManager);\n    event NewInterceptorManager(address indexed interceptorManager);\n\n    event ProtocolFeePayment(\n        address indexed collection,\n        uint256 indexed tokenId,\n        address indexed protocolFeeRecipient,\n        address currency,\n        uint256 amount\n    );\n\n    event RoyaltyPayment(\n        address indexed collection,\n        uint256 indexed tokenId,\n        address indexed royaltyRecipient,\n        address currency,\n        uint256 amount\n    );\n\n    event TakerAsk(\n        bytes32 makerOrderHash, // bid hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker ask order\n        address indexed maker, // maker address of the initial bid order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    event TakerBid(\n        bytes32 makerOrderHash, // ask hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker bid order\n        address indexed maker, // maker address of the initial ask order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    /**\n     * @notice Constructor\n     * @param _interceptorManager interceptor manager address\n     * @param _transferManager transfer manager address\n     * @param _currencyManager currency manager address\n     * @param _executionManager execution manager address\n     * @param _royaltyFeeManager royalty fee manager address\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\n     * @param _protocolFeeRecipient protocol fee recipient\n     */\n    constructor(\n        address _interceptorManager,\n        address _transferManager,\n        address _currencyManager,\n        address _executionManager,\n        address _royaltyFeeManager,\n        address _WETH,\n        address _protocolFeeRecipient\n    ) {\n        // Calculate the domain separator\n\n        // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n        _TYPE_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n        // keccak256(\"BendExchange\")\n        _HASHED_NAME = 0xba0c660933e3f2279319fe2b72a6f829a2438d726bbe835523453fc0414c6020;\n        // keccak256(bytes(\"1\"))\n        _HASHED_VERSION = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\n\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_THIS = address(this);\n\n        DOMAIN_SEPARATOR = _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n\n        transferManager = ITransferManager(_transferManager);\n        currencyManager = ICurrencyManager(_currencyManager);\n        executionManager = IExecutionManager(_executionManager);\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        interceptorManager = IInterceptorManager(_interceptorManager);\n        WETH = _WETH;\n        protocolFeeRecipient = _protocolFeeRecipient;\n    }\n\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @notice Cancel all pending orders for a sender\n     * @param minNonce minimum user nonce\n     */\n    function cancelAllOrdersForSender(uint256 minNonce) external {\n        require(minNonce > userMinOrderNonce[msg.sender], \"Cancel: order nonce lower than current\");\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \"Cancel: can not cancel more orders\");\n        userMinOrderNonce[msg.sender] = minNonce;\n\n        emit CancelAllOrders(msg.sender, minNonce);\n    }\n\n    /**\n     * @notice Cancel maker orders\n     * @param orderNonces array of order nonces\n     */\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\n        require(orderNonces.length > 0, \"Cancel: can not be empty\");\n\n        for (uint256 i = 0; i < orderNonces.length; i++) {\n            require(orderNonces[i] >= userMinOrderNonce[msg.sender], \"Cancel: order nonce lower than current\");\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\n        }\n\n        emit CancelMultipleOrders(msg.sender, orderNonces);\n    }\n\n    /**\n     * @notice Match ask with a taker bid order using ETH\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBidUsingETHAndWETH(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable override nonReentrant {\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: wrong sides\");\n        require(makerAsk.currency == WETH || makerAsk.currency == address(0), \"Order: currency must be WETH or ETH\");\n        require(msg.sender == takerBid.taker, \"Order: taker must be the sender\");\n        require(takerBid.price >= msg.value, \"Order: Msg.value too high\");\n        if (msg.value > 0) {\n            // Wrap ETH sent to this contract\n            IWETH(WETH).deposit{value: msg.value}();\n\n            // Sent WETH back to sender\n            IERC20(WETH).safeTransfer(msg.sender, msg.value);\n        }\n\n        require(takerBid.price <= IWETH(WETH).balanceOf(msg.sender), \"Order: price too high and insufficient WETH\");\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrders(makerAsk, askHash, takerBid);\n\n        // Retrieve execution parameters\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\n            .canExecuteTakerBid(takerBid, makerAsk);\n\n        require(isExecutionValid, \"Strategy: execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.maker][makerAsk.nonce] = true;\n\n        _transferFeesAndFunds(\n            makerAsk.strategy,\n            makerAsk.collection,\n            tokenId,\n            makerAsk.currency,\n            msg.sender,\n            makerAsk.maker,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        _transferNonFungibleToken(\n            makerAsk.interceptor,\n            makerAsk.interceptorExtra,\n            makerAsk.collection,\n            makerAsk.maker,\n            takerBid.taker,\n            tokenId,\n            amount\n        );\n\n        _withdrawFunds(makerAsk.currency, makerAsk.maker);\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.maker,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Match a takerBid with a makerAsk\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        override\n        nonReentrant\n    {\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: wrong sides\");\n        require(msg.sender == takerBid.taker, \"Order: taker must be the sender\");\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrders(makerAsk, askHash, takerBid);\n\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\n            .canExecuteTakerBid(takerBid, makerAsk);\n\n        require(isExecutionValid, \"Strategy: execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.maker][makerAsk.nonce] = true;\n\n        _transferFeesAndFunds(\n            makerAsk.strategy,\n            makerAsk.collection,\n            tokenId,\n            makerAsk.currency,\n            msg.sender,\n            makerAsk.maker,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        _transferNonFungibleToken(\n            makerAsk.interceptor,\n            makerAsk.interceptorExtra,\n            makerAsk.collection,\n            makerAsk.maker,\n            takerBid.taker,\n            tokenId,\n            amount\n        );\n\n        _withdrawFunds(makerAsk.currency, makerAsk.maker);\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.maker,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Match a takerAsk with a makerBid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     */\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        override\n        nonReentrant\n    {\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \"Order: wrong sides\");\n        require(msg.sender == takerAsk.taker, \"Order: taker must be the sender\");\n\n        // Check the maker bid order\n        bytes32 bidHash = makerBid.hash();\n        _validateOrders(makerBid, bidHash, takerAsk);\n\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerBid.strategy)\n            .canExecuteTakerAsk(takerAsk, makerBid);\n        require(isExecutionValid, \"Strategy: execution invalid\");\n\n        // Update maker bid order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerBid.maker][makerBid.nonce] = true;\n\n        _transferFeesAndFunds(\n            makerBid.strategy,\n            makerBid.collection,\n            tokenId,\n            makerBid.currency,\n            makerBid.maker,\n            takerAsk.taker,\n            takerAsk.price,\n            takerAsk.minPercentageToAsk\n        );\n\n        _transferNonFungibleToken(\n            takerAsk.interceptor,\n            takerAsk.interceptorExtra,\n            makerBid.collection,\n            msg.sender,\n            makerBid.maker,\n            tokenId,\n            amount\n        );\n\n        _withdrawFunds(makerBid.currency, takerAsk.taker);\n\n        emit TakerAsk(\n            bidHash,\n            makerBid.nonce,\n            takerAsk.taker,\n            makerBid.maker,\n            makerBid.strategy,\n            makerBid.currency,\n            makerBid.collection,\n            tokenId,\n            amount,\n            takerAsk.price\n        );\n    }\n\n    /**\n     * @notice Update currency manager\n     * @param _currencyManager new currency manager address\n     */\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\n        require(_currencyManager != address(0), \"Owner: can not be null address\");\n        currencyManager = ICurrencyManager(_currencyManager);\n        emit NewCurrencyManager(_currencyManager);\n    }\n\n    /**\n     * @notice Update execution manager\n     * @param _executionManager new execution manager address\n     */\n    function updateExecutionManager(address _executionManager) external onlyOwner {\n        require(_executionManager != address(0), \"Owner: can not be null address\");\n        executionManager = IExecutionManager(_executionManager);\n        emit NewExecutionManager(_executionManager);\n    }\n\n    /**\n     * @notice Update protocol fee and recipient\n     * @param _protocolFeeRecipient new recipient for protocol fees\n     */\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @notice Update royalty fee manager\n     * @param _royaltyFeeManager new fee manager address\n     */\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\n        require(_royaltyFeeManager != address(0), \"Owner: can not be null address\");\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\n    }\n\n    function updateTransferManager(address _transferManager) external onlyOwner {\n        require(_transferManager != address(0), \"Owner: can not be null address\");\n        transferManager = ITransferManager(_transferManager);\n        emit NewTransferManager(_transferManager);\n    }\n\n    function updateAuthorizationManager(address _authorizationManager) external onlyOwner {\n        require(_authorizationManager != address(0), \"Owner: can not be null address\");\n        authorizationManager = IAuthorizationManager(_authorizationManager);\n        emit NewAuthorizationManager(_authorizationManager);\n    }\n\n    function updateInterceptorManager(address _interceptorManager) external onlyOwner {\n        require(_interceptorManager != address(0), \"Owner: can not be null address\");\n        interceptorManager = IInterceptorManager(_interceptorManager);\n        emit NewInterceptorManager(_interceptorManager);\n    }\n\n    /**\n     * @notice Check whether user order nonce is executed or cancelled\n     * @param user address of user\n     * @param orderNonce nonce of the order\n     */\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\n    }\n\n    function _withdrawFunds(address currency, address recipient) internal {\n        IAuthenticatedProxy proxy = IAuthenticatedProxy(authorizationManager.proxies(recipient));\n        if (_isNativeETH(currency)) {\n            proxy.withdrawETH();\n        } else {\n            proxy.withdrawToken(currency);\n        }\n    }\n\n    function _isNativeETH(address currency) internal pure returns (bool) {\n        return currency == address(0);\n    }\n\n    /**\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\n     * @param strategy address of the execution strategy\n     * @param collection non fungible token address for the transfer\n     * @param tokenId tokenId\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\n     * @param from sender of the funds\n     * @param to seller's recipient\n     * @param amount amount being transferred (in currency)\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\n     */\n    function _transferFeesAndFunds(\n        address strategy,\n        address collection,\n        uint256 tokenId,\n        address currency,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 minPercentageToAsk\n    ) internal {\n        IAuthenticatedProxy fromProxy = IAuthenticatedProxy(authorizationManager.proxies(from));\n        IAuthenticatedProxy toProxy = IAuthenticatedProxy(authorizationManager.proxies(to));\n        require(address(fromProxy) != address(0), \"Authorization: no delegate proxy\");\n        require(address(toProxy) != address(0), \"Authorization: no delegate proxy\");\n\n        // Initialize the final amount that is transferred to seller\n        uint256 finalSellerAmount = amount;\n\n        if (_isNativeETH(currency)) {\n            currency = WETH;\n        }\n\n        // 1. Protocol fee\n        {\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\n\n            // Check if the protocol fee is different than 0 for this strategy\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\n                fromProxy.safeTransfer(currency, protocolFeeRecipient, protocolFeeAmount);\n                finalSellerAmount -= protocolFeeAmount;\n                emit ProtocolFeePayment(collection, tokenId, protocolFeeRecipient, currency, protocolFeeAmount);\n            }\n        }\n\n        // 2. Royalty fee\n        {\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\n\n            // Check if there is a royalty fee and that it is different to 0\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\n                fromProxy.safeTransfer(currency, royaltyFeeRecipient, royaltyFeeAmount);\n                finalSellerAmount -= royaltyFeeAmount;\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\n            }\n        }\n\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"Fees: higher than expected\");\n\n        // 3. Transfer final amount (post-fees) to seller proxy\n        {\n            fromProxy.safeTransfer(currency, address(toProxy), finalSellerAmount);\n        }\n    }\n\n    /**\n     * @notice Transfer NFT\n     * @param collection address of the token collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\n     * @dev For ERC721, amount is not used\n     */\n    function _transferNonFungibleToken(\n        address interceptor,\n        bytes memory InterceptorExtra,\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        IAuthenticatedProxy proxy = IAuthenticatedProxy(authorizationManager.proxies(from));\n        require(address(proxy) != address(0), \"Authorization: no delegate proxy\");\n\n        // Retrieve the transfer manager address\n        address transfer = transferManager.checkTransferForToken(collection);\n\n        // If no transfer found, it returns address(0)\n        require(transfer != address(0), \"Transfer: no NFT transfer available\");\n\n        proxy.safeTransferNonFungibleTokenFrom(\n            transfer,\n            interceptor,\n            collection,\n            from,\n            to,\n            tokenId,\n            amount,\n            InterceptorExtra\n        );\n    }\n\n    /**\n     * @notice Calculate protocol fee for an execution strategy\n     * @param executionStrategy strategy\n     * @param amount amount to transfer\n     */\n    function _calculateProtocolFee(address executionStrategy, uint256 amount) internal view returns (uint256) {\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\n        return (protocolFee * amount) / 10000;\n    }\n\n    /**\n     * @notice Verify the validity of the maker order\n     * @param makerOrder maker order\n     * @param makerOrderHash computed hash for the order\n     */\n    function _validateOrders(\n        OrderTypes.MakerOrder calldata makerOrder,\n        bytes32 makerOrderHash,\n        OrderTypes.TakerOrder calldata takerOrder\n    ) internal view {\n        // Verify whether order nonce has expired\n        require(\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.maker][makerOrder.nonce]) &&\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.maker]),\n            \"Order: matching order expired\"\n        );\n\n        // Verify the maker is not address(0)\n        require(makerOrder.maker != address(0), \"Order: invalid maker\");\n\n        // Verify the amount is not 0\n        require(makerOrder.amount > 0, \"Order: amount cannot be 0\");\n\n        // Verify the validity of the signature\n        require(\n            SignatureChecker.isValidSignatureNow(\n                makerOrder.maker,\n                ECDSA.toTypedDataHash(_domainSeparatorV4(), makerOrderHash),\n                abi.encodePacked(makerOrder.r, makerOrder.s, makerOrder.v)\n            ),\n            \"Signature: invalid\"\n        );\n\n        // Verify whether the currency is whitelisted, address(0) means native ETH\n        require(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \"Currency: not whitelisted\");\n\n        // Verify whether strategy can be executed\n        require(executionManager.isStrategyWhitelisted(makerOrder.strategy), \"Strategy: not whitelisted\");\n\n        if (makerOrder.interceptor != address(0)) {\n            require(\n                interceptorManager.isInterceptorWhitelisted(makerOrder.interceptor),\n                \"Interceptor: maker interceptor not whitelisted\"\n            );\n        }\n        if (takerOrder.interceptor != address(0)) {\n            require(\n                interceptorManager.isInterceptorWhitelisted(takerOrder.interceptor),\n                \"Interceptor: taker interceptor not whitelisted\"\n            );\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/IAuthorizationManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {IAuthenticatedProxy} from \"./IAuthenticatedProxy.sol\";\n\ninterface IAuthorizationManager {\n    function revoked() external returns (bool);\n\n    function authorizedAddress() external returns (address);\n\n    function proxies(address owner) external returns (address);\n\n    function revoke() external;\n\n    function registerProxy() external returns (address);\n}\n"
    },
    "contracts/interfaces/ICurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICurrencyManager {\n    function addCurrency(address currency) external;\n\n    function removeCurrency(address currency) external;\n\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\n\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\n\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IExecutionManager {\n    function addStrategy(address strategy) external;\n\n    function removeStrategy(address strategy) external;\n\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\n\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\n\n    function viewCountWhitelistedStrategies() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IExecutionStrategy {\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function viewProtocolFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IRoyaltyFeeManager {\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/IBendExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IBendExchange {\n    function matchAskWithTakerBidUsingETHAndWETH(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable;\n\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external;\n\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external;\n}\n"
    },
    "contracts/interfaces/ITransferManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ITransferManager {\n    function transfers(address collection) external view returns (address);\n\n    function addCollectionTransfer(address collection, address transfer) external;\n\n    function removeCollectionTransfer(address collection) external;\n\n    function checkTransferForToken(address collection) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IInterceptorManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IInterceptorManager {\n    function addCollectionInterceptor(address Interceptor) external;\n\n    function removeCollectionInterceptor(address Interceptor) external;\n\n    function isInterceptorWhitelisted(address Interceptor) external view returns (bool);\n\n    function viewWhitelistedInterceptors(uint256 cursor, uint256 size)\n        external\n        view\n        returns (address[] memory, uint256);\n\n    function viewCountWhitelistedInterceptors() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity 0.8.9;\n\ninterface IWETH {\n    function balanceOf(address) external view returns (uint256);\n\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/IAuthenticatedProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IAuthenticatedProxy {\n    function initialize(\n        address _owner,\n        address _authorizationManager,\n        address _WETH\n    ) external;\n\n    function setRevoke(bool revoke) external;\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 amount\n    ) external;\n\n    function withdrawETH() external;\n\n    function withdrawToken(address token) external;\n\n    function delegatecall(address dest, bytes memory data) external returns (bool, bytes memory);\n}\n"
    },
    "contracts/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/**\n * @title OrderTypes\n * @notice This library contains order types for the Bend exchange.\n */\nlibrary OrderTypes {\n    // keccak256(\"MakerOrder(bool isOrderAsk,address maker,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params,address interceptor,bytes interceptorExtra)\")\n    bytes32 internal constant MAKER_ORDER_HASH = 0xfd561ac528d7d2fc669c32105ec4867617451ed5ca6ccde2e4ed234a0a41010a;\n\n    struct MakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address maker; // maker of the maker order\n        address collection; // collection address\n        uint256 price; // price (used as )\n        uint256 tokenId; // id of the token\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        address strategy; // strategy for trade execution (e.g. StandardSaleForFixedPrice)\n        address currency;\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        uint256 startTime; // startTime in timestamp\n        uint256 endTime; // endTime in timestamp\n        uint256 minPercentageToAsk; // slippage protection\n        bytes params; // additional parameters\n        address interceptor;\n        bytes interceptorExtra;\n        uint8 v; // v: parameter (27 or 28)\n        bytes32 r; // r: parameter\n        bytes32 s; // s: parameter\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address taker; // msg.sender\n        uint256 price; // final price for the purchase\n        uint256 tokenId; // id of the token\n        uint256 minPercentageToAsk; // // slippage protection\n        bytes params; // other params (e.g., tokenId)\n        address interceptor;\n        bytes interceptorExtra;\n    }\n\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\n        return\n            keccak256(\n                bytes.concat(\n                    abi.encode(\n                        MAKER_ORDER_HASH,\n                        makerOrder.isOrderAsk,\n                        makerOrder.maker,\n                        makerOrder.collection,\n                        makerOrder.price,\n                        makerOrder.tokenId,\n                        makerOrder.amount,\n                        makerOrder.strategy,\n                        makerOrder.currency,\n                        makerOrder.nonce,\n                        makerOrder.startTime,\n                        makerOrder.endTime,\n                        makerOrder.minPercentageToAsk\n                    ),\n                    abi.encode(\n                        keccak256(makerOrder.params),\n                        makerOrder.interceptor,\n                        keccak256(makerOrder.interceptorExtra)\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/libraries/SafeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ITransfer} from \"../interfaces/ITransfer.sol\";\nimport {IInterceptor} from \"../interfaces/IInterceptor.sol\";\nimport {IAuthenticatedProxy} from \"../interfaces/IAuthenticatedProxy.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\nlibrary SafeProxy {\n    function safeTransferNonFungibleTokenFrom(\n        IAuthenticatedProxy proxy,\n        address transfer,\n        address interceptor,\n        address token,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory extra\n    ) internal {\n        if (interceptor != address(0)) {\n            safeDelegateCall(\n                proxy,\n                interceptor,\n                abi.encodeWithSelector(\n                    IInterceptor(interceptor).beforeCollectionTransfer.selector,\n                    token,\n                    from,\n                    to,\n                    tokenId,\n                    amount,\n                    extra\n                ),\n                \"SafeProxy: before transfer did not succeed\"\n            );\n        }\n        safeDelegateCall(\n            proxy,\n            transfer,\n            abi.encodeWithSelector(\n                ITransfer(transfer).transferNonFungibleToken.selector,\n                token,\n                from,\n                to,\n                tokenId,\n                amount\n            ),\n            \"SafeProxy: transfer did not succeed\"\n        );\n    }\n\n    function safeDelegateCall(\n        IAuthenticatedProxy proxy,\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal {\n        bytes memory returndata = delegateCall(proxy, target, data, \"SafeProxy: low-level delegate call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), errorMessage);\n        }\n    }\n\n    function delegateCall(\n        IAuthenticatedProxy proxy,\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = proxy.delegatecall(target, data);\n        return Address.verifyCallResult(success, returndata, errorMessage);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/ITransfer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ITransfer {\n    function transferNonFungibleToken(\n        address token,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IInterceptor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IInterceptor {\n    function beforeCollectionTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount,\n        bytes memory extra\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 888888
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}