{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"./StakingManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Efforce farming pool for WOZX token\n/// @author Ackee Blockchain\n/// @notice Contract holds information about users deposit amounts and deposit times\ncontract Pool {\n    using SafeERC20 for IERC20;\n\n    struct Deposit {\n        uint256 amount;\n        uint256 depositTime;\n    }\n\n    StakingManager public manager;\n    uint8 public immutable id;\n    mapping(address => Deposit[]) public deposits;\n\n    modifier onlyManager() {\n        require(msg.sender == address(manager), \"Unauthorized\");\n        _;\n    }\n\n    /// @param _id ID of the pool (0 = whole campaign, 1 = 1 month, 2 = 3 months, 3 = 6 months)\n    /// @param _manager Staking manager contract address\n    constructor(uint8 _id, address _manager) {\n        require(_id < 4, \"Invalid pool ID\");\n        require(\n            StakingManager(_manager).CONTRACT_TYPE() == keccak256(\"Efforce Staking Manager\"),\n            \"Not a Efforce Staking Manager\"\n        );\n        id = _id;\n        manager = StakingManager(_manager);\n    }\n\n    function getTimePeriod() public view returns (uint256) {\n        if (id == 1) {\n            return 2_592_000;\n        } else if (id == 2) {\n            return 7_776_000;\n        } else if (id == 3) {\n            return 15_552_000;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice Deposits WOZX tokens and save deposit amount and deposit time\n    /// @param account Users's address\n    /// @param amount Amount to deposit\n    function deposit(address account, uint256 amount) external onlyManager {\n        require(\n            block.timestamp < manager.getCampaignEnd(),\n            \"Campaign ended, can't deposit\"\n        );\n        uint256 timePeriod = getTimePeriod();\n        if (deposits[account].length == 0) {\n            // User joining the pool\n            require(\n                block.timestamp + manager.BUFFER_PERIOD() + timePeriod < manager.getCampaignEnd(),\n                \"Too late to join this pool\"\n            );\n            deposits[account].push(\n                Deposit(amount, block.timestamp + manager.BUFFER_PERIOD())\n            );\n        } else if (block.timestamp < deposits[account][0].depositTime) {\n            // User is in buffering period\n            deposits[account].push(\n                Deposit(amount, deposits[account][0].depositTime)\n            );\n        } else {\n            // User is staking\n            if (timePeriod != 0) {\n                require(\n                    block.timestamp < getStartTime(account) + timePeriod,\n                    \"Can't deposit after the pool period\"\n                );\n            }\n            deposits[account].push(Deposit(amount, block.timestamp));\n        }\n    }\n\n    /// @notice Withdraws deposited tokens from this pool and delete deposit records\n    /// @param account User's address\n    /// @return totalWithdraw sum of the user's all deposit amounts\n    function withdraw(address account) external onlyManager returns (uint256 totalWithdraw) {\n        totalWithdraw = balanceOf(account);\n        delete deposits[account];\n        manager.wozxToken().safeTransfer(account, totalWithdraw);\n        return totalWithdraw;\n    }\n\n    /// @notice Returns array of the deposits containing deposit amount and deposit time\n    /// @param account User's address\n    /// @return Array [] of Deposit structures\n    function getDeposits(address account) external view returns (Deposit[] memory) {\n        return deposits[account];\n    }\n\n    /// @notice Returns sum of the user's all deposit amounts\n    /// @param account User's address\n    /// @return sum of the user's deposits\n    function balanceOf(address account) public view returns (uint256 sum) {\n        for (uint256 i = 0; i < deposits[account].length; i++) {\n            sum += deposits[account][i].amount;\n        }\n        return sum;\n    }\n\n    /// @notice Returns time of user's first deposit\n    /// @param account User's address\n    /// @return Timestamp (uint256)\n    function getStartTime(address account) public view returns (uint256) {\n        require(deposits[account].length > 0, \"Unknown address\");\n        return deposits[account][0].depositTime;\n    }\n\n    /// @notice Returns end time of user's staking period\n    /// @param account User's address\n    /// @return Timestamp (uint256)\n    function getEndTime(address account) public view returns (uint256) {\n        require(deposits[account].length > 0, \"Unknown address\");\n        return\n            id == 0\n                ? manager.getCampaignEnd()\n                : (getStartTime(account) + getTimePeriod());\n    }\n\n    /// @notice Returns elapsed time of the staking period. If still in buffering period, returns negative number (remaining buffering time)\n    /// @param account User's address\n    /// @return elapsed time of the staking period or negative number if is in buffering period\n    function getElapsedTime(address account) public view returns (int256) {\n        require(deposits[account].length > 0, \"Unknown address\");\n        return int256(block.timestamp) - int256(getStartTime(account));\n    }\n\n    /// @notice Returns true when user is in buffering period\n    /// @param account User's address\n    /// @return Buffering period bool\n    function isInBufferingPeriod(address account) external view returns (bool) {\n        return getElapsedTime(account) < 0;\n    }\n\n    /// @notice Returns true when user's staking period is over\n    /// @param account User's address\n    /// @return Staking finished bool\n    function isStakingFinished(address account) external view returns (bool) {\n        return block.timestamp > getEndTime(account);\n    }\n}\n"
    },
    "contracts/StakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Pool.sol\";\n\n/// @title Efforce staking manager is the contract for managing the farming pools\n/// @author Ackee Blockchain\n/// @notice Staking manager contracts handles 4 staking pools with different staking periods\ncontract StakingManager is Ownable {\n    using SafeERC20 for IERC20;\n\n    struct PoolInfo {\n        address payable addr;\n        uint256 totalRewards;\n        uint256 rewardPerMinute;\n        uint256 claimedRewards;\n        mapping(address => uint256) lastRewardsClaim;\n    }\n\n    bytes32 public constant CONTRACT_TYPE = keccak256(\"Efforce Staking Manager\");\n    uint256 public constant CAMPAIGN_PERIOD = 365 days;\n    uint256 public constant BUFFER_PERIOD = 3 days;\n    IERC20 public immutable wozxToken; // 0x34950ff2b487d9e5282c5ab342d08a2f712eb79f;\n    PoolInfo[4] public pools;\n    uint256 public campaignStart;\n\n    event PoolBalanceChanged(uint8 indexed poolId, uint256 totalPoolAmount);\n    event UserBalanceChanged(address indexed account, uint8 indexed poolId, uint256 totalUserDeposits);\n\n    modifier isInitialized() {\n        require(campaignStart != 0, \"Not initialized\");\n        _;\n    }\n\n    constructor(IERC20 _wozxToken) {\n        require(address(_wozxToken) != address(0), \"Unexpected zero address\");\n        wozxToken = _wozxToken;\n    }\n\n    /// @dev Set pools addresses and start the whole campaign\n    /// @param poolGlobal address of whole campaign pool\n    /// @param pool1Month address of 1 month pool\n    /// @param pool3Months address of 3 months pool\n    /// @param pool6Months address of 6 months pool\n    function init(\n        address payable poolGlobal,\n        address payable pool1Month,\n        address payable pool3Months,\n        address payable pool6Months\n    ) external onlyOwner {\n        require(campaignStart == 0, \"Pools are already initialized\");\n        require(Pool(poolGlobal).id() == 0, \"Pool 0 id mismatch\");\n        require(Pool(pool1Month).id() == 1, \"Pool 1 id mismatch\");\n        require(Pool(pool3Months).id() == 2, \"Pool 2 id mismatch\");\n        require(Pool(pool6Months).id() == 3, \"Pool 3 id mismatch\");\n        require(\n            address(Pool(poolGlobal).manager()) == address(this),\n            \"Pool 0 manager mismatch\"\n        );\n        require(\n            address(Pool(pool1Month).manager()) == address(this),\n            \"Pool 1 manager mismatch\"\n        );\n        require(\n            address(Pool(pool3Months).manager()) == address(this),\n            \"Pool 2 manager mismatch\"\n        );\n        require(\n            address(Pool(pool6Months).manager()) == address(this),\n            \"Pool 3 manager mismatch\"\n        );\n        require(\n            wozxToken.balanceOf(address(this)) >= 13_140_000e18,\n            \"Rewards not ready\"\n        );\n\n        pools[0].addr = poolGlobal;\n        pools[0].totalRewards = 5_256_000;\n        pools[0].rewardPerMinute = 10e18;\n\n        pools[1].addr = pool1Month;\n        pools[1].totalRewards = 108_000;\n        pools[1].rewardPerMinute = 25e17;\n\n        pools[2].addr = pool3Months;\n        pools[2].totalRewards = 648_000;\n        pools[2].rewardPerMinute = 5e18;\n\n        pools[3].addr = pool6Months;\n        pools[3].totalRewards = 1_944_000;\n        pools[3].rewardPerMinute = 75e17;\n\n        campaignStart = block.timestamp;\n    }\n\n    /// @notice Deposits WOZX tokens to the given pool. Min deposit is 100 WOZX, max deposit is 200 000 WOZX\n    /// @param poolId Id of the pool\n    /// @param amount Amount to deposit\n    function deposit(uint8 poolId, uint256 amount) external isInitialized {\n        Pool p = Pool(pools[poolId].addr);\n        require(amount >= 100e18, \"Minimum deposit = 100 WOZX\");\n        require(\n            p.balanceOf(msg.sender) + amount <= 200_000e18,\n            \"Maximum deposit = 200 000 WOZX\"\n        );\n        \n        p.deposit(msg.sender, amount);\n        wozxToken.safeTransferFrom(msg.sender, pools[poolId].addr, amount);\n\n        emit PoolBalanceChanged(poolId, wozxToken.balanceOf(pools[poolId].addr));\n        emit UserBalanceChanged(msg.sender, poolId, p.balanceOf(msg.sender));\n    }\n\n    /// @notice Withdraws deposited tokens from the given pool + rewards\n    /// @param poolId Id of the pool\n    function withdraw(uint8 poolId) external isInitialized {\n        Pool p = Pool(pools[poolId].addr);\n        require(\n            block.timestamp < p.getStartTime(msg.sender) ||\n                block.timestamp > p.getEndTime(msg.sender),\n            \"Can't withdraw during the staking\"\n        );\n        \n        claimReward(poolId);\n        p.withdraw(msg.sender);\n\n        emit PoolBalanceChanged(poolId, wozxToken.balanceOf(pools[poolId].addr));\n        emit UserBalanceChanged(msg.sender, poolId, p.balanceOf(msg.sender));\n    }\n\n    /// @notice Withdraws earned rewards from the pool\n    /// @param poolId Id of the pool\n    function claimReward(uint8 poolId) public isInitialized {\n        Pool p = Pool(pools[poolId].addr);\n        Pool.Deposit[] memory deposits = p.getDeposits(msg.sender);\n        require(deposits.length > 0, \"You have no deposits\");\n        \n        uint256 reward = getReward(poolId);\n        pools[poolId].lastRewardsClaim[msg.sender] = Math.min(\n            block.timestamp,\n            p.getEndTime(msg.sender)\n        );\n        if (reward > 0) {\n            pools[poolId].claimedRewards += reward;\n            wozxToken.safeTransfer(msg.sender, reward);\n        }\n\n        emit UserBalanceChanged(msg.sender, poolId, p.balanceOf(msg.sender));\n    }\n\n    /// @notice Returns how much rewards have been already claimed from the pool\n    /// @param poolId Id of the pool\n    /// @return uint256\n    function getClaimedRewards(uint8 poolId) external view returns (uint256) {\n        return pools[poolId].claimedRewards;\n    }\n\n    /// @notice Returns how much time has passed from campaign start (in minutes)\n    /// @return uint256\n    function getCampaignElapsedMinutes() public view returns (uint256) {\n        return Math.min((block.timestamp - campaignStart), CAMPAIGN_PERIOD) / 60;\n    }\n\n    /// @notice Returns campaign end\n    /// @return Timestamp (uint256)\n    function getCampaignEnd() public view returns (uint256) {\n        return campaignStart + CAMPAIGN_PERIOD;\n    }\n\n    /// @notice Returns available rewards in the pool\n    /// @param poolId Id of the pool\n    /// @return uint256\n    function getAvailableRewards(uint8 poolId) public view returns (uint256) {\n        return\n            (getCampaignElapsedMinutes() * pools[poolId].rewardPerMinute) -\n            pools[poolId].claimedRewards;\n    }\n\n    /// @notice Returns reward calculated by formula for the given pool and the message sender based on the deposits time\n    /// @param poolId Id of the pool\n    /// @return uint256\n    function getReward(uint8 poolId) public view returns (uint256) {\n        Pool p = Pool(pools[poolId].addr);\n        Pool.Deposit[] memory deposits = p.getDeposits(msg.sender);\n        if (deposits.length == 0 || block.timestamp <= deposits[0].depositTime) {\n            return 0;\n        }\n        uint256 stakingEnd = Math.min(\n            p.getEndTime(msg.sender),\n            block.timestamp\n        );\n        uint256 totalDeposits = wozxToken.balanceOf(pools[poolId].addr);\n        uint256 availableRewardPerMinute = getAvailableRewards(poolId) /\n            ((p.id() == 0 ? CAMPAIGN_PERIOD : p.getTimePeriod()) / 60);\n\n        uint256 reward;\n        for (uint256 i = 0; i < deposits.length; i++) {\n            uint256 depositElapsedMinutes = (stakingEnd -\n                Math.max(\n                    deposits[i].depositTime,\n                    pools[poolId].lastRewardsClaim[msg.sender]\n                )) / 60;\n            reward +=\n                (availableRewardPerMinute *\n                    depositElapsedMinutes *\n                    deposits[i].amount) /\n                totalDeposits;\n        }\n        return reward;\n    }\n\n    /// @notice Witdraws remaining rewards, afer 1 year reward claiming period after the campaign end\n    /// @param account Address of recipient\n    function withdrawRemainingRewards(address account) external isInitialized onlyOwner {\n        require(\n            getCampaignEnd() + 365 days < block.timestamp,\n            \"Remaining rewards can be withdrawn a year after the campaign end\"\n        );\n        wozxToken.safeTransfer(account, wozxToken.balanceOf(address(this)));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}