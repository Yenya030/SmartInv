{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interface/IChildStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IChildStorage {\r\n    function addChildAddress_EPEzCt7SLk (address _user, address _newChild) external;\r\n    function child (address, uint256) external view returns (address);\r\n    function childCount (address) external view returns (uint256);\r\n    function controller (address) external view returns (bool);\r\n    function delegateRegistry () external view returns (address);\r\n    function kudasai () external view returns (address);\r\n    function operator () external view returns (address);\r\n    function ownedNFTId (address) external view returns (uint256);\r\n    function owner () external view returns (address);\r\n    function renounceOwnership () external;\r\n    function setController (address _contract, bool _set) external;\r\n    function setDelegateRegistry (address _contract) external;\r\n    function setKudasai (address _contract) external;\r\n    function setNFTId (address _user, uint256 _nftId) external;\r\n    function setOperator (address _contract) external;\r\n    function setSpaceId (string calldata _str) external;\r\n    function spaceId () external view returns (bytes32);\r\n    function transferOwnership (address newOwner) external;\r\n}"
    },
    "contracts/interface/IMinterChild.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IMinterChild {\r\n    function initialize_puB (address _deployer) external;\r\n    function run_Ozzfvp4CEc (address _callContract, bytes calldata _callData, uint256 _value) external;\r\n    function withdrawERC1155_wcC (address _contract, uint256 _tokenId, address _to) external;\r\n    function withdrawERC20_ATR (address _contract, address _to) external;\r\n    function withdrawERC721_VKo (address _contract, uint256 _tokenId, address _to) external;\r\n    function withdrawETH_RBf (address _to) external;\r\n}"
    },
    "contracts/interface/IMultiWalletCallerOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IMultiWalletCallerOperator {\r\n    function checkHolder (address _from) external view;\r\n    function checkId (uint256 _startId, uint256 _endId, address _from) external view;\r\n    function createWallets (uint256 _quantity, address _from) external;\r\n    function sendERC20 (uint256 _startId, uint256 _endId, address _token, uint256 _amount, address _from) external;\r\n    function sendETH (uint256 _startId, uint256 _endId, address _from) external payable;\r\n    function setNFTId (uint256 _nftId, address _from) external;\r\n    function withdrawERC1155 (uint256 _startId, uint256 _endId, address _contract, uint256 _tokenId, address _from) external;\r\n    function withdrawERC20 (uint256 _startId, uint256 _endId, address _contract, address _from) external;\r\n    function withdrawERC721 (uint256 _startId, uint256 _endId, address _contract, uint256[] calldata _tokenIds, address _from) external;\r\n    function withdrawETH (uint256 _startId, uint256 _endId, address _from) external;\r\n}\r\n"
    },
    "contracts/MultiWalletCallerV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interface/IMultiWalletCallerOperator.sol\";\r\nimport \"./interface/IMinterChild.sol\";\r\nimport \"./interface/IChildStorage.sol\";\r\n\r\ncontract MultiWalletCallerV2 is Ownable {\r\n    IChildStorage private immutable _ChildStorage;\r\n\r\n    constructor(address childStorage_) {\r\n        _ChildStorage = IChildStorage(childStorage_);\r\n    }\r\n    receive() external payable {}\r\n\r\n    modifier onlyHolder() {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).checkHolder(msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier checkId(uint256 _startId, uint256 _endId) {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).checkId(_startId, _endId, msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the NFT ID for the caller\r\n     * @param _nftId uint256 ID of the NFT to be set\r\n     */\r\n    function setNFTId(uint256 _nftId) external {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).setNFTId(_nftId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev create multiple wallets for a user\r\n     * @param _quantity number of wallets to be created\r\n     */\r\n    function createWallets(uint256 _quantity) external onlyHolder {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).createWallets(_quantity, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev send ETH to multiple wallets\r\n     * @param _startId start index of wallet to send ETH to\r\n     * @param _endId end index of wallet to send ETH to\r\n     */\r\n    function sendETH(uint256 _startId, uint256 _endId)\r\n        external\r\n        payable\r\n        onlyHolder\r\n        checkId(_startId, _endId)\r\n    {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).sendETH{value: msg.value}(_startId, _endId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev send ERC20 tokens to multiple wallets\r\n     * @param _startId start index of wallet to send tokens to\r\n     * @param _endId end index of wallet to send tokens to\r\n     * @param _token address of the token contract\r\n     * @param _amount amount of tokens to be sent\r\n     */\r\n    function sendERC20(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyHolder checkId(_startId, _endId) {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).sendERC20(_startId, _endId, _token, _amount, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Runs a function of a specified contract for multiple child wallets\r\n     * @param _startId The start id of the wallet\r\n     * @param _endId The end id of the wallet\r\n     * @param _callContract The address of the contract to run the function\r\n     * @param _callData The data of the function to run\r\n     * @param _value The amount of ETH to send to the function\r\n     */\r\n    function run(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _callContract,\r\n        bytes calldata _callData,\r\n        uint256 _value\r\n    ) external onlyHolder checkId(_startId, _endId) {\r\n        for (uint256 i = _startId; i <= _endId; ) {\r\n            IMinterChild(\r\n                payable(_ChildStorage.child(msg.sender, i))\r\n            ).run_Ozzfvp4CEc(_callContract, _callData, _value);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Runs a function of a specified contract for multiple child wallets, given the function signature\r\n     * @param _startId The start id of the wallet\r\n     * @param _endId The end id of the wallet\r\n     * @param _callContract The address of the contract to run the function\r\n     * @param _signature The signature of the function to run\r\n     * @param _value The amount of ETH to send to the function\r\n     */\r\n    function runWithSelector(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _callContract,\r\n        string calldata _signature,\r\n        uint256 _value\r\n    ) external onlyHolder checkId(_startId, _endId) {\r\n        bytes memory callData = abi.encodeWithSignature(_signature);\r\n        for (uint256 i = _startId; i <= _endId; ) {\r\n            IMinterChild(\r\n                payable(_ChildStorage.child(msg.sender, i))\r\n            ).run_Ozzfvp4CEc(_callContract, callData, _value);\r\n            unchecked {\r\n                i++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ETH from multiple child wallets to the caller\r\n     * @param _startId The start id of the wallet\r\n     * @param _endId The end id of the wallet\r\n     */\r\n    function withdrawETH(uint256 _startId, uint256 _endId)\r\n        external\r\n        checkId(_startId, _endId)\r\n    {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).withdrawETH(_startId, _endId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ERC20 tokens from multiple child wallets to the caller\r\n     * @param _startId The start id of the wallet\r\n     * @param _endId The end id of the wallet\r\n     * @param _contract The address of the ERC20 contract\r\n     */\r\n    function withdrawERC20(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _contract\r\n    ) external checkId(_startId, _endId) {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).withdrawERC20(_startId, _endId, _contract, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ERC721 tokens from child wallets with specified token ids.\r\n     * @param _startId The start index of the child wallet.\r\n     * @param _endId The end index of the child wallet.\r\n     * @param _contract The contract address of the ERC721 token.\r\n     * @param _tokenIds The ids of the tokens to be withdrawn.\r\n     */\r\n    function withdrawERC721(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _contract,\r\n        uint256[] calldata _tokenIds\r\n    ) external checkId(_startId, _endId) {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).withdrawERC721(_startId, _endId, _contract, _tokenIds, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw ERC1155 tokens from child wallets with specified token id.\r\n     * @param _startId The start index of the child wallet.\r\n     * @param _endId The end index of the child wallet.\r\n     * @param _contract The contract address of the ERC1155 token.\r\n     * @param _tokenId The id of the token to be withdrawn.\r\n     */\r\n    function withdrawERC1155(\r\n        uint256 _startId,\r\n        uint256 _endId,\r\n        address _contract,\r\n        uint256 _tokenId\r\n    ) external checkId(_startId, _endId) {\r\n        IMultiWalletCallerOperator(_ChildStorage.operator()).withdrawERC1155(_startId, _endId, _contract, _tokenId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Only Owner\r\n     * @dev Recover the Ethereum balance to the owner's wallet.\r\n     */\r\n    function recoverETH() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Only Owner\r\n     * @dev Recover the ERC20 token balance to the owner's wallet.\r\n     * @param _contract The contract address of the ERC20 token.\r\n     */\r\n    function recoverERC20(address _contract) external onlyOwner {\r\n        IERC20(_contract).transfer(\r\n            msg.sender,\r\n            IERC20(_contract).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Only Owner\r\n     * @dev Recover the ERC721 token to the owner's wallet.\r\n     * @param _contract The contract address of the ERC721 token.\r\n     * @param _tokenId The id of the token to be recovered.\r\n     */\r\n    function recoverERC721(address _contract, uint256 _tokenId)\r\n        external\r\n        onlyOwner\r\n    {\r\n        IERC721(_contract).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Only Owner\r\n     * @dev Recover the ERC1155 token to the owner's wallet.\r\n     * @param _contract Address of the ERC1155 contract\r\n     * @param _tokenId ID of the token to be recovered\r\n     * @param _amount Amount of the token to be recovered\r\n     * @param _data Additional data for the transfer\r\n     */\r\n    function recoverERC1155(\r\n        address _contract,\r\n        uint256 _tokenId,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) external onlyOwner {\r\n        IERC1155(_contract).safeTransferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            _tokenId,\r\n            _amount,\r\n            _data\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}