{{
  "language": "Solidity",
  "sources": {
    "contracts/unibot_migration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns(address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns(bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns(address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns(uint256);\n\n/**\n * @dev Returns the amount of tokens owned by `account`.\n */\nfunction balanceOf(address account) external view returns(uint256);\n\n/**\n * @dev Moves `amount` tokens from the caller's account to `recipient`.\n *\n * Returns a boolean value indicating whether the operation succeeded.\n *\n * Emits a {Transfer} event.\n */\nfunction transfer(address recipient, uint256 amount) external returns(bool);\n\n/**\n * @dev Returns the remaining number of tokens that `spender` will be\n * allowed to spend on behalf of `owner` through {transferFrom}. This is\n * zero by default.\n *\n * This value changes when {approve} or {transferFrom} are called.\n */\nfunction allowance(address owner, address spender) external view returns(uint256);\n\n/**\n * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n *\n * Returns a boolean value indicating whether the operation succeeded.\n *\n * IMPORTANT: Beware that changing an allowance with this method brings the risk\n * that someone may use both the old and the new allowance by unfortunate\n * transaction ordering. One possible solution to mitigate this race\n * condition is to first reduce the spender's allowance to 0 and set the\n * desired value afterwards:\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n *\n * Emits an {Approval} event.\n */\nfunction approve(address spender, uint256 amount) external returns(bool);\n\n/**\n * @dev Moves `amount` tokens from `sender` to `recipient` using the\n * allowance mechanism. `amount` is then deducted from the caller's\n * allowance.\n *\n * Returns a boolean value indicating whether the operation succeeded.\n *\n * Emits a {Transfer} event.\n */\nfunction transferFrom(\n    address sender,\n    address recipient,\n    uint256 amount\n) external returns(bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract UnibotMigrationClaim is Ownable {\n\n    IERC20 tokenV1;\n    IERC20 tokenV2;\n\n    uint phaseNumber = 0;\n\n    mapping(address => uint256) public phaseTwoClaimable;\n\n    constructor() {\n        tokenV1 = IERC20(address(0x25127685dC35d4dc96C7fEAC7370749d004C5040));\n        tokenV2 = IERC20(address(0xf819d9Cb1c2A819Fd991781A822dE3ca8607c3C9));\n    }\n\n    receive() external payable { }\n\n\n    // @dev Phase 1 - holders deposit UnibotV1 to claim UnibotV2\n    function phaseOneClaim(uint unibotV1Amt) external {\n        require(phaseNumber != 0, \"Claiming has not begun.\");\n        require(phaseNumber == 1, \"Initial claim phase has ended.\");\n\n        uint userBalance = tokenV1.balanceOf(msg.sender);\n        require(userBalance >= unibotV1Amt, \"User insufficient UnibotV1 balance\");\n\n        uint contractUnibotV2Balance = tokenV2.balanceOf(address(this));\n        require(contractUnibotV2Balance >= unibotV1Amt, \"Insufficient UnibotV2 balance in contract.\");\n\n        tokenV1.transferFrom(msg.sender, address(this), unibotV1Amt);\n        tokenV2.transfer(msg.sender, unibotV1Amt);\n    }\n\n    // @dev Phase 1 - holders deposit UnibotV1 to claim UnibotV2\n    function phaseTwoSnapshotClaim(uint unibotV1Amt) external {\n        require(phaseNumber > 1, \"Phase 2 claim has not started\");\n        require(phaseTwoClaimable[msg.sender] > 0, \"User has no tokens to claim\");\n        require(unibotV1Amt <= phaseTwoClaimable[msg.sender]);\n\n        uint userBalance = tokenV1.balanceOf(msg.sender);\n        require(userBalance >= unibotV1Amt, \"User insufficient UnibotV1 balance.\");\n\n        uint contractUnibotV2Balance = tokenV2.balanceOf(address(this));\n        require(contractUnibotV2Balance >= unibotV1Amt, \"Insufficient UnibotV2 balance in contract.\");\n\n        phaseTwoClaimable[msg.sender] -= unibotV1Amt;\n\n        tokenV1.transferFrom(msg.sender, address(this), unibotV1Amt);\n        tokenV2.transfer(msg.sender, unibotV1Amt);\n    }\n\n    // @dev Set to non-'1' value to end initial claiming phase\n    function setTokenAddresses(address tknV1, address tknV2) external onlyOwner {\n        tokenV1 = IERC20(tknV1);\n        tokenV2 = IERC20(tknV2);\n    }\n\n\n    // @dev Set to non-'1' value to end initial claiming phase\n    function setPhaseNumber(uint _phaseNumber) external onlyOwner {\n        phaseNumber = _phaseNumber;\n    }\n\n    // @dev Set claimable amount for remaining holders after phase 1 snapshot\n    function setPhaseTwoClaimable(address[] calldata addrs, uint[] calldata amt) external onlyOwner {\n        for (uint i = 0; i < addrs.length; i++) {\n            phaseTwoClaimable[addrs[i]] = amt[i];\n        }\n    }\n\n    function withdrawToken(address _token, address _to) external onlyOwner {\n        require(_token != address(0), \"_token address cannot be 0\");\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).transfer(_to, _contractBalance);\n    }\n\n    function withdrawStuckEth(address toAddr) external onlyOwner {\n        (bool success, ) = toAddr.call{\n            value: address(this).balance\n        } (\"\");\n        require(success);\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}