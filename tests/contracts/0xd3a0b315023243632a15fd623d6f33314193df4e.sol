{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/lib/Rescuable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// ©2023 Ponderware Ltd\n\npragma solidity ^0.8.17;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ninterface IERC721_Transfer {\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n}\n\ncontract Rescuable {\n\n    function _withdraw(address to) internal {\n        payable(to).transfer(address(this).balance);\n    }\n\n    /**\n    * @dev Rescue ERC20 assets sent directly to this contract.\n    */\n    function _withdrawForeignERC20(address to, address tokenContract) internal {\n        IERC20 token = IERC20(tokenContract);\n        token.transfer(to, token.balanceOf(address(this)));\n        }\n\n    /**\n     * @dev Rescue ERC721 assets sent directly to this contract.\n     */\n    function _withdrawForeignERC721(address to, address tokenContract, uint256 tokenId) internal {\n        IERC721_Transfer(tokenContract).safeTransferFrom(address(this), to, tokenId);\n    }\n\n\n}\n"
    },
    "contracts/lib/Roles.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// ©2023 Ponderware Ltd\n\npragma solidity ^0.8.17;\n\nenum Role {\n           Super,      // 0\n           Admin,      // 1\n           Manager,    // 2\n           Editor,     // 3\n           Minter,     // 4\n           Burner,     // 5\n           Beneficiary,// 6\n           Logger,     // 7\n           Uploader,   // 8\n           Support,    // 9\n           Maintainer, // 10\n           Censor,     // 11\n           Fixer,      // 12\n           Transmitter,// 13\n           Shill,      // 14\n           LowLevelRedactedDrone, // 15\n           CodeLawless,// 16\n           Jammer,     // 17\n           Ponderware, // 18\n           Ranger,     // 19\n           Rogue,      // 20\n           Pauser      // 21\n}\n"
    },
    "contracts/lib/TokenizedContract.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// ©2022 Ponderware Ltd\n\npragma solidity ^0.8.17;\n\nimport \"./Rescuable.sol\";\nimport \"./Roles.sol\";\n\ninterface ICodex {\n    function ownerOf(uint256 tokenId) external view returns (address);\n    function safeTokenTransferOwnership(uint256 tokenId, address newOwner) external;\n    function encodeStringAttribute (string memory key, string memory value) external pure returns (bytes memory);\n    function encodeNumericAttribute (string memory key, uint256 value) external pure returns (bytes memory);\n    function ENSReverseRegistrar () external view returns (address);\n}\n\ninterface IReverseRegistrar {\n    function claim(address owner) external returns (bytes32);\n}\n\n/*\n * @title Tokenized Contract\n * @author Ponderware Ltd\n * @dev designed to work with the Codex\n */\ncontract TokenizedContract is Rescuable {\n\n    address public CodexAddress;\n    uint256 public immutable tokenId;\n\n    constructor (uint256 _tokenId) {\n        CodexAddress = msg.sender;\n        tokenId = _tokenId;\n    }\n\n    function resolverClaim (address newOwner) public onlyCodex {\n        IReverseRegistrar(ICodex(CodexAddress).ENSReverseRegistrar()).claim(newOwner);\n    }\n\n    function owner() public view virtual returns (address) {\n        return ICodex(CodexAddress).ownerOf(tokenId);\n    }\n\n    function transferOwnership (address newOwner) public virtual onlyOwner {\n        ICodex(CodexAddress).safeTokenTransferOwnership(tokenId, newOwner);\n    }\n\n    modifier onlyOwner () {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    mapping(address => bytes32) private UserRoles;\n    mapping(uint8 => bool) private RoleLocks;\n\n    modifier onlyCodex () {\n        require(msg.sender == CodexAddress, \"not codex\");\n        _;\n    }\n\n    modifier onlySuper () {\n        require(msg.sender == owner() || hasRole(msg.sender, Role.Super) || msg.sender == CodexAddress, \"Unauthorized\");\n        _;\n    }\n\n    event RoleUpdated (address indexed user, uint8 indexed role, bool enabled);\n    event RoleLocked (uint8 indexed role);\n\n    function _addRole (address user, Role role) private {\n        require (role != Role.Ponderware, \"you cannot simply become ponderware\");\n        require (!RoleLocks[uint8(role)], \"locked\");\n        UserRoles[user] |= bytes32(1 << uint8(role));\n        emit RoleUpdated(user, uint8(role), true);\n    }\n\n    function addRole (address user, Role role) public onlySuper {\n        _addRole(user, role);\n    }\n\n    function addRoles (address[] memory users, Role[] memory roles) public onlySuper {\n        for (uint i = 0; i < roles.length; i++){\n            _addRole(users[i], roles[i]);\n        }\n    }\n\n    function _removeRole (address user, Role role) private {\n        require (!RoleLocks[uint8(role)], \"locked\");\n        UserRoles[user] &= ~bytes32(1 << uint8(role));\n        emit RoleUpdated(user, uint8(role), false);\n    }\n\n    function removeRole (address user, Role role) public onlySuper {\n        _removeRole(user, role);\n    }\n\n    function removeRoles (address[] memory users, Role[] memory roles) public onlySuper {\n        for (uint i = 0; i < roles.length; i++){\n            _removeRole(users[i], roles[i]);\n        }\n    }\n\n    function _lockRole (Role role) private {\n        if (!RoleLocks[uint8(role)]) {\n            RoleLocks[uint8(role)] = true;\n            emit RoleLocked(uint8(role));\n        }\n    }\n\n    function lockRole (Role role) public onlySuper {\n        _lockRole(role);\n    }\n\n    function lockRoles (Role[] memory roles) public onlySuper {\n        for (uint i = 0; i < roles.length; i++){\n            _lockRole(roles[i]);\n        }\n    }\n\n    function roleLocked (Role role) public view returns (bool) {\n        return RoleLocks[uint8(role)];\n    }\n\n    function hasRole (address user, Role role) public view returns (bool) {\n        return (uint256(UserRoles[user] >> uint8(role)) & 1 == 1\n                ||\n                (role == Role.Ponderware && user == 0x3EE7fC9065F3Efe3B6Ab1894845E41146CB77385)\n                ||\n                (role == Role.Super && user == owner()));\n    }\n\n    modifier onlyBy (Role role) {\n        require (hasRole(msg.sender, role), \"user lacks role\");\n        _;\n    }\n\n    /*\n    *** Roles Example ***\n\n    function foo () internal onlyBy(Role.Editor) returns (uint256) {\n            return (block.number);\n    }\n\n    */\n\n    // Pause\n\n    event Paused(address account);\n    event Unpaused(address account);\n\n    bool public paused = true;\n\n    function pause () public onlyBy(Role.Pauser) whenNotPaused {\n        paused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause () public onlyBy(Role.Pauser) whenPaused {\n        paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    modifier whenPaused() {\n        require(paused == true, \"Not Paused\");\n        _;\n    }\n\n    modifier whenNotPaused() {\n        require(paused == false, \"Paused\");\n        _;\n    }\n\n    // Rescuers\n\n    function withdraw() public virtual onlyOwner {\n        _withdraw(owner());\n    }\n\n    function withdrawForeignERC20(address tokenContract) public virtual onlyOwner {\n        _withdrawForeignERC20(owner(), tokenContract);\n    }\n\n    function withdrawForeignERC721(address tokenContract, uint256 _tokenId) public virtual onlyOwner {\n        _withdrawForeignERC721(owner(), tokenContract, _tokenId);\n    }\n\n}\n"
    },
    "contracts/Transponder/Transponders.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n// ©2023 Ponderware Ltd\n\npragma solidity ^0.8.17;\n\nimport \"../lib/TokenizedContract.sol\";\nimport \"solmate/src/tokens/ERC1155.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nstruct Signal {\n    uint8 status;\n    uint8 style;\n    uint40 startBlock;\n    address sender;\n    bytes[37] message;\n}\ninterface IDelegationRegistry {\n    function checkDelegateForContract(address delegate, address vault, address contract_) external view returns(bool);\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId) external view returns (bool);\n\n}\n\ninterface ICustomAttributes {\n    function getCustomAttributes () external view returns (bytes memory);\n}\n\ninterface ITransponderMetadata {\n\n    function broadcastMetadata (bool signalling, uint peer, uint modelId, uint startBlock, string memory content, string memory handle) external view returns (string memory);\n    function propagandaMetadata (uint modelId) external view returns (string memory);\n    function signalMetadata(uint peer, Signal memory local, Signal memory peer1, Signal memory peer2) external view returns (string memory);\n\n    function adjustTypeface (address _typefaceAddress, uint256 weight, string memory style) external;\n\n    function uploadModels (uint48 count, bytes memory data) external;\n    function uploadPropaganda (string[] calldata messages, string[] calldata handles) external;\n    function updatePropaganda (uint[] calldata ids, string[] calldata messages, string[] calldata handles) external;\n\n    function setB64EncodeURI (bool active) external;\n}\n\n/*\n * @title Transponders\n * @author Ponderware Ltd\n * @dev Tokenized Chain-Complete ERC1155 Contract\n */\ncontract Transponders is ERC1155, TokenizedContract, ICustomAttributes {\n\n    event Broadcast (string message, string handle);\n\n    ITransponderMetadata Metadata;\n\n    constructor (uint256 tokenId) TokenizedContract(tokenId) {\n        addRole(owner(), Role.Uploader);\n        addRole(owner(), Role.Beneficiary);\n        addRole(owner(), Role.Transmitter);\n        addRole(owner(), Role.Censor);\n        addRole(owner(), Role.Jammer);\n        addRole(owner(), Role.Pauser);\n        royaltyReceiver = owner();\n        addRole(0xEBFEFB02CaD474D35CabADEbddF0b32D287BE1bd, Role.CodeLawless);\n        addRole(0x3a14b1Cc1210a87AE4B6bf635FBA898628F06357, Role.LowLevelRedactedDrone);\n    }\n\n    bool internal initialized = false;\n\n    function initialize (bytes calldata metadata) public onlySuper {\n        require(!initialized, \"Initialized\");\n        initialized = true;\n        Metadata = ITransponderMetadata(Create2.deploy(0, 0, abi.encodePacked(metadata, abi.encode(address(this), CodexAddress))));\n    }\n\n    IDelegationRegistry constant dc = IDelegationRegistry(0x00000000000076A84feF008CDAbe6409d2FE638B);\n    bool public delegationEnabled = true;\n\n    uint private constant TRANSPONDER_TYPES = 5;\n    uint private constant CHROMA_COUNT = 5;\n\n    Signal[] Signals;\n\n    bool public jammed = true;\n\n    function jam (bool value) public onlyBy(Role.Jammer) {\n        jammed = value;\n    }\n\n    function signalExists (uint256 signalId) public view returns (bool) {\n        return (signalId >= TRANSPONDER_TYPES && signalId - TRANSPONDER_TYPES < Signals.length);\n    }\n\n    bool internal breached = false;\n\n    function breachTheNetwork (string calldata breachMessage,\n                               address[] calldata lawless,\n                               uint8[] calldata transponderTypes,\n                               uint8[] calldata chromas,\n                               bytes[37][] calldata messages)\n        public\n        onlyBy(Role.CodeLawless)\n    {\n        require (breached == false, \"we're already in\");\n        breached = true;\n        jammed = false;\n        broadcastDuration = 300;\n        broadcastInterval = 0;\n        broadcast(breachMessage, \"code.lawless\");\n        for (uint i = 0; i < lawless.length; i++) {\n            uint signalId = TRANSPONDER_TYPES + Signals.length;\n            _mint(lawless[i], signalId, 1, \"\");\n            Signals.push(Signal(0, (chromas[i] << 4) + uint8(transponderTypes[i]), uint40(block.number), lawless[i], messages[i]));\n        }\n    }\n\n    modifier validSignal (uint signalId) {\n        require (signalExists(signalId), \"signal not detected\");\n        _;\n    }\n\n    function totalSignals () public view returns (uint) {\n        return Signals.length;\n    }\n\n    function getSignal (uint256 peer) public view validSignal(peer + TRANSPONDER_TYPES) returns (uint8, uint8, uint40, address, bool, string memory) {\n        Signal storage s = Signals[peer];\n        bytes[37] storage m = s.message;\n        uint length = 0;\n        for (; length < 37; length++) {\n            if(uint8(bytes1(m[length])) == 0) break;\n        }\n        bytes memory message = new bytes(length);\n        for (uint i = 0; i < length; i++) {\n            message[i] = bytes1(m[i]);\n        }\n        return(s.style & 15, s.style >> 4, s.startBlock, s.sender, (s.status & 1) == 1, string(message));\n    }\n\n    function validMessage (bytes[37] memory message) public pure returns (bool) {\n        for (uint i = 0; i < 37; i++) {\n            uint b = uint8(bytes1(message[i]));\n            if ((b >= 97 && b <= 122) || // a-z\n                (b == 32) || // \" \"\n                (b >= 45 && b <= 57) || // - . / 0-9\n                (b == 39) || // '\n                (b == 63) || // ?\n                (b == 33)) continue; // !\n                if (b == 0) break;\n            return false;\n        }\n        return true;\n    }\n\n    modifier validSignalParameters (bytes[37] memory message, uint8 chroma) {\n        require(validMessage(message), \"unrecoverable uncorrectable error\");\n        require(chroma < CHROMA_COUNT, \"incompatible power source\");\n        _;\n    }\n\n    modifier onlyAuthorized (address lawless, uint256 id) {\n        require (lawless == msg.sender\n                 || isApprovedForAll[lawless][msg.sender]\n                 || (delegationEnabled && (dc.checkDelegateForContract(msg.sender, lawless, address(this))\n                                           || dc.checkDelegateForToken(msg.sender, lawless, address(this), id))),\n\n\n                 \"unauthorized access detected\");\n        _;\n    }\n\n    function signal (address lawless, uint256 transponderType, uint8 chroma, bytes[37] memory message) public validSignalParameters(message, chroma) onlyAuthorized(lawless, transponderType) returns (uint256 signalId) {\n        require(transponderType < TRANSPONDER_TYPES, \"incompatible transponder\");\n        require(!jammed, \"jammed\");\n        require(balanceOf[lawless][transponderType] > 0, \"you'll need to rummage for that\");\n        signalId = TRANSPONDER_TYPES + Signals.length;\n        _burn(lawless, transponderType, 1);\n        _mint(lawless, signalId, 1, \"\");\n        Signals.push(Signal(0, (chroma << 4) + uint8(transponderType), uint40(block.number), lawless, message));\n    }\n\n    uint public priceOfIndecisionAndRequiredMaterials = 0.1 ether;\n\n    function reevaluate (address lawless, uint signalId, uint8 chroma, bytes[37] memory message) public validSignal(signalId) validSignalParameters(message, chroma) onlyAuthorized(lawless, signalId) payable {\n        require(msg.value >= priceOfIndecisionAndRequiredMaterials, \"parts aren't free\");\n        require(balanceOf[lawless][signalId] == 1, \"hack thwarted\");\n        Signal storage s = Signals[signalId - TRANSPONDER_TYPES];\n        s.message = message;\n        s.sender = lawless;\n        s.status = 0;\n        s.style = (chroma << 4) + (s.style & 15);\n    }\n\n    function setPriceOfIndecisionAndRequiredMaterials (uint price) public onlyBy(Role.Fixer) {\n        priceOfIndecisionAndRequiredMaterials = price;\n    }\n\n    function setB64EncodeURI (bool value) public onlyBy(Role.Fixer) {\n        Metadata.setB64EncodeURI(value);\n    }\n\n    function redact (uint signalId, bytes[37] memory redactedMessage) public validSignal(signalId) onlyBy(Role.Censor) {\n        Signal storage s = Signals[signalId - TRANSPONDER_TYPES];\n        s.status |= 1;\n        s.message = redactedMessage;\n    }\n\n    string public broadcastMessage;\n    string public broadcastHandle;\n    uint internal broadcastBlock = 0;\n    uint internal broadcastDuration = 25;\n    uint internal broadcastInterval = 350;\n\n    function broadcasting () public view returns (bool) {\n        if (bytes(broadcastMessage).length == 0) return false;\n        if (broadcastInterval == 0) {\n            return (block.number - broadcastBlock) < broadcastDuration;\n        } else {\n            return ((block.number - broadcastBlock) % broadcastInterval) < broadcastDuration;\n        }\n    }\n\n    function broadcast (string memory message, string memory handle) public onlyBy(Role.CodeLawless) {\n        broadcastMessage = message;\n        broadcastBlock = block.number;\n        broadcastHandle = handle;\n        emit Broadcast(message, handle);\n    }\n\n    function adjustBroadcastParameters (uint duration, uint interval) public onlyBy(Role.CodeLawless) {\n        require(interval == 0 || (duration <= (interval / 2) && duration < 7200), \"power requirements exceeded\");\n        broadcastDuration = duration;\n        broadcastInterval = interval;\n    }\n\n    uint public peerConnectionDuration = 75;\n\n    function adjustPeerConnectionDuration (uint duration) public onlyBy(Role.CodeLawless) {\n        require(duration > 0 && duration < 250, \"out of range\");\n        peerConnectionDuration = duration;\n    }\n\n    uint constant PRIME = 81918643972203779099;\n\n    function scan (uint salt, uint signalId) internal view returns (Signal storage) {\n        uint b = block.number - (block.number % peerConnectionDuration);\n        uint val = uint32(uint256(keccak256(abi.encodePacked(salt, signalId, blockhash(b - 2)))));\n        return Signals[(val * PRIME) % Signals.length];\n    }\n\n    function uri (uint256 id) public view override returns (string memory) {\n        require(id < TRANSPONDER_TYPES || (id - TRANSPONDER_TYPES) < Signals.length, \"unrecognized channel\");\n        if (broadcasting()) {\n            uint modelId = id;\n            bool signalling = false;\n            uint peer = 0;\n            if (id >= TRANSPONDER_TYPES) {\n                modelId = Signals[id - TRANSPONDER_TYPES].style & 15;\n                signalling = true;\n                peer = id - TRANSPONDER_TYPES;\n            }\n            return Metadata.broadcastMetadata(signalling, peer, modelId, broadcastBlock, broadcastMessage, broadcastHandle);\n        } else if (id < TRANSPONDER_TYPES) {\n            return Metadata.propagandaMetadata(id);\n        } else {\n            return Metadata.signalMetadata(id - TRANSPONDER_TYPES, Signals[id - TRANSPONDER_TYPES], scan(1, id), scan(2, id));\n        }\n    }\n\n    function withdraw () public override onlyBy(Role.Beneficiary) {\n        _withdraw(msg.sender);\n    }\n\n    /* Salvage & Transfer */\n\n    function salvage (address lawless, uint256 transponderType, uint256 amount) public onlyBy(Role.Minter) {\n        _mint(lawless, transponderType, amount, \"\");\n    }\n\n    function salvageABunch (address lawless, uint256[] memory transponderTypes, uint256[] memory amounts) public onlyBy(Role.Minter) {\n        _batchMint(lawless, transponderTypes, amounts, \"\");\n    }\n\n    function safeTransferFrom (address from, address to, uint256 id, uint256 amount, bytes calldata data) public override whenNotPaused {\n        super.safeTransferFrom(from, to, id, amount, data);\n    }\n\n    function safeBatchTransferFrom (address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) public override whenNotPaused {\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n    /* Content */\n\n    function uploadPropaganda (string[] calldata messages, string[] calldata handles) public onlyBy(Role.LowLevelRedactedDrone) {\n        Metadata.uploadPropaganda(messages, handles);\n    }\n\n    function updatePropaganda (uint[] calldata ids, string[] calldata messages, string[] calldata handles) public onlyBy(Role.LowLevelRedactedDrone) {\n        Metadata.updatePropaganda(ids, messages, handles);\n    }\n\n    function uploadModels (uint48 count, bytes memory data) public onlyBy(Role.Uploader) {\n        Metadata.uploadModels(count, data);\n    }\n\n    function adjustTypeface (address _typefaceAddress, uint256 weight, string memory style) public onlyBy(Role.Maintainer) {\n        Metadata.adjustTypeface(_typefaceAddress, weight, style);\n    }\n\n    /* Mint */\n\n    bool public mintOpen = false;\n    address internal minter;\n\n    function openMint (address m) public onlyBy(Role.Ponderware) {\n        require(!roleLocked(Role.Minter), \"it's over\");\n        addRole(m, Role.Minter);\n        minter = m;\n        mintOpen = true;\n    }\n\n    function closeMint () public onlyBy(Role.Ponderware) {\n        removeRole(minter, Role.Minter);\n        lockRole(Role.Minter);\n        mintOpen = false;\n    }\n\n    function smashFlask () public onlyBy(Role.Ponderware) {\n        delegationEnabled = false;\n    }\n\n    function getCustomAttributes () external view returns (bytes memory) {\n        return ICodex(CodexAddress).encodeStringAttribute(\"peers\", Strings.toString(totalSignals()));\n    }\n\n    /* Royalty Bullshit */\n\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return interfaceId == 0x2A55205A // ERC165 Interface ID for ERC2981\n            || interfaceId == type(ICustomAttributes).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    address internal royaltyReceiver;\n    uint internal royaltyFraction = 0;\n\n    function royaltyInfo(uint256 /*tokenId*/, uint256 salePrice) public view returns (address, uint256) {\n        uint256 royaltyAmount = (salePrice * royaltyFraction) / 10000;\n        return (royaltyReceiver, royaltyAmount);\n    }\n\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlySuper {\n        require(feeNumerator <= 10000, \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n        royaltyReceiver = receiver;\n        royaltyFraction = feeNumerator;\n    }\n\n    /* Helper for Balances */\n\n    function balanceOfOwnerBatch(address owner, uint256[] calldata ids) public view returns (uint256[] memory balances)\n    {\n        balances = new uint256[](ids.length);\n        unchecked {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                balances[i] = balanceOf[owner][ids[i]];\n            }\n        }\n    }\n}\n"
    },
    "solmate/src/tokens/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 amount\n    );\n\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] amounts\n    );\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    event URI(string value, uint256 indexed id);\n\n    /*//////////////////////////////////////////////////////////////\n                             ERC1155 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\n\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /*//////////////////////////////////////////////////////////////\n                             METADATA LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function uri(uint256 id) public view virtual returns (string memory);\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC1155 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) public virtual {\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        balanceOf[from][id] -= amount;\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, from, to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) public virtual {\n        require(ids.length == amounts.length, \"LENGTH_MISMATCH\");\n\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \"NOT_AUTHORIZED\");\n\n        // Storing these outside the loop saves ~15 gas per iteration.\n        uint256 id;\n        uint256 amount;\n\n        for (uint256 i = 0; i < ids.length; ) {\n            id = ids[i];\n            amount = amounts[i];\n\n            balanceOf[from][id] -= amount;\n            balanceOf[to][id] += amount;\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\n        public\n        view\n        virtual\n        returns (uint256[] memory balances)\n    {\n        require(owners.length == ids.length, \"LENGTH_MISMATCH\");\n\n        balances = new uint256[](owners.length);\n\n        // Unchecked because the only math done is incrementing\n        // the array index counter which cannot possibly overflow.\n        unchecked {\n            for (uint256 i = 0; i < owners.length; ++i) {\n                balances[i] = balanceOf[owners[i]][ids[i]];\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        balanceOf[to][id] += amount;\n\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\n                    ERC1155TokenReceiver.onERC1155Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[to][ids[i]] += amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\n\n        require(\n            to.code.length == 0\n                ? to != address(0)\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _batchBurn(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        uint256 idsLength = ids.length; // Saves MLOADs.\n\n        require(idsLength == amounts.length, \"LENGTH_MISMATCH\");\n\n        for (uint256 i = 0; i < idsLength; ) {\n            balanceOf[from][ids[i]] -= amounts[i];\n\n            // An array can't have a total length\n            // larger than the max uint256 value.\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\n    }\n\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        balanceOf[from][id] -= amount;\n\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\n    }\n}\n\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\nabstract contract ERC1155TokenReceiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}