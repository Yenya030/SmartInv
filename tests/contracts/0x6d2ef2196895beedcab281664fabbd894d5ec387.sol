{{
  "language": "Solidity",
  "sources": {
    "contracts/Minter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.6;\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IToken.sol\";\nimport \"./interfaces/IOwnable.sol\";\n\ncontract Minter is Ownable {\n\n    // sale details\n    address public tokenAddress;\n    uint256 public nextTokenId = 1999;\n    uint256 public maxHolderAllocation = 5;\n    uint256 public maxWhitelistAllocation = 20;\n\n    /// @notice minter address => # already minted for MintPhase.HoldersOnly\n    mapping(address => uint256) public hasMintedHolderAllocation;\n    /// @notice minter address => # already minted for MintPhase.WhitelistOnly\n    mapping(address => uint256) public hasMintedWhitelistAllocation;\n\n    /// @notice merkle root of valid holder addresses and quantities allowed\n    bytes32 public holderMerkleRoot;\n    /// @dev this is a superset of holderMerkleRoot\n    bytes32 public whitelistMerkleRoot;\n\n    enum MintPhase { Paused, HoldersOnly, WhitelistOnly, Open }\n    MintPhase public mintPhase;\n\n    /// @notice mint on the main token contract\n    /// @param merkleProof the merkle proof for the minter's address\n    /// @param quantity number of mints desired\n    function proxyMint(\n        bytes32[] calldata merkleProof,\n        uint256 quantity\n    ) external payable {\n        //===================== CHECKS =======================\n        IToken tokenContract = IToken(tokenAddress);\n        \n        // PRIMARY CHECKS\n\n        // check mint is not paused\n        if (mintPhase == MintPhase.Paused) {\n            revert(\"Minting paused\");\n        }\n\n        // check we won't exceed max tokens allowed\n        uint256 maxTokens = tokenContract.maxTokens();\n        require(nextTokenId + quantity <= maxTokens, \"Exceeds max supply\");\n        \n        // check enough ether is sent\n        uint256 price = tokenContract.price();\n        require(msg.value >= price * quantity, \"Not enough ether\");\n        \n        // block contracts\n        require(msg.sender == tx.origin, \"No contract mints\");\n\n        // `HoldersOnly` PHASE CHECKS\n        if (mintPhase == MintPhase.HoldersOnly) {\n            // check merkle proof against holder root\n            require(checkMerkleProof(merkleProof, msg.sender, holderMerkleRoot), \"Invalid holder proof\");\n\n            // make sure user won't have already minted max HolderOnly amount\n            require(hasMintedHolderAllocation[msg.sender] + quantity <= maxHolderAllocation, \"Exceeds holder allocation\");\n            \n            // EFFECT. log the amount this user has minted for holder allocation\n            hasMintedHolderAllocation[msg.sender] = hasMintedHolderAllocation[msg.sender] + quantity;\n        }\n\n        // `WhitelistOnly` PHASE CHECKS\n        if (mintPhase == MintPhase.WhitelistOnly) {\n            // check merkle proof against whitelist root\n            require(checkMerkleProof(merkleProof, msg.sender, whitelistMerkleRoot), \"Invalid whitelist proof\");\n\n            // make sure user won't have already minted maxWhitelistAllocation amount\n            require(hasMintedWhitelistAllocation[msg.sender] + quantity <= maxWhitelistAllocation, \"Exceeds whitelist allocation\");\n\n            // EFFECT. log the amount this user has minted for whitelist allocation\n            hasMintedWhitelistAllocation[msg.sender] = hasMintedWhitelistAllocation[msg.sender] + quantity;\n        }\n\n        // `Open` PHASE CHECKS\n        if (mintPhase == MintPhase.Open) {\n            // check maxMintsPerTx from token contract. note that in all other phases,\n            // we have phase-specific limits and thus don't need to check this.\n            uint256 maxMintsPerTx = tokenContract.maxMintsPerTx();\n            require(quantity <= maxMintsPerTx, \"Too many mints per txn\");\n        }\n\n        //=================== EFFECTS =========================\n\n        // forward funds to token contract\n        (bool success, ) = tokenAddress.call{value: msg.value }(\"\");\n        require(success, \"Payment forwarding failed\");\n\n        // increase our local tokenId. we only need to do this bc we made the \n        // tokenId on the main token contract private.\n        nextTokenId += quantity;\n\n        //=================== INTERACTIONS =======================\n        tokenContract.mintAdmin(quantity, msg.sender);\n\n    }\n\n    /// @notice check whether the merkleProof is valid for a given address and root\n    function checkMerkleProof(\n        bytes32[] calldata merkleProof,\n        address _address,\n        bytes32 _root\n    ) public pure returns (bool) {\n        bytes32 leaf = keccak256(abi.encodePacked(_address));\n        return MerkleProof.verify(merkleProof, _root, leaf);\n    }\n\n    /// @notice let owner set main token address\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\n        tokenAddress = _tokenAddress;\n    }\n\n    /// @notice let owner set the holder merkle root\n    function setHolderMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        holderMerkleRoot = _merkleRoot;\n    }\n\n    /// @notice let owner set the whitelist merkle root\n    function setWhitelistMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\n        whitelistMerkleRoot = _merkleRoot;\n    }\n\n    /// @notice Sets mint phase, takes uint that refers to MintPhase enum (0 indexed).\n    function setMintPhase(MintPhase phase) external onlyOwner {\n        mintPhase = phase;\n    }\n\n    /// @notice set max holder allocation amount\n    function setMaxHolderAllocation(uint256 amount) external onlyOwner {\n        maxHolderAllocation = amount;\n    }\n\n    /// @notice set max whitelist allocation amount\n    function setMaxWhitelistAllocation(uint256 amount) external onlyOwner {\n        maxWhitelistAllocation = amount;\n    }\n\n    /// @notice change the next token id (to match token contract)\n    function setNextTokenId(uint256 id) external onlyOwner {\n        nextTokenId = id;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title IToken interface\n\npragma solidity ^0.8.6;\n\ninterface IToken {\n    function saleActive() external returns (bool);\n    function maxMintsPerTx() external returns (uint256);\n    function maxTokens() external returns (uint256);\n    function price() external returns (uint256);\n    function mintAdmin(uint256 quantity, address to) external;\n    function battleTransfer(address from, address to, uint256 tokenId) external;\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\n/// @title IOwnable interface\n\npragma solidity ^0.8.6;\n\ninterface IOwnable {\n    function owner() external returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}