{{
  "language": "Solidity",
  "sources": {
    "contracts/WRLD_Token_Exchanger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"./ERC2771Context_Upgradeable.sol\";\nimport \"./IERC20_Game_Currency.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract WRLD_Token_Exchanger is Ownable, ERC2771Context_Upgradeable {\n  IERC20 immutable V1_WRLD;\n  IERC20_Game_Currency immutable V2_WRLD;\n  uint256 exchangeBonusBP = 500; // basis points, 5%\n\n  constructor(address _forwarder, address _V1WRLD, address _V2WRLD)\n  ERC2771Context_Upgradeable(_forwarder) {\n    V1_WRLD = IERC20(_V1WRLD);\n    V2_WRLD = IERC20_Game_Currency(_V2WRLD);\n  }\n\n  function exchange(uint256 inputAmount) external {\n    uint256 outputAmount = inputAmount + (inputAmount * exchangeBonusBP / 10000);\n\n    // forever locked into exchanger contract since transferFrom cannot transfer to burn addr\n    V1_WRLD.transferFrom(_msgSender(), address(this), inputAmount);\n\n    if (V2_WRLD.balanceOf(address(this)) >= outputAmount) {\n        V2_WRLD.transfer(_msgSender(), outputAmount);\n    } else {\n        V2_WRLD.mint(_msgSender(), outputAmount);\n    }\n  }\n\n  /**\n   * @dev Support for gasless transactions\n   */\n\n  function upgradeTrustedForwarder(address _newTrustedForwarder) external onlyOwner {\n    _upgradeTrustedForwarder(_newTrustedForwarder);\n  }\n\n  function _msgSender() internal view override(Context, ERC2771Context_Upgradeable) returns (address) {\n    return super._msgSender();\n  }\n\n  function _msgData() internal view override(Context, ERC2771Context_Upgradeable) returns (bytes calldata) {\n    return super._msgData();\n  }\n}\n"
    },
    "contracts/ERC2771Context_Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: Commons-Clause-1.0\n//  __  __     _        ___     _\n// |  \\/  |___| |_ __ _| __|_ _| |__\n// | |\\/| / -_)  _/ _` | _/ _` | '_ \\\n// |_|  |_\\___|\\__\\__,_|_|\\__,_|_.__/\n//\n// Launch your crypto game or gamefi project's blockchain\n// infrastructure & game APIs fast with https://trymetafab.com\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support and upgradeable trusted forwarder.\n */\n\nabstract contract ERC2771Context_Upgradeable is Context {\n  address private trustedForwarder;\n\n  constructor(address _trustedForwarder) {\n    trustedForwarder = _trustedForwarder;\n  }\n\n  function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n    return forwarder == trustedForwarder;\n  }\n\n  function _upgradeTrustedForwarder(address _trustedForwarder) internal {\n    trustedForwarder = _trustedForwarder;\n  }\n\n  function _msgSender() internal view virtual override returns (address sender) {\n    if (isTrustedForwarder(msg.sender)) {\n      // The assembly code is more direct than the Solidity version using `abi.decode`.\n      /// @solidity memory-safe-assembly\n      assembly {\n        sender := shr(96, calldataload(sub(calldatasize(), 20)))\n      }\n    } else {\n      return super._msgSender();\n    }\n  }\n\n  function _msgData() internal view virtual override returns (bytes calldata) {\n    if (isTrustedForwarder(msg.sender)) {\n      return msg.data[:msg.data.length - 20];\n    } else {\n      return super._msgData();\n    }\n  }\n}\n"
    },
    "contracts/IERC20_Game_Currency.sol": {
      "content": "// SPDX-License-Identifier: Commons-Clause-1.0\n//  __  __     _        ___     _\n// |  \\/  |___| |_ __ _| __|_ _| |__\n// | |\\/| / -_)  _/ _` | _/ _` | '_ \\\n// |_|  |_\\___|\\__\\__,_|_|\\__,_|_.__/\n//\n// Launch your crypto game or gamefi project's blockchain\n// infrastructure & game APIs fast with https://trymetafab.com\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IERC20_Game_Currency is IERC20, IERC165  {\n  // events\n  event TransferRef(address indexed sender, address indexed recipient, uint256 amount, uint256 ref);\n  event BatchTransferRef(address indexed sender, address[] recipients, uint256[] amounts, uint256[] refs);\n\n  // autogenerated getters\n  function feeBps() external view returns (uint);\n  function feeFixed() external view returns (uint);\n  function feeCap() external view returns (uint);\n  function feeRecipient() external view returns (address);\n  function childChainManagerProxy() external view returns (address);\n  function supplyCap() external view returns (uint256);\n\n  // functions\n  function mint(address _to, uint256 _amount) external;\n  function burn(uint256 _amount) external;\n  function transferWithRef(address recipient, uint256 amount, uint256 ref) external returns (bool);\n  function batchTransfer(address[] calldata recipients, uint256[] calldata amounts) external returns (bool);\n  function batchTransferWithRefs(address[] calldata recipients, uint256[] calldata amounts, uint256[] calldata refs) external returns (bool);\n  function batchTransferWithFees(address[] calldata recipients, uint256[] calldata amounts) external returns (bool);\n  function batchTransferWithFeesRefs(address[] calldata recipients, uint256[] calldata amounts, uint256[] calldata refs) external returns (bool);\n  function deposit(address user, bytes calldata depositData) external;\n  function withdraw(uint256 amount) external;\n  function updateChildChainManager(address _childChainManagerProxy) external;\n  function burnWithFee(uint256 amount) external returns (bool);\n  function transferWithFee(address recipient, uint256 amount) external returns (bool);\n  function transferWithFeeRef(address recipient, uint256 amount, uint256 ref) external returns (bool);\n  function setFees(address recipient, uint _feeBps, uint _feeFixed, uint _feeCap) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}