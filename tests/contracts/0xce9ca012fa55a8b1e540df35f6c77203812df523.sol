{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "closedsea/src/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\n/// mandatory on-chain royalty enforcement in order for new collections to\n/// receive royalties.\n/// For more information, see:\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\nabstract contract OperatorFilterer {\n    /// @dev The default OpenSea operator blocklist subscription.\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\n\n    /// @dev The OpenSea operator filter registry.\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\n\n    /// @dev Registers the current contract to OpenSea's operator filter,\n    /// and subscribe to the default OpenSea operator blocklist.\n    /// Note: Will not revert nor update existing settings for repeated registration.\n    function _registerForOperatorFiltering() internal virtual {\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\n    }\n\n    /// @dev Registers the current contract to OpenSea's operator filter.\n    /// Note: Will not revert nor update existing settings for repeated registration.\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\n        internal\n        virtual\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\n\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\n\n            for {} iszero(subscribe) {} {\n                if iszero(subscriptionOrRegistrantToCopy) {\n                    functionSelector := 0x4420e486 // `register(address)`.\n                    break\n                }\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\n                break\n            }\n            // Store the function selector.\n            mstore(0x00, shl(224, functionSelector))\n            // Store the `address(this)`.\n            mstore(0x04, address())\n            // Store the `subscriptionOrRegistrantToCopy`.\n            mstore(0x24, subscriptionOrRegistrantToCopy)\n            // Register into the registry.\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\n                // If the function selector has not been overwritten,\n                // it is an out-of-gas error.\n                if eq(shr(224, mload(0x00)), functionSelector) {\n                    // To prevent gas under-estimation.\n                    revert(0, 0)\n                }\n            }\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\n    modifier onlyAllowedOperator(address from) virtual {\n        if (from != msg.sender) {\n            if (!_isPriorityOperator(msg.sender)) {\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\n            }\n        }\n        _;\n    }\n\n    /// @dev Modifier to guard a function from approving a blocked operator..\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        if (!_isPriorityOperator(operator)) {\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\n        }\n        _;\n    }\n\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\n    function _revertIfBlocked(address operator) private view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Store the function selector of `isOperatorAllowed(address,address)`,\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\n            mstore(0x00, 0xc6171134001122334455)\n            // Store the `address(this)`.\n            mstore(0x1a, address())\n            // Store the `operator`.\n            mstore(0x3a, operator)\n\n            // `isOperatorAllowed` always returns true if it does not revert.\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\n                // Bubble up the revert if the staticcall reverts.\n                returndatacopy(0x00, 0x00, returndatasize())\n                revert(0x00, returndatasize())\n            }\n\n            // We'll skip checking if `from` is inside the blacklist.\n            // Even though that can block transferring out of wrapper contracts,\n            // we don't want tokens to be stuck.\n\n            // Restore the part of the free memory pointer that was overwritten,\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\n            mstore(0x3a, 0)\n        }\n    }\n\n    /// @dev For deriving contracts to override, so that operator filtering\n    /// can be turned on / off.\n    /// Returns true by default.\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\n        return true;\n    }\n\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\n    /// skip operator filtering, helping users save gas.\n    /// Returns false for all inputs by default.\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\n        return false;\n    }\n}\n"
    },
    "contracts/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {IERC721A, ERC721A} from \"erc721a/contracts/ERC721A.sol\";\r\nimport {ERC721AQueryable} from \"erc721a/contracts/extensions/ERC721AQueryable.sol\";\r\nimport {ERC721ABurnable} from \"erc721a/contracts/extensions/ERC721ABurnable.sol\";\r\nimport {OperatorFilterer} from \"closedsea/src/OperatorFilterer.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC2981, ERC2981} from \"@openzeppelin/contracts/token/common/ERC2981.sol\";\r\n\r\ncontract Base is\r\n    ERC721AQueryable,\r\n    ERC721ABurnable,\r\n    OperatorFilterer,\r\n    Ownable,\r\n    ERC2981\r\n{\r\n\r\n    bool public operatorFilteringEnabled;\r\n\r\n    error ZeroBalance();\r\n    error FailToWithdraw();\r\n\r\n    constructor(string memory name, string memory symbol) ERC721A (name, symbol) {\r\n        _registerForOperatorFiltering();\r\n        operatorFilteringEnabled = true;\r\n\r\n        // Set royalty receiver to the contract creator,\r\n        // at 5% as BP.\r\n        _setDefaultRoyalty(msg.sender, 500);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw all Eth funds\r\n     */\r\n    function withdrawAll() external onlyOwner {\r\n        if (address(this).balance == 0) revert ZeroBalance();\r\n        (bool sent, ) = owner().call{value: address(this).balance}(\"\");\r\n        if(!sent) revert FailToWithdraw();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw erc20 that pile up, if any\r\n     * @param token - ERC20 token to withdraw\r\n     */\r\n    function withdrawAllERC20(IERC20 token) external onlyOwner {\r\n        token.transfer(owner(), token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Global approval for given operator\r\n     * @param operator - address of operator\r\n     * @param approved - true | false\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n        public\r\n        override (IERC721A, ERC721A)\r\n        onlyAllowedOperatorApproval(operator)\r\n    {\r\n        super.setApprovalForAll(operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @notice Operator approval for a given tokenId\r\n     * @param operator - address of operator\r\n     * @param tokenId - tokenId to grant approval for\r\n     */\r\n    function approve(address operator, uint256 tokenId)\r\n        public\r\n        payable\r\n        override (IERC721A, ERC721A)\r\n        onlyAllowedOperatorApproval(operator)\r\n    {\r\n        super.approve(operator, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer token `from` `to`\r\n     * @param from - address to transfer from\r\n     * @param to - address to transfer to\r\n     * @param tokenId - id of token to transfer\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId)\r\n        public\r\n        payable\r\n        override (IERC721A, ERC721A)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.transferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Safe transfer token `from` `to`\r\n     * @param from - address to transfer from\r\n     * @param to - address to transfer to\r\n     * @param tokenId - id of token to transfer\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId)\r\n        public\r\n        payable\r\n        override (IERC721A, ERC721A)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @notice Safe transfer token `from` `to`\r\n     * @param from - address to transfer from\r\n     * @param to - address to transfer to\r\n     * @param tokenId - id of token to transfer\r\n     * @param data - additional bytes data\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)\r\n        public\r\n        payable\r\n        override (IERC721A, ERC721A)\r\n        onlyAllowedOperator(from)\r\n    {\r\n        super.safeTransferFrom(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Check that various interfaces are supported\r\n     * @param interfaceId - id of interface to check\r\n     * @return bool for support\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override (IERC721A, ERC721A, ERC2981)\r\n        returns (bool)\r\n    {\r\n        // Supports the following `interfaceId`s:\r\n        // - IERC165: 0x01ffc9a7\r\n        // - IERC721: 0x80ac58cd\r\n        // - IERC721Metadata: 0x5b5e139f\r\n        // - IERC2981: 0x2a55205a\r\n        return ERC721A.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @notice Set royalties for all tokens.\r\n     * @param receiver - Address receiving royalties.\r\n     * @param feeNumerator - Fee as Basis points.\r\n     */\r\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public onlyOwner {\r\n        _setDefaultRoyalty(receiver, feeNumerator);\r\n    }\r\n\r\n    /**\r\n     * @notice Set operator filtering on or off\r\n     * @param value - desired state value\r\n     */\r\n    function setOperatorFilteringEnabled(bool value) public onlyOwner {\r\n        operatorFilteringEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * @notice Internally check operator filter state\r\n     * @return state as boolean\r\n     */\r\n    function _operatorFilteringEnabled() internal view override returns (bool) {\r\n        return operatorFilteringEnabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Internally check if operator is priority\r\n     * @return priority as boolean\r\n     */\r\n    function _isPriorityOperator(address operator) internal pure override returns (bool) {\r\n        // OpenSea Seaport Conduit:\r\n        // https://etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71\r\n        // https://goerli.etherscan.io/address/0x1E0049783F008A0085193E00003D00cd54003c71\r\n        return operator == address(0x1E0049783F008A0085193E00003D00cd54003c71);\r\n    }\r\n}\r\n"
    },
    "contracts/CryptoCoaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/**======================================================================================\r\n   .-'--`-._                           .-'--`-._                           .-'--`-._\r\n   '-O---O--'                          '-O---O--'                          '-O---O--'\r\n=========================================================================================\r\n\r\n                    ░█████╗░██████╗░██╗░░░██╗██████╗░████████╗░█████╗░\r\n                    ██╔══██╗██╔══██╗╚██╗░██╔╝██╔══██╗╚══██╔══╝██╔══██╗\r\n                    ██║░░╚═╝██████╔╝░╚████╔╝░██████╔╝░░░██║░░░██║░░██║\r\n                    ██║░░██╗██╔══██╗░░╚██╔╝░░██╔═══╝░░░░██║░░░██║░░██║\r\n                    ╚█████╔╝██║░░██║░░░██║░░░██║░░░░░░░░██║░░░╚█████╔╝\r\n                    ░╚════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░░░░░░░╚═╝░░░░╚════╝░\r\n\r\n                ░█████╗░░█████╗░░█████╗░░██████╗████████╗███████╗██████╗░\r\n                ██╔══██╗██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██╔════╝██╔══██╗\r\n                ██║░░╚═╝██║░░██║███████║╚█████╗░░░░██║░░░█████╗░░██████╔╝\r\n                ██║░░██╗██║░░██║██╔══██║░╚═══██╗░░░██║░░░██╔══╝░░██╔══██╗\r\n                ╚█████╔╝╚█████╔╝██║░░██║██████╔╝░░░██║░░░███████╗██║░░██║\r\n                ░╚════╝░░╚════╝░╚═╝░░╚═╝╚═════╝░░░░╚═╝░░░╚══════╝╚═╝░░╚═╝\r\n\r\n/*=========================================================================================\r\n   .-'--`-._                           .-'--`-._                           .-'--`-._\r\n   '-O---O--'                          '-O---O--'                          '-O---O--'\r\n=========================================================================================*/\r\n\r\nimport \"./Base.sol\";\r\nimport \"./lib/scripty/IScriptyBuilder.sol\";\r\nimport \"./lib/SmallSolady.sol\";\r\nimport \"./Thumbnail.sol\";\r\nimport \"./ICryptoCoaster.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\n/**\r\n * @title Crypto Coaster\r\n * @author @xtremetom\r\n * @notice Experiment, 100% on-chain procedurally generated roller coaster\r\n * @dev No fancy mint mechanics, no promise of utility, no discord, just a code experiment\r\n *\r\n *      There are parts of this contract that could be optimized but I have deliberately\r\n *      tried to make things easy to read and understand\r\n *\r\n *      Huge thanks to 0xthedude, frolic, dhof, ****, CODENAME883, Mathcastles community,\r\n *      and everyone that helped with testing\r\n */\r\ncontract CryptoCoaster is Base {\r\n\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    address public immutable _ethfsFileStorageAddress;\r\n    address public immutable _scriptyStorageAddress;\r\n    address public immutable _scriptyBuilderAddress;\r\n    uint256 public immutable _supply;\r\n    address public _thumbnailAddress;\r\n\r\n    uint256 public _price = 0.025 ether;\r\n\r\n    bool public _isOpen = false;\r\n\r\n    // Address => Minted?\r\n    BitMaps.BitMap _minted;\r\n\r\n    address public _signer;\r\n    address public constant _signatureDisabled =\r\n    address(bytes20(keccak256(\"signatureDisabled\")));\r\n\r\n    error MintClosed();\r\n    error ContractMinter();\r\n    error SoldOut();\r\n    error GreedyMinter();\r\n    error InsufficientFunds();\r\n    error WalletMax();\r\n    error TokenDoesntExist();\r\n    error InvalidSignature();\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 supply,\r\n        address ethfsFileStorageAddress,\r\n        address scriptyStorageAddress,\r\n        address scriptyBuilderAddress,\r\n        address thumbnailAddress\r\n    ) Base(name, symbol) {\r\n        _ethfsFileStorageAddress = ethfsFileStorageAddress;\r\n        _scriptyStorageAddress = scriptyStorageAddress;\r\n        _scriptyBuilderAddress = scriptyBuilderAddress;\r\n        _thumbnailAddress = thumbnailAddress;\r\n\r\n        _supply = supply;\r\n\r\n        // mint reserve of 20 for friends that helped\r\n        // and a few giveaways\r\n        _safeMint(msg.sender, 20, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Minting starts at token id #1\r\n     * @return Token id to start minting at\r\n     */\r\n    function _startTokenId() internal pure override returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieve how many tokens have been minted\r\n     * @return Total number of minted tokens\r\n     */\r\n    function totalMinted() public view returns (uint256) {\r\n        return _totalMinted();\r\n    }\r\n\r\n    /*=========================================================================================\r\n       .-'--`-._                            MINTING\r\n       '-O---O--'                            LOGIC\r\n    =========================================================================================*/\r\n\r\n    /**\r\n     * @notice Verify signature\r\n     * @param sender - Address of sender\r\n     * @param signature - Signature to verify\r\n     */\r\n    modifier validateSignature(address sender, bytes memory signature) {\r\n        if (_signer != _signatureDisabled) {\r\n            bytes32 messageHash = ECDSA.toEthSignedMessageHash(abi.encode(sender));\r\n            (address signer,) = ECDSA.tryRecover(messageHash, signature);\r\n            if (signer != _signer) {\r\n                revert InvalidSignature();\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Mint those tokens\r\n     * @dev No whitelist, just limit per wallet and signature verification\r\n     * @param signature - Signature to verify\r\n     */\r\n    function mint(bytes memory signature)\r\n        public payable\r\n        validateSignature(msg.sender, signature)\r\n    {\r\n        if (!_isOpen) revert MintClosed();\r\n        if (msg.sender != tx.origin) revert ContractMinter();\r\n        if (_minted.get(uint160(msg.sender))) revert WalletMax();\r\n        if (msg.value < _price) revert InsufficientFunds();\r\n        unchecked {\r\n            if (_totalMinted() + 1 > _supply) revert SoldOut();\r\n        }\r\n\r\n        _minted.set(uint160(msg.sender));\r\n        _safeMint(msg.sender, 1, \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Update the mint price.\r\n     * @dev Very doubtful this gets used, but good to have\r\n     * @param price - The new price.\r\n     */\r\n    function updateMintPrice(uint256 price) external onlyOwner {\r\n        _price = price;\r\n    }\r\n\r\n    /**\r\n     * @notice Update thumbnail contract address\r\n     * @param thumbnailAddress - Address of the thumbnail contract.\r\n     */\r\n    function setThumbnailAddress(address thumbnailAddress) external onlyOwner {\r\n        if (_totalMinted() == _supply) revert SoldOut();\r\n        _thumbnailAddress = thumbnailAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Open or close minting\r\n     * @param state - Boolean state for being open or closed.\r\n     */\r\n    function setMintStatus(bool state) external onlyOwner {\r\n        _isOpen = state;\r\n    }\r\n\r\n    /**\r\n     * @notice Set address of signer\r\n     * @param signer - Address of new signer\r\n     */\r\n    function setSigner(address signer) external onlyOwner {\r\n        _signer = signer;\r\n    }\r\n\r\n    /*=========================================================================================\r\n       .-'--`-._                            METADATA\r\n       '-O---O--'                            LOGIC\r\n    =========================================================================================*/\r\n\r\n    /**\r\n     * @notice Build all the settings into a struct\r\n     * @param tokenIdString - Value as string\r\n     * @return settings - All settings as a struct\r\n     */\r\n    function buildSettings(string memory tokenIdString) internal view returns (Settings memory settings) {\r\n\r\n        (uint256 seed, bytes memory varSeed) = genSeed(tokenIdString);\r\n        settings.seed = seed;\r\n        settings.vars[0] = varSeed;\r\n\r\n        (bytes memory varSpeed, uint256 speed) = trackSpeed(seed);\r\n        settings.speed = speed;\r\n        settings.vars[1] = varSpeed;\r\n\r\n        (bytes memory varScale, uint256 scale) = worldScale(seed >> 8);\r\n        settings.scale = scale;\r\n        settings.vars[2] = varScale;\r\n\r\n        (bytes memory varColor, Color memory color) = trackColor(seed >> 16);\r\n        settings.color = color;\r\n        settings.vars[3] = varColor;\r\n\r\n        (bytes memory varBiome, string memory biomeName, uint256 biomeIDX) = biome(seed >> 24);\r\n        settings.biomeName = biomeName;\r\n        settings.biomeIDX = biomeIDX;\r\n        settings.vars[4] = varBiome;\r\n\r\n        (bytes memory varFlip, uint256 flip) = trackOrientation(seed >> 32);\r\n        settings.flip = flip;\r\n        settings.vars[5] = varFlip;\r\n    }\r\n\r\n    /**\r\n     * @notice Util function to generate hash\r\n     * @param tokenIdString - Value as string\r\n     * @return hash - as uint256\r\n     */\r\n    function createHash(string memory tokenIdString) internal view returns (uint256 hash) {\r\n        return uint256(keccak256(abi.encodePacked(\"coaster\", tokenIdString, address(this))));\r\n    }\r\n\r\n    /**\r\n     * @notice Generate seed based on tag and track ID\r\n     * @param tokenIdString - Track id as string\r\n     * @return seed - final seed as uint56\r\n     * @return varSeed - JS compatible declaration of seed\r\n     */\r\n    function genSeed(string memory tokenIdString) internal view returns (uint256 seed, bytes memory varSeed) {\r\n        seed = createHash(tokenIdString);\r\n        varSeed = abi.encodePacked(\r\n            'var seed=\"', SmallSolady.toString(seed), '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the track speed setting\r\n     * @param seed - Seed for a specific track\r\n     * @return varSpeed - JS compatible declaration of track speed\r\n     * @return speed - Speed setting a uint256\r\n     */\r\n    function trackSpeed(uint256 seed) internal pure returns (bytes memory varSpeed, uint256 speed) {\r\n        uint256 r = seed % 100;\r\n        speed = (r > 90) ? 2 : 1;\r\n        varSpeed = abi.encodePacked(\r\n            'var speed=\"', SmallSolady.toString(speed), '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the world scale setting\r\n     * @param seed - Seed for a specific track\r\n     * @return varScale - JS compatible declaration of world scale\r\n     * @return scale - Scale setting a uint256\r\n     */\r\n    function worldScale(uint256 seed) internal pure returns (bytes memory varScale, uint256 scale) {\r\n        uint256 r = seed % 100;\r\n        scale = (r > 85) ? 2 : 1;\r\n        varScale = abi.encodePacked(\r\n            'var scale=\"', SmallSolady.toString(scale), '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Pick track color based on seed\r\n     * @param seed - Seed for a specific track\r\n     * @return varColor - JS compatible declaration of track color\r\n     * @return color - Color info struct\r\n     */\r\n    function trackColor(uint256 seed) internal pure returns (bytes memory varColor, Color memory color) {\r\n        string[7] memory trackHexs = [\"#2710cf\",\"#cf10c4\",\"#10cf27\",\"#106acf\",\"#cf3210\",\"#cf0808\",\"#cfcf10\"];\r\n        string[7] memory iconHexs = [\"#9530eb\", \"#eb30d7\",\"#23cc16\",\"#169bcc\",\"#f97316\",\"#eb3030\",\"#f0cb38\"];\r\n        string[7] memory names = [\"Purple\", \"Pink\", \"Green\", \"Blue\", \"Orange\", \"Red\", \"Yellow\"];\r\n\r\n        uint256 r = seed % 7;\r\n        color = Color(names[r], trackHexs[r], iconHexs[r]);\r\n\r\n        varColor = abi.encodePacked(\r\n            'var trackColor=\"', color.trackHex, '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gather biome data based on seed\r\n     * @param seed - Seed for a specific track\r\n     * @return varBiome - JS compatible declaration of biomeName\r\n     * @return biomeName - Biome name as string\r\n     * @return biomeIDX - array index for biome\r\n     */\r\n    function biome(uint256 seed) internal pure returns (bytes memory varBiome, string memory biomeName, uint256 biomeIDX) {\r\n        string[3] memory biomes = [\"Snow\", \"Forest\", \"Desert\"];\r\n        biomeIDX = seed % 3;\r\n        biomeName = biomes[biomeIDX];\r\n        varBiome = abi.encodePacked(\r\n            'var biomeName=\"', biomeName, '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Silly adjustment to track\r\n     * @param seed - Seed for a specific track\r\n     * @return varTrackOr - JS compatible declaration of track orientation\r\n     * @return flip - 0 | 1 | 2 - normal | horiz |  vert\r\n     */\r\n    function trackOrientation(uint256 seed) internal pure returns (bytes memory varTrackOr, uint256 flip) {\r\n        uint256 r = seed % 100;\r\n        flip = 0;\r\n        if (r == 0) flip = 2;\r\n        else if (r > 95) flip = 1;\r\n        varTrackOr = abi.encodePacked(\r\n            'var flip=\"', SmallSolady.toString(flip) , '\";'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Util function to help build traits\r\n     * @param key - Trait key as string\r\n     * @param value - Trait value as string\r\n     * @return trait - object as string\r\n     */\r\n    function buildTrait(string memory key, string memory value) internal pure returns (string memory trait) {\r\n        return string.concat('{\"trait_type\":\"', key, '\",\"value\": \"', value, '\"}');\r\n    }\r\n\r\n    /**\r\n     * @notice Build attributes for metadata\r\n     * @param settings - Track settings struct\r\n     * @return attr - array as a string\r\n     */\r\n    function buildAttributes(Settings memory settings) internal pure returns (bytes memory attr) {\r\n        // orientation\r\n        string memory orientation = \"Forward\";\r\n        if (settings.flip == 1) orientation = \"Backward\";\r\n        else if (settings.flip == 2) orientation = \"Upside down\";\r\n\r\n        // speed\r\n        string memory speedString = \"Normal\";\r\n        if (settings.speed == 2) speedString = \"Fast\";\r\n\r\n        // world scale\r\n        string memory scaleString = \"Normal\";\r\n        if (settings.scale == 2) scaleString = \"Big\";\r\n\r\n        return abi.encodePacked(\r\n            '\"attributes\": [',\r\n                buildTrait(\"Track Color\", settings.color.name),\r\n                ',',\r\n                buildTrait(\"Biome\", settings.biomeName),\r\n                ',',\r\n                buildTrait(\"Orientation\", orientation),\r\n                ',',\r\n                buildTrait(\"Speed\", speedString),\r\n                ',',\r\n                buildTrait(\"World Scale\", scaleString),\r\n            ']'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Pack and base64 encode JS compatible vars\r\n     * @param settings - Track settings struct\r\n     * @return vars - base64 encoded JS compatible setting variables\r\n     */\r\n    function buildVars(Settings memory settings) internal pure returns (bytes memory vars){\r\n        return bytes(\r\n            SmallSolady.encode(\r\n                abi.encodePacked(\r\n                    settings.vars[0],\r\n                    settings.vars[1],\r\n                    settings.vars[2],\r\n                    settings.vars[3],\r\n                    settings.vars[4],\r\n                    settings.vars[5]\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Use Scripty to generate the final html\r\n     * @dev I opted for the lazy dev approach and let scripty calculate the required buffersize\r\n     *      This could be calculated and passed to the contract at any point prior to its use\r\n     *      in `getHTMLWrappedURLSafe`\r\n     * @param requests - Array of WrappedScriptRequest data\r\n     * @return html - as bytes\r\n     */\r\n    function buildAnimationURI(WrappedScriptRequest[] memory requests) internal view returns (bytes memory html) {\r\n        IScriptyBuilder iScriptyBuilder = IScriptyBuilder(_scriptyBuilderAddress);\r\n        uint256 bufferSize = iScriptyBuilder.getBufferSizeForURLSafeHTMLWrapped(requests);\r\n        return iScriptyBuilder.getHTMLWrappedURLSafe(requests, bufferSize);\r\n    }\r\n\r\n    /**\r\n     * @notice Build the metadata including the full render html for the coaster\r\n     * @dev This depends on\r\n     *      - https://ethfs.xyz/ [stores code libraries]\r\n     *      - https://github.com/intartnft/scripty.sol [builds rendering html and stores code libraries]\r\n     * @param tokenId - TokenId to build coaster for\r\n     * @return metadata - as string\r\n     */\r\n    function tokenURI(\r\n        uint256 tokenId\r\n    ) public view virtual override(ERC721A, IERC721A) returns (string memory metadata) {\r\n\r\n        // show nothing if token doesnt exist\r\n        if (!_exists(tokenId)) revert TokenDoesntExist();\r\n\r\n        string memory tokenIdString = SmallSolady.toString(tokenId);\r\n\r\n        // Generate all the settings and various objects for the metadata\r\n        Settings memory settings = buildSettings(tokenIdString);\r\n        bytes memory attr = buildAttributes(settings);\r\n        bytes memory vars = buildVars(settings);\r\n        string memory thumbnail = SmallSolady.encode(\r\n            Thumbnail(_thumbnailAddress).buildThumbnail(settings)\r\n        );\r\n\r\n        // To build the html I use Scripty to manage all the annoying tagging and html construction\r\n        // A combination of EthFS and Scripty is used for storage and this array stores the required\r\n        // code data\r\n        WrappedScriptRequest[] memory requests = new WrappedScriptRequest[](7);\r\n\r\n        // The order of steps is the order the code will appear in the final\r\n        // rendering html injected into the metadata\r\n        //\r\n        // 1. - CSS + dom elements\r\n        // 2. - setting JS variables\r\n        // 3. - gzipped 3D models as JS variable\r\n        // 4. - gzipped ThreeJS lib\r\n        // 5. - gzipped Coaster bundle\r\n        // 6. - gzip handler\r\n        //\r\n        // When the gzip handler runs it detects scripts with `text/javascript+gzip`\r\n        // gunzips them and appends the raw code in this order:\r\n        //\r\n        // - ThreeJS [no dependencies]\r\n        // - Coaster script bundle [depends on ThreeJS]\r\n        //   |\r\n        //   -- GLTFLoader [requires ThreeJS]\r\n        //   -- BufferGeometryUtils [requires ThreeJS]\r\n        //   -- Other scripts [requires ThreeJS + setting variables]\r\n        //   -- Scenebuilder [requires ThreeJS + 3D models]\r\n        //\r\n        // 3D models are explicitly gunzipped and converted into `octet-stream`\r\n        // allowing them to easily be loaded using the glb ThreeJS loader\r\n        // More loaders are available:\r\n        // https://github.com/mrdoob/three.js/tree/dev/examples/jsm/loaders\r\n        // I used .glb files as an example, however other formats like SDF and colored STL\r\n        // would be better suited in terms of storage cost\r\n        //\r\n        // [PREVENTING GAS OUT]\r\n        // It is worth noting that for this piece I am using `getHTMLWrappedURLSafe` in `buildAnimationURI()`\r\n        // above. This ensures the code is handled with urlencoding to make it URL safe vs base64 encoding. For a\r\n        // codebase this big (threejs + models + scripts) base64 encoding within a contract would result in a gas\r\n        // out.\r\n        // However, I have tried to include an example of all `wrapTypes` below, one of which is a forced base64\r\n        // encoding, for demo purposes.\r\n\r\n\r\n        // Step 1.\r\n        // - create custom content blocks that have no wrapper\r\n        // - we do this to easily inject css and dom elements\r\n        // - double urlencoded\r\n        // - first block is css + some JS\r\n        // - second block is coaster settings [biome + speed]\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L648\r\n        // [double urlencoded data]\r\n\r\n        requests[0].wrapType = 4;\r\n        requests[0].scriptContent = \"%253Cstyle%253Ebody%252Chtml%257Boverflow%253Ahidden%253Bmargin%253A0%253Bwidth%253A100%2525%253Bheight%253A100%2525%257D%2523overlay%257Bposition%253Aabsolute%253Bwidth%253A100vw%253Bheight%253A100vh%253Btransition%253A.75s%2520ease-out%253Bbackground-color%253A%2523e2e8f0%253Bdisplay%253Aflex%253Bflex-direction%253Acolumn%253Bjustify-content%253Acenter%253Balign-items%253Acenter%257D.bbg%257Bwidth%253A75%2525%253Bmargin%253A1rem%253Bbackground-color%253A%2523cbd5e1%253Bmax-width%253A400px%253Bborder-radius%253A2rem%253Bheight%253A.8rem%257D.bbar%257Bbackground-color%253A%25236366f1%253Bwidth%253A5%2525%253Bborder-radius%253A2rem%253Bheight%253A.8rem%257D%2523info%257Bfont-family%253ATahoma%252CArial%252CHelvetica%252Csans-serif%253Bfont-size%253A.8rem%253Bcolor%253A%2523475569%253Bmin-height%253A1rem%257D%2523controls%257Bposition%253Aabsolute%253Bbottom%253A20px%253Bleft%253A20px%257D%2523camber%257Bborder%253A1px%2520solid%2520%2523fff%253Bborder-radius%253A4px%253Bbackground%253Argba(0%252C0%252C0%252C.1)%253Bcolor%253A%2523dc2626%253Btext-align%253Acenter%253Bopacity%253A.5%253Boutline%253A0%253Bmouse%253Apointer%257D%2523camber.active%257Bbackground%253Argba(255%252C255%252C255%252C.5)%253Bcolor%253A%252316a34a%253Bopacity%253A1%257D%2523camber%2520svg%257Bwidth%253A36px%253Bheight%253A36px%257D%253C%252Fstyle%253E%253Cdiv%2520id%253D'overlay'%253E%253Cdiv%2520class%253D'bbg'%253E%253Cdiv%2520id%253D'bar'%2520class%253D'bbar'%253E%253C%252Fdiv%253E%253C%252Fdiv%253E%253Cdiv%2520id%253D'info'%253E%253C%252Fdiv%253E%253C%252Fdiv%253E%253Ccanvas%2520id%253D'coaster'%253E%253C%252Fcanvas%253E%253Cdiv%2520id%253D'controls'%253E%253Cbutton%2520id%253D'camber'%2520onclick%253D'toggleActive()'%253E%253Csvg%2520viewBox%253D'0%25200%252012.7%252012.7'%2520xmlns%253D'http%253A%252F%252Fwww.w3.org%252F2000%252Fsvg'%253E%253Cg%2520style%253D'stroke%253AcurrentColor%253Bstroke-width%253A.6%253Bstroke-linecap%253Around%253Bfill%253Anone'%253E%253Crect%2520width%253D'4.217'%2520height%253D'4.217'%2520x%253D'4.257'%2520y%253D'5.388'%2520ry%253D'.31'%2520rx%253D'.31'%252F%253E%253Cpath%2520d%253D'm12.37%25206.919-.935%25201.16-1.145-1.025M.487%25206.919l.936%25201.16%25201.145-1.025'%2520transform%253D'matrix(.94246%25200%25200%2520.9392%2520.291%2520.21)'%252F%253E%253Cpath%2520d%253D'M-1.464-8.007a4.99%25205.036%25200%25200%25201-2.495%25204.36%25204.99%25205.036%25200%25200%25201-4.99%25200%25204.99%25205.036%25200%25200%25201-2.495-4.36'%2520transform%253D'matrix(-.94246%25200%25200%2520-.9392%2520.291%2520.21)'%252F%253E%253C%252Fg%253E%253C%252Fsvg%253E%253C%252Fbutton%253E%253C%252Fdiv%253E\";\r\n\r\n        // Step 2.\r\n        // - wrap the JS variables in <script>\r\n        // - no name is needed as we are injected the code rather than\r\n        //   pulling it from a contract (scriptyStorage/EthFS)\r\n        // - wrapType 1 w/ script content\r\n        //\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L638\r\n        // <script src=\"data:text/javascript;base64,[vars]\"></script>\r\n\r\n        requests[1].name = \"\";\r\n        requests[1].wrapType = 1;\r\n        requests[1].scriptContent = vars;\r\n\r\n        // Ideally these settings would be included in the main bulk of the coaster\r\n        // code, but to allow you to mess around with the coaster by creating your own\r\n        // settings json, I have kept them separate\r\n        //\r\n        // [IMPORTANT]\r\n        // Note how this code is not encoded in any way. The `wrapType 0` in combination with `getHTMLWrappedURLSafe`\r\n        // from `buildAnimationURI()` results in the scriptContent being base64 encoded in Scripty\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L638\r\n        // <script src=\"data:text/javascript;base64,[SCRIPT]\"></script>\r\n\r\n        requests[2].wrapType = 0;\r\n        requests[2].scriptContent = 'const biomes={Snow:{sky:15987703,fog:14737632,ground:11526632,hemi:[14154495,13806982,.5],sun:[15127463,1,0,100,50],models:[[\"treePineSnowRound\",200,2,7,1],[\"rockB\",50,1,3,0,[[\"rock.001\",5918017]]]]},Desert:{fog:15005690,sky:12446963,ground:10777144,hemi:[16770732,4142384,.605],sun:[16763989,1,0,100,50],models:[[\"palmDetailed\",200,1,2.8,1],[\"grassLarge\",50,1,3,0,[[\"foliage\",4225055]]],[\"rockB\",50,1,3,0]]},Forest:{fog:15005690,sky:12446963,ground:5535813,hemi:[16770732,4142384,.45],sun:[16763989,1,0,100,-50],models:[[\"treePine\",250,3,8,1,[[\"leafsDark\",1274191],[\"woodBarkDark\",12606262]]],[\"grassLarge\",50,1,3,0,[[\"foliage\",4225055]]],[\"rockB\",50,1,3,0,[[\"rock.001\",5918017]]]]}};const data=biomes[biomeName];const speedSettings=[{acc:45e-5,dec:453e-6,max:.03,min:.004},{acc:3e-4,dec:305e-6,max:.03,min:.004}];';\r\n\r\n        // Step 3.\r\n        // - pull the gzipped 3D models from scriptyStorage\r\n        //   I could have stored on EthFS, but wanted to show that pulling from\r\n        //   another contract is possible.\r\n        // - custom wrap to declare the data as a JS compatible variable\r\n        // - wrapType 4 w/ script content and custom wraps\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L648\r\n        // <script>var gzipModels=\"[coaster_models_v8]\"</script>\r\n\r\n        requests[3].name = \"coaster_models_v8\";\r\n        requests[3].wrapType = 4;\r\n        requests[3].wrapPrefix = \"%253Cscript%253Evar%2520gzipModels%2520%253D%2522\";\r\n        requests[3].wrapSuffix = \"%2522%253C%252Fscript%253E\";\r\n        requests[3].contractAddress = _scriptyStorageAddress;\r\n\r\n        // Step 4.\r\n        // - pull the gzipped threeJS lib from EthFS\r\n        // - wrapType 2 will handle the gzip script wrappers\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L642\r\n        // <script type=\"text/javascript+gzip\" src=\"data:text/javascript;base64,[three-v0.147.0.min.js.gz]\"></script>\r\n\r\n        requests[4].name = \"three-v0.147.0.min.js.gz\";\r\n        requests[4].wrapType = 2;\r\n        requests[4].contractAddress = _ethfsFileStorageAddress;\r\n\r\n        // Step 5.\r\n        // - pull the coaster code from scriptyStorage\r\n        //   I could have stored on EthFS, but wanted to show that pulling from\r\n        //   another contract is possible.\r\n        // - wrapType 2 will handle the gzip script wrappers\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L642\r\n        // <script type=\"text/javascript+gzip\" src=\"data:text/javascript;base64,[cryptoCoaster.min.js.gz]\"></script>\r\n\r\n        requests[5].name = \"cryptoCoaster.min.js.gz_v2\";\r\n        requests[5].wrapType = 2;\r\n        requests[5].contractAddress = _scriptyStorageAddress;\r\n\r\n        // Step 6.\r\n        // - pull the gunzip handler from EthFS\r\n        // - wrapType 1 will handle the script tags\r\n        //\r\n        // Final Output:\r\n        // https://github.com/intartnft/scripty.sol/blob/main/contracts/scripty/ScriptyBuilder.sol#L638\r\n        // <script src=\"data:text/javascript;base64,[gunzipScripts-0.0.1.js]\"></script>\r\n\r\n        requests[6].name = \"gunzipScripts-0.0.1.js\";\r\n        requests[6].wrapType = 1;\r\n        requests[6].contractAddress = _ethfsFileStorageAddress;\r\n\r\n        bytes memory json = abi.encodePacked(\r\n            '{\"name\":\"',\r\n            'Track: #',\r\n            tokenIdString,\r\n            '\", \"description\":\"',\r\n            'Crypto Coaster is an experiment to see just how far we can push on-chain NFTs. All the models and code are compressed then stored, and retrieved from the blockchain.',\r\n            '\",\"image\":\"data:image/svg+xml;base64,',\r\n            thumbnail,\r\n            '\",\"animation_url\":\"',\r\n            buildAnimationURI(requests),\r\n            '\",',\r\n            attr,\r\n            '}'\r\n        );\r\n\r\n        return string(\r\n            abi.encodePacked(\r\n                \"data:application/json,\",\r\n                json\r\n            )\r\n        );\r\n    }\r\n\r\n    /*=========================================================================================\r\n       .-'--`-._                             GETTER\r\n       '-O---O--'                            LOGIC\r\n    =========================================================================================*/\r\n\r\n    /**\r\n     * @notice Grab settings for given Id\r\n     * @dev Can do fun stuff with settings in the future :)\r\n     *      On the minting app we use this to grab the settings and create each coaster without having\r\n     *      to call tokenURI()\r\n     * @param tokenId - Id of chosen token\r\n     * @return settings - All settings as a struct\r\n     */\r\n    function getSettings(uint256 tokenId) public view returns (Settings memory settings) {\r\n        if (!_exists(tokenId)) return settings;\r\n        return buildSettings(SmallSolady.toString(tokenId));\r\n    }\r\n}\r\n/**======================================================================================\r\n   .-'--`-._                           .-'--`-._                           .-'--`-._\r\n   '-O---O--'                          '-O---O--'                          '-O---O--'\r\n=========================================================================================*/"
    },
    "contracts/ICryptoCoaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nstruct Settings {\r\n    uint256 seed;\r\n    uint256 biomeIDX;\r\n    string biomeName;\r\n//    uint256 color;\r\n//    string colorHex;\r\n//    string colorName;\r\n    Color color;\r\n    uint256 scale;\r\n    uint256 speed;\r\n    uint256 flip;\r\n    bytes[6] vars;\r\n}\r\n\r\nstruct Color {\r\n    string name;\r\n    string trackHex;\r\n    string iconHex;\r\n}"
    },
    "contracts/lib/scripty/IScriptyBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n///////////////////////////////////////////////////////////\r\n// ░██████╗░█████╗░██████╗░██╗██████╗░████████╗██╗░░░██╗ //\r\n// ██╔════╝██╔══██╗██╔══██╗██║██╔══██╗╚══██╔══╝╚██╗░██╔╝ //\r\n// ╚█████╗░██║░░╚═╝██████╔╝██║██████╔╝░░░██║░░░░╚████╔╝░ //\r\n// ░╚═══██╗██║░░██╗██╔══██╗██║██╔═══╝░░░░██║░░░░░╚██╔╝░░ //\r\n// ██████╔╝╚█████╔╝██║░░██║██║██║░░░░░░░░██║░░░░░░██║░░░ //\r\n// ╚═════╝░░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░░░░░░░╚═╝░░░░░░╚═╝░░░ //\r\n///////////////////////////////////////////////////////////\r\n\r\n// =============================================================\r\n//                            STRUCTS\r\n// =============================================================\r\n\r\nstruct WrappedScriptRequest {\r\n    string name;\r\n    address contractAddress;\r\n    bytes contractData;\r\n    uint8 wrapType;\r\n    bytes wrapPrefix;\r\n    bytes wrapSuffix;\r\n    bytes scriptContent;\r\n}\r\n\r\nstruct InlineScriptRequest {\r\n    string name;\r\n    address contractAddress;\r\n    bytes contractData;\r\n    bytes scriptContent;\r\n}\r\n\r\ninterface IScriptyBuilder {\r\n\r\n    // =============================================================\r\n    //                            ERRORS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @notice Error for, Invalid length of requests\r\n     */\r\n    error InvalidRequestsLength();\r\n\r\n    // =============================================================\r\n    //                      RAW HTML GETTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @notice Get requested scripts housed in <body> with custom wrappers\r\n     * @dev Your requested scripts are returned in the following format:\r\n     *      <html>\r\n     *          <head></head>\r\n     *          <body style='margin:0;'>\r\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\r\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\r\n     *              ...\r\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\r\n     *          </body>\r\n     *      </html>\r\n     * @param requests - Array of WrappedScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return Full html wrapped scripts\r\n     */\r\n    function getHTMLWrapped(\r\n        WrappedScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (bytes memory);\r\n\r\n    /**\r\n     * @notice Get requested scripts housed in URL Safe wrappers\r\n     * @dev Any wrapper type 0 scripts are converted to base64 and wrapped\r\n     *      with <script src=\"data:text/javascript;base64,[SCRIPT]\"></script>\r\n     *\r\n     *      [WARNING]: Large non-base64 libraries that need base64 encoding\r\n     *      carry a high risk of causing a gas out. Highly advised to use\r\n     *      base64 encoded scripts where possible\r\n     *\r\n     *      Your requested scripts are returned in the following format:\r\n     *      <html>\r\n     *          <head></head>\r\n     *          <body style='margin:0;'>\r\n     *              [wrapPrefix[0]]{request[0]}[wrapSuffix[0]]\r\n     *              [wrapPrefix[1]]{request[1]}[wrapSuffix[1]]\r\n     *              ...\r\n     *              [wrapPrefix[n]]{request[n]}[wrapSuffix[n]]\r\n     *          </body>\r\n     *      </html>\r\n     * @param requests - Array of WrappedScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return Full URL Safe wrapped scripts\r\n     */\r\n    function getHTMLWrappedURLSafe(\r\n        WrappedScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (bytes memory);\r\n\r\n    /**\r\n     * @notice Get requested scripts housed in <body> all wrapped in <script></script>\r\n     * @dev Your requested scripts are returned in the following format:\r\n     *      <html>\r\n     *          <head></head>\r\n     *          <body style='margin:0;'>\r\n     *              <script>\r\n     *                  {request[0]}\r\n     *                  {request[1]}\r\n     *                  ...\r\n     *                  {request[n]}\r\n     *              </script>\r\n     *          </body>\r\n     *      </html>\r\n     * @param requests - Array of InlineScriptRequest\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return Full html wrapped scripts\r\n     */\r\n    function getHTMLInline(\r\n        InlineScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (bytes memory);\r\n\r\n    // =============================================================\r\n    //                      ENCODED HTML GETTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @notice Get {getHTMLWrapped} and base64 encode it\r\n     * @param requests - Array of WrappedScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return Full html wrapped scripts, base64 encoded\r\n     */\r\n    function getEncodedHTMLWrapped(\r\n        WrappedScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (bytes memory);\r\n\r\n    /**\r\n     * @notice Get {getHTMLInline} and base64 encode it\r\n     * @param requests - Array of InlineScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return Full html wrapped scripts, base64 encoded\r\n     */\r\n    function getEncodedHTMLInline(\r\n        InlineScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (bytes memory);\r\n\r\n    // =============================================================\r\n    //                      STRING UTILITIES\r\n    // =============================================================\r\n\r\n    /**\r\n     * @notice Convert {getHTMLWrapped} output to a string\r\n     * @param requests - Array of WrappedScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return {getHTMLWrapped} as a string\r\n     */\r\n    function getHTMLWrappedString(\r\n        WrappedScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Convert {getHTMLInline} output to a string\r\n     * @param requests - Array of InlineScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     * @return {getHTMLInline} as a string\r\n     */\r\n    function getHTMLInlineString(\r\n        InlineScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Convert {getEncodedHTMLWrapped} output to a string\r\n     * @param requests - Array of WrappedScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     *                     before encoding.\r\n     * @return {getEncodedHTMLWrapped} as a string\r\n     */\r\n    function getEncodedHTMLWrappedString(\r\n        WrappedScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Convert {getEncodedHTMLInline} output to a string\r\n     * @param requests - Array of InlineScriptRequests\r\n     * @param bufferSize - Total buffer size of all requested scripts\r\n     *                     before encoding.\r\n     * @return {getEncodedHTMLInline} as a string\r\n     */\r\n    function getEncodedHTMLInlineString(\r\n        InlineScriptRequest[] calldata requests,\r\n        uint256 bufferSize\r\n    ) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                      OFF-CHAIN UTILITIES\r\n    // =============================================================\r\n\r\n    /**\r\n     * @notice Get the buffer size of a single inline requested code\r\n     * @param request - InlineScriptRequest data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getInlineScriptSize(InlineScriptRequest memory request)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size of a single wrapped requested code\r\n     * @param request - WrappedScriptRequest data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getWrappedScriptSize(WrappedScriptRequest memory request)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size of a single wrapped requested code\r\n     * @dev If the script is of wrapper type 0, we get buffer size for\r\n     *      base64 encoded version.\r\n     * @param request - WrappedScriptRequest data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getURLSafeWrappedScriptSize(WrappedScriptRequest memory request)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size of an array of html wrapped inline scripts\r\n     * @param requests - InlineScriptRequests data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getBufferSizeForHTMLInline(InlineScriptRequest[] calldata requests)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size of an array of html wrapped, wrapped scripts\r\n     * @param requests - WrappedScriptRequests data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getBufferSizeForHTMLWrapped(\r\n        WrappedScriptRequest[] calldata requests\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size of an array of URL safe html wrapped scripts\r\n     * @param requests - WrappedScriptRequests data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getBufferSizeForURLSafeHTMLWrapped(\r\n        WrappedScriptRequest[] calldata requests\r\n    ) external view returns (uint256);\r\n    \r\n    /**\r\n     * @notice Get the buffer size for encoded HTML inline scripts\r\n     * @param requests - InlineScriptRequests data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getBufferSizeForEncodedHTMLInline(\r\n        InlineScriptRequest[] calldata requests\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Get the buffer size for encoded HTML inline scripts\r\n     * @param requests - InlineScriptRequests data for code\r\n     * @return Buffer size as an unit256\r\n     */\r\n    function getBufferSizeForEncodedHTMLWrapped(\r\n        WrappedScriptRequest[] calldata requests\r\n    ) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/lib/SmallSolady.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/// @notice Library created from cherry picked parts of Solady\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src)\r\nlibrary SmallSolady {\r\n\r\n    /// @dev Returns the base 10 decimal representation of `value`.\r\n    function toString(uint256 value) internal pure returns (string memory str) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\r\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\r\n            // and 3 words for a maximum of 78 digits.\r\n            str := add(mload(0x40), 0x80)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, add(str, 0x20))\r\n            // Zeroize the slot after the string.\r\n            mstore(str, 0)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            let w := not(0) // Tsk.\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            for { let temp := value } 1 {} {\r\n                str := add(str, w) // `sub(str, 1)`.\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n\r\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\r\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\r\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\r\n    /// @param noPadding Whether to strip away the padding.\r\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\r\n    internal\r\n    pure\r\n    returns (string memory result)\r\n    {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let dataLength := mload(data)\r\n\r\n            if dataLength {\r\n                // Multiply by 4/3 rounded up.\r\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\r\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\r\n\r\n                // Set `result` to point to the start of the free memory.\r\n                result := mload(0x40)\r\n\r\n                // Store the table into the scratch space.\r\n                // Offsetted by -1 byte so that the `mload` will load the character.\r\n                // We will rewrite the free memory pointer at `0x40` later with\r\n                // the allocated size.\r\n                // The magic constant 0x0230 will translate \"-_\" + \"+/\".\r\n                mstore(0x1f, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\")\r\n                mstore(0x3f, sub(\"ghijklmnopqrstuvwxyz0123456789-_\", mul(iszero(fileSafe), 0x0230)))\r\n\r\n                // Skip the first slot, which stores the length.\r\n                let ptr := add(result, 0x20)\r\n                let end := add(ptr, encodedLength)\r\n\r\n                // Run over the input, 3 bytes at a time.\r\n                for {} 1 {} {\r\n                    data := add(data, 3) // Advance 3 bytes.\r\n                    let input := mload(data)\r\n\r\n                    // Write 4 bytes. Optimized for fewer stack operations.\r\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\r\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\r\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\r\n                    mstore8(3, mload(and(input, 0x3F)))\r\n                    mstore(ptr, mload(0x00))\r\n\r\n                    ptr := add(ptr, 4) // Advance 4 bytes.\r\n\r\n                    if iszero(lt(ptr, end)) { break }\r\n                }\r\n\r\n                // Allocate the memory for the string.\r\n                // Add 31 and mask with `not(31)` to round the\r\n                // free memory pointer up the next multiple of 32.\r\n                mstore(0x40, and(add(end, 31), not(31)))\r\n\r\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\r\n                let o := div(2, mod(dataLength, 3))\r\n\r\n                // Offset `ptr` and pad with '='. We can simply write over the end.\r\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\r\n                // Set `o` to zero if there is padding.\r\n                o := mul(iszero(iszero(noPadding)), o)\r\n                // Zeroize the slot after the string.\r\n                mstore(sub(ptr, o), 0)\r\n                // Write the length of the string.\r\n                mstore(result, sub(encodedLength, o))\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\r\n    /// Equivalent to `encode(data, false, false)`.\r\n    function encode(bytes memory data) internal pure returns (string memory result) {\r\n        result = encode(data, false, false);\r\n    }\r\n}\r\n"
    },
    "contracts/Thumbnail.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./ICryptoCoaster.sol\";\r\n\r\ncontract Thumbnail {\r\n\r\n    bytes constant BASE = '<path class=\"l1\" d=\"M.006 0h511.993v383.997H.002C-.006 263.19.006 0 .006 0Z\"/><path class=\"l2\" d=\"M512 229.868s-68.63 47.607-139.47 44.655c-70.842-2.952-146.81-30.585-146.81-30.585s-106.132-43.602-151.091-43.431C29.669 200.677 0 215.187 0 215.187v230.136h512z\"/><path class=\"l3\" d=\"M147.137 117.002c-50.043.204-93.869 28.627-98.075 75.914v158.74l417.184 16.867s-2.445-95.713-4.414-113.525c-1.968-17.812-15.591-40.98-51.71-41.324-28.638-.273-61.043 19.505-78.653 27.137-.753-.352-20.145-16.8-42.336-39.014-22.856-22.878-32.808-36.846-52.028-52.137-17.91-14.25-47.157-32.92-89.968-32.658zm3.408 16.95c1.298-.014 2.408-.006 3.3.01 14.278.27 43.839 4.066 68.817 25.388 15.679 13.383 20.343 17.772 48.813 46.607 23.333 23.633 44.779 44.23 44.779 44.23s-59.769 36.223-141.61 33.338c-21.365-.753-53.836-6.784-77.302-26.586-12.04-10.16-35.255-32.383-33.112-57.83 5.031-59.724 66.844-64.958 86.315-65.158z\"/><path class=\"l4\" d=\"M0 296.545s68.63 47.607 139.47 44.655c70.842-2.953 146.81-30.585 146.81-30.585s106.132-43.602 151.091-43.432c44.96.17 74.629 14.681 74.629 14.681V512H0Z\"/><path class=\"l3\" d=\"M157.625 128.372h6.743v157.647h-6.743z\"/><path class=\"l3\" d=\"M175.378 129.993h6.743V287.64h-6.743z\"/><path class=\"l3\" d=\"M193.131 134.176h6.743v157.647h-6.743z\"/><path class=\"l3\" d=\"M210.878 147.926h6.743v141.647h-6.743z\"/><path class=\"l3\" d=\"M228.628 160.176h6.743v123.513h-6.743z\"/><path class=\"l3\" d=\"M246.378 177.744h6.743v105.945h-6.743z\"/><path class=\"l3\" d=\"M264.128 194.789h6.743v83.195h-6.743z\"/><path class=\"l3\" d=\"M281.878 213h6.743v59.523h-6.743z\"/><path class=\"l3\" d=\"M299.628 228.239h6.743v38.944h-6.743z\"/><path class=\"l3\" d=\"M68.878 157.542h6.743v83.05h-6.743z\"/><path class=\"l3\" d=\"M86.628 143.975h6.743v123.208h-6.743z\"/><path class=\"l3\" d=\"M104.378 137.463h6.743v136.232h-6.743z\"/><path class=\"l3\" d=\"M122.128 130.951h6.743v149.257h-6.743z\"/><path class=\"l3\" d=\"M139.878 128.372h6.743v155.317h-6.743z\"/>';\r\n\r\n    bytes constant SUN = '<circle cx=\"448.545\" cy=\"71.741\" r=\"38.217\" style=\"fill:#fff\"/>';\r\n\r\n    bytes constant SNOW = '<style>.sn{fill:#fff}</style><circle class=\"sn\" cx=\"208.174\" cy=\"102.449\" r=\"4.848\"/><circle class=\"sn\" cx=\"125.499\" cy=\"36.538\" r=\"4.848\"/><circle class=\"sn\" cx=\"73.118\" cy=\"90.464\" r=\"7.136\"/><circle class=\"sn\" cx=\"349.836\" cy=\"125.563\" r=\"5.992\"/><circle class=\"sn\" cx=\"428.432\" cy=\"26.94\" r=\"5.992\"/><circle class=\"sn\" cx=\"390.254\" cy=\"92.982\" r=\"4.619\"/><circle class=\"sn\" cx=\"483.828\" cy=\"190.385\" r=\"4.619\"/><circle class=\"sn\" cx=\"473.288\" cy=\"114.821\" r=\"4.619\"/><circle class=\"sn\" cx=\"337.348\" cy=\"226.96\" r=\"5.992\"/><circle class=\"sn\" cx=\"63.308\" cy=\"206.578\" r=\"11.942\"/><circle class=\"sn\" cx=\"257.836\" cy=\"74.299\" r=\"5.077\"/><circle class=\"sn\" cx=\"288.372\" cy=\"139.537\" r=\"5.077\"/><circle class=\"sn\" cx=\"207.259\" cy=\"16.399\" r=\"4.848\"/><circle class=\"sn\" cx=\"168.013\" cy=\"68.994\" r=\"7.365\"/><circle class=\"sn\" cx=\"452.046\" cy=\"69.223\" r=\"7.594\"/><circle class=\"sn\" cx=\"417.821\" cy=\"170.136\" r=\"4.619\"/><circle class=\"sn\" cx=\"102.541\" cy=\"304.314\" r=\"4.619\"/><circle class=\"sn\" cx=\"200.622\" cy=\"139.295\" r=\"5.077\"/><circle class=\"sn\" cx=\"50.95\" cy=\"162.409\" r=\"7.594\"/><circle class=\"sn\" cx=\"257.149\" cy=\"289.195\" r=\"5.534\"/><circle class=\"sn\" cx=\"406.92\" cy=\"226.045\" r=\"5.534\"/><circle class=\"sn\" cx=\"462.303\" cy=\"217.806\" r=\"5.534\"/><circle class=\"sn\" cx=\"324.433\" cy=\"36.538\" r=\"7.136\"/><circle class=\"sn\" cx=\"350.98\" cy=\"174.755\" r=\"7.136\"/><circle class=\"sn\" cx=\"126.472\" cy=\"257.613\" r=\"6.221\"/><circle class=\"sn\" cx=\"46.602\" cy=\"42.717\" r=\"11.942\"/><circle class=\"sn\" cx=\"24.424\" cy=\"256\" r=\"7.365\"/>';\r\n\r\n    bytes constant TREES = '<path style=\"fill:#97ad89\" d=\"m473.282 208.809-3.703 21.978-3.708 21.983 2.767-.624-2.256 17.652a145.48 145.48 0 0 1 15.029 2.759l-2.895-22.644 4.081-.922-4.656-20.093zm-441.281 3.439L24.957 268.1l-5.144 40.794a82.398 82.398 0 0 0 4.218 2.275c3.654 1.814 7.361 3.515 10.959 5.435a100.553 100.553 0 0 0 6.25 3.057c1.512.68 3.031 1.33 4.558 1.976l-6.753-53.537z\"/><path style=\"fill:#c6e9af\" d=\"m491.066 193.394-6.209 25.508-6.205 25.509 5.608 1.209-.317 1.738-4.88 26.48a150.01 150.01 0 0 1 12.558 3.242c3.96 1.213 7.868 2.592 11.693 4.195 2.645 1.107 7.218 2.902 8.446 3.386l-2.067-18.117-3.851-33.81-3.855 33.81-.786 6.916-4.64-25.191 4.38.945-4.94-27.912zm-470.913 34.6L11.3 257.086l-8.865 29.091 6.764.688L6.1 302.758c2.887 1.739 5.775 3.48 8.688 5.181 3.065 1.792 6.103 3.658 9.285 5.23 2.256 1.12 4.524 2.207 6.78 3.315l-5.457-27.972 3.522.355-4.38-30.436zm24.488 40.38-7.41 37.993-2.37 12.142.19.095a98.76 98.76 0 0 0 6.261 3.057c2.951 1.323 5.948 2.547 8.926 3.817 3 1.194 4.667 1.87 6.012 2.392l-4.194-21.503zm468.218 25.969-.004 6.008h.692z\"/>';\r\n\r\n    bytes constant SINGLE_CHEVERON = '<path class=\"l2\" d=\"M8.487 0A8.487 8.487 0 0 0 0 8.487a8.487 8.487 0 0 0 8.487 8.488 8.487 8.487 0 0 0 8.488-8.488A8.487 8.487 0 0 0 8.487 0zm0 5.095c.114 0 .212.041.295.124l4.865 4.858a.407.407 0 0 1 .125.299.407.407 0 0 1-.125.298l-1.088 1.081a.404.404 0 0 1-.295.125.404.404 0 0 1-.295-.125l-3.482-3.48-3.48 3.48a.404.404 0 0 1-.296.125.404.404 0 0 1-.295-.125l-1.088-1.081a.407.407 0 0 1-.125-.298c0-.116.042-.216.125-.299L8.192 5.22a.403.403 0 0 1 .295-.124z\"/>';\r\n\r\n    bytes constant DOUBLE_CHEVERON = '<path class=\"l2\" d=\"M0 8.487A8.487 8.487 0 0 0-8.487 0a8.487 8.487 0 0 0-8.488 8.487 8.487 8.487 0 0 0 8.488 8.488A8.487 8.487 0 0 0 0 8.487zm-3.664 0c0 .09-.033.167-.098.232l-3.816 3.821a.32.32 0 0 1-.234.098.32.32 0 0 1-.235-.098l-.85-.855a.316.316 0 0 1-.097-.231c0-.09.033-.167.098-.232l2.735-2.735-2.735-2.734a.316.316 0 0 1-.098-.231c0-.09.033-.167.098-.232l.85-.855a.32.32 0 0 1 .234-.098c.091 0 .169.033.234.098l3.816 3.82a.316.316 0 0 1 .098.232zm-4.317 0c0 .09-.033.167-.098.232l-3.816 3.821a.32.32 0 0 1-.234.098.319.319 0 0 1-.234-.098l-.85-.855a.316.316 0 0 1-.098-.231c0-.09.033-.167.098-.232l2.735-2.735-2.735-2.734a.316.316 0 0 1-.098-.231c0-.09.033-.167.098-.232l.85-.855a.319.319 0 0 1 .234-.098c.091 0 .169.033.234.098l3.816 3.82a.317.317 0 0 1 .098.232z\" transform=\"rotate(-90)\"/>';\r\n\r\n    bytes constant FACING = '<path class=\"l2\" d=\"M8.487 0A8.487 8.487 0 0 0 0 8.487a8.487 8.487 0 0 0 8.487 8.488 8.487 8.487 0 0 0 8.488-8.488A8.487 8.487 0 0 0 8.487 0zm1.48 4.337c.092 0 .17.033.235.098l3.816 3.82a.316.316 0 0 1 .097.232c0 .09-.032.167-.097.232l-3.816 3.821a.32.32 0 0 1-.234.098.32.32 0 0 1-.235-.098l-.85-.855a.316.316 0 0 1-.097-.231c0-.09.032-.167.098-.232l2.734-2.735-2.734-2.734a.316.316 0 0 1-.098-.231c0-.09.032-.167.098-.232l.85-.855a.32.32 0 0 1 .234-.098zm-4.579.9a1.445 1.445 0 0 1 0 2.89A1.445 1.445 0 0 1 3.943 6.68a1.445 1.445 0 0 1 1.445-1.445zm0 3.612a2.529 2.529 0 0 1 2.529 2.529.361.361 0 0 1-.361.36H3.22a.361.361 0 0 1-.36-.36 2.529 2.529 0 0 1 2.528-2.529z\"/>';\r\n\r\n    bytes constant WANG = '<path class=\"l2\" d=\"M348.918 441.374a32.079 32.079 0 0 0-32.079 32.078 32.079 32.079 0 0 0 32.079 32.08 32.079 32.079 0 0 0 32.08-32.08 32.079 32.079 0 0 0-32.08-32.078zm-12.29 13.642h24.58a2.048 2.048 0 0 1 2.05 2.05 14.339 14.339 0 0 1-28.678 0 2.048 2.048 0 0 1 2.049-2.05zm12.29 20.485a8.193 8.193 0 0 1 8.193 8.193 8.193 8.193 0 1 1-8.193-8.193z\" transform=\"matrix(.26458 0 0 .26458 -83.83 -116.78)\"/>';\r\n\r\n    bytes constant TRACK = '<path class=\"trackColor\" d=\"M8.487 0A8.487 8.487 0 0 0 0 8.487a8.487 8.487 0 0 0 8.487 8.488 8.487 8.487 0 0 0 8.488-8.488A8.487 8.487 0 0 0 8.487 0zM5.188 3.312h1.5a.44.44 0 0 1 .442.441v.307h2.715v-.307a.44.44 0 0 1 .441-.441h1.5a.44.44 0 0 1 .442.441v9.468a.44.44 0 0 1-.441.442h-1.5a.44.44 0 0 1-.442-.442v-.367H7.13v.367a.44.44 0 0 1-.442.442h-1.5a.44.44 0 0 1-.441-.442V3.753a.44.44 0 0 1 .441-.441zm1.942 2.1V6.54h2.715V5.413H7.13zm0 2.481V9.02h2.715V7.893H7.13zm0 2.48v1.128h2.715v-1.127H7.13z\"/>';\r\n\r\n    /**\r\n     * @dev Array order\r\n     *      0. Snow\r\n     *      1. Forest\r\n     *      2. Desert\r\n     */\r\n    string[3] STYLES = [\r\n        '<style>.l1{fill:#d9eaf1}.l2{fill:#8b9a9f}.l3{fill:#bfd3da}.l4{fill:#ffffff}</style>',\r\n        '<style>.l1{fill:#f2fee8}.l2{fill:#615f60}.l3{fill:#9bac8c}.l4{fill:#cce8b5}</style>',\r\n        '<style>.l1{fill:#fea}.l2{fill:#ffc460}.l3{fill:#cca066}.l4{fill:#ffffda}</style>'\r\n    ];\r\n\r\n    /**\r\n     * @notice Build the SVG thumbnail\r\n     * @param settings - Track settings struct\r\n     * @return final svg as bytes\r\n     */\r\n    function buildThumbnail(Settings calldata settings) external view returns(bytes memory) {\r\n\r\n        // Default to SNOW\r\n        bytes memory biomeExtra = SNOW;\r\n        if (settings.biomeIDX == 1) biomeExtra = TREES;\r\n        else if (settings.biomeIDX == 2) biomeExtra = SUN;\r\n\r\n        return abi.encodePacked(\r\n            '<svg preserveAspectRatio=\"xMidYMid meet\" width=\"100%\" viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">',\r\n            STYLES[settings.biomeIDX],\r\n            BASE,\r\n            biomeExtra,\r\n            addIcons(settings),\r\n            '</svg>'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Pack att the icons into SVGs\r\n     * @param settings - Track settings struct\r\n     * @return icons as bytes\r\n     */\r\n    function addIcons(Settings memory settings) internal pure returns(bytes memory) {\r\n        return abi.encodePacked(\r\n            '<svg x=\"20px\" y=\"446\"><g transform=\"scale(3, 3)\">',\r\n            '<svg x=\"0\">', buildSize(settings.scale), '</svg>',\r\n            '<svg x=\"20\">', buildTrackColor(settings.color.iconHex), '</svg>',\r\n            '<svg x=\"40\">', buildSpeed(settings.speed), '</svg>',\r\n            '<svg x=\"60\">', buildFacing(settings.flip), '</svg>',\r\n            '</g></svg>'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Handle track color styling for SVG\r\n     * @param colorHex - Color settings\r\n     * @return track color icon path with styling as bytes\r\n     */\r\n    function buildTrackColor(string memory colorHex) internal pure returns(bytes memory) {\r\n        return abi.encodePacked(\r\n            '<style>.trackColor{fill:', colorHex, '}</style>',\r\n            TRACK\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Handle train orientation styling for SVG\r\n     * @param flip - Train orientation settings\r\n     * @return train orientation icon path with styling as bytes\r\n     */\r\n    function buildFacing(uint256 flip) internal pure returns(bytes memory) {\r\n        if (flip == 1) {\r\n            return abi.encodePacked(\r\n                '<g transform=\"scale(-1,1) translate(-16.975,0)\">',\r\n                FACING,\r\n                '</g>'\r\n            );\r\n        }\r\n\r\n        if (flip == 2) return WANG;\r\n\r\n        return FACING;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle world scale styling for SVG\r\n     * @param scale - Scale settings\r\n     * @return world scale icon path with styling as bytes\r\n     */\r\n    function buildSize(uint256 scale) internal pure returns(bytes memory) {\r\n        return (scale == 1) ? SINGLE_CHEVERON : DOUBLE_CHEVERON;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle train speed styling for SVG\r\n     * @param speed - Speed settings\r\n     * @return train speed icon path with styling as bytes\r\n     */\r\n    function buildSpeed(uint256 speed) internal pure returns(bytes memory) {\r\n        bytes memory icon = (speed == 1) ? SINGLE_CHEVERON : DOUBLE_CHEVERON;\r\n        return abi.encodePacked(\r\n            '<g transform=\"rotate(90 8.4875 8.4875)\">',\r\n            icon,\r\n            '</g>'\r\n        );\r\n    }\r\n}"
    },
    "erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\n        uint256 curr = tokenId;\n\n        unchecked {\n            if (_startTokenId() <= curr)\n                if (curr < _currentIndex) {\n                    uint256 packed = _packedOwnerships[curr];\n                    // If not burned.\n                    if (packed & _BITMASK_BURNED == 0) {\n                        // Invariant:\n                        // There will always be an initialized ownership slot\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                        // before an unintialized ownership slot\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                        // Hence, `curr` will not underflow.\n                        //\n                        // We can directly compare the packed value.\n                        // If the address is zero, packed will be zero.\n                        while (packed == 0) {\n                            packed = _packedOwnerships[--curr];\n                        }\n                        return packed;\n                    }\n                }\n        }\n        revert OwnerQueryForNonexistentToken();\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        address owner = ownerOf(tokenId);\n\n        if (_msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                revert ApprovalCallerNotOwnerNorApproved();\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n\n        if (to == address(0)) revert TransferToZeroAddress();\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                revert TransferToNonERC721ReceiverImplementer();\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                revert TransferToNonERC721ReceiverImplementer();\n            } else {\n                assembly {\n                    revert(add(32, reason), mload(reason))\n                }\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) revert MintZeroQuantity();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            uint256 toMasked;\n            uint256 end = startTokenId + quantity;\n\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\n            // The assembly, together with the surrounding Solidity code, have been\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\n            assembly {\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n                toMasked := and(to, _BITMASK_ADDRESS)\n                // Emit the `Transfer` event.\n                log4(\n                    0, // Start of data (0, since no data).\n                    0, // End of data (0, since no data).\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\n                    0, // `address(0)`.\n                    toMasked, // `to`.\n                    startTokenId // `tokenId`.\n                )\n\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n                // The compiler will optimize the `iszero` away for performance.\n                for {\n                    let tokenId := add(startTokenId, 1)\n                } iszero(eq(tokenId, end)) {\n                    tokenId := add(tokenId, 1)\n                } {\n                    // Emit the `Transfer` event. Similar to above.\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\n                }\n            }\n            if (toMasked == 0) revert MintToZeroAddress();\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) revert MintToZeroAddress();\n        if (quantity == 0) revert MintZeroQuantity();\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        revert TransferToNonERC721ReceiverImplementer();\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) revert();\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n}\n"
    },
    "erc721a/contracts/extensions/ERC721ABurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721ABurnable.sol';\nimport '../ERC721A.sol';\n\n/**\n * @title ERC721ABurnable.\n *\n * @dev ERC721A token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721ABurnable is ERC721A, IERC721ABurnable {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual override {\n        _burn(tokenId, true);\n    }\n}\n"
    },
    "erc721a/contracts/extensions/ERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721AQueryable.sol';\nimport '../ERC721A.sol';\n\n/**\n * @title ERC721AQueryable.\n *\n * @dev ERC721A subclass with convenience query functions.\n */\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\n        TokenOwnership memory ownership;\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\n            return ownership;\n        }\n        ownership = _ownershipAt(tokenId);\n        if (ownership.burned) {\n            return ownership;\n        }\n        return _ownershipOf(tokenId);\n    }\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\n        external\n        view\n        virtual\n        override\n        returns (TokenOwnership[] memory)\n    {\n        unchecked {\n            uint256 tokenIdsLength = tokenIds.length;\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\n            for (uint256 i; i != tokenIdsLength; ++i) {\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\n            }\n            return ownerships;\n        }\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            if (start >= stop) revert InvalidQueryRange();\n            uint256 tokenIdsIdx;\n            uint256 stopLimit = _nextTokenId();\n            // Set `start = max(start, _startTokenId())`.\n            if (start < _startTokenId()) {\n                start = _startTokenId();\n            }\n            // Set `stop = min(stop, stopLimit)`.\n            if (stop > stopLimit) {\n                stop = stopLimit;\n            }\n            uint256 tokenIdsMaxLength = balanceOf(owner);\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n            // to cater for cases where `balanceOf(owner)` is too big.\n            if (start < stop) {\n                uint256 rangeLength = stop - start;\n                if (rangeLength < tokenIdsMaxLength) {\n                    tokenIdsMaxLength = rangeLength;\n                }\n            } else {\n                tokenIdsMaxLength = 0;\n            }\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\n            if (tokenIdsMaxLength == 0) {\n                return tokenIds;\n            }\n            // We need to call `explicitOwnershipOf(start)`,\n            // because the slot at `start` may not be initialized.\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\n            address currOwnershipAddr;\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\n            if (!ownership.burned) {\n                currOwnershipAddr = ownership.addr;\n            }\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            // Downsize the array to fit.\n            assembly {\n                mstore(tokenIds, tokenIdsIdx)\n            }\n            return tokenIds;\n        }\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            uint256 tokenIdsIdx;\n            address currOwnershipAddr;\n            uint256 tokenIdsLength = balanceOf(owner);\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\n            TokenOwnership memory ownership;\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\n                ownership = _ownershipAt(i);\n                if (ownership.burned) {\n                    continue;\n                }\n                if (ownership.addr != address(0)) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                if (currOwnershipAddr == owner) {\n                    tokenIds[tokenIdsIdx++] = i;\n                }\n            }\n            return tokenIds;\n        }\n    }\n}\n"
    },
    "erc721a/contracts/extensions/IERC721ABurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721ABurnable.\n */\ninterface IERC721ABurnable is IERC721A {\n    /**\n     * @dev Burns `tokenId`. See {ERC721A-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) external;\n}\n"
    },
    "erc721a/contracts/extensions/IERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721AQueryable.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"
    },
    "erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}