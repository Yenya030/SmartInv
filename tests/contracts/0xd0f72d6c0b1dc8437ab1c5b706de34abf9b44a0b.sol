{{
  "language": "Solidity",
  "sources": {
    "contracts/misc/NFTOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.11;\n\nimport {INFTOracle} from '../interfaces/INFTOracle.sol';\nimport {Ownable} from '../dependencies/openzeppelin/contracts/Ownable.sol';\nimport {Pausable} from '../dependencies/openzeppelin/contracts/Pausable.sol';\n\n/**\n * @title NFTOracle\n * @author Vinci\n **/\ncontract NFTOracle is INFTOracle, Ownable, Pausable {\n\n  // asset address\n  mapping (address => uint256) private _addressIndexes;\n  mapping (address => bool) private _emergencyAdmin;\n  address[] private _addressList;\n  address private _operator;\n\n  // price\n  struct Price {\n    uint32 v1;\n    uint32 v2;\n    uint32 v3;\n    uint32 v4;\n    uint32 v5;\n    uint32 v6;\n    uint32 v7;\n    uint32 ts;\n  }\n  Price private _price;\n  uint256 private constant PRECISION = 1e18;\n  uint256 public constant MAX_PRICE_DEVIATION = 15 * 1e16;  // 15%\n  uint32 public constant MIN_UPDATE_TIME = 30 * 60; // 30 min\n\n  event SetAssetData(uint32[7] prices);\n  event ChangeOperator(address indexed oldOperator, address indexed newOperator);\n  event SetEmergencyAdmin(address indexed admin, bool enabled);\n\n  /// @notice Constructor\n  /// @param assets The addresses of the assets\n  constructor(address[] memory assets) {\n    _operator = _msgSender();\n    _addAssets(assets);\n  }\n\n  function _addAssets(address[] memory addresses) private {\n    uint256 index = _addressList.length + 1;\n    for (uint256 i = 0; i < addresses.length; i++) {\n      address addr = addresses[i];\n      if (_addressIndexes[addr] == 0) {\n        _addressIndexes[addr] = index;\n        _addressList.push(addr);\n        index++;\n      }\n    }\n  }\n\n  function operator() external view returns (address) {\n    return _operator;\n  }\n\n  function isEmergencyAdmin(address admin) external view returns (bool) {\n    return _emergencyAdmin[admin];\n  }\n\n  function getAddressList() external view returns (address[] memory) {\n    return _addressList;\n  }\n\n  function getIndex(address asset) external view returns (uint256) {\n    return _addressIndexes[asset];\n  }\n\n  function addAssets(address[] memory assets) external onlyOwner {\n    require(assets.length > 0);\n    _addAssets(assets);\n  }\n\n  function setPause(bool val) external {\n    require(_emergencyAdmin[_msgSender()], \"NFTOracle: caller is not the emergencyAdmin\");\n    if (val) {\n      _pause();\n    } else {\n      _unpause();\n    }\n  }\n\n  function setOperator(address newOperator) external onlyOwner {\n    require(newOperator != address(0), 'NFTOracle: invalid operator');\n    address oldOperator = _operator;\n    _operator = newOperator;\n    emit ChangeOperator(oldOperator, newOperator);\n  }\n\n  function setEmergencyAdmin(address admin, bool enabled) external onlyOwner {\n    require(admin != address(0), 'NFTOracle: invalid admin');\n    _emergencyAdmin[admin] = enabled;\n    emit SetEmergencyAdmin(admin, enabled);\n  }\n\n  function _getPriceByIndex(uint256 index) private view returns(uint256) {\n    Price memory cachePrice = _price;\n    if (index == 1) {\n      return cachePrice.v1;\n    } else if (index == 2) {\n      return cachePrice.v2;\n    } else if (index == 3) {\n      return cachePrice.v3;\n    } else if (index == 4) {\n      return cachePrice.v4;\n    } else if (index == 5) {\n      return cachePrice.v5;\n    } else if (index == 6) {\n      return cachePrice.v6;\n    } else if (index == 7) {\n      return cachePrice.v7;\n    } else {\n      return 0;\n    }\n  }\n\n  function getLatestTimestamp() external view returns (uint256) {\n    return uint256(_price.ts);\n  }\n\n  // return in Wei\n  function getAssetPrice(address asset) external view returns (uint256) {\n    uint256 price = _getPriceByIndex(_addressIndexes[asset]);\n    return price * 1e14;\n  }\n\n  function getNewPrice(\n    uint256 latestPrice,\n    uint256 currentPrice\n  ) private pure returns (uint256) {\n\n    if (latestPrice == 0) {\n      return currentPrice;\n    }\n\n    if (currentPrice == 0 || currentPrice == latestPrice) {\n      return latestPrice;\n    }\n\n    uint256 percentDeviation;\n    if (latestPrice > currentPrice) {\n      percentDeviation = ((latestPrice - currentPrice) * PRECISION) / latestPrice;\n    } else {\n      percentDeviation = ((currentPrice - latestPrice) * PRECISION) / latestPrice;\n    }\n\n    if (percentDeviation > MAX_PRICE_DEVIATION) {\n      return latestPrice;\n    }\n    return currentPrice;\n  }\n\n  // set with 1e4\n  function batchSetAssetPrice(uint256[7] memory prices) external whenNotPaused {\n    require(_operator == _msgSender(), \"NFTOracle: caller is not the operator\");\n    Price storage cachePrice = _price;\n    uint32 currentTimestamp = uint32(block.timestamp);\n    if ((currentTimestamp - cachePrice.ts) >= MIN_UPDATE_TIME) {\n      uint32[7] memory newPrices = [\n        uint32(getNewPrice(cachePrice.v1, prices[0])),\n        uint32(getNewPrice(cachePrice.v2, prices[1])),\n        uint32(getNewPrice(cachePrice.v3, prices[2])),\n        uint32(getNewPrice(cachePrice.v4, prices[3])),\n        uint32(getNewPrice(cachePrice.v5, prices[4])),\n        uint32(getNewPrice(cachePrice.v6, prices[5])),\n        uint32(getNewPrice(cachePrice.v7, prices[6]))\n      ];\n\n      cachePrice.v1 = newPrices[0];\n      cachePrice.v2 = newPrices[1];\n      cachePrice.v3 = newPrices[2];\n      cachePrice.v4 = newPrices[3];\n      cachePrice.v5 = newPrices[4];\n      cachePrice.v6 = newPrices[5];\n      cachePrice.v7 = newPrices[6];\n      cachePrice.ts = currentTimestamp;\n\n      emit SetAssetData(newPrices);\n    }\n  }\n}\n"
    },
    "contracts/interfaces/INFTOracle.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.11;\n\n/************\n@title INFTOracle interface\n@notice Interface for the NFT price oracle.*/\ninterface INFTOracle {\n\n  /***********\n    @dev returns the nft asset price in wei\n     */\n  function getAssetPrice(address asset) external view returns (uint256);\n\n  /***********\n    @dev returns the addresses of the assets\n  */\n  function getAddressList() external view returns(address[] memory);\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/dependencies/openzeppelin/contracts/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}