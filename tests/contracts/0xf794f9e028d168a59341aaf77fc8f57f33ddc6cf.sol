{{
  "language": "Solidity",
  "sources": {
    "contracts/BaseToken.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"./interfaces/IMembershipToken.sol\";\r\nimport \"./interfaces/IBaseToken.sol\";\r\nimport \"./interfaces/ICombinationToken.sol\";\r\nimport \"./library/CombinableTokenBasis.sol\";\r\n\r\ncontract BaseToken is IBaseToken, CombinableTokenBasis {\r\n    //    using EC\r\n    // <DATA STRUCTS>\r\n\r\n    /** @notice A structure to store main token properties used to mint Combination NFT */\r\n    struct BaseTokenMainTraits {\r\n        /** Material values\r\n            | 1 = Classic | 8 = Titan        |\r\n            | 2 = Gold    | 16 = Unicellular  |\r\n            | 4 = Renim   | 32 = Veganleather |\r\n        */\r\n        uint8 Material;\r\n\r\n        /** Edging values\r\n            | 1 = Classic | 8 = Ornament  |\r\n            | 2 = DNA     | 16 = Shabby    |\r\n            | 4 = French  | 32 = Textline  |\r\n        */\r\n        uint8 Edging;\r\n\r\n        /** Suit values\r\n            | 1 = Clubs    | 4 = Hearts |\r\n            | 2 = Diamonds | 8 = Spades |\r\n        */\r\n        uint8 Suit;\r\n\r\n        /** Rank values\r\n            | 1 = A  | 32 = 6   | 1024 = J |\r\n            | 2 = 2  | 64 = 7   | 2048 = Q |\r\n            | 4 = 3  | 128 = 8  | 4096 = K |\r\n            | 8 = 4  | 256 = 9  |          |\r\n            | 16 = 5 | 512 = 10 |          |\r\n        */\r\n        uint16 Rank;\r\n    }\r\n    // < /DATA STRUCTS>\r\n\r\n    // <VARIABLES>\r\n    // Base NFT price in Ether during main sale\r\n    uint256 public constant price = 0.09 ether;\r\n    // Base NFT price in Ether during presale\r\n    uint256 public constant presalePrice = 0.055 ether;\r\n    // Contract address where Reward Fund is accumulated during main sale\r\n    address public rewardPool;\r\n    // Part of Base token price to send to Reward Fund during main sale\r\n    uint256 public rewardShare = 0.035 ether;\r\n    // Part of Base token price to send to Reward Fund during presale\r\n    uint256 public rewardSharePresale = 0.035 ether;\r\n    // Max total supply and last token ID\r\n    uint256 public maxTotalSupply = 5_715;\r\n    // Max presale total supply and last token ID\r\n    uint256 public maxPresaleTotalSupply = 3_000;\r\n\r\n    bool public isInitialized;\r\n\r\n    // Membership token contract\r\n    IMembershipToken public membershipToken;\r\n\r\n    // An array where are stored main traits for each Base token\r\n    BaseTokenMainTraits[] internal baseTokenMainTraits_;\r\n\r\n    uint256 internal randomNonce_;\r\n\r\n    /** Timing variables */\r\n    // A variable to store a timestamp when public sale will become available\r\n    uint256 public saleStartTime;\r\n    // Time when presale starts\r\n    uint256 public presaleStartTime;\r\n    // Time when presale ends\r\n    uint256 public presaleEndTime;\r\n\r\n    uint256 public constant presaleTokensAmountPerAddress = 4;\r\n    mapping(address => uint256) public presaleTokensAmountByAddress;\r\n\r\n    mapping(address => bool) internal _membershipMintPass;\r\n    // </ VARIABLES >\r\n\r\n    // <EVENTS>\r\n    event PublicSaleMint(address to, uint256 tokenId, uint8 material, uint8 edging, uint8 suit, uint16 rank);\r\n    event PresaleMint(address to, uint256 tokenId, uint8 material, uint8 edging, uint8 suit, uint16 rank);\r\n\r\n    // restricted events\r\n    event Initialize(address membershipToken, address childAddress);\r\n\r\n    event SetSaleStartTime(uint256 timestamp);\r\n    event SetPresaleStartTime(uint256 timestamp);\r\n    event SetPresaleEndTime(uint256 timestamp);\r\n\r\n    event SetMaxTotalSupply(uint256 newMaxTotalSupply);\r\n    event SetMaxPresaleTotalSupply(uint256 newMaxPresaleTotalSupply);\r\n    event SoldOut();\r\n    // </ EVENTS>\r\n\r\n    /**\r\n        @notice A constructor function is executed once when a contract is created and it is used to initialize\r\n                contract state.\r\n        @param _proxyRegistry - wyvern proxy for secondary sales on Opensea (cannot be changed after)\r\n        @param _name - base token name (cannot be changed after)\r\n        @param _symbol - base token symbol (cannot be changed after)\r\n        @param _baseURI - base token address where NFT images are stored\r\n        @param _contractURI - base token contract metadata URI\r\n        @param _paymentToken - Wrapped ETH (WETH) token contract address for secondary sales (cannot be changed after)\r\n    */\r\n    constructor(\r\n        address _proxyRegistry,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        string memory _contractURI,\r\n        address _paymentToken\r\n    )\r\n    CombinableTokenBasis(\r\n        _proxyRegistry,\r\n        _name,\r\n        _symbol,\r\n        _baseURI,\r\n        _contractURI,\r\n        _paymentToken\r\n    )\r\n    {\r\n    }\r\n\r\n    // <INTERNAL FUNCTIONS TO GET CONSTANTS INTERNALLY>\r\n\r\n    /**\r\n        @notice A function to serve constant maxTotalSupply\r\n        @dev Function was created for dev purposes, to make proper testing simpler\r\n        @return constant maxTotalSupply variable\r\n    */\r\n    function _maxTotalSupply() internal view virtual returns (uint256) {\r\n        return maxTotalSupply;\r\n    }\r\n\r\n    function _maxPresaleTotalSupply() internal view virtual returns (uint256) {\r\n        return maxPresaleTotalSupply;\r\n    }\r\n\r\n    /**\r\n        @notice A function to serve constant price\r\n        @dev Function was created for dev purposes, to make proper testing simpler\r\n        @return constant price variable\r\n    */\r\n    function _price() internal view virtual returns (uint256) {\r\n        return price;\r\n    }\r\n\r\n    /**\r\n        @notice A function to serve constant rewardShare\r\n        @dev Function was created for dev purposes, to make proper testing simpler\r\n        @return constant rewardShare variable\r\n    */\r\n    function _rewardShare() internal view virtual returns (uint256) {\r\n        return rewardShare;\r\n    }\r\n\r\n    /**\r\n        @notice A function to serve constant presale price\r\n        @dev Function was created for dev purposes, to make proper testing simpler\r\n        @return constant presale price variable\r\n    */\r\n    function _presalePrice() internal view virtual returns (uint256) {\r\n        return presalePrice;\r\n    }\r\n\r\n    /**\r\n        @notice A function to serve constant rewardSharePresale\r\n        @dev Function was created for dev purposes, to make proper testing simpler\r\n        @return constant rewardSharePresale variable\r\n    */\r\n    function _rewardSharePresale() internal view virtual returns (uint256) {\r\n        return rewardSharePresale;\r\n    }\r\n\r\n    function _presaleTokensAmountPerAddress() internal view virtual returns (uint256) {\r\n        return presaleTokensAmountPerAddress;\r\n    }\r\n\r\n    /**\r\n        @notice A function to initialize contract and set Membership and Combination token addresses\r\n        @dev Called only once, an attempt to call it repeatedly will be rejected\r\n        @param _membershipToken - Membership token address\r\n        @param _childAddress - Combination token address\r\n    */\r\n    function initialize(address _membershipToken, address _childAddress)\r\n    external\r\n    override\r\n    onlyOwner\r\n    {\r\n        require(!isInitialized, \"BaseToken: contract is already initialized!\");\r\n        membershipToken = IMembershipToken(_membershipToken);\r\n        child_ = ICombinationToken(_childAddress);\r\n        rewardPool = _childAddress;\r\n        isInitialized = true;\r\n\r\n        emit Initialize(_membershipToken, _childAddress);\r\n    }\r\n\r\n    // <PUBLIC FUNCTIONS>\r\n    /**\r\n        @notice A function to buy (mint) base tokens\r\n        @param _to - recipient address (usually the same as the address of transaction sender)\r\n        @param _amount - amount of tokens to mint\r\n    */\r\n    function publicSaleMint(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external payable override {\r\n        require(\r\n            msg.value == _price() * _amount,\r\n            \"BaseToken: tx value is too small\"\r\n        );\r\n        address _txSender = msg.sender;\r\n        uint256 _blockTimestamp = block.timestamp;\r\n\r\n        require(\r\n            !_isContract(_txSender),\r\n            \"BaseToken: you have to be a person to call this function\"\r\n        );\r\n        if (lastTokenId_ < _maxPresaleTotalSupply()) {\r\n            require(\r\n                _blockTimestamp > saleStartTime && saleStartTime != 0,\r\n                \"BaseToken: Main sale hasn't started yet\"\r\n            );\r\n        }\r\n        require(\r\n            lastTokenId_ + _amount <= _maxTotalSupply(),\r\n            \"BaseToken: Cannot mint more tokens than the maxTotalSupply\"\r\n        );\r\n\r\n        _membershipMintPass[_txSender] = true;\r\n        require(_amount <= 13, \"BaseToken: Cannot buy more tokens than 13\");\r\n\r\n        payable(rewardPool).transfer(_amount * _rewardShare());\r\n        _mintTokens(_to, _amount, false);\r\n    }\r\n\r\n    /**\r\n        @notice A function to buy (mint) base tokens during presale period\r\n        @param _to - recipient address (usually the same as the address of transaction sender)\r\n        @param _amount - amount of tokens to mint\r\n    */\r\n    function presaleMint(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external payable override {\r\n        address _txSender = msg.sender;\r\n        uint256 _blockTimestamp = block.timestamp;\r\n\r\n        require(\r\n            msg.value == _presalePrice() * _amount,\r\n            \"BaseToken: tx value is too small\"\r\n        );\r\n\r\n        require(\r\n            !_isContract(_txSender),\r\n            \"BaseToken: you have to be a person to call this function\"\r\n        );\r\n        require(\r\n            (presaleStartTime < _blockTimestamp &&\r\n        _blockTimestamp < presaleEndTime),\r\n            \"BaseToken: Presale is not active\"\r\n        );\r\n        require(\r\n            presaleTokensAmountByAddress[_txSender] + _amount <=\r\n            _presaleTokensAmountPerAddress(),\r\n            \"BaseToken: Amount of tokens exceeds presale limits\"\r\n        );\r\n        presaleTokensAmountByAddress[_txSender] =\r\n        presaleTokensAmountByAddress[_txSender] +\r\n        _amount;\r\n        require(\r\n            lastTokenId_ + _amount <= _maxPresaleTotalSupply(),\r\n            \"BaseToken: Cannot mint more tokens than the maxPresaleTotalSupply\"\r\n        );\r\n\r\n        _membershipMintPass[_txSender] = true;\r\n\r\n        payable(rewardPool).transfer(_amount * _rewardSharePresale());\r\n        _mintTokens(_to, _amount, true);\r\n    }\r\n\r\n    /**\r\n        @dev A simple getter for Base token main traits\r\n    */\r\n    function baseTokenMainTraits(uint256 _tokenId) external view override returns (uint8, uint8, uint8, uint16){\r\n        uint256 _index = _tokenId - 1;\r\n        return (baseTokenMainTraits_[_index].Material,\r\n        baseTokenMainTraits_[_index].Edging,\r\n        baseTokenMainTraits_[_index].Suit,\r\n        baseTokenMainTraits_[_index].Rank);\r\n    }\r\n\r\n    function membershipMintPass(address _minter) external view override returns (bool) {\r\n        return _membershipMintPass[_minter];\r\n    }\r\n    // </ PUBLIC FUNCTIONS>\r\n\r\n    // <PRIVATE FUNCTIONS>\r\n    /**\r\n        @notice Internal function called by _mintTokens to generate token main properties\r\n        @dev For random generation of main properties, function uses data from two sources:\r\n             - from the blockchain (block.timestamp, block.difficulty, block.number)\r\n             - from the smart contract (randomNonce_)\r\n        @dev Function randomly generates Material, Edging, Suit, Rank and writes them to\r\n             baseTokenMainTraits_ array to store on-chain (these properties can never be changed)\r\n        @param _tokenId - Id of newly minted token\r\n    */\r\n    function _generateBaseTokenMainTraits(\r\n        uint256 _tokenId\r\n    ) internal returns (uint8, uint8, uint8, uint16){\r\n        uint256 _blockTimestamp = block.timestamp;\r\n        uint256 _blockDifficulty = block.difficulty;\r\n        uint256 _blockNumber = block.number;\r\n        BaseTokenMainTraits memory _baseTokenMainTraits = BaseTokenMainTraits(0, 0, 0, 0);\r\n\r\n        // random nonce increased\r\n        randomNonce_ += (_tokenId > 1)\r\n        ? baseTokenMainTraits_[_tokenId - 2].Rank\r\n        : _blockTimestamp;\r\n\r\n        _baseTokenMainTraits.Material = uint8(\r\n            2 **\r\n            (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _blockNumber,\r\n                        _blockTimestamp,\r\n                        _blockDifficulty,\r\n                        msg.sender,\r\n                        randomNonce_\r\n                    )\r\n                )\r\n            ) % 6)\r\n        );\r\n\r\n        // random nonce increased\r\n        randomNonce_ += (_tokenId > 1)\r\n        ? baseTokenMainTraits_[_tokenId - 2].Suit\r\n        : _blockTimestamp;\r\n\r\n        _baseTokenMainTraits.Edging = uint8(\r\n            2 **\r\n            (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _blockNumber,\r\n                        _blockTimestamp,\r\n                        _blockDifficulty,\r\n                        msg.sender,\r\n                        randomNonce_\r\n                    )\r\n                )\r\n            ) % 6)\r\n        );\r\n\r\n        // random nonce increased\r\n        randomNonce_ += (_tokenId > 1)\r\n        ? baseTokenMainTraits_[_tokenId - 2].Material\r\n        : _blockTimestamp;\r\n\r\n        _baseTokenMainTraits.Suit = uint8(\r\n            2 **\r\n            (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _blockNumber,\r\n                        _blockTimestamp,\r\n                        _blockDifficulty,\r\n                        msg.sender,\r\n                        randomNonce_\r\n                    )\r\n                )\r\n            ) % 4)\r\n        );\r\n\r\n        // random nonce increased\r\n        randomNonce_ += (_tokenId > 1)\r\n        ? baseTokenMainTraits_[_tokenId - 2].Edging\r\n        : _blockTimestamp;\r\n\r\n        _baseTokenMainTraits.Rank = uint16(\r\n            2 **\r\n            (uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        _blockNumber,\r\n                        _blockTimestamp,\r\n                        _blockDifficulty,\r\n                        msg.sender,\r\n                        randomNonce_\r\n                    )\r\n                )\r\n            ) % 13)\r\n        );\r\n\r\n        baseTokenMainTraits_.push(_baseTokenMainTraits);\r\n\r\n        return (_baseTokenMainTraits.Material, _baseTokenMainTraits.Edging, _baseTokenMainTraits.Suit, _baseTokenMainTraits.Rank);\r\n    }\r\n\r\n    /**\r\n        @notice Internal function called by publicSaleMint/presaleMint to mint tokens\r\n        @dev Function calls _generateBaseTokenMainTraits to generate Base token main traits\r\n        @param _to - recipient address (usually the same as the address of transaction sender)\r\n        @param _amount - amount of tokens to mint\r\n    */\r\n    function _mintTokens(\r\n        address _to,\r\n        uint256 _amount,\r\n        bool _isPresale\r\n    ) private {\r\n        uint256 _newLastTokenId = lastTokenId_ + _amount;\r\n        uint256 _blockTimestamp = block.timestamp;\r\n\r\n        for (\r\n            uint256 _tokenId = lastTokenId_ + 1;\r\n            _tokenId <= _newLastTokenId;\r\n            _tokenId++\r\n        ) {\r\n            _mint(_to, _tokenId);\r\n            (uint8 _material, uint8 _edging, uint8 _suit, uint16 _rank) = _generateBaseTokenMainTraits(_tokenId);\r\n            if (_isPresale) {\r\n                emit PresaleMint(_to, _tokenId, _material, _edging, _suit, _rank);\r\n            } else {\r\n                emit PublicSaleMint(_to, _tokenId, _material, _edging, _suit, _rank);\r\n            }\r\n        }\r\n        lastTokenId_ += _amount;\r\n        if (lastTokenId_ == _maxTotalSupply()) {\r\n            soldOut_ = true;\r\n\r\n            emit SoldOut();\r\n        }\r\n    }\r\n    // </ PRIVATE FUNCTIONS />\r\n\r\n    // <RESTRICTED ACCESS METHODS>\r\n    /**\r\n        @notice Sale start time setter function\r\n        @dev Available for owner only\r\n        @dev Impossible to set new time if current sale start time is up\r\n        @param _saleStartTime - new sale start time\r\n    */\r\n    function setSaleStartTime(uint256 _saleStartTime)\r\n    external\r\n    override\r\n    virtual\r\n    onlyOwner\r\n    {\r\n        require(_saleStartTime > block.timestamp, \"BaseToken: new sale start time should be in future\");\r\n        require(saleStartTime == 0 || saleStartTime > block.timestamp, \"BaseToken: sale shouldn't be started\");\r\n\r\n        saleStartTime = _saleStartTime;\r\n\r\n        emit SetSaleStartTime(_saleStartTime);\r\n    }\r\n\r\n\r\n    function setPresaleTime(uint256 _presaleStartTime, uint256 _presaleEndTime)\r\n    external\r\n    override\r\n    virtual\r\n    onlyOwner\r\n    {\r\n        require(_presaleStartTime > 0 &&\r\n            _presaleStartTime > block.timestamp,\r\n            \"BaseToken: Invalid presale start time\");\r\n        require(_presaleStartTime < _presaleEndTime,\r\n            \"BaseToken: presale_start_time > presale_end_time\");\r\n        require(_presaleEndTime < saleStartTime,\r\n            \"BaseToken: presale_end_time > sale_start_time\");\r\n\r\n        presaleStartTime = _presaleStartTime;\r\n        presaleEndTime = _presaleEndTime;\r\n\r\n        emit SetPresaleStartTime(_presaleStartTime);\r\n        emit SetPresaleEndTime(_presaleEndTime);\r\n    }\r\n\r\n    function setMaxTotalSupply(uint256 _newMaxTotalSupply) external virtual onlyOwner {\r\n        maxTotalSupply = _newMaxTotalSupply;\r\n\r\n        emit SetMaxTotalSupply(_newMaxTotalSupply);\r\n    }\r\n\r\n    function setMaxPresaleTotalSupply(uint256 _newMaxPresaleTotalSupply) external virtual onlyOwner {\r\n        maxPresaleTotalSupply = _newMaxPresaleTotalSupply;\r\n\r\n        emit SetMaxPresaleTotalSupply(_newMaxPresaleTotalSupply);\r\n    }\r\n\r\n    /**\r\n        @notice Used to protect Owner from shooting himself in a foot\r\n        @dev This function overrides same-named function from Ownable\r\n             library and makes it an empty one\r\n    */\r\n    function renounceOwnership() public override onlyOwner {}\r\n    // </ RESTRICTED ACCESS FUNCTIONS>\r\n}\r\n"
    },
    "contracts/interfaces/IMembershipToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IMembershipToken is IERC721{\r\n    function initialize(address _baseTokenAddress)\r\n        external;\r\n\r\n    function mint() external;\r\n\r\n    function setContractURI(string memory _contractURI) external;\r\n\r\n    function setBaseURI(string memory _baseUri) external;\r\n}\r\n"
    },
    "contracts/interfaces/IBaseToken.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"./ICombinableTokenBasis.sol\";\r\n\r\ninterface IBaseToken is ICombinableTokenBasis {\r\n    function initialize(address _membershipToken, address _childAddress)\r\n        external;\r\n\r\n    function publicSaleMint(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external payable;\r\n\r\n    function presaleMint(\r\n        address _to,\r\n        uint256 _amount\r\n    ) external payable;\r\n\r\n    function setSaleStartTime(uint256 _saleStartTime) external;\r\n\r\n    function setPresaleTime(uint256 _presaleStartTime, uint256 _presaleEndTime) external;\r\n\r\n    function baseTokenMainTraits(uint256 _tokenId) external view returns (uint8, uint8, uint8, uint16);\r\n\r\n    function membershipMintPass(address _minter) external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/ICombinationToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"./IBaseToken.sol\";\r\n\r\ninterface ICombinationToken is IERC721 {\r\n    function parent() external view returns (IBaseToken);\r\n\r\n    function tokenParents(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n    function baseIsCombined(uint256 _baseId) external view returns (bool);\r\n\r\n    function combinationName(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string memory);\r\n\r\n    function childByParent(uint256 _baseId)\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n"
    },
    "contracts/library/CombinableTokenBasis.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"../interfaces/ICombinableTokenBasis.sol\";\r\nimport \"../interfaces/ICombinationToken.sol\";\r\nimport \"./Basis.sol\";\r\nimport \"./Withdrawable.sol\";\r\n\r\ncontract CombinableTokenBasis is ICombinableTokenBasis, Basis, Withdrawable {\r\n    ICombinationToken internal child_;\r\n    bool public transferProhibitedForCombined;\r\n    bool public transferProhibited;\r\n    bool internal soldOut_;\r\n\r\n    event SetChildAddress(address child);\r\n    event SetTransferProhibitedForCombined(bool prohibited);\r\n    event SetTransferProhibited(bool prohibited);\r\n\r\n    constructor(\r\n        address _proxyRegistry,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        string memory _contractURI,\r\n        address _paymentToken\r\n    )\r\n    Basis(\r\n        _proxyRegistry,\r\n        _name,\r\n        _symbol,\r\n        _baseURI,\r\n        _contractURI,\r\n        _paymentToken\r\n    )\r\n    {\r\n    }\r\n\r\n    function soldOut() external view override returns (bool){\r\n        return soldOut_;\r\n    }\r\n\r\n    function child() external view override returns (ICombinationToken) {\r\n        return child_;\r\n    }\r\n\r\n    function setChildAddress(address _child) external override onlyOwner {\r\n        child_ = ICombinationToken(_child);\r\n\r\n        emit SetChildAddress(_child);\r\n    }\r\n\r\n    function setTransferProhibitedForCombined(bool _prohibited) external override onlyOwner {\r\n        transferProhibitedForCombined = _prohibited;\r\n\r\n        emit SetTransferProhibitedForCombined(_prohibited);\r\n    }\r\n\r\n    function setTransferProhibited(bool _prohibited) external override onlyOwner {\r\n        transferProhibited = _prohibited;\r\n\r\n        emit SetTransferProhibited(_prohibited);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        if (transferProhibited || (transferProhibitedForCombined && child_.baseIsCombined(tokenId))) {\r\n            require(\r\n                from == address(0),\r\n                \"CombinableTokenBasis: Sorry, it is prohibited to transfer Base tokens\"\r\n            );\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ICombinableTokenBasis.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"./ICombinationToken.sol\";\r\nimport \"./IBasis.sol\";\r\n\r\ninterface ICombinableTokenBasis is IBasis {\r\n    function soldOut() external view returns (bool);\r\n\r\n    function child() external view returns (ICombinationToken);\r\n\r\n    function setChildAddress(address _child) external;\r\n\r\n    function setTransferProhibitedForCombined(bool _prohibited) external;\r\n\r\n    function setTransferProhibited(bool _prohibited) external;\r\n}"
    },
    "contracts/interfaces/IBasis.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface IBasis is IERC721 {\r\n    function setBaseURI(string memory _baseUri) external;\r\n\r\n    function setContractURI(string memory _contractURI) external;\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n"
    },
    "contracts/library/Basis.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../library/ERC721Buyable.sol\";\r\nimport \"../interfaces/IBasis.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\ncontract Basis is IBasis, ERC721Buyable {\r\n    using Strings for uint256;\r\n\r\n    string internal baseURI;\r\n    uint256 internal lastTokenId_;\r\n    string public contractURI;\r\n\r\n    event SetContractURI(string contractURI);\r\n    event SetBaseURI(string baseUri);\r\n\r\n    constructor(\r\n        address _proxyRegistry,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _baseURI,\r\n        string memory _contractURI,\r\n        address _paymentToken\r\n    ) ERC721(_name, _symbol) ERC721Buyable(_paymentToken, _name, \"1.0.0\") {\r\n        baseURI = _baseURI;\r\n        contractURI = _contractURI;\r\n        proxyRegistry = _proxyRegistry;\r\n    }\r\n\r\n    function setContractURI(string memory _contractURI)\r\n    external\r\n    override\r\n    onlyOwner\r\n    {\r\n        contractURI = _contractURI;\r\n\r\n        emit SetContractURI(_contractURI);\r\n    }\r\n\r\n    function setBaseURI(string memory _baseUri) external override onlyOwner {\r\n        baseURI = _baseUri;\r\n\r\n        emit SetBaseURI(_baseUri);\r\n    }\r\n\r\n    /**\r\n     * @dev Get a `tokenURI`\r\n     * @param `_tokenId` an id whose `tokenURI` will be returned\r\n     * @return `tokenURI` string\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n    public\r\n    view\r\n    override\r\n    returns (string memory)\r\n    {\r\n        require(_exists(_tokenId), \"Basis: URI query for nonexistent token\");\r\n\r\n        // Concatenate the tokenID to the baseURI, token symbol and token id\r\n        return string(abi.encodePacked(baseURI, _tokenId.toString()));\r\n    }\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return lastTokenId_;\r\n    }\r\n\r\n    function _isContract(address _addr) internal returns (bool _isContract){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n}\r\n"
    },
    "contracts/library/Withdrawable.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IWithdrawable.sol\";\r\n\r\nabstract contract Withdrawable is IWithdrawable, Ownable {\r\n    event Withdraw(uint amount);\r\n    event WithdrawAll();\r\n\r\n    function pendingWithdrawal() external view override returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdraw(uint _amount) external override onlyOwner {\r\n        _withdraw(_amount);\r\n\r\n        emit Withdraw(_amount);\r\n    }\r\n\r\n    function withdrawAll() external override onlyOwner {\r\n        _withdraw(address(this).balance);\r\n\r\n        emit WithdrawAll();\r\n    }\r\n\r\n    function _withdraw(uint _amount) internal {\r\n        require(_amount > 0, \"Withdrawable: Amount has to be greater than 0\");\r\n        require(\r\n            _amount <= address(this).balance,\r\n            \"Withdrawable: Not enough funds\"\r\n        );\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/library/ERC721Buyable.sol": {
      "content": "pragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\r\nimport \"../opensea/ERC721Tradable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\nabstract contract ERC721Buyable is EIP712, ERC721Tradable, ReentrancyGuard {\r\n    using ECDSA for bytes32;\r\n    using SignatureChecker for address;\r\n\r\n    uint256 public saleTax = 1_000;\r\n    uint256 public saleTaxDenumerator = 10_000;\r\n    IERC20 public paymentToken;\r\n    address public treasury;\r\n    mapping(address => mapping(uint256 => uint256)) public nonces;\r\n\r\n    event SellOfferAcceptedETH(\r\n        address seller,\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n    event SellOfferAcceptedWETH(\r\n        address seller,\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n    event BuyOfferAcceptedWETH(\r\n        address seller,\r\n        address buyer,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    );\r\n\r\n    // onlyOwner events\r\n    event SetSaleTax(uint256 tax);\r\n    event SetTreasury(address treasury);\r\n\r\n    // _paymentToken - Wrapped ETH\r\n    // _name - Contract name from EIP712\r\n    // _version - Contract version from EIP712\r\n    constructor(\r\n        address _paymentToken,\r\n        string memory _name,\r\n        string memory _version\r\n    ) EIP712(_name, _version) ReentrancyGuard() {\r\n        treasury = msg.sender;\r\n        paymentToken = IERC20(_paymentToken);\r\n    }\r\n\r\n    function setSaleTax(uint256 _tax) external onlyOwner {\r\n        require(_tax <= 1_000, \"ERC721Buyable: Looks like this tax is too big\");\r\n        saleTax = _tax;\r\n        emit SetSaleTax(_tax);\r\n    }\r\n\r\n    function setTreasury(address _treasury) external onlyOwner {\r\n        treasury = _treasury;\r\n\r\n        emit SetTreasury(_treasury);\r\n    }\r\n\r\n    function buyAcceptingSellOfferETH(\r\n        address _seller,\r\n        address _buyer,\r\n        uint256 _tokenId,\r\n        uint256 nonce,\r\n        uint256 _deadline,\r\n        uint256 _price,\r\n        bytes memory _sellerSignature\r\n    ) external payable nonReentrant {\r\n        bytes32 digest = _hashSellOfferETH(\r\n            _seller,\r\n            _buyer,\r\n            _tokenId,\r\n            _deadline,\r\n            _price\r\n        );\r\n        require(\r\n            _price == msg.value,\r\n            \"ERC721Buyable: Not enought ETH to buy token\"\r\n        );\r\n        require(\r\n            SignatureChecker.isValidSignatureNow(\r\n                _seller,\r\n                digest,\r\n                _sellerSignature\r\n            ),\r\n            \"ERC721Buyable: Invalid signature\"\r\n        );\r\n        require(\r\n            block.timestamp < _deadline,\r\n            \"ERC721Buyable: Signed transaction expired\"\r\n        );\r\n        nonces[_seller][_tokenId]++;\r\n        if (_buyer == address(0)) {\r\n            _buyer = msg.sender;\r\n        }\r\n        uint256 tax = (_price * saleTax) / saleTaxDenumerator;\r\n        if (tax > 0) {\r\n            payable(treasury).transfer(tax);\r\n        }\r\n\r\n        payable(_seller).transfer(_price - tax);\r\n        _transfer(_seller, _buyer, _tokenId);\r\n\r\n        emit SellOfferAcceptedETH(_seller, _buyer, _tokenId, _price);\r\n    }\r\n\r\n    function _hashSellOfferETH(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _deadline,\r\n        uint256 _price\r\n    ) internal view returns (bytes32) {\r\n        return\r\n        _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        \"SellOfferETH(address from,address to,uint256 tokenId,uint256 nonce,uint256 deadline,uint256 price)\"\r\n                    ),\r\n                    _from,\r\n                    _to,\r\n                    _tokenId,\r\n                    nonces[_from][_tokenId],\r\n                    _deadline,\r\n                    _price\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function buyAcceptingSellOfferWETH(\r\n        address _seller,\r\n        uint256 _tokenId,\r\n        uint256 nonce,\r\n        uint256 _deadline,\r\n        uint256 _price,\r\n        bytes memory _sellerSignature\r\n    ) external {\r\n        bytes32 digest = _hashSellOfferWETH(\r\n            _seller,\r\n            _tokenId,\r\n            _deadline,\r\n            _price\r\n        );\r\n        require(\r\n            SignatureChecker.isValidSignatureNow(\r\n                _seller,\r\n                digest,\r\n                _sellerSignature\r\n            ),\r\n            \"ERC721Buyable: Invalid signature\"\r\n        );\r\n        require(\r\n            block.timestamp < _deadline,\r\n            \"ERC721Buyable: signed transaction expired\"\r\n        );\r\n        nonces[_seller][_tokenId]++;\r\n        uint256 tax = (_price * saleTax) / saleTaxDenumerator;\r\n        if (tax > 0) {\r\n            bool _success = paymentToken.transferFrom(_msgSender(), treasury, tax);\r\n            require(_success, \"ERC721Buyable: transfer failed\");\r\n        }\r\n        bool _success = paymentToken.transferFrom(_msgSender(), _seller, _price - tax);\r\n        require(_success, \"ERC721Buyable: transfer failed\");\r\n        _transfer(_seller, _msgSender(), _tokenId);\r\n\r\n        emit SellOfferAcceptedWETH(_seller, _msgSender(), _tokenId, _price);\r\n    }\r\n\r\n    function _hashSellOfferWETH(\r\n        address _from,\r\n        uint256 _tokenId,\r\n        uint256 _deadline,\r\n        uint256 _price\r\n    ) internal view returns (bytes32) {\r\n        return\r\n        _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        \"SellOfferWETH(address from,uint256 tokenId,uint256 nonce,uint256 deadline,uint256 price)\"\r\n                    ),\r\n                    _from,\r\n                    _tokenId,\r\n                    nonces[_from][_tokenId],\r\n                    _deadline,\r\n                    _price\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function sellAcceptingBuyOfferWETH(\r\n        address _buyer,\r\n        uint256 _tokenId,\r\n        uint256 nonce,\r\n        uint256 _deadline,\r\n        uint256 _price,\r\n        bytes memory _sellerSignature\r\n    ) external {\r\n        bytes32 digest = _hashBuyOfferWETH(_buyer, _tokenId, _deadline, _price);\r\n        require(\r\n            _buyer.isValidSignatureNow(digest, _sellerSignature),\r\n            \"ERC721Buyable: Invalid signature\"\r\n        );\r\n        require(\r\n            block.timestamp < _deadline,\r\n            \"ERC721Buyable: signed transaction expired\"\r\n        );\r\n        nonces[_buyer][_tokenId]++;\r\n        uint256 tax = (_price * saleTax) / saleTaxDenumerator;\r\n        if (tax > 0) {\r\n            bool _success = paymentToken.transferFrom(_buyer, treasury, tax);\r\n            require(_success, \"ERC721Buyable: transfer failed\");\r\n        }\r\n        bool _success = paymentToken.transferFrom(_buyer, _msgSender(), _price - tax);\r\n        require(_success, \"ERC721Buyable: transfer failed\");\r\n        _transfer(_msgSender(), _buyer, _tokenId);\r\n\r\n        emit BuyOfferAcceptedWETH(_msgSender(), _buyer, _tokenId, _price);\r\n    }\r\n\r\n    function _hashBuyOfferWETH(\r\n        address _to,\r\n        uint256 _tokenId,\r\n        uint256 _deadline,\r\n        uint256 _price\r\n    ) internal view returns (bytes32) {\r\n        return\r\n        _hashTypedDataV4(\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\r\n                        \"BuyOfferWETH(address to,uint256 tokenId,uint256 nonce,uint256 deadline,uint256 price)\"\r\n                    ),\r\n                    _to,\r\n                    _tokenId,\r\n                    nonces[_to][_tokenId],\r\n                    _deadline,\r\n                    _price\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper: Provide a single mechanism to verify both private-key (EOA) ECDSA signature and\n * ERC1271 contract sigantures. Using this instead of ECDSA.recover in your contract will make them compatible with\n * smart contract wallets such as Argent and Gnosis.\n *\n * Note: unlike ECDSA signatures, contract signature's are revocable, and the outcome of this function can thus change\n * through time. It could return true at block N and false at block N+1 (or the opposite).\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\n    }\n}\n"
    },
    "contracts/opensea/ERC721Tradable.sol": {
      "content": "// SPDX-License-Identifier: NONLICENSED\r\npragma solidity ^0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IWyvernProxyRegistry.sol\";\r\n\r\n\r\nabstract contract ERC721Tradable is ERC721, Ownable {\r\n    address internal proxyRegistry;\r\n\r\n    /**\r\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        override\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        // Whitelist OpenSea proxy contract for easy trading.\r\n        if (address(IWyvernProxyRegistry(proxyRegistry).proxies(_owner)) == _operator) {\r\n            return true;\r\n        }\r\n\r\n        return super.isApprovedForAll(_owner, _operator);\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/interfaces/IWyvernProxyRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ninterface IOwnableDelegateProxy {}\r\n\r\nabstract contract IWyvernProxyRegistry {\r\n    /* Authenticated proxies by user. */\r\n    mapping(address => IOwnableDelegateProxy) public proxies;\r\n    function registerProxy() public virtual returns (IOwnableDelegateProxy proxy);\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/interfaces/IWithdrawable.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.6;\r\n\r\ninterface IWithdrawable {\r\n    function pendingWithdrawal() external view returns (uint);\r\n    function withdraw(uint amount) external;\r\n    function withdrawAll() external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}