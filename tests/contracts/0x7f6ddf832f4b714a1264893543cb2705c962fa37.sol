{{
  "language": "Solidity",
  "sources": {
    "contracts/FineShop.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"./FineCoreInterface.sol\";\r\n\r\ninterface FineNFTInterface {\r\n    function mint(address to) external returns (uint);\r\n    function mintBonus(address to, uint infiniteId) external returns (uint);\r\n    function getArtistAddress() external view returns (address payable);\r\n    function getAdditionalPayee() external view returns (address payable);\r\n    function getAdditionalPayeePercentage() external view returns (uint256);\r\n    function getTokenLimit() external view returns (uint256);\r\n    function checkPool() external view returns (uint);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\ninterface BasicNFTInterface {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n}\r\n\r\nenum SalePhase {\r\n  Owner,\r\n  PreSale,\r\n  PublicSale\r\n}\r\n\r\n/// @custom:security-contact skyfly200@gmail.com\r\ncontract FineShop is AccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    FineCoreInterface fineCore;\r\n    mapping(uint => address) public projectOwner;\r\n    mapping(uint => uint) public projectPremints;\r\n    mapping(uint => uint) public projectPrice;\r\n    mapping(uint => address) public projectCurrencyAddress;\r\n    mapping(uint => string) public projectCurrencySymbol;\r\n    mapping(uint => uint) public projectBulkMintCount;\r\n    mapping(uint => bool) public projectLive;\r\n    mapping(uint256 => bool) public contractFilterProject;\r\n    mapping(address => mapping (uint256 => uint256)) public projectMintCounter;\r\n    mapping(uint256 => uint256) public projectMintLimit;\r\n    mapping(uint256 => SalePhase) public projectPhase;\r\n    mapping(uint256 => mapping (address => uint8) ) public projectAllowList;\r\n    mapping(uint256 => bool ) public infinitesAIWOW;\r\n    mapping(uint256 => mapping (uint256 => address) ) public projectGateTokens;\r\n    mapping(uint256 => uint256) public projectGateTokensCount;\r\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => bool)) ) public redeemed; // projectID, gateContractId, gateTokenId\r\n    \r\n    uint256[17] wowIds = [23,211,223,233,234,244,261,268,292,300,335,359,371,386,407,501,505];\r\n\r\n    constructor(address _fineCoreAddresss) {\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        fineCore = FineCoreInterface(_fineCoreAddresss);\r\n        for (uint256 i = 0; i < 17; i++) infinitesAIWOW[wowIds[i]] = true;\r\n    }\r\n\r\n    function stringComp(string memory str1, string memory str2) pure internal returns (bool) {\r\n        return keccak256(abi.encodePacked(str1)) == keccak256(abi.encodePacked(str2));\r\n    }\r\n\r\n    // Admin Functions\r\n\r\n    /**\r\n     * @dev set the owner of a project\r\n     * @param _projectId to set owner of\r\n     * @param newOwner to set as owner\r\n     */\r\n    function setOwner(uint _projectId, address newOwner) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(projectOwner[_projectId] != newOwner, \"can't be same owner\");\r\n        require(newOwner != address(0x0), \"owner can't be zero address\");\r\n        projectOwner[_projectId] = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev push the project to live (locks setting and can premint)\r\n     * @param _projectId to push live\r\n     */\r\n    function goLive(uint _projectId) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        bool ready = projectPrice[_projectId] > 0 && !stringComp(projectCurrencySymbol[_projectId], \"\");\r\n        require(ready, \"project not ready for live\");\r\n        projectLive[_projectId] = true;\r\n    }\r\n  \r\n    /**\r\n     * @dev set the mint limiter of a project\r\n     * @param _projectId project to set mint limit of\r\n     * @param _limit mint limit per address\r\n     */\r\n    function setProjectMintLimit(uint256 _projectId, uint8 _limit) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        projectMintLimit[_projectId] = _limit;\r\n    }\r\n  \r\n    /**\r\n     * @dev set the bulk mint count of a project\r\n     * @param _projectId project to set mint limit of\r\n     * @param _count of tokens mintable \r\n     */\r\n    function setProjectBulkMintCount(uint256 _projectId, uint8 _count) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        projectBulkMintCount[_projectId] = _count;\r\n    }\r\n\r\n    /**\r\n     * @dev set the contract mint filter\r\n     * @param _projectId project to toggle the contract minting filter on\r\n     */\r\n    function toggleContractFilter(uint256 _projectId) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        contractFilterProject[_projectId]=!contractFilterProject[_projectId];\r\n    }\r\n\r\n    /**\r\n     * @dev init the project\r\n     * @param _projectId to set owner of\r\n     * @param newOwner to set as owner\r\n     * @param contractFilter switch to filter out minting via contract\r\n     * @param _bulk amount for minitng multiple per tx\r\n     * @param _limit mintable per address\r\n     */\r\n    function projectInit(\r\n        uint _projectId,\r\n        address newOwner,\r\n        bool contractFilter,\r\n        uint256 _bulk,\r\n        uint256 _limit\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(newOwner != address(0x0), \"owner can't be zero address\");\r\n        projectOwner[_projectId] = newOwner;\r\n        contractFilterProject[_projectId] = contractFilter;\r\n        projectBulkMintCount[_projectId] = _bulk;\r\n        projectMintLimit[_projectId] = _limit;\r\n    }\r\n\r\n    // Project Owner Functions\r\n\r\n    modifier onlyOwner(uint _projectId) {\r\n      require(msg.sender == projectOwner[_projectId], \"only owner\");\r\n      _;\r\n    }\r\n\r\n    modifier isLive(uint _projectId) {\r\n      require(projectLive[_projectId], \"Project not yet live\");\r\n      _;\r\n    }\r\n\r\n    modifier notLive(uint _projectId) {\r\n      require(!projectLive[_projectId], \"Can't call once live\");\r\n      _;\r\n    }\r\n\r\n    /**\r\n     * @dev set the price of a project\r\n     * @param _projectId to set price of\r\n     * @param price to set project to\r\n     */\r\n    function setPrice(uint _projectId, uint price) external onlyOwner(_projectId) notLive(_projectId) {\r\n        projectPrice[_projectId] = price;\r\n    }\r\n\r\n    /**\r\n     * @dev set the premints of a project\r\n     * @param _projectId to set premints of\r\n     * @param premints to set project to\r\n     */\r\n    function setPremints(uint _projectId, uint premints) external onlyOwner(_projectId) notLive(_projectId) {\r\n        projectPremints[_projectId] = premints;\r\n    }\r\n\r\n    /**\r\n     * @dev set the currency to ETH\r\n     * @param _projectId to set currency of\r\n     */\r\n    function setCurrencyToETH(uint _projectId) external onlyOwner(_projectId) notLive(_projectId) {\r\n        projectCurrencySymbol[_projectId] = \"ETH\";\r\n        projectCurrencyAddress[_projectId] = address(0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev set the currency\r\n     * @param _projectId to set currency of\r\n     * @param _symbol of the currency\r\n     * @param _contract address of the currency\r\n     */\r\n    function setCurrency(uint _projectId, string calldata _symbol, address _contract) external onlyOwner(_projectId) notLive(_projectId) {\r\n        require(bytes(_symbol).length > 0, \"Symbol must be provided\");\r\n        if (!stringComp(_symbol, \"ETH\"))\r\n            require(_contract != address(0x0), \"curency address cant be zero\");\r\n        projectCurrencySymbol[_projectId] = _symbol;\r\n        projectCurrencyAddress[_projectId] = _contract;\r\n    }\r\n\r\n    /**\r\n     * @dev owner may set project up in one call\r\n     * @param _projectId to set up\r\n     * @param _symbol of the currency\r\n     * @param _contract address of the currency\r\n     * @param _price of the project\r\n     * @param _premints number available\r\n     */\r\n    function fullSetup(\r\n            uint _projectId,\r\n            string calldata _symbol,\r\n            address _contract,\r\n            uint256 _price,\r\n            uint256 _premints\r\n        ) external onlyOwner(_projectId) notLive(_projectId) {\r\n            require(bytes(_symbol).length > 0, \"Symbol must be provided\");\r\n            if (!stringComp(_symbol, \"ETH\"))\r\n                require(_contract != address(0x0), \"curency address cant be zero\");\r\n            projectCurrencySymbol[_projectId] = _symbol;\r\n            projectCurrencyAddress[_projectId] = _contract;\r\n            projectPrice[_projectId] = _price;\r\n            projectPremints[_projectId] = _premints;\r\n    }\r\n\r\n    /**\r\n     * @dev add an address to the allowlist\r\n     * @param _projectId to set allowlist of\r\n     * @param addresses to set allowlist counts for\r\n     * @param numAllowedToMint number of mints to allow addresses\r\n     */\r\n    function setAllowList(uint _projectId, address[] calldata addresses, uint8 numAllowedToMint) external onlyOwner(_projectId) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            projectAllowList[_projectId][addresses[i]] = numAllowedToMint;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev set an NFT as a mint gating token\r\n     * @param _projectId to set token for\r\n     * @param addresses of token contracts\r\n     */\r\n    function setGateTokens(uint _projectId, address[] calldata addresses) external onlyOwner(_projectId) {\r\n        projectGateTokensCount[_projectId] = addresses.length;\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            projectGateTokens[_projectId][i] = addresses[i];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev set mint phase of a project\r\n     * @param _projectId to set phase of\r\n     */\r\n    function setPhase(uint _projectId, SalePhase phase) external onlyOwner(_projectId) isLive(_projectId) {\r\n        projectPhase[_projectId] = phase;\r\n    }\r\n\r\n    // Sale Functions\r\n\r\n    /**\r\n     * @dev handle payment for a purchase\r\n     * @param _projectId to handle payment for\r\n     * @param count to purchase\r\n     */\r\n    function handlePayment(uint _projectId, uint count) internal {\r\n        uint price = projectPrice[_projectId].mul(count);\r\n        if (!stringComp(projectCurrencySymbol[_projectId], \"ETH\")){\r\n            require(msg.value==0, \"this project accepts a different currency and cannot accept ETH\");\r\n            require(IERC20(projectCurrencyAddress[_projectId]).allowance(msg.sender, address(this)) >= price, \"Insufficient Funds Approved for TX\");\r\n            require(IERC20(projectCurrencyAddress[_projectId]).balanceOf(msg.sender) >= price, \"Insufficient balance.\");\r\n            _splitFundsERC20(_projectId, count);\r\n        } else {\r\n            require(msg.value >= price, \"Must send minimum value to mint!\");\r\n            _splitFundsETH(_projectId, count);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev split funds of payment made with ETH\r\n     * @param _projectId to purchase\r\n     * @param count number of tokens to purchase\r\n     */\r\n    function _splitFundsETH(uint256 _projectId, uint count) internal {\r\n        if (msg.value > 0) {\r\n            uint256 pricePerTokenInWei = projectPrice[_projectId];\r\n            uint salePrice = pricePerTokenInWei.mul(count);\r\n            uint256 refund = msg.value.sub(salePrice);\r\n            if (refund > 0) {\r\n                payable(msg.sender).transfer(refund);\r\n            }\r\n            uint256 platformAmount = salePrice.mul(fineCore.platformPercentage()).div(10000);\r\n            if (platformAmount > 0) {\r\n                fineCore.FINE_TREASURY().transfer(platformAmount);\r\n            }\r\n            FineNFTInterface nftContract = FineNFTInterface(fineCore.getProjectAddress(_projectId));\r\n            uint256 additionalPayeeAmount = salePrice.mul(nftContract.getAdditionalPayeePercentage()).div(10000);\r\n            if (additionalPayeeAmount > 0) {\r\n                nftContract.getAdditionalPayee().transfer(additionalPayeeAmount);\r\n            }\r\n            uint256 creatorFunds = salePrice.sub(platformAmount).sub(additionalPayeeAmount);\r\n            if (creatorFunds > 0) {\r\n                nftContract.getArtistAddress().transfer(creatorFunds);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev split funds of payment made with ERC20 tokens\r\n     * @param _projectId to purchase\r\n     * @param count number of tokens to purchase\r\n     */\r\n    function _splitFundsERC20(uint256 _projectId, uint count) internal {\r\n        uint256 pricePerTokenInWei = projectPrice[_projectId];\r\n        uint salePrice = pricePerTokenInWei.mul(count);\r\n        uint256 platformAmount = salePrice.mul(fineCore.platformPercentage()).div(10000);\r\n        if (platformAmount > 0) {\r\n            IERC20(projectCurrencyAddress[_projectId]).transferFrom(msg.sender, fineCore.FINE_TREASURY(), platformAmount);\r\n        }\r\n        FineNFTInterface nftContract = FineNFTInterface(fineCore.getProjectAddress(_projectId));\r\n        nftContract.getArtistAddress();\r\n        uint256 additionalPayeeAmount = salePrice.mul(nftContract.getAdditionalPayeePercentage()).div(10000);\r\n        if (additionalPayeeAmount > 0) {\r\n            IERC20(projectCurrencyAddress[_projectId]).transferFrom(msg.sender, nftContract.getAdditionalPayee(), additionalPayeeAmount);\r\n        }\r\n        uint256 creatorFunds = salePrice.sub(platformAmount).sub(additionalPayeeAmount);\r\n        if (creatorFunds > 0) {\r\n            IERC20(projectCurrencyAddress[_projectId]).transferFrom(msg.sender, nftContract.getArtistAddress(), creatorFunds);\r\n        }\r\n    }\r\n\r\n    // Minting Functions\r\n\r\n    /**\r\n     * @dev purchase tokens of a project and send to a specific address6\r\n     * @param _projectId to purchase\r\n     * @param to address to send token to\r\n     * @param count number of tokens to purchase\r\n     */\r\n    function purchaseTo(uint _projectId, address to, uint count) internal isLive(_projectId) returns (string memory) {\r\n        if (contractFilterProject[_projectId]) require(msg.sender == tx.origin, \"No Contract Buys\");\r\n        // instantiate an interface with the projects NFT contract\r\n        FineNFTInterface nftContract = FineNFTInterface(fineCore.getProjectAddress(_projectId));\r\n        require(nftContract.checkPool() > 0, \"Sold out\");\r\n        require(nftContract.checkPool() >= count, \"Count excedes available\");\r\n\r\n        // Owner phase conditions\r\n        if (projectPhase[_projectId] == SalePhase.Owner) {\r\n            require(msg.sender == projectOwner[_projectId], \"Only owner can mint now\");\r\n            require(count <= projectPremints[_projectId], \"Excededs max premints\");\r\n            projectPremints[_projectId] -= count;\r\n        } else {\r\n            if (projectMintLimit[_projectId] > 0) {\r\n                require(projectMintCounter[msg.sender][_projectId] < projectMintLimit[_projectId], \"Reached minting limit\");\r\n                projectMintCounter[msg.sender][_projectId] += count;\r\n            }\r\n            // Presale phase conditions\r\n            if (projectPhase[_projectId] == SalePhase.PreSale) {\r\n                require(count <= projectAllowList[_projectId][msg.sender], \"Exceeds allowlisted count\");\r\n                projectAllowList[_projectId][msg.sender] -= uint8(count);\r\n            } else if (projectPhase[_projectId] == SalePhase.PublicSale) {\r\n                if (projectBulkMintCount[_projectId] > 0)\r\n                    require(count <= projectBulkMintCount[_projectId], \"Count excedes bulk mint limit\");\r\n            }\r\n            handlePayment(_projectId, count);\r\n        }\r\n        string memory idList;\r\n        // mint number of tokens specified by count\r\n        for (uint i = 0; i < count; i++) {\r\n            uint tokenID = nftContract.mint(to);\r\n            if (i == 0) idList = string(abi.encodePacked(tokenID));\r\n            else idList = string(abi.encodePacked(idList, \",\", tokenID));\r\n        }\r\n\r\n        return idList; // returns a list of ids of all tokens minted\r\n    }\r\n\r\n    /**\r\n     * @dev purchase tokens of a project and send to a specific address (only holders of listed NFTs)\r\n     * @param _projectId to purchase\r\n     * @param to address to send token to\r\n     * @param contractId of contract to lookup gate pass in the mapping\r\n     * @param redeemId id of token to redeem gate pass for\r\n     */\r\n    function mintGated(uint _projectId, address to, uint8 contractId, uint256 redeemId) public payable isLive(_projectId) returns (string memory) {\r\n        if (contractFilterProject[_projectId]) require(msg.sender == tx.origin, \"No Contract Buys\");\r\n        // instantiate an interface with the projects NFT contract\r\n        FineNFTInterface nftContract = FineNFTInterface(fineCore.getProjectAddress(_projectId));\r\n        \r\n        // Presale phase conditions\r\n        require(projectPhase[_projectId] != SalePhase.Owner, \"Must redeem after owner mint\");\r\n        BasicNFTInterface allowToken = BasicNFTInterface(projectGateTokens[_projectId][contractId]);\r\n        require(nftContract.checkPool() > 0, \"Sold out\");\r\n        require(\r\n            allowToken.ownerOf(redeemId) == msg.sender || allowToken.ownerOf(redeemId) == to,\r\n            \"Only token owner can redeem pass\");\r\n        require(!redeemed[_projectId][contractId][redeemId], \"already redeemed for ID\");\r\n        redeemed[_projectId][contractId][redeemId] = true;\r\n        uint tokenId = nftContract.mint(to);\r\n        // free bonus mints for coresponding Infinites AI tokens owned\r\n        if (contractId == 0) nftContract.mintBonus(to, redeemId);\r\n        // free mint for Infinites AI WOWs\r\n        if (contractId != 0 || !infinitesAIWOW[redeemId]) handlePayment(_projectId, 1);\r\n        else if (msg.value > 0) payable(msg.sender).transfer(msg.value);\r\n\r\n        return string(abi.encodePacked(tokenId)); // returns a list of ids of all tokens minted\r\n    }\r\n\r\n    /**\r\n     * @dev purchase tokens of a project\r\n     * @param _projectId to purchase\r\n     * @param count number of tokens to purchase\r\n     */\r\n    function buy(uint _projectId, uint count) external payable returns (string memory) {\r\n        return purchaseTo(_projectId, msg.sender, count);\r\n    }\r\n\r\n    /**\r\n     * @dev purchase tokens of a project for another address\r\n     * @param _projectId to purchase\r\n     * @param to recipients address\r\n     * @param count number of tokens to purchase\r\n     */\r\n    function buyFor(uint _projectId, address to, uint count) external payable returns (string memory) {\r\n        return purchaseTo(_projectId, to, count);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "contracts/FineCoreInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.2;\r\n\r\ninterface FineCoreInterface {\r\n    function getProjectAddress(uint id) external view returns (address);\r\n    function getRandomness(uint256 id, uint256 seed) external view returns (uint256 randomnesss);\r\n    function getProjectID(address project) external view returns (uint);\r\n    function FINE_TREASURY() external returns (address payable);\r\n    function platformPercentage() external returns (uint256);\r\n    function platformRoyalty() external returns (uint256);\r\n}"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}