{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/DutchAuction.sol": {
      "content": "// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@ (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&, @@@@@@@@@% .&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@ /&@@@@@@ %@ @@&@@@@% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@&    @@@&/      .&@@&.   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@&                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@&                        &@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    ,%@@@@&/    (&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@@@@@@@@@@@@@@\n// (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@\n// (&&&&&&&&&@&%@@&&@&&&@&@&&&&&&@%@@&@@@@@@@&@@@&@@@@@@@&@&@@@&@@   @@@@@@@@@@@@@@\n// (&&&&&&&&&           &@@            .@@*         *@@@&        .   @@@@@@@@@@@@@@\n// (&&&&&&&&   @&&&&#   %@&&&.   &@@@   %   .@@@@@,   @@   ,@@@@@.   @@@@@@@@@@@@@@\n// (&&&&&&&@   %&&&&@   %&&&&.  .@@@@@@&@   @@@@@@@   @&   @@@@@@&   @@@@@@@@@@@@@@\n// (&&&&&&&&,    @%      &&        &&@@@@@    /@*    @@@@    (@/     @@@.    @@@@@@\n// (&&&&&&&&&&(    ,&@   @&        &&@@@@@@&*     *&@@@@@@&     @@   @@@&   @@@@@@@\n// /%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@@@\n// /%%%%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@\n\n/**\n * @title Maschine Dutch Auction Contract\n * @author arod.studio and Fingerprints DAO\n * @notice This contract implements a Dutch Auction for NFTs (Non-Fungible Tokens).\n * The auction starts at a high price, decreasing over time until a bid is made or\n * a reserve price is reached. Users bid for a quantity of NFTs. They can withdraw\n * their funds after the auction, or claim a refund if conditions are met.\n * Additionally, users can claim additional NFTs using their prospective refunds\n * while the auction is ongoing.\n * The auction can be paused, unpaused, and configured by an admin.\n * Security features like reentrancy guard, overflow/underflow checks,\n * and signature verification are included.\n *\n * SPDX-License-Identifier: MIT\n */\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"./IDutchAuction.sol\";\nimport \"./INFT.sol\";\n\n// import \"hardhat/console.sol\";\n\n/**\n * @title Dutch Auction Contract\n * @dev This contract manages a dutch auction for NFT tokens. Users can bid,\n * claim refunds, claim tokens, and admins can refund users.\n * The contract is pausable and non-reentrant for safety.\n */\ncontract DutchAuction is\n  IDutchAuction,\n  AccessControl,\n  Pausable,\n  ReentrancyGuard\n{\n  /// @notice EIP712 Domain Hash\n  bytes32 public immutable eip712DomainHash;\n\n  /// @notice NFT contract address\n  INFT public nftContractAddress;\n\n  /// @notice Signer address\n  address public signerAddress;\n\n  /// @notice Treasury address that will receive funds\n  address public treasuryAddress;\n\n  /// @dev Settled Price in wei\n  uint256 private _settledPriceInWei;\n\n  /// @dev Auction Config\n  Config private _config;\n\n  /// @dev Total minted tokens\n  uint32 private _totalMinted;\n\n  /// @dev Funds withdrawn or not\n  bool private _withdrawn;\n\n  /// @dev Mapping of user address to User data\n  mapping(address => User) private _userData;\n\n  /// @dev Mapping of user address to nonce\n  mapping(address => uint256) private _nonces;\n\n  modifier validConfig() {\n    if (_config.startTime == 0) revert ConfigNotSet();\n    _;\n  }\n\n  modifier validTime() {\n    Config memory config = _config;\n    if (block.timestamp > config.endTime || block.timestamp < config.startTime)\n      revert InvalidStartEndTime(config.startTime, config.endTime);\n    _;\n  }\n\n  /// @notice DutchAuction Constructor\n  /// @param _nftAddress NFT contract address\n  /// @param _signerAddress Signer address\n  /// @param _treasuryAddress Treasury address\n  constructor(\n    address _nftAddress,\n    address _signerAddress,\n    address _treasuryAddress\n  ) {\n    nftContractAddress = INFT(_nftAddress);\n    signerAddress = _signerAddress;\n    treasuryAddress = _treasuryAddress;\n\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n    uint256 chainId;\n    assembly {\n      chainId := chainid()\n    }\n    eip712DomainHash = keccak256(\n      abi.encode(\n        keccak256(\n          \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        ),\n        keccak256(bytes(\"Fingerprints DAO Dutch Auction\")),\n        keccak256(bytes(\"1\")),\n        chainId,\n        address(this)\n      )\n    );\n  }\n\n  /// @notice Set auction config\n  /// @dev Only admin can set auction config\n  /// @param startAmountInWei Auction start amount in wei\n  /// @param endAmountInWei Auction end amount in wei\n  /// @param limitInWei Maximum amount users can use to purchase NFTs\n  /// @param refundDelayTime Delay time which users need to wait to claim refund after the auction ends\n  /// @param startTime Auction start time\n  /// @param endTime Auction end time\n  function setConfig(\n    uint256 startAmountInWei,\n    uint256 endAmountInWei,\n    uint216 limitInWei,\n    uint32 refundDelayTime,\n    uint64 startTime,\n    uint64 endTime\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_config.startTime != 0 && _config.startTime <= block.timestamp)\n      revert ConfigAlreadySet();\n\n    if (startTime == 0 || startTime >= endTime)\n      revert InvalidStartEndTime(startTime, endTime);\n    if (startAmountInWei == 0 || startAmountInWei <= endAmountInWei)\n      revert InvalidAmountInWei();\n    if (limitInWei == 0) revert InvalidAmountInWei();\n\n    _config = Config({\n      startAmountInWei: startAmountInWei,\n      endAmountInWei: endAmountInWei,\n      limitInWei: limitInWei,\n      refundDelayTime: refundDelayTime,\n      startTime: startTime,\n      endTime: endTime\n    });\n  }\n\n  /**\n   * @dev Sets the address of the NFT contract.\n   *\n   * Requirements:\n   * - Caller must have the DEFAULT_ADMIN_ROLE.\n   * - New address must not be the zero address.\n   *\n   * @param newAddress The address of the new NFT contract.\n   */\n  function setNftContractAddress(\n    address newAddress\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    require(\n      newAddress != address(0),\n      \"Invalid address: zero address not allowed\"\n    );\n    nftContractAddress = INFT(newAddress);\n  }\n\n  /**\n   * @dev Sets the signer address.\n   *\n   * Requirements:\n   * - Caller must have the DEFAULT_ADMIN_ROLE.\n   * - New address must not be the zero address.\n   *\n   * @param newAddress The address of the new signer.\n   */\n  function setSignerAddress(\n    address newAddress\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    require(\n      newAddress != address(0),\n      \"Invalid address: zero address not allowed\"\n    );\n    signerAddress = newAddress;\n  }\n\n  /// @notice Sets treasury address\n  /// @param _treasuryAddress New treasury address\n  function setTreasuryAddress(\n    address _treasuryAddress\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    require(\n      _treasuryAddress != address(0),\n      \"Invalid address: zero address not allowed\"\n    );\n    treasuryAddress = _treasuryAddress;\n  }\n\n  /// @notice Pause the auction\n  function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _pause();\n  }\n\n  /// @notice Unpause the auction\n  function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n    _unpause();\n  }\n\n  /// @notice Get auction config\n  /// @return config Auction config\n  function getConfig() external view returns (Config memory) {\n    return _config;\n  }\n\n  /// @notice Get user data\n  /// @param user User address\n  /// @return User struct\n  function getUserData(address user) external view returns (User memory) {\n    return _userData[user];\n  }\n\n  /// @notice Get auction's settled price\n  /// @return price Auction's settled price\n  function getSettledPriceInWei() external view returns (uint256) {\n    return _settledPriceInWei;\n  }\n\n  /// @notice Get auction's current price\n  /// @return price Auction's current price\n  function getCurrentPriceInWei() public view returns (uint256) {\n    Config memory config = _config; // storage to memory\n    // Return startAmountInWei if auction not started\n    if (block.timestamp <= config.startTime) return config.startAmountInWei;\n    // Return endAmountInWei if auction ended\n    if (block.timestamp >= config.endTime) return config.endAmountInWei;\n\n    // Declare variables to derive in the subsequent unchecked scope.\n    uint256 duration;\n    uint256 elapsed;\n    uint256 remaining;\n\n    // Skip underflow checks as startTime <= block.timestamp < endTime.\n    unchecked {\n      // Derive the duration for the order and place it on the stack.\n      duration = config.endTime - config.startTime;\n\n      // Derive time elapsed since the order started & place on stack.\n      elapsed = block.timestamp - config.startTime;\n\n      // Derive time remaining until order expires and place on stack.\n      remaining = duration - elapsed;\n    }\n\n    return\n      (config.startAmountInWei * remaining + config.endAmountInWei * elapsed) /\n      duration;\n  }\n\n  /// @notice Get user's nonce for signature verification\n  /// @param user User address\n  /// @return nonce User's nonce\n  function getNonce(address user) external view returns (uint256) {\n    return _nonces[user];\n  }\n\n  /// @dev Return user's current nonce and increase it\n  /// @param user User address\n  /// @return current Current nonce\n  function useNonce(address user) internal returns (uint256 current) {\n    current = _nonces[user];\n    ++_nonces[user];\n  }\n\n  /// @notice Make bid to purchase NFTs\n  /// @param qty Amount of tokens to purchase\n  /// @param deadline Timestamp when the signature expires\n  /// @param signature Signature to verify user's purchase\n  function bid(\n    uint32 qty,\n    uint256 deadline,\n    bytes memory signature\n  ) external payable nonReentrant whenNotPaused validConfig validTime {\n    if (block.timestamp > deadline) revert BidExpired(deadline);\n    if (qty < 1) revert InvalidQuantity();\n\n    bytes32 hashStruct = keccak256(\n      abi.encode(\n        keccak256(\n          \"Bid(address account,uint32 qty,uint256 nonce,uint256 deadline)\"\n        ),\n        msg.sender,\n        qty,\n        useNonce(msg.sender),\n        deadline\n      )\n    );\n\n    bytes32 hash = keccak256(\n      abi.encodePacked(\"\\x19\\x01\", eip712DomainHash, hashStruct)\n    );\n\n    address recoveredSigner = ECDSA.recover(hash, signature);\n    if (signerAddress != recoveredSigner) revert InvalidSignature();\n\n    uint32 available = nftContractAddress.tokenIdMax() -\n      uint16(nftContractAddress.currentTokenId());\n\n    if (qty > available) {\n      revert MaxSupplyReached();\n    }\n\n    uint256 price = getCurrentPriceInWei();\n    uint256 payment = qty * price;\n    if (msg.value < payment) revert NotEnoughValue();\n\n    User storage bidder = _userData[msg.sender]; // get user's current bid total\n    bidder.contribution = bidder.contribution + uint216(payment);\n    bidder.tokensBidded = bidder.tokensBidded + qty;\n\n    if (bidder.contribution > _config.limitInWei) revert PurchaseLimitReached();\n\n    _totalMinted += qty;\n\n    // _settledPriceInWei is always the minimum price of all the bids' unit price\n    if (price < _settledPriceInWei || _settledPriceInWei == 0) {\n      _settledPriceInWei = price;\n    }\n\n    if (msg.value > payment) {\n      uint256 refundInWei = msg.value - payment;\n      (bool success, ) = msg.sender.call{value: refundInWei}(\"\");\n      if (!success) revert TransferFailed();\n    }\n    // mint tokens to user\n    _mintTokens(msg.sender, qty);\n\n    emit Bid(msg.sender, qty, price);\n  }\n\n  /// @notice Return user's claimable tokens count\n  /// @param user User address\n  /// @return claimable Claimable tokens count\n  function getClaimableTokens(\n    address user\n  ) public view returns (uint32 claimable) {\n    User storage bidder = _userData[user]; // get user's current bid total\n    uint256 price = getCurrentPriceInWei();\n    claimable = uint32(bidder.contribution / price) - bidder.tokensBidded;\n    uint32 available = nftContractAddress.tokenIdMax() -\n      uint16(nftContractAddress.currentTokenId());\n    if (claimable > available) claimable = available;\n  }\n\n  /// @notice Claim additional NFTs without additional payment\n  /// @param amount Number of tokens to claim\n  function claimTokens(\n    uint32 amount\n  ) external nonReentrant whenNotPaused validConfig validTime {\n    User storage bidder = _userData[msg.sender]; // get user's current bid total\n    uint256 price = getCurrentPriceInWei();\n    uint32 claimable = getClaimableTokens(msg.sender);\n    if (amount > claimable) amount = claimable;\n    if (amount == 0) revert NothingToClaim();\n\n    bidder.tokensBidded = bidder.tokensBidded + amount;\n    _totalMinted += amount;\n\n    // _settledPriceInWei is always the minimum price of all the bids' unit price\n    if (price < _settledPriceInWei) {\n      _settledPriceInWei = price;\n    }\n\n    _mintTokens(msg.sender, amount);\n\n    emit Claim(msg.sender, amount);\n  }\n\n  /// @notice Admin withdraw funds\n  /// @dev Only admin can withdraw funds\n  function withdrawFunds() external nonReentrant onlyRole(DEFAULT_ADMIN_ROLE) {\n    if (_config.endTime >= block.timestamp) revert NotEnded();\n    if (_withdrawn) revert AlreadyWithdrawn();\n    _withdrawn = true;\n\n    uint256 amount = _totalMinted * _settledPriceInWei;\n    (bool success, ) = treasuryAddress.call{value: amount}(\"\");\n    if (!success) revert TransferFailed();\n  }\n\n  /**\n   * @notice Allows a participant to claim their refund after the auction ends.\n   * Refund is calculated based on the difference between their contribution and the final settled price.\n   * This function can only be called after the refund delay time has passed post-auction end.\n   * Note: If the function reverts with 'ClaimRefundNotReady', it means the refund delay time has not passed yet.\n   */\n  function claimRefund() external nonReentrant whenNotPaused validConfig {\n    Config memory config = _config;\n    if (config.endTime + config.refundDelayTime >= block.timestamp)\n      revert ClaimRefundNotReady();\n\n    _claimRefund(msg.sender);\n  }\n\n  /**\n   * @notice Admin-enforced claim of refunds for a list of user addresses.\n   * This function is identical to `claimRefund` but allows an admin to force\n   * users to claim their refund. Can only be called after the refund delay time has passed post-auction end.\n   * Only callable by addresses with the DEFAULT_ADMIN_ROLE.\n   * Note: If the function reverts with 'ClaimRefundNotReady', it means the refund delay time has not passed yet.\n   * @param accounts An array of addresses for which refunds will be claimed.\n   */\n  function refundUsers(\n    address[] memory accounts\n  )\n    external\n    nonReentrant\n    whenNotPaused\n    validConfig\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    Config memory config = _config;\n    if (config.endTime + config.refundDelayTime >= block.timestamp)\n      revert ClaimRefundNotReady();\n\n    uint256 length = accounts.length;\n    for (uint256 i; i != length; ++i) {\n      _claimRefund(accounts[i]);\n    }\n  }\n\n  /**\n   * @dev Internal function for processing refunds.\n   * The function calculates the refund as the user's total contribution minus the amount spent on bidding.\n   * It then sends the refund (if any) to the user's account.\n   * Note: If the function reverts with 'UserAlreadyClaimed', it means the user has already claimed their refund.\n   * @param account Address of the user claiming the refund.\n   */\n  function _claimRefund(address account) internal {\n    User storage user = _userData[account];\n    if (user.refundClaimed) revert UserAlreadyClaimed();\n    user.refundClaimed = true;\n    uint256 refundInWei = user.contribution -\n      (_settledPriceInWei * user.tokensBidded);\n    if (refundInWei > 0) {\n      (bool success, ) = account.call{value: refundInWei}(\"\");\n      if (!success) revert TransferFailed();\n      emit ClaimRefund(account, refundInWei);\n    }\n  }\n\n  /**\n   * @dev Internal function to mint a specified quantity of NFTs for a recipient.\n   * This function mints 'qty' number of NFTs to the 'to' address.\n   * @param to Recipient address.\n   * @param qty Number of NFTs to mint.\n   */\n  function _mintTokens(address to, uint32 qty) internal {\n    for (uint32 i; i != qty; ++i) {\n      nftContractAddress.mint(to);\n    }\n  }\n}\n"
    },
    "contracts/IDutchAuction.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title Dutch Auction Interface\n/// @dev Defines the methods and structures for the Dutch Auction contract.\ninterface IDutchAuction {\n  /// Errors\n  /// @dev Emitted when trying to interact with the contract before its config is set.\n  error ConfigNotSet();\n\n  /// @dev Emitted when trying to set the contract config when it's already been set.\n  error ConfigAlreadySet();\n\n  /// @dev Emitted when the amount of wei provided is invalid.\n  error InvalidAmountInWei();\n\n  /// @dev Emitted when the start or end time is invalid.\n  error InvalidStartEndTime(uint64 startTime, uint64 endTime);\n\n  /// @dev Emitted when the quantity provided is invalid.\n  error InvalidQuantity();\n\n  /// @dev Emitted when trying to interact with the contract before the auction has ended.\n  error NotEnded();\n\n  /// @dev Emitted when the value provided is not enough for the desired action.\n  error NotEnoughValue();\n\n  /// @dev Emitted when trying to request a refund when not eligible.\n  error NotRefundable();\n\n  /// @dev Emitted when trying to interact with the contract before the auction has started.\n  error NotStarted();\n\n  /// @dev Emitted when a transfer fails.\n  error TransferFailed();\n\n  /// @dev Emitted when a user tries to claim a refund that they've already claimed.\n  error UserAlreadyClaimed();\n\n  /// @dev Emitted when a bid has expired.\n  error BidExpired(uint256 deadline);\n\n  /// @dev Emitted when the provided signature is invalid.\n  error InvalidSignature();\n\n  /// @dev Emitted when the purchase limit is reached.\n  error PurchaseLimitReached();\n\n  /// @dev Emitted when trying to claim a refund before the refund time is ready.\n  error ClaimRefundNotReady();\n\n  /// @dev Emitted when there's nothing to claim.\n  error NothingToClaim();\n\n  /// @dev Emitted when funds have already been withdrawn.\n  error AlreadyWithdrawn();\n\n  /// @dev Emitted when the max supply is reached.\n  error MaxSupplyReached();\n  /// @dev Represents a user in the auction\n\n  struct User {\n    /// @notice The total amount of ETH contributed by the user.\n    uint216 contribution;\n    /// @notice The total number of tokens bidded by the user.\n    uint32 tokensBidded;\n    /// @notice A flag indicating if the user has claimed a refund.\n    bool refundClaimed;\n  }\n\n  /// @dev Represents the auction configuration\n  struct Config {\n    /// @notice The initial amount per token in wei when the auction starts.\n    uint256 startAmountInWei;\n    /// @notice The final amount per token in wei when the auction ends.\n    uint256 endAmountInWei;\n    /// @notice The maximum contribution allowed per user in wei.\n    uint216 limitInWei;\n    /// @notice The delay time for a refund to be available.\n    uint32 refundDelayTime;\n    /// @notice The start time of the auction.\n    uint64 startTime;\n    /// @notice The end time of the auction.\n    uint64 endTime;\n  }\n  /// @dev Emitted when a user claims a refund.\n  /// @param user The address of the user claiming the refund.\n  /// @param refundInWei The amount of the refund in Wei.\n  event ClaimRefund(address user, uint256 refundInWei);\n\n  /// @dev Emitted when a user places a bid.\n  /// @param user The address of the user placing the bid.\n  /// @param qty The quantity of tokens the user is bidding for.\n  /// @param price The total price of the bid in Wei.\n  event Bid(address user, uint32 qty, uint256 price);\n\n  /// @dev Emitted when a user claims their tokens after the auction.\n  /// @param user The address of the user claiming the tokens.\n  /// @param qty The quantity of tokens claimed.\n  event Claim(address user, uint32 qty);\n}\n"
    },
    "contracts/INFT.sol": {
      "content": "/**\n * IMPORTANT: THIS CONTRACT IS A COPY FROM ERC712 CONTRACT TO RUN IT LOCALLY\n * DO NOT DEPLOY THIS CONTRACT IN MAINNET, IF YOU WANT THE ORIGINAL CODE\n * CHECK IT HERE: https://github.com/harmvandendorpel/maschine-token-contract\n */\n\n//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface INFT {\n  function tokenIdMax() external view returns (uint16);\n\n  function currentTokenId() external view returns (uint256);\n\n  function mint(address to) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}