{{
  "language": "Solidity",
  "sources": {
    "contracts/KaijuMart.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./interfaces/IKaijuMart.sol\";\n\nerror KaijuMart_CannotClaimRefund();\nerror KaijuMart_CannotRedeemAuction();\nerror KaijuMart_InvalidRedeemerContract();\nerror KaijuMart_InvalidTokenType();\nerror KaijuMart_LotAlreadyExists();\nerror KaijuMart_LotDoesNotExist();\nerror KaijuMart_MustBeAKing();\n\n/**\n                        .             :++-\n                       *##-          +####*          -##+\n                       *####-      :%######%.      -%###*\n                       *######:   =##########=   .######*\n                       *#######*-#############*-*#######*\n                       *################################*\n                       *################################*\n                       *################################*\n                       *################################*\n                       *################################*\n                       :*******************************+.\n\n                .:.\n               *###%*=:\n              .##########+-.\n              +###############=:\n              %##################%+\n             =######################\n             -######################++++++++++++++++++=-:\n              =###########################################*:\n               =#############################################.\n  +####%#*+=-:. -#############################################:\n  %############################################################=\n  %##############################################################\n  %##############################################################%=----::.\n  %#######################################################################%:\n  %##########################################+:    :+%#######################:\n  *########################################*          *#######################\n   -%######################################            %######################\n     -%###################################%            #######################\n       =###################################-          :#######################\n     ....+##################################*.      .+########################\n  +###########################################%*++*%##########################\n  %#########################################################################*.\n  %#######################################################################+\n  ########################################################################-\n  *#######################################################################-\n  .######################################################################%.\n     :+#################################################################-\n         :=#####################################################:.....\n             :--:.:##############################################+\n   ::             +###############################################%-\n  ####%+-.        %##################################################.\n  %#######%*-.   :###################################################%\n  %###########%*=*####################################################=\n  %####################################################################\n  %####################################################################+\n  %#####################################################################.\n  %#####################################################################%\n  %######################################################################-\n  .+*********************************************************************.\n * @title KaijuMart\n * @author Augminted Labs, LLC\n */\ncontract KaijuMart is IKaijuMart, AccessControl, ReentrancyGuard {\n    bytes32 public constant MANAGER_ROLE = keccak256(\"MANAGER_ROLE\");\n\n    KaijuContracts public kaijuContracts;\n    ManagerContracts public managerContracts;\n    mapping(uint256 => Lot) public lots;\n\n    constructor(\n        KaijuContracts memory _kaijuContracts,\n        ManagerContracts memory _managerContracts,\n        address admin\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n\n        kaijuContracts = _kaijuContracts;\n        managerContracts = _managerContracts;\n    }\n\n    /**\n     * @notice Modifier that requires a sender to be part of the KaijuKingz ecosystem\n     */\n    modifier onlyKingz() {\n        if (!isKing(_msgSender())) revert KaijuMart_MustBeAKing();\n        _;\n    }\n\n    /**\n     * @notice Modifier that ensures a lot identifier is unused\n     * @param lotId Globally unique identifier for a lot\n     */\n    modifier reserveLot(uint256 lotId) {\n        if (lots[lotId].lotType != LotType.NONE) revert KaijuMart_LotAlreadyExists();\n        _;\n    }\n\n    /**\n     * @notice Modifier that ensures a lot exists\n     * @param lotId Unique identifier for a lot\n     */\n    modifier lotExists(uint256 lotId) {\n        if (lots[lotId].lotType == LotType.NONE) revert KaijuMart_LotDoesNotExist();\n        _;\n    }\n\n    /**\n     * @notice Returns whether or not an address holds any KaijuKingz ecosystem tokens\n     * @param account Address to return the holder status of\n     */\n    function isKing(address account) public view returns (bool) {\n        return kaijuContracts.scientists.balanceOf(account) > 0\n            || kaijuContracts.mutants.balanceOf(account) > 0\n            || kaijuContracts.kaiju.isHolder(account);\n    }\n\n    /**\n     * @notice Set KaijuKingz contracts\n     * @param _kaijuContracts New set of KaijuKingz contracts\n     */\n    function setKaijuContracts(KaijuContracts calldata _kaijuContracts) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        kaijuContracts = _kaijuContracts;\n    }\n\n    /**\n     * @notice Set manager contracts\n     * @param _managerContracts New set of manager contract\n     */\n    function setManagerContracts(ManagerContracts calldata _managerContracts) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        managerContracts = _managerContracts;\n    }\n\n    /**\n     * @notice Return the address of the manager contract for a specified lot type\n     * @param lotType Specified lot type\n     */\n    function _manager(LotType lotType) internal view returns (address) {\n        if (lotType == LotType.RAFFLE) return address(managerContracts.raffle);\n        else if (lotType == LotType.DOORBUSTER) return address(managerContracts.doorbuster);\n        else if (lotType == LotType.AUCTION) return address(managerContracts.auction);\n        else return address(0);\n    }\n\n    /**\n     * @notice Create a new lot\n     * @param id Unique identifier\n     * @param lot Struct describing lot\n     * @param lotType Sale mechanism of the lot\n     * @param rwastePrice Price in $RWASTE when applicable\n     * @param scalesPrice Price in $SCALES when applicable\n     */\n    function _create(\n        uint256 id,\n        CreateLot calldata lot,\n        LotType lotType,\n        uint104 rwastePrice,\n        uint104 scalesPrice\n    )\n        internal\n    {\n        if (\n            address(lot.redeemer) != address(0) &&\n            !lot.redeemer.supportsInterface(type(IKaijuMartRedeemable).interfaceId)\n        ) revert KaijuMart_InvalidRedeemerContract();\n\n        lots[id] = Lot({\n            rwastePrice: rwastePrice,\n            scalesPrice: scalesPrice,\n            lotType: lotType,\n            paymentToken: lot.paymentToken,\n            redeemer: lot.redeemer\n        });\n\n        emit Create(id, lotType, _manager(lotType));\n    }\n\n    /**\n     * @notice Calculate the cost of a lot based on amount\n     * @param lotId Lot to calculate cost for\n     * @param amount Number of items to purchase\n     * @param token Preferred payment token type\n     */\n    function _getCost(\n        uint256 lotId,\n        uint32 amount,\n        PaymentToken token\n    )\n        internal\n        view\n        returns (uint104)\n    {\n        PaymentToken acceptedPaymentToken = lots[lotId].paymentToken;\n\n        if (acceptedPaymentToken != PaymentToken.EITHER && acceptedPaymentToken != token)\n            revert KaijuMart_InvalidTokenType();\n\n        return amount * (token == PaymentToken.SCALES ? lots[lotId].scalesPrice : lots[lotId].rwastePrice);\n    }\n\n    /**\n     * @notice Charge an account a specified amount of tokens\n     * @dev Payment defaults to $RWASTE if `EITHER` is specified\n     * @param account Address to charge\n     * @param token Preferred payment token\n     * @param value Amount to charge\n     */\n    function _charge(\n        address account,\n        PaymentToken token,\n        uint104 value\n    )\n        internal\n        nonReentrant\n    {\n        if (value > 0) {\n            if (token == PaymentToken.SCALES) kaijuContracts.scales.spend(account, value);\n            else kaijuContracts.rwaste.burn(account, value);\n        }\n    }\n\n    /**\n     * @notice Refund an account a specified amount of tokens\n     * @dev No payment default, if `EITHER` is specified this is a noop\n     * @param account Address to refund\n     * @param token Type of tokens to refund\n     * @param value Amount of tokens to refund\n     */\n    function _refund(\n        address account,\n        PaymentToken token,\n        uint104 value\n    )\n        internal\n        nonReentrant\n    {\n        if (token == PaymentToken.RWASTE) kaijuContracts.rwaste.claimLaboratoryExperimentRewards(account, value);\n        else if (token == PaymentToken.SCALES) kaijuContracts.scales.credit(account, value);\n    }\n\n    /**\n     * @notice Redeem a lot\n     * @param lotId Lot to redeem\n     * @param amount Quantity to redeem\n     * @param to Address redeeming the lot\n     */\n    function _redeem(\n        uint256 lotId,\n        uint32 amount,\n        address to\n    )\n        internal\n        nonReentrant\n    {\n        IKaijuMartRedeemable redeemer = lots[lotId].redeemer;\n\n        if (address(redeemer) != address(0)) {\n            redeemer.kmartRedeem(lotId, amount, to);\n\n            emit Redeem(lotId, amount, to, redeemer);\n        }\n    }\n\n    // 📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣\n    // 📣                                          AUCTION MANAGER                                           📣\n    // 📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣📣\n\n    /**\n     * @notice Return the details of an auction\n     * @param auctionId Lot identifier for the auction\n     */\n    function getAuction(\n        uint256 auctionId\n    )\n        public\n        view\n        returns (IAuctionManager.Auction memory)\n    {\n        return managerContracts.auction.get(auctionId);\n    }\n\n    /**\n     * @notice Return an account's current bid on an auction lot\n     * @param auctionId Lot identifier for the auction\n     * @param account Address to return the current bid of\n     */\n    function getBid(\n        uint256 auctionId,\n        address account\n    )\n        public\n        view\n        returns (uint104)\n    {\n        return managerContracts.auction.getBid(auctionId, account);\n    }\n\n    /**\n     * @notice Create a new auction lot\n     * @param lotId Globally unique lot identifier\n     * @param auction Configuration details of the new auction lot\n     */\n    function createAuction(\n        uint256 lotId,\n        CreateLot calldata lot,\n        IAuctionManager.CreateAuction calldata auction\n    )\n        external\n        reserveLot(lotId)\n        onlyRole(MANAGER_ROLE)\n    {\n        if (lot.paymentToken == PaymentToken.EITHER) revert KaijuMart_InvalidTokenType();\n\n        _create(lotId, lot, LotType.AUCTION, 0, 0);\n        managerContracts.auction.create(lotId, auction);\n    }\n\n    /**\n     * @notice Close an auction lot\n     * @param auctionId Lot identifier for the auction\n     * @param lowestWinningBid Lowest amount that is considered a winning bid\n     * @param tiebrokenWinners An array of winning addresses use to tiebreak identical winning bids\n     */\n    function close(\n        uint256 auctionId,\n        uint104 lowestWinningBid,\n        address[] calldata tiebrokenWinners\n    )\n        external\n        lotExists(auctionId)\n        onlyRole(MANAGER_ROLE)\n    {\n        managerContracts.auction.close(auctionId, lowestWinningBid, tiebrokenWinners);\n    }\n\n    /**\n     * @notice Replaces the sender's current bid on an auction lot\n     * @dev Auctions cannot accept `EITHER` PaymentType so we can just assume the token type from the auction details\n     * @param auctionId Lot identifier for the auction\n     * @param value New bid to replace the current bid with\n     */\n    function bid(\n        uint256 auctionId,\n        uint104 value\n    )\n        external\n        lotExists(auctionId)\n        onlyKingz\n    {\n        uint104 increase = managerContracts.auction.bid(auctionId, value, _msgSender());\n\n        _charge(\n            _msgSender(),\n            lots[auctionId].paymentToken,\n            increase\n        );\n\n        emit Bid(auctionId, _msgSender(), value);\n    }\n\n    /**\n     * @notice Claim a refund for spent tokens on a lost auction lot\n     * @param auctionId Lot identifier for the auction\n     */\n    function refund(\n        uint256 auctionId\n    )\n        external\n        lotExists(auctionId)\n    {\n        if (managerContracts.auction.isWinner(auctionId, _msgSender())) revert KaijuMart_CannotClaimRefund();\n\n        uint104 refundAmount = managerContracts.auction.settle(auctionId, _msgSender());\n\n        _refund(\n            _msgSender(),\n            lots[auctionId].paymentToken,\n            refundAmount\n        );\n\n        emit Refund(auctionId, _msgSender(), refundAmount);\n    }\n\n    /**\n     * @notice Redeem a winning auction lot\n     * @param auctionId Lot identifier for the auction\n     */\n    function redeem(\n        uint256 auctionId\n    )\n        external\n        lotExists(auctionId)\n    {\n        if (!managerContracts.auction.isWinner(auctionId, _msgSender())) revert KaijuMart_CannotRedeemAuction();\n\n        managerContracts.auction.settle(auctionId, _msgSender());\n\n        _redeem(auctionId, 1, _msgSender());\n    }\n\n    // 🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟\n    // 🎟                                           RAFFLE MANAGER                                           🎟\n    // 🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟🎟\n\n    /**\n     * @notice Return the details of a raffle\n     * @param raffleId Lot identifier for the raffle\n     */\n    function getRaffle(\n        uint256 raffleId\n    )\n        public\n        view\n        returns (IRaffleManager.Raffle memory)\n    {\n        return managerContracts.raffle.get(raffleId);\n    }\n\n    /**\n     * @notice Create a new raffle lot\n     * @param lotId Globally unique lot identifier\n     * @param raffle Configuration details of the new raffle lot\n     */\n    function createRaffle(\n        uint256 lotId,\n        CreateLot calldata lot,\n        uint104 rwastePrice,\n        uint104 scalesPrice,\n        IRaffleManager.CreateRaffle calldata raffle\n    )\n        external\n        reserveLot(lotId)\n        onlyRole(MANAGER_ROLE)\n    {\n        _create(lotId, lot, LotType.RAFFLE, rwastePrice, scalesPrice);\n        managerContracts.raffle.create(lotId, raffle);\n    }\n\n    /**\n     * @notice Draw the results of a raffle lot\n     * @param raffleId Lot identifier for the raffle\n     * @param vrf Flag indicating if the results should be drawn using Chainlink VRF\n     */\n    function draw(\n        uint256 raffleId,\n        bool vrf\n    )\n        external\n        lotExists(raffleId)\n        onlyRole(MANAGER_ROLE)\n    {\n        managerContracts.raffle.draw(raffleId, vrf);\n    }\n\n    /**\n     * @notice Purchase entry into a raffle lot\n     * @param raffleId Lot identifier for the raffle\n     * @param amount Number of entries to purchase\n     * @param token Preferred payment token\n     */\n    function enter(\n        uint256 raffleId,\n        uint32 amount,\n        PaymentToken token\n    )\n        external\n        lotExists(raffleId)\n        onlyKingz\n    {\n        managerContracts.raffle.enter(raffleId, amount);\n\n        _charge(\n            _msgSender(),\n            token,\n            _getCost(raffleId, amount, token)\n        );\n\n        emit Enter(raffleId, _msgSender(), amount);\n    }\n\n    // 🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒\n    // 🛒                                         DOORBUSTER MANAGER                                         🛒\n    // 🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒🛒\n\n    /**\n     * @notice Return the details of a doorbuster\n     * @param doorbusterId Lot identifier for the doorbuster\n     */\n    function getDoorbuster(\n        uint256 doorbusterId\n    )\n        public\n        view\n        returns (IDoorbusterManager.Doorbuster memory)\n    {\n        return managerContracts.doorbuster.get(doorbusterId);\n    }\n\n    /**\n     * @notice Create a new doorbuster lot\n     * @param lotId Globally unique lot identifier\n     * @param supply Total purchasable supply\n     */\n    function createDoorbuster(\n        uint256 lotId,\n        CreateLot calldata lot,\n        uint104 rwastePrice,\n        uint104 scalesPrice,\n        uint32 supply\n    )\n        external\n        reserveLot(lotId)\n        onlyRole(MANAGER_ROLE)\n    {\n        _create(lotId, lot, LotType.DOORBUSTER, rwastePrice, scalesPrice);\n        managerContracts.doorbuster.create(lotId, supply);\n    }\n\n    /**\n     * @notice Purchase from a doorbuster lot\n     * @param doorbusterId Lot identifier for the doorbuster\n     * @param amount Number of items to purchase\n     * @param token Preferred payment token\n     * @param nonce Single use number encoded into signature\n     * @param signature Signature created by the current doorbuster `signer` account\n     */\n    function purchase(\n        uint256 doorbusterId,\n        uint32 amount,\n        PaymentToken token,\n        uint256 nonce,\n        bytes calldata signature\n    )\n        external\n        lotExists(doorbusterId)\n        onlyKingz\n    {\n        managerContracts.doorbuster.purchase(doorbusterId, amount, nonce, signature);\n\n        _charge(\n            _msgSender(),\n            token,\n            _getCost(doorbusterId, amount, token)\n        );\n\n        _redeem(doorbusterId, amount, _msgSender());\n\n        emit Purchase(doorbusterId, _msgSender(), amount);\n    }\n}"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IKaijuMart.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"./IKingzInTheShell.sol\";\nimport \"./IMutants.sol\";\nimport \"./IScientists.sol\";\nimport \"./IScales.sol\";\nimport \"./IRWaste.sol\";\nimport \"./IKaijuMartRedeemable.sol\";\nimport \"./IAuctionManager.sol\";\nimport \"./IDoorbusterManager.sol\";\nimport \"./IRaffleManager.sol\";\nimport \"./IKaijuMart.sol\";\n\ninterface IKaijuMart {\n    enum LotType {\n        NONE,\n        AUCTION,\n        RAFFLE,\n        DOORBUSTER\n    }\n\n    enum PaymentToken {\n        RWASTE,\n        SCALES,\n        EITHER\n    }\n\n    struct Lot {\n        uint104 rwastePrice;\n        uint104 scalesPrice;\n        LotType lotType;\n        PaymentToken paymentToken;\n        IKaijuMartRedeemable redeemer;\n    }\n\n    struct CreateLot {\n        PaymentToken paymentToken;\n        IKaijuMartRedeemable redeemer;\n    }\n\n    struct KaijuContracts {\n        IKingzInTheShell kaiju;\n        IMutants mutants;\n        IScientists scientists;\n        IRWaste rwaste;\n        IScales scales;\n    }\n\n    struct ManagerContracts {\n        IAuctionManager auction;\n        IDoorbusterManager doorbuster;\n        IRaffleManager raffle;\n    }\n\n    event Create(\n        uint256 indexed id,\n        LotType indexed lotType,\n        address indexed managerContract\n    );\n\n    event Bid(\n        uint256 indexed id,\n        address indexed account,\n        uint104 value\n    );\n\n    event Redeem(\n        uint256 indexed id,\n        uint32 indexed amount,\n        address indexed to,\n        IKaijuMartRedeemable redeemer\n    );\n\n    event Refund(\n        uint256 indexed id,\n        address indexed account,\n        uint104 value\n    );\n\n    event Purchase(\n        uint256 indexed id,\n        address indexed account,\n        uint64 amount\n    );\n\n    event Enter(\n        uint256 indexed id,\n        address indexed account,\n        uint64 amount\n    );\n\n    // 🦖👑👶🧬👨‍🔬👩‍🔬🧪\n\n    function isKing(address account) external view returns (bool);\n\n    // 💻💻💻💻💻 ADMIN FUNCTIONS 💻💻💻💻💻\n\n    function setKaijuContracts(KaijuContracts calldata _kaijuContracts) external;\n\n    function setManagerContracts(ManagerContracts calldata _managerContracts) external;\n\n    // 📣📣📣📣📣 AUCTION FUNCTIONS 📣📣📣📣📣\n\n    function getAuction(uint256 auctionId) external view returns (IAuctionManager.Auction memory);\n\n    function getBid(uint256 auctionId, address account) external view returns (uint104);\n\n    function createAuction(\n        uint256 lotId,\n        CreateLot calldata lot,\n        IAuctionManager.CreateAuction calldata auction\n    ) external;\n\n    function close(\n        uint256 auctionId,\n        uint104 lowestWinningBid,\n        address[] calldata tiebrokenWinners\n    ) external;\n\n    function bid(uint256 auctionId, uint104 value) external;\n\n    function refund(uint256 auctionId) external;\n\n    function redeem(uint256 auctionId) external;\n\n    // 🎟🎟🎟🎟🎟 RAFFLE FUNCTIONS 🎟🎟🎟🎟🎟\n\n    function getRaffle(uint256 raffleId) external view returns (IRaffleManager.Raffle memory);\n\n    function createRaffle(\n        uint256 lotId,\n        CreateLot calldata lot,\n        uint104 rwastePrice,\n        uint104 scalesPrice,\n        IRaffleManager.CreateRaffle calldata raffle\n    ) external;\n\n    function draw(uint256 raffleId, bool vrf) external;\n\n    function enter(uint256 raffleId, uint32 amount, PaymentToken token) external;\n\n    // 🛒🛒🛒🛒🛒 DOORBUSTER FUNCTIONS 🛒🛒🛒🛒🛒\n\n    function getDoorbuster(uint256 doorbusterId) external view returns (IDoorbusterManager.Doorbuster memory);\n\n    function createDoorbuster(\n        uint256 lotId,\n        CreateLot calldata lot,\n        uint104 rwastePrice,\n        uint104 scalesPrice,\n        uint32 supply\n    ) external;\n\n    function purchase(\n        uint256 doorbusterId,\n        uint32 amount,\n        PaymentToken token,\n        uint256 nonce,\n        bytes calldata signature\n    ) external;\n}"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IKingzInTheShell.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IKingzInTheShell is IERC721 {\n    function isHolder(address) external view returns (bool);\n}"
    },
    "contracts/interfaces/IMutants.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IMutants is IERC721 {}"
    },
    "contracts/interfaces/IScientists.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IScientists is IERC721 {}"
    },
    "contracts/interfaces/IScales.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IScales is IERC20 {\n    function spend(address, uint256) external;\n    function credit(address, uint256) external;\n}"
    },
    "contracts/interfaces/IRWaste.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRWaste is IERC20 {\n    function burn(address, uint256) external;\n    function claimLaboratoryExperimentRewards(address, uint256) external;\n}"
    },
    "contracts/interfaces/IKaijuMartRedeemable.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\npragma solidity ^0.8.0;\n\ninterface IKaijuMartRedeemable is IERC165 {\n    function kmartRedeem(uint256 lotId, uint32 amount, address to) external;\n}"
    },
    "contracts/interfaces/IAuctionManager.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\ninterface IAuctionManager {\n    struct CreateAuction {\n        uint104 reservePrice;\n        uint16 winners;\n        uint64 endsAt;\n    }\n\n    struct Auction {\n        uint104 reservePrice;\n        uint104 lowestWinningBid;\n        uint16 winners;\n        uint64 endsAt;\n    }\n\n    function get(uint256 id) external view returns (Auction memory);\n    function getBid(uint256 id, address sender) external view returns (uint104);\n    function isWinner(uint256 id, address sender) external view returns (bool);\n    function create(uint256 id, CreateAuction calldata auction) external;\n    function close(uint256 id, uint104 lowestWinningBid, address[] calldata _tiebrokenWinners) external;\n    function bid(uint256 id, uint104 value, address sender) external returns (uint104);\n    function settle(uint256 id, address sender) external returns (uint104);\n}"
    },
    "contracts/interfaces/IDoorbusterManager.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\ninterface IDoorbusterManager {\n    struct Doorbuster {\n        uint32 supply;\n    }\n\n    function get(uint256 id) external view returns (Doorbuster memory);\n    function create(uint256 id, uint32 supply) external;\n    function purchase(\n        uint256 id,\n        uint32 amount,\n        uint256 nonce,\n        bytes memory signature\n    ) external;\n}"
    },
    "contracts/interfaces/IRaffleManager.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n\npragma solidity ^0.8.0;\n\ninterface IRaffleManager {\n    struct CreateRaffle {\n        uint64 scriptId;\n        uint64 winners;\n        uint64 endsAt;\n    }\n\n    struct Raffle {\n        uint256 seed;\n        uint64 scriptId;\n        uint64 winners;\n        uint64 endsAt;\n    }\n\n    function get(uint256 id) external view returns (Raffle memory);\n    function isDrawn(uint256 id) external view returns (bool);\n    function create(uint256 id, CreateRaffle calldata raffle) external;\n    function enter(uint256 id, uint32 amount) external;\n    function draw(uint256 id, bool vrf) external;\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}