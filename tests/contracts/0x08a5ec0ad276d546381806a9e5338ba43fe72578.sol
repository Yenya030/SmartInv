{{
  "language": "Solidity",
  "sources": {
    "contracts/NekoSwapper.sol": {
      "content": "// author: SRB\r\npragma solidity 0.8.16;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface INekoNation {\r\n    function MAX_SUPPLY() external view returns (uint256);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function devMint(address to, uint256 amount) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external payable;\r\n\r\n    function hasRole(bytes32 role, address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\ncontract NekoSwapper is Ownable {\r\n    address public constant NekonationContractAddress =\r\n        0x660e8ac72dd2C4b69FbeFD0C89824C7E0a88e8A2;\r\n    bytes32 public constant SUPPORT_ROLE = keccak256(\"SUPPORT\");\r\n    uint256 public swapTimeThreshold = 69 minutes;\r\n    uint256 public swapFee = 0 ether;\r\n    mapping(uint256 => uint256) public lastSwapTimeOfTokenId;\r\n\r\n    INekoNation NekonationContract = INekoNation(NekonationContractAddress);\r\n\r\n    function changeSwapFee(uint256 newSwapFee) external onlyOwner {\r\n        swapFee = newSwapFee;\r\n    }\r\n\r\n    function changeSwapTimeThreshold(uint256 newSwapTimeThreshold)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swapTimeThreshold = newSwapTimeThreshold;\r\n    }\r\n\r\n    function contractHasSupportRole() public view returns (bool) {\r\n        return NekonationContract.hasRole(SUPPORT_ROLE, address(this));\r\n    }\r\n\r\n    function contractHasApproval() public view returns (bool) {\r\n        return NekonationContract.isApprovedForAll(msg.sender, address(this));\r\n    }\r\n\r\n    function getTokenIDsTimes(uint256[] memory usersTokenIDsArray)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 resLength = usersTokenIDsArray.length;\r\n        uint256[] memory tokenIDsTimes = new uint256[](resLength);\r\n        for (uint256 i = 0; i < resLength; i++) {\r\n            tokenIDsTimes[i] = lastSwapTimeOfTokenId[usersTokenIDsArray[i]];\r\n        }\r\n        return tokenIDsTimes;\r\n    }\r\n\r\n    /// @notice Swaps old NekoNation NFT for new one until supply max is reached\r\n    /// @dev requires SUPPORT role granted to contract address,\r\n    ///      requires Approval of msg.sender to transfer his token\r\n    ///      this SC holds the transfered old Token, since burning is not possible\r\n    /// @param oldTokenIds array of tokenIds that you want to swap for new ones\r\n    function swap(uint256[] memory oldTokenIds) external payable {\r\n        // contract checks\r\n        require(contractHasApproval(), \"approval to contract missing\");\r\n        require(\r\n            NekonationContract.hasRole(SUPPORT_ROLE, address(this)),\r\n            \"Support Role to contract missing\"\r\n        );\r\n        // check ownership\r\n        require(\r\n            tokenIDsOwnershipValid(oldTokenIds),\r\n            \"msg.sender not owner of all oldTokenIds\"\r\n        );\r\n\r\n        // amount check\r\n        uint256 tokenAmount = oldTokenIds.length;\r\n        require(\r\n            tokenAmount > 0 && tokenAmount <= 20,\r\n            \"incorrect amount of oldTokenIds\"\r\n        );\r\n        // check swap Time\r\n        require(tokenIDsTimeCanSwap(oldTokenIds), \"tokenId cannot swap yet\");\r\n        // check correct payment\r\n        require(msg.value >= swapFee * tokenAmount, \"price not paid\");\r\n\r\n        uint256 currentSupply = NekonationContract.totalSupply();\r\n        // check if tokenAmount exceeds MAX_SUPPLY\r\n        require(\r\n            currentSupply + tokenAmount <= NekonationContract.MAX_SUPPLY(),\r\n            \"maxSupply reached\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < oldTokenIds.length; i++) {\r\n            // collect users old tokens\r\n            NekonationContract.transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                oldTokenIds[i]\r\n            );\r\n            // block swap for the new tokens\r\n            uint256 futureTokenId = currentSupply + i;\r\n            lastSwapTimeOfTokenId[futureTokenId] = block.timestamp;\r\n        }\r\n        // mint new tokens to user\r\n        NekonationContract.devMint(msg.sender, tokenAmount);\r\n    }\r\n\r\n    function tokenIDsOwnershipValid(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (NekonationContract.ownerOf(tokenIds[i]) != msg.sender) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function tokenIDsTimeCanSwap(uint256[] memory tokenIds)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            if (\r\n                lastSwapTimeOfTokenId[tokenIds[i]] + swapTimeThreshold >\r\n                currentTime\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function walletOfOwner(address _owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 ownerTokenCount = NekonationContract.balanceOf(_owner);\r\n        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\r\n        uint256 currentTokenId = 0;\r\n        uint256 ownedTokenIndex = 0;\r\n        uint256 maxSupply = NekonationContract.totalSupply();\r\n        while (\r\n            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply\r\n        ) {\r\n            address currentTokenOwner = NekonationContract.ownerOf(\r\n                currentTokenId\r\n            );\r\n            if (currentTokenOwner == _owner) {\r\n                ownedTokenIds[ownedTokenIndex] = currentTokenId;\r\n                ownedTokenIndex++;\r\n            }\r\n            currentTokenId++;\r\n        }\r\n        return ownedTokenIds;\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n        require(success, \"tx failed\");\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}