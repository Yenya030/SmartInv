{{
  "language": "Solidity",
  "sources": {
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "src/interfaces/IAggregatorV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "src/Presale.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.13;\n\nimport {MerkleProof} from \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\nimport {Ownable} from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {IAggregatorV3} from \"./interfaces/IAggregatorV3.sol\";\n\n/*//////////////////////////////////////////////////////////////\n                          ERRORS\n//////////////////////////////////////////////////////////////*/\n\nerror SaleOngoing(uint256 current, uint256 ends);\nerror SaleNotStarted(uint256 current, uint256 start);\nerror SaleEnded(uint256 current, uint256 ends);\nerror InvalidProof();\nerror AlreadyInitialised();\nerror NotInitialised();\nerror AlreadyClaimed();\nerror ClaimsNotOpen();\nerror PaymentCalcUnderflow();\nerror NotPaymentToken();\nerror ModularError(uint120 by, uint120 remainder);\nerror ZeroAddress();\nerror ZeroAmount();\nerror MoreThanBalance();\nerror NoAccess();\n\n/*//////////////////////////////////////////////////////////////\n                          INTERFACES\n//////////////////////////////////////////////////////////////*/\n\ninterface IERC20 {\n    function balanceOf(address) external returns (uint256);\n    function transfer(address, uint256) external;\n    function transferFrom(address, address, uint256) external;\n}\n\ninterface IPresale {\n    event PresaleInit(address indexed token, address indexed priceFeed, address indexed admin, address treasury);\n    event Initialised(uint40 start, uint40 duration, uint256 price);\n    event ClaimRootSet(bytes32 indexed root);\n    event BuyOrder(address indexed buyer, address indexed paymentToken, uint256 payment, uint256 tokens);\n    event Claim(\n        address indexed buyer,\n        uint256 filledTokens,\n        uint256 unusedUsdc,\n        uint256 unusedUsdt,\n        uint256 unusedDai,\n        uint256 unusedEth\n    );\n    event PriceFeedUpdate(address indexed priceFeed);\n    event BuyOrderEth(address indexed buyer, int256 priceOfEth, uint256 amountOfEth, uint256 tokens);\n    event AdminUpdate(address indexed admin);\n    event TreasuryUpdate(address indexed treasury);\n    event ClaimStatus(bool claimStatus);\n    event DurationUpdate(uint40 duration);\n    event PriceUpdate(uint256 price);\n}\n\n/// @title Presale\n/// @author DeGatchi (https://github.com/DeGatchi)\n/// @author 0xHessian (https://github.com/0xHessian)\n/// @author 7811 (https://github.com/cranium7811)\ncontract Presale is IPresale, Ownable {\n    /*//////////////////////////////////////////////////////////////\n                                STATE\n    //////////////////////////////////////////////////////////////*/\n\n    /// Whether the contract's variables have been set.\n    bool public initialised;\n    // check the status of claim\n    // 0 - false - not ready\n    // 1 - true - ready\n    bool public claimStatus;\n    // address of the admin\n    address public admin;\n    // address of the treasury\n    address public immutable treasury;\n\n    /// Tokens being used as payment\n    address public immutable dai;\n    address public immutable usdt;\n    address public immutable usdc;\n    /// Token being sold\n    IERC20 public immutable token;\n    // Chainlink Aggregator interface\n    IAggregatorV3 public priceFeed;\n\n    /// When the sale begins.\n    uint40 public start;\n    /// How long the sale goes for.\n    uint40 public duration;\n    /// Total amount of tokens ordered.\n    uint120 public supplyOrdered;\n    /// Price per token\n    uint256 public price;\n\n    /// Root used to set the claim statistics.\n    bytes32 public claimRoot;\n\n    struct Receipt {\n        uint120 dai; // Total DAI used as payment (18 decimals).\n        uint120 usdt; // Total USDT used as payment (6 decimals).\n        uint120 usdc; // Total USDC used as payment (6 decimals).\n        uint120 eth; // Total ETH used as payment (18 decimals).\n        uint120 tokens; // Total presale tokens ordered.\n        bool claimed; // Whether the order has been claimed.\n    }\n\n    /// A record of EOAs and their corresponding order receipts.\n    mapping(address => Receipt) public receipt;\n\n    /*//////////////////////////////////////////////////////////////\n                                MODIFIERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// Enable use when contract has initialised.\n    modifier onlyInit() {\n        if (!initialised) revert NotInitialised();\n        _;\n    }\n\n    /// Enable use when the sale has finished.\n    modifier onlyEnd() {\n        if (block.timestamp < start + duration) {\n            revert SaleOngoing(block.timestamp, start + duration);\n        }\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Sets up the contract addresses as immutable for gas saving.\n    /// @param _dai ERC20 USDC token being used as payment (has 18 decimals).\n    /// @param _usdt ERC20 USDC token being used as payment (has 6 decimals).\n    /// @param _usdc ERC20 USDC token being used as payment (has 6 decimals).\n    /// @param _token ERC20 token being sold for `_usdc`.\n    /// @param _admin address of the admin\n    /// @param _treasury address of the treasury\n    constructor(\n        address _dai,\n        address _usdt,\n        address _usdc,\n        address _token,\n        address _priceFeed,\n        address _admin,\n        address _treasury\n    ) {\n        dai = _dai;\n        usdt = _usdt;\n        usdc = _usdc;\n        token = IERC20(_token);\n        priceFeed = IAggregatorV3(_priceFeed);\n        admin = _admin;\n        treasury = _treasury;\n\n        emit PresaleInit(_token, _priceFeed, _admin, _treasury);\n    }\n\n    /// @notice Sets up the sale.\n    /// @dev Requires the initialiser to send `_supply` of `_token` to this address.\n    /// @param _start Timestamp of when the sale begins.\n    /// @param _duration How long the sale goes for.\n    /// @param _price The `_usdc` payment value of each `_token`.\n    function initialise(uint40 _start, uint40 _duration, uint256 _price) external onlyOwner {\n        if (initialised) revert AlreadyInitialised();\n\n        initialised = true;\n        start = _start;\n        duration = _duration;\n        price = _price;\n\n        emit Initialised(_start, _duration, _price);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                SETTERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows owner to update the claim root to enable `claim()`.\n    /// @dev Used to update the `claimRoot` to enable claiming.\n    /// @param _newRoot Merkle root used after sale has ended to allow buyers to claim their tokens.\n    function setClaimRoot(bytes32 _newRoot) public onlyOwner onlyEnd {\n        if (block.timestamp < start) {\n            revert SaleNotStarted(block.timestamp, start);\n        }\n        claimRoot = _newRoot;\n        emit ClaimRootSet(_newRoot);\n    }\n\n    /// @notice allows the owner to set the priceFeed contract's address\n    /// @param _priceFeed address of the new priceFeed contract\n    function setPriceFeed(address _priceFeed) external {\n        if (msg.sender != admin) revert NoAccess();\n        if (_priceFeed == address(0)) revert ZeroAddress();\n        priceFeed = IAggregatorV3(_priceFeed);\n        emit PriceFeedUpdate(_priceFeed);\n    }\n\n    /// @notice allows the owner to set the address of `admin`\n    /// @param _admin address of the `admin`\n    function setAdmin(address _admin) external onlyOwner {\n        if (_admin == address(0)) revert ZeroAddress();\n        admin = _admin;\n        emit AdminUpdate(_admin);\n    }\n\n    /// @notice allows the admin to set the claim status\n    /// @param _claimStatus status of the claim, 0 - not ready, 1 - ready\n    function setClaimStatus(bool _claimStatus) external {\n        if (msg.sender != admin) revert NoAccess();\n        claimStatus = _claimStatus;\n        emit ClaimStatus(_claimStatus);\n    }\n\n    /// @notice allows the admin to set the duration of the sale\n    /// @param _duration duration of the ongoing sale\n    function setDuration(uint40 _duration) external {\n        if (msg.sender != admin) revert NoAccess();\n        duration = _duration;\n        emit DurationUpdate(_duration);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            CREATE BUY ORDERS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Allows users to create an order to purchase presale tokens usdc, usdt or dai.\n    /// @dev The buy event is used for the backend bot to determine the orders.\n    /// @param _purchaseAmount Amount of usd value in the ERC20 token's decimal units\n    /// @param _paymentToken Token paying with.\n    function createBuyOrder(uint256 _purchaseAmount, address _paymentToken) external onlyInit {\n        // Add a revert if purchaseAmount is less than 1\n        if (_purchaseAmount < 1) revert ZeroAmount();\n\n        uint40 _start = start;\n        if (block.timestamp < _start) {\n            revert SaleNotStarted(block.timestamp, _start);\n        }\n        if (block.timestamp >= _start + duration) {\n            revert SaleEnded(block.timestamp, _start + duration);\n        }\n\n        Receipt storage _receipt = receipt[msg.sender];\n        uint256 _tokens;\n        if (_paymentToken == dai) {\n            _tokens = (_purchaseAmount * 1e6) / price;\n            _receipt.dai += uint120(_purchaseAmount);\n        } else {\n            _tokens = (_purchaseAmount * 1e18) / price;\n            if (_paymentToken == usdc) _receipt.usdc += uint120(_purchaseAmount);\n            else if (_paymentToken == usdt) _receipt.usdt += uint120(_purchaseAmount);\n            else revert NotPaymentToken();\n        }\n\n        _receipt.tokens += uint120(_tokens);\n        supplyOrdered += uint120(_tokens);\n        IERC20(_paymentToken).transferFrom(msg.sender, treasury, _purchaseAmount);\n\n        emit BuyOrder(msg.sender, _paymentToken, _purchaseAmount, _tokens);\n    }\n\n    /// @notice Allows users to create an order to purchase presale tokens w/ ETH.\n    /// @dev The buy event is used for the backend bot to determine the orders.\n    function createBuyOrderEth() external payable onlyInit {\n        if (msg.value < 1) revert ZeroAmount();\n\n        // Make sure the sale is ongoing.\n        uint40 _start = start;\n        if (block.timestamp < _start) revert SaleNotStarted(block.timestamp, _start);\n        if (block.timestamp >= _start + duration) revert SaleEnded(block.timestamp, _start + duration);\n\n        int256 _ethPrice = _getLatestPrice();\n        uint256 _tokens = (uint256(_ethPrice) * msg.value) / (price * 1e2);\n        Receipt storage _receipt = receipt[msg.sender];\n\n        _receipt.eth += uint120(msg.value);\n        _receipt.tokens += uint120(_tokens);\n        supplyOrdered += uint120(_tokens);\n\n        (bool success, ) = treasury.call{value :msg.value}(\"\");\n        require(success, \"Transfer failed.\");\n\n        emit BuyOrderEth(msg.sender, _ethPrice, msg.value, _tokens);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            CLAIM AND TRANSFER\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice When sale ends, users can redeem their allocation w/ the filler bot's output.\n    /// @dev Set owner as the treasury claimer to receive all used USDC + unsold tokens.\n    ///      E.g, 90/100 tokens sold for 45 usdc paid; owner claims 10 tokens + 45 USDC.\n    /// @param _claimer The EOA claiming on behalf for by the caller.\n    /// @param _filledTokens Total presale tokens being sent to `_claimer`.\n    /// @param _unusedUsdc Total USDC amount, that weren't used to buy `token`, being sent to `_claimer`.\n    /// @param _unusedUsdt Total USDT amount, that weren't used to buy `token`, being sent to `_claimer`.\n    /// @param _unusedDai Total DAI amount, that weren't used to buy `token`, being sent to `_claimer`.\n    /// @param _unusedDai Total ETH amount, that weren't used to buy `token`, being sent to `_claimer`.\n    /// @param _proof Merkle tree verification path.\n    function claim(\n        address _claimer,\n        uint120 _filledTokens,\n        uint120 _unusedUsdc,\n        uint120 _unusedUsdt,\n        uint120 _unusedDai,\n        uint120 _unusedEth,\n        bytes32[] memory _proof\n    ) external onlyInit onlyEnd {\n        if (claimRoot == bytes32(0)) revert ClaimsNotOpen();\n        if (!claimStatus) revert ClaimsNotOpen();\n\n        Receipt storage _receipt = receipt[_claimer];\n        if (_receipt.claimed) revert AlreadyClaimed();\n\n        bytes32 leaf = keccak256(\n            bytes.concat(\n                keccak256(abi.encode(_claimer, _filledTokens, _unusedUsdc, _unusedUsdt, _unusedDai, _unusedEth))\n            )\n        );\n        if (!MerkleProof.verify(_proof, claimRoot, leaf)) revert InvalidProof();\n\n        _receipt.claimed = true;\n\n        if (_filledTokens > 0) token.transfer(_claimer, _filledTokens);\n        if (_unusedUsdc > 0) IERC20(usdc).transfer(_claimer, _unusedUsdc);\n        if (_unusedUsdt > 0) IERC20(usdt).transfer(_claimer, _unusedUsdt);\n        if (_unusedDai > 0) IERC20(dai).transfer(_claimer, _unusedDai);\n        if (_unusedEth > 0) payable(_claimer).transfer(_unusedEth);\n\n        emit Claim(_claimer, _filledTokens, _unusedUsdc, _unusedUsdt, _unusedDai, _unusedEth);\n    }\n\n    /// @notice transfers the tokens and the remaining stablecoin/ETH tokens after filling the order\n    /// @dev can be only called by the `admin`\n    /// @param _buyer addresses of all the buyers\n    /// @param _filledTokens amount of all the allocated tokens per address\n    /// @param _unusedUsdc total remaining usdc which was not used when filling the order\n    /// @param _unusedUsdt total remaining usdt which was not used when filling the order\n    /// @param _unusedDai total remaining dai which was not used when filling the order\n    /// @param _unusedEth total remaining eth which was not used when filling the order\n    function transferTokens(\n        address[] calldata _buyer,\n        uint120[] calldata _filledTokens,\n        uint120[] calldata _unusedUsdc,\n        uint120[] calldata _unusedUsdt,\n        uint120[] calldata _unusedDai,\n        uint120[] calldata _unusedEth\n    ) external {\n        if (msg.sender != admin) revert NoAccess();\n        if (!claimStatus) revert ClaimsNotOpen();\n\n        uint256 length = _buyer.length;\n        if (\n            (_filledTokens.length != length) || (_unusedUsdc.length != length) || (_unusedUsdt.length != length)\n                || (_unusedDai.length != length) || (_unusedEth.length != length)\n        ) revert NoAccess();\n\n        for (uint256 i; i < _buyer.length;) {\n            transferTokensWithoutProof(\n                _buyer[i], _filledTokens[i], _unusedUsdc[i], _unusedUsdt[i], _unusedDai[i], _unusedEth[i]\n            );\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice transfers the tokens and the remaining stablecoin/ETH tokens after filling the order\n    /// @dev can be only called by the `admin`\n    /// @param _buyer address of the buyer/claimer\n    /// @param _filledTokens amount of tokens which we transfer when filling the order per buyer\n    /// @param _unusedUsdc total remaining usdc which was not used when filling the order per buyer\n    /// @param _unusedUsdt total remaining usdt which was not used when filling the order per buyer\n    /// @param _unusedDai total remaining dai which was not used when filling the order per buyer\n    /// @param _unusedEth total remaining eth which was not used when filling the order per buyer\n    function transferTokensWithoutProof(\n        address _buyer,\n        uint120 _filledTokens,\n        uint120 _unusedUsdc,\n        uint120 _unusedUsdt,\n        uint120 _unusedDai,\n        uint120 _unusedEth\n    ) public {\n        if (msg.sender != admin) revert NoAccess();\n        if (!claimStatus) revert ClaimsNotOpen();\n\n        Receipt storage _receipt = receipt[_buyer];\n        if (_receipt.claimed) revert AlreadyClaimed();\n        _receipt.claimed = true;\n\n        if (_filledTokens > 0) token.transfer(_buyer, _filledTokens);\n        if (_unusedUsdc > 0) IERC20(usdc).transfer(_buyer, _unusedUsdc);\n        if (_unusedUsdt > 0) IERC20(usdt).transfer(_buyer, _unusedUsdt);\n        if (_unusedDai > 0) IERC20(dai).transfer(_buyer, _unusedDai);\n        if (_unusedEth > 0) payable(_buyer).transfer(_unusedEth);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                          WITHDRAW FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice Withdraw any amount(less than the balance) of an ERC20 token from this contract to a receiver\n    /// @dev can only be called by the owner\n    /// @param _token address of the ERC20 token to be withdrawn\n    /// @param _amount the amount of tokens to be withdrawn\n    function withdraw(address _token, uint120 _amount) external onlyOwner {\n        // check if the balance is more than the amount\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\n        if (uint256(_amount) > _balance) revert MoreThanBalance();\n\n        // transfer the `ERC20` token\n        IERC20(_token).transfer(treasury, _amount);\n    }\n\n    /// @notice withdraw any amount (less than the balance) of ETH from this contract to a receiver\n    /// @dev can only be called by the owner\n    /// @param _amount the amount of ETH to be withdrawn\n    function withdrawEth(uint120 _amount) external onlyOwner {\n        // check if the balance is more than the amount\n        uint256 _balance = address(this).balance;\n        if (uint256(_amount) > _balance) revert MoreThanBalance();\n\n        // transfer the eth\n        (bool success, ) = treasury.call{value : _amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    /// @notice get the latest price for eth from Chainlink's Aggregator PriceFeed\n    function _getLatestPrice() internal view returns (int256) {\n        (, int256 _price,,,) = priceFeed.latestRoundData();\n        return _price;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            FALLBACK\n    //////////////////////////////////////////////////////////////*/\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}