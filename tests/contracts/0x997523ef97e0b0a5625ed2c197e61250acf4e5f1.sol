{{
  "language": "Solidity",
  "sources": {
    "contracts/extra/ExtraRewardsMultiMerkle.sol": {
      "content": "//██████╗  █████╗ ██╗      █████╗ ██████╗ ██╗███╗   ██╗\n//██╔══██╗██╔══██╗██║     ██╔══██╗██╔══██╗██║████╗  ██║\n//██████╔╝███████║██║     ███████║██║  ██║██║██╔██╗ ██║\n//██╔═══╝ ██╔══██║██║     ██╔══██║██║  ██║██║██║╚██╗██║\n//██║     ██║  ██║███████╗██║  ██║██████╔╝██║██║ ╚████║\n//╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝╚═╝  ╚═══╝\n \n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../oz/interfaces/IERC20.sol\";\nimport \"../oz/libraries/SafeERC20.sol\";\nimport \"../oz/utils/MerkleProof.sol\";\nimport \"../utils/Owner.sol\";\nimport \"../oz/utils/ReentrancyGuard.sol\";\nimport \"../utils/Errors.sol\";\n\n/** @title Extra Rewards Multi Merkle  */\n/// @author Paladin\n/*\n    Contract holds ERC20 rewards\n    Handles multiple Roots & allows to freeze and update Roots\n*/\ncontract ExtraRewardsMultiMerkle is Owner, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n\n    // Storage\n\n    /** @notice Address allowed to freeze the Roots & update them */\n    address public rootManager;\n\n    /** @notice Merkle Root for each token */\n    mapping(address => bytes32) public merkleRoots;\n    /** @notice BitMap of claims for each token, updated with the nonce */\n    // token => nonce => claimedBitMap\n    // This is a packed array of booleans.\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256))) private claimedBitMap;\n    /** @notice Current update nonce for the token */\n    mapping(address => uint256) public nonce;\n    /** @notice Frozen token (to block claim before updating the Merkle Root) */\n    mapping(address => bool) public frozen;\n\n    //Struct ClaimParams\n    struct ClaimParams {\n        address token;\n        uint256 index;\n        uint256 amount;\n        bytes32[] merkleProof;\n    }\n\n    // Events\n\n    /** @notice Event emitted when an user Claims */\n    event Claimed(\n        address indexed rewardToken,\n        uint256 index,\n        address indexed account,\n        uint256 amount,\n        uint256 indexed nonce\n    );\n\n    /** @notice Event emitted when a Merkle Root is updated */\n    event UpdateRoot(\n        address indexed rewardToken,\n        bytes32 merkleRoot,\n        uint256 indexed nonce\n    );\n\n    /** @notice Event emitted when a token is frozen */\n    event FrozenRoot(\n        address indexed rewardToken,\n        uint256 indexed nonce\n    );\n\n    /** @notice Event emitted when the Root Manager is updated */\n    event UpdateRootManager(\n        address indexed oldManager,\n        address indexed newManager\n    );\n\n    // Modifier\n\n    modifier onlyAllowed(){\n        if(msg.sender != rootManager && msg.sender != owner()) revert Errors.CallerNotAllowed();\n        _;\n    }\n\n    constructor(address _rootManager) {\n        rootManager = _rootManager;\n    }\n\n\n    /**\n    * @notice Checks if the rewards were claimed for an index\n    * @dev Checks if the rewards were claimed for an index for the current update\n    * @param token addredd of the token to claim\n    * @param index Index of the claim\n    * @return bool : true if already claimed\n    */\n    function isClaimed(address token, uint256 index) public view returns (bool) {\n        uint256 claimedWordIndex = index >> 8;\n        uint256 claimedBitIndex = index & 0xff;\n        uint256 updateNonce = nonce[token];\n        uint256 claimedWord = claimedBitMap[token][updateNonce][claimedWordIndex];\n        uint256 mask = (1 << claimedBitIndex);\n        return claimedWord & mask != 0;\n    }\n\n    /**\n    * @dev Sets the rewards as claimed for the index on the given period\n    * @param token addredd of the token to claim\n    * @param index Index of the claim\n    */\n    function _setClaimed(address token, uint256 index) private {\n        uint256 claimedWordIndex = index >> 8;\n        uint256 claimedBitIndex = index & 0xff;\n        uint256 updateNonce = nonce[token];\n        claimedBitMap[token][updateNonce][claimedWordIndex] |= (1 << claimedBitIndex);\n    }\n\n    /**\n    * @notice Claims rewards for a given token for the user\n    * @dev Claims the reward for an user for the current update of the Merkle Root for the given token\n    * @param token Address of the token to claim\n    * @param index Index in the Merkle Tree\n    * @param account Address of the user claiming the rewards\n    * @param amount Amount of rewards to claim\n    * @param merkleProof Proof to claim the rewards\n    */\n    function claim(address token, uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) public nonReentrant {\n        if(account == address(0) || token == address(0)) revert Errors.ZeroAddress();\n        if(merkleRoots[token] == 0) revert Errors.MerkleRootNotUpdated();\n        if(frozen[token]) revert Errors.MerkleRootFrozen();\n        if(isClaimed(token, index)) revert Errors.AlreadyClaimed();\n\n        // Check that the given parameters match the given Proof\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n        if(!MerkleProof.verify(merkleProof, merkleRoots[token], node)) revert Errors.InvalidProof();\n\n        // Set the rewards as claimed for that period\n        // And transfer the rewards to the user\n        _setClaimed(token, index);\n        IERC20(token).safeTransfer(account, amount);\n\n        emit Claimed(token, index, account, amount, nonce[token]);\n    }\n\n    /**\n    * @notice Claims multiple rewards for a given list\n    * @dev Calls the claim() method for each entry in the claims array\n    * @param account Address of the user claiming the rewards\n    * @param claims List of ClaimParams struct data to claim\n    */\n    function multiClaim(address account, ClaimParams[] calldata claims) external {\n        if(account == address(0)) revert Errors.ZeroAddress();\n        uint256 length = claims.length;\n        \n        if(length == 0) revert Errors.EmptyParameters();\n\n        for(uint256 i; i < length;){\n            claim(claims[i].token, claims[i].index, account, claims[i].amount, claims[i].merkleProof);\n\n            unchecked{ ++i; }\n        }\n    }\n\n    /**\n    * @notice Freezes the given token\n    * @dev Freezes the given token, blocking claims for this token\n    * @param token Address of the token to freeze\n    */\n    function freezeRoot(address token) public onlyAllowed {\n        if(token == address(0)) revert Errors.ZeroAddress();\n        if(frozen[token]) revert Errors.AlreadyFrozen();\n\n        frozen[token] = true;\n\n        emit FrozenRoot(token, nonce[token]);\n    }\n\n    /**\n    * @notice Freezes a list of tokens\n    * @dev Calls the freezeRoot() method for each entry in the tokens array\n    * @param tokens List of tokens to freeze\n    */\n    function multiFreezeRoot(address[] calldata tokens) external onlyAllowed {\n        uint256 length = tokens.length;\n        \n        if(length == 0) revert Errors.EmptyArray();\n\n        for(uint256 i; i < length;){\n            freezeRoot(tokens[i]);\n\n            unchecked{ ++i; }\n        }\n    }\n\n    /**\n    * @notice Udpates the Merkle Root for a given token\n    * @dev Updates the Merkle Root for a frozen token\n    * @param token Address of the token\n    * @param root Merkle Root\n    */\n    function updateRoot(address token, bytes32 root) public onlyAllowed {\n        if(token == address(0)) revert Errors.ZeroAddress();\n        if(!frozen[token]) revert Errors.NotFrozen();\n        if(root == 0) revert Errors.EmptyMerkleRoot();\n\n        frozen[token] = false;\n\n        nonce[token] += 1;\n\n        merkleRoots[token] = root;\n\n        emit UpdateRoot(token, root, nonce[token]);\n    }\n\n    /**\n    * @notice Updates the Merkle Roots for a list of tokens\n    * @dev Calls the updateRoot() method for each entry in the tokens array\n    * @param tokens List of tokens to update\n    * @param roots Merkle Root for each given token\n    */\n    function multiUpdateRoot(address[] calldata tokens, bytes32[] calldata roots) external onlyAllowed {\n        uint256 length = tokens.length;\n        if(length == 0) revert Errors.EmptyArray();\n        if(length != roots.length) revert Errors.InequalArraySizes();\n        \n\n        for(uint256 i; i < length;){\n            updateRoot(tokens[i], roots[i]);\n\n            unchecked{ ++i; }\n        }\n    }\n\n    /**\n    * @notice Udpates the Root Manager\n    * @dev Udpates the Root Manager\n    * @param newManager Address of the new Root Manager\n    */\n    function updateRootManager(address newManager) external onlyOwner {\n        if(newManager == address(0)) revert Errors.ZeroAddress();\n\n        address oldManager = rootManager;\n        rootManager = newManager;\n\n        emit UpdateRootManager(oldManager, newManager);\n    }\n\n}"
    },
    "contracts/oz/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/oz/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/oz/utils/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}"
    },
    "contracts/utils/Owner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../oz/utils/Ownable.sol\";\n\n/** @title Extend OZ Ownable contract  */\n/// @author Paladin\n\ncontract Owner is Ownable {\n\n    address public pendingOwner;\n\n    event NewPendingOwner(address indexed previousPendingOwner, address indexed newPendingOwner);\n\n    error CannotBeOwner();\n    error CallerNotPendingOwner();\n    error ZeroAddress();\n\n    function transferOwnership(address newOwner) public override virtual onlyOwner {\n        if(newOwner == address(0)) revert ZeroAddress();\n        if(newOwner == owner()) revert CannotBeOwner();\n        address oldPendingOwner = pendingOwner;\n\n        pendingOwner = newOwner;\n\n        emit NewPendingOwner(oldPendingOwner, newOwner);\n    }\n\n    function acceptOwnership() public virtual {\n        if(msg.sender != pendingOwner) revert CallerNotPendingOwner();\n        address newOwner = pendingOwner;\n        _transferOwnership(pendingOwner);\n        pendingOwner = address(0);\n\n        emit NewPendingOwner(newOwner, address(0));\n    }\n\n}"
    },
    "contracts/oz/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}"
    },
    "contracts/utils/Errors.sol": {
      "content": "pragma solidity 0.8.10;\n//SPDX-License-Identifier: MIT\n\nlibrary Errors {\n\n    // Common Errors\n    error ZeroAddress();\n    error NullAmount();\n    error CallerNotAllowed();\n    error IncorrectRewardToken();\n    error SameAddress();\n    error InequalArraySizes();\n    error EmptyArray();\n    error EmptyParameters();\n    error AlreadyInitialized();\n    error InvalidParameter();\n    error CannotRecoverToken();\n    error ForbiddenCall();\n\n    error Killed();\n    error AlreadyKilled();\n    error NotKilled();\n    error KillDelayExpired();\n    error KillDelayNotExpired();\n\n\n    // Merkle Errors\n    error MerkleRootNotUpdated();\n    error AlreadyClaimed();\n    error InvalidProof();\n    error EmptyMerkleRoot();\n    error IncorrectRewardAmount();\n    error MerkleRootFrozen();\n    error NotFrozen();\n    error AlreadyFrozen();\n\n\n    // Quest Errors\n    error CallerNotQuestBoard();\n    error IncorrectQuestID();\n    error IncorrectPeriod();\n    error TokenNotWhitelisted();\n    error QuestAlreadyListed();\n    error QuestNotListed();\n    error PeriodAlreadyUpdated();\n    error PeriodNotClosed();\n    error PeriodStillActive();\n    error PeriodNotListed();\n    error EmptyQuest();\n    error EmptyPeriod();\n    error ExpiredQuest();\n\n    error NoDistributorSet();\n    error DisitributorFail();\n    error InvalidGauge();\n    error InvalidQuestID();\n    error InvalidPeriod();\n    error ObjectiveTooLow();\n    error RewardPerVoteTooLow();\n    error IncorrectDuration();\n    error IncorrectAddDuration();\n    error IncorrectTotalRewardAmount();\n    error IncorrectAddedRewardAmount();\n    error IncorrectFeeAmount();\n    error CalletNotQuestCreator();\n    error LowerRewardPerVote();\n    error LowerObjective();\n    error AlreadyBlacklisted();\n\n\n    //Math\n    error NumberExceed48Bits();\n\n}"
    },
    "contracts/oz/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/oz/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "contracts/oz/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}