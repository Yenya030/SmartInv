{{
  "language": "Solidity",
  "sources": {
    "contracts/SmashverseNFTByMetadrop.sol": {
      "content": "// SPDX-License-Identifier: BUSL 1.0\n// Metadrop Contracts (v1)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n// Use of ERC721M which contains staking, vesting, and gas improvements for batch minting:\nimport \"./ERC721M/ERC721M.sol\";\n// Layer Zero support for multi-chain freedom:\nimport \"./LayerZero/onft/IONFT721.sol\";\nimport \"./LayerZero/onft/ONFT721Core.sol\";\n// Operator Filter\nimport \"operator-filter-registry/src/DefaultOperatorFilterer.sol\";\n// Metadrop NFT interface\nimport \"./INFTByMetadrop.sol\";\n\ncontract SmashverseNFTByMetadrop is\n  INFTByMetadrop,\n  ONFT721Core,\n  ERC721M,\n  IONFT721,\n  DefaultOperatorFilterer,\n  VRFConsumerBaseV2\n{\n  using Strings for uint256;\n\n  // Base chain for this collection (used with layer zero):\n  uint256 immutable baseChain;\n  address public immutable primarySaleContract;\n\n  // Which metadata source are we using:\n  bool public useArweave = true;\n  // Are we pre-reveal:\n  bool public preReveal = true;\n  // Is metadata locked?:\n  bool public metadataLocked = false;\n  // Use the EPS composition service?\n  bool public useEPS_CT = true;\n  // Minting complete confirmation\n  bool public mintingComplete;\n\n  // Max duration for staking\n  uint256 public maxStakingDurationInDays;\n\n  uint256 public recordedRandomWord;\n  uint256 public vrfStartPosition;\n\n  address public baseContract;\n  string public preRevealURI;\n  string public arweaveURI;\n  string public ipfsURI;\n\n  /**\n   * @dev Chainlink config.\n   */\n  // Mainnet: 0x271682DEB8C4E0901D1a1550aD2e64D568E69909\n  // Goerli: 0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D\n  VRFCoordinatorV2Interface vrfCoordinator;\n  uint64 vrfSubscriptionId;\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\n  // Mainnet 200 gwei: 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef\n  // Goerli 150 gwei 0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15\n  bytes32 vrfKeyHash;\n  uint32 vrfCallbackGasLimit = 150000;\n  uint16 vrfRequestConfirmations = 3;\n  uint32 vrfNumWords = 1;\n\n  bytes32 public positionProof;\n\n  // Track tokens off-chain\n  mapping(uint256 => address) public offChainOwner;\n\n  error IncorrectConfirmationValue();\n  error VRFAlreadySet();\n  error PositionProofAlreadySet();\n\n  event RandomNumberReceived(uint256 indexed requestId, uint256 randomNumber);\n  event VRFPositionSet(uint256 VRFPosition);\n\n  constructor(\n    address primarySaleContract_,\n    uint256 supply_,\n    uint256 baseChain_,\n    address epsDelegateRegister_,\n    address epsComposeThis_,\n    address vrfCoordinator_,\n    bytes32 vrfKeyHash_,\n    uint64 vrfSubscriptionId_,\n    address royaltyReceipientAddress_,\n    uint96 royaltyPercentageBasisPoints_\n  )\n    ERC721M(\n      \"Smashverse\",\n      \"SMASH\",\n      supply_,\n      epsDelegateRegister_,\n      epsComposeThis_\n    )\n    ONFT721Core(_getLzEndPoint())\n    VRFConsumerBaseV2(vrfCoordinator_)\n  {\n    primarySaleContract = primarySaleContract_;\n    baseChain = baseChain_;\n    vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator_);\n    vrfKeyHash = vrfKeyHash_;\n    setVRFSubscriptionId(vrfSubscriptionId_);\n    setDefaultRoyalty(royaltyReceipientAddress_, royaltyPercentageBasisPoints_);\n  }\n\n  // =======================================\n  // OPERATOR FILTER REGISTER\n  // =======================================\n\n  function setApprovalForAll(address operator, bool approved)\n    public\n    override(ERC721M, IERC721)\n    onlyAllowedOperatorApproval(operator)\n  {\n    super.setApprovalForAll(operator, approved);\n  }\n\n  function approve(address operator, uint256 tokenId)\n    public\n    override(ERC721M, IERC721)\n    onlyAllowedOperatorApproval(operator)\n  {\n    super.approve(operator, tokenId);\n  }\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override(ERC721M, IERC721) onlyAllowedOperator(from) {\n    super.transferFrom(from, to, tokenId);\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override(ERC721M, IERC721) onlyAllowedOperator(from) {\n    super.safeTransferFrom(from, to, tokenId);\n  }\n\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public override(ERC721M, IERC721) onlyAllowedOperator(from) {\n    super.safeTransferFrom(from, to, tokenId, data);\n  }\n\n  /**\n   * @dev Burns `tokenId`. See {ERC721-_burn}.\n   *\n   * Requirements:\n   *\n   * - The caller must own `tokenId` or be an approved operator.\n   */\n  function burn(uint256 tokenId) public virtual {\n    //solhint-disable-next-line max-line-length\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not owner or approved\");\n    _burn(tokenId);\n  }\n\n  // =======================================\n  // MINTING\n  // =======================================\n\n  /**\n   *\n   *\n   * @dev mint: mint items\n   *\n   *\n   */\n  function mint(\n    uint256 quantityToMint_,\n    address to_,\n    uint256 vestingInDays_\n  ) external {\n    if (mintingComplete) {\n      revert MintingIsClosedForever();\n    }\n\n    if (msg.sender != primarySaleContract) revert InvalidAddress();\n\n    if (block.chainid != baseChain) {\n      revert baseChainOnly();\n    }\n\n    _mintSequential(to_, quantityToMint_, vestingInDays_);\n  }\n\n  // =======================================\n  // VRF\n  // =======================================\n\n  /**\n   *\n   *\n   * @dev getStartPosition\n   *\n   *\n   */\n  function getStartPosition() external onlyOwner returns (uint256) {\n    if (recordedRandomWord != 0) {\n      revert VRFAlreadySet();\n    }\n    return\n      vrfCoordinator.requestRandomWords(\n        vrfKeyHash,\n        vrfSubscriptionId,\n        vrfRequestConfirmations,\n        vrfCallbackGasLimit,\n        vrfNumWords\n      );\n  }\n\n  /**\n   *\n   *\n   * @dev fulfillRandomWords: Callback from the chainlinkv2 oracle with randomness.\n   *\n   *\n   */\n  function fulfillRandomWords(uint256 requestId_, uint256[] memory randomWords_)\n    internal\n    override\n  {\n    recordedRandomWord = randomWords_[0];\n    vrfStartPosition = (randomWords_[0] % maxSupply) + 1;\n    emit RandomNumberReceived(requestId_, randomWords_[0]);\n    emit VRFPositionSet(vrfStartPosition);\n  }\n\n  // =======================================\n  // ADMINISTRATION\n  // =======================================\n  /**\n   *\n   *\n   * @dev setDefaultRoyalty: Set the royalty percentage claimed\n   * by the project owner for the collection.\n   *\n   * Note - we have specifically NOT implemented the ability to have different\n   * royalties on a token by token basis. This reduces the complexity of processing on\n   * multi-buys, and also avoids challenges to decentralisation (e.g. the project targetting\n   * one users tokens with larger royalties)\n   *\n   *\n   */\n  function setDefaultRoyalty(address recipient, uint96 fraction)\n    public\n    onlyOwner\n  {\n    _setDefaultRoyalty(recipient, fraction);\n  }\n\n  /**\n   *\n   *\n   * @dev deleteDefaultRoyalty: Delete the royalty percentage claimed\n   * by the project owner for the collection.\n   *\n   *\n   */\n  function deleteDefaultRoyalty() public onlyOwner {\n    _deleteDefaultRoyalty();\n  }\n\n  /**\n   *\n   *\n   * @dev lockURIs: lock the URI data for this contract\n   *\n   *\n   */\n  function lockURIs() external onlyOwner {\n    metadataLocked = true;\n  }\n\n  /**\n   *\n   *\n   * @dev setURIs: Set the URI data for this contract\n   *\n   *\n   */\n  function setURIs(\n    string memory preRevealURI_,\n    string memory arweaveURI_,\n    string memory ipfsURI_\n  ) external onlyOwner {\n    if (metadataLocked) {\n      revert MetadataIsLocked();\n    }\n\n    preRevealURI = preRevealURI_;\n    arweaveURI = arweaveURI_;\n    ipfsURI = ipfsURI_;\n  }\n\n  /**\n   *\n   *\n   * @dev switchImageSource (guards against either arweave or IPFS being no more)\n   *\n   *\n   */\n  function switchImageSource(bool useArweave_) external onlyOwner {\n    useArweave = useArweave_;\n  }\n\n  /**\n   *\n   *\n   * @dev setMaxStakingPeriod\n   *\n   *\n   */\n  function setMaxStakingPeriod(uint16 maxStakingDurationInDays_)\n    external\n    onlyOwner\n  {\n    maxStakingDurationInDays = maxStakingDurationInDays_;\n    emit MaxStakingDurationSet(maxStakingDurationInDays_);\n  }\n\n  /**\n   *\n   *\n   * @dev setEPSComposeThisAddress. Owner can update the EPS ComposeThis address\n   *\n   *\n   */\n  function setEPSComposeThisAddress(address epsComposeThis_)\n    external\n    onlyOwner\n  {\n    epsComposeThis = IEPS_CT(epsComposeThis_);\n    emit EPSComposeThisUpdated(epsComposeThis_);\n  }\n\n  /**\n   *\n   *\n   * @dev setEPSDelegateRegisterAddress. Owner can update the EPS DelegateRegister address\n   *\n   *\n   */\n  function setEPSDelegateRegisterAddress(address epsDelegateRegister_)\n    external\n    onlyOwner\n  {\n    epsDeligateRegister = IEPS_DR(epsDelegateRegister_);\n    emit EPSDelegateRegisterUpdated(epsDelegateRegister_);\n  }\n\n  /**\n   *\n   *\n   * @dev reveal. Owner can reveal\n   *\n   *\n   */\n  function reveal() external onlyOwner {\n    preReveal = false;\n    emit Revealed();\n  }\n\n  /**\n   *\n   *\n   * @dev setMintingCompleteForeverCannotBeUndone: Allow owner to set minting complete\n   * Enter confirmation value of \"SmashverseMintingComplete\" to confirm that you are closing\n   * this mint forever.\n   *\n   *\n   */\n  function setMintingCompleteForeverCannotBeUndone(string memory confirmation_)\n    external\n    onlyOwner\n  {\n    string memory expectedValue = \"SmashverseMintingComplete\";\n    if (\n      keccak256(abi.encodePacked(confirmation_)) ==\n      keccak256(abi.encodePacked(expectedValue))\n    ) {\n      mintingComplete = true;\n    } else {\n      revert IncorrectConfirmationValue();\n    }\n  }\n\n  /**\n   *\n   *\n   * @dev setBaseContract. Owner can set base contract\n   *\n   *\n   */\n  function setBaseContract(address baseContract_) external onlyOwner {\n    if (block.chainid == baseChain) {\n      revert ThisIsTheBaseContract();\n    }\n\n    baseContract = baseContract_;\n\n    emit BaseContractSet(baseContract_);\n  }\n\n  /**\n   *\n   *\n   * @dev setEPS_CTOn. Owner can turn EPS CT on\n   *\n   *\n   */\n  function setEPS_CTOn() external onlyOwner {\n    useEPS_CT = true;\n    emit EPS_CTTurnedOn();\n  }\n\n  /**\n   *\n   *\n   * @dev setEPS_CTOff. Owner can turn EPS CT off\n   *\n   *\n   */\n  function setEPS_CTOff() external onlyOwner {\n    useEPS_CT = false;\n    emit EPS_CTTurnedOff();\n  }\n\n  /**\n   *\n   * @dev setPositionProof\n   *\n   */\n  function setPositionProof(bytes32 positionProof_) external onlyOwner {\n    if (positionProof != \"\") {\n      revert PositionProofAlreadySet();\n    }\n    positionProof = positionProof_;\n\n    emit MerkleRootSet(positionProof_);\n  }\n\n  /**\n   *\n   * @dev chainlink configuration setters:\n   *\n   */\n\n  /**\n   *\n   * @dev setVRFSubscriptionId: Set the chainlink subscription id.\n   *\n   */\n  function setVRFSubscriptionId(uint64 vrfSubscriptionId_) public onlyOwner {\n    vrfSubscriptionId = vrfSubscriptionId_;\n  }\n\n  /**\n   *\n   * @dev setVRFKeyHash: Set the chainlink keyhash (gas lane).\n   *\n   */\n  function setVRFKeyHash(bytes32 vrfKeyHash_) external onlyOwner {\n    vrfKeyHash = vrfKeyHash_;\n  }\n\n  /**\n   *\n   * @dev setVRFCallbackGasLimit: Set the chainlink callback gas limit.\n   *\n   */\n  function setVRFCallbackGasLimit(uint32 vrfCallbackGasLimit_)\n    external\n    onlyOwner\n  {\n    vrfCallbackGasLimit = vrfCallbackGasLimit_;\n  }\n\n  /**\n   *\n   * @dev set: Set the chainlink number of confirmations.\n   *\n   */\n  function setVRFRequestConfirmations(uint16 vrfRequestConfirmations_)\n    external\n    onlyOwner\n  {\n    vrfRequestConfirmations = vrfRequestConfirmations_;\n  }\n\n  // =======================================\n  // STAKING AND VESTING\n  // =======================================\n\n  /**\n   *\n   *\n   * @dev beneficiaryOf\n   *\n   *\n   */\n  function beneficiaryOf(uint256 tokenId_)\n    external\n    view\n    returns (address beneficiary_, BeneficiaryType beneficiaryType_)\n  {\n    beneficiary_ = epsDeligateRegister.beneficiaryOf(\n      address(this),\n      tokenId_,\n      1\n    );\n\n    if (beneficiary_ == address(this)) {\n      // If this token is owned by this contract we need to determine if it is vested,\n      // staked, or currently off-chain\n      address stakedOwner = stakedOwnerOf(tokenId_);\n      if (stakedOwner != address(0)) {\n        beneficiary_ = stakedOwner;\n        beneficiaryType_ = BeneficiaryType.stakedOwner;\n      } else {\n        address vestedOwner = vestedOwnerOf(tokenId_);\n        if (vestedOwner != address(0)) {\n          beneficiary_ = vestedOwner;\n          beneficiaryType_ = BeneficiaryType.vestedOwner;\n        } else {\n          // Not vested or staked, must be off-chain:\n          address otherChainOwner = offChainOwner[tokenId_];\n          if (otherChainOwner != address(0)) {\n            beneficiary_ = otherChainOwner;\n            beneficiaryType_ = BeneficiaryType.offChainOwner;\n          }\n        }\n      }\n    } else {\n      if (beneficiary_ != ownerOf(tokenId_)) {\n        beneficiaryType_ = BeneficiaryType.epsDelegate;\n      }\n    }\n\n    if (beneficiary_ == address(0)) {\n      revert InvalidToken();\n    }\n\n    return (beneficiary_, beneficiaryType_);\n  }\n\n  /**\n   *\n   *\n   * @dev inVestingPeriod: return if the token is in a vesting period\n   *\n   *\n   */\n  function inVestingPeriod(uint256 tokenId) external view returns (bool) {\n    return (vestingEndDateForToken[tokenId] >= block.timestamp);\n  }\n\n  /**\n   *\n   *\n   * @dev inStakedPeriod: return if the token is staked\n   *\n   *\n   */\n  function inStakedPeriod(uint256 tokenId) external view returns (bool) {\n    return (stakingEndDateForToken[tokenId] >= block.timestamp);\n  }\n\n  /**\n   *\n   *\n   * @dev stake: stake items\n   *\n   *\n   */\n  function stake(uint256[] memory tokenIds_, uint256 stakingInDays_) external {\n    if (stakingInDays_ > maxStakingDurationInDays) {\n      revert StakingDurationExceedsMaximum(\n        stakingInDays_,\n        maxStakingDurationInDays\n      );\n    }\n\n    for (uint256 i = 0; i < tokenIds_.length; ) {\n      _setTokenStakingDate(tokenIds_[i], stakingInDays_);\n      unchecked {\n        i++;\n      }\n    }\n  }\n\n  /**\n   *\n   *\n   * @dev tokenURI. Includes layer zero satellite chain support\n   * and staking / vesting display using EPS_CT\n   *\n   *\n   */\n  function tokenURI(uint256 tokenId_)\n    public\n    view\n    override\n    returns (string memory)\n  {\n    _requireMinted(tokenId_);\n\n    // If we are using the EPS_CT service we can apply additional\n    // details to metadata:\n\n    if (useEPS_CT && address(epsComposeThis) != address(0)) {\n      // Check for staking:\n      if (stakingEndDateForToken[tokenId_] > block.timestamp) {\n        AddedTrait[] memory addedTraits = new AddedTrait[](2);\n\n        addedTraits[0] = AddedTrait(\n          \"Staked Until\",\n          ValueType.date,\n          stakingEndDateForToken[tokenId_],\n          \"\",\n          address(0)\n        );\n\n        addedTraits[1] = AddedTrait(\n          \"Staked\",\n          ValueType.characterString,\n          0,\n          \"true\",\n          address(0)\n        );\n\n        string[] memory addedImages = new string[](1);\n\n        addedImages[0] = \"staked\";\n\n        return\n          epsComposeThis.composeURIFromBaseURI(\n            _baseTokenURI(tokenId_),\n            addedTraits,\n            1,\n            addedImages\n          );\n      }\n\n      // Check for vesting:\n      if (vestingEndDateForToken[tokenId_] > block.timestamp) {\n        AddedTrait[] memory addedTraits = new AddedTrait[](2);\n\n        addedTraits[0] = AddedTrait(\n          \"Vested Until\",\n          ValueType.date,\n          vestingEndDateForToken[tokenId_],\n          \"\",\n          address(0)\n        );\n\n        addedTraits[1] = AddedTrait(\n          \"Vested\",\n          ValueType.characterString,\n          0,\n          \"true\",\n          address(0)\n        );\n\n        string[] memory addedImages = new string[](1);\n\n        addedImages[0] = \"vested\";\n\n        return\n          epsComposeThis.composeURIFromBaseURI(\n            _baseTokenURI(tokenId_),\n            addedTraits,\n            1,\n            addedImages\n          );\n      }\n\n      // If on a satellite chain get the URI from the base chain:\n      if (block.chainid != baseChain) {\n        return\n          epsComposeThis.composeURIFromLookup(\n            baseChain,\n            _baseContract(),\n            tokenId_,\n            new AddedTrait[](0),\n            0,\n            new string[](0)\n          );\n      }\n\n      // Finally, if on the base chain, owned by the token contract and NOT staked\n      // or vested we must be off-chain through LayerZero:\n      if (ownerOf(tokenId_) == address(this)) {\n        AddedTrait[] memory addedTraits = new AddedTrait[](1);\n\n        addedTraits[0] = AddedTrait(\n          \"Off-chain\",\n          ValueType.characterString,\n          0,\n          \"true\",\n          address(0)\n        );\n\n        string[] memory addedImages = new string[](1);\n\n        addedImages[0] = \"off-chain\";\n\n        return\n          epsComposeThis.composeURIFromBaseURI(\n            _baseTokenURI(tokenId_),\n            addedTraits,\n            1,\n            addedImages\n          );\n      }\n\n      return (_baseTokenURI(tokenId_));\n    } else {\n      return (_baseTokenURI(tokenId_));\n    }\n  }\n\n  /**\n   *\n   *\n   * @dev _baseTokenURI.\n   *\n   *\n   */\n  function _baseTokenURI(uint256 tokenId_)\n    internal\n    view\n    returns (string memory)\n  {\n    if (preReveal) {\n      return\n        bytes(preRevealURI).length > 0\n          ? string(abi.encodePacked(preRevealURI, tokenId_.toString(), \".json\"))\n          : \"\";\n    } else {\n      if (useArweave) {\n        return\n          bytes(arweaveURI).length > 0\n            ? string(abi.encodePacked(arweaveURI, tokenId_.toString(), \".json\"))\n            : \"\";\n      } else {\n        return\n          bytes(ipfsURI).length > 0\n            ? string(abi.encodePacked(ipfsURI, tokenId_.toString(), \".json\"))\n            : \"\";\n      }\n    }\n  }\n\n  // =======================================\n  // LAYER ZERO\n  // =======================================\n\n  /**\n   *\n   *\n   * @dev supportsInterface. Include Layer Zero support.\n   *\n   *\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ONFT721Core, ERC721M, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IONFT721).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   *\n   *\n   * @dev _baseContract. Return the base contract address\n   *\n   *\n   */\n  function _baseContract() internal view returns (address) {\n    if (block.chainid == baseChain) {\n      return (address(this));\n    }\n\n    if (baseContract == address(0)) {\n      return (address(this));\n    } else {\n      return baseContract;\n    }\n  }\n\n  /**\n   *\n   *\n   * @dev _isBaseChain. Return if this is the base chain\n   *\n   *\n   */\n  function _isBaseChain() internal view returns (bool) {\n    return (block.chainid == baseChain);\n  }\n\n  /**\n   *\n   *\n   * @dev _getLzEndPoint. Internal function to get the LZ endpoint\n   * for this chain. This means we don't need to pass this in, allowing\n   * for identical bytecode between chains, which enables the creation\n   * of identical contract addresses using CREATE2\n   *\n   * Need a chain not listed? No problem, but you will need to alter the contract\n   * to receive the LZ endpoint prior to deploy (this will change the bytecode\n   * and mean you won't be able to deploy using the same contract ID without\n   * using a create3 factory, and we haven't finished building that yet).\n   *\n   *\n   */\n  function _getLzEndPoint() internal view returns (address) {\n    uint256 chainId = block.chainid;\n\n    if (chainId == 1) return 0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675; // Ethereum mainnet\n    if (chainId == 5) return 0xbfD2135BFfbb0B5378b56643c2Df8a87552Bfa23; // Goerli testnet\n    if (chainId == 80001) return 0xf69186dfBa60DdB133E91E9A4B5673624293d8F8; // Mumbai (polygon testnet)\n    if (chainId == 137) return 0x3c2269811836af69497E5F486A85D7316753cf62; // Polygon mainnet\n    if (chainId == 56) return 0x3c2269811836af69497E5F486A85D7316753cf62; // BSC mainnet\n    if (chainId == 43114) return 0x3c2269811836af69497E5F486A85D7316753cf62; // Avalanche mainnet\n    if (chainId == 42161) return 0x3c2269811836af69497E5F486A85D7316753cf62; // Arbitrum\n    if (chainId == 10) return 0x3c2269811836af69497E5F486A85D7316753cf62; // Optimism\n    if (chainId == 250) return 0xb6319cC6c8c27A8F5dAF0dD3DF91EA35C4720dd7; // Fantom\n    if (chainId == 73772) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Swimmer\n    if (chainId == 53935) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // DFK\n    if (chainId == 1666600000)\n      return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Harmony\n    if (chainId == 1284) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Moonbeam\n    if (chainId == 42220) return 0x3A73033C0b1407574C76BdBAc67f126f6b4a9AA9; // Celo\n    if (chainId == 432204) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Dexalot\n    if (chainId == 122) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Fuse\n    if (chainId == 100) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Gnosis\n    if (chainId == 8217) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Kaytn\n    if (chainId == 1088) return 0x9740FF91F1985D8d2B71494aE1A2f723bb3Ed9E4; // Metis\n\n    return (address(0));\n  }\n\n  /**\n   *\n   *\n   * @dev _debitFrom. Internal function called on a layer zero\n   * transfer FROM this chain.\n   *\n   *\n   */\n  function _debitFrom(\n    address _from,\n    uint16,\n    bytes memory,\n    uint256 _tokenId\n  ) internal virtual override {\n    require(\n      _isApprovedOrOwner(_msgSender(), _tokenId),\n      \"Not owner nor approved\"\n    );\n    require(ERC721M.ownerOf(_tokenId) == _from, \"Not owner\");\n    offChainOwner[_tokenId] = _from;\n    _transfer(_from, address(this), _tokenId);\n  }\n\n  /**\n   *\n   *\n   * @dev _creditTo. Internal function called on a layer zero\n   * transfer TO this chain.\n   *\n   *\n   */\n  function _creditTo(\n    uint16,\n    address _toAddress,\n    uint256 _tokenId\n  ) internal virtual override {\n    // Different behaviour depending on whether this has been deployed on\n    // the base chain or a satellite chain:\n    if (block.chainid == baseChain) {\n      // Base chain. For us to be crediting the owner this token MUST be\n      // owned by the contract, as they can only be minted on the base chain\n      require(\n        (_exists(_tokenId) && ERC721M.ownerOf(_tokenId) == address(this))\n      );\n\n      _transfer(address(this), _toAddress, _tokenId);\n    } else {\n      // Satellite chain. We can be crediting the user as a result of this reaching\n      // this chain for the first time (mint) OR from a token that has been minted\n      // here previously and is currently custodied by the contract.\n      require(\n        !_exists(_tokenId) ||\n          (_exists(_tokenId) && ERC721M.ownerOf(_tokenId) == address(this))\n      );\n      if (!_exists(_tokenId)) {\n        _safeMint(_toAddress, _tokenId);\n      } else {\n        _transfer(address(this), _toAddress, _tokenId);\n      }\n    }\n\n    delete offChainOwner[_tokenId];\n  }\n}\n"
    },
    "contracts/INFTByMetadrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Metadrop Contracts (v0.0.1)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface INFTByMetadrop {\n  // The current status of the mint:\n  //   - notEnabled: This type of mint is not part of this drop\n  //   - notYetOpen: This type of mint is part of the drop, but it hasn't started yet\n  //   - open: it's ready for ya, get in there.\n  //   - finished: been and gone.\n  //   - unknown: theoretically impossible.\n  enum MintStatus {\n    notEnabled,\n    notYetOpen,\n    open,\n    finished,\n    unknown\n  }\n\n  enum AllocationCheck {\n    invalidListType,\n    hasAllocation,\n    invalidProof,\n    allocationExhausted\n  }\n\n  enum BeneficiaryType {\n    owner,\n    epsDelegate,\n    stakedOwner,\n    vestedOwner,\n    offChainOwner\n  }\n\n  // ============================\n  // EVENTS\n  // ============================\n  event EPSComposeThisUpdated(address epsComposeThisAddress);\n  event EPSDelegateRegisterUpdated(address epsDelegateRegisterAddress);\n  event EPS_CTTurnedOn();\n  event EPS_CTTurnedOff();\n  event Revealed();\n  event BaseContractSet(address baseContract);\n  event VestingAddressSet(address vestingAddress);\n  event MaxStakingDurationSet(uint16 maxStakingDurationInDays);\n  event MerkleRootSet(bytes32 merkleRoot);\n\n  // ============================\n  // ERRORS\n  // ============================\n  error ThisIsTheBaseContract();\n  error MintingIsClosedForever();\n  error ThisMintIsClosed();\n  error IncorrectETHPayment();\n  error TransferFailed();\n  error VestingAddressIsLocked();\n  error MetadataIsLocked();\n  error StakingDurationExceedsMaximum(\n    uint256 requestedStakingDuration,\n    uint256 maxStakingDuration\n  );\n  error MaxPublicMintAllowanceExceeded(\n    uint256 requested,\n    uint256 alreadyMinted,\n    uint256 maxAllowance\n  );\n  error ProofInvalid();\n  error RequestingMoreThanRemainingAllocation(\n    uint256 requested,\n    uint256 remainingAllocation\n  );\n  error baseChainOnly();\n  error InvalidAddress();\n\n  // ============================\n  // FUNCTIONS\n  // ============================\n\n  function setURIs(\n    string memory placeholderURI_,\n    string memory arweaveURI_,\n    string memory ipfsURI_\n  ) external;\n\n  function lockURIs() external;\n\n  function switchImageSource(bool useArweave_) external;\n\n  function setDefaultRoyalty(address recipient, uint96 fraction) external;\n\n  function deleteDefaultRoyalty() external;\n\n  function mint(\n    uint256 quantityToMint_,\n    address to_,\n    uint256 vestingInDays_\n  ) external;\n}\n"
    },
    "contracts/ERC721M/ERC721M.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/common/ERC2981.sol\";\n// EPS implementation\nimport \"../EPS/IEPS_DR.sol\";\nimport \"../EPS/IEPS_CT.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721M is Context, ERC165, IERC721, IERC721Metadata, ERC2981 {\n  using Address for address;\n  using Strings for uint256;\n\n  // EPS Compose This\n  IEPS_CT public epsComposeThis;\n  // EPS Delegation Register\n  IEPS_DR public epsDeligateRegister;\n\n  // Use of a burn address other than address(0) to allow easy enumeration\n  // of burned tokens\n  address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\n\n  uint256 public immutable maxSupply;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to owner address\n  mapping(uint256 => address) private _owners;\n\n  // Mapping owner address to token count\n  mapping(address => uint256) private _balances;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  // Vesting mapping\n  mapping(uint256 => uint256) public vestingEndDateForToken;\n\n  // Staking mapping\n  mapping(uint256 => uint256) public stakingEndDateForToken;\n\n  uint256 public remainingSupply;\n\n  error CallerNotTokenOwnerOrApproved();\n  error CannotStakeForZeroDays();\n  error InvalidToken();\n  error QuantityExceedsRemainingSupply();\n\n  /**\n   * @dev Emitted when `owner` stakes a token\n   */\n  event TokenStaked(\n    address indexed staker,\n    uint256 indexed tokenId,\n    uint256 indexed stakingEndDate\n  );\n\n  /**\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 maxSupply_,\n    address epsDeligateRegister_,\n    address epsComposeThis_\n  ) {\n    _name = name_;\n    _symbol = symbol_;\n    maxSupply = maxSupply_;\n    remainingSupply = maxSupply_;\n    epsDeligateRegister = IEPS_DR(epsDeligateRegister_);\n    epsComposeThis = IEPS_CT(epsComposeThis_);\n  }\n\n  /**\n   * ================================\n   * @dev ERC721M new functions begins\n   * ================================\n   */\n\n  /**\n   *\n   *\n   * @dev Returns total supply (minted - burned)\n   *\n   *\n   */\n  function totalSupply() external view returns (uint256) {\n    return totalMinted() - totalBurned();\n  }\n\n  /**\n   * @dev Returns the remaining supply\n   */\n  function totalUnminted() public view returns (uint256) {\n    return remainingSupply;\n  }\n\n  /**\n   * @dev Returns the total number of tokens ever minted\n   */\n  function totalMinted() public view returns (uint256) {\n    return (maxSupply - remainingSupply);\n  }\n\n  /**\n   * @dev Returns the count of tokens sent to the burn address\n   */\n  function totalBurned() public view returns (uint256) {\n    return ERC721M.balanceOf(BURN_ADDRESS);\n  }\n\n  /**\n   * @dev _setTokenVestingDate\n   */\n  function _setTokenVestingDate(uint256 tokenId_, uint256 vestingDuration_)\n    internal\n    virtual\n  {\n    if (vestingDuration_ != 0) {\n      uint256 vestingEndDate = block.timestamp + (vestingDuration_ * 1 days);\n      vestingEndDateForToken[tokenId_] = vestingEndDate;\n      epsComposeThis.triggerMetadataUpdate(\n        block.chainid,\n        address(this),\n        tokenId_,\n        vestingEndDate\n      );\n    }\n  }\n\n  /**\n   * @dev _setTokenStakingDate\n   */\n  function _setTokenStakingDate(uint256 tokenId_, uint256 stakingDuration_)\n    internal\n    virtual\n  {\n    if (!(_isApprovedOrOwner(_msgSender(), tokenId_))) {\n      revert CallerNotTokenOwnerOrApproved();\n    }\n\n    // Clear token level approval if it exists. ApprovalForAll will not be\n    // valid while staked as this contract will be the owner, but token level\n    // approvals would persist, so must be removed\n    if (_tokenApprovals[tokenId_] != address(0)) {\n      _approve(address(0), tokenId_);\n    }\n\n    if (stakingDuration_ == 0) {\n      revert CannotStakeForZeroDays();\n    }\n\n    uint256 stakingEndDate = block.timestamp + (stakingDuration_ * 1 days);\n    stakingEndDateForToken[tokenId_] = stakingEndDate;\n    epsComposeThis.triggerMetadataUpdate(\n      block.chainid,\n      address(this),\n      tokenId_,\n      stakingEndDate\n    );\n    emit TokenStaked(_msgSender(), tokenId_, stakingEndDate);\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function stakedOwnerOf(uint256 tokenId)\n    public\n    view\n    virtual\n    returns (address)\n  {\n    if (stakingEndDateForToken[tokenId] > block.timestamp) {\n      address tokenOwner = _owners[tokenId];\n      if (tokenOwner == address(0)) {\n        revert InvalidToken();\n      }\n      return tokenOwner;\n    } else {\n      return address(0);\n    }\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function vestedOwnerOf(uint256 tokenId)\n    public\n    view\n    virtual\n    returns (address)\n  {\n    if (vestingEndDateForToken[tokenId] > block.timestamp) {\n      address tokenOwner = _owners[tokenId];\n      if (tokenOwner == address(0)) {\n        revert InvalidToken();\n      }\n      return tokenOwner;\n    } else {\n      return address(0);\n    }\n  }\n\n  /**\n   * @dev _mintIdWithoutBalanceUpdate\n   */\n  function _mintIdWithoutBalanceUpdate(address to, uint256 tokenId) private {\n    _beforeTokenTransfer(address(0), to, tokenId);\n\n    _owners[tokenId] = to;\n\n    emit Transfer(address(0), to, tokenId);\n\n    _afterTokenTransfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev _mintSequential\n   */\n  function _mintSequential(\n    address to_,\n    uint256 quantity_,\n    uint256 vestingDuration_\n  ) internal virtual {\n    if (quantity_ > remainingSupply) {\n      revert QuantityExceedsRemainingSupply();\n    }\n\n    require(_checkOnERC721Received(address(0), to_, 1, \"\"), \"Not receiver\");\n\n    uint256 tokenId = maxSupply - remainingSupply;\n\n    for (uint256 i = 0; i < quantity_; ) {\n      _mintIdWithoutBalanceUpdate(to_, tokenId + i);\n\n      _setTokenVestingDate(tokenId + i, vestingDuration_);\n\n      unchecked {\n        i++;\n      }\n    }\n\n    remainingSupply = remainingSupply - quantity_;\n    _balances[to_] += quantity_;\n  }\n\n  /**\n   * ================================\n   * @dev ERC721M new functions end\n   * ================================\n   */\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165, ERC2981)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    require(owner != address(0), \"Address 0\");\n    return _balances[owner];\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (address)\n  {\n    // Check for staking or vesting:\n    if (\n      stakingEndDateForToken[tokenId] > block.timestamp ||\n      vestingEndDateForToken[tokenId] > block.timestamp\n    ) {\n      return (address(this));\n    } else {\n      address tokenOwner = _owners[tokenId];\n      if (tokenOwner == address(0)) {\n        revert InvalidToken();\n      }\n      return tokenOwner;\n    }\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    _requireMinted(tokenId);\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overridden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    address owner = ERC721M.ownerOf(tokenId);\n    require(to != owner, \"Approval to owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"Not owner or approved\"\n    );\n\n    _approve(to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (address)\n  {\n    _requireMinted(tokenId);\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved)\n    public\n    virtual\n    override\n  {\n    _setApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    //solhint-disable-next-line max-line-length\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not owner or approved\");\n\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) public virtual override {\n    require(_isApprovedOrOwner(_msgSender(), tokenId), \"Not owner or approved\");\n    _safeTransfer(from, to, tokenId, data);\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * `data` is additional data, it has no specified format and it is sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _transfer(from, to, tokenId);\n    require(_checkOnERC721Received(from, to, tokenId, data), \"Not receiver\");\n  }\n\n  /**\n   * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n   */\n  function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n    return _owners[tokenId];\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   * and stop existing when they are burned (`_burn`).\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    return _ownerOf(tokenId) != address(0);\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\n    internal\n    view\n    virtual\n    returns (bool)\n  {\n    address owner = ERC721M.ownerOf(tokenId);\n    return (spender == owner ||\n      isApprovedForAll(owner, spender) ||\n      getApproved(tokenId) == spender);\n  }\n\n  /**\n   * @dev Safely mints `tokenId` and transfers it to `to`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(address to, uint256 tokenId) internal virtual {\n    _safeMint(to, tokenId, \"\");\n  }\n\n  /**\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n   */\n  function _safeMint(\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) internal virtual {\n    _mint(to, tokenId);\n    require(\n      _checkOnERC721Received(address(0), to, tokenId, data),\n      \"Not receiver\"\n    );\n  }\n\n  /**\n   * @dev Mints `tokenId` and transfers it to `to`.\n   *\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n   *\n   * Requirements:\n   *\n   * - `tokenId` must not exist.\n   * - `to` cannot be the zero address.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _mint(address to, uint256 tokenId) internal virtual {\n    require(to != address(0), \"Mint to 0 address\");\n    require(!_exists(tokenId), \"Exists\");\n\n    _beforeTokenTransfer(address(0), to, tokenId);\n\n    // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n    require(!_exists(tokenId), \"Exists\");\n\n    unchecked {\n      // Will not overflow unless all 2**256 token ids are minted to the same owner.\n      // Given that tokens are minted one by one, it is impossible in practice that\n      // this ever happens. Might change if we allow batch minting.\n      // The ERC fails to describe this case.\n      _balances[to] += 1;\n    }\n\n    _owners[tokenId] = to;\n\n    emit Transfer(address(0), to, tokenId);\n\n    _afterTokenTransfer(address(0), to, tokenId);\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   * This is an internal function that does not check if the sender is authorized to operate on the token.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address tokenOwner = ERC721M.ownerOf(tokenId);\n\n    _beforeTokenTransfer(tokenOwner, BURN_ADDRESS, tokenId);\n\n    // Clear approvals\n    delete _tokenApprovals[tokenId];\n\n    _balances[tokenOwner] -= 1;\n    _owners[tokenId] = BURN_ADDRESS;\n    _balances[BURN_ADDRESS] += 1;\n\n    emit Transfer(tokenOwner, BURN_ADDRESS, tokenId);\n\n    _afterTokenTransfer(tokenOwner, BURN_ADDRESS, tokenId);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual {\n    require(ERC721M.ownerOf(tokenId) == from, \"Not owner\");\n    require(to != address(0), \"Tfr to 0 address\");\n\n    _beforeTokenTransfer(from, to, tokenId);\n\n    // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n    require(ERC721M.ownerOf(tokenId) == from, \"Not owner\");\n\n    // Clear approvals from the previous owner\n    delete _tokenApprovals[tokenId];\n\n    unchecked {\n      // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n      // `from`'s balance is the number of token held, which is at least one before the current\n      // transfer.\n      // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n      // all 2**256 token ids to be minted, which in practice is impossible.\n      _balances[from] -= 1;\n      _balances[to] += 1;\n    }\n    _owners[tokenId] = to;\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits an {Approval} event.\n   */\n  function _approve(address to, uint256 tokenId) internal virtual {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(ERC721M.ownerOf(tokenId), to, tokenId);\n  }\n\n  /**\n   * @dev Approve `operator` to operate on all of `owner` tokens\n   *\n   * Emits an {ApprovalForAll} event.\n   */\n  function _setApprovalForAll(\n    address owner,\n    address operator,\n    bool approved\n  ) internal virtual {\n    require(owner != operator, \"Approve to caller\");\n    _operatorApprovals[owner][operator] = approved;\n    emit ApprovalForAll(owner, operator, approved);\n  }\n\n  /**\n   * @dev Reverts if the `tokenId` has not been minted yet.\n   */\n  function _requireMinted(uint256 tokenId) internal view virtual {\n    require(_exists(tokenId), \"Invalid Token\");\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver.onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n        } else {\n          /// @solidity memory-safe-assembly\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n   * - When `from` is zero, the tokens will be minted for `to`.\n   * - When `to` is zero, ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n   * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n   * - When `from` is zero, the tokens were minted for `to`.\n   * - When `to` is zero, ``from``'s tokens were burned.\n   * - `from` and `to` are never both zero.\n   * - `batchSize` is non-zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual {}\n}\n"
    },
    "contracts/LayerZero/onft/IONFT721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @dev Interface of the ONFT standard\n */\ninterface IONFT721 is IONFT721Core, IERC721 {\n\n}\n"
    },
    "contracts/LayerZero/onft/ONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IONFT721Core.sol\";\nimport \"../../lzApp/NonblockingLzApp.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\n  uint256 public constant NO_EXTRA_GAS = 0;\n  uint16 public constant FUNCTION_TYPE_SEND = 1;\n  bool public useCustomAdapterParams;\n\n  event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\n\n  error AdapterParamsMustBeEmpty();\n\n  constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IONFT721Core).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  function estimateSendFee(\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    bool _useZro,\n    bytes memory _adapterParams\n  ) public view virtual override returns (uint256 nativeFee, uint256 zroFee) {\n    // mock the payload for send()\n    bytes memory payload = abi.encode(_toAddress, _tokenId);\n    return\n      lzEndpoint.estimateFees(\n        _dstChainId,\n        address(this),\n        payload,\n        _useZro,\n        _adapterParams\n      );\n  }\n\n  function sendFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams\n  ) public payable virtual override {\n    _send(\n      _from,\n      _dstChainId,\n      _toAddress,\n      _tokenId,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams\n    );\n  }\n\n  function _send(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams\n  ) internal virtual {\n    _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\n\n    bytes memory payload = abi.encode(_toAddress, _tokenId);\n\n    if (useCustomAdapterParams) {\n      _checkGasLimit(\n        _dstChainId,\n        FUNCTION_TYPE_SEND,\n        _adapterParams,\n        NO_EXTRA_GAS\n      );\n    } else {\n      if (_adapterParams.length != 0) {\n        revert AdapterParamsMustBeEmpty();\n      }\n      // require(\n      //   _adapterParams.length == 0,\n      //   \"LzApp: _adapterParams must be empty.\"\n      // );\n    }\n    _lzSend(\n      _dstChainId,\n      payload,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams,\n      msg.value\n    );\n\n    emit SendToChain(_dstChainId, _from, _toAddress, _tokenId);\n  }\n\n  function _nonblockingLzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64, /*_nonce*/\n    bytes memory _payload\n  ) internal virtual override {\n    (bytes memory toAddressBytes, uint256 tokenId) = abi.decode(\n      _payload,\n      (bytes, uint256)\n    );\n    address toAddress;\n    assembly {\n      toAddress := mload(add(toAddressBytes, 20))\n    }\n\n    _creditTo(_srcChainId, toAddress, tokenId);\n\n    emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId);\n  }\n\n  function setUseCustomAdapterParams(bool _useCustomAdapterParams)\n    external\n    onlyOwner\n  {\n    useCustomAdapterParams = _useCustomAdapterParams;\n    emit SetUseCustomAdapterParams(_useCustomAdapterParams);\n  }\n\n  function _debitFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes memory _toAddress,\n    uint256 _tokenId\n  ) internal virtual;\n\n  function _creditTo(\n    uint16 _srcChainId,\n    address _toAddress,\n    uint256 _tokenId\n  ) internal virtual;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "operator-filter-registry/src/DefaultOperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {OperatorFilterer} from \"./OperatorFilterer.sol\";\n\n/**\n * @title  DefaultOperatorFilterer\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\n */\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\n\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/EPS/IEPS_CT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//* IEPS_CT: EPS ComposeThis Interface\n//* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// EPS Contracts v2.0.0\n\npragma solidity 0.8.17;\n\nenum ValueType {\n  none,\n  characterString,\n  number,\n  date,\n  chainAddress\n}\n\nstruct AddedTrait {\n  string trait;\n  ValueType valueType;\n  uint256 valueInteger;\n  string valueString;\n  address valueAddress;\n}\n\ninterface IEPS_CT {\n  event MetadataUpdate(\n    uint256 chain,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 futureExecutionDate\n  );\n\n  event ENSReverseRegistrarSet(address ensReverseRegistrarAddress);\n\n  function composeURIFromBaseURI(\n    string memory baseString_,\n    AddedTrait[] memory addedTraits_,\n    uint256 startImageTag_,\n    string[] memory imageTags_\n  ) external view returns (string memory composedString_);\n\n  function composeURIFromLookup(\n    uint256 baseURIChain_,\n    address baseURIContract_,\n    uint256 baseURITokenId_,\n    AddedTrait[] memory addedTraits_,\n    uint256 startImageTag_,\n    string[] memory imageTags_\n  ) external view returns (string memory composedString_);\n\n  function composeTraitsFromArray(AddedTrait[] memory addedTraits_)\n    external\n    view\n    returns (string memory composedImageURL_);\n\n  function composeImageFromBase(\n    string memory baseImage_,\n    uint256 startImageTag_,\n    string[] memory imageTags_,\n    address contractAddress,\n    uint256 id\n  ) external view returns (string memory composedImageURL_);\n\n  function composeTraitsAndImage(\n    string memory baseImage_,\n    uint256 startImageTag_,\n    string[] memory imageTags_,\n    address contractAddress_,\n    uint256 id_,\n    AddedTrait[] memory addedTraits_\n  )\n    external\n    view\n    returns (string memory composedImageURL_, string memory composedTraits_);\n\n  function triggerMetadataUpdate(\n    uint256 chain,\n    address tokenContract,\n    uint256 tokenId,\n    uint256 futureExecutionDate\n  ) external;\n}\n"
    },
    "contracts/EPS/IEPS_DR.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//* IEPS_DR: EPS Delegate Regsiter Interface\n//* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// EPS Contracts v2.0.0\n\npragma solidity ^0.8.17;\n\n/**\n *\n * @dev Interface for the EPS portal\n *\n */\n\n/**\n * @dev Returns the beneficiary of the `tokenId` token.\n */\ninterface IEPS_DR {\n  function beneficiaryOf(\n    address tokenContract_,\n    uint256 tokenId_,\n    uint256 rightsIndex_\n  ) external view returns (address beneficiary_);\n\n  /**\n   * @dev Returns the beneficiary balance for a contract.\n   */\n  function beneficiaryBalanceOf(\n    address queryAddress_,\n    address tokenContract_,\n    uint256 rightsIndex_\n  ) external view returns (uint256 balance_);\n\n  /**\n   * @dev beneficiaryBalance: Returns the beneficiary balance of ETH.\n   */\n  function beneficiaryBalance(address queryAddress_)\n    external\n    view\n    returns (uint256 balance_);\n\n  /**\n   * @dev beneficiaryBalanceOf1155: Returns the beneficiary balance for an ERC1155.\n   */\n  function beneficiaryBalanceOf1155(\n    address queryAddress_,\n    address tokenContract_,\n    uint256 id_\n  ) external view returns (uint256 balance_);\n\n  function getAddresses(address receivedAddress_, uint256 rightsIndex_)\n    external\n    view\n    returns (address[] memory proxyAddresses_, address delivery_);\n\n  function getAddresses1155(address receivedAddress_, uint256 rightsIndex_)\n    external\n    view\n    returns (address[] memory proxyAddresses_, address delivery_);\n\n  function getAddresses20(address receivedAddress_, uint256 rightsIndex_)\n    external\n    view\n    returns (address[] memory proxyAddresses_, address delivery_);\n\n  function getAllAddresses(address receivedAddress_, uint256 rightsIndex_)\n    external\n    view\n    returns (address[] memory proxyAddresses_, address delivery_);\n\n  /**\n   * @dev coldIsLive: Return if a cold wallet is live\n   */\n  function coldIsLive(address cold_) external view returns (bool);\n\n  /**\n   * @dev hotIsLive: Return if a hot wallet is live\n   */\n  function hotIsLive(address hot_) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/common/ERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IERC2981.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\n *\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\n *\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\n * fee is specified in basis points by default.\n *\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\n *\n * _Available since v4.5._\n */\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @inheritdoc IERC2981\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    /**\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\n     * override.\n     */\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    /**\n     * @dev Sets the royalty information that all ids in this contract will default to.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Removes default royalty information.\n     */\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    /**\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\n     *\n     * Requirements:\n     *\n     * - `receiver` cannot be the zero address.\n     * - `feeNumerator` cannot be greater than the fee denominator.\n     */\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(feeNumerator <= _feeDenominator(), \"ERC2981: royalty fee will exceed salePrice\");\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    /**\n     * @dev Resets royalty information for the token id back to the global default.\n     */\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "contracts/LayerZero/onft/IONFT721Core.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the ONFT Core standard\n */\ninterface IONFT721Core is IERC165 {\n  /**\n   * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n   * _dstChainId - L0 defined chain id to send tokens too\n   * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n   * _tokenId - token Id to transfer\n   * _useZro - indicates to use zro to pay L0 fees\n   * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\n   */\n  function estimateSendFee(\n    uint16 _dstChainId,\n    bytes calldata _toAddress,\n    uint256 _tokenId,\n    bool _useZro,\n    bytes calldata _adapterParams\n  ) external view returns (uint256 nativeFee, uint256 zroFee);\n\n  /**\n   * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\n   * `_toAddress` can be any size depending on the `dstChainId`.\n   * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n   * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n   */\n  function sendFrom(\n    address _from,\n    uint16 _dstChainId,\n    bytes calldata _toAddress,\n    uint256 _tokenId,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes calldata _adapterParams\n  ) external payable;\n\n  /**\n   * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n   * `_nonce` is the outbound nonce from\n   */\n  event SendToChain(\n    uint16 indexed _dstChainId,\n    address indexed _from,\n    bytes indexed _toAddress,\n    uint256 _tokenId\n  );\n\n  /**\n   * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\n   */\n  event ReceiveFromChain(\n    uint16 indexed _srcChainId,\n    bytes indexed _srcAddress,\n    address indexed _toAddress,\n    uint256 _tokenId\n  );\n}\n"
    },
    "contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../util/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\n        // try-catch all errors/exceptions\n        if (!success) {\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\n\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "contracts/util/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint256 constant LOW_28_MASK =\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n            _gas, // gas\n            _target, // recipient\n            0, // ether value\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint256 _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint256 _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n            _gas, // gas\n            _target, // recipient\n            add(_calldata, 0x20), // inloc\n            mload(_calldata), // inlen\n            0, // outloc\n            0 // outlen\n            )\n        // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n        // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n        // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\n    internal\n    pure\n    {\n        require(_buf.length >= 4);\n        uint256 _mask = LOW_28_MASK;\n        assembly {\n        // load the first word of\n            let _word := mload(add(_buf, 0x20))\n        // mask out the top 4 bytes\n        // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/ILayerZeroReceiver.sol\";\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\nimport \"../util/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is\n  Ownable,\n  ILayerZeroReceiver,\n  ILayerZeroUserApplicationConfig\n{\n  using BytesLib for bytes;\n\n  ILayerZeroEndpoint public immutable lzEndpoint;\n  mapping(uint16 => bytes) public trustedRemoteLookup;\n  mapping(uint16 => mapping(uint16 => uint256)) public minDstGasLookup;\n  address public precrime;\n\n  event SetPrecrime(address precrime);\n  event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n  event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n  event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\n\n  error InvalidEndpointCaller();\n  error InvalidSourceSendingContract();\n  error DestinationIsNotTrustedSource();\n  error MinGasLimitNotSet();\n  error GasLimitIsTooLow();\n  error InvalidAdapterParams();\n  error NoTrustedPathRecord();\n  error InvalidMinGas();\n\n  constructor(address _endpoint) {\n    lzEndpoint = ILayerZeroEndpoint(_endpoint);\n  }\n\n  function lzReceive(\n    uint16 _srcChainId,\n    bytes calldata _srcAddress,\n    uint64 _nonce,\n    bytes calldata _payload\n  ) public virtual override {\n    // lzReceive must be called by the endpoint for security\n    if (_msgSender() != address(lzEndpoint)) {\n      revert InvalidEndpointCaller();\n    }\n    // require(\n    //   _msgSender() == address(lzEndpoint),\n    //   \"LzApp: invalid endpoint caller\"\n    // );\n\n    bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n    // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n    if (\n      !(_srcAddress.length == trustedRemote.length &&\n        trustedRemote.length > 0 &&\n        keccak256(_srcAddress) == keccak256(trustedRemote))\n    ) {\n      revert InvalidSourceSendingContract();\n    }\n    // require(\n    //   _srcAddress.length == trustedRemote.length &&\n    //     trustedRemote.length > 0 &&\n    //     keccak256(_srcAddress) == keccak256(trustedRemote),\n    //   \"LzApp: invalid source sending contract\"\n    // );\n\n    _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n  }\n\n  // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n  function _blockingLzReceive(\n    uint16 _srcChainId,\n    bytes memory _srcAddress,\n    uint64 _nonce,\n    bytes memory _payload\n  ) internal virtual;\n\n  function _lzSend(\n    uint16 _dstChainId,\n    bytes memory _payload,\n    address payable _refundAddress,\n    address _zroPaymentAddress,\n    bytes memory _adapterParams,\n    uint256 _nativeFee\n  ) internal virtual {\n    bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n\n    if (trustedRemote.length == 0) {\n      revert DestinationIsNotTrustedSource();\n    }\n    // require(\n    //   trustedRemote.length != 0,\n    //   \"LzApp: destination chain is not a trusted source\"\n    // );\n\n    lzEndpoint.send{value: _nativeFee}(\n      _dstChainId,\n      trustedRemote,\n      _payload,\n      _refundAddress,\n      _zroPaymentAddress,\n      _adapterParams\n    );\n  }\n\n  function _checkGasLimit(\n    uint16 _dstChainId,\n    uint16 _type,\n    bytes memory _adapterParams,\n    uint256 _extraGas\n  ) internal view virtual {\n    uint256 providedGasLimit = _getGasLimit(_adapterParams);\n    uint256 minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\n\n    if (minGasLimit == 0) {\n      revert MinGasLimitNotSet();\n    }\n    //require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n\n    if (providedGasLimit < minGasLimit) {\n      revert GasLimitIsTooLow();\n    }\n    //require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\n  }\n\n  function _getGasLimit(bytes memory _adapterParams)\n    internal\n    pure\n    virtual\n    returns (uint256 gasLimit)\n  {\n    if (_adapterParams.length < 34) {\n      revert InvalidAdapterParams();\n    }\n    //require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n\n    assembly {\n      gasLimit := mload(add(_adapterParams, 34))\n    }\n  }\n\n  //---------------------------UserApplication config----------------------------------------\n  function getConfig(\n    uint16 _version,\n    uint16 _chainId,\n    address,\n    uint256 _configType\n  ) external view returns (bytes memory) {\n    return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n  }\n\n  // generic config for LayerZero user Application\n  function setConfig(\n    uint16 _version,\n    uint16 _chainId,\n    uint256 _configType,\n    bytes calldata _config\n  ) external override onlyOwner {\n    lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n  }\n\n  function setSendVersion(uint16 _version) external override onlyOwner {\n    lzEndpoint.setSendVersion(_version);\n  }\n\n  function setReceiveVersion(uint16 _version) external override onlyOwner {\n    lzEndpoint.setReceiveVersion(_version);\n  }\n\n  function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\n    external\n    override\n    onlyOwner\n  {\n    lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n  }\n\n  // _path = abi.encodePacked(remoteAddress, localAddress)\n  // this function set the trusted path for the cross-chain communication\n  function setTrustedRemote(uint16 _srcChainId, bytes calldata _path)\n    external\n    onlyOwner\n  {\n    trustedRemoteLookup[_srcChainId] = _path;\n    emit SetTrustedRemote(_srcChainId, _path);\n  }\n\n  function setTrustedRemoteAddress(\n    uint16 _remoteChainId,\n    bytes calldata _remoteAddress\n  ) external onlyOwner {\n    trustedRemoteLookup[_remoteChainId] = abi.encodePacked(\n      _remoteAddress,\n      address(this)\n    );\n    emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n  }\n\n  function getTrustedRemoteAddress(uint16 _remoteChainId)\n    external\n    view\n    returns (bytes memory)\n  {\n    bytes memory path = trustedRemoteLookup[_remoteChainId];\n    if (path.length == 0) {\n      revert NoTrustedPathRecord();\n    }\n    //require(path.length != 0, \"LzApp: no trusted path record\");\n\n    return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n  }\n\n  function setPrecrime(address _precrime) external onlyOwner {\n    precrime = _precrime;\n    emit SetPrecrime(_precrime);\n  }\n\n  function setMinDstGas(\n    uint16 _dstChainId,\n    uint16 _packetType,\n    uint256 _minGas\n  ) external onlyOwner {\n    if (_minGas == 0) {\n      revert InvalidMinGas();\n    }\n    //require(_minGas > 0, \"LzApp: invalid minGas\");\n\n    minDstGasLookup[_dstChainId][_packetType] = _minGas;\n    emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n  }\n\n  //--------------------------- VIEW FUNCTION ----------------------------------------\n  function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress)\n    external\n    view\n    returns (bool)\n  {\n    bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n    return keccak256(trustedSource) == keccak256(_srcAddress);\n  }\n}\n"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\n}\n"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "contracts/util/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n        // Store the length of the first bytes array at the beginning of\n        // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n        // Maintain a memory counter for the current write location in the\n        // temp bytes array by adding the 32 bytes for the array length to\n        // the starting location.\n            let mc := add(tempBytes, 0x20)\n        // Stop copying when the memory counter reaches the length of the\n        // first bytes array.\n            let end := add(mc, length)\n\n            for {\n            // Initialize a copy counter to the start of the _preBytes data,\n            // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n            // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n            // Write the _preBytes data into the tempBytes memory 32 bytes\n            // at a time.\n                mstore(mc, mload(cc))\n            }\n\n        // Add the length of _postBytes to the current length of tempBytes\n        // and store it as the new length in the first 32 bytes of the\n        // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n        // Move the memory counter back from a multiple of 0x20 to the\n        // actual end of the _preBytes data.\n            mc := end\n        // Stop copying when the memory counter reaches the new combined\n        // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n        // Update the free-memory pointer by padding our last write location\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n        // next 32 byte block, then round down to the nearest multiple of\n        // 32. If the sum of the length of the two arrays is zero then add\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n            not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n        // Read the first 32 bytes of _preBytes storage, which is the length\n        // of the array. (We don't need to use the offset into the slot\n        // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n        // Arrays of 31 bytes or less have an even value in their slot,\n        // while longer arrays have an odd value. The actual length is\n        // the slot divided by two for odd values, and the lowest order\n        // byte divided by two for even values.\n        // If the slot is even, bitwise and the slot with 255 and divide by\n        // two to get the length. If the slot is odd, bitwise and the slot\n        // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n            // Since the new array still fits in the slot, we just need to\n            // update the contents of the slot.\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                _preBytes.slot,\n                // all the modifications to the slot are inside this\n                // next block\n                add(\n                // we can just add to the slot contents because the\n                // bytes we want to change are the LSBs\n                fslot,\n                add(\n                mul(\n                div(\n                // load the bytes from memory\n                mload(add(_postBytes, 0x20)),\n                // zero all bytes to the right\n                exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n                ),\n                // increase length by the double of the memory\n                // bytes length\n                mul(mlength, 2)\n                )\n                )\n                )\n            }\n            case 1 {\n            // The stored value fits in the slot, but the combined value\n            // will exceed it.\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // The contents of the _postBytes array start 32 bytes into\n            // the structure. Our first read should obtain the `submod`\n            // bytes that can fit into the unused space in the last word\n            // of the stored array. To get this, we read 32 bytes starting\n            // from `submod`, so the data we read overlaps with the array\n            // contents by `submod` bytes. Masking the lowest-order\n            // `submod` bytes allows us to add that value directly to the\n            // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                sc,\n                add(\n                and(\n                fslot,\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                ),\n                and(mload(mc), mask)\n                )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n            // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n            // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n            // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n            // Copy over the first `submod` bytes of the new data as in\n            // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n    internal\n    pure\n    returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n            // The first word of the slice result is potentially a partial\n            // word read from the original array. To read it, we calculate\n            // the length of that partial word and start copying that many\n            // bytes into the array. The first word we copy will start with\n            // data we don't care about, but the last `lengthmod` bytes will\n            // land at the beginning of the contents of the new array. When\n            // we're done copying, we overwrite the full first word with\n            // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n            // The multiplication in the next line is necessary\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\n            // the following copy loop was copying the origin's length\n            // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                // The multiplication in the next line has the same exact purpose\n                // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n            //update free-memory pointer\n            //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n            //zero out the 32 bytes slice we are about to return\n            //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                    // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n    internal\n    view\n    returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n        // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n        // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n        // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                    // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                        // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                    // cb is a circuit breaker in the for loop since there's\n                    //  no said feature for inline assembly loops\n                    // cb = 1 - don't breaker\n                    // cb = 0 - break\n                        let cb := 1\n\n                    // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                            // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n            // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "operator-filter-registry/src/OperatorFilterer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport {IOperatorFilterRegistry} from \"./IOperatorFilterRegistry.sol\";\n\n/**\n * @title  OperatorFilterer\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\n *         registrant's entries in the OperatorFilterRegistry.\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\n */\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (subscribe) {\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\n                }\n            }\n        }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Allow spending tokens from addresses with balance\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n        // from an EOA.\n        if (from != msg.sender) {\n            _checkFilterOperator(msg.sender);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n"
    },
    "operator-filter-registry/src/IOperatorFilterRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function unregister(address addr) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}