{{
  "language": "Solidity",
  "sources": {
    "src/Ririsu/RiriStaking.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"./Delegated.sol\";\nimport \"../Interfaces/ISanctum.sol\";\nimport \"../Interfaces/IAeon.sol\";\n\ncontract RirisuStaking is IERC721Receiver, Delegated {\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    uint256 private LORE_COST = 100 ether; // 100 AEON\n\n    uint256 private NAME_COST = 100 ether; // 100 AEON\n\n    uint128 public immutable MAX_RIRI_LEVEL = 80;\n\n    uint128[] public MODIFIERS = [uint128(100), 125, 150, 225];\n\n    uint128[][] public RARITIES = [[uint128(6301), 9001, 9901, 10_001], [uint128(6301), 9001, 9801, 10_001]];\n\n    uint256[] public ENCHANT_COST = [\n        uint256(5 ether),\n        44 ether,\n        86 ether,\n        130 ether,\n        130 ether,\n        172 ether,\n        172 ether,\n        172 ether,\n        172 ether\n    ];\n\n    // maps token id to staking info\n    mapping(uint256 => Riri) internal riris;\n    // maps token id to staking info\n    mapping(uint256 => Sanctum) internal sanctums;\n\n    mapping(uint256 => uint128[]) internal rooms;\n\n    mapping(address => EnumerableSet.UintSet) private stkdRiris;\n\n    mapping(address => EnumerableSet.UintSet) private stkdSanctums;\n\n    mapping(uint256 => bool) private legendaries;\n\n    IERC721 internal riri;\n\n    ISanctum internal sanctum;\n\n    IAeon internal aeon;\n\n    bytes32 internal entropySauce;\n\n    enum Actions {\n        UNSTAKE,\n        STAKE,\n        CHANNEL\n    }\n\n    enum RoomRarity {\n        COMMON,\n        UNCOMMON,\n        RARE,\n        MYTHIC\n    }\n\n    struct Sanctum {\n        address owner;\n        uint128 totalStaked;\n        uint128 level;\n        Actions action;\n    }\n\n    struct Riri {\n        address owner;\n        uint256 sanctum; // should this be int?\n        uint256 timestamp;\n        uint128 level;\n        uint128 rerolls;\n        Actions action;\n        string name;\n        string description;\n    }\n\n    struct StakeMeta {\n        uint256 rewardMultiplier;\n    }\n\n    constructor(\n        address ririAddress,\n        address sanctumAddress,\n        address aeonAddress\n    ) {\n        riri = IERC721(ririAddress);\n        sanctum = ISanctum(sanctumAddress);\n        aeon = IAeon(aeonAddress);\n    }\n\n    modifier noCheaters() {\n        uint256 size = 0;\n        address acc = msg.sender;\n        assembly {\n            size := extcodesize(acc)\n        }\n\n        require(msg.sender == tx.origin && size == 0, \"you're trying to cheat!\");\n        _;\n\n        // We'll use the last caller hash to add entropy to next caller\n        entropySauce = keccak256(abi.encodePacked(acc, block.coinbase));\n    }\n\n    function setLegendaries(uint256[] calldata _legendaries) external onlyDelegates {\n        for (uint256 i = 0; i < _legendaries.length; i++) {\n            legendaries[_legendaries[i]] = true;\n        }\n    }\n\n    function removeLegendaries(uint256[] calldata _legendaries) external onlyDelegates {\n        for (uint256 i = 0; i < _legendaries.length; i++) {\n            legendaries[_legendaries[i]] = false;\n        }\n    }\n\n    // claim sanctum token\n    function claimSanctum(bool autoStake) public noCheaters {\n        uint256 tokenId = sanctum.totalSupply();\n        if (autoStake) {\n            sanctum.mint(address(this), msg.sender);\n            sanctums[tokenId] = Sanctum(msg.sender, 0, 0, Actions.STAKE);\n            stkdSanctums[msg.sender].add(tokenId);\n        } else {\n            sanctum.mint(msg.sender, msg.sender);\n        }\n        _generateNewRoom(tokenId);\n    }\n\n    function claimAllSanctums(bool autoStake) external noCheaters {\n        uint256 limit = sanctum.getDistributionLimit(msg.sender);\n        if (limit > 7) {\n            limit = 7;\n        }\n\n        for (uint256 i = 0; i < limit; i++) {\n            claimSanctum(autoStake);\n        }\n    }\n\n    // claim from riri ID\n    function claimForRiri(uint256 id) public noCheaters {\n        Riri memory currentRiri = riris[id];\n        // TODO: events\n        if (block.timestamp <= currentRiri.timestamp) return;\n        uint256 timediff = block.timestamp - currentRiri.timestamp;\n        if (currentRiri.action == Actions.STAKE) {\n            uint256 mod = _aggregateRarity(currentRiri.sanctum, currentRiri.level);\n            aeon.mint(currentRiri.owner, _claimableAeon(timediff, mod, legendaries[id]));\n            currentRiri.timestamp = block.timestamp; // reset timestamp\n        }\n        if (currentRiri.action == Actions.CHANNEL) {\n            uint128 claimableLevels = _claimableLevels(timediff);\n\n            currentRiri.level = (currentRiri.level + claimableLevels > MAX_RIRI_LEVEL)\n                ? (MAX_RIRI_LEVEL)\n                : (currentRiri.level + claimableLevels);\n\n            currentRiri.timestamp = block.timestamp; // reset timestamp\n            riris[id] = currentRiri;\n        }\n    }\n\n    function claimAll(uint256[] calldata ririIds) external {\n        for (uint256 i = 0; i < ririIds.length; i++) {\n            claimForRiri(ririIds[i]);\n        }\n    }\n\n    function doActionsWithSanctums(uint256[] calldata ids, Actions[] calldata actions) external {\n        require(ids.length == actions.length, \"ids and actions must be the same length\");\n        for (uint256 i = 0; i < ids.length; i++) {\n            Sanctum memory s = sanctums[ids[i]];\n            require(ownerOfSanctum(ids[i]) == msg.sender, \"You are not the owner of this Sanctum! uwu\");\n            require(actions[i] < Actions.CHANNEL, \"sanctum: invalid action\");\n            if (actions[i] == Actions.UNSTAKE) {\n                require(s.totalStaked == 0, \"Sanctum must not have staked tokens to unstake\");\n\n                s.action = Actions.UNSTAKE;\n                s.owner = address(0);\n                sanctums[ids[i]] = s;\n                stkdSanctums[msg.sender].remove(ids[i]);\n                sanctum.safeTransferFrom(address(this), msg.sender, ids[i]); // transfer from staking contract to owner\n            }\n            if (actions[i] == Actions.STAKE) {\n                require(sanctum.getApproved(ids[i]) == address(this), \"Sanctum must be approved staking\");\n                s.action = Actions.STAKE;\n                s.owner = msg.sender;\n                s.totalStaked = 0;\n                sanctums[ids[i]] = s;\n                stkdSanctums[msg.sender].add(ids[i]);\n                sanctum.safeTransferFrom(msg.sender, address(this), ids[i]);\n            }\n        }\n    }\n\n    function doActionsWithRiris(\n        uint256[] calldata ids,\n        Actions[] calldata actions,\n        uint256[] calldata sanctumIds\n    ) external noCheaters {\n        require(\n            ids.length == actions.length && actions.length == sanctumIds.length,\n            \"ids and actions must be the same length\"\n        );\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            Riri memory r = riris[ids[i]];\n            Sanctum memory s = sanctums[sanctumIds[i]];\n            require(\n                ownerOfRiri(ids[i]) == msg.sender && ownerOfSanctum(sanctumIds[i]) == msg.sender,\n                \"you do not own one of these tokens! qq\"\n            );\n            if (actions[i] == Actions.UNSTAKE) {\n                require(r.action == Actions.STAKE || r.action == Actions.CHANNEL, \"Riri must be staked or channelling\");\n                require(r.sanctum == sanctumIds[i], \"Riri must be in this sanctum\");\n\n                claimForRiri(ids[i]);\n\n                r.action = Actions.UNSTAKE;\n                r.timestamp = block.timestamp;\n                r.owner = address(0);\n                r.sanctum = 5555;\n                s.totalStaked -= 1;\n\n                sanctums[sanctumIds[i]] = s;\n                riris[ids[i]] = r;\n\n                stkdRiris[msg.sender].remove(ids[i]);\n                riri.safeTransferFrom(address(this), msg.sender, ids[i]); // transfer from staking contract to owner\n            }\n            if (actions[i] == Actions.STAKE) {\n                require(r.action == Actions.UNSTAKE || r.action == Actions.CHANNEL, \"Riri must be unstaked\");\n\n                if (r.action == Actions.UNSTAKE) {\n                    require(s.totalStaked < 5, \"Sanctum has reached the maximum Riris staked\");\n                    require(\n                        riri.getApproved(ids[i]) == address(this) || riri.isApprovedForAll(msg.sender, address(this)),\n                        \"Ririsu must be approved staking\"\n                    );\n\n                    r.sanctum = sanctumIds[i];\n                    riri.safeTransferFrom(msg.sender, address(this), ids[i]); // transfer from staking contract to owner\n                    stkdRiris[msg.sender].add(ids[i]);\n                } else {\n                    require(r.sanctum == sanctumIds[i], \"Riri must be in this sanctum\");\n                }\n\n                r.action = Actions.STAKE;\n                r.timestamp = block.timestamp;\n                r.owner = address(msg.sender);\n\n                s.totalStaked += 1;\n\n                sanctums[sanctumIds[i]] = s;\n                riris[ids[i]] = r;\n            }\n            if (actions[i] == Actions.CHANNEL) {\n                require(\n                    riri.getApproved(ids[i]) == address(this) || riri.isApprovedForAll(msg.sender, address(this)),\n                    \"Ririsu must be approved staking\"\n                );\n                require(r.action == Actions.UNSTAKE || r.action == Actions.STAKE, \"Riri must be unstaked or staked\");\n                // if ririsu is staked, we need to transfer it back to the staking contract\n                if (r.action == Actions.UNSTAKE) {\n                    require(s.totalStaked < 5, \"Sanctum has reached the maximum Riris\");\n                    require(\n                        riri.getApproved(ids[i]) == address(this) || riri.isApprovedForAll(msg.sender, address(this)),\n                        \"Ririsu must be approved staking\"\n                    );\n                    r.sanctum = sanctumIds[i];\n                    riri.safeTransferFrom(msg.sender, address(this), ids[i]); // transfer from staking contract to owner\n                    stkdRiris[msg.sender].add(ids[i]);\n                } else {\n                    require(r.sanctum == sanctumIds[i], \"Riri must be in this sanctum\");\n                }\n\n                r.action = Actions.CHANNEL;\n                r.timestamp = block.timestamp;\n                r.owner = address(msg.sender);\n\n                s.totalStaked += 1;\n\n                sanctums[sanctumIds[i]] = s;\n                riris[ids[i]] = r;\n            }\n        }\n    }\n\n    function _claimableLevels(uint256 timeDiff) internal pure returns (uint128 levels_) {\n        levels_ = uint128(timeDiff / 12 hours); // 1 level every 12 hours uwu\n    }\n\n    function _aggregateRarity(uint256 id, uint256 ririLevel) internal view returns (uint256) {\n        uint256 totalRarity = 0;\n        uint128[] memory roomArray = getSanctumRooms(id);\n\n        for (uint256 i = 0; i < roomArray.length && i < ((ririLevel / 10) + 1); i++) {\n            totalRarity += uint256(roomArray[i]);\n        }\n\n        return totalRarity;\n    }\n\n    // claimable AEON\n    function _claimableAeon(\n        uint256 timeDiff,\n        uint256 mod,\n        bool isLegendary\n    ) internal pure returns (uint256 aeon_) {\n        uint256 base = isLegendary ? 525 : 300;\n        aeon_ = ((timeDiff * (base + mod) * 1 ether) / 100 / 1 days);\n    }\n\n    function _generateNewRoom(uint256 _sanctumId) internal {\n        rooms[_sanctumId].push(_pickRarity(_sanctumId, rooms[_sanctumId].length)); // todo generate random room\n    }\n\n    function _psued(uint128[] memory args) internal view returns (uint256) {\n        bytes32 p1 = keccak256(abi.encodePacked((args)));\n        bytes32 p2 = keccak256(\n            abi.encodePacked(block.number, block.timestamp, block.difficulty, block.coinbase, entropySauce)\n        );\n        return uint256((p1 & p2) | (p1 ^ p2)) % 10_000;\n    }\n\n    function _pickRarity(uint256 _sanctumId, uint256 _roomNumber) internal view returns (uint128 rarity_) {\n        uint256 ps = _psued(getSanctumRooms(_sanctumId));\n        uint256 roomNumber = _roomNumber < 2 ? _roomNumber : 1;\n        uint128[] memory rarities = RARITIES[roomNumber];\n        rarity_ = MODIFIERS[0];\n        for (uint256 i = 0; i < rarities.length; i++) {\n            if (ps < rarities[i]) {\n                rarity_ = MODIFIERS[i];\n                return rarity_;\n            }\n        }\n    }\n\n    // claimable view\n    function claimable(uint256 id) external view returns (uint256 amount_) {\n        require(riris[id].action > Actions.UNSTAKE, \"Riri must be staked to claim\");\n        uint256 mod = _aggregateRarity(riris[id].sanctum, riris[id].level);\n        uint256 timeDiff = block.timestamp > riris[id].timestamp ? uint256(block.timestamp - riris[id].timestamp) : 0;\n        amount_ = riris[id].action == Actions.STAKE\n            ? _claimableAeon(timeDiff, mod, legendaries[id])\n            : (timeDiff * 3000) / 1 days;\n    }\n\n    // writeLore -- write lore on your NFT, so cool OwO\n    function writeLore(uint256 id, string calldata lore) external {\n        require(ownerOfRiri(id) == msg.sender, \"You are not the owner of this Riri! uwu\");\n        require(\n            aeon.allowance(msg.sender, address(this)) >= LORE_COST,\n            \"You don't have enough AEON to write lore! uwu\"\n        );\n        require(bytes(riris[id].description).length == 0, \"You have already edited the lore once in the past! q.q\");\n\n        aeon.burnFrom(msg.sender, LORE_COST);\n        riris[id].description = lore;\n    }\n\n    // nameRiri -- name your NFT, so cool OwO\n    function nameRiri(uint256 _id, string calldata _name) external {\n        require(ownerOfRiri(_id) == msg.sender, \"You are not the owner of this Riri! uwu\");\n        require(aeon.allowance(msg.sender, address(this)) >= NAME_COST, \"You don't have enough AEON to rename! uwu\");\n        require(bytes(riris[_id].name).length == 0, \"You have already edited the name once in the past! q.q\");\n\n        aeon.burnFrom(msg.sender, NAME_COST);\n        riris[_id].name = _name;\n    }\n\n    function enchantRoom(\n        uint256 _ririId,\n        uint256 _sanctumId,\n        uint256 _roomNumber\n    ) external noCheaters {\n        require(_sanctumId < sanctum.totalSupply(), \"The sanctum is not valid!\");\n        require(_roomNumber < 9, \"The room is not within the sanctum list!\");\n        require(_roomNumber < rooms[_sanctumId].length + 1, \"Cant unlock that one yet!\");\n        require(riris[_ririId].rerolls < (riris[_ririId].level / 10), \"Riri's level is too low to reroll!\");\n\n        require(\n            aeon.allowance(msg.sender, address(this)) >= ENCHANT_COST[_roomNumber],\n            \"You don't have enough AEON to reroll!\"\n        );\n\n        aeon.burnFrom(msg.sender, ENCHANT_COST[_roomNumber]);\n\n        if (_roomNumber < rooms[_sanctumId].length) {\n            rooms[_sanctumId][_roomNumber] = _pickRarity(_sanctumId, _roomNumber);\n        } else {\n            _generateNewRoom(_sanctumId);\n        }\n    }\n\n    function ownerOfRiri(uint256 id) public view returns (address) {\n        if (riri.ownerOf(id) == address(this)) return riris[id].owner;\n        return riri.ownerOf(id);\n    }\n\n    function ownerOfSanctum(uint256 id) public view returns (address) {\n        if (sanctum.ownerOf(id) == address(this)) return sanctums[id].owner;\n        return sanctum.ownerOf(id);\n    }\n\n    function getSanctumRooms(uint256 _id) public view returns (uint128[] memory) {\n        uint128[] memory rooms_ = new uint128[](rooms[_id].length);\n        for (uint256 i = 0; i < rooms[_id].length; i++) {\n            rooms_[i] = rooms[_id][i];\n        }\n        return rooms_;\n    }\n\n    function roomInfo(uint256 _id, uint256 _roomNumber) public view returns (uint128 roomType_, uint128 rarity_) {\n        roomType_ = uint128(_roomNumber);\n        rarity_ = rooms[_id][_roomNumber];\n    }\n\n    function stakedRiris(address _owner) public view returns (uint256[] memory riris_) {\n        riris_ = stkdRiris[_owner].values();\n    }\n\n    function stakedSanctums(address _owner) public view returns (uint256[] memory sanctums_) {\n        sanctums_ = stkdSanctums[_owner].values();\n    }\n\n    function ririMeta(uint256 _id) public view returns (Riri memory riri_) {\n        riri_ = riris[_id];\n    }\n\n    function sanctumInfo(uint256 id) public view returns (Sanctum memory sanctum_) {\n        sanctum_ = sanctums[id];\n    }\n\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721Receiver.sol\";\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "src/Ririsu/Delegated.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\n\npragma solidity ^0.8.0;\n\n/***********************\n* @author: squeebo_nft *\n************************/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Delegated is Ownable{\n  mapping(address => bool) internal _delegates;\n\n  constructor(){\n    _delegates[owner()] = true;\n  }\n\n  modifier onlyDelegates {\n    require(_delegates[msg.sender], \"Invalid delegate\" );\n    _;\n  }\n\n  //onlyOwner\n  function isDelegate( address addr ) external view onlyOwner returns ( bool ){\n    return _delegates[addr];\n  }\n\n  function setDelegate( address addr, bool isDelegate_ ) external onlyOwner{\n    _delegates[addr] = isDelegate_;\n  }\n\n  function transferOwnership(address newOwner) public virtual override onlyOwner {\n    _delegates[newOwner] = true;\n    super.transferOwnership( newOwner );\n  }\n}\n"
    },
    "src/Interfaces/ISanctum.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/interfaces/IERC721.sol\";\n\ninterface ISanctum is IERC721 {\n    function mint(address _to, address _for) external;\n\n    function totalSupply() external returns (uint256);\n\n    function getDistributionLimit(address _address) external view returns (uint256);\n}\n"
    },
    "src/Interfaces/IAeon.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ninterface IAeon is IERC20 {\n    function mint(address to, uint256 qty) external;\n\n    function burn(uint256 qty) external;\n\n    function burnFrom(address from, uint256 qty) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}