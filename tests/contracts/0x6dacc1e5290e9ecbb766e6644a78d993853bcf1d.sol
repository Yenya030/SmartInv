{{
  "language": "Solidity",
  "sources": {
    "contracts/StakingV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//\n//  _________       __               .__    .__  __________                                            _________ __          __   .__                 ____   ____________  \n// /   _____/____ _/  |_  ____  _____|  |__ |__| \\______   \\__ __  ____   ____   ___________  ______  /   _____//  |______  |  | _|__| ____    ____   \\   \\ /   /\\_____  \\ \n// \\_____  \\\\__  \\\\   __\\/  _ \\/  ___/  |  \\|  |  |       _/  |  \\/    \\ /    \\_/ __ \\_  __ \\/  ___/  \\_____  \\\\   __\\__  \\ |  |/ /  |/    \\  / ___\\   \\   Y   /  /  ____/ \n// /        \\/ __ \\|  | (  <_> )___ \\|   Y  \\  |  |    |   \\  |  /   |  \\   |  \\  ___/|  | \\/\\___ \\   /        \\|  |  / __ \\|    <|  |   |  \\/ /_/  >   \\     /  /       \\ \n///_______  (____  /__|  \\____/____  >___|  /__|  |____|_  /____/|___|  /___|  /\\___  >__|  /____  > /_______  /|__| (____  /__|_ \\__|___|  /\\___  /     \\___/   \\_______ \\\n//        \\/     \\/                \\/     \\/             \\/           \\/     \\/     \\/           \\/          \\/           \\/     \\/       \\//_____/                      \\/\n//\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n\npragma solidity 0.8.12;\n\n/**\n * @title A simple holder of tokens.\n * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n * needs to hold multiple distinct pools of the same token.\n */\ncontract TokenPool is Ownable {\n    IERC20 public token;\n\n    constructor(IERC20 _token) {\n        token = _token;\n    }\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\n        return token.transfer(to, value);\n    }\n\n    function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {\n        require(address(token) != tokenToRescue, 'TokenPool: Cannot claim token held by the contract');\n\n        return IERC20(tokenToRescue).transfer(to, amount);\n    }\n}\n\npragma solidity 0.8.12;\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ninterface ISatoshiRunners {\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n}\n\ninterface ISatoshiRunnersBabies {\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n}\n\ncontract SatoshiStakingV2 is Ownable, ReentrancyGuard {\n\n    event TokensLocked(uint256 amount);\n\n    uint256 public constant LEGENDARY_EMISSION_RATE = 200; // 200 per day\n    uint256 public constant RUNNERS_EMISSION_RATE = 10; // 10 per day\n    uint256 public constant LEGENDARY_BABIES_EMISSION_RATE = 50; // 50 per day\n    uint256 public constant BABIES_EMISSION_RATE = 2; //2 per day\n    bool public live = false;\n\n    mapping(uint256 => uint256) internal runnersTimeStaked;\n    mapping(uint256 => address) internal runnersStaker;\n    mapping(address => uint256[]) internal stakerToRunner;\n\n    mapping(uint256 => uint256) internal babiesTimeStaked;\n    mapping(uint256 => address) internal babiesStaker;\n    mapping(address => uint256[]) internal stakerToBabies;\n\n    struct stakedNFTs {\n        uint16 runnersStaked;\n        uint16 hackerRunnersStaked;\n        uint16 babiesStaked;\n        uint16 hackerBabiesStaked;\n    }\n    mapping(address => stakedNFTs) public userStakedNFTs;\n        \n    ISatoshiRunners private _satoshiRunnersContract;\n    ISatoshiRunnersBabies private _satoshiRunnersBabiesContract;\n\n    // ERC20 ($SAT) token will be deposited into the stakingPool funds.\n    TokenPool private _stakingPool;\n\n    constructor() {\n    }\n\n    modifier stakingEnabled {\n        require(live, \"NOT_LIVE\");\n        _;\n    }\n\n    function setSatoshiRunnersNFTAddress(address _satoshiRunnersNFTAddress) external onlyOwner {\n        _satoshiRunnersContract = ISatoshiRunners(_satoshiRunnersNFTAddress);\n    }\n\n    function setSatoshiRunnersBabiesNFTAddress(address _satoshiRunnersBabiesNFTAddress) external onlyOwner {\n        _satoshiRunnersBabiesContract = ISatoshiRunnersBabies(_satoshiRunnersBabiesNFTAddress);\n    }\n\n    function setStakingPoolAddress(IERC20 _stakingPoolAddress) external onlyOwner {\n        _stakingPool = new TokenPool(_stakingPoolAddress);\n    }\n\n    function getStakedRunners(address staker) public view returns (uint256[] memory) {\n        return stakerToRunner[staker];\n    }\n\n    function getStakedBabies(address staker) public view returns (uint256[] memory) {\n        return stakerToBabies[staker];\n    }\n\n    function getStakedAmountBabies(address staker) public view returns (uint256) {\n        return stakerToBabies[staker].length;\n    }\n    \n    function getStakedAmount(address staker) public view returns (uint256) {\n        return stakerToRunner[staker].length;\n    }\n\n    function getStaker(uint256 tokenId) public view returns (address) {\n        return runnersStaker[tokenId];\n    }\n\n    function getAllRewards(address staker) public view returns (uint256) {\n        uint256 totalRewards = 0;\n        \n        //calculate bonus\n        uint256 bonus = _getBonus(staker);\n\n        uint256[] memory runnersTokens = stakerToRunner[staker];\n        for (uint256 i = 0; i < runnersTokens.length; i++) {\n            totalRewards += getReward(runnersTokens[i]);\n        }\n\n        totalRewards += (bonus * totalRewards) / 100;\n        totalRewards += getBabiesReward(userStakedNFTs[staker], stakerToBabies[staker]);\n        return totalRewards;\n    }\n\n    function stakeRunnersAndBabiesById(uint256[] calldata runnerTokenIds, uint256[] calldata babyTokenIds) external stakingEnabled {\n        for (uint256 i = 0; i < runnerTokenIds.length; i++) {\n            uint256 id = runnerTokenIds[i];\n            require(_satoshiRunnersContract.ownerOf(id) == msg.sender, \"Runner not owned by the sender\");\n\n            _satoshiRunnersContract.transferFrom(msg.sender, address(this), id);\n            stakerToRunner[msg.sender].push(id); \n            runnersTimeStaked[id] = block.timestamp;\n            runnersStaker[id] = msg.sender;\n\n            if (checkIfHackerRunner(id)) {\n                userStakedNFTs[msg.sender].hackerRunnersStaked++;\n            } else {\n                userStakedNFTs[msg.sender].runnersStaked++;\n            }\n        }\n\n        for (uint256 j = 0; j < babyTokenIds.length; j++) {\n            uint256 id = babyTokenIds[j];\n            require(_satoshiRunnersBabiesContract.ownerOf(id) == msg.sender, \"Baby not owned by the sender\");\n\n            _satoshiRunnersBabiesContract.transferFrom(msg.sender, address(this), id);\n            stakerToBabies[msg.sender].push(id);\n            babiesTimeStaked[id] = block.timestamp;\n            babiesStaker[id] = msg.sender;\n\n            if (checkIfHackerBaby(id)) {\n                userStakedNFTs[msg.sender].hackerBabiesStaked++;\n            } else {\n                userStakedNFTs[msg.sender].babiesStaked++;\n            }\n        }\n    }\n\n    function unstakeRunnersAndBabiesByIds(uint256[] calldata runnerTokenIds, uint256[] calldata babyTokenIds) external nonReentrant {\n        uint256 totalRewards = 0;\n        uint256 babiesRewards = 0;\n\n        //calculate bonus\n        uint256 bonus = _getBonus(msg.sender);\n\n        for (uint256 i = 0; i < runnerTokenIds.length; i++) {\n            uint256 id = runnerTokenIds[i];\n            require(runnersStaker[id] == msg.sender, \"NEEDS_TO_BE_OWNER\");\n            \n            _satoshiRunnersContract.transferFrom(address(this), msg.sender, id);\n            removeTokenIdFromArray(stakerToRunner[msg.sender], id);\n            runnersStaker[id] = address(0);\n            totalRewards += getReward(id);\n            if (checkIfHackerRunner(id)) {\n                userStakedNFTs[msg.sender].hackerRunnersStaked--;\n            } else {\n                userStakedNFTs[msg.sender].runnersStaked--;\n            }\n        }\n\n        for (uint256 j = 0; j < babyTokenIds.length; j++) {\n            uint256 id = babyTokenIds[j];\n            require(babiesStaker[id] == msg.sender, \"NEEDS_TO_BE_OWNER\");\n\n            _satoshiRunnersBabiesContract.transferFrom(address(this), msg.sender, id);\n            removeTokenIdFromArray(stakerToBabies[msg.sender], id);\n            babiesStaker[id] = address(0);\n            if (checkIfHackerBaby(id)) {\n                babiesRewards += LEGENDARY_BABIES_EMISSION_RATE * getBabyDayCount(id);\n                userStakedNFTs[msg.sender].hackerBabiesStaked--;\n            } else {\n                babiesRewards += BABIES_EMISSION_RATE * getBabyDayCount(id);\n                userStakedNFTs[msg.sender].babiesStaked--;\n            }\n        }\n\n        totalRewards += (bonus * totalRewards) / 100;\n        require(_stakingPool.transfer(msg.sender, totalRewards + babiesRewards), \"StakingPool: transfer out of staking pool failed due to inssuficient funds in the staking pool\");\n    }\n    \n    function unstakeAll() external nonReentrant {\n        require(getStakedAmount(msg.sender) > 0 || getStakedAmountBabies(msg.sender) > 0, \"NONE_STAKED\");\n        uint256 totalRewards = 0;\n\n        //calculate bonus\n        uint256 bonus = _getBonus(msg.sender);\n        uint256 babiesReward = getBabiesReward(userStakedNFTs[msg.sender], stakerToBabies[msg.sender]);\n\n        for (uint256 i = stakerToRunner[msg.sender].length; i > 0; i--) {\n            uint256 id = stakerToRunner[msg.sender][i - 1];\n            _satoshiRunnersContract.transferFrom(address(this), msg.sender, id);\n            stakerToRunner[msg.sender].pop();\n            runnersStaker[id] = address(0);\n            totalRewards += getReward(id);\n        }\n\n        for (uint256 j = stakerToBabies[msg.sender].length; j > 0; j--) {\n            uint256 id = stakerToBabies[msg.sender][j - 1];\n            _satoshiRunnersBabiesContract.transferFrom(address(this), msg.sender, id);\n            stakerToBabies[msg.sender].pop();\n            babiesStaker[id] = address(0);\n        }\n\n        totalRewards += (bonus * totalRewards) / 100;\n        totalRewards += babiesReward;\n\n        userStakedNFTs[msg.sender].hackerRunnersStaked = 0;\n        userStakedNFTs[msg.sender].runnersStaked = 0;\n        userStakedNFTs[msg.sender].hackerBabiesStaked = 0;\n        userStakedNFTs[msg.sender].babiesStaked = 0;\n\n        require(_stakingPool.transfer(msg.sender, totalRewards), \"StakingPool: transfer out of staking pool failed due to inssuficient funds in the staking pool\");\n    }\n\n    function claimAll() external nonReentrant {\n        uint256 totalRewards = 0;\n\n        //calculate bonus\n        uint256 bonus = _getBonus(msg.sender);\n        uint256 babiesBonus = getBabiesReward(userStakedNFTs[msg.sender], stakerToBabies[msg.sender]);\n\n        uint256[] memory runnersTokens = stakerToRunner[msg.sender];\n        uint256[] memory babiesTokens = stakerToBabies[msg.sender];\n\n        for (uint256 i = 0; i < runnersTokens.length; i++) {\n            uint256 id = runnersTokens[i];\n\n            totalRewards += getReward(id);\n            runnersTimeStaked[id] = block.timestamp;\n        }\n\n        for (uint256 j = 0; j < babiesTokens.length; j++) {\n            uint256 id = babiesTokens[j];\n\n            babiesTimeStaked[id] = block.timestamp;\n        }\n\n        totalRewards += (bonus * totalRewards) / 100;\n        totalRewards += babiesBonus;\n\n        require(_stakingPool.transfer(msg.sender, totalRewards), \"StakingPool: transfer out of staking pool failed due to inssuficient funds in the staking pool\");\n    }\n    \n    function toggle() external onlyOwner {\n        live = !live;\n    }\n    \n    function getBabiesReward(stakedNFTs memory userNFTs, uint256[] memory userBabies) internal view returns(uint256) {\n        uint256 babiesTotalReward = 0;\n        uint16 babiesCount = 0;\n        for(uint16 counter = 0; counter < userBabies.length; counter++) {\n            if(checkIfHackerBaby(userBabies[counter])) {\n                babiesTotalReward += getBabyDayCount(userBabies[counter]) * LEGENDARY_BABIES_EMISSION_RATE;\n            }\n        }\n        if(userNFTs.babiesStaked > 0) {\n            if(userNFTs.hackerRunnersStaked > 0) {\n                for(uint16 i = 0; i < userNFTs.hackerRunnersStaked; i++) {\n                    if (userNFTs.babiesStaked >= 2) {\n                        babiesTotalReward += 20 * (getBabyDayCount(userBabies[babiesCount]) + getBabyDayCount(userBabies[babiesCount+1]));\n                        babiesCount+=2;\n                        userNFTs.babiesStaked-=2;\n                    } else if(userNFTs.babiesStaked == 1) {\n                        babiesTotalReward += 20 * getBabyDayCount(userBabies[babiesCount]);\n                        babiesCount++;\n                        userNFTs.babiesStaked--;\n                    }\n                }\n            }\n            if(userNFTs.hackerBabiesStaked > 0) {\n                for (uint16 j = 0; j < userNFTs.hackerBabiesStaked; j++) {\n                    if (userNFTs.babiesStaked >= 2) {\n                        babiesTotalReward += 5 * (getBabyDayCount(userBabies[babiesCount]) + getBabyDayCount(userBabies[babiesCount+1]));\n                        babiesCount+=2;\n                        userNFTs.babiesStaked-=2;\n                    } else if (userNFTs.babiesStaked == 1) {\n                        babiesTotalReward += 5 * getBabyDayCount(userBabies[babiesCount]);\n                        babiesCount++;\n                        userNFTs.babiesStaked--;\n                    }\n                }\n            }\n            if(userNFTs.runnersStaked > 0) {\n                for(uint16 jj = 0; jj < userNFTs.runnersStaked; jj++) {\n                    if(userNFTs.babiesStaked >= 2) {\n                        babiesTotalReward += 4 * (getBabyDayCount(userBabies[babiesCount]) + getBabyDayCount(userBabies[babiesCount+1]));\n                        babiesCount+=2;\n                        userNFTs.babiesStaked-=2;\n                    } else if (userNFTs.babiesStaked == 1) {\n                        babiesTotalReward += 3 * getBabyDayCount(userBabies[babiesCount]);\n                        babiesCount++;\n                        userNFTs.babiesStaked--;\n                    }\n                }\n            }\n            if (userNFTs.babiesStaked >= 0) {\n                for(uint16 i = 0; i < userNFTs.babiesStaked; i++) {\n                    babiesTotalReward += getBabyDayCount(userBabies[i]) * BABIES_EMISSION_RATE;\n                }\n            }            \n        }\n        return babiesTotalReward * 1 ether;\n    }\n\n    function getBabyDayCount(uint256 tokenId) internal view returns(uint256) {\n        return (block.timestamp - babiesTimeStaked[tokenId]) / 86400;\n    }\n\n    function getReward(uint256 tokenId) internal view returns(uint256) {\n        uint256 EMISSION_RATE;\n        uint256 stakedTime = block.timestamp - runnersTimeStaked[tokenId];\n        uint256 reward;\n        \n        if (checkIfHackerRunner(tokenId)) {\n            EMISSION_RATE = LEGENDARY_EMISSION_RATE;\n        } else {\n            EMISSION_RATE = RUNNERS_EMISSION_RATE;\n        }\n\n        reward = stakedTime * EMISSION_RATE / 86400 * 1 ether; \n        return reward;\n    }\n\n    function checkIfHackerRunner(uint256 tokenId) internal pure returns(bool) {\n        if (tokenId == 0 \n        || tokenId == 1 \n        || tokenId == 2 \n        || tokenId == 417 \n        || tokenId == 1095 \n        || tokenId == 1389\n        || tokenId == 1856 \n        || tokenId == 2563 \n        || tokenId == 6396 \n        || tokenId == 6673) {\n            return true;\n        } \n        return false;\n    }\n\n    function checkIfHackerBaby(uint256 tokenId) internal pure returns(bool) {\n        if (tokenId == 0 \n        || tokenId == 33 \n        || tokenId == 321 \n        || tokenId == 496 \n        || tokenId == 701 \n        || tokenId == 1309 \n        || tokenId == 1410 \n        || tokenId == 1707 \n        || tokenId == 2014 \n        || tokenId == 3410) {\n            return true;\n        } \n        return false;\n    }\n\n    function removeTokenIdFromArray(uint256[] storage array, uint256 tokenId) internal {\n        uint256 length = array.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (array[i] == tokenId) {\n                length--;\n                if (i < length) {\n                    array[i] = array[length];\n                }\n                array.pop();\n                break;\n            }\n        }\n    }\n\n    function _getBonus(address staker) internal view returns (uint256 bonus) {\n        uint256 balance = getStakedAmount(staker);\n\n        if (balance < 5) return 0;\n        if (balance < 10) return 10;    //10\n        if (balance < 20) return 25;    //25\n        return 50;                     //50\n    }\n\n    /**\n     * @dev This funcion allows the contract owner to add more locked distribution tokens\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n     */\n    function lockTokens(uint256 amount) external onlyOwner {\n        require(_stakingPool.token().transferFrom(msg.sender, address(_stakingPool), amount),\n            \"TokenGeyser: transfer into locked pool failed\");\n        emit TokensLocked(amount);\n    }\n\n    /**\n     * @return The token users deposit as stake.\n     */\n    function getStakingToken() public view returns (IERC20) {\n        return _stakingPool.token();\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}