<\contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public payable {
        uint totalCost = _amount * tokenPrice;
        require(msg.value >= totalCost, "Insufficient ether sent");

        token.transfer(msg.sender, _amount);
        owner.transfer(totalCost);

        if (msg.value > totalCost) {
            msg.sender.transfer(msg.value - totalCost);
        }
    }
}
<\contract\> 

Output:
- potential vulnerabilities:
1) integer overflow/underflow
2) ether leakage