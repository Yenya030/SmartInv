<\contract_to_analyze\>
contract Crowdsale {
         address public token;
         address public wallet;
         uint public rate;
         uint public weiRaised;
         event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint value, uint amount);

         constructor(uint _rate, address _wallet, address _token) {
             require(_rate > 0);
             require(_wallet != address(0));
             require(_token != address(0));

             rate = _rate;
             wallet = _wallet;
             token = _token;
         }

         function buyTokens(address beneficiary) public payable {
             require(beneficiary != address(0));
             require(msg.value != 0);

             uint tokenAmount = msg.value * rate;
             require(ERC20(token).balanceOf(address(this)) >= tokenAmount);

             weiRaised += msg.value;
             ERC20(token).transfer(beneficiary, tokenAmount);
             emit TokensPurchased(msg.sender, beneficiary, msg.value, tokenAmount);
         }
}
<\contract_to_analyze\>