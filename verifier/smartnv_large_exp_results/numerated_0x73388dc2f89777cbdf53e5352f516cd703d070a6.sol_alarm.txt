<\your_contract\>
contract TokenSale {
    address public tokenAddress;
    address public admin;
    uint public tokenPrice;
    uint public totalTokens;
    uint public tokensSold;

    mapping(address => uint) public tokenBalances;

    constructor(address _tokenAddress, uint _tokenPrice, uint _totalTokens) {
        tokenAddress = _tokenAddress;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
        admin = msg.sender;
    }

    function buyTokens(uint _numTokens) public payable {
        require(tokensSold + _numTokens <= totalTokens, "Not enough tokens available for sale");
        uint cost = _numTokens * tokenPrice;
        require(msg.value >= cost, "Insufficient payment for tokens");

        ERC20(tokenAddress).transfer(msg.sender, _numTokens);
        tokenBalances[msg.sender] += _numTokens;
        tokensSold += _numTokens;
    }

    function withdrawTokens() public {
        uint balance = tokenBalances[msg.sender];
        tokenBalances[msg.sender] = 0;
        ERC20(tokenAddress).transfer(msg.sender, balance);
    }

    function withdrawEther() public {
        require(msg.sender == admin, "Only the admin can withdraw Ether");
        payable(admin).transfer(address(this).balance);
    }
}
<\your_contract\>