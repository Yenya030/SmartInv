Contract to analyze:
contract VotingSystem {
     struct Voter {
          uint256 weight; 
          bool voted; 
          address delegate; 
          uint256 vote; 
          }
     struct Proposal {
          uint256 voteCount;
          string proposalText; 
          }

     address public chairperson;
     mapping(address => Voter) public voters;
     Proposal[] public proposals;

    constructor() {
         chairperson = msg.sender;
         voters[chairperson].weight = 1;
     }

     function giveRightToVote(address voter) public {
         require(msg.sender == chairperson, "Only chairperson can give right to vote.");
         require(!voters[voter].voted, "The voter already voted.");
         require(voters[voter].weight == 0);
         voters[voter].weight = 1;
     }

     function delegate(address to) public {
         Voter storage sender = voters[msg.sender];
         require(!sender.voted, "You already voted.");

         while (voters[to].delegate != address(0) && voters[to].delegate != msg.sender) {
             to = voters[to].delegate;
         }

         require(to != msg.sender, "Delegation loop detected.");

         sender.voted = true;
         sender.delegate = to;
         Voter storage delegateTo = voters[to];

         if (delegateTo.voted) {
             proposals[delegateTo.vote].voteCount += sender.weight;
         } else {
             delegateTo.weight += sender.weight;
         }
     }

     function vote(uint256 proposal) public {
         Voter storage sender = voters[msg.sender];
         require(sender.weight != 0, "You don't have right to vote.");
         require(!sender.voted, "You already voted.");
         sender.voted = true;
         sender.vote = proposal;
         proposals[proposal].voteCount += sender.weight;
     }
}