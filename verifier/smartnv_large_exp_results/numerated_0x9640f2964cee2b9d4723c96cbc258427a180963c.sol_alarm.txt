<\contract\> 
contract StockMarket {
         IERC20 public stockToken;
         IERC20 public stableToken;
         mapping(address => uint) public stockBalance;
         mapping(address => uint) public stableBalance;

         function buyStock(uint amount) public {
             uint price = getCurrentPrice();
             uint totalCost = price * amount;
             require(stableBalance[msg.sender] >= totalCost, "insufficient funds");

             stockToken.transfer(msg.sender, amount);
             stableToken.transferFrom(msg.sender, address(this), totalCost);
             stockBalance[msg.sender] += amount;
             stableBalance[msg.sender] -= totalCost;
         }

         function sellStock(uint amount) public {
             require(stockBalance[msg.sender] >= amount, "insufficient stock balance");

             uint price = getCurrentPrice();
             uint totalEarning = price * amount;
             stockToken.transferFrom(msg.sender, address(this), amount);
             stableToken.transfer(msg.sender, totalEarning);
             stockBalance[msg.sender] -= amount;
             stableBalance[msg.sender] += totalEarning;
         }

         function getCurrentPrice() public view returns (uint) {
             return (stockBalance[address(this)] / stableBalance[address(this)]);
         }
}
<\contract\>