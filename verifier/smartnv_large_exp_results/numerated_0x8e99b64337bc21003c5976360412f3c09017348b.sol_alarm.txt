<\contract\> 
contract SecurePayment {
         address public owner;
         uint public totalBalance;

         constructor(){
             owner = msg.sender;
             totalBalance = 0;
         }

         function deposit() public payable {
             totalBalance += msg.value;
         }

         function withdraw(uint amount) public {
             require(msg.sender == owner, "Only owner can withdraw funds");
             require(totalBalance >= amount, "Insufficient funds");
             totalBalance -= amount;
             payable(msg.sender).transfer(amount);
         }
}
<\contract\> 

The potential vulnerabilities in the contract are:
1) Incorrect visibility/ownership: The owner variable is public which exposes it to being changed by anyone. This can lead to privilege escalation.
2) Inconsistent state update: The totalBalance is being directly updated without considering the potential reentrancy issues.
3) Insufficient gas: The contract does not handle gas limitations, which can lead to transactions failing if they require too much gas.