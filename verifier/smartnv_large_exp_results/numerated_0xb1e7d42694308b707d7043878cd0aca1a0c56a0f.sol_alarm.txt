<\Contract\>
contract Marketplace {
    address public owner;
    mapping(uint => Product) public products;
    uint public productCount;

    struct Product {
        string name;
        uint price;
        uint quantity;
        address seller;
        bool isAvailable;
    }

    constructor() {
        owner = msg.sender;
    }

    function addProduct(string memory _name, uint _price, uint _quantity) public {
        require(msg.sender == owner, "Only owner can add products");
        productCount++;
        products[productCount] = Product(_name, _price, _quantity, msg.sender, true);
    }

    function buyProduct(uint _productId, uint _quantity) public payable {
        require(products[_productId].isAvailable, "Product is not available");
        require(products[_productId].quantity >= _quantity, "Not enough quantity available");
        require(msg.value >= products[_productId].price * _quantity, "Insufficient payment");

        products[_productId].quantity -= _quantity;
        products[_productId].seller.transfer(msg.value);
    }

    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        msg.sender.transfer(address(this).balance);
    }
}
<\Contract\>