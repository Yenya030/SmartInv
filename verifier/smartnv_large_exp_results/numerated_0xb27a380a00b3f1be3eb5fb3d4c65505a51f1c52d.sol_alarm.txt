<\Provided contract\> 
contract TokenSale {
     IERC20 public token;
     address public owner;
     uint public tokenPrice;
     mapping(address => uint) public balances;
     
     constructor(address _token, uint _tokenPrice) {
         token = IERC20(_token);
         owner = msg.sender;
         tokenPrice = _tokenPrice;
     }
     
     function buyTokens(uint _amount) public {
         require(token.balanceOf(address(this)) >= _amount * tokenPrice, "Not enough tokens available for purchase");
         
         uint cost = _amount * tokenPrice;
         token.transfer(msg.sender, _amount);
         balances[msg.sender] += _amount;
         balances[owner] -= _amount;
     }
} 

Output: 
1) Inconsistent state update
2) Insufficient gas