The contract provided for analysis is:

contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;

    constructor(IERC20 _token, uint _tokenPrice) {
        token = _token;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        uint totalCost = _amount * tokenPrice;
        token.transferFrom(msg.sender, address(this), totalCost);
        token.transfer(msg.sender, _amount);
    }

    function withdrawFunds() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }
}

Potential vulnerabilities in the TokenSale contract:
- Incorrect visibility/ownership: The withdrawFunds function allows any caller to withdraw funds as long as they provide the owner's address. This could lead to unauthorized withdrawals.
- Insufficient gas: If the contract balance grows too large, the withdrawFunds function may run out of gas during the transfer of funds, leaving the contract in an inconsistent state.
- Atomicity violation: The buyTokens function does not use a single atomic operation to transfer tokens and receive payment, leaving room for inconsistencies in the exchange process.