<\contract\>
contract TokenSale {
     address public admin;
     IERC20 public token;
     uint public tokenPrice;
     mapping(address => uint) public balances;

     constructor(IERC20 _token, uint _tokenPrice) {
         admin = msg.sender;
         token = _token;
         tokenPrice = _tokenPrice;
     }

     function buyTokens(uint _amount) public {
         require(balances[msg.sender] + _amount >= balances[msg.sender], "Integer overflow");
         uint totalCost = tokenPrice * _amount;
         require(token.balanceOf(msg.sender) >= totalCost, "Insufficient funds");
         token.transferFrom(msg.sender, address(this), totalCost);
         balances[msg.sender] += _amount;
     }

     function withdrawTokens(uint _amount) public {
         require(balances[msg.sender] >= _amount, "Insufficient balance");
         balances[msg.sender] -= _amount;
         token.transfer(msg.sender, _amount);
     }
}
<\contract\>