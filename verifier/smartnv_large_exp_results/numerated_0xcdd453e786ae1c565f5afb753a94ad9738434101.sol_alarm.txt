<\contract\>
contract MultiSigWallet {
    address[] public owners;
    uint public transactionCount;
    mapping(uint => Transaction) public transactions;

    struct Transaction {
        address destination;
        uint value;
        bytes data;
        bool executed;
    }

    modifier onlyOwner {
        require(isOwner(msg.sender));
        _;
    }

    function isOwner(address owner) public view returns(bool) {
        for(uint i=0; i<owners.length; i++) {
            if(owners[i] == owner) {
                return true;
            }
        }
        return false;
    }

    function submitTransaction(address destination, uint value, bytes memory data) public onlyOwner {
        Transaction memory newTransaction = Transaction({
            destination: destination,
            value: value,
            data: data,
            executed: false
        });
        transactions[transactionCount] = newTransaction;
        transactionCount++;
    }

    function executeTransaction(uint transactionId) public onlyOwner {
        Transaction storage transaction = transactions[transactionId];
        require(!transaction.executed, "Transaction already executed");
        transaction.executed = true;
        (bool success, ) = transaction.destination.call{value: transaction.value}(transaction.data);
        require(success, "Transaction execution failed");
    }

    function addOwner(address newOwner) public onlyOwner {
        require(!isOwner(newOwner), "Address is already an owner");
        owners.push(newOwner);
    }

    function removeOwner(address owner) public onlyOwner {
        require(isOwner(owner), "Address is not an owner");
        for(uint i=0; i<owners.length; i++) {
            if(owners[i] == owner) {
                delete owners[i];
                break;
            }
        }
    }
}
<\contract\>