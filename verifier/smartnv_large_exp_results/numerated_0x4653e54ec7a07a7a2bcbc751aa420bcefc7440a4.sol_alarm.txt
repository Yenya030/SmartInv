<\contract\>
contract VotingSystem {
     struct Proposal {
          uint256 startTime; 
          uint256 votedAmount; 
          address proposer; 
          }
     address public owner;
     IERC20 public votingToken;
     mapping(address => uint256) public startingBalanceList;
     Proposal public proposal;

    function startVoting() external {
              require(proposal.startTime == 0,"voting is already ongoing");
              proposal = Proposal(block.timestamp, 0, msg.sender);
              uint256 startingBalance = getStartingBalance(proposal.proposer);
              startingBalanceList[proposal.proposer] = startingBalance; 
        }

    function vote(uint256 amount) external {
              require(proposal.startTime != 0, "voting hasn't started yet");
              require(proposal.startTime + 24 > block.timestamp, "voting period has ended");
              require(proposal.votedAmount + amount <= startingBalanceList[proposal.proposer], "exceeded voting balance");
              votingToken.transferFrom(msg.sender, address(this), amount);
              proposal.votedAmount += amount; 
        }

    function endVoting() external {
              require(proposal.startTime != 0, "no active voting");
              require(proposal.startTime + 24 < block.timestamp, "voting period has not ended");
              require(votingToken.balanceOf(address(this)) * 2 > votingToken.totalSupply(), "voting failed");
        }
}
<\contract\>