<\analyzed_contract\>
contract VotingSystem {
     struct Proposal {
          uint256 startTime; 
          uint256 endTime; 
          uint256 votes; 
          address proposer; 
          }
     address public owner;
     mapping(uint256 => Proposal) public proposals;
     mapping(address => uint256) public votingPower;

     modifier onlyOwner() {
         require(msg.sender == owner, "Only owner can call this function");
         _;
     }

     function createProposal(uint256 id, uint256 start, uint256 end) public {
          require(proposals[id].startTime == 0, "Proposal already exists");
          Proposal memory newProposal = Proposal(start, end, 0, msg.sender);
          proposals[id] = newProposal;
     }

     function vote(uint256 id) public {
          require(block.timestamp >= proposals[id].startTime, "Voting has not started yet");
          require(block.timestamp <= proposals[id].endTime, "Voting has ended");
          require(votingPower[msg.sender] > 0, "No voting power");
          proposals[id].votes += votingPower[msg.sender];
     }

     function setVotingPower(address voter, uint256 power) public onlyOwner {
          votingPower[voter] = power;
     }
}
<\analyzed_contract\>