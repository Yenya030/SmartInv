<\analyzed_contract\> 
contract MultiSigWallet {
    mapping(address => uint256) public nonces; 
    uint256 private constant threshold = 2; 
    address[] public owners; 
    mapping(uint256 => mapping(address => bool)) public signed; 
    uint256 public transactionCount; 
    address public admin; 

    function submitTransaction(address destination, uint256 value, bytes memory data) public {
        require(owners.length >= threshold, "threshold not met");
        uint256 nonce = nonces[msg.sender]++;
        signed[nonce][msg.sender] = true;
        transactionCount++;
        emit TransactionCreated(nonce, destination, value, data);
    }

    function executeTransaction(uint256 nonce, address destination, uint256 value, bytes memory data, bytes memory signature) public {
        require(signed[nonce][msg.sender], "not signed by owner");
        require(signed[nonce][admin], "not signed by admin");
        require(address(this).balance >= value, "insufficient balance");
        require(destination.call.value(value)(data), "transaction failed");
        emit TransactionExecuted(nonce, destination, value, data);
    }
}