The contract provided for analysis:

contract MultiSigWallet {
    address public owner;
    mapping(address => uint) public balances;
    
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
    }

    function transferOwnership(address newOwner) public {
        require(msg.sender == owner, "You are not the owner");
        owner = newOwner;
    }
}

Potential vulnerabilities in the contract:
4) inconsistent state update
7) ID uniqueness violation
8) reentrancy
14) incorrect visibility/ownership