Contract to analyze:

contract TokenSale {
         address public tokenAddress;
         address public owner;
         uint public tokenPrice;
         mapping(address => uint) public balances;

         constructor(address _tokenAddress, uint _tokenPrice) {
             tokenAddress = _tokenAddress;
             owner = msg.sender;
             tokenPrice = _tokenPrice;
         }
         
         function buyTokens(uint _amount) public payable {
             require(msg.value == _amount * tokenPrice, "Incorrect payment amount");
             require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, "Not enough tokens available");
             
             balances[msg.sender] += _amount;
             IERC20(tokenAddress).transfer(msg.sender, _amount);
         }
         
         function withdraw() public {
             require(msg.sender == owner, "Only owner can withdraw funds");
             payable(owner).transfer(address(this).balance);
         }
}
Potential vulnerabilities:
- Incorrect visibility/ownership