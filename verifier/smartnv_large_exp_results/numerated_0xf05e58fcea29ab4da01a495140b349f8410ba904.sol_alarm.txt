<\contract\>
contract TokenSale {
    address public tokenAddress;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    mapping(address => uint) public tokenBalances;

    constructor(address _tokenAddress, uint _tokenPrice, uint _totalTokens) public {
        tokenAddress = _tokenAddress;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _numTokens) public payable {
        require(_numTokens <= totalTokens, "Not enough tokens available");
        uint totalPrice = _numTokens * tokenPrice;
        require(msg.value >= totalPrice, "Insufficient funds sent");

        totalTokens -= _numTokens;
        tokenBalances[msg.sender] += _numTokens;

        (bool success, ) = tokenAddress.call(abi.encodeWithSignature("transfer(address,uint256)", msg.sender, _numTokens));
        require(success, "Token transfer failed");
    }

    function withdraw() public {
        require(msg.sender == owner, "Only the owner can withdraw");
        address payable _owner = address(uint160(owner));
        _owner.transfer(address(this).balance);
    }
}
<\contract\>