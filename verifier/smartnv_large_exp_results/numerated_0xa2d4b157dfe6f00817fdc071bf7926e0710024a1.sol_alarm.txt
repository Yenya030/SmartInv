<\contract_to_analyze\>
contract VotingSystem {
     struct Voter {
          uint256 weight;
          bool voted;
          address delegate;
          uint256 vote;
          uint256 tokenBalance;
          }
     address public chairperson;
     mapping(address => Voter) public voters;

    function delegate(address to) public {
          Voter storage sender = voters[msg.sender];
          require(!sender.voted, "You have already voted");
          require(to != msg.sender, "Self-delegation is disallowed");

          while (voters[to].delegate != address(0)) {
              to = voters[to].delegate;
          }
          sender.voted = true;
          sender.delegate = to;
          Voter storage delegateTo = voters[to];
          if (delegateTo.voted) {
              delegateTo.tokenBalance += sender.tokenBalance;
          } else {
              delegateTo.weight += sender.tokenBalance;
          }
      }
    
    function vote(uint256 proposal) public {
          Voter storage sender = voters[msg.sender];
          require(sender.weight > 0, "You don't have any voting weight");
          require(!sender.voted, "Already voted.");
          sender.voted = true;
          sender.vote = proposal;
      }

    function tallyVotes() public returns (uint256 winningProposal){
          require(msg.sender == chairperson, "Only chairperson can tally votes");
          uint256 maxVote = 0;
          for (uint256 p = 0; p < proposalList.length; p++) {
              if (proposalVoteCount[p] > maxVote) {
                  maxVote = proposalVoteCount[p];
                  winningProposal = p;
              }
          }
      }
}
<\contract_to_analyze\>