<\contract\>
contract Escrow {
    address public buyer;
    address payable public seller;
    address public arbiter;
    uint public productId;
    uint public price;
    enum State { Created, Locked, Inactive }
    State public state;

    constructor(address _buyer, address payable _seller, address _arbiter, uint _productId, uint _price) {
        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
        productId = _productId;
        price = _price;
        state = State.Created;
    }

    modifier onlyBuyer() {
        require(msg.sender == buyer, "Only buyer can call this.");
        _;
    }

    modifier inState(State _state) {
        require(state == _state, "Invalid state.");
        _;
    }

    function escrowAmount() public onlyBuyer inState(State.Created) payable {
        require(msg.value == price, "Incorrect amount sent.");
        state = State.Locked;
    }

    function confirmReceived() public onlyBuyer inState(State.Locked) {
        seller.transfer(price);
        state = State.Inactive;
    }

    function refundBuyer() public onlyBuyer inState(State.Locked) {
        buyer.transfer(price);
        state = State.Inactive;
    }
}
<\contract\>