<\example_3\> 
contract PaymentContract {
         uint public totalAmount;
         mapping(address => uint) public balances;
         
         function pay() public payable {
            balances[msg.sender] += msg.value;
            totalAmount += msg.value;
         }
         
         function withdraw() public {
            require(balances[msg.sender] > 0, "Insufficient balance to withdraw");
            uint amount = balances[msg.sender];
            balances[msg.sender] = 0;
            msg.sender.transfer(amount);
            totalAmount -= amount;
         }
}
Potential vulnerabilities:
- Integer overflow/underflow in totalAmount calculation.
- Insufficient gas for the withdrawal function, especially if the contract's totalAmount grows significantly.
- Incorrect visibility/ownership for the balances mapping, which might expose sensitive information.