<\contract\>
contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    mapping(address => uint) public tokenBalance;

    constructor(IERC20 _token, uint _tokenPrice, uint _totalTokens) {
        token = _token;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _amount) public {
        require(tokenBalance[msg.sender] + _amount <= totalTokens, "Not enough tokens available");
        uint cost = _amount * tokenPrice;
        token.transferFrom(msg.sender, address(this), cost);
        tokenBalance[msg.sender] += _amount;
    }

    function withdrawTokens() public {
        require(msg.sender == owner, "Only the owner can withdraw tokens");
        token.transfer(owner, token.balanceOf(address(this)));
    }
}
<\contract\>