<\contract_to_analyze\>
contract VotingSystem {
     struct Voter {
          uint256 weight; 
          bool voted; 
          address delegate; 
          uint256 votedProposalId; 
          bool initialized; 
          }
     mapping(address => Voter) public voters; 
     mapping(uint256 => Proposal) public proposals; 
     uint256 public numProposals; 

     function initializeVoter(address _voter) external {
          require(!voters[_voter].initialized, "voter already initialized"); 
          voters[_voter].weight = 1; 
          voters[_voter].initialized = true; 
     }

     function vote(address _proposal, uint256 _voterWeight) external {
          Voter storage sender = voters[msg.sender];
          require(!sender.voted, "already voted");
          sender.voted = true;
          sender.votedProposalId = _proposal;
          proposals[_proposal].voteCount += _voterWeight;
     }

     function submitProposal(uint256 _voteThreshold) external {
          uint256 proposalId = numProposals++;
          proposals[proposalId] = Proposal(0, _voteThreshold);
     }

     function executeProposal(uint256 _proposalId) external {
          require(proposals[_proposalId].voteCount > proposals[_proposalId].requiredVotes, "not enough votes");
          // execute proposal logic
     }
}
<\contract_to_analyze\>