<\analyzed_contract\>
contract Escrow {
    address public buyer;
    address public seller;
    address public arbiter;
    uint public price;
    enum State {AWAITING_PAYMENT, AWAITING_DELIVERY, COMPLETE, REFUNDED}
    State public currentState;

    constructor(address _seller, address _arbiter, uint _price) {
        buyer = msg.sender;
        seller = _seller;
        arbiter = _arbiter;
        price = _price;
        currentState = State.AWAITING_PAYMENT;
    }

    function makePayment() public payable {
        require(msg.sender == buyer, "Only the buyer can make the payment");
        require(msg.value == price, "Incorrect payment amount");
        currentState = State.AWAITING_DELIVERY;
    }

    function confirmDelivery() public {
        require(msg.sender == buyer || msg.sender == seller, "Only the buyer or seller can confirm delivery");
        require(currentState == State.AWAITING_DELIVERY, "Cannot confirm delivery at this state");
        currentState = State.COMPLETE;
        seller.transfer(price);
    }

    function refundPayment() public {
        require(msg.sender == buyer || msg.sender == arbiter, "Only the buyer or arbiter can initiate a refund");
        require(currentState == State.AWAITING_DELIVERY, "Cannot refund payment at this state");
        currentState = State.REFUNDED;
        buyer.transfer(price);
    }
}
<\analyzed_contract\>