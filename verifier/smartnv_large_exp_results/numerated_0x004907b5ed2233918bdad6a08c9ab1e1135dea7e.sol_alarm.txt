<\analyzed_contract\>
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;
    mapping(address => uint) public tokenBalances;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _tokenAmount) public {
        uint totalCost = _tokenAmount * tokenPrice;
        require(token.balanceOf(msg.sender) >= totalCost, "Insufficient balance");
        token.transferFrom(msg.sender, owner, _tokenAmount);
        tokenBalances[msg.sender] += _tokenAmount;
        totalTokensSold += _tokenAmount;
    }

    function withdrawTokens() public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        uint balance = token.balanceOf(address(this));
        token.transfer(owner, balance);
        totalTokensSold = 0;
    }
}
<\analyzed_contract\>