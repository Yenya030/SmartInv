<\contract\> 
contract Crowdsale {
     address public owner;
     IERC20 public token;
     uint public tokenPrice;
     uint public totalTokens;
     mapping(address => uint) public balances;

     constructor(address _tokenAddress, uint _price, uint _total) public {
          owner = msg.sender;
          token = IERC20(_tokenAddress);
          tokenPrice = _price;
          totalTokens = _total;
     }

     function buyTokens(uint _amount) public {
          require(balances[msg.sender] + _amount <= totalTokens, "Exceeds total token limit");
          uint totalPrice = _amount * tokenPrice;
          token.transferFrom(msg.sender, address(this), _amount);
          balances[msg.sender] += _amount;
          owner.transfer(totalPrice);
     }

     function withdrawTokens(uint _amount) public {
          require(balances[msg.sender] >= _amount, "Insufficient balance");
          balances[msg.sender] -= _amount;
          token.transfer(msg.sender, _amount);
     }

}
<\contract\>