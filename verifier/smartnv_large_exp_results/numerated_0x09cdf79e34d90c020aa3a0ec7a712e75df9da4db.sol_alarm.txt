<\contract\> 
contract TokenExchange {
         IERC20 public tokenA;
         IERC20 public tokenB;
         address public owner;

         constructor(address _tokenA, address _tokenB) {
              tokenA = IERC20(_tokenA);
              tokenB = IERC20(_tokenB);
              owner = msg.sender;
         }

         function exchange(uint amountA) public {
              require(tokenA.balanceOf(msg.sender) >= amountA, "Insufficient balance of tokenA");
              tokenA.transferFrom(msg.sender, address(this), amountA);
              uint amountB = calculateExchangeAmount(amountA);
              tokenB.transfer(msg.sender, amountB);
         }

         function calculateExchangeAmount(uint amount) internal view returns (uint) {
              return amount * tokenB.balanceOf(address(this)) / tokenA.balanceOf(address(this));
         }
} 

<\potential_vulnerabilities\>
1) incorrect visibility/ownership
2) integer overflow/underflow