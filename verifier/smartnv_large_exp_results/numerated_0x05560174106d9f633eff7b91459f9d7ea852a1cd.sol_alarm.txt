<\contract_3\>
contract PaymentContract {
    address public owner;
    mapping(address => uint) public balances;
    uint public totalBalance;

    constructor() {
        owner = msg.sender;
        totalBalance = 0;
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        totalBalance += msg.value;
    }

    function withdraw(uint amount) public {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(amount <= balances[msg.sender], "Insufficient balance");
        balances[msg.sender] -= amount;
        totalBalance -= amount;
        payable(msg.sender).transfer(amount);
    }

    function getBalance(address user) public view returns (uint) {
        return balances[user];
    }

    function getTotalBalance() public view returns (uint) {
        return totalBalance;
    }
}
<\contract_3\>