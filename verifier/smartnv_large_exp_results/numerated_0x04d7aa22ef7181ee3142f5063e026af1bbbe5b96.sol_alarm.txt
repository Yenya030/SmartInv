<\contract\>
contract TokenSale {
    address public owner;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(uint _tokenPrice) {
        owner = msg.sender;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(balances[msg.sender] >= _amount * tokenPrice, "Insufficient balance");
        balances[msg.sender] -= _amount * tokenPrice;
    }
}
<\contract\>

1) integer overflow/underflow
2) inconsistent state update