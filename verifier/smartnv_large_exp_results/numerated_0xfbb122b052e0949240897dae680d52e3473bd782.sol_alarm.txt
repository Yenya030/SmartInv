The contract for analysis: 

contract Escrow {
     address public buyer; 
     address public seller; 
     address public arbiter;
     uint public escrowAmount;

     function payment() public {
         require(msg.sender == buyer, "only buyer can make payment");
         escrowAmount = escrowAmount * 2;
     }

     function releasePayment() public {
         require(msg.sender == arbiter, "only arbiter can release payment");
         seller.transfer(escrowAmount);
     }
}

Potential vulnerabilities in the Escrow contract:
1) Arithmetic flaw - multiplying escrowAmount by 2 in the payment function could lead to an arithmetic overflow if the amount is already at the maximum value.
2) Incorrect visibility/ownership - lack of access control in the payment and releasePayment functions could allow unauthorized parties to execute these functions.
3) Inconsistent state update - modifying escrowAmount in the payment function without proper validation could lead to an inconsistent state of the contract.