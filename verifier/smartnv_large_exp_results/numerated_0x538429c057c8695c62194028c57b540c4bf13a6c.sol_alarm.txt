The contract for analysis:

contract Escrow {
    address public buyer;
    address public seller;
    address public arbiter;
    uint public price;
    uint public arbiterFee;
    enum State {AWAITING_PAYMENT, AWAITING_DELIVERY, COMPLETE}
    State public currentState;

    constructor(address _buyer, address _seller, address _arbiter, uint _price, uint _arbiterFee) {
        buyer = _buyer;
        seller = _seller;
        arbiter = _arbiter;
        price = _price;
        arbiterFee = _arbiterFee;
        currentState = State.AWAITING_PAYMENT;
    }

    function makePayment() public payable {
        require(msg.sender == buyer, "You are not the buyer");
        require(msg.value == price, "Incorrect payment amount");
        currentState = State.AWAITING_DELIVERY;
    }

    function confirmDelivery() public {
        require(msg.sender == buyer || msg.sender == seller, "You are not authorized");
        require(currentState == State.AWAITING_DELIVERY, "Incorrect state");
        seller.transfer(price + arbiterFee);
        currentState = State.COMPLETE;
    }

    function refundPayment() public {
        require(msg.sender == arbiter, "You are not the arbiter");
        require(currentState == State.AWAITING_DELIVERY, "Incorrect state");
        buyer.transfer(price);
        seller.transfer(arbiterFee);
        currentState = State.COMPLETE;
    }
}

Potential vulnerabilities in the contract:
- Integer overflow/underflow: Possible vulnerabilities related to arithmetic operations with price and arbiterFee variables.
- Incorrect visibility/ownership: The visibility and ownership of functions should be checked to prevent unauthorized access or manipulation.
- Inconsistent state update: Need to ensure that the state is updated consistently and correctly after each function invocation.
- Insufficient gas: Lack of gas for the contract functions to execute properly could be a potential vulnerability.