Contract to analyze:

contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;

    constructor(address _owner, address _token, uint _tokenPrice) {
        owner = _owner;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _numTokens) external payable {
        uint tokenCost = _numTokens * tokenPrice;
        require(msg.value >= tokenCost, "Insufficient funds to buy tokens");
        
        token.transfer(msg.sender, _numTokens);
        totalTokensSold += _numTokens;
    }

    function withdrawTokens(address _to, uint _amount) external {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        
        token.transfer(_to, _amount);
    }
}

Output:
1) price manipulation
2) inconsistent state update
3) incorrect visibility/ownership