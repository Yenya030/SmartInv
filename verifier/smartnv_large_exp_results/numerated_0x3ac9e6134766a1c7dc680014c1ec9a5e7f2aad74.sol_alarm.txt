<\analyzed_contract\> 
contract MultiSigWallet {
    mapping(address => bool) public owners;
    uint public transactionCount;
    mapping(uint => Transaction) public transactions;
    
    struct Transaction {
        address destination;
        uint value;
        bytes data;
        bool executed;
    }
    
    modifier onlyOwner() {
        require(owners[msg.sender], "Not an owner");
        _;
    }
    
    function addOwner(address newOwner) public onlyOwner {
        owners[newOwner] = true;
    }
    
    function removeOwner(address owner) public onlyOwner {
        require(owners[owner], "Not an owner");
        owners[owner] = false;
    }
    
    function submitTransaction(address destination, uint value, bytes memory data) public onlyOwner {
        transactions[transactionCount] = Transaction({
            destination: destination,
            value: value,
            data: data,
            executed: false
        });
        transactionCount++;
    }
    
    function executeTransaction(uint transactionId) public {
        Transaction storage transaction = transactions[transactionId];
        require(!transaction.executed, "Transaction has already been executed");
        (bool success, ) = transaction.destination.call{value: transaction.value}(transaction.data);
        require(success, "Transaction execution failed");
        transaction.executed = true;
    }
}
<\analyzed_contract\> 

Output:
- vulnerable to reentrancy
- vulnerable to inconsistent state update