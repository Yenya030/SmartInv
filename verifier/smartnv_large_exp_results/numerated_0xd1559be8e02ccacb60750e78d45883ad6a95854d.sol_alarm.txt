<\contract_to_analyze\>
contract MultiSigWallet {
    mapping(address => uint8) public owners;
    uint public transactionCount;
    mapping (uint => Transaction) public transactions;

    struct Transaction {
        address destination;
        uint value;
        bytes data;
        bool executed;
    }

    function submitTransaction(address destination, uint value, bytes memory data) public {
        uint transactionId = transactionCount;
        transactions[transactionId] = Transaction({
            destination: destination,
            value: value,
            data: data,
            executed: false
        });
        transactionCount++;
    }

    function executeTransaction(uint transactionId) public {
        Transaction storage transaction = transactions[transactionId];
        require(transaction.executed == false, "Transaction already executed.");
        require(owners[msg.sender] == 1, "Not authorized to execute transaction.");
        
        transaction.executed = true;
        (bool success, ) = transaction.destination.call{value: transaction.value}(transaction.data);
        require(success, "Transaction execution failed.");
    }
}
<\contract_to_analyze\>