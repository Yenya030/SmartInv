contract TokenSale {
    address public admin;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;
    
    constructor(IERC20 _token, uint _tokenPrice) public {
        admin = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }
    
    function buyTokens(uint _amount) public {
        require(token.balanceOf(msg.sender) >= _amount * tokenPrice, "Insufficient balance");
        token.transferFrom(admin, msg.sender, _amount);
        tokensSold += _amount;
    }
    
    function withdrawFunds() public {
        require(msg.sender == admin, "Unauthorized");
        admin.transfer(address(this).balance);
    }
} 

Contract Potential Vulnerabilities:
1) price manipulation
2) inconsistent state update
3) insufficient gas
4) incorrect visibility/ownership