Contract you are going to analyze:

contract PaymentContract {
    address public owner;
    mapping(uint => uint) public payments;

    constructor() {
        owner = msg.sender;
    }

    function makePayment(uint paymentId, uint amount) public {
        require(msg.sender == owner, "Only owner can make payments");
        payments[paymentId] = amount;
    }

    function getPayment(uint paymentId) public view returns (uint) {
        return payments[paymentId];
    }

    function updateOwner(address newOwner) public {
        require(msg.sender == owner, "Only owner can update owner");
        owner = newOwner;
    }
}

Output:
1) privilege escalation
2) inconsistent state update
3) incorrect visibility/ownership