<\analyzed_contract\>
contract TokenSale {
    address public tokenAddress;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    uint public tokensSold;
    
    mapping(address => uint) public balance;
    
    constructor(address _tokenAddress, uint _tokenPrice, uint _totalTokens) {
        tokenAddress = _tokenAddress;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }
    
    function buyTokens(uint _tokenAmount) public payable {
        require(msg.value == _tokenAmount * tokenPrice, "Insufficient funds");
        require(tokensSold + _tokenAmount <= totalTokens, "Not enough tokens left");
        
        IERC20 token = IERC20(tokenAddress);
        token.transfer(msg.sender, _tokenAmount);
        tokensSold += _tokenAmount;
        balance[msg.sender] += _tokenAmount;
    }
    
    function withdrawFunds() public {
        require(msg.sender == owner, "Unauthorized");
        
        payable(owner).transfer(address(this).balance);
    }
}
<\analyzed_contract\>