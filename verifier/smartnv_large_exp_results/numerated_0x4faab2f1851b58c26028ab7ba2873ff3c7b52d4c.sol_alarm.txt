<\analyzed_contract\> 
contract TokenSale {
     uint public tokenPrice;
     uint public totalTokens;
     address public tokenAddress;
     address public owner;

     constructor(address _tokenAddress, uint _totalTokens, uint _tokenPrice) {
         tokenAddress = _tokenAddress;
         totalTokens = _totalTokens;
         tokenPrice = _tokenPrice;
         owner = msg.sender;
     }

     function buyTokens(uint quantity) public payable {
         require(msg.value == quantity * tokenPrice, "Incorrect payment amount");
         require(totalTokens >= quantity, "Not enough tokens left");
         IERC20(tokenAddress).transfer(msg.sender, quantity);
         totalTokens -= quantity;    
     }

     function withdrawTokens(address to, uint amount) public {
         require(msg.sender == owner, "Only owner can withdraw tokens");
         IERC20(tokenAddress).transfer(to, amount);
     }

     function changeTokenPrice(uint newPrice) public {
         require(msg.sender == owner, "Only owner can change token price");
         tokenPrice = newPrice;
     }
}
<\analyzed_contract\> 

The potential vulnerabilities in the contract are:
1) Incorrect visibility/ownership: Certain functions like withdrawTokens and changeTokenPrice do not have proper access control mechanisms based on the owner, which can lead to privilege escalation.
2) Inconsistent state update: The totalTokens variable is directly decremented in the buyTokens function without considering potential concurrent calls, which could lead to inconsistent state updates.
3) Insufficient gas: The contract may run out of gas for certain operations like transferring tokens in the buyTokens function, resulting in transaction failures.