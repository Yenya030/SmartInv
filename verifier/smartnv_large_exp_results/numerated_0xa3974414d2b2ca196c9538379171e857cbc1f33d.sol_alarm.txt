The contract to analyze:

```solidity
contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(IERC20 _token, uint _tokenPrice) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        uint totalCost = _amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= totalCost, "Insufficient balance");
        token.transferFrom(msg.sender, owner, totalCost);
        balances[msg.sender] += _amount;
    }
}
```

Potential Vulnerabilities in the TokenSale contract:
1) price manipulation
2) inconsistent state update
3) integer overflow/underflow