The contract in question is:

```solidity
contract TokenSale {
    IERC20 public token;
    address public owner;
    mapping(address => uint) public balances;
    
    constructor(address _token) {
        token = IERC20(_token);
        owner = msg.sender;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(address(this)) >= _amount, "Not enough tokens in contract");
        token.transfer(msg.sender, _amount);
        balances[msg.sender] += _amount;
    }

    function withdrawTokens(uint _amount) public {
        require(balances[msg.sender] >= _amount, "Not enough tokens in balance");
        token.transfer(msg.sender, _amount);
        balances[msg.sender] -= _amount;
    }
}
```

The potential vulnerabilities in the `TokenSale` contract are:
1) inconsistent state update
2) incorrect visibility/ownership