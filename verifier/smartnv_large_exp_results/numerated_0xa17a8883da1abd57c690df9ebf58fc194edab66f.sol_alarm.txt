<\contract_to_analyze\>
contract TokenSale {
     address public admin;
     IERC20 public token;
     uint public tokenPrice;
     uint public tokensSold;

     mapping(address => uint) public balances;

     constructor(IERC20 _token, uint _tokenPrice) {
         admin = msg.sender;
         token = _token;
         tokenPrice = _tokenPrice;
     }

     function buyTokens(uint _numberOfTokens) public payable {
         require(msg.value == _numberOfTokens * tokenPrice, "Incorrect amount of ether sent");
         require(token.balanceOf(address(this)) >= _numberOfTokens, "Not enough tokens in stock");
         
         balances[msg.sender] += _numberOfTokens;
         tokensSold += _numberOfTokens;
         
         token.transfer(msg.sender, _numberOfTokens);
     }

     function withdrawEther() public {
         require(msg.sender == admin, "Only admin can withdraw ether");
         uint balance = address(this).balance;
         payable(msg.sender).transfer(balance);
     }
}
<\contract_to_analyze\>