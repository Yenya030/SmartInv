<\analyzed_contract\>
contract DecentralizedExchange {
    IERC20 public tokenA;
    IERC20 public tokenB;
    mapping(address => uint) public balances;

    function trade(uint amountA, uint amountB) public {
        require(tokenA.balanceOf(msg.sender) >= amountA, "Insufficient balance for tokenA");
        require(tokenB.balanceOf(msg.sender) >= amountB, "Insufficient balance for tokenB");

        tokenA.transferFrom(msg.sender, address(this), amountA);
        tokenB.transferFrom(msg.sender, address(this), amountB);

        balances[msg.sender] += amountA;
        balances[msg.sender] -= amountB;
    }

    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance for withdrawal");

        balances[msg.sender] -= amount;
        tokenA.transfer(msg.sender, amount);
    }
}
<\analyzed_contract\>