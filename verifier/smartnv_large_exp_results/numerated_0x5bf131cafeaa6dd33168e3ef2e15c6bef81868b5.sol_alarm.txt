<\contract\> 
contract VotingSystem {
    struct Voter {
        uint256 weight;
        bool voted;
        address delegate;
        uint256 vote;
    }

    struct Proposal {
        uint256 voteCount;
    }

    mapping(address => Voter) public voters;
    Proposal[] public proposals;
    address public chairperson;

    constructor() {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
    }

    function delegate(address to) public {
        require(!voters[msg.sender].voted, "You already voted");
        require(to != msg.sender, "Self-delegation is not allowed");

        voters[msg.sender].delegate = to;
        Voter storage delegate_ = voters[to];

        if (delegate_.voted) {
            proposals[delegate_.vote].voteCount += voters[msg.sender].weight;
        } else {
            delegate_.weight += voters[msg.sender].weight;
        }

        voters[msg.sender].weight = 0;
        voters[msg.sender].voted = true;
    }

    function vote(uint256 proposalID) public {
        Voter storage sender = voters[msg.sender];
        require(sender.weight > 0, "You don't have any voting weight");
        require(!sender.voted, "Already voted.");
        
        sender.voted = true;
        sender.vote = proposalID;

        proposals[proposalID].voteCount += sender.weight;
    }

    function winningProposal() public view returns (uint256 winningProposal_) {
        uint256 winningVoteCount = 0;
        for (uint256 p = 0; p < proposals.length; p++) {
            if (proposals[p].voteCount > winningVoteCount) {
                winningVoteCount = proposals[p].voteCount;
                winningProposal_ = p;
            }
        }
    }
}
<\contract\>