<\contract\> 
contract PaymentProcessor {
    address public admin;
    mapping(address => uint256) public balances;

    constructor() {
        admin = msg.sender;
    }

    function pay() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        msg.sender.transfer(amount);
    }

    function changeAdmin(address newAdmin) public {
        require(msg.sender == admin, "Only admin can change admin");
        admin = newAdmin;
    }

    function getBalance(address user) public view returns(uint256) {
        return balances[user];
    }
}
<\contract\> 

The potential vulnerabilities in the contract are:
1) privilege escalation - Since the admin variable can be changed by the changeAdmin function, an unauthorized user could potentially become the new admin.
2) incorrect visibility/ownership - The admin variable is marked as public, which exposes it to the outside world. This could lead to issues with ownership control.