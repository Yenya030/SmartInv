<\contract\>
contract TokenSale {
    IERC20 public token;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;
    mapping(address => uint) public tokenBalances;

    constructor(IERC20 _token, uint _tokenPrice, uint _totalTokens) {
        token = _token;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _amount) public {
        uint cost = _amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= cost, "Insufficient balance");
        token.transferFrom(msg.sender, address(this), cost);
        tokenBalances[msg.sender] += _amount;
        totalTokens -= _amount;
    }

    function withdrawTokens() public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        token.transfer(owner, totalTokens);
        totalTokens = 0;
    }
}
<\contract\>