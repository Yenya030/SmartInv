<\contract_3\>
contract Crowdsale {
     address payable public owner;
     IERC20 public token;
     uint public rate;
     uint public minInvestment;
     uint public maxInvestment;
     uint public endTime;
     mapping(address => uint) public investments;
     
     constructor(IERC20 _token, uint _rate, uint _minInvestment, uint _maxInvestment, uint _endTime) public {
         owner = msg.sender;
         token = _token;
         rate = _rate;
         minInvestment = _minInvestment;
         maxInvestment = _maxInvestment;
         endTime = _endTime;
     }
     
     function invest() public payable {
         require(msg.value >= minInvestment && msg.value <= maxInvestment, "Invalid investment amount");
         require(now < endTime, "Crowdsale has ended");
         uint tokenAmount = msg.value * rate;
         token.transfer(msg.sender, tokenAmount);
         investments[msg.sender] += msg.value;
     }
     
     function withdraw() public {
         require(msg.sender == owner, "Only owner can withdraw funds");
         owner.transfer(address(this).balance);
     }
}
<\contract_3\>