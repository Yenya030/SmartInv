<\contract to analyze\>
contract TokenSale {
    mapping(address => uint256) public balances;
    uint256 public tokenPrice;
    address public owner;
    IERC20 public tokenContract;
    
    constructor(address _tokenContract, uint256 _tokenPrice) public {
        owner = msg.sender;
        tokenContract = IERC20(_tokenContract);
        tokenPrice = _tokenPrice;
    }
    
    function buyTokens(uint256 _amount) public {
        uint256 totalCost = _amount * tokenPrice;
        require(tokenContract.balanceOf(address(this)) >= totalCost, "Insufficient tokens in the contract");
        tokenContract.transfer(msg.sender, _amount);
        balances[msg.sender] += _amount;
    }
    
    function withdrawBalance() public {
        uint256 balance = balances[msg.sender];
        balances[msg.sender] = 0;
        msg.sender.transfer(balance * tokenPrice);
    }
}
<\contract to analyze\>