<\contract\> 
contract ERC20Token {
         string public name;
         string public symbol;
         uint8 public decimals;
         uint256 public totalSupply;

         mapping (address => uint256) public balanceOf;
         mapping (address => mapping (address => uint256)) public allowance;

         event Transfer(address indexed from, address indexed to, uint256 value);
         event Approval(address indexed owner, address indexed spender, uint256 value);

         constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) public {
             totalSupply = initialSupply * 10 ** uint(tokenDecimals);
             balanceOf[msg.sender] = totalSupply;
             name = tokenName;
             symbol = tokenSymbol;
             decimals = tokenDecimals;
         }

         function transfer(address to, uint256 value) public returns (bool) {
             require(to != address(0), "Invalid address");

             balanceOf[msg.sender] -= value;
             balanceOf[to] += value;

             emit Transfer(msg.sender, to, value);
             return true;
         }

         function approve(address spender, uint256 value) public returns (bool) {
             allowance[msg.sender][spender] = value;
             emit Approval(msg.sender, spender, value);
             return true;
         }

         function transferFrom(address from, address to, uint256 value) public returns (bool) {
             require(value <= allowance[from][msg.sender], "Insufficient allowance");
             allowance[from][msg.sender] -= value;

             balanceOf[from] -= value;
             balanceOf[to] += value;

             emit Transfer(from, to, value);
             return true;
         }
}
<\contract\>