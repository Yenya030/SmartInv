<\analyzed_contract\>
contract TokenSale {
     mapping(address => uint) public balances;
     address public owner;
     IERC20 public token;
     uint public tokenPrice;

     constructor(address _tokenAddress, uint _price) {
          owner = msg.sender;
          token = IERC20(_tokenAddress);
          tokenPrice = _price;
     }

     function buyTokens(uint _amount) public payable {
          require(msg.value == _amount * tokenPrice, "Incorrect amount sent");
          token.transfer(msg.sender, _amount);
          balances[msg.sender] += _amount;
     }

     function withdrawEther() public {
          require(msg.sender == owner, "Only owner can withdraw");
          msg.sender.transfer(address(this).balance);
     }

     function updateTokenPrice(uint _newPrice) public {
          require(msg.sender == owner, "Only owner can update price");
          tokenPrice = _newPrice;
     }

     function getBalance() public view returns(uint) {
          return balances[msg.sender];
     }
}
<\analyzed_contract\>