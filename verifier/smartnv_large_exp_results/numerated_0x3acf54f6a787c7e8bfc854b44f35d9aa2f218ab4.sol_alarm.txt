<\contract_to_be_analyzed\>
contract VotingSystem {
     struct Proposal {
          uint256 sTime; 
          uint256 votedAmount; 
          address addr; 
          }
     address internal owner;
     mapping(address => uint256) startingBalanceList;
     Proposal public proposal;
     IERC20 public votingToken;

     function startVoting() external {
          require(proposal.sTime == 0, "voting already in progress");
          proposal = Proposal(block.timestamp, 0, msg.sender);
          uint256 startingBalance = getStartingBalance(proposal.addr);
          startingBalanceList[proposal.addr] = startingBalance; 
     }

     function vote(uint256 amount) external {
          require(proposal.sTime != 0, "no ongoing voting");
          require(proposal.votedAmount + amount <= startingBalanceList[msg.sender], "insufficient balance to vote");
          votingToken.transferFrom(msg.sender, address(this), amount);
          proposal.votedAmount += amount;
     }

     function endVoting() external {
          require(proposal.sTime != 0, "no ongoing voting");
          require(proposal.sTime + 24 < block.timestamp, "voting has not ended yet");
          require(votingToken.balanceOf(address(this))*2 > votingToken.totalSupply(), "voting failed");
     }
}
<\contract_to_be_analyzed\>