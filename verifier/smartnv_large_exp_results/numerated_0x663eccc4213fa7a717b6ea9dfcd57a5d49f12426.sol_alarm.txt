The contract you are going to analyze:

contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public price;
    uint public totalTokens;

    constructor(address _token, uint _price, uint _totalTokens) {
        owner = msg.sender;
        token = IERC20(_token);
        price = _price;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _quantity) external {
        require(_quantity > 0, "Invalid quantity");
        require(token.balanceOf(msg.sender) >= _quantity * price, "Insufficient balance");
        require(token.balanceOf(address(this)) >= _quantity, "Not enough tokens available");
        
        token.transferFrom(msg.sender, address(this), _quantity);
        token.transfer(msg.sender, _quantity);
    }

    function withdrawTokens(uint _quantity) external {
        require(msg.sender == owner, "Only owner can withdraw");
        require(token.balanceOf(address(this)) >= _quantity, "Not enough tokens available");
        
        token.transfer(owner, _quantity);
    }
} 

Please carefully study the contract and identify potential vulnerabilities from the following list: 
1) price manipulation 
2) privilege escalation 
3) business logic flaw 
4) inconsistent state update 
5) atomicity violation 
6) cross bridge inconsistency 
7) ID uniqueness violation 
8) reentrancy 
9) integer overflow/underflow 
10) arithmetic flaw 
11) suicidal contracts 
12) ether leakage 
13) insufficient gas 
14) incorrect visibility/ownership