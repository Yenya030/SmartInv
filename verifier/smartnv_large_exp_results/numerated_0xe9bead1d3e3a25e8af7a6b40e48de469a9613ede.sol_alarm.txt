contract TokenSwap {
    IERC20 public tokenA;
    IERC20 public tokenB;
    address public owner;

    constructor(address _tokenA, address _tokenB) {
        tokenA = IERC20(_tokenA);
        tokenB = IERC20(_tokenB);
        owner = msg.sender;
    }

    function swap(uint amountA, uint amountB) public {
        require(tokenA.balanceOf(msg.sender) >= amountA, "Insufficient balance for tokenA");
        require(tokenB.balanceOf(msg.sender) >= amountB, "Insufficient balance for tokenB");

        tokenA.transferFrom(msg.sender, address(this), amountA);
        tokenB.transfer(msg.sender, amountB);
    }

    function withdraw() public {
        require(msg.sender == owner, "Only owner can withdraw");
        
        tokenA.transfer(owner, tokenA.balanceOf(address(this)));
        tokenB.transfer(owner, tokenB.balanceOf(address(this)));
    }
}