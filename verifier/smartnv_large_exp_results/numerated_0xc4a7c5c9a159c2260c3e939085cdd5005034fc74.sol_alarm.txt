<\contract\>
contract PaymentProcessor {
    address public owner;
    mapping(address => uint) public balances;

    constructor() {
       owner = msg.sender;
    }

    function deposit() public payable {
       balances[msg.sender] += msg.value;
    }

    function withdraw(uint amount) public {
       require(balances[msg.sender] >= amount, "Insufficient balance");
       balances[msg.sender] -= amount;
       msg.sender.transfer(amount);
    }

    function transfer(address to, uint amount) public {
       require(balances[msg.sender] >= amount, "Insufficient balance");
       balances[msg.sender] -= amount;
       balances[to] += amount;
    }

    function setOwner(address newOwner) public {
       require(msg.sender == owner, "Only owner can call this function");
       owner = newOwner;
    }
}
<\contract\>