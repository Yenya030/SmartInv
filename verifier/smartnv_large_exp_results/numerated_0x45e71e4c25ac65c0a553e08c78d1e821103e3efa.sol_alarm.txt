<\contract\>
contract Marketplace {
    address public owner;
    mapping(uint => Product) public products;
    uint public productCounter;

    struct Product {
        uint id;
        string name;
        uint price;
        address owner;
        bool isSold;
    }

    constructor() {
        owner = msg.sender;
        productCounter = 0;
    }

    function addProduct(string memory _name, uint _price) public {
        products[productCounter] = Product(productCounter, _name, _price, msg.sender, false);
        productCounter++;
    }

    function buyProduct(uint _productId) public payable {
        require(products[_productId].id == _productId, "Product ID does not exist");
        require(products[_productId].price == msg.value, "Incorrect amount sent");
        require(!products[_productId].isSold, "Product is already sold");
        
        address payable productOwner = payable(products[_productId].owner);
        productOwner.transfer(msg.value);
        
        products[_productId].isSold = true;
    }
}
<\contract\>