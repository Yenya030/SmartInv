<\analyzed_contract\>
contract Marketplace {
     address public owner;
     mapping(address => uint) public products;
     mapping(address => bool) public purchased;
     uint public totalSales;

     constructor() {
          owner = msg.sender;
     }

     function addProduct(address product, uint price) public {
          require(msg.sender == owner, "Only owner can add products");
          products[product] = price;
     }

     function buyProduct(address product) public {
          require(products[product] > 0, "Product not available");
          require(!purchased[product], "Product already purchased");
          require(msg.value >= products[product], "Insufficient payment");
          purchased[product] = true;
          totalSales += products[product];
          (bool success, ) = owner.call{value: msg.value}("");
          require(success, "Payment transfer failed");
     }

     function withdrawFunds() public {
          require(msg.sender == owner, "Only owner can withdraw funds");
          (bool success, ) = msg.sender.call{value: address(this).balance}("");
          require(success, "Withdrawal failed");
     }
}
<\analyzed_contract\>