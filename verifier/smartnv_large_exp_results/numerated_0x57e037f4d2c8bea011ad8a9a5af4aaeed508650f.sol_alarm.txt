<\contract\> 
contract PaymentContract {
    address public owner;
    mapping(uint => uint) public payments;
    uint public totalAmount;
    
    constructor() {
        owner = msg.sender;
        totalAmount = 0;
    }
    
    function makePayment(uint _id, uint _amount) public {
        require(msg.sender == owner, "Only owner can make payments");
        payments[_id] = _amount;
        totalAmount += _amount;
    }
    
    function updatePayment(uint _id, uint _newAmount) public {
        require(msg.sender == owner, "Only owner can update payments");
        totalAmount -= payments[_id];
        payments[_id] = _newAmount;
        totalAmount += _newAmount;
    }
    
    function withdrawFunds(uint _amount) public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        require(_amount <= totalAmount, "Insufficient funds in contract");
        totalAmount -= _amount;
        payable(owner).transfer(_amount);
    }
}
<\contract\>