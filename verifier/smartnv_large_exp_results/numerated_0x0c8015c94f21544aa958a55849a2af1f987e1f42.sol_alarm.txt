<\contract_to_analyze\> 
contract VotingSystem {
         struct Voter {
             uint256 weight;
             bool voted;
             address delegate;
             uint256 vote;
         }
         struct Proposal {
             uint256 voteCount;
         }
         address public chairperson;
         mapping(address => Voter) public voters;
         Proposal[] public proposals;

         function delegate(address to) public {
             Voter storage sender = voters[msg.sender];
             require(!sender.voted, "You already voted.");
             require(to != msg.sender, "Self-delegation is disallowed.");

             while (voters[to].delegate != address(0)) {
                 to = voters[to].delegate;
                 require(to != msg.sender, "Loop in delegation.");
             }
             sender.voted = true;
             sender.delegate = to;
             Voter storage delegate_ = voters[to];
             if (delegate_.voted) {
                 proposals[delegate_.vote].voteCount += sender.weight;
             } else {
                 delegate_.weight += sender.weight;
             }
         }

         function vote(uint proposal) public {
             Voter storage sender = voters[msg.sender];
             require(!sender.voted, "Already voted.");
             sender.voted = true;
             sender.vote = proposal;
             proposals[proposal].voteCount += sender.weight;
         }

         function winningProposal() public view returns (uint winningProposal_) {
             uint256 winningVoteCount = 0;
             for (uint256 p = 0; p < proposals.length; p++) {
                 if (proposals[p].voteCount > winningVoteCount) {
                     winningVoteCount = proposals[p].voteCount;
                     winningProposal_ = p;
                 }
             }
         }

         function winnerName() public view returns (bytes memory winnerName_) {
             winnerName_ = abi.encodePacked(winningProposal());
         }
    }