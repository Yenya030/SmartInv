<\contract\> 
contract TokenSale {
     address public admin;
     IERC20 public token;
     uint public tokenPrice;
     uint public tokensSold;

     constructor(IERC20 _token, uint _tokenPrice) public {
         admin = msg.sender;
         token = _token;
         tokenPrice = _tokenPrice;
     }

     function buyTokens(uint _amount) public {
         require(token.balanceOf(msg.sender) >= _amount, "Insufficient balance");
         require(token.balanceOf(address(this)) >= _amount, "Insufficient tokens available");
         uint cost = _amount * tokenPrice;
         token.transferFrom(msg.sender, address(this), _amount);
         token.transfer(admin, cost);
         tokensSold += _amount;
     }

     function withdrawTokens(uint _amount) public {
         require(msg.sender == admin, "Only admin can withdraw tokens");
         require(token.balanceOf(address(this)) >= _amount, "Not enough tokens in contract");
         token.transfer(admin, _amount);
     }
}
<\contract\> 

The potential vulnerabilities in the given contract are:
1) Inconsistent state update: Tokens are transferred to the admin before updating the tokensSold counter, which may lead to incorrect tracking of the number of tokens sold.
2) Incorrect visibility/ownership: The withdrawTokens function should have restricted access to only the admin, but currently, any address can call this function. This could result in unauthorized withdrawal of tokens.
3) Insufficient gas: If the contract runs out of gas during the token transfer process, it may result in a failed transaction.
4) Integer overflow/underflow: There is a risk of integer overflow if the amount of tokens sold exceeds the maximum value representable by the uint data type.