Contract to be analyzed:
<\contract_to_be_analyzed\>
contract VotingSystem {
    struct Voter {
        bool voted;
        address delegate;
        uint vote;
    }
    
    mapping(address => Voter) public voters;
    mapping(uint => uint) public voteCount;

    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function vote(uint proposalId) public {
        require(!voters[msg.sender].voted, "Already voted.");
        voters[msg.sender].vote = proposalId;
        voteCount[proposalId]++;
    }

    function delegate(address to) public {
        require(!voters[msg.sender].voted, "Already voted.");
        require(to != msg.sender, "Self-delegation is not allowed.");

        while (voters[to].delegate != address(0)) {
            to = voters[to].delegate;
            require(to != msg.sender, "Found loop in delegation.");
        }

        voters[msg.sender].voted = true;
        voters[msg.sender].delegate = to;

        if (voters[to].voted) {
            voteCount[voters[to].vote]++;
        }
    }
}
<\contract_to_be_analyzed\>