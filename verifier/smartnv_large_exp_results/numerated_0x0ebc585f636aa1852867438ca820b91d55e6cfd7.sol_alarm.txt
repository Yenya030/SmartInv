<\contract\> 
contract TokenSale {
    address payable public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public tokensSold;

    constructor(address _tokenAddress, uint _tokenPrice) {
        owner = msg.sender;
        token = IERC20(_tokenAddress);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) external payable {
        uint totalCost = _amount * tokenPrice;
        require(msg.value >= totalCost, "Insufficient payment");
        
        token.transfer(msg.sender, _amount);
        tokensSold += _amount;

        if(msg.value > totalCost) {
            msg.sender.transfer(msg.value - totalCost);
        }
    }

    function endSale() external {
        require(msg.sender == owner, "You are not the owner");
        uint balance = address(this).balance;
        owner.transfer(balance);
    }
}
<\contract\> 

Output:
- Integer overflow/underflow: in the buyTokens function, when calculating the totalCost.
- Incorrect visibility/ownership: in the endSale function, the ownership check may not be strict enough.