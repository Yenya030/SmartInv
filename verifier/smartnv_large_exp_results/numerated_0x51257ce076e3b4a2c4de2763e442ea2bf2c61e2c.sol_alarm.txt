<\contract\>
contract Marketplace {
    address public owner;
    uint public totalItems;
    mapping(uint => Item) public items;

    struct Item {
        uint itemId;
        string itemName;
        uint price;
        address seller;
        bool isSold;
    }

    constructor() {
        owner = msg.sender;
        totalItems = 0;
    }

    function addItem(string memory _itemName, uint _price) public {
        require(msg.sender == owner, "Only owner can add an item");
        totalItems++;
        items[totalItems] = Item(totalItems, _itemName, _price, msg.sender, false);
    }

    function buyItem(uint _itemId) public payable {
        require(_itemId <= totalItems, "Invalid item ID");
        Item storage item = items[_itemId];
        require(item.isSold == false, "Item is already sold");
        require(msg.value >= item.price, "Insufficient funds");
        
        item.isSold = true;
        payable(item.seller).transfer(msg.value);
    }
}
<\contract\>