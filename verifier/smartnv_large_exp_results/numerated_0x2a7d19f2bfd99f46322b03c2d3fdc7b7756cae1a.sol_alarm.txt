<\contract\> 
contract VotingSystem {
     struct Voter {
          bool voted;
          address delegate;
          uint vote;
     }
     struct Proposal {
          uint256 startTime; 
          uint256 endTime;
          uint256 totalVotes;
          address proposer;
     }
     
     mapping(address => Voter) public voters;
     mapping(uint256 => Proposal) public proposals;
     address public admin;
     bool public votingOpen;

     function startVoting(uint256 _startTime, uint256 _endTime) external {
          require(msg.sender == admin, "only admin can start voting");
          votingOpen = true;
          proposals[_startTime] = Proposal(_startTime, _endTime, 0, msg.sender);
     }

     function vote(uint256 _proposalID, uint _vote) external {
          require(votingOpen, "voting is not open");
          require(voters[msg.sender].voted == false, "address has already voted");
          
          voters[msg.sender].voted = true;
          voters[msg.sender].vote = _vote;
          proposals[_proposalID].totalVotes += 1;
     }

     function endVoting(uint256 _endTime) external {
          require(msg.sender == admin, "only admin can end voting");
          require(votingOpen, "voting is not open");
          votingOpen = false;
          // logic to determine winning proposal and execute actions based on it
     }
}
<\contract\>