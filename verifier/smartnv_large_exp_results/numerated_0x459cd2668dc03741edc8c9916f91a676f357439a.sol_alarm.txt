<\contract\> 
contract VotingSystem {
    uint256 public totalVotes;
    address public admin;

    mapping(address => bool) public hasVoted;

    constructor() {
        admin = msg.sender;
    }

    function vote() public {
        require(!hasVoted[msg.sender], "Already voted");
        totalVotes++;
        hasVoted[msg.sender] = true;
    }

    function changeAdmin(address newAdmin) public {
        require(msg.sender == admin, "Only admin can change admin");
        admin = newAdmin;
    }
}
<\contract\> 

Potential vulnerabilities in the contract:
- Incorrect visibility/ownership: The `admin` variable is publicly visible, which may expose sensitive information. The `changeAdmin` function allows any caller to change the admin, which can lead to privilege escalation.
- ID uniqueness violation: The `hasVoted` mapping only checks if the user has voted, but it doesn't track unique identifiers for each user, potentially allowing multiple votes from the same address.
- Inconsistent state update: The `vote` function updates `totalVotes` and `hasVoted` state variables independently, which may lead to inconsistent state if one operation fails after the other has succeeded.