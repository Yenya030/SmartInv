<\contract\> 
contract TokenSale {
     IERC20 public token;
     address public owner;
     address public beneficiary;
     uint public tokenPrice;
     uint public totalTokens;
     mapping(address => uint) public purchasedTokens;

     constructor(address _token, uint _tokenPrice, uint _totalTokens, address _beneficiary) {
         token = IERC20(_token);
         owner = msg.sender;
         tokenPrice = _tokenPrice;
         totalTokens = _totalTokens;
         beneficiary = _beneficiary;
     }

     function buyTokens(uint _amount) public {
         require(_amount > 0, "Amount must be greater than 0");
         require(totalTokens >= _amount, "Not enough tokens available for sale");
         uint cost = _amount * tokenPrice;
         token.transferFrom(msg.sender, beneficiary, _amount);
         purchasedTokens[msg.sender] += _amount;
         totalTokens -= _amount;
     }

     function withdrawTokens() public {
         require(msg.sender == owner, "Only the owner can withdraw tokens");
         token.transfer(owner, token.balanceOf(address(this)));
     }
}
<\contract\>