<\analyzed_contract\>
contract Crowdsale {
     mapping(address => uint256) public balance;
     mapping(address => uint256) public tokenBalance;
     uint256 public tokenPrice;
     address public owner;
     IERC20 public token;

     constructor(address _token, uint256 _tokenPrice) {
         owner = msg.sender;
         token = IERC20(_token);
         tokenPrice = _tokenPrice;
     }

     function buyTokens(uint256 _amount) public {
         require(balance[msg.sender] + _amount >= balance[msg.sender], "Integer overflow");
         uint256 cost = _amount * tokenPrice;
         require(token.balanceOf(address(this)) >= _amount, "Insufficient token balance");
         token.transfer(msg.sender, _amount);
         balance[msg.sender] += cost;
         tokenBalance[msg.sender] += _amount;
     }

     function withdrawFunds() public {
         require(msg.sender == owner, "Only owner can withdraw funds");
         token.transfer(owner, token.balanceOf(address(this)));
     }

     function setTokenPrice(uint256 _price) public {
         require(msg.sender == owner, "Only owner can set token price");
         tokenPrice = _price;
     }
}
<\analyzed_contract\>