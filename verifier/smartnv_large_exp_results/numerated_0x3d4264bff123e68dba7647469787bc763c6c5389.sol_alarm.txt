<\contract\> 
contract TokenSale {
    mapping(address => uint) public balances;
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokensSold;

    constructor(address _token, uint _tokenPrice) {
        owner = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(_amount > 0, "Amount must be greater than 0");
        uint totalCost = _amount * tokenPrice;
        require(token.balanceOf(msg.sender) >= totalCost, "Insufficient token balance");

        token.transferFrom(msg.sender, address(this), totalCost);
        balances[msg.sender] += _amount;
        totalTokensSold += _amount;
    }

    function withdrawFunds() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        token.transfer(msg.sender, address(this).balance);
    }
}
<\contract\>