The contract provided for analysis:

<\contract\>
contract Escrow {
     address public buyer;
     address public seller;
     address public arbiter;
     uint public value;
     enum State { Created, Locked, Released, Inactive }
     State public state;

     constructor(address _seller, address _arbiter) public payable {
         buyer = msg.sender;
         seller = _seller;
         arbiter = _arbiter;
         value = msg.value;
         state = State.Created;
     }

     function confirmPurchase() public payable {
         require(msg.value == value, "Incorrect value");
         require(msg.sender == buyer, "Sender is not the buyer");
         state = State.Locked;
     }

     function confirmReceived() public {
         require(msg.sender == buyer || msg.sender == arbiter, "Sender is not the buyer or arbiter");
         state = State.Released;
         seller.transfer(address(this).balance);
     }
}
<\contract\> 

Output: 
1) atomicity violation
2) incorrect visibility/ownership