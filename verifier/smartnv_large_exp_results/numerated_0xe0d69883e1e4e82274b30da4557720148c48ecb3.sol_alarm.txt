contract Marketplace {
    address public owner;
    uint public totalItems;
    mapping(uint => Item) public items;

    struct Item {
        uint id;
        address seller;
        string name;
        uint price;
        bool sold;
    }

    constructor() {
        owner = msg.sender;
    }

    function addItem(string memory _name, uint _price) public {
        totalItems++;
        items[totalItems] = Item(totalItems, msg.sender, _name, _price, false);
    }

    function buyItem(uint _id) public payable {
        Item storage item = items[_id];
        require(msg.value >= item.price && !item.sold, "Not enough funds or item already sold");
        item.sold = true;
        payable(item.seller).transfer(msg.value);
    }

    function withdrawFunds() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        payable(owner).transfer(address(this).balance);
    }
} 

Output:
- incorrect visibility/ownership