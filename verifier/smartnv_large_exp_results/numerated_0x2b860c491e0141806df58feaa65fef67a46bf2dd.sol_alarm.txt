contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(address _tokenAddress, uint _price) {
        owner = msg.sender;
        token = IERC20(_tokenAddress);
        tokenPrice = _price;
    }

    function buyTokens(uint _amount) external {
        require(balances[msg.sender] + _amount * tokenPrice >= balances[msg.sender], "integer overflow");
        uint cost = _amount * tokenPrice;
        token.transferFrom(msg.sender, owner, cost);
        balances[msg.sender] += cost;
    }

    function withdrawTokens(uint _amount) external {
        require(balances[msg.sender] >= _amount, "insufficient balance");
        token.transfer(msg.sender, _amount);
        balances[msg.sender] -= _amount;
    }
}