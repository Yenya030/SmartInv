Contract: 

contract TokenSale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    mapping(address => uint) public balances;

    constructor(address _token, uint _tokenPrice) {
        owner = msg.sender;
        token = IERC20(_token);
        tokenPrice = _tokenPrice;
    }

    function buyTokens(uint _amount) public {
        require(token.balanceOf(owner) >= _amount, "Not enough tokens available");
        uint totalPrice = _amount * tokenPrice;
        require(msg.value >= totalPrice, "Insufficient payment amount");
        balances[msg.sender] += _amount;
        token.transferFrom(owner, msg.sender, _amount);
    }

    function withdrawTokens(address _recipient, uint _amount) public {
        require(msg.sender == owner, "Only owner can withdraw tokens");
        require(balances[_recipient] >= _amount, "Insufficient balance");
        balances[_recipient] -= _amount;
        token.transfer(_recipient, _amount);
    }
}

Potential vulnerabilities:
1) Inconsistent state update: The balance is updated before verifying the payment amount, which may lead to incorrect balances if the payment fails.
2) Integer overflow/underflow: Multiplying _amount and tokenPrice without overflow checks may result in overflow/underflow vulnerabilities.
3) Incorrect visibility/ownership: The token transfer ownership verification relies solely on the owner comparison, which might have visibility issues and could potentially be bypassed by other contracts or malicious actors.