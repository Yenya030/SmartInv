<\contract\>
contract TokenSale {
    address public tokenAddress;
    address public owner;
    uint public tokenPrice;
    uint public totalTokens;

    constructor(address _tokenAddress, uint _tokenPrice, uint _totalTokens) {
        tokenAddress = _tokenAddress;
        owner = msg.sender;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint tokensToBuy) external payable {
        require(msg.value == tokensToBuy * tokenPrice, "Incorrect payment amount");
        require(tokensToBuy <= totalTokens, "Not enough tokens left");
        
        totalTokens -= tokensToBuy;
        IERC20(tokenAddress).transfer(msg.sender, tokensToBuy);
    }

    function withdraw() external {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        payable(msg.sender).transfer(address(this).balance);
    }
}
<\contract\> 

1) Inconsistent state update
2) Incorrect visibility/ownership