<\your_contract_here\>
contract Crowdsale {
    address public owner;
    IERC20 public token;
    uint public tokenPrice;
    uint public totalTokens;
    
    constructor(IERC20 _token, uint _tokenPrice, uint _totalTokens) {
        owner = msg.sender;
        token = _token;
        tokenPrice = _tokenPrice;
        totalTokens = _totalTokens;
    }

    function buyTokens(uint _amount) public {
        uint totalCost = _amount * tokenPrice;
        require(totalCost <= token.balanceOf(msg.sender), "Not enough balance to buy tokens");
        token.transferFrom(owner, msg.sender, _amount);
    }

    function endCrowdsale() public {
        require(msg.sender == owner, "Only owner can end the crowdsale");
        token.transfer(owner, token.balanceOf(address(this)));
    }

    function updateTokenPrice(uint _newPrice) {
        require(msg.sender == owner, "Only owner can update token price");
        tokenPrice = _newPrice;
    }
}
Potential vulnerabilities: 
1) inconsistent state update
2) incorrect visibility/ownership