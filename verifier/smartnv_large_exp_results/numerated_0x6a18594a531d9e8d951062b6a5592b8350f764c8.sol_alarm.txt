<\contract\>
contract Escrow {
     address public payer;
     address public recipient;
     address public arbiter;
     uint public amount;
     enum State { Created, Locked, Inactive }
     State public state;

     constructor(address _payer, address _recipient, address _arbiter, uint _amount) {
         payer = _payer;
         recipient = _recipient;
         arbiter = _arbiter;
         amount = _amount;
         state = State.Created;
     }

     function deposit() public payable {
         require(msg.sender == payer, "Only payer can deposit funds");
         require(state == State.Created, "Funds can only be deposited in the Created state");
         state = State.Locked;
     }

     function release() public {
         require(msg.sender == arbiter, "Only arbiter can release funds");
         require(state == State.Locked, "Funds can only be released in the Locked state");
         recipient.transfer(amount);
         state = State.Inactive;
     }

     function refund() public {
         require(msg.sender == arbiter, "Only arbiter can refund funds");
         require(state == State.Locked, "Funds can only be refunded in the Locked state");
         payer.transfer(amount);
         state = State.Inactive;
     }
}
<\contract\>