Contract:
contract PaymentChannel {
    address public sender;
    address public receiver;
    uint public amount;
    uint public expiration;

    constructor(address _receiver, uint _amount, uint _expiration) public {
        sender = msg.sender;
        receiver = _receiver;
        amount = _amount;
        expiration = now + _expiration;
    }

    function closeChannel(uint _amount) public {
        require(msg.sender == receiver, "Only receiver can close the channel");
        require(now < expiration, "Channel has expired");
        receiver.transfer(_amount);
    }

    function extendExpiration(uint _extraTime) public {
        require(msg.sender == sender, "Only sender can extend expiration");
        expiration += _extraTime;
    }
}

Output:
- Incorrect visibility/ownership: The `closeChannel` function allows any user to close the channel, leading to potential unauthorized closure of the channel.
- Inconsistent state update: The expiration time is extended by the `extendExpiration` function without checking for expiration, which can lead to inconsistent state updates and potential misuse of the channel.