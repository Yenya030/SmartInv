Contract to be analyzed:

contract PaymentContract {
     address public owner;
     uint public totalAmount;
     mapping(address => uint) public balances;

     constructor() {
           owner = msg.sender;
           totalAmount = 0;
     }

     function deposit(uint amount) public {
           balances[msg.sender] += amount;
           totalAmount += amount;
     }

     function withdraw(uint amount) public {
           require(balances[msg.sender] >= amount, "Insufficient balance");
           balances[msg.sender] -= amount;
           totalAmount -= amount;
     }

     function transfer(address to, uint amount) public {
           require(balances[msg.sender] >= amount, "Insufficient balance");
           balances[msg.sender] -= amount;
           balances[to] += amount;
     }
}

Output:
- atomicity violation
- integer overflow/underflow