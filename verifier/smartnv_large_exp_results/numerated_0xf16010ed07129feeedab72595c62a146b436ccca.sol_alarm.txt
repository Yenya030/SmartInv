<\analyzed_contract\>
contract VotingSystem {
     struct Proposal {
          uint256 startTime; 
          uint256 votedAmount; 
          address proposer; 
     }
     Proposal public currentProposal;
     mapping(address => uint256) public startingBalanceList;
     
     function startVoting() external {
          require(currentProposal.startTime == 0,"ongoing proposal");
          currentProposal = Proposal(block.timestamp, 0, msg.sender);
          uint256 startingBalance = getStartingBalance(currentProposal.proposer);
          startingBalanceList[currentProposal.proposer] = startingBalance;
     }

     function vote(uint256 amount) external {
          require(currentProposal.startTime + 48 hours > block.timestamp, "voting period ended");
          require(currentProposal.votedAmount == 0, "already voted");
          // Assumption: The transfer function checks for sufficient balance
          // before transferring the amount
          transferFunds(msg.sender, address(this), amount);
          currentProposal.votedAmount = amount;
     }

     function endVoting() external {
          require(currentProposal.startTime != 0, "no proposal");
          require(currentProposal.startTime + 48 hours < block.timestamp, "voting is still ongoing");
          // Check if the voted amount is more than 50% of total supply
          require(currentProposal.votedAmount * 2 > totalSupply(), "proposal rejected");
     }
}
<\analyzed_contract\>